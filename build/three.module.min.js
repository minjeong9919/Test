/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const t="166",e={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},n={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},i=0,r=1,s=2,a=3,o=0,l=1,c=2,h=3,u=0,d=1,p=2,m=0,f=1,g=2,v=3,_=4,x=5,y=100,M=101,S=102,b=103,w=104,T=200,E=201,A=202,R=203,C=204,P=205,I=206,L=207,U=208,N=209,D=210,O=211,F=212,B=213,z=214,k=0,V=1,H=2,G=3,W=4,X=5,j=6,q=7,Y=0,Z=1,J=2,K=0,$=1,Q=2,tt=3,et=4,nt=5,it=6,rt=7,st="attached",at="detached",ot=300,lt=301,ct=302,ht=303,ut=304,dt=306,pt=1e3,mt=1001,ft=1002,gt=1003,vt=1004,_t=1004,xt=1005,yt=1005,Mt=1006,St=1007,bt=1007,wt=1008,Tt=1008,Et=1009,At=1010,Rt=1011,Ct=1012,Pt=1013,It=1014,Lt=1015,Ut=1016,Nt=1017,Dt=1018,Ot=1020,Ft=35902,Bt=1021,zt=1022,kt=1023,Vt=1024,Ht=1025,Gt=1026,Wt=1027,Xt=1028,jt=1029,qt=1030,Yt=1031,Zt=1032,Jt=1033,Kt=33776,$t=33777,Qt=33778,te=33779,ee=35840,ne=35841,ie=35842,re=35843,se=36196,ae=37492,oe=37496,le=37808,ce=37809,he=37810,ue=37811,de=37812,pe=37813,me=37814,fe=37815,ge=37816,ve=37817,_e=37818,xe=37819,ye=37820,Me=37821,Se=36492,be=36494,we=36495,Te=36283,Ee=36284,Ae=36285,Re=36286,Ce=2200,Pe=2201,Ie=2202,Le=2300,Ue=2301,Ne=2302,De=2400,Oe=2401,Fe=2402,Be=2500,ze=2501,ke=0,Ve=1,He=2,Ge=3200,We=3201,Xe=0,je=1,qe="",Ye="srgb",Ze="srgb-linear",Je="display-p3",Ke="display-p3-linear",$e="linear",Qe="srgb",tn="rec709",en="p3",nn=0,rn=7680,sn=7681,an=7682,on=7683,ln=34055,cn=34056,hn=5386,un=512,dn=513,pn=514,mn=515,fn=516,gn=517,vn=518,_n=519,xn=512,yn=513,Mn=514,Sn=515,bn=516,wn=517,Tn=518,En=519,An=35044,Rn=35048,Cn=35040,Pn=35045,In=35049,Ln=35041,Un=35046,Nn=35050,Dn=35042,On="100",Fn="300 es",Bn=2e3,zn=2001;class kn{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let e=0,i=n.length;e<i;e++)n[e].call(this,t);t.target=null}}}const Vn=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Hn=1234567;const Gn=Math.PI/180,Wn=180/Math.PI;function Xn(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(Vn[255&t]+Vn[t>>8&255]+Vn[t>>16&255]+Vn[t>>24&255]+"-"+Vn[255&e]+Vn[e>>8&255]+"-"+Vn[e>>16&15|64]+Vn[e>>24&255]+"-"+Vn[63&n|128]+Vn[n>>8&255]+"-"+Vn[n>>16&255]+Vn[n>>24&255]+Vn[255&i]+Vn[i>>8&255]+Vn[i>>16&255]+Vn[i>>24&255]).toLowerCase()}function jn(t,e,n){return Math.max(e,Math.min(n,t))}function qn(t,e){return(t%e+e)%e}function Yn(t,e,n){return(1-n)*t+n*e}function Zn(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return t/4294967295;case Uint16Array:return t/65535;case Uint8Array:return t/255;case Int32Array:return Math.max(t/2147483647,-1);case Int16Array:return Math.max(t/32767,-1);case Int8Array:return Math.max(t/127,-1);default:throw new Error("Invalid component type.")}}function Jn(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return Math.round(4294967295*t);case Uint16Array:return Math.round(65535*t);case Uint8Array:return Math.round(255*t);case Int32Array:return Math.round(2147483647*t);case Int16Array:return Math.round(32767*t);case Int8Array:return Math.round(127*t);default:throw new Error("Invalid component type.")}}const Kn={DEG2RAD:Gn,RAD2DEG:Wn,generateUUID:Xn,clamp:jn,euclideanModulo:qn,mapLinear:function(t,e,n,i,r){return i+(t-e)*(r-i)/(n-e)},inverseLerp:function(t,e,n){return t!==e?(n-t)/(e-t):0},lerp:Yn,damp:function(t,e,n,i){return Yn(t,e,1-Math.exp(-n*i))},pingpong:function(t,e=1){return e-Math.abs(qn(t,2*e)-e)},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(t){void 0!==t&&(Hn=t);let e=Hn+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296},degToRad:function(t){return t*Gn},radToDeg:function(t){return t*Wn},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))},setQuaternionFromProperEuler:function(t,e,n,i,r){const s=Math.cos,a=Math.sin,o=s(n/2),l=a(n/2),c=s((e+i)/2),h=a((e+i)/2),u=s((e-i)/2),d=a((e-i)/2),p=s((i-e)/2),m=a((i-e)/2);switch(r){case"XYX":t.set(o*h,l*u,l*d,o*c);break;case"YZY":t.set(l*d,o*h,l*u,o*c);break;case"ZXZ":t.set(l*u,l*d,o*h,o*c);break;case"XZX":t.set(o*h,l*m,l*p,o*c);break;case"YXY":t.set(l*p,o*h,l*m,o*c);break;case"ZYZ":t.set(l*m,l*p,o*h,o*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}},normalize:Jn,denormalize:Zn};class $n{constructor(t=0,e=0){$n.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(jn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,s=this.y-t.y;return this.x=r*n-s*i+t.x,this.y=r*i+s*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Qn{constructor(t,e,n,i,r,s,a,o,l){Qn.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==t&&this.set(t,e,n,i,r,s,a,o,l)}set(t,e,n,i,r,s,a,o,l){const c=this.elements;return c[0]=t,c[1]=i,c[2]=a,c[3]=e,c[4]=r,c[5]=o,c[6]=n,c[7]=s,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],a=n[3],o=n[6],l=n[1],c=n[4],h=n[7],u=n[2],d=n[5],p=n[8],m=i[0],f=i[3],g=i[6],v=i[1],_=i[4],x=i[7],y=i[2],M=i[5],S=i[8];return r[0]=s*m+a*v+o*y,r[3]=s*f+a*_+o*M,r[6]=s*g+a*x+o*S,r[1]=l*m+c*v+h*y,r[4]=l*f+c*_+h*M,r[7]=l*g+c*x+h*S,r[2]=u*m+d*v+p*y,r[5]=u*f+d*_+p*M,r[8]=u*g+d*x+p*S,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8];return e*s*c-e*a*l-n*r*c+n*a*o+i*r*l-i*s*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=c*s-a*l,u=a*o-c*r,d=l*r-s*o,p=e*h+n*u+i*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const m=1/p;return t[0]=h*m,t[1]=(i*l-c*n)*m,t[2]=(a*n-i*s)*m,t[3]=u*m,t[4]=(c*e-i*o)*m,t[5]=(i*r-a*e)*m,t[6]=d*m,t[7]=(n*o-l*e)*m,t[8]=(s*e-n*r)*m,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,r,s,a){const o=Math.cos(r),l=Math.sin(r);return this.set(n*o,n*l,-n*(o*s+l*a)+s+t,-i*l,i*o,-i*(-l*s+o*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(ti.makeScale(t,e)),this}rotate(t){return this.premultiply(ti.makeRotation(-t)),this}translate(t,e){return this.premultiply(ti.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}const ti=new Qn;function ei(t){for(let e=t.length-1;e>=0;--e)if(t[e]>=65535)return!0;return!1}const ni={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function ii(t,e){return new ni[t](e)}function ri(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function si(){const t=ri("canvas");return t.style.display="block",t}const ai={};function oi(t){t in ai||(ai[t]=!0,console.warn(t))}const li=(new Qn).set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),ci=(new Qn).set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),hi={[Ze]:{transfer:$e,primaries:tn,toReference:t=>t,fromReference:t=>t},[Ye]:{transfer:Qe,primaries:tn,toReference:t=>t.convertSRGBToLinear(),fromReference:t=>t.convertLinearToSRGB()},[Ke]:{transfer:$e,primaries:en,toReference:t=>t.applyMatrix3(ci),fromReference:t=>t.applyMatrix3(li)},[Je]:{transfer:Qe,primaries:en,toReference:t=>t.convertSRGBToLinear().applyMatrix3(ci),fromReference:t=>t.applyMatrix3(li).convertLinearToSRGB()}},ui=new Set([Ze,Ke]),di={enabled:!0,_workingColorSpace:Ze,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(t){if(!ui.has(t))throw new Error(`Unsupported working color space, "${t}".`);this._workingColorSpace=t},convert:function(t,e,n){if(!1===this.enabled||e===n||!e||!n)return t;const i=hi[e].toReference;return(0,hi[n].fromReference)(i(t))},fromWorkingColorSpace:function(t,e){return this.convert(t,this._workingColorSpace,e)},toWorkingColorSpace:function(t,e){return this.convert(t,e,this._workingColorSpace)},getPrimaries:function(t){return hi[t].primaries},getTransfer:function(t){return t===qe?$e:hi[t].transfer}};function pi(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function mi(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}let fi;class gi{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===fi&&(fi=ri("canvas")),fi.width=t.width,fi.height=t.height;const n=fi.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=fi}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const e=ri("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),r=i.data;for(let t=0;t<r.length;t++)r[t]=255*pi(r[t]/255);return n.putImageData(i,0,0),e}if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[t]=Math.floor(255*pi(e[t]/255)):e[t]=pi(e[t]);return{data:e,width:t.width,height:t.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let vi=0;class _i{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:vi++}),this.uuid=Xn(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.images[this.uuid])return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(null!==i){let t;if(Array.isArray(i)){t=[];for(let e=0,n=i.length;e<n;e++)i[e].isDataTexture?t.push(xi(i[e].image)):t.push(xi(i[e]))}else t=xi(i);n.url=t}return e||(t.images[this.uuid]=n),n}}function xi(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?gi.getDataURL(t):t.data?{data:Array.from(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let yi=0;class Mi extends kn{constructor(t=Mi.DEFAULT_IMAGE,e=Mi.DEFAULT_MAPPING,n=1001,i=1001,r=1006,s=1008,a=kt,o=Et,l=Mi.DEFAULT_ANISOTROPY,c=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:yi++}),this.uuid=Xn(),this.name="",this.source=new _i(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=s,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=o,this.offset=new $n(0,0),this.repeat=new $n(1,1),this.center=new $n(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Qn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=c,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==ot)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case pt:t.x=t.x-Math.floor(t.x);break;case mt:t.x=t.x<0?0:1;break;case ft:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case pt:t.y=t.y-Math.floor(t.y);break;case mt:t.y=t.y<0?0:1;break;case ft:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){!0===t&&this.pmremVersion++}}Mi.DEFAULT_IMAGE=null,Mi.DEFAULT_MAPPING=ot,Mi.DEFAULT_ANISOTROPY=1;class Si{constructor(t=0,e=0,n=0,i=1){Si.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i+s[12]*r,this.y=s[1]*e+s[5]*n+s[9]*i+s[13]*r,this.z=s[2]*e+s[6]*n+s[10]*i+s[14]*r,this.w=s[3]*e+s[7]*n+s[11]*i+s[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const s=.01,a=.1,o=t.elements,l=o[0],c=o[4],h=o[8],u=o[1],d=o[5],p=o[9],m=o[2],f=o[6],g=o[10];if(Math.abs(c-u)<s&&Math.abs(h-m)<s&&Math.abs(p-f)<s){if(Math.abs(c+u)<a&&Math.abs(h+m)<a&&Math.abs(p+f)<a&&Math.abs(l+d+g-3)<a)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,v=(g+1)/2,_=(c+u)/4,x=(h+m)/4,y=(p+f)/4;return t>o&&t>v?t<s?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(t),i=_/n,r=x/n):o>v?o<s?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(o),n=_/i,r=y/i):v<s?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(v),n=x/r,i=y/r),this.set(n,i,r,e),this}let v=Math.sqrt((f-p)*(f-p)+(h-m)*(h-m)+(u-c)*(u-c));return Math.abs(v)<.001&&(v=1),this.x=(f-p)/v,this.y=(h-m)/v,this.z=(u-c)/v,this.w=Math.acos((l+d+g-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class bi extends kn{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new Si(0,0,t,e),this.scissorTest=!1,this.viewport=new Si(0,0,t,e);const i={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Mt,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const r=new Mi(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);r.flipY=!1,r.generateMipmaps=n.generateMipmaps,r.internalFormat=n.internalFormat,this.textures=[];const s=n.count;for(let t=0;t<s;t++)this.textures[t]=r.clone(),this.textures[t].isRenderTargetTexture=!0;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,r=this.textures.length;i<r;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let e=0,n=t.textures.length;e<n;e++)this.textures[e]=t.textures[e].clone(),this.textures[e].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new _i(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class wi extends bi{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class Ti extends Mi{constructor(t=null,e=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=gt,this.minFilter=gt,this.wrapR=mt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class Ei extends wi{constructor(t=1,e=1,n=1,i={}){super(t,e,i),this.isWebGLArrayRenderTarget=!0,this.depth=n,this.texture=new Ti(null,t,e,n),this.texture.isRenderTargetTexture=!0}}class Ai extends Mi{constructor(t=null,e=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=gt,this.minFilter=gt,this.wrapR=mt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Ri extends wi{constructor(t=1,e=1,n=1,i={}){super(t,e,i),this.isWebGL3DRenderTarget=!0,this.depth=n,this.texture=new Ai(null,t,e,n),this.texture.isRenderTargetTexture=!0}}class Ci{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,r,s,a){let o=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3];const u=r[s+0],d=r[s+1],p=r[s+2],m=r[s+3];if(0===a)return t[e+0]=o,t[e+1]=l,t[e+2]=c,void(t[e+3]=h);if(1===a)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=m);if(h!==m||o!==u||l!==d||c!==p){let t=1-a;const e=o*u+l*d+c*p+h*m,n=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),s=Math.atan2(r,e*n);t=Math.sin(t*s)/r,a=Math.sin(a*s)/r}const r=a*n;if(o=o*t+u*r,l=l*t+d*r,c=c*t+p*r,h=h*t+m*r,t===1-a){const t=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=t,l*=t,c*=t,h*=t}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}static multiplyQuaternionsFlat(t,e,n,i,r,s){const a=n[i],o=n[i+1],l=n[i+2],c=n[i+3],h=r[s],u=r[s+1],d=r[s+2],p=r[s+3];return t[e]=a*p+c*h+o*d-l*u,t[e+1]=o*p+c*u+l*h-a*d,t[e+2]=l*p+c*d+a*u-o*h,t[e+3]=c*p-a*h-o*u-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,i=t._y,r=t._z,s=t._order,a=Math.cos,o=Math.sin,l=a(n/2),c=a(i/2),h=a(r/2),u=o(n/2),d=o(i/2),p=o(r/2);switch(s){case"XYZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"YXZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"ZXY":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"ZYX":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"YZX":this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p;break;case"XZY":this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}return!0===e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],s=e[1],a=e[5],o=e[9],l=e[2],c=e[6],h=e[10],u=n+a+h;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(c-o)*t,this._y=(r-l)*t,this._z=(s-i)*t}else if(n>a&&n>h){const t=2*Math.sqrt(1+n-a-h);this._w=(c-o)/t,this._x=.25*t,this._y=(i+s)/t,this._z=(r+l)/t}else if(a>h){const t=2*Math.sqrt(1+a-n-h);this._w=(r-l)/t,this._x=(i+s)/t,this._y=.25*t,this._z=(o+c)/t}else{const t=2*Math.sqrt(1+h-n-a);this._w=(s-i)/t,this._x=(r+l)/t,this._y=(o+c)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(jn(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(0===n)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,s=t._w,a=e._x,o=e._y,l=e._z,c=e._w;return this._x=n*c+s*a+i*l-r*o,this._y=i*c+s*o+r*a-n*l,this._z=r*c+s*l+n*o-i*a,this._w=s*c-n*a-i*o-r*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,i=this._y,r=this._z,s=this._w;let a=s*t._w+n*t._x+i*t._y+r*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=s,this._x=n,this._y=i,this._z=r,this;const o=1-a*a;if(o<=Number.EPSILON){const t=1-e;return this._w=t*s+e*this._w,this._x=t*n+e*this._x,this._y=t*i+e*this._y,this._z=t*r+e*this._z,this.normalize(),this}const l=Math.sqrt(o),c=Math.atan2(l,a),h=Math.sin((1-e)*c)/l,u=Math.sin(e*c)/l;return this._w=s*h+this._w*u,this._x=n*h+this._x*u,this._y=i*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),r=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),r*Math.sin(e),r*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Pi{constructor(t=0,e=0,n=0){Pi.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(Li.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Li.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,s=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*s,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*s,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*s,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,s=t.y,a=t.z,o=t.w,l=2*(s*i-a*n),c=2*(a*e-r*i),h=2*(r*n-s*e);return this.x=e+o*l+s*h-a*c,this.y=n+o*c+a*l-r*h,this.z=i+o*h+r*c-s*l,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z,s=e.x,a=e.y,o=e.z;return this.x=i*o-r*a,this.y=r*s-n*o,this.z=n*a-i*s,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return Ii.copy(this).projectOnVector(t),this.sub(Ii)}reflect(t){return this.sub(Ii.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(jn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=2*Math.random()-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Ii=new Pi,Li=new Ci;class Ui{constructor(t=new Pi(1/0,1/0,1/0),e=new Pi(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(Di.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(Di.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Di.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(void 0!==n){const i=n.getAttribute("position");if(!0===e&&void 0!==i&&!0!==t.isInstancedMesh)for(let e=0,n=i.count;e<n;e++)!0===t.isMesh?t.getVertexPosition(e,Di):Di.fromBufferAttribute(i,e),Di.applyMatrix4(t.matrixWorld),this.expandByPoint(Di);else void 0!==t.boundingBox?(null===t.boundingBox&&t.computeBoundingBox(),Oi.copy(t.boundingBox)):(null===n.boundingBox&&n.computeBoundingBox(),Oi.copy(n.boundingBox)),Oi.applyMatrix4(t.matrixWorld),this.union(Oi)}const i=t.children;for(let t=0,n=i.length;t<n;t++)this.expandByObject(i[t],e);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,Di),Di.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Gi),Wi.subVectors(this.max,Gi),Fi.subVectors(t.a,Gi),Bi.subVectors(t.b,Gi),zi.subVectors(t.c,Gi),ki.subVectors(Bi,Fi),Vi.subVectors(zi,Bi),Hi.subVectors(Fi,zi);let e=[0,-ki.z,ki.y,0,-Vi.z,Vi.y,0,-Hi.z,Hi.y,ki.z,0,-ki.x,Vi.z,0,-Vi.x,Hi.z,0,-Hi.x,-ki.y,ki.x,0,-Vi.y,Vi.x,0,-Hi.y,Hi.x,0];return!!qi(e,Fi,Bi,zi,Wi)&&(e=[1,0,0,0,1,0,0,0,1],!!qi(e,Fi,Bi,zi,Wi)&&(Xi.crossVectors(ki,Vi),e=[Xi.x,Xi.y,Xi.z],qi(e,Fi,Bi,zi,Wi)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Di).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=.5*this.getSize(Di).length()),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(Ni[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Ni[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Ni[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Ni[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Ni[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Ni[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Ni[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Ni[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Ni)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Ni=[new Pi,new Pi,new Pi,new Pi,new Pi,new Pi,new Pi,new Pi],Di=new Pi,Oi=new Ui,Fi=new Pi,Bi=new Pi,zi=new Pi,ki=new Pi,Vi=new Pi,Hi=new Pi,Gi=new Pi,Wi=new Pi,Xi=new Pi,ji=new Pi;function qi(t,e,n,i,r){for(let s=0,a=t.length-3;s<=a;s+=3){ji.fromArray(t,s);const a=r.x*Math.abs(ji.x)+r.y*Math.abs(ji.y)+r.z*Math.abs(ji.z),o=e.dot(ji),l=n.dot(ji),c=i.dot(ji);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>a)return!1}return!0}const Yi=new Ui,Zi=new Pi,Ji=new Pi;class Ki{constructor(t=new Pi,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):Yi.setFromPoints(t).getCenter(n);let i=0;for(let e=0,r=t.length;e<r;e++)i=Math.max(i,n.distanceToSquared(t[e]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Zi.subVectors(t,this.center);const e=Zi.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.addScaledVector(Zi,n/t),this.radius+=n}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(!0===this.center.equals(t.center)?this.radius=Math.max(this.radius,t.radius):(Ji.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Zi.copy(t.center).add(Ji)),this.expandByPoint(Zi.copy(t.center).sub(Ji))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const $i=new Pi,Qi=new Pi,tr=new Pi,er=new Pi,nr=new Pi,ir=new Pi,rr=new Pi;class sr{constructor(t=new Pi,e=new Pi(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,$i)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=$i.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):($i.copy(this.origin).addScaledVector(this.direction,e),$i.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){Qi.copy(t).add(e).multiplyScalar(.5),tr.copy(e).sub(t).normalize(),er.copy(this.origin).sub(Qi);const r=.5*t.distanceTo(e),s=-this.direction.dot(tr),a=er.dot(this.direction),o=-er.dot(tr),l=er.lengthSq(),c=Math.abs(1-s*s);let h,u,d,p;if(c>0)if(h=s*o-a,u=s*a-o,p=r*c,h>=0)if(u>=-p)if(u<=p){const t=1/c;h*=t,u*=t,d=h*(h+s*u+2*a)+u*(s*h+u+2*o)+l}else u=r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u=-r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u<=-p?(h=Math.max(0,-(-s*r+a)),u=h>0?-r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l):u<=p?(h=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+l):(h=Math.max(0,-(s*r+a)),u=h>0?r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l);else u=s>0?-r:r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;return n&&n.copy(this.origin).addScaledVector(this.direction,h),i&&i.copy(Qi).addScaledVector(tr,u),d}intersectSphere(t,e){$i.subVectors(t.center,this.origin);const n=$i.dot(this.direction),i=$i.dot($i)-n*n,r=t.radius*t.radius;if(i>r)return null;const s=Math.sqrt(r-i),a=n-s,o=n+s;return o<0?null:a<0?this.at(o,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(0===e)return!0;return t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,r,s,a,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(n=(t.min.x-u.x)*l,i=(t.max.x-u.x)*l):(n=(t.max.x-u.x)*l,i=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,s=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,s=(t.min.y-u.y)*c),n>s||r>i?null:((r>n||isNaN(n))&&(n=r),(s<i||isNaN(i))&&(i=s),h>=0?(a=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(a=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),n>o||a>i?null:((a>n||n!=n)&&(n=a),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,e)))}intersectsBox(t){return null!==this.intersectBox(t,$i)}intersectTriangle(t,e,n,i,r){nr.subVectors(e,t),ir.subVectors(n,t),rr.crossVectors(nr,ir);let s,a=this.direction.dot(rr);if(a>0){if(i)return null;s=1}else{if(!(a<0))return null;s=-1,a=-a}er.subVectors(this.origin,t);const o=s*this.direction.dot(ir.crossVectors(er,ir));if(o<0)return null;const l=s*this.direction.dot(nr.cross(er));if(l<0)return null;if(o+l>a)return null;const c=-s*er.dot(rr);return c<0?null:this.at(c/a,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class ar{constructor(t,e,n,i,r,s,a,o,l,c,h,u,d,p,m,f){ar.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==t&&this.set(t,e,n,i,r,s,a,o,l,c,h,u,d,p,m,f)}set(t,e,n,i,r,s,a,o,l,c,h,u,d,p,m,f){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=r,g[5]=s,g[9]=a,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=u,g[3]=d,g[7]=p,g[11]=m,g[15]=f,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new ar).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/or.setFromMatrixColumn(t,0).length(),r=1/or.setFromMatrixColumn(t,1).length(),s=1/or.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*s,e[9]=n[9]*s,e[10]=n[10]*s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,r=t.z,s=Math.cos(n),a=Math.sin(n),o=Math.cos(i),l=Math.sin(i),c=Math.cos(r),h=Math.sin(r);if("XYZ"===t.order){const t=s*c,n=s*h,i=a*c,r=a*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=n+i*l,e[5]=t-r*l,e[9]=-a*o,e[2]=r-t*l,e[6]=i+n*l,e[10]=s*o}else if("YXZ"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t+r*a,e[4]=i*a-n,e[8]=s*l,e[1]=s*h,e[5]=s*c,e[9]=-a,e[2]=n*a-i,e[6]=r+t*a,e[10]=s*o}else if("ZXY"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t-r*a,e[4]=-s*h,e[8]=i+n*a,e[1]=n+i*a,e[5]=s*c,e[9]=r-t*a,e[2]=-s*l,e[6]=a,e[10]=s*o}else if("ZYX"===t.order){const t=s*c,n=s*h,i=a*c,r=a*h;e[0]=o*c,e[4]=i*l-n,e[8]=t*l+r,e[1]=o*h,e[5]=r*l+t,e[9]=n*l-i,e[2]=-l,e[6]=a*o,e[10]=s*o}else if("YZX"===t.order){const t=s*o,n=s*l,i=a*o,r=a*l;e[0]=o*c,e[4]=r-t*h,e[8]=i*h+n,e[1]=h,e[5]=s*c,e[9]=-a*c,e[2]=-l*c,e[6]=n*h+i,e[10]=t-r*h}else if("XZY"===t.order){const t=s*o,n=s*l,i=a*o,r=a*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=t*h+r,e[5]=s*c,e[9]=n*h-i,e[2]=i*h-n,e[6]=a*c,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(cr,t,hr)}lookAt(t,e,n){const i=this.elements;return pr.subVectors(t,e),0===pr.lengthSq()&&(pr.z=1),pr.normalize(),ur.crossVectors(n,pr),0===ur.lengthSq()&&(1===Math.abs(n.z)?pr.x+=1e-4:pr.z+=1e-4,pr.normalize(),ur.crossVectors(n,pr)),ur.normalize(),dr.crossVectors(pr,ur),i[0]=ur.x,i[4]=dr.x,i[8]=pr.x,i[1]=ur.y,i[5]=dr.y,i[9]=pr.y,i[2]=ur.z,i[6]=dr.z,i[10]=pr.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],a=n[4],o=n[8],l=n[12],c=n[1],h=n[5],u=n[9],d=n[13],p=n[2],m=n[6],f=n[10],g=n[14],v=n[3],_=n[7],x=n[11],y=n[15],M=i[0],S=i[4],b=i[8],w=i[12],T=i[1],E=i[5],A=i[9],R=i[13],C=i[2],P=i[6],I=i[10],L=i[14],U=i[3],N=i[7],D=i[11],O=i[15];return r[0]=s*M+a*T+o*C+l*U,r[4]=s*S+a*E+o*P+l*N,r[8]=s*b+a*A+o*I+l*D,r[12]=s*w+a*R+o*L+l*O,r[1]=c*M+h*T+u*C+d*U,r[5]=c*S+h*E+u*P+d*N,r[9]=c*b+h*A+u*I+d*D,r[13]=c*w+h*R+u*L+d*O,r[2]=p*M+m*T+f*C+g*U,r[6]=p*S+m*E+f*P+g*N,r[10]=p*b+m*A+f*I+g*D,r[14]=p*w+m*R+f*L+g*O,r[3]=v*M+_*T+x*C+y*U,r[7]=v*S+_*E+x*P+y*N,r[11]=v*b+_*A+x*I+y*D,r[15]=v*w+_*R+x*L+y*O,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],s=t[1],a=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-i*l*h-r*a*u+n*l*u+i*a*d-n*o*d)+t[7]*(+e*o*d-e*l*u+r*s*u-i*s*d+i*l*c-r*o*c)+t[11]*(+e*l*h-e*a*d-r*s*h+n*s*d+r*a*c-n*l*c)+t[15]*(-i*a*c-e*o*h+e*a*u+i*s*h-n*s*u+n*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11],p=t[12],m=t[13],f=t[14],g=t[15],v=h*f*l-m*u*l+m*o*d-a*f*d-h*o*g+a*u*g,_=p*u*l-c*f*l-p*o*d+s*f*d+c*o*g-s*u*g,x=c*m*l-p*h*l+p*a*d-s*m*d-c*a*g+s*h*g,y=p*h*o-c*m*o-p*a*u+s*m*u+c*a*f-s*h*f,M=e*v+n*_+i*x+r*y;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/M;return t[0]=v*S,t[1]=(m*u*r-h*f*r-m*i*d+n*f*d+h*i*g-n*u*g)*S,t[2]=(a*f*r-m*o*r+m*i*l-n*f*l-a*i*g+n*o*g)*S,t[3]=(h*o*r-a*u*r-h*i*l+n*u*l+a*i*d-n*o*d)*S,t[4]=_*S,t[5]=(c*f*r-p*u*r+p*i*d-e*f*d-c*i*g+e*u*g)*S,t[6]=(p*o*r-s*f*r-p*i*l+e*f*l+s*i*g-e*o*g)*S,t[7]=(s*u*r-c*o*r+c*i*l-e*u*l-s*i*d+e*o*d)*S,t[8]=x*S,t[9]=(p*h*r-c*m*r-p*n*d+e*m*d+c*n*g-e*h*g)*S,t[10]=(s*m*r-p*a*r+p*n*l-e*m*l-s*n*g+e*a*g)*S,t[11]=(c*a*r-s*h*r-c*n*l+e*h*l+s*n*d-e*a*d)*S,t[12]=y*S,t[13]=(c*m*i-p*h*i+p*n*u-e*m*u-c*n*f+e*h*f)*S,t[14]=(p*a*i-s*m*i-p*n*o+e*m*o+s*n*f-e*a*f)*S,t[15]=(s*h*i-c*a*i+c*n*o-e*h*o-s*n*u+e*a*u)*S,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,s=t.x,a=t.y,o=t.z,l=r*s,c=r*a;return this.set(l*s+n,l*a-i*o,l*o+i*a,0,l*a+i*o,c*a+n,c*o-i*s,0,l*o-i*a,c*o+i*s,r*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,r,s){return this.set(1,n,r,0,t,1,s,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,r=e._x,s=e._y,a=e._z,o=e._w,l=r+r,c=s+s,h=a+a,u=r*l,d=r*c,p=r*h,m=s*c,f=s*h,g=a*h,v=o*l,_=o*c,x=o*h,y=n.x,M=n.y,S=n.z;return i[0]=(1-(m+g))*y,i[1]=(d+x)*y,i[2]=(p-_)*y,i[3]=0,i[4]=(d-x)*M,i[5]=(1-(u+g))*M,i[6]=(f+v)*M,i[7]=0,i[8]=(p+_)*S,i[9]=(f-v)*S,i[10]=(1-(u+m))*S,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let r=or.set(i[0],i[1],i[2]).length();const s=or.set(i[4],i[5],i[6]).length(),a=or.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],lr.copy(this);const o=1/r,l=1/s,c=1/a;return lr.elements[0]*=o,lr.elements[1]*=o,lr.elements[2]*=o,lr.elements[4]*=l,lr.elements[5]*=l,lr.elements[6]*=l,lr.elements[8]*=c,lr.elements[9]*=c,lr.elements[10]*=c,e.setFromRotationMatrix(lr),n.x=r,n.y=s,n.z=a,this}makePerspective(t,e,n,i,r,s,a=2e3){const o=this.elements,l=2*r/(e-t),c=2*r/(n-i),h=(e+t)/(e-t),u=(n+i)/(n-i);let d,p;if(a===Bn)d=-(s+r)/(s-r),p=-2*s*r/(s-r);else{if(a!==zn)throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);d=-s/(s-r),p=-s*r/(s-r)}return o[0]=l,o[4]=0,o[8]=h,o[12]=0,o[1]=0,o[5]=c,o[9]=u,o[13]=0,o[2]=0,o[6]=0,o[10]=d,o[14]=p,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(t,e,n,i,r,s,a=2e3){const o=this.elements,l=1/(e-t),c=1/(n-i),h=1/(s-r),u=(e+t)*l,d=(n+i)*c;let p,m;if(a===Bn)p=(s+r)*h,m=-2*h;else{if(a!==zn)throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);p=r*h,m=-1*h}return o[0]=2*l,o[4]=0,o[8]=0,o[12]=-u,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-d,o[2]=0,o[6]=0,o[10]=m,o[14]=-p,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<16;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const or=new Pi,lr=new ar,cr=new Pi(0,0,0),hr=new Pi(1,1,1),ur=new Pi,dr=new Pi,pr=new Pi,mr=new ar,fr=new Ci;class gr{constructor(t=0,e=0,n=0,i=gr.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,r=i[0],s=i[4],a=i[8],o=i[1],l=i[5],c=i[9],h=i[2],u=i[6],d=i[10];switch(e){case"XYZ":this._y=Math.asin(jn(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-s,r)):(this._x=Math.atan2(u,l),this._z=0);break;case"YXZ":this._x=Math.asin(-jn(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(a,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(jn(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-s,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-jn(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-s,l));break;case"YZX":this._z=Math.asin(jn(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(a,d));break;case"XZY":this._z=Math.asin(-jn(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(u,l),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-c,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return mr.makeRotationFromQuaternion(t),this.setFromRotationMatrix(mr,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return fr.setFromEuler(this),this.setFromQuaternion(fr,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}gr.DEFAULT_ORDER="XYZ";class vr{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}isEnabled(t){return 0!=(this.mask&(1<<t|0))}}let _r=0;const xr=new Pi,yr=new Ci,Mr=new ar,Sr=new Pi,br=new Pi,wr=new Pi,Tr=new Ci,Er=new Pi(1,0,0),Ar=new Pi(0,1,0),Rr=new Pi(0,0,1),Cr={type:"added"},Pr={type:"removed"},Ir={type:"childadded",child:null},Lr={type:"childremoved",child:null};class Ur extends kn{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:_r++}),this.uuid=Xn(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Ur.DEFAULT_UP.clone();const t=new Pi,e=new gr,n=new Ci,i=new Pi(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new ar},normalMatrix:{value:new Qn}}),this.matrix=new ar,this.matrixWorld=new ar,this.matrixAutoUpdate=Ur.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Ur.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new vr,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return yr.setFromAxisAngle(t,e),this.quaternion.multiply(yr),this}rotateOnWorldAxis(t,e){return yr.setFromAxisAngle(t,e),this.quaternion.premultiply(yr),this}rotateX(t){return this.rotateOnAxis(Er,t)}rotateY(t){return this.rotateOnAxis(Ar,t)}rotateZ(t){return this.rotateOnAxis(Rr,t)}translateOnAxis(t,e){return xr.copy(t).applyQuaternion(this.quaternion),this.position.add(xr.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Er,t)}translateY(t){return this.translateOnAxis(Ar,t)}translateZ(t){return this.translateOnAxis(Rr,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Mr.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?Sr.copy(t):Sr.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),br.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Mr.lookAt(br,Sr,this.up):Mr.lookAt(Sr,br,this.up),this.quaternion.setFromRotationMatrix(Mr),i&&(Mr.extractRotation(i.matrixWorld),yr.setFromRotationMatrix(Mr),this.quaternion.premultiply(yr.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(Cr),Ir.child=t,this.dispatchEvent(Ir),Ir.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Pr),Lr.child=t,this.dispatchEvent(Lr),Lr.child=null),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Mr.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Mr.multiply(t.parent.matrixWorld)),t.applyMatrix4(Mr),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(Cr),Ir.child=t,this.dispatchEvent(Ir),Ir.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let r=0,s=i.length;r<s;r++)i[r].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(br,t,wr),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(br,Tr,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++){e[n].updateMatrixWorld(t)}}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),!0===e){const t=this.children;for(let e=0,n=t.length;e<n;e++){t[e].updateWorldMatrix(!1,!0)}}}toJSON(t){const e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map((t=>({boxInitialized:t.boxInitialized,boxMin:t.box.min.toArray(),boxMax:t.box.max.toArray(),sphereInitialized:t.sphereInitialized,sphereRadius:t.sphere.radius,sphereCenter:t.sphere.center.toArray()}))),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),null!==this._colorsTexture&&(i.colorsTexture=this._colorsTexture.toJSON(t)),null!==this.boundingSphere&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),null!==this.boundingBox&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()})),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let e=0,i=n.length;e<i;e++){const i=n[e];r(t.shapes,i)}else r(t.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let n=0,i=this.material.length;n<i;n++)e.push(r(t.materials,this.material[n]));i.material=e}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++)i.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){const n=this.animations[e];i.animations.push(r(t.animations,n))}}if(e){const e=s(t.geometries),i=s(t.materials),r=s(t.textures),a=s(t.images),o=s(t.shapes),l=s(t.skeletons),c=s(t.animations),h=s(t.nodes);e.length>0&&(n.geometries=e),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),a.length>0&&(n.images=a),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c),h.length>0&&(n.nodes=h)}return n.object=i,n;function s(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}return this}}Ur.DEFAULT_UP=new Pi(0,1,0),Ur.DEFAULT_MATRIX_AUTO_UPDATE=!0,Ur.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Nr=new Pi,Dr=new Pi,Or=new Pi,Fr=new Pi,Br=new Pi,zr=new Pi,kr=new Pi,Vr=new Pi,Hr=new Pi,Gr=new Pi;class Wr{constructor(t=new Pi,e=new Pi,n=new Pi){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),Nr.subVectors(t,e),i.cross(Nr);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,n,i,r){Nr.subVectors(i,e),Dr.subVectors(n,e),Or.subVectors(t,e);const s=Nr.dot(Nr),a=Nr.dot(Dr),o=Nr.dot(Or),l=Dr.dot(Dr),c=Dr.dot(Or),h=s*l-a*a;if(0===h)return r.set(0,0,0),null;const u=1/h,d=(l*o-a*c)*u,p=(s*c-a*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,n,i){return null!==this.getBarycoord(t,e,n,i,Fr)&&(Fr.x>=0&&Fr.y>=0&&Fr.x+Fr.y<=1)}static getInterpolation(t,e,n,i,r,s,a,o){return null===this.getBarycoord(t,e,n,i,Fr)?(o.x=0,o.y=0,"z"in o&&(o.z=0),"w"in o&&(o.w=0),null):(o.setScalar(0),o.addScaledVector(r,Fr.x),o.addScaledVector(s,Fr.y),o.addScaledVector(a,Fr.z),o)}static isFrontFacing(t,e,n,i){return Nr.subVectors(n,e),Dr.subVectors(t,e),Nr.cross(Dr).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Nr.subVectors(this.c,this.b),Dr.subVectors(this.a,this.b),.5*Nr.cross(Dr).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Wr.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Wr.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,i,r){return Wr.getInterpolation(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return Wr.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Wr.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let s,a;Br.subVectors(i,n),zr.subVectors(r,n),Vr.subVectors(t,n);const o=Br.dot(Vr),l=zr.dot(Vr);if(o<=0&&l<=0)return e.copy(n);Hr.subVectors(t,i);const c=Br.dot(Hr),h=zr.dot(Hr);if(c>=0&&h<=c)return e.copy(i);const u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return s=o/(o-c),e.copy(n).addScaledVector(Br,s);Gr.subVectors(t,r);const d=Br.dot(Gr),p=zr.dot(Gr);if(p>=0&&d<=p)return e.copy(r);const m=d*l-o*p;if(m<=0&&l>=0&&p<=0)return a=l/(l-p),e.copy(n).addScaledVector(zr,a);const f=c*p-d*h;if(f<=0&&h-c>=0&&d-p>=0)return kr.subVectors(r,i),a=(h-c)/(h-c+(d-p)),e.copy(i).addScaledVector(kr,a);const g=1/(f+m+u);return s=m*g,a=u*g,e.copy(n).addScaledVector(Br,s).addScaledVector(zr,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const Xr={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},jr={h:0,s:0,l:0},qr={h:0,s:0,l:0};function Yr(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}class Zr{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(void 0===e&&void 0===n){const e=t;e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Ye){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,di.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=di.workingColorSpace){return this.r=t,this.g=e,this.b=n,di.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=di.workingColorSpace){if(t=qn(t,1),e=jn(e,0,1),n=jn(n,0,1),0===e)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+e):n+e-n*e,r=2*n-i;this.r=Yr(r,i,t+1/3),this.g=Yr(r,i,t),this.b=Yr(r,i,t-1/3)}return di.toWorkingColorSpace(this,i),this}setStyle(t,e=Ye){function n(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let r;const s=i[1],a=i[2];switch(s){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,e);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,e);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const n=i[1],r=n.length;if(3===r)return this.setRGB(parseInt(n.charAt(0),16)/15,parseInt(n.charAt(1),16)/15,parseInt(n.charAt(2),16)/15,e);if(6===r)return this.setHex(parseInt(n,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Ye){const n=Xr[t.toLowerCase()];return void 0!==n?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=pi(t.r),this.g=pi(t.g),this.b=pi(t.b),this}copyLinearToSRGB(t){return this.r=mi(t.r),this.g=mi(t.g),this.b=mi(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Ye){return di.fromWorkingColorSpace(Jr.copy(this),t),65536*Math.round(jn(255*Jr.r,0,255))+256*Math.round(jn(255*Jr.g,0,255))+Math.round(jn(255*Jr.b,0,255))}getHexString(t=Ye){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=di.workingColorSpace){di.fromWorkingColorSpace(Jr.copy(this),e);const n=Jr.r,i=Jr.g,r=Jr.b,s=Math.max(n,i,r),a=Math.min(n,i,r);let o,l;const c=(a+s)/2;if(a===s)o=0,l=0;else{const t=s-a;switch(l=c<=.5?t/(s+a):t/(2-s-a),s){case n:o=(i-r)/t+(i<r?6:0);break;case i:o=(r-n)/t+2;break;case r:o=(n-i)/t+4}o/=6}return t.h=o,t.s=l,t.l=c,t}getRGB(t,e=di.workingColorSpace){return di.fromWorkingColorSpace(Jr.copy(this),e),t.r=Jr.r,t.g=Jr.g,t.b=Jr.b,t}getStyle(t=Ye){di.fromWorkingColorSpace(Jr.copy(this),t);const e=Jr.r,n=Jr.g,i=Jr.b;return t!==Ye?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(255*e)},${Math.round(255*n)},${Math.round(255*i)})`}offsetHSL(t,e,n){return this.getHSL(jr),this.setHSL(jr.h+t,jr.s+e,jr.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(jr),t.getHSL(qr);const n=Yn(jr.h,qr.h,e),i=Yn(jr.s,qr.s,e),r=Yn(jr.l,qr.l,e);return this.setHSL(n,i,r),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,r=t.elements;return this.r=r[0]*e+r[3]*n+r[6]*i,this.g=r[1]*e+r[4]*n+r[7]*i,this.b=r[2]*e+r[5]*n+r[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Jr=new Zr;Zr.NAMES=Xr;let Kr=0;class $r extends kn{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Kr++}),this.uuid=Xn(),this.name="",this.type="Material",this.blending=1,this.side=u,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=C,this.blendDst=P,this.blendEquation=y,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Zr(0,0,0),this.blendAlpha=0,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=rn,this.stencilZFail=rn,this.stencilZPass=rn,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n:console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`)}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function i(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),void 0!==this.sheen&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),void 0!==this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.dispersion&&(n.dispersion=this.dispersion),void 0!==this.iridescence&&(n.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(n.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),void 0!==this.anisotropy&&(n.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapRotation&&(n.envMapRotation=this.envMapRotation.toArray()),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),this.side!==u&&(n.side=this.side),!0===this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=!0),this.blendSrc!==C&&(n.blendSrc=this.blendSrc),this.blendDst!==P&&(n.blendDst=this.blendDst),this.blendEquation!==y&&(n.blendEquation=this.blendEquation),null!==this.blendSrcAlpha&&(n.blendSrcAlpha=this.blendSrcAlpha),null!==this.blendDstAlpha&&(n.blendDstAlpha=this.blendDstAlpha),null!==this.blendEquationAlpha&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),0!==this.blendAlpha&&(n.blendAlpha=this.blendAlpha),3!==this.depthFunc&&(n.depthFunc=this.depthFunc),!1===this.depthTest&&(n.depthTest=this.depthTest),!1===this.depthWrite&&(n.depthWrite=this.depthWrite),!1===this.colorWrite&&(n.colorWrite=this.colorWrite),255!==this.stencilWriteMask&&(n.stencilWriteMask=this.stencilWriteMask),519!==this.stencilFunc&&(n.stencilFunc=this.stencilFunc),0!==this.stencilRef&&(n.stencilRef=this.stencilRef),255!==this.stencilFuncMask&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==rn&&(n.stencilFail=this.stencilFail),this.stencilZFail!==rn&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==rn&&(n.stencilZPass=this.stencilZPass),!0===this.stencilWrite&&(n.stencilWrite=this.stencilWrite),void 0!==this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaHash&&(n.alphaHash=!0),!0===this.alphaToCoverage&&(n.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=!0),!0===this.forceSinglePass&&(n.forceSinglePass=!0),!0===this.wireframe&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=!0),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),!1===this.fog&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData),e){const e=i(t.textures),r=i(t.images);e.length>0&&(n.textures=e),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}onBeforeRender(){console.warn("Material: onBeforeRender() has been removed.")}}class Qr extends $r{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Zr(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new gr,this.combine=Y,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const ts=es();function es(){const t=new ArrayBuffer(4),e=new Float32Array(t),n=new Uint32Array(t),i=new Uint32Array(512),r=new Uint32Array(512);for(let t=0;t<256;++t){const e=t-127;e<-27?(i[t]=0,i[256|t]=32768,r[t]=24,r[256|t]=24):e<-14?(i[t]=1024>>-e-14,i[256|t]=1024>>-e-14|32768,r[t]=-e-1,r[256|t]=-e-1):e<=15?(i[t]=e+15<<10,i[256|t]=e+15<<10|32768,r[t]=13,r[256|t]=13):e<128?(i[t]=31744,i[256|t]=64512,r[t]=24,r[256|t]=24):(i[t]=31744,i[256|t]=64512,r[t]=13,r[256|t]=13)}const s=new Uint32Array(2048),a=new Uint32Array(64),o=new Uint32Array(64);for(let t=1;t<1024;++t){let e=t<<13,n=0;for(;0==(8388608&e);)e<<=1,n-=8388608;e&=-8388609,n+=947912704,s[t]=e|n}for(let t=1024;t<2048;++t)s[t]=939524096+(t-1024<<13);for(let t=1;t<31;++t)a[t]=t<<23;a[31]=1199570944,a[32]=2147483648;for(let t=33;t<63;++t)a[t]=2147483648+(t-32<<23);a[63]=3347054592;for(let t=1;t<64;++t)32!==t&&(o[t]=1024);return{floatView:e,uint32View:n,baseTable:i,shiftTable:r,mantissaTable:s,exponentTable:a,offsetTable:o}}function ns(t){Math.abs(t)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),t=jn(t,-65504,65504),ts.floatView[0]=t;const e=ts.uint32View[0],n=e>>23&511;return ts.baseTable[n]+((8388607&e)>>ts.shiftTable[n])}function is(t){const e=t>>10;return ts.uint32View[0]=ts.mantissaTable[ts.offsetTable[e]+(1023&t)]+ts.exponentTable[e],ts.floatView[0]}const rs={toHalfFloat:ns,fromHalfFloat:is},ss=new Pi,as=new $n;class os{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=n,this.usage=An,this._updateRange={offset:0,count:-1},this.updateRanges=[],this.gpuType=Lt,this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}get updateRange(){return oi("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."),this._updateRange}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,n=this.count;e<n;e++)as.fromBufferAttribute(this,e),as.applyMatrix3(t),this.setXY(e,as.x,as.y);else if(3===this.itemSize)for(let e=0,n=this.count;e<n;e++)ss.fromBufferAttribute(this,e),ss.applyMatrix3(t),this.setXYZ(e,ss.x,ss.y,ss.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)ss.fromBufferAttribute(this,e),ss.applyMatrix4(t),this.setXYZ(e,ss.x,ss.y,ss.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)ss.fromBufferAttribute(this,e),ss.applyNormalMatrix(t),this.setXYZ(e,ss.x,ss.y,ss.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)ss.fromBufferAttribute(this,e),ss.transformDirection(t),this.setXYZ(e,ss.x,ss.y,ss.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=Zn(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=Jn(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=Zn(e,this.array)),e}setX(t,e){return this.normalized&&(e=Jn(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=Zn(e,this.array)),e}setY(t,e){return this.normalized&&(e=Jn(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=Zn(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Jn(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=Zn(e,this.array)),e}setW(t,e){return this.normalized&&(e=Jn(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=Jn(e,this.array),n=Jn(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=Jn(e,this.array),n=Jn(n,this.array),i=Jn(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t*=this.itemSize,this.normalized&&(e=Jn(e,this.array),n=Jn(n,this.array),i=Jn(i,this.array),r=Jn(r,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),this.usage!==An&&(t.usage=this.usage),t}}class ls extends os{constructor(t,e,n){super(new Int8Array(t),e,n)}}class cs extends os{constructor(t,e,n){super(new Uint8Array(t),e,n)}}class hs extends os{constructor(t,e,n){super(new Uint8ClampedArray(t),e,n)}}class us extends os{constructor(t,e,n){super(new Int16Array(t),e,n)}}class ds extends os{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class ps extends os{constructor(t,e,n){super(new Int32Array(t),e,n)}}class ms extends os{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class fs extends os{constructor(t,e,n){super(new Uint16Array(t),e,n),this.isFloat16BufferAttribute=!0}getX(t){let e=is(this.array[t*this.itemSize]);return this.normalized&&(e=Zn(e,this.array)),e}setX(t,e){return this.normalized&&(e=Jn(e,this.array)),this.array[t*this.itemSize]=ns(e),this}getY(t){let e=is(this.array[t*this.itemSize+1]);return this.normalized&&(e=Zn(e,this.array)),e}setY(t,e){return this.normalized&&(e=Jn(e,this.array)),this.array[t*this.itemSize+1]=ns(e),this}getZ(t){let e=is(this.array[t*this.itemSize+2]);return this.normalized&&(e=Zn(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Jn(e,this.array)),this.array[t*this.itemSize+2]=ns(e),this}getW(t){let e=is(this.array[t*this.itemSize+3]);return this.normalized&&(e=Zn(e,this.array)),e}setW(t,e){return this.normalized&&(e=Jn(e,this.array)),this.array[t*this.itemSize+3]=ns(e),this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=Jn(e,this.array),n=Jn(n,this.array)),this.array[t+0]=ns(e),this.array[t+1]=ns(n),this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=Jn(e,this.array),n=Jn(n,this.array),i=Jn(i,this.array)),this.array[t+0]=ns(e),this.array[t+1]=ns(n),this.array[t+2]=ns(i),this}setXYZW(t,e,n,i,r){return t*=this.itemSize,this.normalized&&(e=Jn(e,this.array),n=Jn(n,this.array),i=Jn(i,this.array),r=Jn(r,this.array)),this.array[t+0]=ns(e),this.array[t+1]=ns(n),this.array[t+2]=ns(i),this.array[t+3]=ns(r),this}}class gs extends os{constructor(t,e,n){super(new Float32Array(t),e,n)}}let vs=0;const _s=new ar,xs=new Ur,ys=new Pi,Ms=new Ui,Ss=new Ui,bs=new Pi;class ws extends kn{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:vs++}),this.uuid=Xn(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(ei(t)?ms:ds)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new Qn).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(t),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return _s.makeRotationFromQuaternion(t),this.applyMatrix4(_s),this}rotateX(t){return _s.makeRotationX(t),this.applyMatrix4(_s),this}rotateY(t){return _s.makeRotationY(t),this.applyMatrix4(_s),this}rotateZ(t){return _s.makeRotationZ(t),this.applyMatrix4(_s),this}translate(t,e,n){return _s.makeTranslation(t,e,n),this.applyMatrix4(_s),this}scale(t,e,n){return _s.makeScale(t,e,n),this.applyMatrix4(_s),this}lookAt(t){return xs.lookAt(t),xs.updateMatrix(),this.applyMatrix4(xs.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(ys).negate(),this.translate(ys.x,ys.y,ys.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}return this.setAttribute("position",new gs(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Ui);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),void this.boundingBox.set(new Pi(-1/0,-1/0,-1/0),new Pi(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Ms.setFromBufferAttribute(n),this.morphTargetsRelative?(bs.addVectors(this.boundingBox.min,Ms.min),this.boundingBox.expandByPoint(bs),bs.addVectors(this.boundingBox.max,Ms.max),this.boundingBox.expandByPoint(bs)):(this.boundingBox.expandByPoint(Ms.min),this.boundingBox.expandByPoint(Ms.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Ki);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),void this.boundingSphere.set(new Pi,1/0);if(t){const n=this.boundingSphere.center;if(Ms.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Ss.setFromBufferAttribute(n),this.morphTargetsRelative?(bs.addVectors(Ms.min,Ss.min),Ms.expandByPoint(bs),bs.addVectors(Ms.max,Ss.max),Ms.expandByPoint(bs)):(Ms.expandByPoint(Ss.min),Ms.expandByPoint(Ss.max))}Ms.getCenter(n);let i=0;for(let e=0,r=t.count;e<r;e++)bs.fromBufferAttribute(t,e),i=Math.max(i,n.distanceToSquared(bs));if(e)for(let r=0,s=e.length;r<s;r++){const s=e[r],a=this.morphTargetsRelative;for(let e=0,r=s.count;e<r;e++)bs.fromBufferAttribute(s,e),a&&(ys.fromBufferAttribute(t,e),bs.add(ys)),i=Math.max(i,n.distanceToSquared(bs))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=e.position,i=e.normal,r=e.uv;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new os(new Float32Array(4*n.count),4));const s=this.getAttribute("tangent"),a=[],o=[];for(let t=0;t<n.count;t++)a[t]=new Pi,o[t]=new Pi;const l=new Pi,c=new Pi,h=new Pi,u=new $n,d=new $n,p=new $n,m=new Pi,f=new Pi;function g(t,e,i){l.fromBufferAttribute(n,t),c.fromBufferAttribute(n,e),h.fromBufferAttribute(n,i),u.fromBufferAttribute(r,t),d.fromBufferAttribute(r,e),p.fromBufferAttribute(r,i),c.sub(l),h.sub(l),d.sub(u),p.sub(u);const s=1/(d.x*p.y-p.x*d.y);isFinite(s)&&(m.copy(c).multiplyScalar(p.y).addScaledVector(h,-d.y).multiplyScalar(s),f.copy(h).multiplyScalar(d.x).addScaledVector(c,-p.x).multiplyScalar(s),a[t].add(m),a[e].add(m),a[i].add(m),o[t].add(f),o[e].add(f),o[i].add(f))}let v=this.groups;0===v.length&&(v=[{start:0,count:t.count}]);for(let e=0,n=v.length;e<n;++e){const n=v[e],i=n.start;for(let e=i,r=i+n.count;e<r;e+=3)g(t.getX(e+0),t.getX(e+1),t.getX(e+2))}const _=new Pi,x=new Pi,y=new Pi,M=new Pi;function S(t){y.fromBufferAttribute(i,t),M.copy(y);const e=a[t];_.copy(e),_.sub(y.multiplyScalar(y.dot(e))).normalize(),x.crossVectors(M,e);const n=x.dot(o[t])<0?-1:1;s.setXYZW(t,_.x,_.y,_.z,n)}for(let e=0,n=v.length;e<n;++e){const n=v[e],i=n.start;for(let e=i,r=i+n.count;e<r;e+=3)S(t.getX(e+0)),S(t.getX(e+1)),S(t.getX(e+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let n=this.getAttribute("normal");if(void 0===n)n=new os(new Float32Array(3*e.count),3),this.setAttribute("normal",n);else for(let t=0,e=n.count;t<e;t++)n.setXYZ(t,0,0,0);const i=new Pi,r=new Pi,s=new Pi,a=new Pi,o=new Pi,l=new Pi,c=new Pi,h=new Pi;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),m=t.getX(u+2);i.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),s.fromBufferAttribute(e,m),c.subVectors(s,r),h.subVectors(i,r),c.cross(h),a.fromBufferAttribute(n,d),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,m),a.add(c),o.add(c),l.add(c),n.setXYZ(d,a.x,a.y,a.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(m,l.x,l.y,l.z)}else for(let t=0,a=e.count;t<a;t+=3)i.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),s.fromBufferAttribute(e,t+2),c.subVectors(s,r),h.subVectors(i,r),c.cross(h),n.setXYZ(t+0,c.x,c.y,c.z),n.setXYZ(t+1,c.x,c.y,c.z),n.setXYZ(t+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)bs.fromBufferAttribute(t,e),bs.normalize(),t.setXYZ(e,bs.x,bs.y,bs.z)}toNonIndexed(){function t(t,e){const n=t.array,i=t.itemSize,r=t.normalized,s=new n.constructor(e.length*i);let a=0,o=0;for(let r=0,l=e.length;r<l;r++){a=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*i;for(let t=0;t<i;t++)s[o++]=n[a++]}return new os(s,i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new ws,n=this.index.array,i=this.attributes;for(const r in i){const s=t(i[r],n);e.setAttribute(r,s)}const r=this.morphAttributes;for(const i in r){const s=[],a=r[i];for(let e=0,i=a.length;e<i;e++){const i=t(a[e],n);s.push(i)}e.morphAttributes[i]=s}e.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let t=0,n=s.length;t<n;t++){const n=s[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const e in n){const i=n[e];t.data.attributes[e]=i.toJSON(t.data)}const i={};let r=!1;for(const e in this.morphAttributes){const n=this.morphAttributes[e],s=[];for(let e=0,i=n.length;e<i;e++){const i=n[e];s.push(i.toJSON(t.data))}s.length>0&&(i[e]=s,r=!0)}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));const a=this.boundingSphere;return null!==a&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;null!==n&&this.setIndex(n.clone(e));const i=t.attributes;for(const t in i){const n=i[t];this.setAttribute(t,n.clone(e))}const r=t.morphAttributes;for(const t in r){const n=[],i=r[t];for(let t=0,r=i.length;t<r;t++)n.push(i[t].clone(e));this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const s=t.groups;for(let t=0,e=s.length;t<e;t++){const e=s[t];this.addGroup(e.start,e.count,e.materialIndex)}const a=t.boundingBox;null!==a&&(this.boundingBox=a.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Ts=new ar,Es=new sr,As=new Ki,Rs=new Pi,Cs=new Pi,Ps=new Pi,Is=new Pi,Ls=new Pi,Us=new Pi,Ns=new $n,Ds=new $n,Os=new $n,Fs=new Pi,Bs=new Pi,zs=new Pi,ks=new Pi,Vs=new Pi;class Hs extends Ur{constructor(t=new ws,e=new Qr){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const n=t[e[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=n.length;t<e;t++){const e=n[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}getVertexPosition(t,e){const n=this.geometry,i=n.attributes.position,r=n.morphAttributes.position,s=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const a=this.morphTargetInfluences;if(r&&a){Us.set(0,0,0);for(let n=0,i=r.length;n<i;n++){const i=a[n],o=r[n];0!==i&&(Ls.fromBufferAttribute(o,t),s?Us.addScaledVector(Ls,i):Us.addScaledVector(Ls.sub(e),i))}e.add(Us)}return e}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0!==i){if(null===n.boundingSphere&&n.computeBoundingSphere(),As.copy(n.boundingSphere),As.applyMatrix4(r),Es.copy(t.ray).recast(t.near),!1===As.containsPoint(Es.origin)){if(null===Es.intersectSphere(As,Rs))return;if(Es.origin.distanceToSquared(Rs)>(t.far-t.near)**2)return}Ts.copy(r).invert(),Es.copy(t.ray).applyMatrix4(Ts),null!==n.boundingBox&&!1===Es.intersectsBox(n.boundingBox)||this._computeIntersections(t,e,Es)}}_computeIntersections(t,e,n){let i;const r=this.geometry,s=this.material,a=r.index,o=r.attributes.position,l=r.attributes.uv,c=r.attributes.uv1,h=r.attributes.normal,u=r.groups,d=r.drawRange;if(null!==a)if(Array.isArray(s))for(let r=0,o=u.length;r<o;r++){const o=u[r],p=s[o.materialIndex];for(let r=Math.max(o.start,d.start),s=Math.min(a.count,Math.min(o.start+o.count,d.start+d.count));r<s;r+=3){i=Gs(this,p,t,n,l,c,h,a.getX(r),a.getX(r+1),a.getX(r+2)),i&&(i.faceIndex=Math.floor(r/3),i.face.materialIndex=o.materialIndex,e.push(i))}}else{for(let r=Math.max(0,d.start),o=Math.min(a.count,d.start+d.count);r<o;r+=3){i=Gs(this,s,t,n,l,c,h,a.getX(r),a.getX(r+1),a.getX(r+2)),i&&(i.faceIndex=Math.floor(r/3),e.push(i))}}else if(void 0!==o)if(Array.isArray(s))for(let r=0,a=u.length;r<a;r++){const a=u[r],p=s[a.materialIndex];for(let r=Math.max(a.start,d.start),s=Math.min(o.count,Math.min(a.start+a.count,d.start+d.count));r<s;r+=3){i=Gs(this,p,t,n,l,c,h,r,r+1,r+2),i&&(i.faceIndex=Math.floor(r/3),i.face.materialIndex=a.materialIndex,e.push(i))}}else{for(let r=Math.max(0,d.start),a=Math.min(o.count,d.start+d.count);r<a;r+=3){i=Gs(this,s,t,n,l,c,h,r,r+1,r+2),i&&(i.faceIndex=Math.floor(r/3),e.push(i))}}}}function Gs(t,e,n,i,r,s,a,o,l,c){t.getVertexPosition(o,Cs),t.getVertexPosition(l,Ps),t.getVertexPosition(c,Is);const h=function(t,e,n,i,r,s,a,o){let l;if(l=e.side===d?i.intersectTriangle(a,s,r,!0,o):i.intersectTriangle(r,s,a,e.side===u,o),null===l)return null;Vs.copy(o),Vs.applyMatrix4(t.matrixWorld);const c=n.ray.origin.distanceTo(Vs);return c<n.near||c>n.far?null:{distance:c,point:Vs.clone(),object:t}}(t,e,n,i,Cs,Ps,Is,ks);if(h){r&&(Ns.fromBufferAttribute(r,o),Ds.fromBufferAttribute(r,l),Os.fromBufferAttribute(r,c),h.uv=Wr.getInterpolation(ks,Cs,Ps,Is,Ns,Ds,Os,new $n)),s&&(Ns.fromBufferAttribute(s,o),Ds.fromBufferAttribute(s,l),Os.fromBufferAttribute(s,c),h.uv1=Wr.getInterpolation(ks,Cs,Ps,Is,Ns,Ds,Os,new $n)),a&&(Fs.fromBufferAttribute(a,o),Bs.fromBufferAttribute(a,l),zs.fromBufferAttribute(a,c),h.normal=Wr.getInterpolation(ks,Cs,Ps,Is,Fs,Bs,zs,new Pi),h.normal.dot(i.direction)>0&&h.normal.multiplyScalar(-1));const t={a:o,b:l,c:c,normal:new Pi,materialIndex:0};Wr.getNormal(Cs,Ps,Is,t.normal),h.face=t}return h}class Ws extends ws{constructor(t=1,e=1,n=1,i=1,r=1,s=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:s};const a=this;i=Math.floor(i),r=Math.floor(r),s=Math.floor(s);const o=[],l=[],c=[],h=[];let u=0,d=0;function p(t,e,n,i,r,s,p,m,f,g,v){const _=s/f,x=p/g,y=s/2,M=p/2,S=m/2,b=f+1,w=g+1;let T=0,E=0;const A=new Pi;for(let s=0;s<w;s++){const a=s*x-M;for(let o=0;o<b;o++){const u=o*_-y;A[t]=u*i,A[e]=a*r,A[n]=S,l.push(A.x,A.y,A.z),A[t]=0,A[e]=0,A[n]=m>0?1:-1,c.push(A.x,A.y,A.z),h.push(o/f),h.push(1-s/g),T+=1}}for(let t=0;t<g;t++)for(let e=0;e<f;e++){const n=u+e+b*t,i=u+e+b*(t+1),r=u+(e+1)+b*(t+1),s=u+(e+1)+b*t;o.push(n,i,s),o.push(i,r,s),E+=6}a.addGroup(d,E,v),d+=E,u+=T}p("z","y","x",-1,-1,n,e,t,s,r,0),p("z","y","x",1,-1,n,e,-t,s,r,1),p("x","z","y",1,1,t,n,e,i,s,2),p("x","z","y",1,-1,t,n,-e,i,s,3),p("x","y","z",1,-1,t,e,n,i,r,4),p("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(o),this.setAttribute("position",new gs(l,3)),this.setAttribute("normal",new gs(c,3)),this.setAttribute("uv",new gs(h,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Ws(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function Xs(t){const e={};for(const n in t){e[n]={};for(const i in t[n]){const r=t[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[n][i]=null):e[n][i]=r.clone():Array.isArray(r)?e[n][i]=r.slice():e[n][i]=r}}return e}function js(t){const e={};for(let n=0;n<t.length;n++){const i=Xs(t[n]);for(const t in i)e[t]=i[t]}return e}function qs(t){const e=t.getRenderTarget();return null===e?t.outputColorSpace:!0===e.isXRRenderTarget?e.texture.colorSpace:di.workingColorSpace}const Ys={clone:Xs,merge:js};class Zs extends $r{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=Xs(t.uniforms),this.uniformsGroups=function(t){const e=[];for(let n=0;n<t.length;n++)e.push(t[n].clone());return e}(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n].value;i&&i.isTexture?e.uniforms[n]={type:"t",value:i.toJSON(t).uuid}:i&&i.isColor?e.uniforms[n]={type:"c",value:i.getHex()}:i&&i.isVector2?e.uniforms[n]={type:"v2",value:i.toArray()}:i&&i.isVector3?e.uniforms[n]={type:"v3",value:i.toArray()}:i&&i.isVector4?e.uniforms[n]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?e.uniforms[n]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?e.uniforms[n]={type:"m4",value:i.toArray()}:e.uniforms[n]={value:i}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const t in this.extensions)!0===this.extensions[t]&&(n[t]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}class Js extends Ur{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new ar,this.projectionMatrix=new ar,this.projectionMatrixInverse=new ar,this.coordinateSystem=Bn}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}const Ks=new Pi,$s=new $n,Qs=new $n;class ta extends Js{constructor(t=50,e=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*Wn*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*Gn*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*Wn*Math.atan(Math.tan(.5*Gn*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){Ks.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(Ks.x,Ks.y).multiplyScalar(-t/Ks.z),Ks.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(Ks.x,Ks.y).multiplyScalar(-t/Ks.z)}getViewSize(t,e){return this.getViewBounds(t,$s,Qs),e.subVectors(Qs,$s)}setViewOffset(t,e,n,i,r,s){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*Gn*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i;const s=this.view;if(null!==this.view&&this.view.enabled){const t=s.fullWidth,a=s.fullHeight;r+=s.offsetX*i/t,e-=s.offsetY*n/a,i*=s.width/t,n*=s.height/a}const a=this.filmOffset;0!==a&&(r+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const ea=-90;class na extends Ur{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new ta(ea,1,t,e);i.layers=this.layers,this.add(i);const r=new ta(ea,1,t,e);r.layers=this.layers,this.add(r);const s=new ta(ea,1,t,e);s.layers=this.layers,this.add(s);const a=new ta(ea,1,t,e);a.layers=this.layers,this.add(a);const o=new ta(ea,1,t,e);o.layers=this.layers,this.add(o);const l=new ta(ea,1,t,e);l.layers=this.layers,this.add(l)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,i,r,s,a,o]=e;for(const t of e)this.remove(t);if(t===Bn)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),s.up.set(0,0,1),s.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else{if(t!==zn)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),s.up.set(0,0,-1),s.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1)}for(const t of e)this.add(t),t.updateMatrixWorld()}update(t,e){null===this.parent&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[r,s,a,o,l,c]=this.children,h=t.getRenderTarget(),u=t.getActiveCubeFace(),d=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const m=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,i),t.render(e,r),t.setRenderTarget(n,1,i),t.render(e,s),t.setRenderTarget(n,2,i),t.render(e,a),t.setRenderTarget(n,3,i),t.render(e,o),t.setRenderTarget(n,4,i),t.render(e,l),n.texture.generateMipmaps=m,t.setRenderTarget(n,5,i),t.render(e,c),t.setRenderTarget(h,u,d),t.xr.enabled=p,n.texture.needsPMREMUpdate=!0}}class ia extends Mi{constructor(t,e,n,i,r,s,a,o,l,c){super(t=void 0!==t?t:[],e=void 0!==e?e:lt,n,i,r,s,a,o,l,c),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class ra extends wi{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new ia(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:Mt}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},i=new Ws(5,5,5),r=new Zs({name:"CubemapFromEquirect",uniforms:Xs(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:d,blending:0});r.uniforms.tEquirect.value=e;const s=new Hs(i,r),a=e.minFilter;e.minFilter===wt&&(e.minFilter=Mt);return new na(1,10,this).update(t,s),e.minFilter=a,s.geometry.dispose(),s.material.dispose(),this}clear(t,e,n,i){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,n,i);t.setRenderTarget(r)}}const sa=new Pi,aa=new Pi,oa=new Qn;class la{constructor(t=new Pi(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=sa.subVectors(n,e).cross(aa.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(sa),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(t.start).addScaledVector(n,r)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||oa.getNormalMatrix(t),i=this.coplanarPoint(sa).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const ca=new Ki,ha=new Pi;class ua{constructor(t=new la,e=new la,n=new la,i=new la,r=new la,s=new la){this.planes=[t,e,n,i,r,s]}set(t,e,n,i,r,s){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(i),a[4].copy(r),a[5].copy(s),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=2e3){const n=this.planes,i=t.elements,r=i[0],s=i[1],a=i[2],o=i[3],l=i[4],c=i[5],h=i[6],u=i[7],d=i[8],p=i[9],m=i[10],f=i[11],g=i[12],v=i[13],_=i[14],x=i[15];if(n[0].setComponents(o-r,u-l,f-d,x-g).normalize(),n[1].setComponents(o+r,u+l,f+d,x+g).normalize(),n[2].setComponents(o+s,u+c,f+p,x+v).normalize(),n[3].setComponents(o-s,u-c,f-p,x-v).normalize(),n[4].setComponents(o-a,u-h,f-m,x-_).normalize(),e===Bn)n[5].setComponents(o+a,u+h,f+m,x+_).normalize();else{if(e!==zn)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);n[5].setComponents(a,h,m,_).normalize()}return this}intersectsObject(t){if(void 0!==t.boundingSphere)null===t.boundingSphere&&t.computeBoundingSphere(),ca.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;null===e.boundingSphere&&e.computeBoundingSphere(),ca.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(ca)}intersectsSprite(t){return ca.center.set(0,0,0),ca.radius=.7071067811865476,ca.applyMatrix4(t.matrixWorld),this.intersectsSphere(ca)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let t=0;t<6;t++){if(e[t].distanceToPoint(n)<i)return!1}return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(ha.x=i.normal.x>0?t.max.x:t.min.x,ha.y=i.normal.y>0?t.max.y:t.min.y,ha.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(ha)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function da(){let t=null,e=!1,n=null,i=null;function r(e,s){n(e,s),i=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==n&&(i=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function pa(t){const e=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),e.get(t)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);const i=e.get(n);i&&(t.deleteBuffer(i.buffer),e.delete(n))},update:function(n,i){if(n.isGLBufferAttribute){const t=e.get(n);return void((!t||t.version<n.version)&&e.set(n,{buffer:n.buffer,type:n.type,bytesPerElement:n.elementSize,version:n.version}))}n.isInterleavedBufferAttribute&&(n=n.data);const r=e.get(n);if(void 0===r)e.set(n,function(e,n){const i=e.array,r=e.usage,s=i.byteLength,a=t.createBuffer();let o;if(t.bindBuffer(n,a),t.bufferData(n,i,r),e.onUploadCallback(),i instanceof Float32Array)o=t.FLOAT;else if(i instanceof Uint16Array)o=e.isFloat16BufferAttribute?t.HALF_FLOAT:t.UNSIGNED_SHORT;else if(i instanceof Int16Array)o=t.SHORT;else if(i instanceof Uint32Array)o=t.UNSIGNED_INT;else if(i instanceof Int32Array)o=t.INT;else if(i instanceof Int8Array)o=t.BYTE;else if(i instanceof Uint8Array)o=t.UNSIGNED_BYTE;else{if(!(i instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+i);o=t.UNSIGNED_BYTE}return{buffer:a,type:o,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version,size:s}}(n,i));else if(r.version<n.version){if(r.size!==n.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");!function(e,n,i){const r=n.array,s=n._updateRange,a=n.updateRanges;if(t.bindBuffer(i,e),-1===s.count&&0===a.length&&t.bufferSubData(i,0,r),0!==a.length){for(let e=0,n=a.length;e<n;e++){const n=a[e];t.bufferSubData(i,n.start*r.BYTES_PER_ELEMENT,r,n.start,n.count)}n.clearUpdateRanges()}-1!==s.count&&(t.bufferSubData(i,s.offset*r.BYTES_PER_ELEMENT,r,s.offset,s.count),s.count=-1),n.onUploadCallback()}(r.buffer,n,i),r.version=n.version}}}}class ma extends ws{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2,s=e/2,a=Math.floor(n),o=Math.floor(i),l=a+1,c=o+1,h=t/a,u=e/o,d=[],p=[],m=[],f=[];for(let t=0;t<c;t++){const e=t*u-s;for(let n=0;n<l;n++){const i=n*h-r;p.push(i,-e,0),m.push(0,0,1),f.push(n/a),f.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<a;e++){const n=e+l*t,i=e+l*(t+1),r=e+1+l*(t+1),s=e+1+l*t;d.push(n,i,s),d.push(i,r,s)}this.setIndex(d),this.setAttribute("position",new gs(p,3)),this.setAttribute("normal",new gs(m,3)),this.setAttribute("uv",new gs(f,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new ma(t.width,t.height,t.widthSegments,t.heightSegments)}}const fa={alphahash_fragment:"#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",batching_pars_vertex:"#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i / size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif",batching_vertex:"#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphinstance_vertex:"#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t\n\t\t#else\n\t\t\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}"},ga={common:{diffuse:{value:new Zr(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Qn},alphaMap:{value:null},alphaMapTransform:{value:new Qn},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Qn}},envmap:{envMap:{value:null},envMapRotation:{value:new Qn},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Qn}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Qn}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Qn},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Qn},normalScale:{value:new $n(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Qn},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Qn}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Qn}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Qn}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Zr(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Zr(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Qn},alphaTest:{value:0},uvTransform:{value:new Qn}},sprite:{diffuse:{value:new Zr(16777215)},opacity:{value:1},center:{value:new $n(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Qn},alphaMap:{value:null},alphaMapTransform:{value:new Qn},alphaTest:{value:0}}},va={basic:{uniforms:js([ga.common,ga.specularmap,ga.envmap,ga.aomap,ga.lightmap,ga.fog]),vertexShader:fa.meshbasic_vert,fragmentShader:fa.meshbasic_frag},lambert:{uniforms:js([ga.common,ga.specularmap,ga.envmap,ga.aomap,ga.lightmap,ga.emissivemap,ga.bumpmap,ga.normalmap,ga.displacementmap,ga.fog,ga.lights,{emissive:{value:new Zr(0)}}]),vertexShader:fa.meshlambert_vert,fragmentShader:fa.meshlambert_frag},phong:{uniforms:js([ga.common,ga.specularmap,ga.envmap,ga.aomap,ga.lightmap,ga.emissivemap,ga.bumpmap,ga.normalmap,ga.displacementmap,ga.fog,ga.lights,{emissive:{value:new Zr(0)},specular:{value:new Zr(1118481)},shininess:{value:30}}]),vertexShader:fa.meshphong_vert,fragmentShader:fa.meshphong_frag},standard:{uniforms:js([ga.common,ga.envmap,ga.aomap,ga.lightmap,ga.emissivemap,ga.bumpmap,ga.normalmap,ga.displacementmap,ga.roughnessmap,ga.metalnessmap,ga.fog,ga.lights,{emissive:{value:new Zr(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:fa.meshphysical_vert,fragmentShader:fa.meshphysical_frag},toon:{uniforms:js([ga.common,ga.aomap,ga.lightmap,ga.emissivemap,ga.bumpmap,ga.normalmap,ga.displacementmap,ga.gradientmap,ga.fog,ga.lights,{emissive:{value:new Zr(0)}}]),vertexShader:fa.meshtoon_vert,fragmentShader:fa.meshtoon_frag},matcap:{uniforms:js([ga.common,ga.bumpmap,ga.normalmap,ga.displacementmap,ga.fog,{matcap:{value:null}}]),vertexShader:fa.meshmatcap_vert,fragmentShader:fa.meshmatcap_frag},points:{uniforms:js([ga.points,ga.fog]),vertexShader:fa.points_vert,fragmentShader:fa.points_frag},dashed:{uniforms:js([ga.common,ga.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:fa.linedashed_vert,fragmentShader:fa.linedashed_frag},depth:{uniforms:js([ga.common,ga.displacementmap]),vertexShader:fa.depth_vert,fragmentShader:fa.depth_frag},normal:{uniforms:js([ga.common,ga.bumpmap,ga.normalmap,ga.displacementmap,{opacity:{value:1}}]),vertexShader:fa.meshnormal_vert,fragmentShader:fa.meshnormal_frag},sprite:{uniforms:js([ga.sprite,ga.fog]),vertexShader:fa.sprite_vert,fragmentShader:fa.sprite_frag},background:{uniforms:{uvTransform:{value:new Qn},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:fa.background_vert,fragmentShader:fa.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Qn}},vertexShader:fa.backgroundCube_vert,fragmentShader:fa.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:fa.cube_vert,fragmentShader:fa.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:fa.equirect_vert,fragmentShader:fa.equirect_frag},distanceRGBA:{uniforms:js([ga.common,ga.displacementmap,{referencePosition:{value:new Pi},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:fa.distanceRGBA_vert,fragmentShader:fa.distanceRGBA_frag},shadow:{uniforms:js([ga.lights,ga.fog,{color:{value:new Zr(0)},opacity:{value:1}}]),vertexShader:fa.shadow_vert,fragmentShader:fa.shadow_frag}};va.physical={uniforms:js([va.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Qn},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Qn},clearcoatNormalScale:{value:new $n(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Qn},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Qn},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Qn},sheen:{value:0},sheenColor:{value:new Zr(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Qn},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Qn},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Qn},transmissionSamplerSize:{value:new $n},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Qn},attenuationDistance:{value:0},attenuationColor:{value:new Zr(0)},specularColor:{value:new Zr(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Qn},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Qn},anisotropyVector:{value:new $n},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Qn}}]),vertexShader:fa.meshphysical_vert,fragmentShader:fa.meshphysical_frag};const _a={r:0,b:0,g:0},xa=new gr,ya=new ar;function Ma(t,e,n,i,r,s,a){const o=new Zr(0);let l,c,h=!0===s?0:1,p=null,m=0,f=null;function g(t){let i=!0===t.isScene?t.background:null;if(i&&i.isTexture){i=(t.backgroundBlurriness>0?n:e).get(i)}return i}function v(e,n){e.getRGB(_a,qs(t)),i.buffers.color.setClear(_a.r,_a.g,_a.b,n,a)}return{getClearColor:function(){return o},setClearColor:function(t,e=1){o.set(t),h=e,v(o,h)},getClearAlpha:function(){return h},setClearAlpha:function(t){h=t,v(o,h)},render:function(e){let n=!1;const r=g(e);null===r?v(o,h):r&&r.isColor&&(v(r,1),n=!0);const s=t.xr.getEnvironmentBlendMode();"additive"===s?i.buffers.color.setClear(0,0,0,1,a):"alpha-blend"===s&&i.buffers.color.setClear(0,0,0,0,a),(t.autoClear||n)&&(i.buffers.depth.setTest(!0),i.buffers.depth.setMask(!0),i.buffers.color.setMask(!0),t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil))},addToRenderList:function(e,n){const i=g(n);i&&(i.isCubeTexture||i.mapping===dt)?(void 0===c&&(c=new Hs(new Ws(1,1,1),new Zs({name:"BackgroundCubeMaterial",uniforms:Xs(va.backgroundCube.uniforms),vertexShader:va.backgroundCube.vertexShader,fragmentShader:va.backgroundCube.fragmentShader,side:d,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(c)),xa.copy(n.backgroundRotation),xa.x*=-1,xa.y*=-1,xa.z*=-1,i.isCubeTexture&&!1===i.isRenderTargetTexture&&(xa.y*=-1,xa.z*=-1),c.material.uniforms.envMap.value=i,c.material.uniforms.flipEnvMap.value=i.isCubeTexture&&!1===i.isRenderTargetTexture?-1:1,c.material.uniforms.backgroundBlurriness.value=n.backgroundBlurriness,c.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,c.material.uniforms.backgroundRotation.value.setFromMatrix4(ya.makeRotationFromEuler(xa)),c.material.toneMapped=di.getTransfer(i.colorSpace)!==Qe,p===i&&m===i.version&&f===t.toneMapping||(c.material.needsUpdate=!0,p=i,m=i.version,f=t.toneMapping),c.layers.enableAll(),e.unshift(c,c.geometry,c.material,0,0,null)):i&&i.isTexture&&(void 0===l&&(l=new Hs(new ma(2,2),new Zs({name:"BackgroundMaterial",uniforms:Xs(va.background.uniforms),vertexShader:va.background.vertexShader,fragmentShader:va.background.fragmentShader,side:u,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(l)),l.material.uniforms.t2D.value=i,l.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,l.material.toneMapped=di.getTransfer(i.colorSpace)!==Qe,!0===i.matrixAutoUpdate&&i.updateMatrix(),l.material.uniforms.uvTransform.value.copy(i.matrix),p===i&&m===i.version&&f===t.toneMapping||(l.material.needsUpdate=!0,p=i,m=i.version,f=t.toneMapping),l.layers.enableAll(),e.unshift(l,l.geometry,l.material,0,0,null))}}}function Sa(t,e){const n=t.getParameter(t.MAX_VERTEX_ATTRIBS),i={},r=c(null);let s=r,a=!1;function o(e){return t.bindVertexArray(e)}function l(e){return t.deleteVertexArray(e)}function c(t){const e=[],i=[],r=[];for(let t=0;t<n;t++)e[t]=0,i[t]=0,r[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:i,attributeDivisors:r,object:t,attributes:{},index:null}}function h(){const t=s.newAttributes;for(let e=0,n=t.length;e<n;e++)t[e]=0}function u(t){d(t,0)}function d(e,n){const i=s.newAttributes,r=s.enabledAttributes,a=s.attributeDivisors;i[e]=1,0===r[e]&&(t.enableVertexAttribArray(e),r[e]=1),a[e]!==n&&(t.vertexAttribDivisor(e,n),a[e]=n)}function p(){const e=s.newAttributes,n=s.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==e[i]&&(t.disableVertexAttribArray(i),n[i]=0)}function m(e,n,i,r,s,a,o){!0===o?t.vertexAttribIPointer(e,n,i,s,a):t.vertexAttribPointer(e,n,i,r,s,a)}function f(){g(),a=!0,s!==r&&(s=r,o(s.object))}function g(){r.geometry=null,r.program=null,r.wireframe=!1}return{setup:function(n,r,l,f,g){let v=!1;const _=function(e,n,r){const s=!0===r.wireframe;let a=i[e.id];void 0===a&&(a={},i[e.id]=a);let o=a[n.id];void 0===o&&(o={},a[n.id]=o);let l=o[s];void 0===l&&(l=c(t.createVertexArray()),o[s]=l);return l}(f,l,r);s!==_&&(s=_,o(s.object)),v=function(t,e,n,i){const r=s.attributes,a=e.attributes;let o=0;const l=n.getAttributes();for(const e in l){if(l[e].location>=0){const n=r[e];let i=a[e];if(void 0===i&&("instanceMatrix"===e&&t.instanceMatrix&&(i=t.instanceMatrix),"instanceColor"===e&&t.instanceColor&&(i=t.instanceColor)),void 0===n)return!0;if(n.attribute!==i)return!0;if(i&&n.data!==i.data)return!0;o++}}return s.attributesNum!==o||s.index!==i}(n,f,l,g),v&&function(t,e,n,i){const r={},a=e.attributes;let o=0;const l=n.getAttributes();for(const e in l){if(l[e].location>=0){let n=a[e];void 0===n&&("instanceMatrix"===e&&t.instanceMatrix&&(n=t.instanceMatrix),"instanceColor"===e&&t.instanceColor&&(n=t.instanceColor));const i={};i.attribute=n,n&&n.data&&(i.data=n.data),r[e]=i,o++}}s.attributes=r,s.attributesNum=o,s.index=i}(n,f,l,g),null!==g&&e.update(g,t.ELEMENT_ARRAY_BUFFER),(v||a)&&(a=!1,function(n,i,r,s){h();const a=s.attributes,o=r.getAttributes(),l=i.defaultAttributeValues;for(const i in o){const r=o[i];if(r.location>=0){let o=a[i];if(void 0===o&&("instanceMatrix"===i&&n.instanceMatrix&&(o=n.instanceMatrix),"instanceColor"===i&&n.instanceColor&&(o=n.instanceColor)),void 0!==o){const i=o.normalized,a=o.itemSize,l=e.get(o);if(void 0===l)continue;const c=l.buffer,h=l.type,p=l.bytesPerElement,f=h===t.INT||h===t.UNSIGNED_INT||o.gpuType===Pt;if(o.isInterleavedBufferAttribute){const e=o.data,l=e.stride,g=o.offset;if(e.isInstancedInterleavedBuffer){for(let t=0;t<r.locationSize;t++)d(r.location+t,e.meshPerAttribute);!0!==n.isInstancedMesh&&void 0===s._maxInstanceCount&&(s._maxInstanceCount=e.meshPerAttribute*e.count)}else for(let t=0;t<r.locationSize;t++)u(r.location+t);t.bindBuffer(t.ARRAY_BUFFER,c);for(let t=0;t<r.locationSize;t++)m(r.location+t,a/r.locationSize,h,i,l*p,(g+a/r.locationSize*t)*p,f)}else{if(o.isInstancedBufferAttribute){for(let t=0;t<r.locationSize;t++)d(r.location+t,o.meshPerAttribute);!0!==n.isInstancedMesh&&void 0===s._maxInstanceCount&&(s._maxInstanceCount=o.meshPerAttribute*o.count)}else for(let t=0;t<r.locationSize;t++)u(r.location+t);t.bindBuffer(t.ARRAY_BUFFER,c);for(let t=0;t<r.locationSize;t++)m(r.location+t,a/r.locationSize,h,i,a*p,a/r.locationSize*t*p,f)}}else if(void 0!==l){const e=l[i];if(void 0!==e)switch(e.length){case 2:t.vertexAttrib2fv(r.location,e);break;case 3:t.vertexAttrib3fv(r.location,e);break;case 4:t.vertexAttrib4fv(r.location,e);break;default:t.vertexAttrib1fv(r.location,e)}}}}p()}(n,r,l,f),null!==g&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e.get(g).buffer))},reset:f,resetDefaultState:g,dispose:function(){f();for(const t in i){const e=i[t];for(const t in e){const n=e[t];for(const t in n)l(n[t].object),delete n[t];delete e[t]}delete i[t]}},releaseStatesOfGeometry:function(t){if(void 0===i[t.id])return;const e=i[t.id];for(const t in e){const n=e[t];for(const t in n)l(n[t].object),delete n[t];delete e[t]}delete i[t.id]},releaseStatesOfProgram:function(t){for(const e in i){const n=i[e];if(void 0===n[t.id])continue;const r=n[t.id];for(const t in r)l(r[t].object),delete r[t];delete n[t.id]}},initAttributes:h,enableAttribute:u,disableUnusedAttributes:p}}function ba(t,e,n){let i;function r(e,r,s){0!==s&&(t.drawArraysInstanced(i,e,r,s),n.update(r,i,s))}this.setMode=function(t){i=t},this.render=function(e,r){t.drawArrays(i,e,r),n.update(r,i,1)},this.renderInstances=r,this.renderMultiDraw=function(t,r,s){if(0===s)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i,t,0,r,0,s);let a=0;for(let t=0;t<s;t++)a+=r[t];n.update(a,i,1)},this.renderMultiDrawInstances=function(t,s,a,o){if(0===a)return;const l=e.get("WEBGL_multi_draw");if(null===l)for(let e=0;e<t.length;e++)r(t[e],s[e],o[e]);else{l.multiDrawArraysInstancedWEBGL(i,t,0,s,0,o,0,a);let e=0;for(let t=0;t<a;t++)e+=s[t];for(let t=0;t<o.length;t++)n.update(e,i,o[t])}}}function wa(t,e,n,i){let r;function s(e){if("highp"===e){if(t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.HIGH_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.MEDIUM_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let a=void 0!==n.precision?n.precision:"highp";const o=s(a);o!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",o,"instead."),a=o);const l=!0===n.logarithmicDepthBuffer,c=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),h=t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS);return{isWebGL2:!0,getMaxAnisotropy:function(){if(void 0!==r)return r;if(!0===e.has("EXT_texture_filter_anisotropic")){const n=e.get("EXT_texture_filter_anisotropic");r=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else r=0;return r},getMaxPrecision:s,textureFormatReadable:function(e){return e===kt||i.convert(e)===t.getParameter(t.IMPLEMENTATION_COLOR_READ_FORMAT)},textureTypeReadable:function(n){const r=n===Ut&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(n!==Et&&i.convert(n)!==t.getParameter(t.IMPLEMENTATION_COLOR_READ_TYPE)&&n!==Lt&&!r)},precision:a,logarithmicDepthBuffer:l,maxTextures:c,maxVertexTextures:h,maxTextureSize:t.getParameter(t.MAX_TEXTURE_SIZE),maxCubemapSize:t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),maxAttributes:t.getParameter(t.MAX_VERTEX_ATTRIBS),maxVertexUniforms:t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),maxVaryings:t.getParameter(t.MAX_VARYING_VECTORS),maxFragmentUniforms:t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),vertexTextures:h>0,maxSamples:t.getParameter(t.MAX_SAMPLES)}}function Ta(t){const e=this;let n=null,i=0,r=!1,s=!1;const a=new la,o=new Qn,l={value:null,needsUpdate:!1};function c(t,n,i,r){const s=null!==t?t.length:0;let c=null;if(0!==s){if(c=l.value,!0!==r||null===c){const e=i+4*s,r=n.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<e)&&(c=new Float32Array(e));for(let e=0,n=i;e!==s;++e,n+=4)a.copy(t[e]).applyMatrix4(r,o),a.normal.toArray(c,n),c[n+3]=a.constant}l.value=c,l.needsUpdate=!0}return e.numPlanes=s,e.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e){const n=0!==t.length||e||0!==i||r;return r=e,i=t.length,n},this.beginShadows=function(){s=!0,c(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(t,e){n=c(t,e,0)},this.setState=function(a,o,h){const u=a.clippingPlanes,d=a.clipIntersection,p=a.clipShadows,m=t.get(a);if(!r||null===u||0===u.length||s&&!p)s?c(null):function(){l.value!==n&&(l.value=n,l.needsUpdate=i>0);e.numPlanes=i,e.numIntersection=0}();else{const t=s?0:i,e=4*t;let r=m.clippingState||null;l.value=r,r=c(u,o,e,h);for(let t=0;t!==e;++t)r[t]=n[t];m.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function Ea(t){let e=new WeakMap;function n(t,e){return e===ht?t.mapping=lt:e===ut&&(t.mapping=ct),t}function i(t){const n=t.target;n.removeEventListener("dispose",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const s=r.mapping;if(s===ht||s===ut){if(e.has(r)){return n(e.get(r).texture,r.mapping)}{const s=r.image;if(s&&s.height>0){const a=new ra(s.height);return a.fromEquirectangularTexture(t,r),e.set(r,a),r.addEventListener("dispose",i),n(a.texture,r.mapping)}return null}}}return r},dispose:function(){e=new WeakMap}}}class Aa extends Js{constructor(t=-1,e=1,n=1,i=-1,r=.1,s=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=r,this.far=s,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,r,s){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,s=n+t,a=i+e,o=i-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,s=r+t*this.view.width,a-=e*this.view.offsetY,o=a-e*this.view.height}this.projectionMatrix.makeOrthographic(r,s,a,o,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}const Ra=[.125,.215,.35,.446,.526,.582],Ca=20,Pa=new Aa,Ia=new Zr;let La=null,Ua=0,Na=0,Da=!1;const Oa=(1+Math.sqrt(5))/2,Fa=1/Oa,Ba=[new Pi(-Oa,Fa,0),new Pi(Oa,Fa,0),new Pi(-Fa,0,Oa),new Pi(Fa,0,Oa),new Pi(0,Oa,-Fa),new Pi(0,Oa,Fa),new Pi(-1,1,-1),new Pi(1,1,-1),new Pi(-1,1,1),new Pi(1,1,1)];class za{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){La=this._renderer.getRenderTarget(),Ua=this._renderer.getActiveCubeFace(),Na=this._renderer.getActiveMipmapLevel(),Da=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(t,n,i,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=Ga(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=Ha(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(La,Ua,Na),this._renderer.xr.enabled=Da,t.scissorTest=!1,Va(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===lt||t.mapping===ct?this._setSize(0===t.image.length?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),La=this._renderer.getRenderTarget(),Ua=this._renderer.getActiveCubeFace(),Na=this._renderer.getActiveMipmapLevel(),Da=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:Mt,minFilter:Mt,generateMipmaps:!1,type:Ut,format:kt,colorSpace:Ze,depthBuffer:!1},i=ka(t,e,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=ka(t,e,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(t){const e=[],n=[],i=[];let r=t;const s=t-4+1+Ra.length;for(let a=0;a<s;a++){const s=Math.pow(2,r);n.push(s);let o=1/s;a>t-4?o=Ra[a-t+4-1]:0===a&&(o=0),i.push(o);const l=1/(s-2),c=-l,h=1+l,u=[c,c,h,c,h,h,c,c,h,h,c,h],d=6,p=6,m=3,f=2,g=1,v=new Float32Array(m*p*d),_=new Float32Array(f*p*d),x=new Float32Array(g*p*d);for(let t=0;t<d;t++){const e=t%3*2/3-1,n=t>2?0:-1,i=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];v.set(i,m*p*t),_.set(u,f*p*t);const r=[t,t,t,t,t,t];x.set(r,g*p*t)}const y=new ws;y.setAttribute("position",new os(v,m)),y.setAttribute("uv",new os(_,f)),y.setAttribute("faceIndex",new os(x,g)),e.push(y),r>4&&r--}return{lodPlanes:e,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(t,e,n){const i=new Float32Array(Ca),r=new Pi(0,1,0),s=new Zs({name:"SphericalGaussianBlur",defines:{n:Ca,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:Wa(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1});return s}(i,t,e)}return i}_compileMaterial(t){const e=new Hs(this._lodPlanes[0],t);this._renderer.compile(e,Pa)}_sceneToCubeUV(t,e,n,i){const r=new ta(90,1,e,n),s=[1,-1,1,1,1,1],a=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.toneMapping;o.getClearColor(Ia),o.toneMapping=K,o.autoClear=!1;const h=new Qr({name:"PMREM.Background",side:d,depthWrite:!1,depthTest:!1}),u=new Hs(new Ws,h);let p=!1;const m=t.background;m?m.isColor&&(h.color.copy(m),t.background=null,p=!0):(h.color.copy(Ia),p=!0);for(let e=0;e<6;e++){const n=e%3;0===n?(r.up.set(0,s[e],0),r.lookAt(a[e],0,0)):1===n?(r.up.set(0,0,s[e]),r.lookAt(0,a[e],0)):(r.up.set(0,s[e],0),r.lookAt(0,0,a[e]));const l=this._cubeSize;Va(i,n*l,e>2?l:0,l,l),o.setRenderTarget(i),p&&o.render(u,r),o.render(t,r)}u.geometry.dispose(),u.material.dispose(),o.toneMapping=c,o.autoClear=l,t.background=m}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===lt||t.mapping===ct;i?(null===this._cubemapMaterial&&(this._cubemapMaterial=Ga()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===t.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=Ha());const r=i?this._cubemapMaterial:this._equirectMaterial,s=new Hs(this._lodPlanes[0],r);r.uniforms.envMap.value=t;const a=this._cubeSize;Va(e,0,0,3*a,2*a),n.setRenderTarget(e),n.render(s,Pa)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const i=this._lodPlanes.length;for(let e=1;e<i;e++){const n=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]),r=Ba[(i-e-1)%Ba.length];this._blur(t,e-1,e,n,r)}e.autoClear=n}_blur(t,e,n,i,r){const s=this._pingPongRenderTarget;this._halfBlur(t,s,e,n,i,"latitudinal",r),this._halfBlur(s,t,n,n,i,"longitudinal",r)}_halfBlur(t,e,n,i,r,s,a){const o=this._renderer,l=this._blurMaterial;"latitudinal"!==s&&"longitudinal"!==s&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new Hs(this._lodPlanes[i],l),h=l.uniforms,u=this._sizeLods[n]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,m=isFinite(r)?1+Math.floor(3*p):Ca;m>Ca&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`);const f=[];let g=0;for(let t=0;t<Ca;++t){const e=t/p,n=Math.exp(-e*e/2);f.push(n),0===t?g+=n:t<m&&(g+=2*n)}for(let t=0;t<f.length;t++)f[t]=f[t]/g;h.envMap.value=t.texture,h.samples.value=m,h.weights.value=f,h.latitudinal.value="latitudinal"===s,a&&(h.poleAxis.value=a);const{_lodMax:v}=this;h.dTheta.value=d,h.mipInt.value=v-n;const _=this._sizeLods[i];Va(e,3*_*(i>v-4?i-v+4:0),4*(this._cubeSize-_),3*_,2*_),o.setRenderTarget(e),o.render(c,Pa)}}function ka(t,e,n){const i=new wi(t,e,n);return i.texture.mapping=dt,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function Va(t,e,n,i,r){t.viewport.set(e,n,i,r),t.scissor.set(e,n,i,r)}function Ha(){return new Zs({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Wa(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function Ga(){return new Zs({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Wa(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function Wa(){return"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"}function Xa(t){let e=new WeakMap,n=null;function i(t){const n=t.target;n.removeEventListener("dispose",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const s=r.mapping,a=s===ht||s===ut,o=s===lt||s===ct;if(a||o){let s=e.get(r);const l=void 0!==s?s.texture.pmremVersion:0;if(r.isRenderTargetTexture&&r.pmremVersion!==l)return null===n&&(n=new za(t)),s=a?n.fromEquirectangular(r,s):n.fromCubemap(r,s),s.texture.pmremVersion=r.pmremVersion,e.set(r,s),s.texture;if(void 0!==s)return s.texture;{const l=r.image;return a&&l&&l.height>0||o&&l&&function(t){let e=0;const n=6;for(let i=0;i<n;i++)void 0!==t[i]&&e++;return e===n}(l)?(null===n&&(n=new za(t)),s=a?n.fromEquirectangular(r):n.fromCubemap(r),s.texture.pmremVersion=r.pmremVersion,e.set(r,s),r.addEventListener("dispose",i),s.texture):null}}}return r},dispose:function(){e=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function ja(t){const e={};function n(n){if(void 0!==e[n])return e[n];let i;switch(n){case"WEBGL_depth_texture":i=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=t.getExtension(n)}return e[n]=i,i}return{has:function(t){return null!==n(t)},init:function(){n("EXT_color_buffer_float"),n("WEBGL_clip_cull_distance"),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture"),n("WEBGL_render_shared_exponent")},get:function(t){const e=n(t);return null===e&&oi("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function qa(t,e,n,i){const r={},s=new WeakMap;function a(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);for(const t in o.morphAttributes){const n=o.morphAttributes[t];for(let t=0,i=n.length;t<i;t++)e.remove(n[t])}o.removeEventListener("dispose",a),delete r[o.id];const l=s.get(o);l&&(e.remove(l),s.delete(o)),i.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(t){const n=[],i=t.index,r=t.attributes.position;let a=0;if(null!==i){const t=i.array;a=i.version;for(let e=0,i=t.length;e<i;e+=3){const i=t[e+0],r=t[e+1],s=t[e+2];n.push(i,r,r,s,s,i)}}else{if(void 0===r)return;{const t=r.array;a=r.version;for(let e=0,i=t.length/3-1;e<i;e+=3){const t=e+0,i=e+1,r=e+2;n.push(t,i,i,r,r,t)}}}const o=new(ei(n)?ms:ds)(n,1);o.version=a;const l=s.get(t);l&&e.remove(l),s.set(t,o)}return{get:function(t,e){return!0===r[e.id]||(e.addEventListener("dispose",a),r[e.id]=!0,n.memory.geometries++),e},update:function(n){const i=n.attributes;for(const n in i)e.update(i[n],t.ARRAY_BUFFER);const r=n.morphAttributes;for(const n in r){const i=r[n];for(let n=0,r=i.length;n<r;n++)e.update(i[n],t.ARRAY_BUFFER)}},getWireframeAttribute:function(t){const e=s.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return s.get(t)}}}function Ya(t,e,n){let i,r,s;function a(e,a,o){0!==o&&(t.drawElementsInstanced(i,a,r,e*s,o),n.update(a,i,o))}this.setMode=function(t){i=t},this.setIndex=function(t){r=t.type,s=t.bytesPerElement},this.render=function(e,a){t.drawElements(i,a,r,e*s),n.update(a,i,1)},this.renderInstances=a,this.renderMultiDraw=function(t,s,a){if(0===a)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i,s,0,r,t,0,a);let o=0;for(let t=0;t<a;t++)o+=s[t];n.update(o,i,1)},this.renderMultiDrawInstances=function(t,o,l,c){if(0===l)return;const h=e.get("WEBGL_multi_draw");if(null===h)for(let e=0;e<t.length;e++)a(t[e]/s,o[e],c[e]);else{h.multiDrawElementsInstancedWEBGL(i,o,0,r,t,0,c,0,l);let e=0;for(let t=0;t<l;t++)e+=o[t];for(let t=0;t<c.length;t++)n.update(e,i,c[t])}}}function Za(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(n,i,r){switch(e.calls++,i){case t.TRIANGLES:e.triangles+=r*(n/3);break;case t.LINES:e.lines+=r*(n/2);break;case t.LINE_STRIP:e.lines+=r*(n-1);break;case t.LINE_LOOP:e.lines+=r*n;break;case t.POINTS:e.points+=r*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function Ja(t,e,n){const i=new WeakMap,r=new Si;return{update:function(s,a,o){const l=s.morphTargetInfluences,c=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,h=void 0!==c?c.length:0;let u=i.get(a);if(void 0===u||u.count!==h){void 0!==u&&u.texture.dispose();const d=void 0!==a.morphAttributes.position,p=void 0!==a.morphAttributes.normal,m=void 0!==a.morphAttributes.color,f=a.morphAttributes.position||[],g=a.morphAttributes.normal||[],v=a.morphAttributes.color||[];let _=0;!0===d&&(_=1),!0===p&&(_=2),!0===m&&(_=3);let x=a.attributes.position.count*_,y=1;x>e.maxTextureSize&&(y=Math.ceil(x/e.maxTextureSize),x=e.maxTextureSize);const M=new Float32Array(x*y*4*h),S=new Ti(M,x,y,h);S.type=Lt,S.needsUpdate=!0;const b=4*_;for(let T=0;T<h;T++){const E=f[T],A=g[T],R=v[T],C=x*y*4*T;for(let P=0;P<E.count;P++){const I=P*b;!0===d&&(r.fromBufferAttribute(E,P),M[C+I+0]=r.x,M[C+I+1]=r.y,M[C+I+2]=r.z,M[C+I+3]=0),!0===p&&(r.fromBufferAttribute(A,P),M[C+I+4]=r.x,M[C+I+5]=r.y,M[C+I+6]=r.z,M[C+I+7]=0),!0===m&&(r.fromBufferAttribute(R,P),M[C+I+8]=r.x,M[C+I+9]=r.y,M[C+I+10]=r.z,M[C+I+11]=4===R.itemSize?r.w:1)}}function w(){S.dispose(),i.delete(a),a.removeEventListener("dispose",w)}u={count:h,texture:S,size:new $n(x,y)},i.set(a,u),a.addEventListener("dispose",w)}if(!0===s.isInstancedMesh&&null!==s.morphTexture)o.getUniforms().setValue(t,"morphTexture",s.morphTexture,n);else{let L=0;for(let N=0;N<l.length;N++)L+=l[N];const U=a.morphTargetsRelative?1:1-L;o.getUniforms().setValue(t,"morphTargetBaseInfluence",U),o.getUniforms().setValue(t,"morphTargetInfluences",l)}o.getUniforms().setValue(t,"morphTargetsTexture",u.texture,n),o.getUniforms().setValue(t,"morphTargetsTextureSize",u.size)}}}function Ka(t,e,n,i){let r=new WeakMap;function s(t){const e=t.target;e.removeEventListener("dispose",s),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function(a){const o=i.render.frame,l=a.geometry,c=e.get(a,l);if(r.get(c)!==o&&(e.update(c),r.set(c,o)),a.isInstancedMesh&&(!1===a.hasEventListener("dispose",s)&&a.addEventListener("dispose",s),r.get(a)!==o&&(n.update(a.instanceMatrix,t.ARRAY_BUFFER),null!==a.instanceColor&&n.update(a.instanceColor,t.ARRAY_BUFFER),r.set(a,o))),a.isSkinnedMesh){const t=a.skeleton;r.get(t)!==o&&(t.update(),r.set(t,o))}return c},dispose:function(){r=new WeakMap}}}class $a extends Mi{constructor(t,e,n,i,r,s,a,o,l,c=1026){if(c!==Gt&&c!==Wt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&c===Gt&&(n=It),void 0===n&&c===Wt&&(n=Ot),super(null,i,r,s,a,o,c,n,l),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=void 0!==a?a:gt,this.minFilter=void 0!==o?o:gt,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return null!==this.compareFunction&&(e.compareFunction=this.compareFunction),e}}const Qa=new Mi,to=new $a(1,1),eo=new Ti,no=new Ai,io=new ia,ro=[],so=[],ao=new Float32Array(16),oo=new Float32Array(9),lo=new Float32Array(4);function co(t,e,n){const i=t[0];if(i<=0||i>0)return t;const r=e*n;let s=ro[r];if(void 0===s&&(s=new Float32Array(r),ro[r]=s),0!==e){i.toArray(s,0);for(let i=1,r=0;i!==e;++i)r+=n,t[i].toArray(s,r)}return s}function ho(t,e){if(t.length!==e.length)return!1;for(let n=0,i=t.length;n<i;n++)if(t[n]!==e[n])return!1;return!0}function uo(t,e){for(let n=0,i=e.length;n<i;n++)t[n]=e[n]}function po(t,e){let n=so[e];void 0===n&&(n=new Int32Array(e),so[e]=n);for(let i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function mo(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function fo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(ho(n,e))return;t.uniform2fv(this.addr,e),uo(n,e)}}function go(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(ho(n,e))return;t.uniform3fv(this.addr,e),uo(n,e)}}function vo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(ho(n,e))return;t.uniform4fv(this.addr,e),uo(n,e)}}function _o(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(ho(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),uo(n,e)}else{if(ho(n,i))return;lo.set(i),t.uniformMatrix2fv(this.addr,!1,lo),uo(n,i)}}function xo(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(ho(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),uo(n,e)}else{if(ho(n,i))return;oo.set(i),t.uniformMatrix3fv(this.addr,!1,oo),uo(n,i)}}function yo(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(ho(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),uo(n,e)}else{if(ho(n,i))return;ao.set(i),t.uniformMatrix4fv(this.addr,!1,ao),uo(n,i)}}function Mo(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function So(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2i(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(ho(n,e))return;t.uniform2iv(this.addr,e),uo(n,e)}}function bo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3i(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else{if(ho(n,e))return;t.uniform3iv(this.addr,e),uo(n,e)}}function wo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4i(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(ho(n,e))return;t.uniform4iv(this.addr,e),uo(n,e)}}function To(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function Eo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2ui(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(ho(n,e))return;t.uniform2uiv(this.addr,e),uo(n,e)}}function Ao(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3ui(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else{if(ho(n,e))return;t.uniform3uiv(this.addr,e),uo(n,e)}}function Ro(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4ui(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(ho(n,e))return;t.uniform4uiv(this.addr,e),uo(n,e)}}function Co(t,e,n){const i=this.cache,r=n.allocateTextureUnit();let s;i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),this.type===t.SAMPLER_2D_SHADOW?(to.compareFunction=Sn,s=to):s=Qa,n.setTexture2D(e||s,r)}function Po(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(e||no,r)}function Io(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTextureCube(e||io,r)}function Lo(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(e||eo,r)}function Uo(t,e){t.uniform1fv(this.addr,e)}function No(t,e){const n=co(e,this.size,2);t.uniform2fv(this.addr,n)}function Do(t,e){const n=co(e,this.size,3);t.uniform3fv(this.addr,n)}function Oo(t,e){const n=co(e,this.size,4);t.uniform4fv(this.addr,n)}function Fo(t,e){const n=co(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function Bo(t,e){const n=co(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function zo(t,e){const n=co(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function ko(t,e){t.uniform1iv(this.addr,e)}function Vo(t,e){t.uniform2iv(this.addr,e)}function Ho(t,e){t.uniform3iv(this.addr,e)}function Go(t,e){t.uniform4iv(this.addr,e)}function Wo(t,e){t.uniform1uiv(this.addr,e)}function Xo(t,e){t.uniform2uiv(this.addr,e)}function jo(t,e){t.uniform3uiv(this.addr,e)}function qo(t,e){t.uniform4uiv(this.addr,e)}function Yo(t,e,n){const i=this.cache,r=e.length,s=po(n,r);ho(i,s)||(t.uniform1iv(this.addr,s),uo(i,s));for(let t=0;t!==r;++t)n.setTexture2D(e[t]||Qa,s[t])}function Zo(t,e,n){const i=this.cache,r=e.length,s=po(n,r);ho(i,s)||(t.uniform1iv(this.addr,s),uo(i,s));for(let t=0;t!==r;++t)n.setTexture3D(e[t]||no,s[t])}function Jo(t,e,n){const i=this.cache,r=e.length,s=po(n,r);ho(i,s)||(t.uniform1iv(this.addr,s),uo(i,s));for(let t=0;t!==r;++t)n.setTextureCube(e[t]||io,s[t])}function Ko(t,e,n){const i=this.cache,r=e.length,s=po(n,r);ho(i,s)||(t.uniform1iv(this.addr,s),uo(i,s));for(let t=0;t!==r;++t)n.setTexture2DArray(e[t]||eo,s[t])}class $o{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=function(t){switch(t){case 5126:return mo;case 35664:return fo;case 35665:return go;case 35666:return vo;case 35674:return _o;case 35675:return xo;case 35676:return yo;case 5124:case 35670:return Mo;case 35667:case 35671:return So;case 35668:case 35672:return bo;case 35669:case 35673:return wo;case 5125:return To;case 36294:return Eo;case 36295:return Ao;case 36296:return Ro;case 35678:case 36198:case 36298:case 36306:case 35682:return Co;case 35679:case 36299:case 36307:return Po;case 35680:case 36300:case 36308:case 36293:return Io;case 36289:case 36303:case 36311:case 36292:return Lo}}(e.type)}}class Qo{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Uo;case 35664:return No;case 35665:return Do;case 35666:return Oo;case 35674:return Fo;case 35675:return Bo;case 35676:return zo;case 5124:case 35670:return ko;case 35667:case 35671:return Vo;case 35668:case 35672:return Ho;case 35669:case 35673:return Go;case 5125:return Wo;case 36294:return Xo;case 36295:return jo;case 36296:return qo;case 35678:case 36198:case 36298:case 36306:case 35682:return Yo;case 35679:case 36299:case 36307:return Zo;case 35680:case 36300:case 36308:case 36293:return Jo;case 36289:case 36303:case 36311:case 36292:return Ko}}(e.type)}}class tl{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const i=this.seq;for(let r=0,s=i.length;r!==s;++r){const s=i[r];s.setValue(t,e[s.id],n)}}}const el=/(\w+)(\])?(\[|\.)?/g;function nl(t,e){t.seq.push(e),t.map[e.id]=e}function il(t,e,n){const i=t.name,r=i.length;for(el.lastIndex=0;;){const s=el.exec(i),a=el.lastIndex;let o=s[1];const l="]"===s[2],c=s[3];if(l&&(o|=0),void 0===c||"["===c&&a+2===r){nl(n,void 0===c?new $o(o,t,e):new Qo(o,t,e));break}{let t=n.map[o];void 0===t&&(t=new tl(o),nl(n,t)),n=t}}}class rl{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i);il(n,t.getUniformLocation(e,n.name),this)}}setValue(t,e,n,i){const r=this.map[e];void 0!==r&&r.setValue(t,n,i)}setOptional(t,e,n){const i=e[n];void 0!==i&&this.setValue(t,n,i)}static upload(t,e,n,i){for(let r=0,s=e.length;r!==s;++r){const s=e[r],a=n[s.id];!1!==a.needsUpdate&&s.setValue(t,a.value,i)}}static seqWithValue(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const r=t[i];r.id in e&&n.push(r)}return n}}function sl(t,e,n){const i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),i}const al=37297;let ol=0;function ll(t,e,n){const i=t.getShaderParameter(e,t.COMPILE_STATUS),r=t.getShaderInfoLog(e).trim();if(i&&""===r)return"";const s=/ERROR: 0:(\d+)/.exec(r);if(s){const i=parseInt(s[1]);return n.toUpperCase()+"\n\n"+r+"\n\n"+function(t,e){const n=t.split("\n"),i=[],r=Math.max(e-6,0),s=Math.min(e+6,n.length);for(let t=r;t<s;t++){const r=t+1;i.push(`${r===e?">":" "} ${r}: ${n[t]}`)}return i.join("\n")}(t.getShaderSource(e),i)}return r}function cl(t,e){const n=function(t){const e=di.getPrimaries(di.workingColorSpace),n=di.getPrimaries(t);let i;switch(e===n?i="":e===en&&n===tn?i="LinearDisplayP3ToLinearSRGB":e===tn&&n===en&&(i="LinearSRGBToLinearDisplayP3"),t){case Ze:case Ke:return[i,"LinearTransferOETF"];case Ye:case Je:return[i,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",t),[i,"LinearTransferOETF"]}}(e);return`vec4 ${t}( vec4 value ) { return ${n[0]}( ${n[1]}( value ) ); }`}function hl(t,e){let n;switch(e){case $:n="Linear";break;case Q:n="Reinhard";break;case tt:n="OptimizedCineon";break;case et:n="ACESFilmic";break;case it:n="AgX";break;case rt:n="Neutral";break;case nt:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),n="Linear"}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function ul(t){return""!==t}function dl(t,e){const n=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function pl(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const ml=/^[ \t]*#include +<([\w\d./]+)>/gm;function fl(t){return t.replace(ml,vl)}const gl=new Map;function vl(t,e){let n=fa[e];if(void 0===n){const t=gl.get(e);if(void 0===t)throw new Error("Can not resolve #include <"+e+">");n=fa[t],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,t)}return fl(n)}const _l=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function xl(t){return t.replace(_l,yl)}function yl(t,e,n,i){let r="";for(let t=parseInt(e);t<parseInt(n);t++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function Ml(t){let e=`precision ${t.precision} float;\n\tprecision ${t.precision} int;\n\tprecision ${t.precision} sampler2D;\n\tprecision ${t.precision} samplerCube;\n\tprecision ${t.precision} sampler3D;\n\tprecision ${t.precision} sampler2DArray;\n\tprecision ${t.precision} sampler2DShadow;\n\tprecision ${t.precision} samplerCubeShadow;\n\tprecision ${t.precision} sampler2DArrayShadow;\n\tprecision ${t.precision} isampler2D;\n\tprecision ${t.precision} isampler3D;\n\tprecision ${t.precision} isamplerCube;\n\tprecision ${t.precision} isampler2DArray;\n\tprecision ${t.precision} usampler2D;\n\tprecision ${t.precision} usampler3D;\n\tprecision ${t.precision} usamplerCube;\n\tprecision ${t.precision} usampler2DArray;\n\t`;return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function Sl(t,e,n,i){const r=t.getContext(),s=n.defines;let a=n.vertexShader,o=n.fragmentShader;const u=function(t){let e="SHADOWMAP_TYPE_BASIC";return t.shadowMapType===l?e="SHADOWMAP_TYPE_PCF":t.shadowMapType===c?e="SHADOWMAP_TYPE_PCF_SOFT":t.shadowMapType===h&&(e="SHADOWMAP_TYPE_VSM"),e}(n),d=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case lt:case ct:e="ENVMAP_TYPE_CUBE";break;case dt:e="ENVMAP_TYPE_CUBE_UV"}return e}(n),p=function(t){let e="ENVMAP_MODE_REFLECTION";t.envMap&&t.envMapMode===ct&&(e="ENVMAP_MODE_REFRACTION");return e}(n),m=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case Y:e="ENVMAP_BLENDING_MULTIPLY";break;case Z:e="ENVMAP_BLENDING_MIX";break;case J:e="ENVMAP_BLENDING_ADD"}return e}(n),f=function(t){const e=t.envMapCubeUVHeight;if(null===e)return null;const n=Math.log2(e)-2,i=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),g=function(t){return[t.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",t.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(ul).join("\n")}(n),v=function(t){const e=[];for(const n in t){const i=t[n];!1!==i&&e.push("#define "+n+" "+i)}return e.join("\n")}(s),_=r.createProgram();let x,y,M=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(x=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,v].filter(ul).join("\n"),x.length>0&&(x+="\n"),y=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,v].filter(ul).join("\n"),y.length>0&&(y+="\n")):(x=[Ml(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,v,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.batchingColor?"#define USE_BATCHING_COLOR":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+p:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+u:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(ul).join("\n"),y=[Ml(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,v,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+d:"",n.envMap?"#define "+p:"",n.envMap?"#define "+m:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.dispersion?"#define USE_DISPERSION":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor||n.batchingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+u:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==K?"#define TONE_MAPPING":"",n.toneMapping!==K?fa.tonemapping_pars_fragment:"",n.toneMapping!==K?hl("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",fa.colorspace_pars_fragment,cl("linearToOutputTexel",n.outputColorSpace),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(ul).join("\n")),a=fl(a),a=dl(a,n),a=pl(a,n),o=fl(o),o=dl(o,n),o=pl(o,n),a=xl(a),o=xl(o),!0!==n.isRawShaderMaterial&&(M="#version 300 es\n",x=[g,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+x,y=["#define varying in",n.glslVersion===Fn?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===Fn?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+y);const S=M+x+a,b=M+y+o,w=sl(r,r.VERTEX_SHADER,S),T=sl(r,r.FRAGMENT_SHADER,b);function E(e){if(t.debug.checkShaderErrors){const n=r.getProgramInfoLog(_).trim(),i=r.getShaderInfoLog(w).trim(),s=r.getShaderInfoLog(T).trim();let a=!0,o=!0;if(!1===r.getProgramParameter(_,r.LINK_STATUS))if(a=!1,"function"==typeof t.debug.onShaderError)t.debug.onShaderError(r,_,w,T);else{const t=ll(r,w,"vertex"),i=ll(r,T,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(_,r.VALIDATE_STATUS)+"\n\nMaterial Name: "+e.name+"\nMaterial Type: "+e.type+"\n\nProgram Info Log: "+n+"\n"+t+"\n"+i)}else""!==n?console.warn("THREE.WebGLProgram: Program Info Log:",n):""!==i&&""!==s||(o=!1);o&&(e.diagnostics={runnable:a,programLog:n,vertexShader:{log:i,prefix:x},fragmentShader:{log:s,prefix:y}})}r.deleteShader(w),r.deleteShader(T),A=new rl(r,_),R=function(t,e){const n={},i=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const i=t.getActiveAttrib(e,r),s=i.name;let a=1;i.type===t.FLOAT_MAT2&&(a=2),i.type===t.FLOAT_MAT3&&(a=3),i.type===t.FLOAT_MAT4&&(a=4),n[s]={type:i.type,location:t.getAttribLocation(e,s),locationSize:a}}return n}(r,_)}let A,R;r.attachShader(_,w),r.attachShader(_,T),void 0!==n.index0AttributeName?r.bindAttribLocation(_,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(_,0,"position"),r.linkProgram(_),this.getUniforms=function(){return void 0===A&&E(this),A},this.getAttributes=function(){return void 0===R&&E(this),R};let C=!1===n.rendererExtensionParallelShaderCompile;return this.isReady=function(){return!1===C&&(C=r.getProgramParameter(_,al)),C},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(_),this.program=void 0},this.type=n.shaderType,this.name=n.shaderName,this.id=ol++,this.cacheKey=e,this.usedTimes=1,this.program=_,this.vertexShader=w,this.fragmentShader=T,this}let bl=0;class wl{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),r=this._getShaderStage(n),s=this._getShaderCacheForMaterial(t);return!1===s.has(i)&&(s.add(i),i.usedTimes++),!1===s.has(r)&&(s.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const t of e)t.usedTimes--,0===t.usedTimes&&this.shaderCache.delete(t.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return void 0===n&&(n=new Set,e.set(t,n)),n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);return void 0===n&&(n=new Tl(t),e.set(t,n)),n}}class Tl{constructor(t){this.id=bl++,this.code=t,this.usedTimes=0}}function El(t,e,n,i,r,s,a){const o=new vr,l=new wl,c=new Set,h=[],u=r.logarithmicDepthBuffer,p=r.vertexTextures;let m=r.precision;const f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function g(t){return c.add(t),0===t?"uv":`uv${t}`}return{getParameters:function(s,o,h,v,_){const x=v.fog,y=_.geometry,M=s.isMeshStandardMaterial?v.environment:null,S=(s.isMeshStandardMaterial?n:e).get(s.envMap||M),b=S&&S.mapping===dt?S.image.height:null,w=f[s.type];null!==s.precision&&(m=r.getMaxPrecision(s.precision),m!==s.precision&&console.warn("THREE.WebGLProgram.getParameters:",s.precision,"not supported, using",m,"instead."));const T=y.morphAttributes.position||y.morphAttributes.normal||y.morphAttributes.color,E=void 0!==T?T.length:0;let A,R,C,P,I=0;if(void 0!==y.morphAttributes.position&&(I=1),void 0!==y.morphAttributes.normal&&(I=2),void 0!==y.morphAttributes.color&&(I=3),w){const t=va[w];A=t.vertexShader,R=t.fragmentShader}else A=s.vertexShader,R=s.fragmentShader,l.update(s),C=l.getVertexShaderID(s),P=l.getFragmentShaderID(s);const L=t.getRenderTarget(),U=!0===_.isInstancedMesh,N=!0===_.isBatchedMesh,D=!!s.map,O=!!s.matcap,F=!!S,B=!!s.aoMap,z=!!s.lightMap,k=!!s.bumpMap,V=!!s.normalMap,H=!!s.displacementMap,G=!!s.emissiveMap,W=!!s.metalnessMap,X=!!s.roughnessMap,j=s.anisotropy>0,q=s.clearcoat>0,Y=s.dispersion>0,Z=s.iridescence>0,J=s.sheen>0,$=s.transmission>0,Q=j&&!!s.anisotropyMap,tt=q&&!!s.clearcoatMap,et=q&&!!s.clearcoatNormalMap,nt=q&&!!s.clearcoatRoughnessMap,it=Z&&!!s.iridescenceMap,rt=Z&&!!s.iridescenceThicknessMap,st=J&&!!s.sheenColorMap,at=J&&!!s.sheenRoughnessMap,ot=!!s.specularMap,lt=!!s.specularColorMap,ct=!!s.specularIntensityMap,ht=$&&!!s.transmissionMap,ut=$&&!!s.thicknessMap,pt=!!s.gradientMap,mt=!!s.alphaMap,ft=s.alphaTest>0,gt=!!s.alphaHash,vt=!!s.extensions;let _t=K;s.toneMapped&&(null!==L&&!0!==L.isXRRenderTarget||(_t=t.toneMapping));const xt={shaderID:w,shaderType:s.type,shaderName:s.name,vertexShader:A,fragmentShader:R,defines:s.defines,customVertexShaderID:C,customFragmentShaderID:P,isRawShaderMaterial:!0===s.isRawShaderMaterial,glslVersion:s.glslVersion,precision:m,batching:N,batchingColor:N&&null!==_._colorsTexture,instancing:U,instancingColor:U&&null!==_.instanceColor,instancingMorph:U&&null!==_.morphTexture,supportsVertexTextures:p,outputColorSpace:null===L?t.outputColorSpace:!0===L.isXRRenderTarget?L.texture.colorSpace:Ze,alphaToCoverage:!!s.alphaToCoverage,map:D,matcap:O,envMap:F,envMapMode:F&&S.mapping,envMapCubeUVHeight:b,aoMap:B,lightMap:z,bumpMap:k,normalMap:V,displacementMap:p&&H,emissiveMap:G,normalMapObjectSpace:V&&1===s.normalMapType,normalMapTangentSpace:V&&0===s.normalMapType,metalnessMap:W,roughnessMap:X,anisotropy:j,anisotropyMap:Q,clearcoat:q,clearcoatMap:tt,clearcoatNormalMap:et,clearcoatRoughnessMap:nt,dispersion:Y,iridescence:Z,iridescenceMap:it,iridescenceThicknessMap:rt,sheen:J,sheenColorMap:st,sheenRoughnessMap:at,specularMap:ot,specularColorMap:lt,specularIntensityMap:ct,transmission:$,transmissionMap:ht,thicknessMap:ut,gradientMap:pt,opaque:!1===s.transparent&&1===s.blending&&!1===s.alphaToCoverage,alphaMap:mt,alphaTest:ft,alphaHash:gt,combine:s.combine,mapUv:D&&g(s.map.channel),aoMapUv:B&&g(s.aoMap.channel),lightMapUv:z&&g(s.lightMap.channel),bumpMapUv:k&&g(s.bumpMap.channel),normalMapUv:V&&g(s.normalMap.channel),displacementMapUv:H&&g(s.displacementMap.channel),emissiveMapUv:G&&g(s.emissiveMap.channel),metalnessMapUv:W&&g(s.metalnessMap.channel),roughnessMapUv:X&&g(s.roughnessMap.channel),anisotropyMapUv:Q&&g(s.anisotropyMap.channel),clearcoatMapUv:tt&&g(s.clearcoatMap.channel),clearcoatNormalMapUv:et&&g(s.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:nt&&g(s.clearcoatRoughnessMap.channel),iridescenceMapUv:it&&g(s.iridescenceMap.channel),iridescenceThicknessMapUv:rt&&g(s.iridescenceThicknessMap.channel),sheenColorMapUv:st&&g(s.sheenColorMap.channel),sheenRoughnessMapUv:at&&g(s.sheenRoughnessMap.channel),specularMapUv:ot&&g(s.specularMap.channel),specularColorMapUv:lt&&g(s.specularColorMap.channel),specularIntensityMapUv:ct&&g(s.specularIntensityMap.channel),transmissionMapUv:ht&&g(s.transmissionMap.channel),thicknessMapUv:ut&&g(s.thicknessMap.channel),alphaMapUv:mt&&g(s.alphaMap.channel),vertexTangents:!!y.attributes.tangent&&(V||j),vertexColors:s.vertexColors,vertexAlphas:!0===s.vertexColors&&!!y.attributes.color&&4===y.attributes.color.itemSize,pointsUvs:!0===_.isPoints&&!!y.attributes.uv&&(D||mt),fog:!!x,useFog:!0===s.fog,fogExp2:!!x&&x.isFogExp2,flatShading:!0===s.flatShading,sizeAttenuation:!0===s.sizeAttenuation,logarithmicDepthBuffer:u,skinning:!0===_.isSkinnedMesh,morphTargets:void 0!==y.morphAttributes.position,morphNormals:void 0!==y.morphAttributes.normal,morphColors:void 0!==y.morphAttributes.color,morphTargetsCount:E,morphTextureStride:I,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numLightProbes:o.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:s.dithering,shadowMapEnabled:t.shadowMap.enabled&&h.length>0,shadowMapType:t.shadowMap.type,toneMapping:_t,decodeVideoTexture:D&&!0===s.map.isVideoTexture&&di.getTransfer(s.map.colorSpace)===Qe,premultipliedAlpha:s.premultipliedAlpha,doubleSided:2===s.side,flipSided:s.side===d,useDepthPacking:s.depthPacking>=0,depthPacking:s.depthPacking||0,index0AttributeName:s.index0AttributeName,extensionClipCullDistance:vt&&!0===s.extensions.clipCullDistance&&i.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(vt&&!0===s.extensions.multiDraw||N)&&i.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:s.customProgramCacheKey()};return xt.vertexUv1s=c.has(1),xt.vertexUv2s=c.has(2),xt.vertexUv3s=c.has(3),c.clear(),xt},getProgramCacheKey:function(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.customVertexShaderID),n.push(e.customFragmentShaderID)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);return!1===e.isRawShaderMaterial&&(!function(t,e){t.push(e.precision),t.push(e.outputColorSpace),t.push(e.envMapMode),t.push(e.envMapCubeUVHeight),t.push(e.mapUv),t.push(e.alphaMapUv),t.push(e.lightMapUv),t.push(e.aoMapUv),t.push(e.bumpMapUv),t.push(e.normalMapUv),t.push(e.displacementMapUv),t.push(e.emissiveMapUv),t.push(e.metalnessMapUv),t.push(e.roughnessMapUv),t.push(e.anisotropyMapUv),t.push(e.clearcoatMapUv),t.push(e.clearcoatNormalMapUv),t.push(e.clearcoatRoughnessMapUv),t.push(e.iridescenceMapUv),t.push(e.iridescenceThicknessMapUv),t.push(e.sheenColorMapUv),t.push(e.sheenRoughnessMapUv),t.push(e.specularMapUv),t.push(e.specularColorMapUv),t.push(e.specularIntensityMapUv),t.push(e.transmissionMapUv),t.push(e.thicknessMapUv),t.push(e.combine),t.push(e.fogExp2),t.push(e.sizeAttenuation),t.push(e.morphTargetsCount),t.push(e.morphAttributeCount),t.push(e.numDirLights),t.push(e.numPointLights),t.push(e.numSpotLights),t.push(e.numSpotLightMaps),t.push(e.numHemiLights),t.push(e.numRectAreaLights),t.push(e.numDirLightShadows),t.push(e.numPointLightShadows),t.push(e.numSpotLightShadows),t.push(e.numSpotLightShadowsWithMaps),t.push(e.numLightProbes),t.push(e.shadowMapType),t.push(e.toneMapping),t.push(e.numClippingPlanes),t.push(e.numClipIntersection),t.push(e.depthPacking)}(n,e),function(t,e){o.disableAll(),e.supportsVertexTextures&&o.enable(0);e.instancing&&o.enable(1);e.instancingColor&&o.enable(2);e.instancingMorph&&o.enable(3);e.matcap&&o.enable(4);e.envMap&&o.enable(5);e.normalMapObjectSpace&&o.enable(6);e.normalMapTangentSpace&&o.enable(7);e.clearcoat&&o.enable(8);e.iridescence&&o.enable(9);e.alphaTest&&o.enable(10);e.vertexColors&&o.enable(11);e.vertexAlphas&&o.enable(12);e.vertexUv1s&&o.enable(13);e.vertexUv2s&&o.enable(14);e.vertexUv3s&&o.enable(15);e.vertexTangents&&o.enable(16);e.anisotropy&&o.enable(17);e.alphaHash&&o.enable(18);e.batching&&o.enable(19);e.dispersion&&o.enable(20);e.batchingColor&&o.enable(21);t.push(o.mask),o.disableAll(),e.fog&&o.enable(0);e.useFog&&o.enable(1);e.flatShading&&o.enable(2);e.logarithmicDepthBuffer&&o.enable(3);e.skinning&&o.enable(4);e.morphTargets&&o.enable(5);e.morphNormals&&o.enable(6);e.morphColors&&o.enable(7);e.premultipliedAlpha&&o.enable(8);e.shadowMapEnabled&&o.enable(9);e.doubleSided&&o.enable(10);e.flipSided&&o.enable(11);e.useDepthPacking&&o.enable(12);e.dithering&&o.enable(13);e.transmission&&o.enable(14);e.sheen&&o.enable(15);e.opaque&&o.enable(16);e.pointsUvs&&o.enable(17);e.decodeVideoTexture&&o.enable(18);e.alphaToCoverage&&o.enable(19);t.push(o.mask)}(n,e),n.push(t.outputColorSpace)),n.push(e.customProgramCacheKey),n.join()},getUniforms:function(t){const e=f[t.type];let n;if(e){const t=va[e];n=Ys.clone(t.uniforms)}else n=t.uniforms;return n},acquireProgram:function(e,n){let i;for(let t=0,e=h.length;t<e;t++){const e=h[t];if(e.cacheKey===n){i=e,++i.usedTimes;break}}return void 0===i&&(i=new Sl(t,n,e,s),h.push(i)),i},releaseProgram:function(t){if(0==--t.usedTimes){const e=h.indexOf(t);h[e]=h[h.length-1],h.pop(),t.destroy()}},releaseShaderCache:function(t){l.remove(t)},programs:h,dispose:function(){l.dispose()}}}function Al(){let t=new WeakMap;return{get:function(e){let n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,i){t.get(e)[n]=i},dispose:function(){t=new WeakMap}}}function Rl(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Cl(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Pl(){const t=[];let e=0;const n=[],i=[],r=[];function s(n,i,r,s,a,o){let l=t[e];return void 0===l?(l={id:n.id,object:n,geometry:i,material:r,groupOrder:s,renderOrder:n.renderOrder,z:a,group:o},t[e]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=r,l.groupOrder=s,l.renderOrder=n.renderOrder,l.z=a,l.group=o),e++,l}return{opaque:n,transmissive:i,transparent:r,init:function(){e=0,n.length=0,i.length=0,r.length=0},push:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?i.push(h):!0===a.transparent?r.push(h):n.push(h)},unshift:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?i.unshift(h):!0===a.transparent?r.unshift(h):n.unshift(h)},finish:function(){for(let n=e,i=t.length;n<i;n++){const e=t[n];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(t,e){n.length>1&&n.sort(t||Rl),i.length>1&&i.sort(e||Cl),r.length>1&&r.sort(e||Cl)}}}function Il(){let t=new WeakMap;return{get:function(e,n){const i=t.get(e);let r;return void 0===i?(r=new Pl,t.set(e,[r])):n>=i.length?(r=new Pl,i.push(r)):r=i[n],r},dispose:function(){t=new WeakMap}}}function Ll(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":n={direction:new Pi,color:new Zr};break;case"SpotLight":n={position:new Pi,direction:new Pi,color:new Zr,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new Pi,color:new Zr,distance:0,decay:0};break;case"HemisphereLight":n={direction:new Pi,skyColor:new Zr,groundColor:new Zr};break;case"RectAreaLight":n={color:new Zr,position:new Pi,halfWidth:new Pi,halfHeight:new Pi}}return t[e.id]=n,n}}}let Ul=0;function Nl(t,e){return(e.castShadow?2:0)-(t.castShadow?2:0)+(e.map?1:0)-(t.map?1:0)}function Dl(t){const e=new Ll,n=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":case"SpotLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $n};break;case"PointLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $n,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}}(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let t=0;t<9;t++)i.probe.push(new Pi);const r=new Pi,s=new ar,a=new ar;return{setup:function(r){let s=0,a=0,o=0;for(let t=0;t<9;t++)i.probe[t].set(0,0,0);let l=0,c=0,h=0,u=0,d=0,p=0,m=0,f=0,g=0,v=0,_=0;r.sort(Nl);for(let t=0,x=r.length;t<x;t++){const x=r[t],y=x.color,M=x.intensity,S=x.distance,b=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)s+=y.r*M,a+=y.g*M,o+=y.b*M;else if(x.isLightProbe){for(let t=0;t<9;t++)i.probe[t].addScaledVector(x.sh.coefficients[t],M);_++}else if(x.isDirectionalLight){const t=e.get(x);if(t.color.copy(x.color).multiplyScalar(x.intensity),x.castShadow){const t=x.shadow,e=n.get(x);e.shadowIntensity=t.intensity,e.shadowBias=t.bias,e.shadowNormalBias=t.normalBias,e.shadowRadius=t.radius,e.shadowMapSize=t.mapSize,i.directionalShadow[l]=e,i.directionalShadowMap[l]=b,i.directionalShadowMatrix[l]=x.shadow.matrix,p++}i.directional[l]=t,l++}else if(x.isSpotLight){const t=e.get(x);t.position.setFromMatrixPosition(x.matrixWorld),t.color.copy(y).multiplyScalar(M),t.distance=S,t.coneCos=Math.cos(x.angle),t.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),t.decay=x.decay,i.spot[h]=t;const r=x.shadow;if(x.map&&(i.spotLightMap[g]=x.map,g++,r.updateMatrices(x),x.castShadow&&v++),i.spotLightMatrix[h]=r.matrix,x.castShadow){const t=n.get(x);t.shadowIntensity=r.intensity,t.shadowBias=r.bias,t.shadowNormalBias=r.normalBias,t.shadowRadius=r.radius,t.shadowMapSize=r.mapSize,i.spotShadow[h]=t,i.spotShadowMap[h]=b,f++}h++}else if(x.isRectAreaLight){const t=e.get(x);t.color.copy(y).multiplyScalar(M),t.halfWidth.set(.5*x.width,0,0),t.halfHeight.set(0,.5*x.height,0),i.rectArea[u]=t,u++}else if(x.isPointLight){const t=e.get(x);if(t.color.copy(x.color).multiplyScalar(x.intensity),t.distance=x.distance,t.decay=x.decay,x.castShadow){const t=x.shadow,e=n.get(x);e.shadowIntensity=t.intensity,e.shadowBias=t.bias,e.shadowNormalBias=t.normalBias,e.shadowRadius=t.radius,e.shadowMapSize=t.mapSize,e.shadowCameraNear=t.camera.near,e.shadowCameraFar=t.camera.far,i.pointShadow[c]=e,i.pointShadowMap[c]=b,i.pointShadowMatrix[c]=x.shadow.matrix,m++}i.point[c]=t,c++}else if(x.isHemisphereLight){const t=e.get(x);t.skyColor.copy(x.color).multiplyScalar(M),t.groundColor.copy(x.groundColor).multiplyScalar(M),i.hemi[d]=t,d++}}u>0&&(!0===t.has("OES_texture_float_linear")?(i.rectAreaLTC1=ga.LTC_FLOAT_1,i.rectAreaLTC2=ga.LTC_FLOAT_2):(i.rectAreaLTC1=ga.LTC_HALF_1,i.rectAreaLTC2=ga.LTC_HALF_2)),i.ambient[0]=s,i.ambient[1]=a,i.ambient[2]=o;const x=i.hash;x.directionalLength===l&&x.pointLength===c&&x.spotLength===h&&x.rectAreaLength===u&&x.hemiLength===d&&x.numDirectionalShadows===p&&x.numPointShadows===m&&x.numSpotShadows===f&&x.numSpotMaps===g&&x.numLightProbes===_||(i.directional.length=l,i.spot.length=h,i.rectArea.length=u,i.point.length=c,i.hemi.length=d,i.directionalShadow.length=p,i.directionalShadowMap.length=p,i.pointShadow.length=m,i.pointShadowMap.length=m,i.spotShadow.length=f,i.spotShadowMap.length=f,i.directionalShadowMatrix.length=p,i.pointShadowMatrix.length=m,i.spotLightMatrix.length=f+g-v,i.spotLightMap.length=g,i.numSpotLightShadowsWithMaps=v,i.numLightProbes=_,x.directionalLength=l,x.pointLength=c,x.spotLength=h,x.rectAreaLength=u,x.hemiLength=d,x.numDirectionalShadows=p,x.numPointShadows=m,x.numSpotShadows=f,x.numSpotMaps=g,x.numLightProbes=_,i.version=Ul++)},setupView:function(t,e){let n=0,o=0,l=0,c=0,h=0;const u=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=i.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld),r.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(r),t.direction.transformDirection(u),n++}else if(d.isSpotLight){const t=i.spot[l];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),t.direction.setFromMatrixPosition(d.matrixWorld),r.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(r),t.direction.transformDirection(u),l++}else if(d.isRectAreaLight){const t=i.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),a.identity(),s.copy(d.matrixWorld),s.premultiply(u),a.extractRotation(s),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(a),t.halfHeight.applyMatrix4(a),c++}else if(d.isPointLight){const t=i.point[o];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),o++}else if(d.isHemisphereLight){const t=i.hemi[h];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(u),h++}}},state:i}}function Ol(t){const e=new Dl(t),n=[],i=[];const r={lightsArray:n,shadowsArray:i,camera:null,lights:e,transmissionRenderTarget:{}};return{init:function(t){r.camera=t,n.length=0,i.length=0},state:r,setupLights:function(){e.setup(n)},setupLightsView:function(t){e.setupView(n,t)},pushLight:function(t){n.push(t)},pushShadow:function(t){i.push(t)}}}function Fl(t){let e=new WeakMap;return{get:function(n,i=0){const r=e.get(n);let s;return void 0===r?(s=new Ol(t),e.set(n,[s])):i>=r.length?(s=new Ol(t),r.push(s)):s=r[i],s},dispose:function(){e=new WeakMap}}}class Bl extends $r{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class zl extends $r{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function kl(t,e,n){let i=new ua;const r=new $n,s=new $n,a=new Si,o=new Bl({depthPacking:3201}),c=new zl,p={},m=n.maxTextureSize,f={[u]:d,[d]:u,2:2},g=new Zs({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new $n},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),v=g.clone();v.defines.HORIZONTAL_PASS=1;const _=new ws;_.setAttribute("position",new os(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const x=new Hs(_,g),y=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=l;let M=this.type;function S(n,i){const s=e.update(x);g.defines.VSM_SAMPLES!==n.blurSamples&&(g.defines.VSM_SAMPLES=n.blurSamples,v.defines.VSM_SAMPLES=n.blurSamples,g.needsUpdate=!0,v.needsUpdate=!0),null===n.mapPass&&(n.mapPass=new wi(r.x,r.y)),g.uniforms.shadow_pass.value=n.map.texture,g.uniforms.resolution.value=n.mapSize,g.uniforms.radius.value=n.radius,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(i,null,s,g,x,null),v.uniforms.shadow_pass.value=n.mapPass.texture,v.uniforms.resolution.value=n.mapSize,v.uniforms.radius.value=n.radius,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(i,null,s,v,x,null)}function b(e,n,i,r){let s=null;const a=!0===i.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(void 0!==a)s=a;else if(s=!0===i.isPointLight?c:o,t.localClippingEnabled&&!0===n.clipShadows&&Array.isArray(n.clippingPlanes)&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0){const t=s.uuid,e=n.uuid;let i=p[t];void 0===i&&(i={},p[t]=i);let r=i[e];void 0===r&&(r=s.clone(),i[e]=r,n.addEventListener("dispose",T)),s=r}if(s.visible=n.visible,s.wireframe=n.wireframe,s.side=r===h?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:f[n.side],s.alphaMap=n.alphaMap,s.alphaTest=n.alphaTest,s.map=n.map,s.clipShadows=n.clipShadows,s.clippingPlanes=n.clippingPlanes,s.clipIntersection=n.clipIntersection,s.displacementMap=n.displacementMap,s.displacementScale=n.displacementScale,s.displacementBias=n.displacementBias,s.wireframeLinewidth=n.wireframeLinewidth,s.linewidth=n.linewidth,!0===i.isPointLight&&!0===s.isMeshDistanceMaterial){t.properties.get(s).light=i}return s}function w(n,r,s,a,o){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&o===h)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,n.matrixWorld);const i=e.update(n),l=n.material;if(Array.isArray(l)){const e=i.groups;for(let c=0,h=e.length;c<h;c++){const h=e[c],u=l[h.materialIndex];if(u&&u.visible){const e=b(n,u,a,o);n.onBeforeShadow(t,n,r,s,i,e,h),t.renderBufferDirect(s,null,i,e,n,h),n.onAfterShadow(t,n,r,s,i,e,h)}}}else if(l.visible){const e=b(n,l,a,o);n.onBeforeShadow(t,n,r,s,i,e,null),t.renderBufferDirect(s,null,i,e,n,null),n.onAfterShadow(t,n,r,s,i,e,null)}}const l=n.children;for(let t=0,e=l.length;t<e;t++)w(l[t],r,s,a,o)}function T(t){t.target.removeEventListener("dispose",T);for(const e in p){const n=p[e],i=t.target.uuid;if(i in n){n[i].dispose(),delete n[i]}}}this.render=function(e,n,o){if(!1===y.enabled)return;if(!1===y.autoUpdate&&!1===y.needsUpdate)return;if(0===e.length)return;const l=t.getRenderTarget(),c=t.getActiveCubeFace(),u=t.getActiveMipmapLevel(),d=t.state;d.setBlending(0),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);const p=M!==h&&this.type===h,f=M===h&&this.type!==h;for(let l=0,c=e.length;l<c;l++){const c=e[l],u=c.shadow;if(void 0===u){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(!1===u.autoUpdate&&!1===u.needsUpdate)continue;r.copy(u.mapSize);const g=u.getFrameExtents();if(r.multiply(g),s.copy(u.mapSize),(r.x>m||r.y>m)&&(r.x>m&&(s.x=Math.floor(m/g.x),r.x=s.x*g.x,u.mapSize.x=s.x),r.y>m&&(s.y=Math.floor(m/g.y),r.y=s.y*g.y,u.mapSize.y=s.y)),null===u.map||!0===p||!0===f){const t=this.type!==h?{minFilter:gt,magFilter:gt}:{};null!==u.map&&u.map.dispose(),u.map=new wi(r.x,r.y,t),u.map.texture.name=c.name+".shadowMap",u.camera.updateProjectionMatrix()}t.setRenderTarget(u.map),t.clear();const v=u.getViewportCount();for(let t=0;t<v;t++){const e=u.getViewport(t);a.set(s.x*e.x,s.y*e.y,s.x*e.z,s.y*e.w),d.viewport(a),u.updateMatrices(c,t),i=u.getFrustum(),w(n,o,u.camera,c,this.type)}!0!==u.isPointLightShadow&&this.type===h&&S(u,o),u.needsUpdate=!1}M=this.type,y.needsUpdate=!1,t.setRenderTarget(l,c,u)}}function Vl(t){const e=new function(){let e=!1;const n=new Si;let i=null;const r=new Si(0,0,0,0);return{setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n)},setLocked:function(t){e=t},setClear:function(e,i,s,a,o){!0===o&&(e*=a,i*=a,s*=a),n.set(e,i,s,a),!1===r.equals(n)&&(t.clearColor(e,i,s,a),r.copy(n))},reset:function(){e=!1,i=null,r.set(-1,0,0,0)}}},n=new function(){let e=!1,n=null,i=null,r=null;return{setTest:function(e){e?G(t.DEPTH_TEST):W(t.DEPTH_TEST)},setMask:function(i){n===i||e||(t.depthMask(i),n=i)},setFunc:function(e){if(i!==e){switch(e){case 0:t.depthFunc(t.NEVER);break;case 1:t.depthFunc(t.ALWAYS);break;case 2:t.depthFunc(t.LESS);break;case 3:default:t.depthFunc(t.LEQUAL);break;case 4:t.depthFunc(t.EQUAL);break;case 5:t.depthFunc(t.GEQUAL);break;case 6:t.depthFunc(t.GREATER);break;case 7:t.depthFunc(t.NOTEQUAL)}i=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,n=null,i=null,r=null}}},i=new function(){let e=!1,n=null,i=null,r=null,s=null,a=null,o=null,l=null,c=null;return{setTest:function(n){e||(n?G(t.STENCIL_TEST):W(t.STENCIL_TEST))},setMask:function(i){n===i||e||(t.stencilMask(i),n=i)},setFunc:function(e,n,a){i===e&&r===n&&s===a||(t.stencilFunc(e,n,a),i=e,r=n,s=a)},setOp:function(e,n,i){a===e&&o===n&&l===i||(t.stencilOp(e,n,i),a=e,o=n,l=i)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,n=null,i=null,r=null,s=null,a=null,o=null,l=null,c=null}}},r=new WeakMap,s=new WeakMap;let a={},o={},l=new WeakMap,c=[],h=null,u=!1,p=null,m=null,f=null,g=null,v=null,_=null,x=null,M=new Zr(0,0,0),S=0,b=!1,w=null,T=null,E=null,A=null,R=null;const I=t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let L=!1,U=0;const N=t.getParameter(t.VERSION);-1!==N.indexOf("WebGL")?(U=parseFloat(/^WebGL (\d)/.exec(N)[1]),L=U>=1):-1!==N.indexOf("OpenGL ES")&&(U=parseFloat(/^OpenGL ES (\d)/.exec(N)[1]),L=U>=2);let D=null,O={};const F=t.getParameter(t.SCISSOR_BOX),B=t.getParameter(t.VIEWPORT),z=(new Si).fromArray(F),k=(new Si).fromArray(B);function V(e,n,i,r){const s=new Uint8Array(4),a=t.createTexture();t.bindTexture(e,a),t.texParameteri(e,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(e,t.TEXTURE_MAG_FILTER,t.NEAREST);for(let a=0;a<i;a++)e===t.TEXTURE_3D||e===t.TEXTURE_2D_ARRAY?t.texImage3D(n,0,t.RGBA,1,1,r,0,t.RGBA,t.UNSIGNED_BYTE,s):t.texImage2D(n+a,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,s);return a}const H={};function G(e){!0!==a[e]&&(t.enable(e),a[e]=!0)}function W(e){!1!==a[e]&&(t.disable(e),a[e]=!1)}H[t.TEXTURE_2D]=V(t.TEXTURE_2D,t.TEXTURE_2D,1),H[t.TEXTURE_CUBE_MAP]=V(t.TEXTURE_CUBE_MAP,t.TEXTURE_CUBE_MAP_POSITIVE_X,6),H[t.TEXTURE_2D_ARRAY]=V(t.TEXTURE_2D_ARRAY,t.TEXTURE_2D_ARRAY,1,1),H[t.TEXTURE_3D]=V(t.TEXTURE_3D,t.TEXTURE_3D,1,1),e.setClear(0,0,0,1),n.setClear(1),i.setClear(0),G(t.DEPTH_TEST),n.setFunc(3),Y(!1),Z(1),G(t.CULL_FACE),q(0);const X={[y]:t.FUNC_ADD,101:t.FUNC_SUBTRACT,102:t.FUNC_REVERSE_SUBTRACT};X[103]=t.MIN,X[104]=t.MAX;const j={200:t.ZERO,201:t.ONE,202:t.SRC_COLOR,[C]:t.SRC_ALPHA,210:t.SRC_ALPHA_SATURATE,208:t.DST_COLOR,206:t.DST_ALPHA,203:t.ONE_MINUS_SRC_COLOR,[P]:t.ONE_MINUS_SRC_ALPHA,209:t.ONE_MINUS_DST_COLOR,207:t.ONE_MINUS_DST_ALPHA,211:t.CONSTANT_COLOR,212:t.ONE_MINUS_CONSTANT_COLOR,213:t.CONSTANT_ALPHA,214:t.ONE_MINUS_CONSTANT_ALPHA};function q(e,n,i,r,s,a,o,l,c,h){if(0!==e){if(!1===u&&(G(t.BLEND),u=!0),5===e)s=s||n,a=a||i,o=o||r,n===m&&s===v||(t.blendEquationSeparate(X[n],X[s]),m=n,v=s),i===f&&r===g&&a===_&&o===x||(t.blendFuncSeparate(j[i],j[r],j[a],j[o]),f=i,g=r,_=a,x=o),!1!==l.equals(M)&&c===S||(t.blendColor(l.r,l.g,l.b,c),M.copy(l),S=c),p=e,b=!1;else if(e!==p||h!==b){if(m===y&&v===y||(t.blendEquation(t.FUNC_ADD),m=y,v=y),h)switch(e){case 1:t.blendFuncSeparate(t.ONE,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case 2:t.blendFunc(t.ONE,t.ONE);break;case 3:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case 4:t.blendFuncSeparate(t.ZERO,t.SRC_COLOR,t.ZERO,t.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case 1:t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case 2:t.blendFunc(t.SRC_ALPHA,t.ONE);break;case 3:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case 4:t.blendFunc(t.ZERO,t.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}f=null,g=null,_=null,x=null,M.set(0,0,0),S=0,p=e,b=h}}else!0===u&&(W(t.BLEND),u=!1)}function Y(e){w!==e&&(e?t.frontFace(t.CW):t.frontFace(t.CCW),w=e)}function Z(e){0!==e?(G(t.CULL_FACE),e!==T&&(1===e?t.cullFace(t.BACK):2===e?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):W(t.CULL_FACE),T=e}function J(e,n,i){e?(G(t.POLYGON_OFFSET_FILL),A===n&&R===i||(t.polygonOffset(n,i),A=n,R=i)):W(t.POLYGON_OFFSET_FILL)}return{buffers:{color:e,depth:n,stencil:i},enable:G,disable:W,bindFramebuffer:function(e,n){return o[e]!==n&&(t.bindFramebuffer(e,n),o[e]=n,e===t.DRAW_FRAMEBUFFER&&(o[t.FRAMEBUFFER]=n),e===t.FRAMEBUFFER&&(o[t.DRAW_FRAMEBUFFER]=n),!0)},drawBuffers:function(e,n){let i=c,r=!1;if(e){i=l.get(n),void 0===i&&(i=[],l.set(n,i));const s=e.textures;if(i.length!==s.length||i[0]!==t.COLOR_ATTACHMENT0){for(let e=0,n=s.length;e<n;e++)i[e]=t.COLOR_ATTACHMENT0+e;i.length=s.length,r=!0}}else i[0]!==t.BACK&&(i[0]=t.BACK,r=!0);r&&t.drawBuffers(i)},useProgram:function(e){return h!==e&&(t.useProgram(e),h=e,!0)},setBlending:q,setMaterial:function(r,s){2===r.side?W(t.CULL_FACE):G(t.CULL_FACE);let a=r.side===d;s&&(a=!a),Y(a),1===r.blending&&!1===r.transparent?q(0):q(r.blending,r.blendEquation,r.blendSrc,r.blendDst,r.blendEquationAlpha,r.blendSrcAlpha,r.blendDstAlpha,r.blendColor,r.blendAlpha,r.premultipliedAlpha),n.setFunc(r.depthFunc),n.setTest(r.depthTest),n.setMask(r.depthWrite),e.setMask(r.colorWrite);const o=r.stencilWrite;i.setTest(o),o&&(i.setMask(r.stencilWriteMask),i.setFunc(r.stencilFunc,r.stencilRef,r.stencilFuncMask),i.setOp(r.stencilFail,r.stencilZFail,r.stencilZPass)),J(r.polygonOffset,r.polygonOffsetFactor,r.polygonOffsetUnits),!0===r.alphaToCoverage?G(t.SAMPLE_ALPHA_TO_COVERAGE):W(t.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:Y,setCullFace:Z,setLineWidth:function(e){e!==E&&(L&&t.lineWidth(e),E=e)},setPolygonOffset:J,setScissorTest:function(e){e?G(t.SCISSOR_TEST):W(t.SCISSOR_TEST)},activeTexture:function(e){void 0===e&&(e=t.TEXTURE0+I-1),D!==e&&(t.activeTexture(e),D=e)},bindTexture:function(e,n,i){void 0===i&&(i=null===D?t.TEXTURE0+I-1:D);let r=O[i];void 0===r&&(r={type:void 0,texture:void 0},O[i]=r),r.type===e&&r.texture===n||(D!==i&&(t.activeTexture(i),D=i),t.bindTexture(e,n||H[e]),r.type=e,r.texture=n)},unbindTexture:function(){const e=O[D];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexImage3D:function(){try{t.compressedTexImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},updateUBOMapping:function(e,n){let i=s.get(n);void 0===i&&(i=new WeakMap,s.set(n,i));let r=i.get(e);void 0===r&&(r=t.getUniformBlockIndex(n,e.name),i.set(e,r))},uniformBlockBinding:function(e,n){const i=s.get(n).get(e);r.get(n)!==i&&(t.uniformBlockBinding(n,i,e.__bindingPointIndex),r.set(n,i))},texStorage2D:function(){try{t.texStorage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{t.texStorage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{t.texSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{t.texSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage3D:function(){try{t.compressedTexSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===z.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),z.copy(e))},viewport:function(e){!1===k.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),k.copy(e))},reset:function(){t.disable(t.BLEND),t.disable(t.CULL_FACE),t.disable(t.DEPTH_TEST),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SCISSOR_TEST),t.disable(t.STENCIL_TEST),t.disable(t.SAMPLE_ALPHA_TO_COVERAGE),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ONE,t.ZERO),t.blendFuncSeparate(t.ONE,t.ZERO,t.ONE,t.ZERO),t.blendColor(0,0,0,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(t.LESS),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(t.ALWAYS,0,4294967295),t.stencilOp(t.KEEP,t.KEEP,t.KEEP),t.clearStencil(0),t.cullFace(t.BACK),t.frontFace(t.CCW),t.polygonOffset(0,0),t.activeTexture(t.TEXTURE0),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindFramebuffer(t.DRAW_FRAMEBUFFER,null),t.bindFramebuffer(t.READ_FRAMEBUFFER,null),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),a={},D=null,O={},o={},l=new WeakMap,c=[],h=null,u=!1,p=null,m=null,f=null,g=null,v=null,_=null,x=null,M=new Zr(0,0,0),S=0,b=!1,w=null,T=null,E=null,A=null,R=null,z.set(0,0,t.canvas.width,t.canvas.height),k.set(0,0,t.canvas.width,t.canvas.height),e.reset(),n.reset(),i.reset()}}}function Hl(t,e,n,i){const r=function(t){switch(t){case Et:case At:return{byteLength:1,components:1};case Ct:case Rt:case Ut:return{byteLength:2,components:1};case Nt:case Dt:return{byteLength:2,components:4};case It:case Pt:case Lt:return{byteLength:4,components:1};case Ft:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${t}.`)}(i);switch(n){case Bt:case Vt:return t*e;case Ht:return t*e*2;case Xt:case jt:return t*e/r.components*r.byteLength;case qt:case Yt:return t*e*2/r.components*r.byteLength;case zt:return t*e*3/r.components*r.byteLength;case kt:case Jt:return t*e*4/r.components*r.byteLength;case Kt:case $t:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case Qt:case te:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case ne:case re:return Math.max(t,16)*Math.max(e,8)/4;case ee:case ie:return Math.max(t,8)*Math.max(e,8)/2;case se:case ae:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case oe:case le:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case ce:return Math.floor((t+4)/5)*Math.floor((e+3)/4)*16;case he:return Math.floor((t+4)/5)*Math.floor((e+4)/5)*16;case ue:return Math.floor((t+5)/6)*Math.floor((e+4)/5)*16;case de:return Math.floor((t+5)/6)*Math.floor((e+5)/6)*16;case pe:return Math.floor((t+7)/8)*Math.floor((e+4)/5)*16;case me:return Math.floor((t+7)/8)*Math.floor((e+5)/6)*16;case fe:return Math.floor((t+7)/8)*Math.floor((e+7)/8)*16;case ge:return Math.floor((t+9)/10)*Math.floor((e+4)/5)*16;case ve:return Math.floor((t+9)/10)*Math.floor((e+5)/6)*16;case _e:return Math.floor((t+9)/10)*Math.floor((e+7)/8)*16;case xe:return Math.floor((t+9)/10)*Math.floor((e+9)/10)*16;case ye:return Math.floor((t+11)/12)*Math.floor((e+9)/10)*16;case Me:return Math.floor((t+11)/12)*Math.floor((e+11)/12)*16;case Se:case be:case we:return Math.ceil(t/4)*Math.ceil(e/4)*16;case Te:case Ee:return Math.ceil(t/4)*Math.ceil(e/4)*8;case Ae:case Re:return Math.ceil(t/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${n} format.`)}const Gl={contain:function(t,e){const n=t.image&&t.image.width?t.image.width/t.image.height:1;return n>e?(t.repeat.x=1,t.repeat.y=n/e,t.offset.x=0,t.offset.y=(1-t.repeat.y)/2):(t.repeat.x=e/n,t.repeat.y=1,t.offset.x=(1-t.repeat.x)/2,t.offset.y=0),t},cover:function(t,e){const n=t.image&&t.image.width?t.image.width/t.image.height:1;return n>e?(t.repeat.x=e/n,t.repeat.y=1,t.offset.x=(1-t.repeat.x)/2,t.offset.y=0):(t.repeat.x=1,t.repeat.y=n/e,t.offset.x=0,t.offset.y=(1-t.repeat.y)/2),t},fill:function(t){return t.repeat.x=1,t.repeat.y=1,t.offset.x=0,t.offset.y=0,t},getByteLength:Hl};function Wl(t,e,n,i,r,s,a){const o=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,l="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),c=new $n,h=new WeakMap;let u;const d=new WeakMap;let p=!1;try{p="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function m(t,e){return p?new OffscreenCanvas(t,e):ri("canvas")}function f(t,e,n){let i=1;const r=k(t);if((r.width>n||r.height>n)&&(i=n/Math.max(r.width,r.height)),i<1){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap||"undefined"!=typeof VideoFrame&&t instanceof VideoFrame){const n=Math.floor(i*r.width),s=Math.floor(i*r.height);void 0===u&&(u=m(n,s));const a=e?m(n,s):u;a.width=n,a.height=s;return a.getContext("2d").drawImage(t,0,0,n,s),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+r.width+"x"+r.height+") to ("+n+"x"+s+")."),a}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+r.width+"x"+r.height+")."),t}return t}function g(t){return t.generateMipmaps&&t.minFilter!==gt&&t.minFilter!==Mt}function v(e){t.generateMipmap(e)}function _(n,i,r,s,a=!1){if(null!==n){if(void 0!==t[n])return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let o=i;if(i===t.RED&&(r===t.FLOAT&&(o=t.R32F),r===t.HALF_FLOAT&&(o=t.R16F),r===t.UNSIGNED_BYTE&&(o=t.R8)),i===t.RED_INTEGER&&(r===t.UNSIGNED_BYTE&&(o=t.R8UI),r===t.UNSIGNED_SHORT&&(o=t.R16UI),r===t.UNSIGNED_INT&&(o=t.R32UI),r===t.BYTE&&(o=t.R8I),r===t.SHORT&&(o=t.R16I),r===t.INT&&(o=t.R32I)),i===t.RG&&(r===t.FLOAT&&(o=t.RG32F),r===t.HALF_FLOAT&&(o=t.RG16F),r===t.UNSIGNED_BYTE&&(o=t.RG8)),i===t.RG_INTEGER&&(r===t.UNSIGNED_BYTE&&(o=t.RG8UI),r===t.UNSIGNED_SHORT&&(o=t.RG16UI),r===t.UNSIGNED_INT&&(o=t.RG32UI),r===t.BYTE&&(o=t.RG8I),r===t.SHORT&&(o=t.RG16I),r===t.INT&&(o=t.RG32I)),i===t.RGB&&r===t.UNSIGNED_INT_5_9_9_9_REV&&(o=t.RGB9_E5),i===t.RGBA){const e=a?$e:di.getTransfer(s);r===t.FLOAT&&(o=t.RGBA32F),r===t.HALF_FLOAT&&(o=t.RGBA16F),r===t.UNSIGNED_BYTE&&(o=e===Qe?t.SRGB8_ALPHA8:t.RGBA8),r===t.UNSIGNED_SHORT_4_4_4_4&&(o=t.RGBA4),r===t.UNSIGNED_SHORT_5_5_5_1&&(o=t.RGB5_A1)}return o!==t.R16F&&o!==t.R32F&&o!==t.RG16F&&o!==t.RG32F&&o!==t.RGBA16F&&o!==t.RGBA32F||e.get("EXT_color_buffer_float"),o}function x(e,n){let i;return e?null===n||n===It||n===Ot?i=t.DEPTH24_STENCIL8:n===Lt?i=t.DEPTH32F_STENCIL8:n===Ct&&(i=t.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):null===n||n===It||n===Ot?i=t.DEPTH_COMPONENT24:n===Lt?i=t.DEPTH_COMPONENT32F:n===Ct&&(i=t.DEPTH_COMPONENT16),i}function y(t,e){return!0===g(t)||t.isFramebufferTexture&&t.minFilter!==gt&&t.minFilter!==Mt?Math.log2(Math.max(e.width,e.height))+1:void 0!==t.mipmaps&&t.mipmaps.length>0?t.mipmaps.length:t.isCompressedTexture&&Array.isArray(t.image)?e.mipmaps.length:1}function M(t){const e=t.target;e.removeEventListener("dispose",M),function(t){const e=i.get(t);if(void 0===e.__webglInit)return;const n=t.source,r=d.get(n);if(r){const i=r[e.__cacheKey];i.usedTimes--,0===i.usedTimes&&b(t),0===Object.keys(r).length&&d.delete(n)}i.remove(t)}(e),e.isVideoTexture&&h.delete(e)}function S(e){const n=e.target;n.removeEventListener("dispose",S),function(e){const n=i.get(e);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++){if(Array.isArray(n.__webglFramebuffer[e]))for(let i=0;i<n.__webglFramebuffer[e].length;i++)t.deleteFramebuffer(n.__webglFramebuffer[e][i]);else t.deleteFramebuffer(n.__webglFramebuffer[e]);n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer[e])}else{if(Array.isArray(n.__webglFramebuffer))for(let e=0;e<n.__webglFramebuffer.length;e++)t.deleteFramebuffer(n.__webglFramebuffer[e]);else t.deleteFramebuffer(n.__webglFramebuffer);if(n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&t.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer)for(let e=0;e<n.__webglColorRenderbuffer.length;e++)n.__webglColorRenderbuffer[e]&&t.deleteRenderbuffer(n.__webglColorRenderbuffer[e]);n.__webglDepthRenderbuffer&&t.deleteRenderbuffer(n.__webglDepthRenderbuffer)}const r=e.textures;for(let e=0,n=r.length;e<n;e++){const n=i.get(r[e]);n.__webglTexture&&(t.deleteTexture(n.__webglTexture),a.memory.textures--),i.remove(r[e])}i.remove(e)}(n)}function b(e){const n=i.get(e);t.deleteTexture(n.__webglTexture);const r=e.source;delete d.get(r)[n.__cacheKey],a.memory.textures--}let w=0;function T(e,r){const s=i.get(e);if(e.isVideoTexture&&function(t){const e=a.render.frame;h.get(t)!==e&&(h.set(t,e),t.update())}(e),!1===e.isRenderTargetTexture&&e.version>0&&s.__version!==e.version){const t=e.image;if(null===t)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==t.complete)return void I(s,e,r);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.bindTexture(t.TEXTURE_2D,s.__webglTexture,t.TEXTURE0+r)}const E={[pt]:t.REPEAT,[mt]:t.CLAMP_TO_EDGE,[ft]:t.MIRRORED_REPEAT},A={[gt]:t.NEAREST,[vt]:t.NEAREST_MIPMAP_NEAREST,[xt]:t.NEAREST_MIPMAP_LINEAR,[Mt]:t.LINEAR,[St]:t.LINEAR_MIPMAP_NEAREST,[wt]:t.LINEAR_MIPMAP_LINEAR},R={512:t.NEVER,519:t.ALWAYS,513:t.LESS,[Sn]:t.LEQUAL,514:t.EQUAL,518:t.GEQUAL,516:t.GREATER,517:t.NOTEQUAL};function C(n,s){if(s.type!==Lt||!1!==e.has("OES_texture_float_linear")||s.magFilter!==Mt&&s.magFilter!==St&&s.magFilter!==xt&&s.magFilter!==wt&&s.minFilter!==Mt&&s.minFilter!==St&&s.minFilter!==xt&&s.minFilter!==wt||console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),t.texParameteri(n,t.TEXTURE_WRAP_S,E[s.wrapS]),t.texParameteri(n,t.TEXTURE_WRAP_T,E[s.wrapT]),n!==t.TEXTURE_3D&&n!==t.TEXTURE_2D_ARRAY||t.texParameteri(n,t.TEXTURE_WRAP_R,E[s.wrapR]),t.texParameteri(n,t.TEXTURE_MAG_FILTER,A[s.magFilter]),t.texParameteri(n,t.TEXTURE_MIN_FILTER,A[s.minFilter]),s.compareFunction&&(t.texParameteri(n,t.TEXTURE_COMPARE_MODE,t.COMPARE_REF_TO_TEXTURE),t.texParameteri(n,t.TEXTURE_COMPARE_FUNC,R[s.compareFunction])),!0===e.has("EXT_texture_filter_anisotropic")){if(s.magFilter===gt)return;if(s.minFilter!==xt&&s.minFilter!==wt)return;if(s.type===Lt&&!1===e.has("OES_texture_float_linear"))return;if(s.anisotropy>1||i.get(s).__currentAnisotropy){const a=e.get("EXT_texture_filter_anisotropic");t.texParameterf(n,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(s.anisotropy,r.getMaxAnisotropy())),i.get(s).__currentAnisotropy=s.anisotropy}}}function P(e,n){let i=!1;void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",M));const r=n.source;let s=d.get(r);void 0===s&&(s={},d.set(r,s));const o=function(t){const e=[];return e.push(t.wrapS),e.push(t.wrapT),e.push(t.wrapR||0),e.push(t.magFilter),e.push(t.minFilter),e.push(t.anisotropy),e.push(t.internalFormat),e.push(t.format),e.push(t.type),e.push(t.generateMipmaps),e.push(t.premultiplyAlpha),e.push(t.flipY),e.push(t.unpackAlignment),e.push(t.colorSpace),e.join()}(n);if(o!==e.__cacheKey){void 0===s[o]&&(s[o]={texture:t.createTexture(),usedTimes:0},a.memory.textures++,i=!0),s[o].usedTimes++;const r=s[e.__cacheKey];void 0!==r&&(s[e.__cacheKey].usedTimes--,0===r.usedTimes&&b(n)),e.__cacheKey=o,e.__webglTexture=s[o].texture}return i}function I(e,a,o){let l=t.TEXTURE_2D;(a.isDataArrayTexture||a.isCompressedArrayTexture)&&(l=t.TEXTURE_2D_ARRAY),a.isData3DTexture&&(l=t.TEXTURE_3D);const c=P(e,a),h=a.source;n.bindTexture(l,e.__webglTexture,t.TEXTURE0+o);const u=i.get(h);if(h.version!==u.__version||!0===c){n.activeTexture(t.TEXTURE0+o);const e=di.getPrimaries(di.workingColorSpace),i=a.colorSpace===qe?null:di.getPrimaries(a.colorSpace),d=a.colorSpace===qe||e===i?t.NONE:t.BROWSER_DEFAULT_WEBGL;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,a.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,a.unpackAlignment),t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,d);let p=f(a.image,!1,r.maxTextureSize);p=z(a,p);const m=s.convert(a.format,a.colorSpace),M=s.convert(a.type);let S,b=_(a.internalFormat,m,M,a.colorSpace,a.isVideoTexture);C(l,a);const w=a.mipmaps,T=!0!==a.isVideoTexture,E=void 0===u.__version||!0===c,A=h.dataReady,R=y(a,p);if(a.isDepthTexture)b=x(a.format===Wt,a.type),E&&(T?n.texStorage2D(t.TEXTURE_2D,1,b,p.width,p.height):n.texImage2D(t.TEXTURE_2D,0,b,p.width,p.height,0,m,M,null));else if(a.isDataTexture)if(w.length>0){T&&E&&n.texStorage2D(t.TEXTURE_2D,R,b,w[0].width,w[0].height);for(let e=0,i=w.length;e<i;e++)S=w[e],T?A&&n.texSubImage2D(t.TEXTURE_2D,e,0,0,S.width,S.height,m,M,S.data):n.texImage2D(t.TEXTURE_2D,e,b,S.width,S.height,0,m,M,S.data);a.generateMipmaps=!1}else T?(E&&n.texStorage2D(t.TEXTURE_2D,R,b,p.width,p.height),A&&n.texSubImage2D(t.TEXTURE_2D,0,0,0,p.width,p.height,m,M,p.data)):n.texImage2D(t.TEXTURE_2D,0,b,p.width,p.height,0,m,M,p.data);else if(a.isCompressedTexture)if(a.isCompressedArrayTexture){T&&E&&n.texStorage3D(t.TEXTURE_2D_ARRAY,R,b,w[0].width,w[0].height,p.depth);for(let e=0,i=w.length;e<i;e++)if(S=w[e],a.format!==kt)if(null!==m)if(T){if(A)if(a.layerUpdates.size>0){const i=Hl(S.width,S.height,a.format,a.type);for(const r of a.layerUpdates){const s=S.data.subarray(r*i/S.data.BYTES_PER_ELEMENT,(r+1)*i/S.data.BYTES_PER_ELEMENT);n.compressedTexSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,r,S.width,S.height,1,m,s,0,0)}a.clearLayerUpdates()}else n.compressedTexSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,0,S.width,S.height,p.depth,m,S.data,0,0)}else n.compressedTexImage3D(t.TEXTURE_2D_ARRAY,e,b,S.width,S.height,p.depth,0,S.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else T?A&&n.texSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,0,S.width,S.height,p.depth,m,M,S.data):n.texImage3D(t.TEXTURE_2D_ARRAY,e,b,S.width,S.height,p.depth,0,m,M,S.data)}else{T&&E&&n.texStorage2D(t.TEXTURE_2D,R,b,w[0].width,w[0].height);for(let e=0,i=w.length;e<i;e++)S=w[e],a.format!==kt?null!==m?T?A&&n.compressedTexSubImage2D(t.TEXTURE_2D,e,0,0,S.width,S.height,m,S.data):n.compressedTexImage2D(t.TEXTURE_2D,e,b,S.width,S.height,0,S.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):T?A&&n.texSubImage2D(t.TEXTURE_2D,e,0,0,S.width,S.height,m,M,S.data):n.texImage2D(t.TEXTURE_2D,e,b,S.width,S.height,0,m,M,S.data)}else if(a.isDataArrayTexture)if(T){if(E&&n.texStorage3D(t.TEXTURE_2D_ARRAY,R,b,p.width,p.height,p.depth),A)if(a.layerUpdates.size>0){const e=Hl(p.width,p.height,a.format,a.type);for(const i of a.layerUpdates){const r=p.data.subarray(i*e/p.data.BYTES_PER_ELEMENT,(i+1)*e/p.data.BYTES_PER_ELEMENT);n.texSubImage3D(t.TEXTURE_2D_ARRAY,0,0,0,i,p.width,p.height,1,m,M,r)}a.clearLayerUpdates()}else n.texSubImage3D(t.TEXTURE_2D_ARRAY,0,0,0,0,p.width,p.height,p.depth,m,M,p.data)}else n.texImage3D(t.TEXTURE_2D_ARRAY,0,b,p.width,p.height,p.depth,0,m,M,p.data);else if(a.isData3DTexture)T?(E&&n.texStorage3D(t.TEXTURE_3D,R,b,p.width,p.height,p.depth),A&&n.texSubImage3D(t.TEXTURE_3D,0,0,0,0,p.width,p.height,p.depth,m,M,p.data)):n.texImage3D(t.TEXTURE_3D,0,b,p.width,p.height,p.depth,0,m,M,p.data);else if(a.isFramebufferTexture){if(E)if(T)n.texStorage2D(t.TEXTURE_2D,R,b,p.width,p.height);else{let e=p.width,i=p.height;for(let r=0;r<R;r++)n.texImage2D(t.TEXTURE_2D,r,b,e,i,0,m,M,null),e>>=1,i>>=1}}else if(w.length>0){if(T&&E){const e=k(w[0]);n.texStorage2D(t.TEXTURE_2D,R,b,e.width,e.height)}for(let e=0,i=w.length;e<i;e++)S=w[e],T?A&&n.texSubImage2D(t.TEXTURE_2D,e,0,0,m,M,S):n.texImage2D(t.TEXTURE_2D,e,b,m,M,S);a.generateMipmaps=!1}else if(T){if(E){const e=k(p);n.texStorage2D(t.TEXTURE_2D,R,b,e.width,e.height)}A&&n.texSubImage2D(t.TEXTURE_2D,0,0,0,m,M,p)}else n.texImage2D(t.TEXTURE_2D,0,b,m,M,p);g(a)&&v(l),u.__version=h.version,a.onUpdate&&a.onUpdate(a)}e.__version=a.version}function L(e,r,a,l,c,h){const u=s.convert(a.format,a.colorSpace),d=s.convert(a.type),p=_(a.internalFormat,u,d,a.colorSpace);if(!i.get(r).__hasExternalTextures){const e=Math.max(1,r.width>>h),i=Math.max(1,r.height>>h);c===t.TEXTURE_3D||c===t.TEXTURE_2D_ARRAY?n.texImage3D(c,h,p,e,i,r.depth,0,u,d,null):n.texImage2D(c,h,p,e,i,0,u,d,null)}n.bindFramebuffer(t.FRAMEBUFFER,e),B(r)?o.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,l,c,i.get(a).__webglTexture,0,F(r)):(c===t.TEXTURE_2D||c>=t.TEXTURE_CUBE_MAP_POSITIVE_X&&c<=t.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&t.framebufferTexture2D(t.FRAMEBUFFER,l,c,i.get(a).__webglTexture,h),n.bindFramebuffer(t.FRAMEBUFFER,null)}function U(e,n,i){if(t.bindRenderbuffer(t.RENDERBUFFER,e),n.depthBuffer){const r=n.depthTexture,s=r&&r.isDepthTexture?r.type:null,a=x(n.stencilBuffer,s),l=n.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,c=F(n);B(n)?o.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,c,a,n.width,n.height):i?t.renderbufferStorageMultisample(t.RENDERBUFFER,c,a,n.width,n.height):t.renderbufferStorage(t.RENDERBUFFER,a,n.width,n.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,l,t.RENDERBUFFER,e)}else{const e=n.textures;for(let r=0;r<e.length;r++){const a=e[r],l=s.convert(a.format,a.colorSpace),c=s.convert(a.type),h=_(a.internalFormat,l,c,a.colorSpace),u=F(n);i&&!1===B(n)?t.renderbufferStorageMultisample(t.RENDERBUFFER,u,h,n.width,n.height):B(n)?o.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,u,h,n.width,n.height):t.renderbufferStorage(t.RENDERBUFFER,h,n.width,n.height)}}t.bindRenderbuffer(t.RENDERBUFFER,null)}function N(e){const r=i.get(e),s=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture&&!r.__autoAllocateDepthBuffer){if(s)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(t.FRAMEBUFFER,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),T(r.depthTexture,0);const s=i.get(r.depthTexture).__webglTexture,a=F(r);if(r.depthTexture.format===Gt)B(r)?o.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,s,0,a):t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,s,0);else{if(r.depthTexture.format!==Wt)throw new Error("Unknown depthTexture format");B(r)?o.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,s,0,a):t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,s,0)}}(r.__webglFramebuffer,e)}else if(s){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(t.FRAMEBUFFER,r.__webglFramebuffer[i]),r.__webglDepthbuffer[i]=t.createRenderbuffer(),U(r.__webglDepthbuffer[i],e,!1)}else n.bindFramebuffer(t.FRAMEBUFFER,r.__webglFramebuffer),r.__webglDepthbuffer=t.createRenderbuffer(),U(r.__webglDepthbuffer,e,!1);n.bindFramebuffer(t.FRAMEBUFFER,null)}const D=[],O=[];function F(t){return Math.min(r.maxSamples,t.samples)}function B(t){const n=i.get(t);return t.samples>0&&!0===e.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function z(t,e){const n=t.colorSpace,i=t.format,r=t.type;return!0===t.isCompressedTexture||!0===t.isVideoTexture||n!==Ze&&n!==qe&&(di.getTransfer(n)===Qe?i===kt&&r===Et||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",n)),e}function k(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement?(c.width=t.naturalWidth||t.width,c.height=t.naturalHeight||t.height):"undefined"!=typeof VideoFrame&&t instanceof VideoFrame?(c.width=t.displayWidth,c.height=t.displayHeight):(c.width=t.width,c.height=t.height),c}this.allocateTextureUnit=function(){const t=w;return t>=r.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+r.maxTextures),w+=1,t},this.resetTextureUnits=function(){w=0},this.setTexture2D=T,this.setTexture2DArray=function(e,r){const s=i.get(e);e.version>0&&s.__version!==e.version?I(s,e,r):n.bindTexture(t.TEXTURE_2D_ARRAY,s.__webglTexture,t.TEXTURE0+r)},this.setTexture3D=function(e,r){const s=i.get(e);e.version>0&&s.__version!==e.version?I(s,e,r):n.bindTexture(t.TEXTURE_3D,s.__webglTexture,t.TEXTURE0+r)},this.setTextureCube=function(e,a){const o=i.get(e);e.version>0&&o.__version!==e.version?function(e,a,o){if(6!==a.image.length)return;const l=P(e,a),c=a.source;n.bindTexture(t.TEXTURE_CUBE_MAP,e.__webglTexture,t.TEXTURE0+o);const h=i.get(c);if(c.version!==h.__version||!0===l){n.activeTexture(t.TEXTURE0+o);const e=di.getPrimaries(di.workingColorSpace),i=a.colorSpace===qe?null:di.getPrimaries(a.colorSpace),u=a.colorSpace===qe||e===i?t.NONE:t.BROWSER_DEFAULT_WEBGL;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,a.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,a.unpackAlignment),t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,u);const d=a.isCompressedTexture||a.image[0].isCompressedTexture,p=a.image[0]&&a.image[0].isDataTexture,m=[];for(let t=0;t<6;t++)m[t]=d||p?p?a.image[t].image:a.image[t]:f(a.image[t],!0,r.maxCubemapSize),m[t]=z(a,m[t]);const x=m[0],M=s.convert(a.format,a.colorSpace),S=s.convert(a.type),b=_(a.internalFormat,M,S,a.colorSpace),w=!0!==a.isVideoTexture,T=void 0===h.__version||!0===l,E=c.dataReady;let A,R=y(a,x);if(C(t.TEXTURE_CUBE_MAP,a),d){w&&T&&n.texStorage2D(t.TEXTURE_CUBE_MAP,R,b,x.width,x.height);for(let e=0;e<6;e++){A=m[e].mipmaps;for(let i=0;i<A.length;i++){const r=A[i];a.format!==kt?null!==M?w?E&&n.compressedTexSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,0,0,r.width,r.height,M,r.data):n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,b,r.width,r.height,0,r.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):w?E&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,0,0,r.width,r.height,M,S,r.data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,b,r.width,r.height,0,M,S,r.data)}}}else{if(A=a.mipmaps,w&&T){A.length>0&&R++;const e=k(m[0]);n.texStorage2D(t.TEXTURE_CUBE_MAP,R,b,e.width,e.height)}for(let e=0;e<6;e++)if(p){w?E&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,0,0,m[e].width,m[e].height,M,S,m[e].data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,b,m[e].width,m[e].height,0,M,S,m[e].data);for(let i=0;i<A.length;i++){const r=A[i].image[e].image;w?E&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,0,0,r.width,r.height,M,S,r.data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,b,r.width,r.height,0,M,S,r.data)}}else{w?E&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,0,0,M,S,m[e]):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,b,M,S,m[e]);for(let i=0;i<A.length;i++){const r=A[i];w?E&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,0,0,M,S,r.image[e]):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,b,M,S,r.image[e])}}}g(a)&&v(t.TEXTURE_CUBE_MAP),h.__version=c.version,a.onUpdate&&a.onUpdate(a)}e.__version=a.version}(o,e,a):n.bindTexture(t.TEXTURE_CUBE_MAP,o.__webglTexture,t.TEXTURE0+a)},this.rebindTextures=function(e,n,r){const s=i.get(e);void 0!==n&&L(s.__webglFramebuffer,e,e.texture,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,0),void 0!==r&&N(e)},this.setupRenderTarget=function(e){const r=e.texture,o=i.get(e),l=i.get(r);e.addEventListener("dispose",S);const c=e.textures,h=!0===e.isWebGLCubeRenderTarget,u=c.length>1;if(u||(void 0===l.__webglTexture&&(l.__webglTexture=t.createTexture()),l.__version=r.version,a.memory.textures++),h){o.__webglFramebuffer=[];for(let e=0;e<6;e++)if(r.mipmaps&&r.mipmaps.length>0){o.__webglFramebuffer[e]=[];for(let n=0;n<r.mipmaps.length;n++)o.__webglFramebuffer[e][n]=t.createFramebuffer()}else o.__webglFramebuffer[e]=t.createFramebuffer()}else{if(r.mipmaps&&r.mipmaps.length>0){o.__webglFramebuffer=[];for(let e=0;e<r.mipmaps.length;e++)o.__webglFramebuffer[e]=t.createFramebuffer()}else o.__webglFramebuffer=t.createFramebuffer();if(u)for(let e=0,n=c.length;e<n;e++){const n=i.get(c[e]);void 0===n.__webglTexture&&(n.__webglTexture=t.createTexture(),a.memory.textures++)}if(e.samples>0&&!1===B(e)){o.__webglMultisampledFramebuffer=t.createFramebuffer(),o.__webglColorRenderbuffer=[],n.bindFramebuffer(t.FRAMEBUFFER,o.__webglMultisampledFramebuffer);for(let n=0;n<c.length;n++){const i=c[n];o.__webglColorRenderbuffer[n]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,o.__webglColorRenderbuffer[n]);const r=s.convert(i.format,i.colorSpace),a=s.convert(i.type),l=_(i.internalFormat,r,a,i.colorSpace,!0===e.isXRRenderTarget),h=F(e);t.renderbufferStorageMultisample(t.RENDERBUFFER,h,l,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+n,t.RENDERBUFFER,o.__webglColorRenderbuffer[n])}t.bindRenderbuffer(t.RENDERBUFFER,null),e.depthBuffer&&(o.__webglDepthRenderbuffer=t.createRenderbuffer(),U(o.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(t.FRAMEBUFFER,null)}}if(h){n.bindTexture(t.TEXTURE_CUBE_MAP,l.__webglTexture),C(t.TEXTURE_CUBE_MAP,r);for(let n=0;n<6;n++)if(r.mipmaps&&r.mipmaps.length>0)for(let i=0;i<r.mipmaps.length;i++)L(o.__webglFramebuffer[n][i],e,r,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+n,i);else L(o.__webglFramebuffer[n],e,r,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+n,0);g(r)&&v(t.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(u){for(let r=0,s=c.length;r<s;r++){const s=c[r],a=i.get(s);n.bindTexture(t.TEXTURE_2D,a.__webglTexture),C(t.TEXTURE_2D,s),L(o.__webglFramebuffer,e,s,t.COLOR_ATTACHMENT0+r,t.TEXTURE_2D,0),g(s)&&v(t.TEXTURE_2D)}n.unbindTexture()}else{let i=t.TEXTURE_2D;if((e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget)&&(i=e.isWebGL3DRenderTarget?t.TEXTURE_3D:t.TEXTURE_2D_ARRAY),n.bindTexture(i,l.__webglTexture),C(i,r),r.mipmaps&&r.mipmaps.length>0)for(let n=0;n<r.mipmaps.length;n++)L(o.__webglFramebuffer[n],e,r,t.COLOR_ATTACHMENT0,i,n);else L(o.__webglFramebuffer,e,r,t.COLOR_ATTACHMENT0,i,0);g(r)&&v(i),n.unbindTexture()}e.depthBuffer&&N(e)},this.updateRenderTargetMipmap=function(e){const r=e.textures;for(let s=0,a=r.length;s<a;s++){const a=r[s];if(g(a)){const r=e.isWebGLCubeRenderTarget?t.TEXTURE_CUBE_MAP:t.TEXTURE_2D,s=i.get(a).__webglTexture;n.bindTexture(r,s),v(r),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(e.samples>0)if(!1===B(e)){const r=e.textures,s=e.width,a=e.height;let o=t.COLOR_BUFFER_BIT;const c=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,h=i.get(e),u=r.length>1;if(u)for(let e=0;e<r.length;e++)n.bindFramebuffer(t.FRAMEBUFFER,h.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,null),n.bindFramebuffer(t.FRAMEBUFFER,h.__webglFramebuffer),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,null,0);n.bindFramebuffer(t.READ_FRAMEBUFFER,h.__webglMultisampledFramebuffer),n.bindFramebuffer(t.DRAW_FRAMEBUFFER,h.__webglFramebuffer);for(let n=0;n<r.length;n++){if(e.resolveDepthBuffer&&(e.depthBuffer&&(o|=t.DEPTH_BUFFER_BIT),e.stencilBuffer&&e.resolveStencilBuffer&&(o|=t.STENCIL_BUFFER_BIT)),u){t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,h.__webglColorRenderbuffer[n]);const e=i.get(r[n]).__webglTexture;t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}t.blitFramebuffer(0,0,s,a,0,0,s,a,o,t.NEAREST),!0===l&&(D.length=0,O.length=0,D.push(t.COLOR_ATTACHMENT0+n),e.depthBuffer&&!1===e.resolveDepthBuffer&&(D.push(c),O.push(c),t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,O)),t.invalidateFramebuffer(t.READ_FRAMEBUFFER,D))}if(n.bindFramebuffer(t.READ_FRAMEBUFFER,null),n.bindFramebuffer(t.DRAW_FRAMEBUFFER,null),u)for(let e=0;e<r.length;e++){n.bindFramebuffer(t.FRAMEBUFFER,h.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,h.__webglColorRenderbuffer[e]);const s=i.get(r[e]).__webglTexture;n.bindFramebuffer(t.FRAMEBUFFER,h.__webglFramebuffer),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,s,0)}n.bindFramebuffer(t.DRAW_FRAMEBUFFER,h.__webglMultisampledFramebuffer)}else if(e.depthBuffer&&!1===e.resolveDepthBuffer&&l){const n=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,[n])}},this.setupDepthRenderbuffer=N,this.setupFrameBufferTexture=L,this.useMultisampledRTT=B}function Xl(t,e){return{convert:function(n,i=""){let r;const s=di.getTransfer(i);if(n===Et)return t.UNSIGNED_BYTE;if(n===Nt)return t.UNSIGNED_SHORT_4_4_4_4;if(n===Dt)return t.UNSIGNED_SHORT_5_5_5_1;if(n===Ft)return t.UNSIGNED_INT_5_9_9_9_REV;if(n===At)return t.BYTE;if(n===Rt)return t.SHORT;if(n===Ct)return t.UNSIGNED_SHORT;if(n===Pt)return t.INT;if(n===It)return t.UNSIGNED_INT;if(n===Lt)return t.FLOAT;if(n===Ut)return t.HALF_FLOAT;if(n===Bt)return t.ALPHA;if(n===zt)return t.RGB;if(n===kt)return t.RGBA;if(n===Vt)return t.LUMINANCE;if(n===Ht)return t.LUMINANCE_ALPHA;if(n===Gt)return t.DEPTH_COMPONENT;if(n===Wt)return t.DEPTH_STENCIL;if(n===Xt)return t.RED;if(n===jt)return t.RED_INTEGER;if(n===qt)return t.RG;if(n===Yt)return t.RG_INTEGER;if(n===Jt)return t.RGBA_INTEGER;if(n===Kt||n===$t||n===Qt||n===te)if(s===Qe){if(r=e.get("WEBGL_compressed_texture_s3tc_srgb"),null===r)return null;if(n===Kt)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===$t)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===Qt)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===te)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(r=e.get("WEBGL_compressed_texture_s3tc"),null===r)return null;if(n===Kt)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===$t)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===Qt)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===te)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(n===ee||n===ne||n===ie||n===re){if(r=e.get("WEBGL_compressed_texture_pvrtc"),null===r)return null;if(n===ee)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===ne)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===ie)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===re)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===se||n===ae||n===oe){if(r=e.get("WEBGL_compressed_texture_etc"),null===r)return null;if(n===se||n===ae)return s===Qe?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(n===oe)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}if(n===le||n===ce||n===he||n===ue||n===de||n===pe||n===me||n===fe||n===ge||n===ve||n===_e||n===xe||n===ye||n===Me){if(r=e.get("WEBGL_compressed_texture_astc"),null===r)return null;if(n===le)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===ce)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===he)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===ue)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===de)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===pe)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===me)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===fe)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===ge)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===ve)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===_e)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===xe)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===ye)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Me)return s===Qe?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}if(n===Se||n===be||n===we){if(r=e.get("EXT_texture_compression_bptc"),null===r)return null;if(n===Se)return s===Qe?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===be)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===we)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(n===Te||n===Ee||n===Ae||n===Re){if(r=e.get("EXT_texture_compression_rgtc"),null===r)return null;if(n===Se)return r.COMPRESSED_RED_RGTC1_EXT;if(n===Ee)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Ae)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Re)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return n===Ot?t.UNSIGNED_INT_24_8:void 0!==t[n]?t[n]:null}}}class jl extends ta{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class ql extends Ur{constructor(){super(),this.isGroup=!0,this.type="Group"}}const Yl={type:"move"};class Zl{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new ql,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new ql,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Pi,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Pi),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new ql,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Pi,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Pi),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let i=null,r=null,s=null;const a=this._targetRay,o=this._grip,l=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState){if(l&&t.hand){s=!0;for(const i of t.hand.values()){const t=e.getJointPose(i,n),r=this._getHandJoint(l,i);null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.matrixWorldNeedsUpdate=!0,r.jointRadius=t.radius),r.visible=null!==t}const i=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],a=i.position.distanceTo(r.position),o=.02,c=.005;l.inputState.pinching&&a>o+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!l.inputState.pinching&&a<=o-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));null!==a&&(i=e.getPose(t.targetRaySpace,n),null===i&&null!==r&&(i=r),null!==i&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(Yl)))}return null!==a&&(a.visible=null!==i),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==s),this}_getHandJoint(t,e){if(void 0===t.joints[e.jointName]){const n=new ql;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}class Jl{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,n){if(null===this.texture){const i=new Mi;t.properties.get(i).__webglTexture=e.texture,e.depthNear==n.depthNear&&e.depthFar==n.depthFar||(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=i}}getMesh(t){if(null!==this.texture&&null===this.mesh){const e=t.cameras[0].viewport,n=new Zs({vertexShader:"\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}",fragmentShader:"\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}",uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new Hs(new ma(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class Kl extends kn{constructor(t,e){super();const n=this;let i=null,r=1,s=null,a="local-floor",o=1,l=null,c=null,h=null,u=null,d=null,p=null;const m=new Jl,f=e.getContextAttributes();let g=null,v=null;const _=[],x=[],y=new $n;let M=null;const S=new ta;S.layers.enable(1),S.viewport=new Si;const b=new ta;b.layers.enable(2),b.viewport=new Si;const w=[S,b],T=new jl;T.layers.enable(1),T.layers.enable(2);let E=null,A=null;function R(t){const e=x.indexOf(t.inputSource);if(-1===e)return;const n=_[e];void 0!==n&&(n.update(t.inputSource,t.frame,l||s),n.dispatchEvent({type:t.type,data:t.inputSource}))}function C(){i.removeEventListener("select",R),i.removeEventListener("selectstart",R),i.removeEventListener("selectend",R),i.removeEventListener("squeeze",R),i.removeEventListener("squeezestart",R),i.removeEventListener("squeezeend",R),i.removeEventListener("end",C),i.removeEventListener("inputsourceschange",P);for(let t=0;t<_.length;t++){const e=x[t];null!==e&&(x[t]=null,_[t].disconnect(e))}E=null,A=null,m.reset(),t.setRenderTarget(g),d=null,u=null,h=null,i=null,v=null,D.stop(),n.isPresenting=!1,t.setPixelRatio(M),t.setSize(y.width,y.height,!1),n.dispatchEvent({type:"sessionend"})}function P(t){for(let e=0;e<t.removed.length;e++){const n=t.removed[e],i=x.indexOf(n);i>=0&&(x[i]=null,_[i].disconnect(n))}for(let e=0;e<t.added.length;e++){const n=t.added[e];let i=x.indexOf(n);if(-1===i){for(let t=0;t<_.length;t++){if(t>=x.length){x.push(n),i=t;break}if(null===x[t]){x[t]=n,i=t;break}}if(-1===i)break}const r=_[i];r&&r.connect(n)}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=_[t];return void 0===e&&(e=new Zl,_[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=_[t];return void 0===e&&(e=new Zl,_[t]=e),e.getGripSpace()},this.getHand=function(t){let e=_[t];return void 0===e&&(e=new Zl,_[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){r=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){a=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||s},this.setReferenceSpace=function(t){l=t},this.getBaseLayer=function(){return null!==u?u:d},this.getBinding=function(){return h},this.getFrame=function(){return p},this.getSession=function(){return i},this.setSession=async function(c){if(i=c,null!==i){if(g=t.getRenderTarget(),i.addEventListener("select",R),i.addEventListener("selectstart",R),i.addEventListener("selectend",R),i.addEventListener("squeeze",R),i.addEventListener("squeezestart",R),i.addEventListener("squeezeend",R),i.addEventListener("end",C),i.addEventListener("inputsourceschange",P),!0!==f.xrCompatible&&await e.makeXRCompatible(),M=t.getPixelRatio(),t.getSize(y),void 0===i.renderState.layers){const n={antialias:f.antialias,alpha:!0,depth:f.depth,stencil:f.stencil,framebufferScaleFactor:r};d=new XRWebGLLayer(i,e,n),i.updateRenderState({baseLayer:d}),t.setPixelRatio(1),t.setSize(d.framebufferWidth,d.framebufferHeight,!1),v=new wi(d.framebufferWidth,d.framebufferHeight,{format:kt,type:Et,colorSpace:t.outputColorSpace,stencilBuffer:f.stencil})}else{let n=null,s=null,a=null;f.depth&&(a=f.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,n=f.stencil?Wt:Gt,s=f.stencil?Ot:It);const o={colorFormat:e.RGBA8,depthFormat:a,scaleFactor:r};h=new XRWebGLBinding(i,e),u=h.createProjectionLayer(o),i.updateRenderState({layers:[u]}),t.setPixelRatio(1),t.setSize(u.textureWidth,u.textureHeight,!1),v=new wi(u.textureWidth,u.textureHeight,{format:kt,type:Et,depthTexture:new $a(u.textureWidth,u.textureHeight,s,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:f.stencil,colorSpace:t.outputColorSpace,samples:f.antialias?4:0,resolveDepthBuffer:!1===u.ignoreDepthValues})}v.isXRRenderTarget=!0,this.setFoveation(o),l=null,s=await i.requestReferenceSpace(a),D.setContext(i),D.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(null!==i)return i.environmentBlendMode},this.getDepthTexture=function(){return m.getDepthTexture()};const I=new Pi,L=new Pi;function U(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===i)return;null!==m.texture&&(t.near=m.depthNear,t.far=m.depthFar),T.near=b.near=S.near=t.near,T.far=b.far=S.far=t.far,E===T.near&&A===T.far||(i.updateRenderState({depthNear:T.near,depthFar:T.far}),E=T.near,A=T.far,S.near=E,S.far=A,b.near=E,b.far=A,S.updateProjectionMatrix(),b.updateProjectionMatrix(),t.updateProjectionMatrix());const e=t.parent,n=T.cameras;U(T,e);for(let t=0;t<n.length;t++)U(n[t],e);2===n.length?function(t,e,n){I.setFromMatrixPosition(e.matrixWorld),L.setFromMatrixPosition(n.matrixWorld);const i=I.distanceTo(L),r=e.projectionMatrix.elements,s=n.projectionMatrix.elements,a=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(s[8]+1)/s[0],d=a*h,p=a*u,m=i/(-h+u),f=m*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(f),t.translateZ(m),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=a+m,v=o+m,_=d-f,x=p+(i-f),y=l*o/v*g,M=c*o/v*g;t.projectionMatrix.makePerspective(_,x,y,M,g,v),t.projectionMatrixInverse.copy(t.projectionMatrix).invert()}(T,S,b):T.projectionMatrix.copy(S.projectionMatrix),function(t,e,n){null===n?t.matrix.copy(e.matrixWorld):(t.matrix.copy(n.matrixWorld),t.matrix.invert(),t.matrix.multiply(e.matrixWorld));t.matrix.decompose(t.position,t.quaternion,t.scale),t.updateMatrixWorld(!0),t.projectionMatrix.copy(e.projectionMatrix),t.projectionMatrixInverse.copy(e.projectionMatrixInverse),t.isPerspectiveCamera&&(t.fov=2*Wn*Math.atan(1/t.projectionMatrix.elements[5]),t.zoom=1)}(t,T,e)},this.getCamera=function(){return T},this.getFoveation=function(){if(null!==u||null!==d)return o},this.setFoveation=function(t){o=t,null!==u&&(u.fixedFoveation=t),null!==d&&void 0!==d.fixedFoveation&&(d.fixedFoveation=t)},this.hasDepthSensing=function(){return null!==m.texture},this.getDepthSensingMesh=function(){return m.getMesh(T)};let N=null;const D=new da;D.setAnimationLoop((function(e,r){if(c=r.getViewerPose(l||s),p=r,null!==c){const e=c.views;null!==d&&(t.setRenderTargetFramebuffer(v,d.framebuffer),t.setRenderTarget(v));let n=!1;e.length!==T.cameras.length&&(T.cameras.length=0,n=!0);for(let i=0;i<e.length;i++){const r=e[i];let s=null;if(null!==d)s=d.getViewport(r);else{const e=h.getViewSubImage(u,r);s=e.viewport,0===i&&(t.setRenderTargetTextures(v,e.colorTexture,u.ignoreDepthValues?void 0:e.depthStencilTexture),t.setRenderTarget(v))}let a=w[i];void 0===a&&(a=new ta,a.layers.enable(i),a.viewport=new Si,w[i]=a),a.matrix.fromArray(r.transform.matrix),a.matrix.decompose(a.position,a.quaternion,a.scale),a.projectionMatrix.fromArray(r.projectionMatrix),a.projectionMatrixInverse.copy(a.projectionMatrix).invert(),a.viewport.set(s.x,s.y,s.width,s.height),0===i&&(T.matrix.copy(a.matrix),T.matrix.decompose(T.position,T.quaternion,T.scale)),!0===n&&T.cameras.push(a)}const r=i.enabledFeatures;if(r&&r.includes("depth-sensing")){const n=h.getDepthInformation(e[0]);n&&n.isValid&&n.texture&&m.init(t,n,i.renderState)}}for(let t=0;t<_.length;t++){const e=x[t],n=_[t];null!==e&&void 0!==n&&n.update(e,r,l||s)}N&&N(e,r),r.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:r}),p=null})),this.setAnimationLoop=function(t){N=t},this.dispose=function(){}}}const $l=new gr,Ql=new ar;function tc(t,e){function n(t,e){!0===t.matrixAutoUpdate&&t.updateMatrix(),e.value.copy(t.matrix)}function i(t,i){t.opacity.value=i.opacity,i.color&&t.diffuse.value.copy(i.color),i.emissive&&t.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),i.map&&(t.map.value=i.map,n(i.map,t.mapTransform)),i.alphaMap&&(t.alphaMap.value=i.alphaMap,n(i.alphaMap,t.alphaMapTransform)),i.bumpMap&&(t.bumpMap.value=i.bumpMap,n(i.bumpMap,t.bumpMapTransform),t.bumpScale.value=i.bumpScale,i.side===d&&(t.bumpScale.value*=-1)),i.normalMap&&(t.normalMap.value=i.normalMap,n(i.normalMap,t.normalMapTransform),t.normalScale.value.copy(i.normalScale),i.side===d&&t.normalScale.value.negate()),i.displacementMap&&(t.displacementMap.value=i.displacementMap,n(i.displacementMap,t.displacementMapTransform),t.displacementScale.value=i.displacementScale,t.displacementBias.value=i.displacementBias),i.emissiveMap&&(t.emissiveMap.value=i.emissiveMap,n(i.emissiveMap,t.emissiveMapTransform)),i.specularMap&&(t.specularMap.value=i.specularMap,n(i.specularMap,t.specularMapTransform)),i.alphaTest>0&&(t.alphaTest.value=i.alphaTest);const r=e.get(i),s=r.envMap,a=r.envMapRotation;s&&(t.envMap.value=s,$l.copy(a),$l.x*=-1,$l.y*=-1,$l.z*=-1,s.isCubeTexture&&!1===s.isRenderTargetTexture&&($l.y*=-1,$l.z*=-1),t.envMapRotation.value.setFromMatrix4(Ql.makeRotationFromEuler($l)),t.flipEnvMap.value=s.isCubeTexture&&!1===s.isRenderTargetTexture?-1:1,t.reflectivity.value=i.reflectivity,t.ior.value=i.ior,t.refractionRatio.value=i.refractionRatio),i.lightMap&&(t.lightMap.value=i.lightMap,t.lightMapIntensity.value=i.lightMapIntensity,n(i.lightMap,t.lightMapTransform)),i.aoMap&&(t.aoMap.value=i.aoMap,t.aoMapIntensity.value=i.aoMapIntensity,n(i.aoMap,t.aoMapTransform))}return{refreshFogUniforms:function(e,n){n.color.getRGB(e.fogColor.value,qs(t)),n.isFog?(e.fogNear.value=n.near,e.fogFar.value=n.far):n.isFogExp2&&(e.fogDensity.value=n.density)},refreshMaterialUniforms:function(t,r,s,a,o){r.isMeshBasicMaterial||r.isMeshLambertMaterial?i(t,r):r.isMeshToonMaterial?(i(t,r),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(t,r)):r.isMeshPhongMaterial?(i(t,r),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4)}(t,r)):r.isMeshStandardMaterial?(i(t,r),function(t,e){t.metalness.value=e.metalness,e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap,n(e.metalnessMap,t.metalnessMapTransform));t.roughness.value=e.roughness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap,n(e.roughnessMap,t.roughnessMapTransform));e.envMap&&(t.envMapIntensity.value=e.envMapIntensity)}(t,r),r.isMeshPhysicalMaterial&&function(t,e,i){t.ior.value=e.ior,e.sheen>0&&(t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),t.sheenRoughness.value=e.sheenRoughness,e.sheenColorMap&&(t.sheenColorMap.value=e.sheenColorMap,n(e.sheenColorMap,t.sheenColorMapTransform)),e.sheenRoughnessMap&&(t.sheenRoughnessMap.value=e.sheenRoughnessMap,n(e.sheenRoughnessMap,t.sheenRoughnessMapTransform)));e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap,n(e.clearcoatMap,t.clearcoatMapTransform)),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap,n(e.clearcoatRoughnessMap,t.clearcoatRoughnessMapTransform)),e.clearcoatNormalMap&&(t.clearcoatNormalMap.value=e.clearcoatNormalMap,n(e.clearcoatNormalMap,t.clearcoatNormalMapTransform),t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),e.side===d&&t.clearcoatNormalScale.value.negate()));e.dispersion>0&&(t.dispersion.value=e.dispersion);e.iridescence>0&&(t.iridescence.value=e.iridescence,t.iridescenceIOR.value=e.iridescenceIOR,t.iridescenceThicknessMinimum.value=e.iridescenceThicknessRange[0],t.iridescenceThicknessMaximum.value=e.iridescenceThicknessRange[1],e.iridescenceMap&&(t.iridescenceMap.value=e.iridescenceMap,n(e.iridescenceMap,t.iridescenceMapTransform)),e.iridescenceThicknessMap&&(t.iridescenceThicknessMap.value=e.iridescenceThicknessMap,n(e.iridescenceThicknessMap,t.iridescenceThicknessMapTransform)));e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=i.texture,t.transmissionSamplerSize.value.set(i.width,i.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap,n(e.transmissionMap,t.transmissionMapTransform)),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap,n(e.thicknessMap,t.thicknessMapTransform)),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor));e.anisotropy>0&&(t.anisotropyVector.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation)),e.anisotropyMap&&(t.anisotropyMap.value=e.anisotropyMap,n(e.anisotropyMap,t.anisotropyMapTransform)));t.specularIntensity.value=e.specularIntensity,t.specularColor.value.copy(e.specularColor),e.specularColorMap&&(t.specularColorMap.value=e.specularColorMap,n(e.specularColorMap,t.specularColorMapTransform));e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap,n(e.specularIntensityMap,t.specularIntensityMapTransform))}(t,r,o)):r.isMeshMatcapMaterial?(i(t,r),function(t,e){e.matcap&&(t.matcap.value=e.matcap)}(t,r)):r.isMeshDepthMaterial?i(t,r):r.isMeshDistanceMaterial?(i(t,r),function(t,n){const i=e.get(n).light;t.referencePosition.value.setFromMatrixPosition(i.matrixWorld),t.nearDistance.value=i.shadow.camera.near,t.farDistance.value=i.shadow.camera.far}(t,r)):r.isMeshNormalMaterial?i(t,r):r.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,e.map&&(t.map.value=e.map,n(e.map,t.mapTransform))}(t,r),r.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,r)):r.isPointsMaterial?function(t,e,i,r){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*i,t.scale.value=.5*r,e.map&&(t.map.value=e.map,n(e.map,t.uvTransform));e.alphaMap&&(t.alphaMap.value=e.alphaMap,n(e.alphaMap,t.alphaMapTransform));e.alphaTest>0&&(t.alphaTest.value=e.alphaTest)}(t,r,s,a):r.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map,n(e.map,t.mapTransform));e.alphaMap&&(t.alphaMap.value=e.alphaMap,n(e.alphaMap,t.alphaMapTransform));e.alphaTest>0&&(t.alphaTest.value=e.alphaTest)}(t,r):r.isShadowMaterial?(t.color.value.copy(r.color),t.opacity.value=r.opacity):r.isShaderMaterial&&(r.uniformsNeedUpdate=!1)}}}function ec(t,e,n,i){let r={},s={},a=[];const o=t.getParameter(t.MAX_UNIFORM_BUFFER_BINDINGS);function l(t,e,n,i){const r=t.value,s=e+"_"+n;if(void 0===i[s])return i[s]="number"==typeof r||"boolean"==typeof r?r:r.clone(),!0;{const t=i[s];if("number"==typeof r||"boolean"==typeof r){if(t!==r)return i[s]=r,!0}else if(!1===t.equals(r))return t.copy(r),!0}return!1}function c(t){const e={boundary:0,storage:0};return"number"==typeof t||"boolean"==typeof t?(e.boundary=4,e.storage=4):t.isVector2?(e.boundary=8,e.storage=8):t.isVector3||t.isColor?(e.boundary=16,e.storage=12):t.isVector4?(e.boundary=16,e.storage=16):t.isMatrix3?(e.boundary=48,e.storage=48):t.isMatrix4?(e.boundary=64,e.storage=64):t.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",t),e}function h(e){const n=e.target;n.removeEventListener("dispose",h);const i=a.indexOf(n.__bindingPointIndex);a.splice(i,1),t.deleteBuffer(r[n.id]),delete r[n.id],delete s[n.id]}return{bind:function(t,e){const n=e.program;i.uniformBlockBinding(t,n)},update:function(n,u){let d=r[n.id];void 0===d&&(!function(t){const e=t.uniforms;let n=0;const i=16;for(let t=0,r=e.length;t<r;t++){const r=Array.isArray(e[t])?e[t]:[e[t]];for(let t=0,e=r.length;t<e;t++){const e=r[t],s=Array.isArray(e.value)?e.value:[e.value];for(let t=0,r=s.length;t<r;t++){const r=c(s[t]),a=n%i;0!==a&&i-a<r.boundary&&(n+=i-a),e.__data=new Float32Array(r.storage/Float32Array.BYTES_PER_ELEMENT),e.__offset=n,n+=r.storage}}}const r=n%i;r>0&&(n+=i-r);t.__size=n,t.__cache={}}(n),d=function(e){const n=function(){for(let t=0;t<o;t++)if(-1===a.indexOf(t))return a.push(t),t;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();e.__bindingPointIndex=n;const i=t.createBuffer(),r=e.__size,s=e.usage;return t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,r,s),t.bindBuffer(t.UNIFORM_BUFFER,null),t.bindBufferBase(t.UNIFORM_BUFFER,n,i),i}(n),r[n.id]=d,n.addEventListener("dispose",h));const p=u.program;i.updateUBOMapping(n,p);const m=e.render.frame;s[n.id]!==m&&(!function(e){const n=r[e.id],i=e.uniforms,s=e.__cache;t.bindBuffer(t.UNIFORM_BUFFER,n);for(let e=0,n=i.length;e<n;e++){const n=Array.isArray(i[e])?i[e]:[i[e]];for(let i=0,r=n.length;i<r;i++){const r=n[i];if(!0===l(r,e,i,s)){const e=r.__offset,n=Array.isArray(r.value)?r.value:[r.value];let i=0;for(let s=0;s<n.length;s++){const a=n[s],o=c(a);"number"==typeof a||"boolean"==typeof a?(r.__data[0]=a,t.bufferSubData(t.UNIFORM_BUFFER,e+i,r.__data)):a.isMatrix3?(r.__data[0]=a.elements[0],r.__data[1]=a.elements[1],r.__data[2]=a.elements[2],r.__data[3]=0,r.__data[4]=a.elements[3],r.__data[5]=a.elements[4],r.__data[6]=a.elements[5],r.__data[7]=0,r.__data[8]=a.elements[6],r.__data[9]=a.elements[7],r.__data[10]=a.elements[8],r.__data[11]=0):(a.toArray(r.__data,i),i+=o.storage/Float32Array.BYTES_PER_ELEMENT)}t.bufferSubData(t.UNIFORM_BUFFER,e,r.__data)}}}t.bindBuffer(t.UNIFORM_BUFFER,null)}(n),s[n.id]=m)},dispose:function(){for(const e in r)t.deleteBuffer(r[e]);a=[],r={},s={}}}}class nc{constructor(e={}){const{canvas:n=si(),context:i=null,depth:r=!0,stencil:s=!1,alpha:a=!1,antialias:o=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:p=!1}=e;let m;if(this.isWebGLRenderer=!0,null!==i){if("undefined"!=typeof WebGLRenderingContext&&i instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");m=i.getContextAttributes().alpha}else m=a;const f=new Uint32Array(4),g=new Int32Array(4);let v=null,_=null;const x=[],y=[];this.domElement=n,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=Ye,this.toneMapping=K,this.toneMappingExposure=1;const M=this;let S=!1,b=0,w=0,T=null,E=-1,A=null;const R=new Si,C=new Si;let P=null;const I=new Zr(0);let L=0,U=n.width,N=n.height,D=1,O=null,F=null;const B=new Si(0,0,U,N),z=new Si(0,0,U,N);let k=!1;const V=new ua;let H=!1,G=!1;const W=new ar,X=new Pi,j=new Si,q={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let Y=!1;function Z(){return null===T?D:1}let J,$,Q,tt,et,nt,it,rt,st,at,ot,lt,ct,ht,ut,dt,pt,mt,ft,gt,vt,_t,xt,yt,Mt=i;function St(t,e){return n.getContext(t,e)}try{const e={alpha:!0,depth:r,stencil:s,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:p};if("setAttribute"in n&&n.setAttribute("data-engine",`three.js r${t}`),n.addEventListener("webglcontextlost",At,!1),n.addEventListener("webglcontextrestored",Rt,!1),n.addEventListener("webglcontextcreationerror",Pt,!1),null===Mt){const t="webgl2";if(Mt=St(t,e),null===Mt)throw St(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function bt(){J=new ja(Mt),J.init(),_t=new Xl(Mt,J),$=new wa(Mt,J,e,_t),Q=new Vl(Mt),tt=new Za(Mt),et=new Al,nt=new Wl(Mt,J,Q,et,$,_t,tt),it=new Ea(M),rt=new Xa(M),st=new pa(Mt),xt=new Sa(Mt,st),at=new qa(Mt,st,tt,xt),ot=new Ka(Mt,at,st,tt),ft=new Ja(Mt,$,nt),dt=new Ta(et),lt=new El(M,it,rt,J,$,xt,dt),ct=new tc(M,et),ht=new Il,ut=new Fl(J),mt=new Ma(M,it,rt,Q,ot,m,l),pt=new kl(M,ot,$),yt=new ec(Mt,tt,$,Q),gt=new ba(Mt,J,tt),vt=new Ya(Mt,J,tt),tt.programs=lt.programs,M.capabilities=$,M.extensions=J,M.properties=et,M.renderLists=ht,M.shadowMap=pt,M.state=Q,M.info=tt}bt();const Tt=new Kl(M,Mt);function At(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),S=!0}function Rt(){console.log("THREE.WebGLRenderer: Context Restored."),S=!1;const t=tt.autoReset,e=pt.enabled,n=pt.autoUpdate,i=pt.needsUpdate,r=pt.type;bt(),tt.autoReset=t,pt.enabled=e,pt.autoUpdate=n,pt.needsUpdate=i,pt.type=r}function Pt(t){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",t.statusMessage)}function Lt(t){const e=t.target;e.removeEventListener("dispose",Lt),function(t){(function(t){const e=et.get(t).programs;void 0!==e&&(e.forEach((function(t){lt.releaseProgram(t)})),t.isShaderMaterial&&lt.releaseShaderCache(t))})(t),et.remove(t)}(e)}function Ft(t,e,n){!0===t.transparent&&2===t.side&&!1===t.forceSinglePass?(t.side=d,t.needsUpdate=!0,Zt(t,e,n),t.side=u,t.needsUpdate=!0,Zt(t,e,n),t.side=2):Zt(t,e,n)}this.xr=Tt,this.getContext=function(){return Mt},this.getContextAttributes=function(){return Mt.getContextAttributes()},this.forceContextLoss=function(){const t=J.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=J.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return D},this.setPixelRatio=function(t){void 0!==t&&(D=t,this.setSize(U,N,!1))},this.getSize=function(t){return t.set(U,N)},this.setSize=function(t,e,i=!0){Tt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(U=t,N=e,n.width=Math.floor(t*D),n.height=Math.floor(e*D),!0===i&&(n.style.width=t+"px",n.style.height=e+"px"),this.setViewport(0,0,t,e))},this.getDrawingBufferSize=function(t){return t.set(U*D,N*D).floor()},this.setDrawingBufferSize=function(t,e,i){U=t,N=e,D=i,n.width=Math.floor(t*i),n.height=Math.floor(e*i),this.setViewport(0,0,t,e)},this.getCurrentViewport=function(t){return t.copy(R)},this.getViewport=function(t){return t.copy(B)},this.setViewport=function(t,e,n,i){t.isVector4?B.set(t.x,t.y,t.z,t.w):B.set(t,e,n,i),Q.viewport(R.copy(B).multiplyScalar(D).round())},this.getScissor=function(t){return t.copy(z)},this.setScissor=function(t,e,n,i){t.isVector4?z.set(t.x,t.y,t.z,t.w):z.set(t,e,n,i),Q.scissor(C.copy(z).multiplyScalar(D).round())},this.getScissorTest=function(){return k},this.setScissorTest=function(t){Q.setScissorTest(k=t)},this.setOpaqueSort=function(t){O=t},this.setTransparentSort=function(t){F=t},this.getClearColor=function(t){return t.copy(mt.getClearColor())},this.setClearColor=function(){mt.setClearColor.apply(mt,arguments)},this.getClearAlpha=function(){return mt.getClearAlpha()},this.setClearAlpha=function(){mt.setClearAlpha.apply(mt,arguments)},this.clear=function(t=!0,e=!0,n=!0){let i=0;if(t){let t=!1;if(null!==T){const e=T.texture.format;t=e===Jt||e===Yt||e===jt}if(t){const t=T.texture.type,e=t===Et||t===It||t===Ct||t===Ot||t===Nt||t===Dt,n=mt.getClearColor(),i=mt.getClearAlpha(),r=n.r,s=n.g,a=n.b;e?(f[0]=r,f[1]=s,f[2]=a,f[3]=i,Mt.clearBufferuiv(Mt.COLOR,0,f)):(g[0]=r,g[1]=s,g[2]=a,g[3]=i,Mt.clearBufferiv(Mt.COLOR,0,g))}else i|=Mt.COLOR_BUFFER_BIT}e&&(i|=Mt.DEPTH_BUFFER_BIT),n&&(i|=Mt.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),Mt.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){n.removeEventListener("webglcontextlost",At,!1),n.removeEventListener("webglcontextrestored",Rt,!1),n.removeEventListener("webglcontextcreationerror",Pt,!1),ht.dispose(),ut.dispose(),et.dispose(),it.dispose(),rt.dispose(),ot.dispose(),xt.dispose(),yt.dispose(),lt.dispose(),Tt.dispose(),Tt.removeEventListener("sessionstart",zt),Tt.removeEventListener("sessionend",kt),Vt.stop()},this.renderBufferDirect=function(t,e,n,i,r,s){null===e&&(e=q);const a=r.isMesh&&r.matrixWorld.determinant()<0,o=function(t,e,n,i,r){!0!==e.isScene&&(e=q);nt.resetTextureUnits();const s=e.fog,a=i.isMeshStandardMaterial?e.environment:null,o=null===T?M.outputColorSpace:!0===T.isXRRenderTarget?T.texture.colorSpace:Ze,l=(i.isMeshStandardMaterial?rt:it).get(i.envMap||a),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,h=!!n.attributes.tangent&&(!!i.normalMap||i.anisotropy>0),u=!!n.morphAttributes.position,d=!!n.morphAttributes.normal,p=!!n.morphAttributes.color;let m=K;i.toneMapped&&(null!==T&&!0!==T.isXRRenderTarget||(m=M.toneMapping));const f=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,g=void 0!==f?f.length:0,v=et.get(i),x=_.state.lights;if(!0===H&&(!0===G||t!==A)){const e=t===A&&i.id===E;dt.setState(i,t,e)}let y=!1;i.version===v.__version?v.needsLights&&v.lightsStateVersion!==x.state.version||v.outputColorSpace!==o||r.isBatchedMesh&&!1===v.batching?y=!0:r.isBatchedMesh||!0!==v.batching?r.isBatchedMesh&&!0===v.batchingColor&&null===r.colorTexture||r.isBatchedMesh&&!1===v.batchingColor&&null!==r.colorTexture||r.isInstancedMesh&&!1===v.instancing?y=!0:r.isInstancedMesh||!0!==v.instancing?r.isSkinnedMesh&&!1===v.skinning?y=!0:r.isSkinnedMesh||!0!==v.skinning?r.isInstancedMesh&&!0===v.instancingColor&&null===r.instanceColor||r.isInstancedMesh&&!1===v.instancingColor&&null!==r.instanceColor||r.isInstancedMesh&&!0===v.instancingMorph&&null===r.morphTexture||r.isInstancedMesh&&!1===v.instancingMorph&&null!==r.morphTexture||v.envMap!==l||!0===i.fog&&v.fog!==s?y=!0:void 0===v.numClippingPlanes||v.numClippingPlanes===dt.numPlanes&&v.numIntersection===dt.numIntersection?(v.vertexAlphas!==c||v.vertexTangents!==h||v.morphTargets!==u||v.morphNormals!==d||v.morphColors!==p||v.toneMapping!==m||v.morphTargetsCount!==g)&&(y=!0):y=!0:y=!0:y=!0:y=!0:(y=!0,v.__version=i.version);let S=v.currentProgram;!0===y&&(S=Zt(i,e,r));let b=!1,w=!1,R=!1;const C=S.getUniforms(),P=v.uniforms;Q.useProgram(S.program)&&(b=!0,w=!0,R=!0);i.id!==E&&(E=i.id,w=!0);if(b||A!==t){C.setValue(Mt,"projectionMatrix",t.projectionMatrix),C.setValue(Mt,"viewMatrix",t.matrixWorldInverse);const e=C.map.cameraPosition;void 0!==e&&e.setValue(Mt,X.setFromMatrixPosition(t.matrixWorld)),$.logarithmicDepthBuffer&&C.setValue(Mt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&C.setValue(Mt,"isOrthographic",!0===t.isOrthographicCamera),A!==t&&(A=t,w=!0,R=!0)}if(r.isSkinnedMesh){C.setOptional(Mt,r,"bindMatrix"),C.setOptional(Mt,r,"bindMatrixInverse");const t=r.skeleton;t&&(null===t.boneTexture&&t.computeBoneTexture(),C.setValue(Mt,"boneTexture",t.boneTexture,nt))}r.isBatchedMesh&&(C.setOptional(Mt,r,"batchingTexture"),C.setValue(Mt,"batchingTexture",r._matricesTexture,nt),C.setOptional(Mt,r,"batchingIdTexture"),C.setValue(Mt,"batchingIdTexture",r._indirectTexture,nt),C.setOptional(Mt,r,"batchingColorTexture"),null!==r._colorsTexture&&C.setValue(Mt,"batchingColorTexture",r._colorsTexture,nt));const I=n.morphAttributes;void 0===I.position&&void 0===I.normal&&void 0===I.color||ft.update(r,n,S);(w||v.receiveShadow!==r.receiveShadow)&&(v.receiveShadow=r.receiveShadow,C.setValue(Mt,"receiveShadow",r.receiveShadow));i.isMeshGouraudMaterial&&null!==i.envMap&&(P.envMap.value=l,P.flipEnvMap.value=l.isCubeTexture&&!1===l.isRenderTargetTexture?-1:1);i.isMeshStandardMaterial&&null===i.envMap&&null!==e.environment&&(P.envMapIntensity.value=e.environmentIntensity);w&&(C.setValue(Mt,"toneMappingExposure",M.toneMappingExposure),v.needsLights&&(U=R,(L=P).ambientLightColor.needsUpdate=U,L.lightProbe.needsUpdate=U,L.directionalLights.needsUpdate=U,L.directionalLightShadows.needsUpdate=U,L.pointLights.needsUpdate=U,L.pointLightShadows.needsUpdate=U,L.spotLights.needsUpdate=U,L.spotLightShadows.needsUpdate=U,L.rectAreaLights.needsUpdate=U,L.hemisphereLights.needsUpdate=U),s&&!0===i.fog&&ct.refreshFogUniforms(P,s),ct.refreshMaterialUniforms(P,i,D,N,_.state.transmissionRenderTarget[t.id]),rl.upload(Mt,Kt(v),P,nt));var L,U;i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(rl.upload(Mt,Kt(v),P,nt),i.uniformsNeedUpdate=!1);i.isSpriteMaterial&&C.setValue(Mt,"center",r.center);if(C.setValue(Mt,"modelViewMatrix",r.modelViewMatrix),C.setValue(Mt,"normalMatrix",r.normalMatrix),C.setValue(Mt,"modelMatrix",r.matrixWorld),i.isShaderMaterial||i.isRawShaderMaterial){const t=i.uniformsGroups;for(let e=0,n=t.length;e<n;e++){const n=t[e];yt.update(n,S),yt.bind(n,S)}}return S}(t,e,n,i,r);Q.setMaterial(i,a);let l=n.index,c=1;if(!0===i.wireframe){if(l=at.getWireframeAttribute(n),void 0===l)return;c=2}const h=n.drawRange,u=n.attributes.position;let d=h.start*c,p=(h.start+h.count)*c;null!==s&&(d=Math.max(d,s.start*c),p=Math.min(p,(s.start+s.count)*c)),null!==l?(d=Math.max(d,0),p=Math.min(p,l.count)):null!=u&&(d=Math.max(d,0),p=Math.min(p,u.count));const m=p-d;if(m<0||m===1/0)return;let f;xt.setup(r,i,o,n,l);let g=gt;if(null!==l&&(f=st.get(l),g=vt,g.setIndex(f)),r.isMesh)!0===i.wireframe?(Q.setLineWidth(i.wireframeLinewidth*Z()),g.setMode(Mt.LINES)):g.setMode(Mt.TRIANGLES);else if(r.isLine){let t=i.linewidth;void 0===t&&(t=1),Q.setLineWidth(t*Z()),r.isLineSegments?g.setMode(Mt.LINES):r.isLineLoop?g.setMode(Mt.LINE_LOOP):g.setMode(Mt.LINE_STRIP)}else r.isPoints?g.setMode(Mt.POINTS):r.isSprite&&g.setMode(Mt.TRIANGLES);if(r.isBatchedMesh)if(null!==r._multiDrawInstances)g.renderMultiDrawInstances(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount,r._multiDrawInstances);else if(J.get("WEBGL_multi_draw"))g.renderMultiDraw(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount);else{const t=r._multiDrawStarts,e=r._multiDrawCounts,n=r._multiDrawCount,s=l?st.get(l).bytesPerElement:1,a=et.get(i).currentProgram.getUniforms();for(let i=0;i<n;i++)a.setValue(Mt,"_gl_DrawID",i),g.render(t[i]/s,e[i])}else if(r.isInstancedMesh)g.renderInstances(d,m,r.count);else if(n.isInstancedBufferGeometry){const t=void 0!==n._maxInstanceCount?n._maxInstanceCount:1/0,e=Math.min(n.instanceCount,t);g.renderInstances(d,m,e)}else g.render(d,m)},this.compile=function(t,e,n=null){null===n&&(n=t),_=ut.get(n),_.init(e),y.push(_),n.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(_.pushLight(t),t.castShadow&&_.pushShadow(t))})),t!==n&&t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(_.pushLight(t),t.castShadow&&_.pushShadow(t))})),_.setupLights();const i=new Set;return t.traverse((function(t){const e=t.material;if(e)if(Array.isArray(e))for(let r=0;r<e.length;r++){const s=e[r];Ft(s,n,t),i.add(s)}else Ft(e,n,t),i.add(e)})),y.pop(),_=null,i},this.compileAsync=function(t,e,n=null){const i=this.compile(t,e,n);return new Promise((e=>{function n(){i.forEach((function(t){et.get(t).currentProgram.isReady()&&i.delete(t)})),0!==i.size?setTimeout(n,10):e(t)}null!==J.get("KHR_parallel_shader_compile")?n():setTimeout(n,10)}))};let Bt=null;function zt(){Vt.stop()}function kt(){Vt.start()}const Vt=new da;function Ht(t,e,n,i){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)_.pushLight(t),t.castShadow&&_.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||V.intersectsSprite(t)){i&&j.setFromMatrixPosition(t.matrixWorld).applyMatrix4(W);const e=ot.update(t),r=t.material;r.visible&&v.push(t,e,r,n,j.z,null)}}else if((t.isMesh||t.isLine||t.isPoints)&&(!t.frustumCulled||V.intersectsObject(t))){const e=ot.update(t),r=t.material;if(i&&(void 0!==t.boundingSphere?(null===t.boundingSphere&&t.computeBoundingSphere(),j.copy(t.boundingSphere.center)):(null===e.boundingSphere&&e.computeBoundingSphere(),j.copy(e.boundingSphere.center)),j.applyMatrix4(t.matrixWorld).applyMatrix4(W)),Array.isArray(r)){const i=e.groups;for(let s=0,a=i.length;s<a;s++){const a=i[s],o=r[a.materialIndex];o&&o.visible&&v.push(t,e,o,n,j.z,a)}}else r.visible&&v.push(t,e,r,n,j.z,null)}const r=t.children;for(let t=0,s=r.length;t<s;t++)Ht(r[t],e,n,i)}function Gt(t,e,n,i){const r=t.opaque,s=t.transmissive,a=t.transparent;_.setupLightsView(n),!0===H&&dt.setGlobalState(M.clippingPlanes,n),i&&Q.viewport(R.copy(i)),r.length>0&&Xt(r,e,n),s.length>0&&Xt(s,e,n),a.length>0&&Xt(a,e,n),Q.buffers.depth.setTest(!0),Q.buffers.depth.setMask(!0),Q.buffers.color.setMask(!0),Q.setPolygonOffset(!1)}function Wt(t,e,n,i){if(null!==(!0===n.isScene?n.overrideMaterial:null))return;void 0===_.state.transmissionRenderTarget[i.id]&&(_.state.transmissionRenderTarget[i.id]=new wi(1,1,{generateMipmaps:!0,type:J.has("EXT_color_buffer_half_float")||J.has("EXT_color_buffer_float")?Ut:Et,minFilter:wt,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:di.workingColorSpace}));const r=_.state.transmissionRenderTarget[i.id],a=i.viewport||R;r.setSize(a.z,a.w);const o=M.getRenderTarget();M.setRenderTarget(r),M.getClearColor(I),L=M.getClearAlpha(),L<1&&M.setClearColor(16777215,.5),Y?mt.render(n):M.clear();const l=M.toneMapping;M.toneMapping=K;const c=i.viewport;if(void 0!==i.viewport&&(i.viewport=void 0),_.setupLightsView(i),!0===H&&dt.setGlobalState(M.clippingPlanes,i),Xt(t,n,i),nt.updateMultisampleRenderTarget(r),nt.updateRenderTargetMipmap(r),!1===J.has("WEBGL_multisampled_render_to_texture")){let t=!1;for(let r=0,s=e.length;r<s;r++){const s=e[r],a=s.object,o=s.geometry,l=s.material,c=s.group;if(2===l.side&&a.layers.test(i.layers)){const e=l.side;l.side=d,l.needsUpdate=!0,qt(a,n,i,o,l,c),l.side=e,l.needsUpdate=!0,t=!0}}!0===t&&(nt.updateMultisampleRenderTarget(r),nt.updateRenderTargetMipmap(r))}M.setRenderTarget(o),M.setClearColor(I,L),void 0!==c&&(i.viewport=c),M.toneMapping=l}function Xt(t,e,n){const i=!0===e.isScene?e.overrideMaterial:null;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=s.object,o=s.geometry,l=null===i?s.material:i,c=s.group;a.layers.test(n.layers)&&qt(a,e,n,o,l,c)}}function qt(t,e,n,i,r,s){t.onBeforeRender(M,e,n,i,r,s),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),!0===r.transparent&&2===r.side&&!1===r.forceSinglePass?(r.side=d,r.needsUpdate=!0,M.renderBufferDirect(n,e,i,r,t,s),r.side=u,r.needsUpdate=!0,M.renderBufferDirect(n,e,i,r,t,s),r.side=2):M.renderBufferDirect(n,e,i,r,t,s),t.onAfterRender(M,e,n,i,r,s)}function Zt(t,e,n){!0!==e.isScene&&(e=q);const i=et.get(t),r=_.state.lights,s=_.state.shadowsArray,a=r.state.version,o=lt.getParameters(t,r.state,s,e,n),l=lt.getProgramCacheKey(o);let c=i.programs;i.environment=t.isMeshStandardMaterial?e.environment:null,i.fog=e.fog,i.envMap=(t.isMeshStandardMaterial?rt:it).get(t.envMap||i.environment),i.envMapRotation=null!==i.environment&&null===t.envMap?e.environmentRotation:t.envMapRotation,void 0===c&&(t.addEventListener("dispose",Lt),c=new Map,i.programs=c);let h=c.get(l);if(void 0!==h){if(i.currentProgram===h&&i.lightsStateVersion===a)return $t(t,o),h}else o.uniforms=lt.getUniforms(t),t.onBeforeCompile(o,M),h=lt.acquireProgram(o,l),c.set(l,h),i.uniforms=o.uniforms;const u=i.uniforms;return(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(u.clippingPlanes=dt.uniform),$t(t,o),i.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),i.lightsStateVersion=a,i.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotLightMatrix.value=r.state.spotLightMatrix,u.spotLightMap.value=r.state.spotLightMap,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix),i.currentProgram=h,i.uniformsList=null,h}function Kt(t){if(null===t.uniformsList){const e=t.currentProgram.getUniforms();t.uniformsList=rl.seqWithValue(e.seq,t.uniforms)}return t.uniformsList}function $t(t,e){const n=et.get(t);n.outputColorSpace=e.outputColorSpace,n.batching=e.batching,n.batchingColor=e.batchingColor,n.instancing=e.instancing,n.instancingColor=e.instancingColor,n.instancingMorph=e.instancingMorph,n.skinning=e.skinning,n.morphTargets=e.morphTargets,n.morphNormals=e.morphNormals,n.morphColors=e.morphColors,n.morphTargetsCount=e.morphTargetsCount,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas,n.vertexTangents=e.vertexTangents,n.toneMapping=e.toneMapping}Vt.setAnimationLoop((function(t){Bt&&Bt(t)})),"undefined"!=typeof self&&Vt.setContext(self),this.setAnimationLoop=function(t){Bt=t,Tt.setAnimationLoop(t),null===t?Vt.stop():Vt.start()},Tt.addEventListener("sessionstart",zt),Tt.addEventListener("sessionend",kt),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===S)return;if(!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),null===e.parent&&!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),!0===Tt.enabled&&!0===Tt.isPresenting&&(!0===Tt.cameraAutoUpdate&&Tt.updateCamera(e),e=Tt.getCamera()),!0===t.isScene&&t.onBeforeRender(M,t,e,T),_=ut.get(t,y.length),_.init(e),y.push(_),W.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),V.setFromProjectionMatrix(W),G=this.localClippingEnabled,H=dt.init(this.clippingPlanes,G),v=ht.get(t,x.length),v.init(),x.push(v),!0===Tt.enabled&&!0===Tt.isPresenting){const t=M.xr.getDepthSensingMesh();null!==t&&Ht(t,e,-1/0,M.sortObjects)}Ht(t,e,0,M.sortObjects),v.finish(),!0===M.sortObjects&&v.sort(O,F),Y=!1===Tt.enabled||!1===Tt.isPresenting||!1===Tt.hasDepthSensing(),Y&&mt.addToRenderList(v,t),this.info.render.frame++,!0===H&&dt.beginShadows();const n=_.state.shadowsArray;pt.render(n,t,e),!0===H&&dt.endShadows(),!0===this.info.autoReset&&this.info.reset();const i=v.opaque,r=v.transmissive;if(_.setupLights(),e.isArrayCamera){const n=e.cameras;if(r.length>0)for(let e=0,s=n.length;e<s;e++){Wt(i,r,t,n[e])}Y&&mt.render(t);for(let e=0,i=n.length;e<i;e++){const i=n[e];Gt(v,t,i,i.viewport)}}else r.length>0&&Wt(i,r,t,e),Y&&mt.render(t),Gt(v,t,e);null!==T&&(nt.updateMultisampleRenderTarget(T),nt.updateRenderTargetMipmap(T)),!0===t.isScene&&t.onAfterRender(M,t,e),xt.resetDefaultState(),E=-1,A=null,y.pop(),y.length>0?(_=y[y.length-1],!0===H&&dt.setGlobalState(M.clippingPlanes,_.state.camera)):_=null,x.pop(),v=x.length>0?x[x.length-1]:null},this.getActiveCubeFace=function(){return b},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return T},this.setRenderTargetTextures=function(t,e,n){et.get(t.texture).__webglTexture=e,et.get(t.depthTexture).__webglTexture=n;const i=et.get(t);i.__hasExternalTextures=!0,i.__autoAllocateDepthBuffer=void 0===n,i.__autoAllocateDepthBuffer||!0===J.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),i.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(t,e){const n=et.get(t);n.__webglFramebuffer=e,n.__useDefaultFramebuffer=void 0===e},this.setRenderTarget=function(t,e=0,n=0){T=t,b=e,w=n;let i=!0,r=null,s=!1,a=!1;if(t){const o=et.get(t);void 0!==o.__useDefaultFramebuffer?(Q.bindFramebuffer(Mt.FRAMEBUFFER,null),i=!1):void 0===o.__webglFramebuffer?nt.setupRenderTarget(t):o.__hasExternalTextures&&nt.rebindTextures(t,et.get(t.texture).__webglTexture,et.get(t.depthTexture).__webglTexture);const l=t.texture;(l.isData3DTexture||l.isDataArrayTexture||l.isCompressedArrayTexture)&&(a=!0);const c=et.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(r=Array.isArray(c[e])?c[e][n]:c[e],s=!0):r=t.samples>0&&!1===nt.useMultisampledRTT(t)?et.get(t).__webglMultisampledFramebuffer:Array.isArray(c)?c[n]:c,R.copy(t.viewport),C.copy(t.scissor),P=t.scissorTest}else R.copy(B).multiplyScalar(D).floor(),C.copy(z).multiplyScalar(D).floor(),P=k;if(Q.bindFramebuffer(Mt.FRAMEBUFFER,r)&&i&&Q.drawBuffers(t,r),Q.viewport(R),Q.scissor(C),Q.setScissorTest(P),s){const i=et.get(t.texture);Mt.framebufferTexture2D(Mt.FRAMEBUFFER,Mt.COLOR_ATTACHMENT0,Mt.TEXTURE_CUBE_MAP_POSITIVE_X+e,i.__webglTexture,n)}else if(a){const i=et.get(t.texture),r=e||0;Mt.framebufferTextureLayer(Mt.FRAMEBUFFER,Mt.COLOR_ATTACHMENT0,i.__webglTexture,n||0,r)}E=-1},this.readRenderTargetPixels=function(t,e,n,i,r,s,a){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=et.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==a&&(o=o[a]),o){Q.bindFramebuffer(Mt.FRAMEBUFFER,o);try{const a=t.texture,o=a.format,l=a.type;if(!$.textureFormatReadable(o))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!$.textureTypeReadable(l))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r&&Mt.readPixels(e,n,i,r,_t.convert(o),_t.convert(l),s)}finally{const t=null!==T?et.get(T).__webglFramebuffer:null;Q.bindFramebuffer(Mt.FRAMEBUFFER,t)}}},this.readRenderTargetPixelsAsync=async function(t,e,n,i,r,s,a){if(!t||!t.isWebGLRenderTarget)throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=et.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==a&&(o=o[a]),o){Q.bindFramebuffer(Mt.FRAMEBUFFER,o);try{const a=t.texture,o=a.format,l=a.type;if(!$.textureFormatReadable(o))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!$.textureTypeReadable(l))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r){const t=Mt.createBuffer();Mt.bindBuffer(Mt.PIXEL_PACK_BUFFER,t),Mt.bufferData(Mt.PIXEL_PACK_BUFFER,s.byteLength,Mt.STREAM_READ),Mt.readPixels(e,n,i,r,_t.convert(o),_t.convert(l),0),Mt.flush();const a=Mt.fenceSync(Mt.SYNC_GPU_COMMANDS_COMPLETE,0);await function(t,e,n){return new Promise((function(i,r){setTimeout((function s(){switch(t.clientWaitSync(e,t.SYNC_FLUSH_COMMANDS_BIT,0)){case t.WAIT_FAILED:r();break;case t.TIMEOUT_EXPIRED:setTimeout(s,n);break;default:i()}}),n)}))}(Mt,a,4);try{Mt.bindBuffer(Mt.PIXEL_PACK_BUFFER,t),Mt.getBufferSubData(Mt.PIXEL_PACK_BUFFER,0,s)}finally{Mt.deleteBuffer(t),Mt.deleteSync(a)}return s}}finally{const t=null!==T?et.get(T).__webglFramebuffer:null;Q.bindFramebuffer(Mt.FRAMEBUFFER,t)}}},this.copyFramebufferToTexture=function(t,e=null,n=0){!0!==t.isTexture&&(console.warn("WebGLRenderer: copyFramebufferToTexture function signature has changed."),e=arguments[0]||null,t=arguments[1]);const i=Math.pow(2,-n),r=Math.floor(t.image.width*i),s=Math.floor(t.image.height*i),a=null!==e?e.x:0,o=null!==e?e.y:0;nt.setTexture2D(t,0),Mt.copyTexSubImage2D(Mt.TEXTURE_2D,n,0,0,a,o,r,s),Q.unbindTexture()},this.copyTextureToTexture=function(t,e,n=null,i=null,r=0){let s,a,o,l,c,h;!0!==t.isTexture&&(console.warn("WebGLRenderer: copyTextureToTexture function signature has changed."),i=arguments[0]||null,t=arguments[1],e=arguments[2],r=arguments[3]||0,n=null),null!==n?(s=n.max.x-n.min.x,a=n.max.y-n.min.y,o=n.min.x,l=n.min.y):(s=t.image.width,a=t.image.height,o=0,l=0),null!==i?(c=i.x,h=i.y):(c=0,h=0);const u=_t.convert(e.format),d=_t.convert(e.type);nt.setTexture2D(e,0),Mt.pixelStorei(Mt.UNPACK_FLIP_Y_WEBGL,e.flipY),Mt.pixelStorei(Mt.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),Mt.pixelStorei(Mt.UNPACK_ALIGNMENT,e.unpackAlignment);const p=Mt.getParameter(Mt.UNPACK_ROW_LENGTH),m=Mt.getParameter(Mt.UNPACK_IMAGE_HEIGHT),f=Mt.getParameter(Mt.UNPACK_SKIP_PIXELS),g=Mt.getParameter(Mt.UNPACK_SKIP_ROWS),v=Mt.getParameter(Mt.UNPACK_SKIP_IMAGES),_=t.isCompressedTexture?t.mipmaps[r]:t.image;Mt.pixelStorei(Mt.UNPACK_ROW_LENGTH,_.width),Mt.pixelStorei(Mt.UNPACK_IMAGE_HEIGHT,_.height),Mt.pixelStorei(Mt.UNPACK_SKIP_PIXELS,o),Mt.pixelStorei(Mt.UNPACK_SKIP_ROWS,l),t.isDataTexture?Mt.texSubImage2D(Mt.TEXTURE_2D,r,c,h,s,a,u,d,_.data):t.isCompressedTexture?Mt.compressedTexSubImage2D(Mt.TEXTURE_2D,r,c,h,_.width,_.height,u,_.data):Mt.texSubImage2D(Mt.TEXTURE_2D,r,c,h,s,a,u,d,_),Mt.pixelStorei(Mt.UNPACK_ROW_LENGTH,p),Mt.pixelStorei(Mt.UNPACK_IMAGE_HEIGHT,m),Mt.pixelStorei(Mt.UNPACK_SKIP_PIXELS,f),Mt.pixelStorei(Mt.UNPACK_SKIP_ROWS,g),Mt.pixelStorei(Mt.UNPACK_SKIP_IMAGES,v),0===r&&e.generateMipmaps&&Mt.generateMipmap(Mt.TEXTURE_2D),Q.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n=null,i=null,r=0){let s,a,o,l,c,h,u,d,p;!0!==t.isTexture&&(console.warn("WebGLRenderer: copyTextureToTexture3D function signature has changed."),n=arguments[0]||null,i=arguments[1]||null,t=arguments[2],e=arguments[3],r=arguments[4]||0);const m=t.isCompressedTexture?t.mipmaps[r]:t.image;null!==n?(s=n.max.x-n.min.x,a=n.max.y-n.min.y,o=n.max.z-n.min.z,l=n.min.x,c=n.min.y,h=n.min.z):(s=m.width,a=m.height,o=m.depth,l=0,c=0,h=0),null!==i?(u=i.x,d=i.y,p=i.z):(u=0,d=0,p=0);const f=_t.convert(e.format),g=_t.convert(e.type);let v;if(e.isData3DTexture)nt.setTexture3D(e,0),v=Mt.TEXTURE_3D;else{if(!e.isDataArrayTexture&&!e.isCompressedArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");nt.setTexture2DArray(e,0),v=Mt.TEXTURE_2D_ARRAY}Mt.pixelStorei(Mt.UNPACK_FLIP_Y_WEBGL,e.flipY),Mt.pixelStorei(Mt.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),Mt.pixelStorei(Mt.UNPACK_ALIGNMENT,e.unpackAlignment);const _=Mt.getParameter(Mt.UNPACK_ROW_LENGTH),x=Mt.getParameter(Mt.UNPACK_IMAGE_HEIGHT),y=Mt.getParameter(Mt.UNPACK_SKIP_PIXELS),M=Mt.getParameter(Mt.UNPACK_SKIP_ROWS),S=Mt.getParameter(Mt.UNPACK_SKIP_IMAGES);Mt.pixelStorei(Mt.UNPACK_ROW_LENGTH,m.width),Mt.pixelStorei(Mt.UNPACK_IMAGE_HEIGHT,m.height),Mt.pixelStorei(Mt.UNPACK_SKIP_PIXELS,l),Mt.pixelStorei(Mt.UNPACK_SKIP_ROWS,c),Mt.pixelStorei(Mt.UNPACK_SKIP_IMAGES,h),t.isDataTexture||t.isData3DTexture?Mt.texSubImage3D(v,r,u,d,p,s,a,o,f,g,m.data):e.isCompressedArrayTexture?Mt.compressedTexSubImage3D(v,r,u,d,p,s,a,o,f,m.data):Mt.texSubImage3D(v,r,u,d,p,s,a,o,f,g,m),Mt.pixelStorei(Mt.UNPACK_ROW_LENGTH,_),Mt.pixelStorei(Mt.UNPACK_IMAGE_HEIGHT,x),Mt.pixelStorei(Mt.UNPACK_SKIP_PIXELS,y),Mt.pixelStorei(Mt.UNPACK_SKIP_ROWS,M),Mt.pixelStorei(Mt.UNPACK_SKIP_IMAGES,S),0===r&&e.generateMipmaps&&Mt.generateMipmap(v),Q.unbindTexture()},this.initRenderTarget=function(t){void 0===et.get(t).__webglFramebuffer&&nt.setupRenderTarget(t)},this.initTexture=function(t){t.isCubeTexture?nt.setTextureCube(t,0):t.isData3DTexture?nt.setTexture3D(t,0):t.isDataArrayTexture||t.isCompressedArrayTexture?nt.setTexture2DArray(t,0):nt.setTexture2D(t,0),Q.unbindTexture()},this.resetState=function(){b=0,w=0,T=null,Q.reset(),xt.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Bn}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=t===Je?"display-p3":"srgb",e.unpackColorSpace=di.workingColorSpace===Ke?"display-p3":"srgb"}}class ic{constructor(t,e=25e-5){this.isFogExp2=!0,this.name="",this.color=new Zr(t),this.density=e}clone(){return new ic(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class rc{constructor(t,e=1,n=1e3){this.isFog=!0,this.name="",this.color=new Zr(t),this.near=e,this.far=n}clone(){return new rc(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class sc extends Ur{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new gr,this.environmentIntensity=1,this.environmentRotation=new gr,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),1!==this.environmentIntensity&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}class ac{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=An,this._updateRange={offset:0,count:-1},this.updateRanges=[],this.version=0,this.uuid=Xn()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}get updateRange(){return oi("THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."),this._updateRange}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,r=this.stride;i<r;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=Xn()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=Xn()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const oc=new Pi;class lc{constructor(t,e,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=n,this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)oc.fromBufferAttribute(this,e),oc.applyMatrix4(t),this.setXYZ(e,oc.x,oc.y,oc.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)oc.fromBufferAttribute(this,e),oc.applyNormalMatrix(t),this.setXYZ(e,oc.x,oc.y,oc.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)oc.fromBufferAttribute(this,e),oc.transformDirection(t),this.setXYZ(e,oc.x,oc.y,oc.z);return this}getComponent(t,e){let n=this.array[t*this.data.stride+this.offset+e];return this.normalized&&(n=Zn(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=Jn(n,this.array)),this.data.array[t*this.data.stride+this.offset+e]=n,this}setX(t,e){return this.normalized&&(e=Jn(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=Jn(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=Jn(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=Jn(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=Zn(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=Zn(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=Zn(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=Zn(e,this.array)),e}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=Jn(e,this.array),n=Jn(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=Jn(e,this.array),n=Jn(n,this.array),i=Jn(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t=t*this.data.stride+this.offset,this.normalized&&(e=Jn(e,this.array),n=Jn(n,this.array),i=Jn(i,this.array),r=Jn(r,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=r,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return new os(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new lc(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class cc extends $r{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new Zr(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}let hc;const uc=new Pi,dc=new Pi,pc=new Pi,mc=new $n,fc=new $n,gc=new ar,vc=new Pi,_c=new Pi,xc=new Pi,yc=new $n,Mc=new $n,Sc=new $n;class bc extends Ur{constructor(t=new cc){if(super(),this.isSprite=!0,this.type="Sprite",void 0===hc){hc=new ws;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new ac(t,5);hc.setIndex([0,1,2,0,2,3]),hc.setAttribute("position",new lc(e,3,0,!1)),hc.setAttribute("uv",new lc(e,2,3,!1))}this.geometry=hc,this.material=t,this.center=new $n(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),dc.setFromMatrixScale(this.matrixWorld),gc.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),pc.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&dc.multiplyScalar(-pc.z);const n=this.material.rotation;let i,r;0!==n&&(r=Math.cos(n),i=Math.sin(n));const s=this.center;wc(vc.set(-.5,-.5,0),pc,s,dc,i,r),wc(_c.set(.5,-.5,0),pc,s,dc,i,r),wc(xc.set(.5,.5,0),pc,s,dc,i,r),yc.set(0,0),Mc.set(1,0),Sc.set(1,1);let a=t.ray.intersectTriangle(vc,_c,xc,!1,uc);if(null===a&&(wc(_c.set(-.5,.5,0),pc,s,dc,i,r),Mc.set(0,1),a=t.ray.intersectTriangle(vc,xc,_c,!1,uc),null===a))return;const o=t.ray.origin.distanceTo(uc);o<t.near||o>t.far||e.push({distance:o,point:uc.clone(),uv:Wr.getInterpolation(uc,vc,_c,xc,yc,Mc,Sc,new $n),face:null,object:this})}copy(t,e){return super.copy(t,e),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}function wc(t,e,n,i,r,s){mc.subVectors(t,n).addScalar(.5).multiply(i),void 0!==r?(fc.x=s*mc.x-r*mc.y,fc.y=r*mc.x+s*mc.y):fc.copy(mc),t.copy(e),t.x+=fc.x,t.y+=fc.y,t.applyMatrix4(gc)}const Tc=new Pi,Ec=new Pi;class Ac extends Ur{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(t){super.copy(t,!1);const e=t.levels;for(let t=0,n=e.length;t<n;t++){const n=e[t];this.addLevel(n.object.clone(),n.distance,n.hysteresis)}return this.autoUpdate=t.autoUpdate,this}addLevel(t,e=0,n=0){e=Math.abs(e);const i=this.levels;let r;for(r=0;r<i.length&&!(e<i[r].distance);r++);return i.splice(r,0,{distance:e,hysteresis:n,object:t}),this.add(t),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let n,i;for(n=1,i=e.length;n<i;n++){let i=e[n].distance;if(e[n].object.visible&&(i-=i*e[n].hysteresis),t<i)break}return e[n-1].object}return null}raycast(t,e){if(this.levels.length>0){Tc.setFromMatrixPosition(this.matrixWorld);const n=t.ray.origin.distanceTo(Tc);this.getObjectForDistance(n).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){Tc.setFromMatrixPosition(t.matrixWorld),Ec.setFromMatrixPosition(this.matrixWorld);const n=Tc.distanceTo(Ec)/t.zoom;let i,r;for(e[0].object.visible=!0,i=1,r=e.length;i<r;i++){let t=e[i].distance;if(e[i].object.visible&&(t-=t*e[i].hysteresis),!(n>=t))break;e[i-1].object.visible=!1,e[i].object.visible=!0}for(this._currentLevel=i-1;i<r;i++)e[i].object.visible=!1}}toJSON(t){const e=super.toJSON(t);!1===this.autoUpdate&&(e.object.autoUpdate=!1),e.object.levels=[];const n=this.levels;for(let t=0,i=n.length;t<i;t++){const i=n[t];e.object.levels.push({object:i.object.uuid,distance:i.distance,hysteresis:i.hysteresis})}return e}}const Rc=new Pi,Cc=new Si,Pc=new Si,Ic=new Pi,Lc=new ar,Uc=new Pi,Nc=new Ki,Dc=new ar,Oc=new sr;class Fc extends Hs{constructor(t,e){super(t,e),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=st,this.bindMatrix=new ar,this.bindMatrixInverse=new ar,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const t=this.geometry;null===this.boundingBox&&(this.boundingBox=new Ui),this.boundingBox.makeEmpty();const e=t.getAttribute("position");for(let t=0;t<e.count;t++)this.getVertexPosition(t,Uc),this.boundingBox.expandByPoint(Uc)}computeBoundingSphere(){const t=this.geometry;null===this.boundingSphere&&(this.boundingSphere=new Ki),this.boundingSphere.makeEmpty();const e=t.getAttribute("position");for(let t=0;t<e.count;t++)this.getVertexPosition(t,Uc),this.boundingSphere.expandByPoint(Uc)}copy(t,e){return super.copy(t,e),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this}raycast(t,e){const n=this.material,i=this.matrixWorld;void 0!==n&&(null===this.boundingSphere&&this.computeBoundingSphere(),Nc.copy(this.boundingSphere),Nc.applyMatrix4(i),!1!==t.ray.intersectsSphere(Nc)&&(Dc.copy(i).invert(),Oc.copy(t.ray).applyMatrix4(Dc),null!==this.boundingBox&&!1===Oc.intersectsBox(this.boundingBox)||this._computeIntersections(t,e,Oc)))}getVertexPosition(t,e){return super.getVertexPosition(t,e),this.applyBoneTransform(t,e),e}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new Si,e=this.geometry.attributes.skinWeight;for(let n=0,i=e.count;n<i;n++){t.fromBufferAttribute(e,n);const i=1/t.manhattanLength();i!==1/0?t.multiplyScalar(i):t.set(1,0,0,0),e.setXYZW(n,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),this.bindMode===st?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===at?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(t,e){const n=this.skeleton,i=this.geometry;Cc.fromBufferAttribute(i.attributes.skinIndex,t),Pc.fromBufferAttribute(i.attributes.skinWeight,t),Rc.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const i=Pc.getComponent(t);if(0!==i){const r=Cc.getComponent(t);Lc.multiplyMatrices(n.bones[r].matrixWorld,n.boneInverses[r]),e.addScaledVector(Ic.copy(Rc).applyMatrix4(Lc),i)}}return e.applyMatrix4(this.bindMatrixInverse)}}class Bc extends Ur{constructor(){super(),this.isBone=!0,this.type="Bone"}}class zc extends Mi{constructor(t=null,e=1,n=1,i,r,s,a,o,l=1003,c=1003,h,u){super(null,s,a,o,l,c,i,r,h,u),this.isDataTexture=!0,this.image={data:t,width:e,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const kc=new ar,Vc=new ar;class Hc{constructor(t=[],e=[]){this.uuid=Xn(),this.bones=t.slice(0),this.boneInverses=e,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const t=this.bones,e=this.boneInverses;if(this.boneMatrices=new Float32Array(16*t.length),0===e.length)this.calculateInverses();else if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++)this.boneInverses.push(new ar)}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new ar;this.bones[t]&&e.copy(this.bones[t].matrixWorld).invert(),this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&e.matrixWorld.copy(this.boneInverses[t]).invert()}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const t=this.bones,e=this.boneInverses,n=this.boneMatrices,i=this.boneTexture;for(let i=0,r=t.length;i<r;i++){const r=t[i]?t[i].matrixWorld:Vc;kc.multiplyMatrices(r,e[i]),kc.toArray(n,16*i)}null!==i&&(i.needsUpdate=!0)}clone(){return new Hc(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(4*this.bones.length);t=4*Math.ceil(t/4),t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const n=new zc(e,t,t,kt,Lt);return n.needsUpdate=!0,this.boneMatrices=e,this.boneTexture=n,this}getBoneByName(t){for(let e=0,n=this.bones.length;e<n;e++){const n=this.bones[e];if(n.name===t)return n}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(t,e){this.uuid=t.uuid;for(let n=0,i=t.bones.length;n<i;n++){const i=t.bones[n];let r=e[i];void 0===r&&(console.warn("THREE.Skeleton: No bone found with UUID:",i),r=new Bc),this.bones.push(r),this.boneInverses.push((new ar).fromArray(t.boneInverses[n]))}return this.init(),this}toJSON(){const t={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones,n=this.boneInverses;for(let i=0,r=e.length;i<r;i++){const r=e[i];t.bones.push(r.uuid);const s=n[i];t.boneInverses.push(s.toArray())}return t}}class Gc extends os{constructor(t,e,n,i=1){super(t,e,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const Wc=new ar,Xc=new ar,jc=[],qc=new Ui,Yc=new ar,Zc=new Hs,Jc=new Ki;class Kc extends Hs{constructor(t,e,n){super(t,e),this.isInstancedMesh=!0,this.instanceMatrix=new Gc(new Float32Array(16*n),16),this.instanceColor=null,this.morphTexture=null,this.count=n,this.boundingBox=null,this.boundingSphere=null;for(let t=0;t<n;t++)this.setMatrixAt(t,Yc)}computeBoundingBox(){const t=this.geometry,e=this.count;null===this.boundingBox&&(this.boundingBox=new Ui),null===t.boundingBox&&t.computeBoundingBox(),this.boundingBox.makeEmpty();for(let n=0;n<e;n++)this.getMatrixAt(n,Wc),qc.copy(t.boundingBox).applyMatrix4(Wc),this.boundingBox.union(qc)}computeBoundingSphere(){const t=this.geometry,e=this.count;null===this.boundingSphere&&(this.boundingSphere=new Ki),null===t.boundingSphere&&t.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let n=0;n<e;n++)this.getMatrixAt(n,Wc),Jc.copy(t.boundingSphere).applyMatrix4(Wc),this.boundingSphere.union(Jc)}copy(t,e){return super.copy(t,e),this.instanceMatrix.copy(t.instanceMatrix),null!==t.morphTexture&&(this.morphTexture=t.morphTexture.clone()),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}getMorphAt(t,e){const n=e.morphTargetInfluences,i=this.morphTexture.source.data.data,r=t*(n.length+1)+1;for(let t=0;t<n.length;t++)n[t]=i[r+t]}raycast(t,e){const n=this.matrixWorld,i=this.count;if(Zc.geometry=this.geometry,Zc.material=this.material,void 0!==Zc.material&&(null===this.boundingSphere&&this.computeBoundingSphere(),Jc.copy(this.boundingSphere),Jc.applyMatrix4(n),!1!==t.ray.intersectsSphere(Jc)))for(let r=0;r<i;r++){this.getMatrixAt(r,Wc),Xc.multiplyMatrices(n,Wc),Zc.matrixWorld=Xc,Zc.raycast(t,jc);for(let t=0,n=jc.length;t<n;t++){const n=jc[t];n.instanceId=r,n.object=this,e.push(n)}jc.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new Gc(new Float32Array(3*this.instanceMatrix.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}setMorphAt(t,e){const n=e.morphTargetInfluences,i=n.length+1;null===this.morphTexture&&(this.morphTexture=new zc(new Float32Array(i*this.count),i,this.count,Xt,Lt));const r=this.morphTexture.source.data.data;let s=0;for(let t=0;t<n.length;t++)s+=n[t];const a=this.geometry.morphTargetsRelative?1:1-s,o=i*t;r[o]=a,r.set(n,o+1)}updateMorphTargets(){}dispose(){return this.dispatchEvent({type:"dispose"}),null!==this.morphTexture&&(this.morphTexture.dispose(),this.morphTexture=null),this}}function $c(t,e){return t.z-e.z}function Qc(t,e){return e.z-t.z}class th{constructor(){this.index=0,this.pool=[],this.list=[]}push(t,e,n){const i=this.pool,r=this.list;this.index>=i.length&&i.push({start:-1,count:-1,z:-1,index:-1});const s=i[this.index];r.push(s),this.index++,s.start=t.start,s.count=t.count,s.z=e,s.index=n}reset(){this.list.length=0,this.index=0}}const eh=new ar,nh=new ar,ih=new ar,rh=new Zr(1,1,1),sh=new ar,ah=new ua,oh=new Ui,lh=new Ki,ch=new Pi,hh=new Pi,uh=new Pi,dh=new th,ph=new Hs,mh=[];function fh(t,e,n=0){const i=e.itemSize;if(t.isInterleavedBufferAttribute||t.array.constructor!==e.array.constructor){const r=t.count;for(let s=0;s<r;s++)for(let r=0;r<i;r++)e.setComponent(s+n,r,t.getComponent(s,r))}else e.array.set(t.array,n*i);e.needsUpdate=!0}class gh extends Hs{get maxInstanceCount(){return this._maxInstanceCount}constructor(t,e,n=2*e,i){super(new ws,i),this.isBatchedMesh=!0,this.perObjectFrustumCulled=!0,this.sortObjects=!0,this.boundingBox=null,this.boundingSphere=null,this.customSort=null,this._drawInfo=[],this._drawRanges=[],this._reservedRanges=[],this._bounds=[],this._maxInstanceCount=t,this._maxVertexCount=e,this._maxIndexCount=n,this._geometryInitialized=!1,this._geometryCount=0,this._multiDrawCounts=new Int32Array(t),this._multiDrawStarts=new Int32Array(t),this._multiDrawCount=0,this._multiDrawInstances=null,this._visibilityChanged=!0,this._matricesTexture=null,this._indirectTexture=null,this._colorsTexture=null,this._initMatricesTexture(),this._initIndirectTexture()}_initMatricesTexture(){let t=Math.sqrt(4*this._maxInstanceCount);t=4*Math.ceil(t/4),t=Math.max(t,4);const e=new Float32Array(t*t*4),n=new zc(e,t,t,kt,Lt);this._matricesTexture=n}_initIndirectTexture(){let t=Math.sqrt(this._maxInstanceCount);t=Math.ceil(t);const e=new Uint32Array(t*t),n=new zc(e,t,t,jt,It);this._indirectTexture=n}_initColorsTexture(){let t=Math.sqrt(this._maxIndexCount);t=Math.ceil(t);const e=new Float32Array(t*t*4).fill(1),n=new zc(e,t,t,kt,Lt);n.colorSpace=di.workingColorSpace,this._colorsTexture=n}_initializeGeometry(t){const e=this.geometry,n=this._maxVertexCount,i=this._maxIndexCount;if(!1===this._geometryInitialized){for(const i in t.attributes){const r=t.getAttribute(i),{array:s,itemSize:a,normalized:o}=r,l=new s.constructor(n*a),c=new os(l,a,o);e.setAttribute(i,c)}if(null!==t.getIndex()){const t=n>65535?new Uint32Array(i):new Uint16Array(i);e.setIndex(new os(t,1))}this._geometryInitialized=!0}}_validateGeometry(t){const e=this.geometry;if(Boolean(t.getIndex())!==Boolean(e.getIndex()))throw new Error('BatchedMesh: All geometries must consistently have "index".');for(const n in e.attributes){if(!t.hasAttribute(n))throw new Error(`BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`);const i=t.getAttribute(n),r=e.getAttribute(n);if(i.itemSize!==r.itemSize||i.normalized!==r.normalized)throw new Error("BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}setCustomSort(t){return this.customSort=t,this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Ui);const t=this._geometryCount,e=this.boundingBox,n=this._drawInfo;e.makeEmpty();for(let i=0;i<t;i++){if(!1===n[i].active)continue;const t=n[i].geometryIndex;this.getMatrixAt(i,eh),this.getBoundingBoxAt(t,oh).applyMatrix4(eh),e.union(oh)}}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Ki);const t=this.boundingSphere,e=this._drawInfo;t.makeEmpty();for(let n=0,i=e.length;n<i;n++){if(!1===e[n].active)continue;const i=e[n].geometryIndex;this.getMatrixAt(n,eh),this.getBoundingSphereAt(i,lh).applyMatrix4(eh),t.union(lh)}}addInstance(t){if(this._drawInfo.length>=this._maxInstanceCount)throw new Error("BatchedMesh: Maximum item count reached.");this._drawInfo.push({visible:!0,active:!0,geometryIndex:t});const e=this._drawInfo.length-1,n=this._matricesTexture,i=n.image.data;ih.toArray(i,16*e),n.needsUpdate=!0;const r=this._colorsTexture;return r&&(rh.toArray(r.image.data,4*e),r.needsUpdate=!0),e}addGeometry(t,e=-1,n=-1){if(this._initializeGeometry(t),this._validateGeometry(t),this._drawInfo.length>=this._maxInstanceCount)throw new Error("BatchedMesh: Maximum item count reached.");const i={vertexStart:-1,vertexCount:-1,indexStart:-1,indexCount:-1};let r=null;const s=this._reservedRanges,a=this._drawRanges,o=this._bounds;0!==this._geometryCount&&(r=s[s.length-1]),i.vertexCount=-1===e?t.getAttribute("position").count:e,i.vertexStart=null===r?0:r.vertexStart+r.vertexCount;const l=t.getIndex(),c=null!==l;if(c&&(i.indexCount=-1===n?l.count:n,i.indexStart=null===r?0:r.indexStart+r.indexCount),-1!==i.indexStart&&i.indexStart+i.indexCount>this._maxIndexCount||i.vertexStart+i.vertexCount>this._maxVertexCount)throw new Error("BatchedMesh: Reserved space request exceeds the maximum buffer size.");const h=this._geometryCount;return this._geometryCount++,s.push(i),a.push({start:c?i.indexStart:i.vertexStart,count:-1}),o.push({boxInitialized:!1,box:new Ui,sphereInitialized:!1,sphere:new Ki}),this.setGeometryAt(h,t),h}setGeometryAt(t,e){if(t>=this._geometryCount)throw new Error("BatchedMesh: Maximum geometry count reached.");this._validateGeometry(e);const n=this.geometry,i=null!==n.getIndex(),r=n.getIndex(),s=e.getIndex(),a=this._reservedRanges[t];if(i&&s.count>a.indexCount||e.attributes.position.count>a.vertexCount)throw new Error("BatchedMesh: Reserved space not large enough for provided geometry.");const o=a.vertexStart,l=a.vertexCount;for(const t in n.attributes){const i=e.getAttribute(t),r=n.getAttribute(t);fh(i,r,o);const s=i.itemSize;for(let t=i.count,e=l;t<e;t++){const e=o+t;for(let t=0;t<s;t++)r.setComponent(e,t,0)}r.needsUpdate=!0,r.addUpdateRange(o*s,l*s)}if(i){const t=a.indexStart;for(let e=0;e<s.count;e++)r.setX(t+e,o+s.getX(e));for(let e=s.count,n=a.indexCount;e<n;e++)r.setX(t+e,o);r.needsUpdate=!0,r.addUpdateRange(t,a.indexCount)}const c=this._bounds[t];null!==e.boundingBox?(c.box.copy(e.boundingBox),c.boxInitialized=!0):c.boxInitialized=!1,null!==e.boundingSphere?(c.sphere.copy(e.boundingSphere),c.sphereInitialized=!0):c.sphereInitialized=!1;const h=this._drawRanges[t],u=e.getAttribute("position");return h.count=i?s.count:u.count,this._visibilityChanged=!0,t}getBoundingBoxAt(t,e){if(t>=this._geometryCount)return null;const n=this._bounds[t],i=n.box,r=this.geometry;if(!1===n.boxInitialized){i.makeEmpty();const e=r.index,s=r.attributes.position,a=this._drawRanges[t];for(let t=a.start,n=a.start+a.count;t<n;t++){let n=t;e&&(n=e.getX(n)),i.expandByPoint(ch.fromBufferAttribute(s,n))}n.boxInitialized=!0}return e.copy(i),e}getBoundingSphereAt(t,e){if(t>=this._geometryCount)return null;const n=this._bounds[t],i=n.sphere,r=this.geometry;if(!1===n.sphereInitialized){i.makeEmpty(),this.getBoundingBoxAt(t,oh),oh.getCenter(i.center);const e=r.index,s=r.attributes.position,a=this._drawRanges[t];let o=0;for(let t=a.start,n=a.start+a.count;t<n;t++){let n=t;e&&(n=e.getX(n)),ch.fromBufferAttribute(s,n),o=Math.max(o,i.center.distanceToSquared(ch))}i.radius=Math.sqrt(o),n.sphereInitialized=!0}return e.copy(i),e}setMatrixAt(t,e){const n=this._drawInfo,i=this._matricesTexture,r=this._matricesTexture.image.data;return t>=n.length||!1===n[t].active||(e.toArray(r,16*t),i.needsUpdate=!0),this}getMatrixAt(t,e){const n=this._drawInfo,i=this._matricesTexture.image.data;return t>=n.length||!1===n[t].active?null:e.fromArray(i,16*t)}setColorAt(t,e){null===this._colorsTexture&&this._initColorsTexture();const n=this._colorsTexture,i=this._colorsTexture.image.data,r=this._drawInfo;return t>=r.length||!1===r[t].active||(e.toArray(i,4*t),n.needsUpdate=!0),this}getColorAt(t,e){const n=this._colorsTexture.image.data,i=this._drawInfo;return t>=i.length||!1===i[t].active?null:e.fromArray(n,4*t)}setVisibleAt(t,e){const n=this._drawInfo;return t>=n.length||!1===n[t].active||n[t].visible===e||(n[t].visible=e,this._visibilityChanged=!0),this}getVisibleAt(t){const e=this._drawInfo;return!(t>=e.length||!1===e[t].active)&&e[t].visible}raycast(t,e){const n=this._drawInfo,i=this._drawRanges,r=this.matrixWorld,s=this.geometry;ph.material=this.material,ph.geometry.index=s.index,ph.geometry.attributes=s.attributes,null===ph.geometry.boundingBox&&(ph.geometry.boundingBox=new Ui),null===ph.geometry.boundingSphere&&(ph.geometry.boundingSphere=new Ki);for(let s=0,a=n.length;s<a;s++){if(!n[s].visible||!n[s].active)continue;const a=n[s].geometryIndex,o=i[a];ph.geometry.setDrawRange(o.start,o.count),this.getMatrixAt(s,ph.matrixWorld).premultiply(r),this.getBoundingBoxAt(a,ph.geometry.boundingBox),this.getBoundingSphereAt(a,ph.geometry.boundingSphere),ph.raycast(t,mh);for(let t=0,n=mh.length;t<n;t++){const n=mh[t];n.object=this,n.batchId=s,e.push(n)}mh.length=0}ph.material=null,ph.geometry.index=null,ph.geometry.attributes={},ph.geometry.setDrawRange(0,1/0)}copy(t){return super.copy(t),this.geometry=t.geometry.clone(),this.perObjectFrustumCulled=t.perObjectFrustumCulled,this.sortObjects=t.sortObjects,this.boundingBox=null!==t.boundingBox?t.boundingBox.clone():null,this.boundingSphere=null!==t.boundingSphere?t.boundingSphere.clone():null,this._drawRanges=t._drawRanges.map((t=>({...t}))),this._reservedRanges=t._reservedRanges.map((t=>({...t}))),this._drawInfo=t._drawInfo.map((t=>({...t}))),this._bounds=t._bounds.map((t=>({boxInitialized:t.boxInitialized,box:t.box.clone(),sphereInitialized:t.sphereInitialized,sphere:t.sphere.clone()}))),this._maxInstanceCount=t._maxInstanceCount,this._maxVertexCount=t._maxVertexCount,this._maxIndexCount=t._maxIndexCount,this._geometryInitialized=t._geometryInitialized,this._geometryCount=t._geometryCount,this._multiDrawCounts=t._multiDrawCounts.slice(),this._multiDrawStarts=t._multiDrawStarts.slice(),this._matricesTexture=t._matricesTexture.clone(),this._matricesTexture.image.data=this._matricesTexture.image.slice(),null!==this._colorsTexture&&(this._colorsTexture=t._colorsTexture.clone(),this._colorsTexture.image.data=this._colorsTexture.image.slice()),this}dispose(){return this.geometry.dispose(),this._matricesTexture.dispose(),this._matricesTexture=null,this._indirectTexture.dispose(),this._indirectTexture=null,null!==this._colorsTexture&&(this._colorsTexture.dispose(),this._colorsTexture=null),this}onBeforeRender(t,e,n,i,r){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects)return;const s=i.getIndex(),a=null===s?1:s.array.BYTES_PER_ELEMENT,o=this._drawInfo,l=this._multiDrawStarts,c=this._multiDrawCounts,h=this._drawRanges,u=this.perObjectFrustumCulled,d=this._indirectTexture,p=d.image.data;u&&(sh.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse).multiply(this.matrixWorld),ah.setFromProjectionMatrix(sh,t.coordinateSystem));let m=0;if(this.sortObjects){nh.copy(this.matrixWorld).invert(),ch.setFromMatrixPosition(n.matrixWorld).applyMatrix4(nh),hh.set(0,0,-1).transformDirection(n.matrixWorld).transformDirection(nh);for(let t=0,e=o.length;t<e;t++)if(o[t].visible&&o[t].active){const e=o[t].geometryIndex;this.getMatrixAt(t,eh),this.getBoundingSphereAt(e,lh).applyMatrix4(eh);let n=!1;if(u&&(n=!ah.intersectsSphere(lh)),!n){const n=uh.subVectors(lh.center,ch).dot(hh);dh.push(h[e],n,t)}}const t=dh.list,e=this.customSort;null===e?t.sort(r.transparent?Qc:$c):e.call(this,t,n);for(let e=0,n=t.length;e<n;e++){const n=t[e];l[m]=n.start*a,c[m]=n.count,p[m]=n.index,m++}dh.reset()}else for(let t=0,e=o.length;t<e;t++)if(o[t].visible&&o[t].active){const e=o[t].geometryIndex;let n=!1;if(u&&(this.getMatrixAt(t,eh),this.getBoundingSphereAt(e,lh).applyMatrix4(eh),n=!ah.intersectsSphere(lh)),!n){const n=h[e];l[m]=n.start*a,c[m]=n.count,p[m]=t,m++}}d.needsUpdate=!0,this._multiDrawCount=m,this._visibilityChanged=!1}onBeforeShadow(t,e,n,i,r,s){this.onBeforeRender(t,null,i,r,s)}}class vh extends $r{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Zr(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const _h=new Pi,xh=new Pi,yh=new ar,Mh=new sr,Sh=new Ki,bh=new Pi,wh=new Pi;class Th extends Ur{constructor(t=new ws,e=new vh){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,n=[0];for(let t=1,i=e.count;t<i;t++)_h.fromBufferAttribute(e,t-1),xh.fromBufferAttribute(e,t),n[t]=n[t-1],n[t]+=_h.distanceTo(xh);t.setAttribute("lineDistance",new gs(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Line.threshold,s=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Sh.copy(n.boundingSphere),Sh.applyMatrix4(i),Sh.radius+=r,!1===t.ray.intersectsSphere(Sh))return;yh.copy(i).invert(),Mh.copy(t.ray).applyMatrix4(yh);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=this.isLineSegments?2:1,c=n.index,h=n.attributes.position;if(null!==c){const n=Math.max(0,s.start),i=Math.min(c.count,s.start+s.count);for(let r=n,s=i-1;r<s;r+=l){const n=c.getX(r),i=c.getX(r+1),s=Eh(this,t,Mh,o,n,i);s&&e.push(s)}if(this.isLineLoop){const r=c.getX(i-1),s=c.getX(n),a=Eh(this,t,Mh,o,r,s);a&&e.push(a)}}else{const n=Math.max(0,s.start),i=Math.min(h.count,s.start+s.count);for(let r=n,s=i-1;r<s;r+=l){const n=Eh(this,t,Mh,o,r,r+1);n&&e.push(n)}if(this.isLineLoop){const r=Eh(this,t,Mh,o,i-1,n);r&&e.push(r)}}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const n=t[e[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=n.length;t<e;t++){const e=n[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}function Eh(t,e,n,i,r,s){const a=t.geometry.attributes.position;_h.fromBufferAttribute(a,r),xh.fromBufferAttribute(a,s);if(n.distanceSqToSegment(_h,xh,bh,wh)>i)return;bh.applyMatrix4(t.matrixWorld);const o=e.ray.origin.distanceTo(bh);return o<e.near||o>e.far?void 0:{distance:o,point:wh.clone().applyMatrix4(t.matrixWorld),index:r,face:null,faceIndex:null,object:t}}const Ah=new Pi,Rh=new Pi;class Ch extends Th{constructor(t,e){super(t,e),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,n=[];for(let t=0,i=e.count;t<i;t+=2)Ah.fromBufferAttribute(e,t),Rh.fromBufferAttribute(e,t+1),n[t]=0===t?0:n[t-1],n[t+1]=n[t]+Ah.distanceTo(Rh);t.setAttribute("lineDistance",new gs(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Ph extends Th{constructor(t,e){super(t,e),this.isLineLoop=!0,this.type="LineLoop"}}class Ih extends $r{constructor(t){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Zr(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}const Lh=new ar,Uh=new sr,Nh=new Ki,Dh=new Pi;class Oh extends Ur{constructor(t=new ws,e=new Ih){super(),this.isPoints=!0,this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Points.threshold,s=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Nh.copy(n.boundingSphere),Nh.applyMatrix4(i),Nh.radius+=r,!1===t.ray.intersectsSphere(Nh))return;Lh.copy(i).invert(),Uh.copy(t.ray).applyMatrix4(Lh);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=n.index,c=n.attributes.position;if(null!==l){for(let n=Math.max(0,s.start),r=Math.min(l.count,s.start+s.count);n<r;n++){const r=l.getX(n);Dh.fromBufferAttribute(c,r),Fh(Dh,r,o,i,t,e,this)}}else{for(let n=Math.max(0,s.start),r=Math.min(c.count,s.start+s.count);n<r;n++)Dh.fromBufferAttribute(c,n),Fh(Dh,n,o,i,t,e,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const n=t[e[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=n.length;t<e;t++){const e=n[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}function Fh(t,e,n,i,r,s,a){const o=Uh.distanceSqToPoint(t);if(o<n){const n=new Pi;Uh.closestPointToPoint(t,n),n.applyMatrix4(i);const l=r.ray.origin.distanceTo(n);if(l<r.near||l>r.far)return;s.push({distance:l,distanceToRay:Math.sqrt(o),point:n,index:e,face:null,object:a})}}class Bh extends Mi{constructor(t,e,n,i,r,s,a,o,l){super(t,e,n,i,r,s,a,o,l),this.isVideoTexture=!0,this.minFilter=void 0!==s?s:Mt,this.magFilter=void 0!==r?r:Mt,this.generateMipmaps=!1;const c=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){c.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1==="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}class zh extends Mi{constructor(t,e){super({width:t,height:e}),this.isFramebufferTexture=!0,this.magFilter=gt,this.minFilter=gt,this.generateMipmaps=!1,this.needsUpdate=!0}}class kh extends Mi{constructor(t,e,n,i,r,s,a,o,l,c,h,u){super(null,s,a,o,l,c,i,r,h,u),this.isCompressedTexture=!0,this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}class Vh extends kh{constructor(t,e,n,i,r,s){super(t,e,n,r,s),this.isCompressedArrayTexture=!0,this.image.depth=i,this.wrapR=mt,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class Hh extends kh{constructor(t,e,n){super(void 0,t[0].width,t[0].height,e,n,lt),this.isCompressedCubeTexture=!0,this.isCubeTexture=!0,this.image=t}}class Gh extends Mi{constructor(t,e,n,i,r,s,a,o,l){super(t,e,n,i,r,s,a,o,l),this.isCanvasTexture=!0,this.needsUpdate=!0}}class Wh{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let n,i=this.getPoint(0),r=0;e.push(0);for(let s=1;s<=t;s++)n=this.getPoint(s/t),r+=n.distanceTo(i),e.push(r),i=n;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const n=this.getLengths();let i=0;const r=n.length;let s;s=e||t*n[r-1];let a,o=0,l=r-1;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),a=n[i]-s,a<0)o=i+1;else{if(!(a>0)){l=i;break}l=i-1}if(i=l,n[i]===s)return i/(r-1);const c=n[i];return(i+(s-c)/(n[i+1]-c))/(r-1)}getTangent(t,e){const n=1e-4;let i=t-n,r=t+n;i<0&&(i=0),r>1&&(r=1);const s=this.getPoint(i),a=this.getPoint(r),o=e||(s.isVector2?new $n:new Pi);return o.copy(a).sub(s).normalize(),o}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e){const n=new Pi,i=[],r=[],s=[],a=new Pi,o=new ar;for(let e=0;e<=t;e++){const n=e/t;i[e]=this.getTangentAt(n,new Pi)}r[0]=new Pi,s[0]=new Pi;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x),h=Math.abs(i[0].y),u=Math.abs(i[0].z);c<=l&&(l=c,n.set(1,0,0)),h<=l&&(l=h,n.set(0,1,0)),u<=l&&n.set(0,0,1),a.crossVectors(i[0],n).normalize(),r[0].crossVectors(i[0],a),s[0].crossVectors(i[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),s[e]=s[e-1].clone(),a.crossVectors(i[e-1],i[e]),a.length()>Number.EPSILON){a.normalize();const t=Math.acos(jn(i[e-1].dot(i[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(a,t))}s[e].crossVectors(i[e],r[e])}if(!0===e){let e=Math.acos(jn(r[0].dot(r[t]),-1,1));e/=t,i[0].dot(a.crossVectors(r[0],r[t]))>0&&(e=-e);for(let n=1;n<=t;n++)r[n].applyMatrix4(o.makeRotationAxis(i[n],e*n)),s[n].crossVectors(i[n],r[n])}return{tangents:i,normals:r,binormals:s}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class Xh extends Wh{constructor(t=0,e=0,n=1,i=1,r=0,s=2*Math.PI,a=!1,o=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=n,this.yRadius=i,this.aStartAngle=r,this.aEndAngle=s,this.aClockwise=a,this.aRotation=o}getPoint(t,e=new $n){const n=e,i=2*Math.PI;let r=this.aEndAngle-this.aStartAngle;const s=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(r=s?0:i),!0!==this.aClockwise||s||(r===i?r=-i:r-=i);const a=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(a),l=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),n=o-this.aX,i=l-this.aY;o=n*t-i*e+this.aX,l=n*e+i*t+this.aY}return n.set(o,l)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}class jh extends Xh{constructor(t,e,n,i,r,s){super(t,e,n,n,i,r,s),this.isArcCurve=!0,this.type="ArcCurve"}}function qh(){let t=0,e=0,n=0,i=0;function r(r,s,a,o){t=r,e=a,n=-3*r+3*s-2*a-o,i=2*r-2*s+a+o}return{initCatmullRom:function(t,e,n,i,s){r(e,n,s*(n-t),s*(i-e))},initNonuniformCatmullRom:function(t,e,n,i,s,a,o){let l=(e-t)/s-(n-t)/(s+a)+(n-e)/a,c=(n-e)/a-(i-e)/(a+o)+(i-n)/o;l*=a,c*=a,r(e,n,l,c)},calc:function(r){const s=r*r;return t+e*r+n*s+i*(s*r)}}}const Yh=new Pi,Zh=new qh,Jh=new qh,Kh=new qh;class $h extends Wh{constructor(t=[],e=!1,n="centripetal",i=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=n,this.tension=i}getPoint(t,e=new Pi){const n=e,i=this.points,r=i.length,s=(r-(this.closed?0:1))*t;let a,o,l=Math.floor(s),c=s-l;this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/r)+1)*r:0===c&&l===r-1&&(l=r-2,c=1),this.closed||l>0?a=i[(l-1)%r]:(Yh.subVectors(i[0],i[1]).add(i[0]),a=Yh);const h=i[l%r],u=i[(l+1)%r];if(this.closed||l+2<r?o=i[(l+2)%r]:(Yh.subVectors(i[r-1],i[r-2]).add(i[r-1]),o=Yh),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(a.distanceToSquared(h),t),n=Math.pow(h.distanceToSquared(u),t),i=Math.pow(u.distanceToSquared(o),t);n<1e-4&&(n=1),e<1e-4&&(e=n),i<1e-4&&(i=n),Zh.initNonuniformCatmullRom(a.x,h.x,u.x,o.x,e,n,i),Jh.initNonuniformCatmullRom(a.y,h.y,u.y,o.y,e,n,i),Kh.initNonuniformCatmullRom(a.z,h.z,u.z,o.z,e,n,i)}else"catmullrom"===this.curveType&&(Zh.initCatmullRom(a.x,h.x,u.x,o.x,this.tension),Jh.initCatmullRom(a.y,h.y,u.y,o.y,this.tension),Kh.initCatmullRom(a.z,h.z,u.z,o.z,this.tension));return n.set(Zh.calc(c),Jh.calc(c),Kh.calc(c)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new Pi).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function Qh(t,e,n,i,r){const s=.5*(i-e),a=.5*(r-n),o=t*t;return(2*n-2*i+s+a)*(t*o)+(-3*n+3*i-2*s-a)*o+s*t+n}function tu(t,e,n,i){return function(t,e){const n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,i)}function eu(t,e,n,i,r){return function(t,e){const n=1-t;return n*n*n*e}(t,e)+function(t,e){const n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,i)+function(t,e){return t*t*t*e}(t,r)}class nu extends Wh{constructor(t=new $n,e=new $n,n=new $n,i=new $n){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new $n){const n=e,i=this.v0,r=this.v1,s=this.v2,a=this.v3;return n.set(eu(t,i.x,r.x,s.x,a.x),eu(t,i.y,r.y,s.y,a.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class iu extends Wh{constructor(t=new Pi,e=new Pi,n=new Pi,i=new Pi){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new Pi){const n=e,i=this.v0,r=this.v1,s=this.v2,a=this.v3;return n.set(eu(t,i.x,r.x,s.x,a.x),eu(t,i.y,r.y,s.y,a.y),eu(t,i.z,r.z,s.z,a.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class ru extends Wh{constructor(t=new $n,e=new $n){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new $n){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e=new $n){return e.subVectors(this.v2,this.v1).normalize()}getTangentAt(t,e){return this.getTangent(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class su extends Wh{constructor(t=new Pi,e=new Pi){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=t,this.v2=e}getPoint(t,e=new Pi){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e=new Pi){return e.subVectors(this.v2,this.v1).normalize()}getTangentAt(t,e){return this.getTangent(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class au extends Wh{constructor(t=new $n,e=new $n,n=new $n){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new $n){const n=e,i=this.v0,r=this.v1,s=this.v2;return n.set(tu(t,i.x,r.x,s.x),tu(t,i.y,r.y,s.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class ou extends Wh{constructor(t=new Pi,e=new Pi,n=new Pi){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new Pi){const n=e,i=this.v0,r=this.v1,s=this.v2;return n.set(tu(t,i.x,r.x,s.x),tu(t,i.y,r.y,s.y),tu(t,i.z,r.z,s.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class lu extends Wh{constructor(t=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=t}getPoint(t,e=new $n){const n=e,i=this.points,r=(i.length-1)*t,s=Math.floor(r),a=r-s,o=i[0===s?s:s-1],l=i[s],c=i[s>i.length-2?i.length-1:s+1],h=i[s>i.length-3?i.length-1:s+2];return n.set(Qh(a,o.x,l.x,c.x,h.x),Qh(a,o.y,l.y,c.y,h.y)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new $n).fromArray(n))}return this}}var cu=Object.freeze({__proto__:null,ArcCurve:jh,CatmullRomCurve3:$h,CubicBezierCurve:nu,CubicBezierCurve3:iu,EllipseCurve:Xh,LineCurve:ru,LineCurve3:su,QuadraticBezierCurve:au,QuadraticBezierCurve3:ou,SplineCurve:lu});class hu extends Wh{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);if(!t.equals(e)){const n=!0===t.isVector2?"LineCurve":"LineCurve3";this.curves.push(new cu[n](e,t))}return this}getPoint(t,e){const n=t*this.getLength(),i=this.getCurveLengths();let r=0;for(;r<i.length;){if(i[r]>=n){const t=i[r]-n,s=this.curves[r],a=s.getLength(),o=0===a?0:1-t/a;return s.getPointAt(o,e)}r++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let n=0,i=this.curves.length;n<i;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const s=r[i],a=s.isEllipseCurve?2*t:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?t*s.points.length:t,o=s.getPoints(a);for(let t=0;t<o.length;t++){const i=o[t];n&&n.equals(i)||(e.push(i),n=i)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push(n.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,n=this.curves.length;e<n;e++){const n=this.curves[e];t.curves.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push((new cu[n.type]).fromJSON(n))}return this}}class uu extends hu{constructor(t){super(),this.type="Path",this.currentPoint=new $n,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const n=new ru(this.currentPoint.clone(),new $n(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,n,i){const r=new au(this.currentPoint.clone(),new $n(t,e),new $n(n,i));return this.curves.push(r),this.currentPoint.set(n,i),this}bezierCurveTo(t,e,n,i,r,s){const a=new nu(this.currentPoint.clone(),new $n(t,e),new $n(n,i),new $n(r,s));return this.curves.push(a),this.currentPoint.set(r,s),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),n=new lu(e);return this.curves.push(n),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,n,i,r,s){const a=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(t+a,e+o,n,i,r,s),this}absarc(t,e,n,i,r,s){return this.absellipse(t,e,n,n,i,r,s),this}ellipse(t,e,n,i,r,s,a,o){const l=this.currentPoint.x,c=this.currentPoint.y;return this.absellipse(t+l,e+c,n,i,r,s,a,o),this}absellipse(t,e,n,i,r,s,a,o){const l=new Xh(t,e,n,i,r,s,a,o);if(this.curves.length>0){const t=l.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(l);const c=l.getPoint(1);return this.currentPoint.copy(c),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class du extends ws{constructor(t=[new $n(0,-.5),new $n(.5,0),new $n(0,.5)],e=12,n=0,i=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:i},e=Math.floor(e),i=jn(i,0,2*Math.PI);const r=[],s=[],a=[],o=[],l=[],c=1/e,h=new Pi,u=new $n,d=new Pi,p=new Pi,m=new Pi;let f=0,g=0;for(let e=0;e<=t.length-1;e++)switch(e){case 0:f=t[e+1].x-t[e].x,g=t[e+1].y-t[e].y,d.x=1*g,d.y=-f,d.z=0*g,m.copy(d),d.normalize(),o.push(d.x,d.y,d.z);break;case t.length-1:o.push(m.x,m.y,m.z);break;default:f=t[e+1].x-t[e].x,g=t[e+1].y-t[e].y,d.x=1*g,d.y=-f,d.z=0*g,p.copy(d),d.x+=m.x,d.y+=m.y,d.z+=m.z,d.normalize(),o.push(d.x,d.y,d.z),m.copy(p)}for(let r=0;r<=e;r++){const d=n+r*c*i,p=Math.sin(d),m=Math.cos(d);for(let n=0;n<=t.length-1;n++){h.x=t[n].x*p,h.y=t[n].y,h.z=t[n].x*m,s.push(h.x,h.y,h.z),u.x=r/e,u.y=n/(t.length-1),a.push(u.x,u.y);const i=o[3*n+0]*p,c=o[3*n+1],d=o[3*n+0]*m;l.push(i,c,d)}}for(let n=0;n<e;n++)for(let e=0;e<t.length-1;e++){const i=e+n*t.length,s=i,a=i+t.length,o=i+t.length+1,l=i+1;r.push(s,a,l),r.push(o,l,a)}this.setIndex(r),this.setAttribute("position",new gs(s,3)),this.setAttribute("uv",new gs(a,2)),this.setAttribute("normal",new gs(l,3))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new du(t.points,t.segments,t.phiStart,t.phiLength)}}class pu extends du{constructor(t=1,e=1,n=4,i=8){const r=new uu;r.absarc(0,-e/2,t,1.5*Math.PI,0),r.absarc(0,e/2,t,0,.5*Math.PI),super(r.getPoints(n),i),this.type="CapsuleGeometry",this.parameters={radius:t,length:e,capSegments:n,radialSegments:i}}static fromJSON(t){return new pu(t.radius,t.length,t.capSegments,t.radialSegments)}}class mu extends ws{constructor(t=1,e=32,n=0,i=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i},e=Math.max(3,e);const r=[],s=[],a=[],o=[],l=new Pi,c=new $n;s.push(0,0,0),a.push(0,0,1),o.push(.5,.5);for(let r=0,h=3;r<=e;r++,h+=3){const u=n+r/e*i;l.x=t*Math.cos(u),l.y=t*Math.sin(u),s.push(l.x,l.y,l.z),a.push(0,0,1),c.x=(s[h]/t+1)/2,c.y=(s[h+1]/t+1)/2,o.push(c.x,c.y)}for(let t=1;t<=e;t++)r.push(t,t+1,0);this.setIndex(r),this.setAttribute("position",new gs(s,3)),this.setAttribute("normal",new gs(a,3)),this.setAttribute("uv",new gs(o,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new mu(t.radius,t.segments,t.thetaStart,t.thetaLength)}}class fu extends ws{constructor(t=1,e=1,n=1,i=32,r=1,s=!1,a=0,o=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:i,heightSegments:r,openEnded:s,thetaStart:a,thetaLength:o};const l=this;i=Math.floor(i),r=Math.floor(r);const c=[],h=[],u=[],d=[];let p=0;const m=[],f=n/2;let g=0;function v(n){const r=p,s=new $n,m=new Pi;let v=0;const _=!0===n?t:e,x=!0===n?1:-1;for(let t=1;t<=i;t++)h.push(0,f*x,0),u.push(0,x,0),d.push(.5,.5),p++;const y=p;for(let t=0;t<=i;t++){const e=t/i*o+a,n=Math.cos(e),r=Math.sin(e);m.x=_*r,m.y=f*x,m.z=_*n,h.push(m.x,m.y,m.z),u.push(0,x,0),s.x=.5*n+.5,s.y=.5*r*x+.5,d.push(s.x,s.y),p++}for(let t=0;t<i;t++){const e=r+t,i=y+t;!0===n?c.push(i,i+1,e):c.push(i+1,i,e),v+=3}l.addGroup(g,v,!0===n?1:2),g+=v}!function(){const s=new Pi,v=new Pi;let _=0;const x=(e-t)/n;for(let l=0;l<=r;l++){const c=[],g=l/r,_=g*(e-t)+t;for(let t=0;t<=i;t++){const e=t/i,r=e*o+a,l=Math.sin(r),m=Math.cos(r);v.x=_*l,v.y=-g*n+f,v.z=_*m,h.push(v.x,v.y,v.z),s.set(l,x,m).normalize(),u.push(s.x,s.y,s.z),d.push(e,1-g),c.push(p++)}m.push(c)}for(let t=0;t<i;t++)for(let e=0;e<r;e++){const n=m[e][t],i=m[e+1][t],r=m[e+1][t+1],s=m[e][t+1];c.push(n,i,s),c.push(i,r,s),_+=6}l.addGroup(g,_,0),g+=_}(),!1===s&&(t>0&&v(!0),e>0&&v(!1)),this.setIndex(c),this.setAttribute("position",new gs(h,3)),this.setAttribute("normal",new gs(u,3)),this.setAttribute("uv",new gs(d,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new fu(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class gu extends fu{constructor(t=1,e=1,n=32,i=1,r=!1,s=0,a=2*Math.PI){super(0,t,e,n,i,r,s,a),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:s,thetaLength:a}}static fromJSON(t){return new gu(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class vu extends ws{constructor(t=[],e=[],n=1,i=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:i};const r=[],s=[];function a(t,e,n,i){const r=i+1,s=[];for(let i=0;i<=r;i++){s[i]=[];const a=t.clone().lerp(n,i/r),o=e.clone().lerp(n,i/r),l=r-i;for(let t=0;t<=l;t++)s[i][t]=0===t&&i===r?a:a.clone().lerp(o,t/l)}for(let t=0;t<r;t++)for(let e=0;e<2*(r-t)-1;e++){const n=Math.floor(e/2);e%2==0?(o(s[t][n+1]),o(s[t+1][n]),o(s[t][n])):(o(s[t][n+1]),o(s[t+1][n+1]),o(s[t+1][n]))}}function o(t){r.push(t.x,t.y,t.z)}function l(e,n){const i=3*e;n.x=t[i+0],n.y=t[i+1],n.z=t[i+2]}function c(t,e,n,i){i<0&&1===t.x&&(s[e]=t.x-1),0===n.x&&0===n.z&&(s[e]=i/2/Math.PI+.5)}function h(t){return Math.atan2(t.z,-t.x)}!function(t){const n=new Pi,i=new Pi,r=new Pi;for(let s=0;s<e.length;s+=3)l(e[s+0],n),l(e[s+1],i),l(e[s+2],r),a(n,i,r,t)}(i),function(t){const e=new Pi;for(let n=0;n<r.length;n+=3)e.x=r[n+0],e.y=r[n+1],e.z=r[n+2],e.normalize().multiplyScalar(t),r[n+0]=e.x,r[n+1]=e.y,r[n+2]=e.z}(n),function(){const t=new Pi;for(let n=0;n<r.length;n+=3){t.x=r[n+0],t.y=r[n+1],t.z=r[n+2];const i=h(t)/2/Math.PI+.5,a=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);s.push(i,1-a)}var e;(function(){const t=new Pi,e=new Pi,n=new Pi,i=new Pi,a=new $n,o=new $n,l=new $n;for(let u=0,d=0;u<r.length;u+=9,d+=6){t.set(r[u+0],r[u+1],r[u+2]),e.set(r[u+3],r[u+4],r[u+5]),n.set(r[u+6],r[u+7],r[u+8]),a.set(s[d+0],s[d+1]),o.set(s[d+2],s[d+3]),l.set(s[d+4],s[d+5]),i.copy(t).add(e).add(n).divideScalar(3);const p=h(i);c(a,d+0,t,p),c(o,d+2,e,p),c(l,d+4,n,p)}})(),function(){for(let t=0;t<s.length;t+=6){const e=s[t+0],n=s[t+2],i=s[t+4],r=Math.max(e,n,i),a=Math.min(e,n,i);r>.9&&a<.1&&(e<.2&&(s[t+0]+=1),n<.2&&(s[t+2]+=1),i<.2&&(s[t+4]+=1))}}()}(),this.setAttribute("position",new gs(r,3)),this.setAttribute("normal",new gs(r.slice(),3)),this.setAttribute("uv",new gs(s,2)),0===i?this.computeVertexNormals():this.normalizeNormals()}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new vu(t.vertices,t.indices,t.radius,t.details)}}class _u extends vu{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2,i=1/n;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new _u(t.radius,t.detail)}}const xu=new Pi,yu=new Pi,Mu=new Pi,Su=new Wr;class bu extends ws{constructor(t=null,e=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:t,thresholdAngle:e},null!==t){const n=4,i=Math.pow(10,n),r=Math.cos(Gn*e),s=t.getIndex(),a=t.getAttribute("position"),o=s?s.count:a.count,l=[0,0,0],c=["a","b","c"],h=new Array(3),u={},d=[];for(let t=0;t<o;t+=3){s?(l[0]=s.getX(t),l[1]=s.getX(t+1),l[2]=s.getX(t+2)):(l[0]=t,l[1]=t+1,l[2]=t+2);const{a:e,b:n,c:o}=Su;if(e.fromBufferAttribute(a,l[0]),n.fromBufferAttribute(a,l[1]),o.fromBufferAttribute(a,l[2]),Su.getNormal(Mu),h[0]=`${Math.round(e.x*i)},${Math.round(e.y*i)},${Math.round(e.z*i)}`,h[1]=`${Math.round(n.x*i)},${Math.round(n.y*i)},${Math.round(n.z*i)}`,h[2]=`${Math.round(o.x*i)},${Math.round(o.y*i)},${Math.round(o.z*i)}`,h[0]!==h[1]&&h[1]!==h[2]&&h[2]!==h[0])for(let t=0;t<3;t++){const e=(t+1)%3,n=h[t],i=h[e],s=Su[c[t]],a=Su[c[e]],o=`${n}_${i}`,p=`${i}_${n}`;p in u&&u[p]?(Mu.dot(u[p].normal)<=r&&(d.push(s.x,s.y,s.z),d.push(a.x,a.y,a.z)),u[p]=null):o in u||(u[o]={index0:l[t],index1:l[e],normal:Mu.clone()})}}for(const t in u)if(u[t]){const{index0:e,index1:n}=u[t];xu.fromBufferAttribute(a,e),yu.fromBufferAttribute(a,n),d.push(xu.x,xu.y,xu.z),d.push(yu.x,yu.y,yu.z)}this.setAttribute("position",new gs(d,3))}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}}class wu extends uu{constructor(t){super(t),this.uuid=Xn(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let n=0,i=this.holes.length;n<i;n++)e[n]=this.holes[n].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,n=this.holes.length;e<n;e++){const n=this.holes[e];t.holes.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push((new uu).fromJSON(n))}return this}}const Tu=function(t,e,n=2){const i=e&&e.length,r=i?e[0]*n:t.length;let s=Eu(t,0,r,n,!0);const a=[];if(!s||s.next===s.prev)return a;let o,l,c,h,u,d,p;if(i&&(s=function(t,e,n,i){const r=[];let s,a,o,l,c;for(s=0,a=e.length;s<a;s++)o=e[s]*i,l=s<a-1?e[s+1]*i:t.length,c=Eu(t,o,l,i,!1),c===c.next&&(c.steiner=!0),r.push(Fu(c));for(r.sort(Uu),s=0;s<r.length;s++)n=Nu(r[s],n);return n}(t,e,s,n)),t.length>80*n){o=c=t[0],l=h=t[1];for(let e=n;e<r;e+=n)u=t[e],d=t[e+1],u<o&&(o=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);p=Math.max(c-o,h-l),p=0!==p?32767/p:0}return Ru(s,a,n,o,l,p,0),a};function Eu(t,e,n,i,r){let s,a;if(r===function(t,e,n,i){let r=0;for(let s=e,a=n-i;s<n;s+=i)r+=(t[a]-t[s])*(t[s+1]+t[a+1]),a=s;return r}(t,e,n,i)>0)for(s=e;s<n;s+=i)a=qu(s,t[s],t[s+1],a);else for(s=n-i;s>=e;s-=i)a=qu(s,t[s],t[s+1],a);return a&&Vu(a,a.next)&&(Yu(a),a=a.next),a}function Au(t,e){if(!t)return t;e||(e=t);let n,i=t;do{if(n=!1,i.steiner||!Vu(i,i.next)&&0!==ku(i.prev,i,i.next))i=i.next;else{if(Yu(i),i=e=i.prev,i===i.next)break;n=!0}}while(n||i!==e);return e}function Ru(t,e,n,i,r,s,a){if(!t)return;!a&&s&&function(t,e,n,i){let r=t;do{0===r.z&&(r.z=Ou(r.x,r.y,e,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){let e,n,i,r,s,a,o,l,c=1;do{for(n=t,t=null,s=null,a=0;n;){for(a++,i=n,o=0,e=0;e<c&&(o++,i=i.nextZ,i);e++);for(l=c;o>0||l>0&&i;)0!==o&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,o--):(r=i,i=i.nextZ,l--),s?s.nextZ=r:t=r,r.prevZ=s,s=r;n=i}s.nextZ=null,c*=2}while(a>1)}(r)}(t,i,r,s);let o,l,c=t;for(;t.prev!==t.next;)if(o=t.prev,l=t.next,s?Pu(t,i,r,s):Cu(t))e.push(o.i/n|0),e.push(t.i/n|0),e.push(l.i/n|0),Yu(t),t=l.next,c=l.next;else if((t=l)===c){a?1===a?Ru(t=Iu(Au(t),e,n),e,n,i,r,s,2):2===a&&Lu(t,e,n,i,r,s):Ru(Au(t),e,n,i,r,s,1);break}}function Cu(t){const e=t.prev,n=t,i=t.next;if(ku(e,n,i)>=0)return!1;const r=e.x,s=n.x,a=i.x,o=e.y,l=n.y,c=i.y,h=r<s?r<a?r:a:s<a?s:a,u=o<l?o<c?o:c:l<c?l:c,d=r>s?r>a?r:a:s>a?s:a,p=o>l?o>c?o:c:l>c?l:c;let m=i.next;for(;m!==e;){if(m.x>=h&&m.x<=d&&m.y>=u&&m.y<=p&&Bu(r,o,s,l,a,c,m.x,m.y)&&ku(m.prev,m,m.next)>=0)return!1;m=m.next}return!0}function Pu(t,e,n,i){const r=t.prev,s=t,a=t.next;if(ku(r,s,a)>=0)return!1;const o=r.x,l=s.x,c=a.x,h=r.y,u=s.y,d=a.y,p=o<l?o<c?o:c:l<c?l:c,m=h<u?h<d?h:d:u<d?u:d,f=o>l?o>c?o:c:l>c?l:c,g=h>u?h>d?h:d:u>d?u:d,v=Ou(p,m,e,n,i),_=Ou(f,g,e,n,i);let x=t.prevZ,y=t.nextZ;for(;x&&x.z>=v&&y&&y.z<=_;){if(x.x>=p&&x.x<=f&&x.y>=m&&x.y<=g&&x!==r&&x!==a&&Bu(o,h,l,u,c,d,x.x,x.y)&&ku(x.prev,x,x.next)>=0)return!1;if(x=x.prevZ,y.x>=p&&y.x<=f&&y.y>=m&&y.y<=g&&y!==r&&y!==a&&Bu(o,h,l,u,c,d,y.x,y.y)&&ku(y.prev,y,y.next)>=0)return!1;y=y.nextZ}for(;x&&x.z>=v;){if(x.x>=p&&x.x<=f&&x.y>=m&&x.y<=g&&x!==r&&x!==a&&Bu(o,h,l,u,c,d,x.x,x.y)&&ku(x.prev,x,x.next)>=0)return!1;x=x.prevZ}for(;y&&y.z<=_;){if(y.x>=p&&y.x<=f&&y.y>=m&&y.y<=g&&y!==r&&y!==a&&Bu(o,h,l,u,c,d,y.x,y.y)&&ku(y.prev,y,y.next)>=0)return!1;y=y.nextZ}return!0}function Iu(t,e,n){let i=t;do{const r=i.prev,s=i.next.next;!Vu(r,s)&&Hu(r,i,i.next,s)&&Xu(r,s)&&Xu(s,r)&&(e.push(r.i/n|0),e.push(i.i/n|0),e.push(s.i/n|0),Yu(i),Yu(i.next),i=t=s),i=i.next}while(i!==t);return Au(i)}function Lu(t,e,n,i,r,s){let a=t;do{let t=a.next.next;for(;t!==a.prev;){if(a.i!==t.i&&zu(a,t)){let o=ju(a,t);return a=Au(a,a.next),o=Au(o,o.next),Ru(a,e,n,i,r,s,0),void Ru(o,e,n,i,r,s,0)}t=t.next}a=a.next}while(a!==t)}function Uu(t,e){return t.x-e.x}function Nu(t,e){const n=function(t,e){let n,i=e,r=-1/0;const s=t.x,a=t.y;do{if(a<=i.y&&a>=i.next.y&&i.next.y!==i.y){const t=i.x+(a-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(t<=s&&t>r&&(r=t,n=i.x<i.next.x?i:i.next,t===s))return n}i=i.next}while(i!==e);if(!n)return null;const o=n,l=n.x,c=n.y;let h,u=1/0;i=n;do{s>=i.x&&i.x>=l&&s!==i.x&&Bu(a<c?s:r,a,l,c,a<c?r:s,a,i.x,i.y)&&(h=Math.abs(a-i.y)/(s-i.x),Xu(i,t)&&(h<u||h===u&&(i.x>n.x||i.x===n.x&&Du(n,i)))&&(n=i,u=h)),i=i.next}while(i!==o);return n}(t,e);if(!n)return e;const i=ju(n,t);return Au(i,i.next),Au(n,n.next)}function Du(t,e){return ku(t.prev,t,e.prev)<0&&ku(e.next,t,t.next)<0}function Ou(t,e,n,i,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-n)*r|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-i)*r|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function Fu(t){let e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function Bu(t,e,n,i,r,s,a,o){return(r-a)*(e-o)>=(t-a)*(s-o)&&(t-a)*(i-o)>=(n-a)*(e-o)&&(n-a)*(s-o)>=(r-a)*(i-o)}function zu(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&Hu(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&(Xu(t,e)&&Xu(e,t)&&function(t,e){let n=t,i=!1;const r=(t.x+e.x)/2,s=(t.y+e.y)/2;do{n.y>s!=n.next.y>s&&n.next.y!==n.y&&r<(n.next.x-n.x)*(s-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==t);return i}(t,e)&&(ku(t.prev,t,e.prev)||ku(t,e.prev,e))||Vu(t,e)&&ku(t.prev,t,t.next)>0&&ku(e.prev,e,e.next)>0)}function ku(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function Vu(t,e){return t.x===e.x&&t.y===e.y}function Hu(t,e,n,i){const r=Wu(ku(t,e,n)),s=Wu(ku(t,e,i)),a=Wu(ku(n,i,t)),o=Wu(ku(n,i,e));return r!==s&&a!==o||(!(0!==r||!Gu(t,n,e))||(!(0!==s||!Gu(t,i,e))||(!(0!==a||!Gu(n,t,i))||!(0!==o||!Gu(n,e,i)))))}function Gu(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function Wu(t){return t>0?1:t<0?-1:0}function Xu(t,e){return ku(t.prev,t,t.next)<0?ku(t,e,t.next)>=0&&ku(t,t.prev,e)>=0:ku(t,e,t.prev)<0||ku(t,t.next,e)<0}function ju(t,e){const n=new Zu(t.i,t.x,t.y),i=new Zu(e.i,e.x,e.y),r=t.next,s=e.prev;return t.next=e,e.prev=t,n.next=r,r.prev=n,i.next=n,n.prev=i,s.next=i,i.prev=s,i}function qu(t,e,n,i){const r=new Zu(t,e,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function Yu(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function Zu(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}class Ju{static area(t){const e=t.length;let n=0;for(let i=e-1,r=0;r<e;i=r++)n+=t[i].x*t[r].y-t[r].x*t[i].y;return.5*n}static isClockWise(t){return Ju.area(t)<0}static triangulateShape(t,e){const n=[],i=[],r=[];Ku(t),$u(n,t);let s=t.length;e.forEach(Ku);for(let t=0;t<e.length;t++)i.push(s),s+=e[t].length,$u(n,e[t]);const a=Tu(n,i);for(let t=0;t<a.length;t+=3)r.push(a.slice(t,t+3));return r}}function Ku(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function $u(t,e){for(let n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}class Qu extends ws{constructor(t=new wu([new $n(.5,.5),new $n(-.5,.5),new $n(-.5,-.5),new $n(.5,-.5)]),e={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const n=this,i=[],r=[];for(let e=0,n=t.length;e<n;e++){s(t[e])}function s(t){const s=[],a=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1,l=void 0!==e.depth?e.depth:1;let c=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:.2,u=void 0!==e.bevelSize?e.bevelSize:h-.1,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const m=e.extrudePath,f=void 0!==e.UVGenerator?e.UVGenerator:td;let g,v,_,x,y,M=!1;m&&(g=m.getSpacedPoints(o),M=!0,c=!1,v=m.computeFrenetFrames(o,!1),_=new Pi,x=new Pi,y=new Pi),c||(p=0,h=0,u=0,d=0);const S=t.extractPoints(a);let b=S.shape;const w=S.holes;if(!Ju.isClockWise(b)){b=b.reverse();for(let t=0,e=w.length;t<e;t++){const e=w[t];Ju.isClockWise(e)&&(w[t]=e.reverse())}}const T=Ju.triangulateShape(b,w),E=b;for(let t=0,e=w.length;t<e;t++){const e=w[t];b=b.concat(e)}function A(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().addScaledVector(e,n)}const R=b.length,C=T.length;function P(t,e,n){let i,r,s;const a=t.x-e.x,o=t.y-e.y,l=n.x-t.x,c=n.y-t.y,h=a*a+o*o,u=a*c-o*l;if(Math.abs(u)>Number.EPSILON){const u=Math.sqrt(h),d=Math.sqrt(l*l+c*c),p=e.x-o/u,m=e.y+a/u,f=((n.x-c/d-p)*c-(n.y+l/d-m)*l)/(a*c-o*l);i=p+a*f-t.x,r=m+o*f-t.y;const g=i*i+r*r;if(g<=2)return new $n(i,r);s=Math.sqrt(g/2)}else{let t=!1;a>Number.EPSILON?l>Number.EPSILON&&(t=!0):a<-Number.EPSILON?l<-Number.EPSILON&&(t=!0):Math.sign(o)===Math.sign(c)&&(t=!0),t?(i=-o,r=a,s=Math.sqrt(h)):(i=a,r=o,s=Math.sqrt(h/2))}return new $n(i/s,r/s)}const I=[];for(let t=0,e=E.length,n=e-1,i=t+1;t<e;t++,n++,i++)n===e&&(n=0),i===e&&(i=0),I[t]=P(E[t],E[n],E[i]);const L=[];let U,N=I.concat();for(let t=0,e=w.length;t<e;t++){const e=w[t];U=[];for(let t=0,n=e.length,i=n-1,r=t+1;t<n;t++,i++,r++)i===n&&(i=0),r===n&&(r=0),U[t]=P(e[t],e[i],e[r]);L.push(U),N=N.concat(U)}for(let t=0;t<p;t++){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=E.length;t<e;t++){const e=A(E[t],I[t],i);F(e.x,e.y,-n)}for(let t=0,e=w.length;t<e;t++){const e=w[t];U=L[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],U[t],i);F(r.x,r.y,-n)}}}const D=u+d;for(let t=0;t<R;t++){const e=c?A(b[t],N[t],D):b[t];M?(x.copy(v.normals[0]).multiplyScalar(e.x),_.copy(v.binormals[0]).multiplyScalar(e.y),y.copy(g[0]).add(x).add(_),F(y.x,y.y,y.z)):F(e.x,e.y,0)}for(let t=1;t<=o;t++)for(let e=0;e<R;e++){const n=c?A(b[e],N[e],D):b[e];M?(x.copy(v.normals[t]).multiplyScalar(n.x),_.copy(v.binormals[t]).multiplyScalar(n.y),y.copy(g[t]).add(x).add(_),F(y.x,y.y,y.z)):F(n.x,n.y,l/o*t)}for(let t=p-1;t>=0;t--){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=E.length;t<e;t++){const e=A(E[t],I[t],i);F(e.x,e.y,l+n)}for(let t=0,e=w.length;t<e;t++){const e=w[t];U=L[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],U[t],i);M?F(r.x,r.y+g[o-1].y,g[o-1].x+n):F(r.x,r.y,l+n)}}}function O(t,e){let n=t.length;for(;--n>=0;){const i=n;let r=n-1;r<0&&(r=t.length-1);for(let t=0,n=o+2*p;t<n;t++){const n=R*t,s=R*(t+1);z(e+i+n,e+r+n,e+r+s,e+i+s)}}}function F(t,e,n){s.push(t),s.push(e),s.push(n)}function B(t,e,r){k(t),k(e),k(r);const s=i.length/3,a=f.generateTopUV(n,i,s-3,s-2,s-1);V(a[0]),V(a[1]),V(a[2])}function z(t,e,r,s){k(t),k(e),k(s),k(e),k(r),k(s);const a=i.length/3,o=f.generateSideWallUV(n,i,a-6,a-3,a-2,a-1);V(o[0]),V(o[1]),V(o[3]),V(o[1]),V(o[2]),V(o[3])}function k(t){i.push(s[3*t+0]),i.push(s[3*t+1]),i.push(s[3*t+2])}function V(t){r.push(t.x),r.push(t.y)}!function(){const t=i.length/3;if(c){let t=0,e=R*t;for(let t=0;t<C;t++){const n=T[t];B(n[2]+e,n[1]+e,n[0]+e)}t=o+2*p,e=R*t;for(let t=0;t<C;t++){const n=T[t];B(n[0]+e,n[1]+e,n[2]+e)}}else{for(let t=0;t<C;t++){const e=T[t];B(e[2],e[1],e[0])}for(let t=0;t<C;t++){const e=T[t];B(e[0]+R*o,e[1]+R*o,e[2]+R*o)}}n.addGroup(t,i.length/3-t,0)}(),function(){const t=i.length/3;let e=0;O(E,e),e+=E.length;for(let t=0,n=w.length;t<n;t++){const n=w[t];O(n,e),e+=n.length}n.addGroup(t,i.length/3-t,1)}()}this.setAttribute("position",new gs(i,3)),this.setAttribute("uv",new gs(r,2)),this.computeVertexNormals()}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}toJSON(){const t=super.toJSON();return function(t,e,n){if(n.shapes=[],Array.isArray(t))for(let e=0,i=t.length;e<i;e++){const i=t[e];n.shapes.push(i.uuid)}else n.shapes.push(t.uuid);n.options=Object.assign({},e),void 0!==e.extrudePath&&(n.options.extrudePath=e.extrudePath.toJSON());return n}(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}const i=t.options.extrudePath;return void 0!==i&&(t.options.extrudePath=(new cu[i.type]).fromJSON(i)),new Qu(n,t.options)}}const td={generateTopUV:function(t,e,n,i,r){const s=e[3*n],a=e[3*n+1],o=e[3*i],l=e[3*i+1],c=e[3*r],h=e[3*r+1];return[new $n(s,a),new $n(o,l),new $n(c,h)]},generateSideWallUV:function(t,e,n,i,r,s){const a=e[3*n],o=e[3*n+1],l=e[3*n+2],c=e[3*i],h=e[3*i+1],u=e[3*i+2],d=e[3*r],p=e[3*r+1],m=e[3*r+2],f=e[3*s],g=e[3*s+1],v=e[3*s+2];return Math.abs(o-h)<Math.abs(a-c)?[new $n(a,1-l),new $n(c,1-u),new $n(d,1-m),new $n(f,1-v)]:[new $n(o,1-l),new $n(h,1-u),new $n(p,1-m),new $n(g,1-v)]}};class ed extends vu{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2;super([-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new ed(t.radius,t.detail)}}class nd extends vu{constructor(t=1,e=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new nd(t.radius,t.detail)}}class id extends ws{constructor(t=.5,e=1,n=32,i=1,r=0,s=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:s},n=Math.max(3,n);const a=[],o=[],l=[],c=[];let h=t;const u=(e-t)/(i=Math.max(1,i)),d=new Pi,p=new $n;for(let t=0;t<=i;t++){for(let t=0;t<=n;t++){const i=r+t/n*s;d.x=h*Math.cos(i),d.y=h*Math.sin(i),o.push(d.x,d.y,d.z),l.push(0,0,1),p.x=(d.x/e+1)/2,p.y=(d.y/e+1)/2,c.push(p.x,p.y)}h+=u}for(let t=0;t<i;t++){const e=t*(n+1);for(let t=0;t<n;t++){const i=t+e,r=i,s=i+n+1,o=i+n+2,l=i+1;a.push(r,s,l),a.push(s,o,l)}}this.setIndex(a),this.setAttribute("position",new gs(o,3)),this.setAttribute("normal",new gs(l,3)),this.setAttribute("uv",new gs(c,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new id(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class rd extends ws{constructor(t=new wu([new $n(0,.5),new $n(-.5,-.5),new $n(.5,-.5)]),e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const n=[],i=[],r=[],s=[];let a=0,o=0;if(!1===Array.isArray(t))l(t);else for(let e=0;e<t.length;e++)l(t[e]),this.addGroup(a,o,e),a+=o,o=0;function l(t){const a=i.length/3,l=t.extractPoints(e);let c=l.shape;const h=l.holes;!1===Ju.isClockWise(c)&&(c=c.reverse());for(let t=0,e=h.length;t<e;t++){const e=h[t];!0===Ju.isClockWise(e)&&(h[t]=e.reverse())}const u=Ju.triangulateShape(c,h);for(let t=0,e=h.length;t<e;t++){const e=h[t];c=c.concat(e)}for(let t=0,e=c.length;t<e;t++){const e=c[t];i.push(e.x,e.y,0),r.push(0,0,1),s.push(e.x,e.y)}for(let t=0,e=u.length;t<e;t++){const e=u[t],i=e[0]+a,r=e[1]+a,s=e[2]+a;n.push(i,r,s),o+=3}}this.setIndex(n),this.setAttribute("position",new gs(i,3)),this.setAttribute("normal",new gs(r,3)),this.setAttribute("uv",new gs(s,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let n=0,i=t.length;n<i;n++){const i=t[n];e.shapes.push(i.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}return new rd(n,t.curveSegments)}}class sd extends ws{constructor(t=1,e=32,n=16,i=0,r=2*Math.PI,s=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:s,thetaLength:a},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const o=Math.min(s+a,Math.PI);let l=0;const c=[],h=new Pi,u=new Pi,d=[],p=[],m=[],f=[];for(let d=0;d<=n;d++){const g=[],v=d/n;let _=0;0===d&&0===s?_=.5/e:d===n&&o===Math.PI&&(_=-.5/e);for(let n=0;n<=e;n++){const o=n/e;h.x=-t*Math.cos(i+o*r)*Math.sin(s+v*a),h.y=t*Math.cos(s+v*a),h.z=t*Math.sin(i+o*r)*Math.sin(s+v*a),p.push(h.x,h.y,h.z),u.copy(h).normalize(),m.push(u.x,u.y,u.z),f.push(o+_,1-v),g.push(l++)}c.push(g)}for(let t=0;t<n;t++)for(let i=0;i<e;i++){const e=c[t][i+1],r=c[t][i],a=c[t+1][i],l=c[t+1][i+1];(0!==t||s>0)&&d.push(e,r,l),(t!==n-1||o<Math.PI)&&d.push(r,a,l)}this.setIndex(d),this.setAttribute("position",new gs(p,3)),this.setAttribute("normal",new gs(m,3)),this.setAttribute("uv",new gs(f,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new sd(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class ad extends vu{constructor(t=1,e=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new ad(t.radius,t.detail)}}class od extends ws{constructor(t=1,e=.4,n=12,i=48,r=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:r},n=Math.floor(n),i=Math.floor(i);const s=[],a=[],o=[],l=[],c=new Pi,h=new Pi,u=new Pi;for(let s=0;s<=n;s++)for(let d=0;d<=i;d++){const p=d/i*r,m=s/n*Math.PI*2;h.x=(t+e*Math.cos(m))*Math.cos(p),h.y=(t+e*Math.cos(m))*Math.sin(p),h.z=e*Math.sin(m),a.push(h.x,h.y,h.z),c.x=t*Math.cos(p),c.y=t*Math.sin(p),u.subVectors(h,c).normalize(),o.push(u.x,u.y,u.z),l.push(d/i),l.push(s/n)}for(let t=1;t<=n;t++)for(let e=1;e<=i;e++){const n=(i+1)*t+e-1,r=(i+1)*(t-1)+e-1,a=(i+1)*(t-1)+e,o=(i+1)*t+e;s.push(n,r,o),s.push(r,a,o)}this.setIndex(s),this.setAttribute("position",new gs(a,3)),this.setAttribute("normal",new gs(o,3)),this.setAttribute("uv",new gs(l,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new od(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class ld extends ws{constructor(t=1,e=.4,n=64,i=8,r=2,s=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:i,p:r,q:s},n=Math.floor(n),i=Math.floor(i);const a=[],o=[],l=[],c=[],h=new Pi,u=new Pi,d=new Pi,p=new Pi,m=new Pi,f=new Pi,g=new Pi;for(let a=0;a<=n;++a){const _=a/n*r*Math.PI*2;v(_,r,s,t,d),v(_+.01,r,s,t,p),f.subVectors(p,d),g.addVectors(p,d),m.crossVectors(f,g),g.crossVectors(m,f),m.normalize(),g.normalize();for(let t=0;t<=i;++t){const r=t/i*Math.PI*2,s=-e*Math.cos(r),p=e*Math.sin(r);h.x=d.x+(s*g.x+p*m.x),h.y=d.y+(s*g.y+p*m.y),h.z=d.z+(s*g.z+p*m.z),o.push(h.x,h.y,h.z),u.subVectors(h,d).normalize(),l.push(u.x,u.y,u.z),c.push(a/n),c.push(t/i)}}for(let t=1;t<=n;t++)for(let e=1;e<=i;e++){const n=(i+1)*(t-1)+(e-1),r=(i+1)*t+(e-1),s=(i+1)*t+e,o=(i+1)*(t-1)+e;a.push(n,r,o),a.push(r,s,o)}function v(t,e,n,i,r){const s=Math.cos(t),a=Math.sin(t),o=n/e*t,l=Math.cos(o);r.x=i*(2+l)*.5*s,r.y=i*(2+l)*a*.5,r.z=i*Math.sin(o)*.5}this.setIndex(a),this.setAttribute("position",new gs(o,3)),this.setAttribute("normal",new gs(l,3)),this.setAttribute("uv",new gs(c,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new ld(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)}}class cd extends ws{constructor(t=new ou(new Pi(-1,-1,0),new Pi(-1,1,0),new Pi(1,1,0)),e=64,n=1,i=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:i,closed:r};const s=t.computeFrenetFrames(e,r);this.tangents=s.tangents,this.normals=s.normals,this.binormals=s.binormals;const a=new Pi,o=new Pi,l=new $n;let c=new Pi;const h=[],u=[],d=[],p=[];function m(r){c=t.getPointAt(r/e,c);const l=s.normals[r],d=s.binormals[r];for(let t=0;t<=i;t++){const e=t/i*Math.PI*2,r=Math.sin(e),s=-Math.cos(e);o.x=s*l.x+r*d.x,o.y=s*l.y+r*d.y,o.z=s*l.z+r*d.z,o.normalize(),u.push(o.x,o.y,o.z),a.x=c.x+n*o.x,a.y=c.y+n*o.y,a.z=c.z+n*o.z,h.push(a.x,a.y,a.z)}}!function(){for(let t=0;t<e;t++)m(t);m(!1===r?e:0),function(){for(let t=0;t<=e;t++)for(let n=0;n<=i;n++)l.x=t/e,l.y=n/i,d.push(l.x,l.y)}(),function(){for(let t=1;t<=e;t++)for(let e=1;e<=i;e++){const n=(i+1)*(t-1)+(e-1),r=(i+1)*t+(e-1),s=(i+1)*t+e,a=(i+1)*(t-1)+e;p.push(n,r,a),p.push(r,s,a)}}()}(),this.setIndex(p),this.setAttribute("position",new gs(h,3)),this.setAttribute("normal",new gs(u,3)),this.setAttribute("uv",new gs(d,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}toJSON(){const t=super.toJSON();return t.path=this.parameters.path.toJSON(),t}static fromJSON(t){return new cd((new cu[t.path.type]).fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)}}class hd extends ws{constructor(t=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:t},null!==t){const e=[],n=new Set,i=new Pi,r=new Pi;if(null!==t.index){const s=t.attributes.position,a=t.index;let o=t.groups;0===o.length&&(o=[{start:0,count:a.count,materialIndex:0}]);for(let t=0,l=o.length;t<l;++t){const l=o[t],c=l.start;for(let t=c,o=c+l.count;t<o;t+=3)for(let o=0;o<3;o++){const l=a.getX(t+o),c=a.getX(t+(o+1)%3);i.fromBufferAttribute(s,l),r.fromBufferAttribute(s,c),!0===ud(i,r,n)&&(e.push(i.x,i.y,i.z),e.push(r.x,r.y,r.z))}}}else{const s=t.attributes.position;for(let t=0,a=s.count/3;t<a;t++)for(let a=0;a<3;a++){const o=3*t+a,l=3*t+(a+1)%3;i.fromBufferAttribute(s,o),r.fromBufferAttribute(s,l),!0===ud(i,r,n)&&(e.push(i.x,i.y,i.z),e.push(r.x,r.y,r.z))}}this.setAttribute("position",new gs(e,3))}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}}function ud(t,e,n){const i=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`,r=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;return!0!==n.has(i)&&!0!==n.has(r)&&(n.add(i),n.add(r),!0)}var dd=Object.freeze({__proto__:null,BoxGeometry:Ws,CapsuleGeometry:pu,CircleGeometry:mu,ConeGeometry:gu,CylinderGeometry:fu,DodecahedronGeometry:_u,EdgesGeometry:bu,ExtrudeGeometry:Qu,IcosahedronGeometry:ed,LatheGeometry:du,OctahedronGeometry:nd,PlaneGeometry:ma,PolyhedronGeometry:vu,RingGeometry:id,ShapeGeometry:rd,SphereGeometry:sd,TetrahedronGeometry:ad,TorusGeometry:od,TorusKnotGeometry:ld,TubeGeometry:cd,WireframeGeometry:hd});class pd extends $r{constructor(t){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new Zr(0),this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.fog=t.fog,this}}class md extends Zs{constructor(t){super(t),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class fd extends $r{constructor(t){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Zr(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new gr,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class gd extends fd{constructor(t){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new $n(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return jn(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new Zr(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new Zr(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Zr(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(t)}get anisotropy(){return this._anisotropy}set anisotropy(t){this._anisotropy>0!=t>0&&this.version++,this._anisotropy=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get iridescence(){return this._iridescence}set iridescence(t){this._iridescence>0!=t>0&&this.version++,this._iridescence=t}get dispersion(){return this._dispersion}set dispersion(t){this._dispersion>0!=t>0&&this.version++,this._dispersion=t}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=t.anisotropy,this.anisotropyRotation=t.anisotropyRotation,this.anisotropyMap=t.anisotropyMap,this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.dispersion=t.dispersion,this.ior=t.ior,this.iridescence=t.iridescence,this.iridescenceMap=t.iridescenceMap,this.iridescenceIOR=t.iridescenceIOR,this.iridescenceThicknessRange=[...t.iridescenceThicknessRange],this.iridescenceThicknessMap=t.iridescenceThicknessMap,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}class vd extends $r{constructor(t){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Zr(16777215),this.specular=new Zr(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new gr,this.combine=Y,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class _d extends $r{constructor(t){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Zr(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}class xd extends $r{constructor(t){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}class yd extends $r{constructor(t){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new Zr(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new gr,this.combine=Y,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Md extends $r{constructor(t){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Zr(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Sd extends vh{constructor(t){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}function bd(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)}function wd(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Td(t){const e=t.length,n=new Array(e);for(let t=0;t!==e;++t)n[t]=t;return n.sort((function(e,n){return t[e]-t[n]})),n}function Ed(t,e,n){const i=t.length,r=new t.constructor(i);for(let s=0,a=0;a!==i;++s){const i=n[s]*e;for(let n=0;n!==e;++n)r[a++]=t[i+n]}return r}function Ad(t,e,n,i){let r=1,s=t[0];for(;void 0!==s&&void 0===s[i];)s=t[r++];if(void 0===s)return;let a=s[i];if(void 0!==a)if(Array.isArray(a))do{a=s[i],void 0!==a&&(e.push(s.time),n.push.apply(n,a)),s=t[r++]}while(void 0!==s);else if(void 0!==a.toArray)do{a=s[i],void 0!==a&&(e.push(s.time),a.toArray(n,n.length)),s=t[r++]}while(void 0!==s);else do{a=s[i],void 0!==a&&(e.push(s.time),n.push(a)),s=t[r++]}while(void 0!==s)}const Rd={convertArray:bd,isTypedArray:wd,getKeyframeOrder:Td,sortedArray:Ed,flattenJSON:Ad,subclip:function(t,e,n,i,r=30){const s=t.clone();s.name=e;const a=[];for(let t=0;t<s.tracks.length;++t){const e=s.tracks[t],o=e.getValueSize(),l=[],c=[];for(let t=0;t<e.times.length;++t){const s=e.times[t]*r;if(!(s<n||s>=i)){l.push(e.times[t]);for(let n=0;n<o;++n)c.push(e.values[t*o+n])}}0!==l.length&&(e.times=bd(l,e.times.constructor),e.values=bd(c,e.values.constructor),a.push(e))}s.tracks=a;let o=1/0;for(let t=0;t<s.tracks.length;++t)o>s.tracks[t].times[0]&&(o=s.tracks[t].times[0]);for(let t=0;t<s.tracks.length;++t)s.tracks[t].shift(-1*o);return s.resetDuration(),s},makeClipAdditive:function(t,e=0,n=t,i=30){i<=0&&(i=30);const r=n.tracks.length,s=e/i;for(let e=0;e<r;++e){const i=n.tracks[e],r=i.ValueTypeName;if("bool"===r||"string"===r)continue;const a=t.tracks.find((function(t){return t.name===i.name&&t.ValueTypeName===r}));if(void 0===a)continue;let o=0;const l=i.getValueSize();i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=l/3);let c=0;const h=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);const u=i.times.length-1;let d;if(s<=i.times[0]){const t=o,e=l-o;d=i.values.slice(t,e)}else if(s>=i.times[u]){const t=u*l+o,e=t+l-o;d=i.values.slice(t,e)}else{const t=i.createInterpolant(),e=o,n=l-o;t.evaluate(s),d=t.resultBuffer.slice(e,n)}if("quaternion"===r){(new Ci).fromArray(d).normalize().conjugate().toArray(d)}const p=a.times.length;for(let t=0;t<p;++t){const e=t*h+c;if("quaternion"===r)Ci.multiplyQuaternionsFlat(a.values,e,d,0,a.values,e);else{const t=h-2*c;for(let n=0;n<t;++n)a.values[e+n]-=d[n]}}}return t.blendMode=ze,t}};class Cd{constructor(t,e,n,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{let s;n:{i:if(!(t<i)){for(let s=n+2;;){if(void 0===i){if(t<r)break i;return n=e.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===s)break;if(r=i,i=e[++n],t<i)break e}s=e.length;break n}if(t>=r)break t;{const a=e[1];t<a&&(n=2,r=a);for(let s=n-2;;){if(void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(n===s)break;if(i=r,r=e[--n-1],t>=r)break e}s=n,n=0}}for(;n<s;){const i=n+s>>>1;t<e[i]?s=i:n=i+1}if(i=e[n],r=e[n-1],void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===i)return n=e.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t)e[t]=n[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Pd extends Cd{constructor(t,e,n,i){super(t,e,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:De,endingEnd:De}}intervalChanged_(t,e,n){const i=this.parameterPositions;let r=t-2,s=t+1,a=i[r],o=i[s];if(void 0===a)switch(this.getSettings_().endingStart){case Oe:r=t,a=2*e-n;break;case Fe:r=i.length-2,a=e+i[r]-i[r+1];break;default:r=t,a=n}if(void 0===o)switch(this.getSettings_().endingEnd){case Oe:s=t,o=2*n-e;break;case Fe:s=1,o=n+i[1]-i[0];break;default:s=t-1,o=e}const l=.5*(n-e),c=this.valueSize;this._weightPrev=l/(e-a),this._weightNext=l/(o-n),this._offsetPrev=r*c,this._offsetNext=s*c}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(n-e)/(i-e),m=p*p,f=m*p,g=-u*f+2*u*m-u*p,v=(1+u)*f+(-1.5-2*u)*m+(-.5+u)*p+1,_=(-1-d)*f+(1.5+d)*m+.5*p,x=d*f-d*m;for(let t=0;t!==a;++t)r[t]=g*s[c+t]+v*s[l+t]+_*s[o+t]+x*s[h+t];return r}}class Id extends Cd{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=(n-e)/(i-e),h=1-c;for(let t=0;t!==a;++t)r[t]=s[l+t]*h+s[o+t]*c;return r}}class Ld extends Cd{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t){return this.copySampleValue_(t-1)}}class Ud{constructor(t,e,n,i){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=bd(e,this.TimeBufferType),this.values=bd(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON)n=e.toJSON(t);else{n={name:t.name,times:bd(t.times,Array),values:bd(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(n.interpolation=e)}return n.type=t.ValueTypeName,n}InterpolantFactoryMethodDiscrete(t){return new Ld(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Id(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new Pd(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case Le:e=this.InterpolantFactoryMethodDiscrete;break;case Ue:e=this.InterpolantFactoryMethodLinear;break;case Ne:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Le;case this.InterpolantFactoryMethodLinear:return Ue;case this.InterpolantFactoryMethodSmooth:return Ne}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]*=t}return this}trim(t,e){const n=this.times,i=n.length;let r=0,s=i-1;for(;r!==i&&n[r]<t;)++r;for(;-1!==s&&n[s]>e;)--s;if(++s,0!==r||s!==i){r>=s&&(s=Math.max(s,1),r=s-1);const t=this.getValueSize();this.times=n.slice(r,s),this.values=this.values.slice(r*t,s*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const n=this.times,i=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let s=null;for(let e=0;e!==r;e++){const i=n[e];if("number"==typeof i&&isNaN(i)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,i),t=!1;break}if(null!==s&&s>i){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,i,s),t=!1;break}s=i}if(void 0!==i&&wd(i))for(let e=0,n=i.length;e!==n;++e){const n=i[e];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,n),t=!1;break}}return t}optimize(){const t=this.times.slice(),e=this.values.slice(),n=this.getValueSize(),i=this.getInterpolation()===Ne,r=t.length-1;let s=1;for(let a=1;a<r;++a){let r=!1;const o=t[a];if(o!==t[a+1]&&(1!==a||o!==t[0]))if(i)r=!0;else{const t=a*n,i=t-n,s=t+n;for(let a=0;a!==n;++a){const n=e[t+a];if(n!==e[i+a]||n!==e[s+a]){r=!0;break}}}if(r){if(a!==s){t[s]=t[a];const i=a*n,r=s*n;for(let t=0;t!==n;++t)e[r+t]=e[i+t]}++s}}if(r>0){t[s]=t[r];for(let t=r*n,i=s*n,a=0;a!==n;++a)e[i+a]=e[t+a];++s}return s!==t.length?(this.times=t.slice(0,s),this.values=e.slice(0,s*n)):(this.times=t,this.values=e),this}clone(){const t=this.times.slice(),e=this.values.slice(),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}Ud.prototype.TimeBufferType=Float32Array,Ud.prototype.ValueBufferType=Float32Array,Ud.prototype.DefaultInterpolation=Ue;class Nd extends Ud{constructor(t,e,n){super(t,e,n)}}Nd.prototype.ValueTypeName="bool",Nd.prototype.ValueBufferType=Array,Nd.prototype.DefaultInterpolation=Le,Nd.prototype.InterpolantFactoryMethodLinear=void 0,Nd.prototype.InterpolantFactoryMethodSmooth=void 0;class Dd extends Ud{}Dd.prototype.ValueTypeName="color";class Od extends Ud{}Od.prototype.ValueTypeName="number";class Fd extends Cd{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=(n-e)/(i-e);let l=t*a;for(let t=l+a;l!==t;l+=4)Ci.slerpFlat(r,0,s,l-a,s,l,o);return r}}class Bd extends Ud{InterpolantFactoryMethodLinear(t){return new Fd(this.times,this.values,this.getValueSize(),t)}}Bd.prototype.ValueTypeName="quaternion",Bd.prototype.InterpolantFactoryMethodSmooth=void 0;class zd extends Ud{constructor(t,e,n){super(t,e,n)}}zd.prototype.ValueTypeName="string",zd.prototype.ValueBufferType=Array,zd.prototype.DefaultInterpolation=Le,zd.prototype.InterpolantFactoryMethodLinear=void 0,zd.prototype.InterpolantFactoryMethodSmooth=void 0;class kd extends Ud{}kd.prototype.ValueTypeName="vector";class Vd{constructor(t="",e=-1,n=[],i=2500){this.name=t,this.tracks=n,this.duration=e,this.blendMode=i,this.uuid=Xn(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],n=t.tracks,i=1/(t.fps||1);for(let t=0,r=n.length;t!==r;++t)e.push(Hd(n[t]).scale(i));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],n=t.tracks,i={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,i=n.length;t!==i;++t)e.push(Ud.toJSON(n[t]));return i}static CreateFromMorphTargetSequence(t,e,n,i){const r=e.length,s=[];for(let t=0;t<r;t++){let a=[],o=[];a.push((t+r-1)%r,t,(t+1)%r),o.push(0,1,0);const l=Td(a);a=Ed(a,1,l),o=Ed(o,1,l),i||0!==a[0]||(a.push(r),o.push(o[0])),s.push(new Od(".morphTargetInfluences["+e[t].name+"]",a,o).scale(1/n))}return new this(t,-1,s)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<n.length;t++)if(n[t].name===e)return n[t];return null}static CreateClipsFromMorphTargetSequences(t,e,n){const i={},r=/^([\w-]*?)([\d]+)$/;for(let e=0,n=t.length;e<n;e++){const n=t[e],s=n.name.match(r);if(s&&s.length>1){const t=s[1];let e=i[t];e||(i[t]=e=[]),e.push(n)}}const s=[];for(const t in i)s.push(this.CreateFromMorphTargetSequence(t,i[t],e,n));return s}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(t,e,n,i,r){if(0!==n.length){const s=[],a=[];Ad(n,s,a,i),0!==s.length&&r.push(new t(e,s,a))}},i=[],r=t.name||"default",s=t.fps||30,a=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const r=l[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let n=0;n<r[e].morphTargets.length;n++)t[r[e].morphTargets[n]]=-1;for(const n in t){const t=[],s=[];for(let i=0;i!==r[e].morphTargets.length;++i){const i=r[e];t.push(i.time),s.push(i.morphTarget===n?1:0)}i.push(new Od(".morphTargetInfluence["+n+"]",t,s))}o=t.length*s}else{const s=".bones["+e[t].name+"]";n(kd,s+".position",r,"pos",i),n(Bd,s+".quaternion",r,"rot",i),n(kd,s+".scale",r,"scl",i)}}if(0===i.length)return null;return new this(r,o,i,a)}resetDuration(){let t=0;for(let e=0,n=this.tracks.length;e!==n;++e){const n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function Hd(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Od;case"vector":case"vector2":case"vector3":case"vector4":return kd;case"color":return Dd;case"quaternion":return Bd;case"bool":case"boolean":return Nd;case"string":return zd}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],n=[];Ad(t.keys,e,n,"value"),t.times=e,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const Gd={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class Wd{constructor(t,e,n){const i=this;let r,s=!1,a=0,o=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===s&&void 0!==i.onStart&&i.onStart(t,a,o),s=!0},this.itemEnd=function(t){a++,void 0!==i.onProgress&&i.onProgress(t,a,o),a===o&&(s=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(t){void 0!==i.onError&&i.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,n=l.length;e<n;e+=2){const n=l[e],i=l[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return i}return null}}}const Xd=new Wd;class jd{constructor(t){this.manager=void 0!==t?t:Xd,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(i,r){n.load(t,i,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}jd.DEFAULT_MATERIAL_NAME="__DEFAULT";const qd={};class Yd extends Error{constructor(t,e){super(t),this.response=e}}class Zd extends jd{constructor(t){super(t)}load(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=Gd.get(t);if(void 0!==r)return this.manager.itemStart(t),setTimeout((()=>{e&&e(r),this.manager.itemEnd(t)}),0),r;if(void 0!==qd[t])return void qd[t].push({onLoad:e,onProgress:n,onError:i});qd[t]=[],qd[t].push({onLoad:e,onProgress:n,onError:i});const s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,o=this.responseType;fetch(s).then((e=>{if(200===e.status||0===e.status){if(0===e.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===e.body||void 0===e.body.getReader)return e;const n=qd[t],i=e.body.getReader(),r=e.headers.get("X-File-Size")||e.headers.get("Content-Length"),s=r?parseInt(r):0,a=0!==s;let o=0;const l=new ReadableStream({start(t){!function e(){i.read().then((({done:i,value:r})=>{if(i)t.close();else{o+=r.byteLength;const i=new ProgressEvent("progress",{lengthComputable:a,loaded:o,total:s});for(let t=0,e=n.length;t<e;t++){const e=n[t];e.onProgress&&e.onProgress(i)}t.enqueue(r),e()}}),(e=>{t.error(e)}))}()}});return new Response(l)}throw new Yd(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`,e)})).then((t=>{switch(o){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((t=>(new DOMParser).parseFromString(t,a)));case"json":return t.json();default:if(void 0===a)return t.text();{const e=/charset="?([^;"\s]*)"?/i.exec(a),n=e&&e[1]?e[1].toLowerCase():void 0,i=new TextDecoder(n);return t.arrayBuffer().then((t=>i.decode(t)))}}})).then((e=>{Gd.add(t,e);const n=qd[t];delete qd[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onLoad&&i.onLoad(e)}})).catch((e=>{const n=qd[t];if(void 0===n)throw this.manager.itemError(t),e;delete qd[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onError&&i.onError(e)}this.manager.itemError(t)})).finally((()=>{this.manager.itemEnd(t)})),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class Jd extends jd{constructor(t){super(t)}load(t,e,n,i){const r=this,s=new Zd(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}parse(t){const e=[];for(let n=0;n<t.length;n++){const i=Vd.parse(t[n]);e.push(i)}return e}}class Kd extends jd{constructor(t){super(t)}load(t,e,n,i){const r=this,s=[],a=new kh,o=new Zd(this.manager);o.setPath(this.path),o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setWithCredentials(r.withCredentials);let l=0;function c(c){o.load(t[c],(function(t){const n=r.parse(t,!0);s[c]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},l+=1,6===l&&(1===n.mipmapCount&&(a.minFilter=Mt),a.image=s,a.format=n.format,a.needsUpdate=!0,e&&e(a))}),n,i)}if(Array.isArray(t))for(let e=0,n=t.length;e<n;++e)c(e);else o.load(t,(function(t){const n=r.parse(t,!0);if(n.isCubemap){const t=n.mipmaps.length/n.mipmapCount;for(let e=0;e<t;e++){s[e]={mipmaps:[]};for(let t=0;t<n.mipmapCount;t++)s[e].mipmaps.push(n.mipmaps[e*n.mipmapCount+t]),s[e].format=n.format,s[e].width=n.width,s[e].height=n.height}a.image=s}else a.image.width=n.width,a.image.height=n.height,a.mipmaps=n.mipmaps;1===n.mipmapCount&&(a.minFilter=Mt),a.format=n.format,a.needsUpdate=!0,e&&e(a)}),n,i);return a}}class $d extends jd{constructor(t){super(t)}load(t,e,n,i){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=Gd.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a=ri("img");function o(){c(),Gd.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){c(),i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}function c(){a.removeEventListener("load",o,!1),a.removeEventListener("error",l,!1)}return a.addEventListener("load",o,!1),a.addEventListener("error",l,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),r.manager.itemStart(t),a.src=t,a}}class Qd extends jd{constructor(t){super(t)}load(t,e,n,i){const r=new ia;r.colorSpace=Ye;const s=new $d(this.manager);s.setCrossOrigin(this.crossOrigin),s.setPath(this.path);let a=0;function o(n){s.load(t[n],(function(t){r.images[n]=t,a++,6===a&&(r.needsUpdate=!0,e&&e(r))}),void 0,i)}for(let e=0;e<t.length;++e)o(e);return r}}class tp extends jd{constructor(t){super(t)}load(t,e,n,i){const r=this,s=new zc,a=new Zd(this.manager);return a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setPath(this.path),a.setWithCredentials(r.withCredentials),a.load(t,(function(t){let n;try{n=r.parse(t)}catch(t){if(void 0===i)return void console.error(t);i(t)}void 0!==n.image?s.image=n.image:void 0!==n.data&&(s.image.width=n.width,s.image.height=n.height,s.image.data=n.data),s.wrapS=void 0!==n.wrapS?n.wrapS:mt,s.wrapT=void 0!==n.wrapT?n.wrapT:mt,s.magFilter=void 0!==n.magFilter?n.magFilter:Mt,s.minFilter=void 0!==n.minFilter?n.minFilter:Mt,s.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.colorSpace&&(s.colorSpace=n.colorSpace),void 0!==n.flipY&&(s.flipY=n.flipY),void 0!==n.format&&(s.format=n.format),void 0!==n.type&&(s.type=n.type),void 0!==n.mipmaps&&(s.mipmaps=n.mipmaps,s.minFilter=wt),1===n.mipmapCount&&(s.minFilter=Mt),void 0!==n.generateMipmaps&&(s.generateMipmaps=n.generateMipmaps),s.needsUpdate=!0,e&&e(s,n)}),n,i),s}}class ep extends jd{constructor(t){super(t)}load(t,e,n,i){const r=new Mi,s=new $d(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(t,(function(t){r.image=t,r.needsUpdate=!0,void 0!==e&&e(r)}),n,i),r}}class np extends Ur{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new Zr(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),void 0!==this.target&&(e.object.target=this.target.uuid),e}}class ip extends np{constructor(t,e,n){super(t,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(Ur.DEFAULT_UP),this.updateMatrix(),this.groundColor=new Zr(e)}copy(t,e){return super.copy(t,e),this.groundColor.copy(t.groundColor),this}}const rp=new ar,sp=new Pi,ap=new Pi;class op{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new $n(512,512),this.map=null,this.mapPass=null,this.matrix=new ar,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new ua,this._frameExtents=new $n(1,1),this._viewportCount=1,this._viewports=[new Si(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;sp.setFromMatrixPosition(t.matrixWorld),e.position.copy(sp),ap.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(ap),e.updateMatrixWorld(),rp.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(rp),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(rp)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 1!==this.intensity&&(t.intensity=this.intensity),0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class lp extends op{constructor(){super(new ta(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(t){const e=this.camera,n=2*Wn*t.angle*this.focus,i=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;n===e.fov&&i===e.aspect&&r===e.far||(e.fov=n,e.aspect=i,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}class cp extends np{constructor(t,e,n=0,i=Math.PI/3,r=0,s=2){super(t,e),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Ur.DEFAULT_UP),this.updateMatrix(),this.target=new Ur,this.distance=n,this.angle=i,this.penumbra=r,this.decay=s,this.map=null,this.shadow=new lp}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}const hp=new ar,up=new Pi,dp=new Pi;class pp extends op{constructor(){super(new ta(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new $n(4,2),this._viewportCount=6,this._viewports=[new Si(2,1,1,1),new Si(0,1,1,1),new Si(3,1,1,1),new Si(1,1,1,1),new Si(3,0,1,1),new Si(1,0,1,1)],this._cubeDirections=[new Pi(1,0,0),new Pi(-1,0,0),new Pi(0,0,1),new Pi(0,0,-1),new Pi(0,1,0),new Pi(0,-1,0)],this._cubeUps=[new Pi(0,1,0),new Pi(0,1,0),new Pi(0,1,0),new Pi(0,1,0),new Pi(0,0,1),new Pi(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,i=this.matrix,r=t.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),up.setFromMatrixPosition(t.matrixWorld),n.position.copy(up),dp.copy(n.position),dp.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(dp),n.updateMatrixWorld(),i.makeTranslation(-up.x,-up.y,-up.z),hp.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(hp)}}class mp extends np{constructor(t,e,n=0,i=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new pp}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class fp extends op{constructor(){super(new Aa(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class gp extends np{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Ur.DEFAULT_UP),this.updateMatrix(),this.target=new Ur,this.shadow=new fp}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class vp extends np{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class _p extends np{constructor(t,e,n=10,i=10){super(t,e),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}class xp{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new Pi)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const n=t.x,i=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.282095),e.addScaledVector(s[1],.488603*i),e.addScaledVector(s[2],.488603*r),e.addScaledVector(s[3],.488603*n),e.addScaledVector(s[4],n*i*1.092548),e.addScaledVector(s[5],i*r*1.092548),e.addScaledVector(s[6],.315392*(3*r*r-1)),e.addScaledVector(s[7],n*r*1.092548),e.addScaledVector(s[8],.546274*(n*n-i*i)),e}getIrradianceAt(t,e){const n=t.x,i=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.886227),e.addScaledVector(s[1],1.023328*i),e.addScaledVector(s[2],1.023328*r),e.addScaledVector(s[3],1.023328*n),e.addScaledVector(s[4],.858086*n*i),e.addScaledVector(s[5],.858086*i*r),e.addScaledVector(s[6],.743125*r*r-.247708),e.addScaledVector(s[7],.858086*n*r),e.addScaledVector(s[8],.429043*(n*n-i*i)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(t,e+3*i);return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(t,e+3*i);return t}static getBasisAt(t,e){const n=t.x,i=t.y,r=t.z;e[0]=.282095,e[1]=.488603*i,e[2]=.488603*r,e[3]=.488603*n,e[4]=1.092548*n*i,e[5]=1.092548*i*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*n*r,e[8]=.546274*(n*n-i*i)}}class yp extends np{constructor(t=new xp,e=1){super(void 0,e),this.isLightProbe=!0,this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}class Mp extends jd{constructor(t){super(t),this.textures={}}load(t,e,n,i){const r=this,s=new Zd(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}parse(t){const e=this.textures;function n(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}const i=Mp.createMaterialFromType(t.type);if(void 0!==t.uuid&&(i.uuid=t.uuid),void 0!==t.name&&(i.name=t.name),void 0!==t.color&&void 0!==i.color&&i.color.setHex(t.color),void 0!==t.roughness&&(i.roughness=t.roughness),void 0!==t.metalness&&(i.metalness=t.metalness),void 0!==t.sheen&&(i.sheen=t.sheen),void 0!==t.sheenColor&&(i.sheenColor=(new Zr).setHex(t.sheenColor)),void 0!==t.sheenRoughness&&(i.sheenRoughness=t.sheenRoughness),void 0!==t.emissive&&void 0!==i.emissive&&i.emissive.setHex(t.emissive),void 0!==t.specular&&void 0!==i.specular&&i.specular.setHex(t.specular),void 0!==t.specularIntensity&&(i.specularIntensity=t.specularIntensity),void 0!==t.specularColor&&void 0!==i.specularColor&&i.specularColor.setHex(t.specularColor),void 0!==t.shininess&&(i.shininess=t.shininess),void 0!==t.clearcoat&&(i.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(i.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.dispersion&&(i.dispersion=t.dispersion),void 0!==t.iridescence&&(i.iridescence=t.iridescence),void 0!==t.iridescenceIOR&&(i.iridescenceIOR=t.iridescenceIOR),void 0!==t.iridescenceThicknessRange&&(i.iridescenceThicknessRange=t.iridescenceThicknessRange),void 0!==t.transmission&&(i.transmission=t.transmission),void 0!==t.thickness&&(i.thickness=t.thickness),void 0!==t.attenuationDistance&&(i.attenuationDistance=t.attenuationDistance),void 0!==t.attenuationColor&&void 0!==i.attenuationColor&&i.attenuationColor.setHex(t.attenuationColor),void 0!==t.anisotropy&&(i.anisotropy=t.anisotropy),void 0!==t.anisotropyRotation&&(i.anisotropyRotation=t.anisotropyRotation),void 0!==t.fog&&(i.fog=t.fog),void 0!==t.flatShading&&(i.flatShading=t.flatShading),void 0!==t.blending&&(i.blending=t.blending),void 0!==t.combine&&(i.combine=t.combine),void 0!==t.side&&(i.side=t.side),void 0!==t.shadowSide&&(i.shadowSide=t.shadowSide),void 0!==t.opacity&&(i.opacity=t.opacity),void 0!==t.transparent&&(i.transparent=t.transparent),void 0!==t.alphaTest&&(i.alphaTest=t.alphaTest),void 0!==t.alphaHash&&(i.alphaHash=t.alphaHash),void 0!==t.depthFunc&&(i.depthFunc=t.depthFunc),void 0!==t.depthTest&&(i.depthTest=t.depthTest),void 0!==t.depthWrite&&(i.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(i.colorWrite=t.colorWrite),void 0!==t.blendSrc&&(i.blendSrc=t.blendSrc),void 0!==t.blendDst&&(i.blendDst=t.blendDst),void 0!==t.blendEquation&&(i.blendEquation=t.blendEquation),void 0!==t.blendSrcAlpha&&(i.blendSrcAlpha=t.blendSrcAlpha),void 0!==t.blendDstAlpha&&(i.blendDstAlpha=t.blendDstAlpha),void 0!==t.blendEquationAlpha&&(i.blendEquationAlpha=t.blendEquationAlpha),void 0!==t.blendColor&&void 0!==i.blendColor&&i.blendColor.setHex(t.blendColor),void 0!==t.blendAlpha&&(i.blendAlpha=t.blendAlpha),void 0!==t.stencilWriteMask&&(i.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(i.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(i.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(i.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(i.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(i.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(i.stencilZPass=t.stencilZPass),void 0!==t.stencilWrite&&(i.stencilWrite=t.stencilWrite),void 0!==t.wireframe&&(i.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(i.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(i.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(i.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(i.rotation=t.rotation),void 0!==t.linewidth&&(i.linewidth=t.linewidth),void 0!==t.dashSize&&(i.dashSize=t.dashSize),void 0!==t.gapSize&&(i.gapSize=t.gapSize),void 0!==t.scale&&(i.scale=t.scale),void 0!==t.polygonOffset&&(i.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(i.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(i.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.dithering&&(i.dithering=t.dithering),void 0!==t.alphaToCoverage&&(i.alphaToCoverage=t.alphaToCoverage),void 0!==t.premultipliedAlpha&&(i.premultipliedAlpha=t.premultipliedAlpha),void 0!==t.forceSinglePass&&(i.forceSinglePass=t.forceSinglePass),void 0!==t.visible&&(i.visible=t.visible),void 0!==t.toneMapped&&(i.toneMapped=t.toneMapped),void 0!==t.userData&&(i.userData=t.userData),void 0!==t.vertexColors&&("number"==typeof t.vertexColors?i.vertexColors=t.vertexColors>0:i.vertexColors=t.vertexColors),void 0!==t.uniforms)for(const e in t.uniforms){const r=t.uniforms[e];switch(i.uniforms[e]={},r.type){case"t":i.uniforms[e].value=n(r.value);break;case"c":i.uniforms[e].value=(new Zr).setHex(r.value);break;case"v2":i.uniforms[e].value=(new $n).fromArray(r.value);break;case"v3":i.uniforms[e].value=(new Pi).fromArray(r.value);break;case"v4":i.uniforms[e].value=(new Si).fromArray(r.value);break;case"m3":i.uniforms[e].value=(new Qn).fromArray(r.value);break;case"m4":i.uniforms[e].value=(new ar).fromArray(r.value);break;default:i.uniforms[e].value=r.value}}if(void 0!==t.defines&&(i.defines=t.defines),void 0!==t.vertexShader&&(i.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(i.fragmentShader=t.fragmentShader),void 0!==t.glslVersion&&(i.glslVersion=t.glslVersion),void 0!==t.extensions)for(const e in t.extensions)i.extensions[e]=t.extensions[e];if(void 0!==t.lights&&(i.lights=t.lights),void 0!==t.clipping&&(i.clipping=t.clipping),void 0!==t.size&&(i.size=t.size),void 0!==t.sizeAttenuation&&(i.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(i.map=n(t.map)),void 0!==t.matcap&&(i.matcap=n(t.matcap)),void 0!==t.alphaMap&&(i.alphaMap=n(t.alphaMap)),void 0!==t.bumpMap&&(i.bumpMap=n(t.bumpMap)),void 0!==t.bumpScale&&(i.bumpScale=t.bumpScale),void 0!==t.normalMap&&(i.normalMap=n(t.normalMap)),void 0!==t.normalMapType&&(i.normalMapType=t.normalMapType),void 0!==t.normalScale){let e=t.normalScale;!1===Array.isArray(e)&&(e=[e,e]),i.normalScale=(new $n).fromArray(e)}return void 0!==t.displacementMap&&(i.displacementMap=n(t.displacementMap)),void 0!==t.displacementScale&&(i.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(i.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(i.roughnessMap=n(t.roughnessMap)),void 0!==t.metalnessMap&&(i.metalnessMap=n(t.metalnessMap)),void 0!==t.emissiveMap&&(i.emissiveMap=n(t.emissiveMap)),void 0!==t.emissiveIntensity&&(i.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(i.specularMap=n(t.specularMap)),void 0!==t.specularIntensityMap&&(i.specularIntensityMap=n(t.specularIntensityMap)),void 0!==t.specularColorMap&&(i.specularColorMap=n(t.specularColorMap)),void 0!==t.envMap&&(i.envMap=n(t.envMap)),void 0!==t.envMapRotation&&i.envMapRotation.fromArray(t.envMapRotation),void 0!==t.envMapIntensity&&(i.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(i.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(i.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(i.lightMap=n(t.lightMap)),void 0!==t.lightMapIntensity&&(i.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(i.aoMap=n(t.aoMap)),void 0!==t.aoMapIntensity&&(i.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(i.gradientMap=n(t.gradientMap)),void 0!==t.clearcoatMap&&(i.clearcoatMap=n(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(i.clearcoatRoughnessMap=n(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(i.clearcoatNormalMap=n(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(i.clearcoatNormalScale=(new $n).fromArray(t.clearcoatNormalScale)),void 0!==t.iridescenceMap&&(i.iridescenceMap=n(t.iridescenceMap)),void 0!==t.iridescenceThicknessMap&&(i.iridescenceThicknessMap=n(t.iridescenceThicknessMap)),void 0!==t.transmissionMap&&(i.transmissionMap=n(t.transmissionMap)),void 0!==t.thicknessMap&&(i.thicknessMap=n(t.thicknessMap)),void 0!==t.anisotropyMap&&(i.anisotropyMap=n(t.anisotropyMap)),void 0!==t.sheenColorMap&&(i.sheenColorMap=n(t.sheenColorMap)),void 0!==t.sheenRoughnessMap&&(i.sheenRoughnessMap=n(t.sheenRoughnessMap)),i}setTextures(t){return this.textures=t,this}static createMaterialFromType(t){return new{ShadowMaterial:pd,SpriteMaterial:cc,RawShaderMaterial:md,ShaderMaterial:Zs,PointsMaterial:Ih,MeshPhysicalMaterial:gd,MeshStandardMaterial:fd,MeshPhongMaterial:vd,MeshToonMaterial:_d,MeshNormalMaterial:xd,MeshLambertMaterial:yd,MeshDepthMaterial:Bl,MeshDistanceMaterial:zl,MeshBasicMaterial:Qr,MeshMatcapMaterial:Md,LineDashedMaterial:Sd,LineBasicMaterial:vh,Material:$r}[t]}}class Sp{static decodeText(t){if(console.warn("THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead."),"undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let n=0,i=t.length;n<i;n++)e+=String.fromCharCode(t[n]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.slice(0,e+1)}static resolveURL(t,e){return"string"!=typeof t||""===t?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}}class bp extends ws{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}toJSON(){const t=super.toJSON();return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}class wp extends jd{constructor(t){super(t)}load(t,e,n,i){const r=this,s=new Zd(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}parse(t){const e={},n={};function i(t,i){if(void 0!==e[i])return e[i];const r=t.interleavedBuffers[i],s=function(t,e){if(void 0!==n[e])return n[e];const i=t.arrayBuffers,r=i[e],s=new Uint32Array(r).buffer;return n[e]=s,s}(t,r.buffer),a=ii(r.type,s),o=new ac(a,r.stride);return o.uuid=r.uuid,e[i]=o,o}const r=t.isInstancedBufferGeometry?new bp:new ws,s=t.data.index;if(void 0!==s){const t=ii(s.type,s.array);r.setIndex(new os(t,1))}const a=t.data.attributes;for(const e in a){const n=a[e];let s;if(n.isInterleavedBufferAttribute){const e=i(t.data,n.data);s=new lc(e,n.itemSize,n.offset,n.normalized)}else{const t=ii(n.type,n.array);s=new(n.isInstancedBufferAttribute?Gc:os)(t,n.itemSize,n.normalized)}void 0!==n.name&&(s.name=n.name),void 0!==n.usage&&s.setUsage(n.usage),r.setAttribute(e,s)}const o=t.data.morphAttributes;if(o)for(const e in o){const n=o[e],s=[];for(let e=0,r=n.length;e<r;e++){const r=n[e];let a;if(r.isInterleavedBufferAttribute){const e=i(t.data,r.data);a=new lc(e,r.itemSize,r.offset,r.normalized)}else{const t=ii(r.type,r.array);a=new os(t,r.itemSize,r.normalized)}void 0!==r.name&&(a.name=r.name),s.push(a)}r.morphAttributes[e]=s}t.data.morphTargetsRelative&&(r.morphTargetsRelative=!0);const l=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==l)for(let t=0,e=l.length;t!==e;++t){const e=l[t];r.addGroup(e.start,e.count,e.materialIndex)}const c=t.data.boundingSphere;if(void 0!==c){const t=new Pi;void 0!==c.center&&t.fromArray(c.center),r.boundingSphere=new Ki(t,c.radius)}return t.name&&(r.name=t.name),t.userData&&(r.userData=t.userData),r}}class Tp extends jd{constructor(t){super(t)}load(t,e,n,i){const r=this,s=""===this.path?Sp.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||s;const a=new Zd(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(t,(function(n){let s=null;try{s=JSON.parse(n)}catch(e){return void 0!==i&&i(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}const a=s.metadata;if(void 0===a||void 0===a.type||"geometry"===a.type.toLowerCase())return void 0!==i&&i(new Error("THREE.ObjectLoader: Can't load "+t)),void console.error("THREE.ObjectLoader: Can't load "+t);r.parse(s,e)}),n,i)}async loadAsync(t,e){const n=""===this.path?Sp.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||n;const i=new Zd(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials);const r=await i.loadAsync(t,e),s=JSON.parse(r),a=s.metadata;if(void 0===a||void 0===a.type||"geometry"===a.type.toLowerCase())throw new Error("THREE.ObjectLoader: Can't load "+t);return await this.parseAsync(s)}parse(t,e){const n=this.parseAnimations(t.animations),i=this.parseShapes(t.shapes),r=this.parseGeometries(t.geometries,i),s=this.parseImages(t.images,(function(){void 0!==e&&e(l)})),a=this.parseTextures(t.textures,s),o=this.parseMaterials(t.materials,a),l=this.parseObject(t.object,r,o,a,n),c=this.parseSkeletons(t.skeletons,l);if(this.bindSkeletons(l,c),this.bindLightTargets(l),void 0!==e){let t=!1;for(const e in s)if(s[e].data instanceof HTMLImageElement){t=!0;break}!1===t&&e(l)}return l}async parseAsync(t){const e=this.parseAnimations(t.animations),n=this.parseShapes(t.shapes),i=this.parseGeometries(t.geometries,n),r=await this.parseImagesAsync(t.images),s=this.parseTextures(t.textures,r),a=this.parseMaterials(t.materials,s),o=this.parseObject(t.object,i,a,s,e),l=this.parseSkeletons(t.skeletons,o);return this.bindSkeletons(o,l),this.bindLightTargets(o),o}parseShapes(t){const e={};if(void 0!==t)for(let n=0,i=t.length;n<i;n++){const i=(new wu).fromJSON(t[n]);e[i.uuid]=i}return e}parseSkeletons(t,e){const n={},i={};if(e.traverse((function(t){t.isBone&&(i[t.uuid]=t)})),void 0!==t)for(let e=0,r=t.length;e<r;e++){const r=(new Hc).fromJSON(t[e],i);n[r.uuid]=r}return n}parseGeometries(t,e){const n={};if(void 0!==t){const i=new wp;for(let r=0,s=t.length;r<s;r++){let s;const a=t[r];switch(a.type){case"BufferGeometry":case"InstancedBufferGeometry":s=i.parse(a);break;default:a.type in dd?s=dd[a.type].fromJSON(a,e):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${a.type}"`)}s.uuid=a.uuid,void 0!==a.name&&(s.name=a.name),void 0!==a.userData&&(s.userData=a.userData),n[a.uuid]=s}}return n}parseMaterials(t,e){const n={},i={};if(void 0!==t){const r=new Mp;r.setTextures(e);for(let e=0,s=t.length;e<s;e++){const s=t[e];void 0===n[s.uuid]&&(n[s.uuid]=r.parse(s)),i[s.uuid]=n[s.uuid]}}return i}parseAnimations(t){const e={};if(void 0!==t)for(let n=0;n<t.length;n++){const i=t[n],r=Vd.parse(i);e[r.uuid]=r}return e}parseImages(t,e){const n=this,i={};let r;function s(t){if("string"==typeof t){const e=t;return function(t){return n.manager.itemStart(t),r.load(t,(function(){n.manager.itemEnd(t)}),void 0,(function(){n.manager.itemError(t),n.manager.itemEnd(t)}))}(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(e)?e:n.resourcePath+e)}return t.data?{data:ii(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){const n=new Wd(e);r=new $d(n),r.setCrossOrigin(this.crossOrigin);for(let e=0,n=t.length;e<n;e++){const n=t[e],r=n.url;if(Array.isArray(r)){const t=[];for(let e=0,n=r.length;e<n;e++){const n=s(r[e]);null!==n&&(n instanceof HTMLImageElement?t.push(n):t.push(new zc(n.data,n.width,n.height)))}i[n.uuid]=new _i(t)}else{const t=s(n.url);i[n.uuid]=new _i(t)}}}return i}async parseImagesAsync(t){const e=this,n={};let i;async function r(t){if("string"==typeof t){const n=t,r=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(n)?n:e.resourcePath+n;return await i.loadAsync(r)}return t.data?{data:ii(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){i=new $d(this.manager),i.setCrossOrigin(this.crossOrigin);for(let e=0,i=t.length;e<i;e++){const i=t[e],s=i.url;if(Array.isArray(s)){const t=[];for(let e=0,n=s.length;e<n;e++){const n=s[e],i=await r(n);null!==i&&(i instanceof HTMLImageElement?t.push(i):t.push(new zc(i.data,i.width,i.height)))}n[i.uuid]=new _i(t)}else{const t=await r(i.url);n[i.uuid]=new _i(t)}}}return n}parseTextures(t,e){function n(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}const i={};if(void 0!==t)for(let r=0,s=t.length;r<s;r++){const s=t[r];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===e[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image);const a=e[s.image],o=a.data;let l;Array.isArray(o)?(l=new ia,6===o.length&&(l.needsUpdate=!0)):(l=o&&o.data?new zc:new Mi,o&&(l.needsUpdate=!0)),l.source=a,l.uuid=s.uuid,void 0!==s.name&&(l.name=s.name),void 0!==s.mapping&&(l.mapping=n(s.mapping,Ep)),void 0!==s.channel&&(l.channel=s.channel),void 0!==s.offset&&l.offset.fromArray(s.offset),void 0!==s.repeat&&l.repeat.fromArray(s.repeat),void 0!==s.center&&l.center.fromArray(s.center),void 0!==s.rotation&&(l.rotation=s.rotation),void 0!==s.wrap&&(l.wrapS=n(s.wrap[0],Ap),l.wrapT=n(s.wrap[1],Ap)),void 0!==s.format&&(l.format=s.format),void 0!==s.internalFormat&&(l.internalFormat=s.internalFormat),void 0!==s.type&&(l.type=s.type),void 0!==s.colorSpace&&(l.colorSpace=s.colorSpace),void 0!==s.minFilter&&(l.minFilter=n(s.minFilter,Rp)),void 0!==s.magFilter&&(l.magFilter=n(s.magFilter,Rp)),void 0!==s.anisotropy&&(l.anisotropy=s.anisotropy),void 0!==s.flipY&&(l.flipY=s.flipY),void 0!==s.generateMipmaps&&(l.generateMipmaps=s.generateMipmaps),void 0!==s.premultiplyAlpha&&(l.premultiplyAlpha=s.premultiplyAlpha),void 0!==s.unpackAlignment&&(l.unpackAlignment=s.unpackAlignment),void 0!==s.compareFunction&&(l.compareFunction=s.compareFunction),void 0!==s.userData&&(l.userData=s.userData),i[s.uuid]=l}return i}parseObject(t,e,n,i,r){let s,a,o;function l(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function c(t){if(void 0!==t){if(Array.isArray(t)){const e=[];for(let i=0,r=t.length;i<r;i++){const r=t[i];void 0===n[r]&&console.warn("THREE.ObjectLoader: Undefined material",r),e.push(n[r])}return e}return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),n[t]}}function h(t){return void 0===i[t]&&console.warn("THREE.ObjectLoader: Undefined texture",t),i[t]}switch(t.type){case"Scene":s=new sc,void 0!==t.background&&(Number.isInteger(t.background)?s.background=new Zr(t.background):s.background=h(t.background)),void 0!==t.environment&&(s.environment=h(t.environment)),void 0!==t.fog&&("Fog"===t.fog.type?s.fog=new rc(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(s.fog=new ic(t.fog.color,t.fog.density)),""!==t.fog.name&&(s.fog.name=t.fog.name)),void 0!==t.backgroundBlurriness&&(s.backgroundBlurriness=t.backgroundBlurriness),void 0!==t.backgroundIntensity&&(s.backgroundIntensity=t.backgroundIntensity),void 0!==t.backgroundRotation&&s.backgroundRotation.fromArray(t.backgroundRotation),void 0!==t.environmentIntensity&&(s.environmentIntensity=t.environmentIntensity),void 0!==t.environmentRotation&&s.environmentRotation.fromArray(t.environmentRotation);break;case"PerspectiveCamera":s=new ta(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(s.focus=t.focus),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.filmGauge&&(s.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(s.filmOffset=t.filmOffset),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"OrthographicCamera":s=new Aa(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"AmbientLight":s=new vp(t.color,t.intensity);break;case"DirectionalLight":s=new gp(t.color,t.intensity),s.target=t.target||"";break;case"PointLight":s=new mp(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":s=new _p(t.color,t.intensity,t.width,t.height);break;case"SpotLight":s=new cp(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay),s.target=t.target||"";break;case"HemisphereLight":s=new ip(t.color,t.groundColor,t.intensity);break;case"LightProbe":s=(new yp).fromJSON(t);break;case"SkinnedMesh":a=l(t.geometry),o=c(t.material),s=new Fc(a,o),void 0!==t.bindMode&&(s.bindMode=t.bindMode),void 0!==t.bindMatrix&&s.bindMatrix.fromArray(t.bindMatrix),void 0!==t.skeleton&&(s.skeleton=t.skeleton);break;case"Mesh":a=l(t.geometry),o=c(t.material),s=new Hs(a,o);break;case"InstancedMesh":a=l(t.geometry),o=c(t.material);const e=t.count,n=t.instanceMatrix,i=t.instanceColor;s=new Kc(a,o,e),s.instanceMatrix=new Gc(new Float32Array(n.array),16),void 0!==i&&(s.instanceColor=new Gc(new Float32Array(i.array),i.itemSize));break;case"BatchedMesh":a=l(t.geometry),o=c(t.material),s=new gh(t.maxInstanceCount,t.maxVertexCount,t.maxIndexCount,o),s.geometry=a,s.perObjectFrustumCulled=t.perObjectFrustumCulled,s.sortObjects=t.sortObjects,s._drawRanges=t.drawRanges,s._reservedRanges=t.reservedRanges,s._visibility=t.visibility,s._active=t.active,s._bounds=t.bounds.map((t=>{const e=new Ui;e.min.fromArray(t.boxMin),e.max.fromArray(t.boxMax);const n=new Ki;return n.radius=t.sphereRadius,n.center.fromArray(t.sphereCenter),{boxInitialized:t.boxInitialized,box:e,sphereInitialized:t.sphereInitialized,sphere:n}})),s._maxInstanceCount=t.maxInstanceCount,s._maxVertexCount=t.maxVertexCount,s._maxIndexCount=t.maxIndexCount,s._geometryInitialized=t.geometryInitialized,s._geometryCount=t.geometryCount,s._matricesTexture=h(t.matricesTexture.uuid),void 0!==t.colorsTexture&&(s._colorsTexture=h(t.colorsTexture.uuid));break;case"LOD":s=new Ac;break;case"Line":s=new Th(l(t.geometry),c(t.material));break;case"LineLoop":s=new Ph(l(t.geometry),c(t.material));break;case"LineSegments":s=new Ch(l(t.geometry),c(t.material));break;case"PointCloud":case"Points":s=new Oh(l(t.geometry),c(t.material));break;case"Sprite":s=new bc(c(t.material));break;case"Group":s=new ql;break;case"Bone":s=new Bc;break;default:s=new Ur}if(s.uuid=t.uuid,void 0!==t.name&&(s.name=t.name),void 0!==t.matrix?(s.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(s.matrixAutoUpdate=t.matrixAutoUpdate),s.matrixAutoUpdate&&s.matrix.decompose(s.position,s.quaternion,s.scale)):(void 0!==t.position&&s.position.fromArray(t.position),void 0!==t.rotation&&s.rotation.fromArray(t.rotation),void 0!==t.quaternion&&s.quaternion.fromArray(t.quaternion),void 0!==t.scale&&s.scale.fromArray(t.scale)),void 0!==t.up&&s.up.fromArray(t.up),void 0!==t.castShadow&&(s.castShadow=t.castShadow),void 0!==t.receiveShadow&&(s.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.intensity&&(s.shadow.intensity=t.shadow.intensity),void 0!==t.shadow.bias&&(s.shadow.bias=t.shadow.bias),void 0!==t.shadow.normalBias&&(s.shadow.normalBias=t.shadow.normalBias),void 0!==t.shadow.radius&&(s.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&s.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(s.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(s.visible=t.visible),void 0!==t.frustumCulled&&(s.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(s.renderOrder=t.renderOrder),void 0!==t.userData&&(s.userData=t.userData),void 0!==t.layers&&(s.layers.mask=t.layers),void 0!==t.children){const a=t.children;for(let t=0;t<a.length;t++)s.add(this.parseObject(a[t],e,n,i,r))}if(void 0!==t.animations){const e=t.animations;for(let t=0;t<e.length;t++){const n=e[t];s.animations.push(r[n])}}if("LOD"===t.type){void 0!==t.autoUpdate&&(s.autoUpdate=t.autoUpdate);const e=t.levels;for(let t=0;t<e.length;t++){const n=e[t],i=s.getObjectByProperty("uuid",n.object);void 0!==i&&s.addLevel(i,n.distance,n.hysteresis)}}return s}bindSkeletons(t,e){0!==Object.keys(e).length&&t.traverse((function(t){if(!0===t.isSkinnedMesh&&void 0!==t.skeleton){const n=e[t.skeleton];void 0===n?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",t.skeleton):t.bind(n,t.bindMatrix)}}))}bindLightTargets(t){t.traverse((function(e){if(e.isDirectionalLight||e.isSpotLight){const n=e.target,i=t.getObjectByProperty("uuid",n);e.target=void 0!==i?i:new Ur}}))}}const Ep={UVMapping:ot,CubeReflectionMapping:lt,CubeRefractionMapping:ct,EquirectangularReflectionMapping:ht,EquirectangularRefractionMapping:ut,CubeUVReflectionMapping:dt},Ap={RepeatWrapping:pt,ClampToEdgeWrapping:mt,MirroredRepeatWrapping:ft},Rp={NearestFilter:gt,NearestMipmapNearestFilter:vt,NearestMipmapLinearFilter:xt,LinearFilter:Mt,LinearMipmapNearestFilter:St,LinearMipmapLinearFilter:wt};class Cp extends jd{constructor(t){super(t),this.isImageBitmapLoader=!0,"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=Gd.get(t);if(void 0!==s)return r.manager.itemStart(t),s.then?void s.then((n=>{e&&e(n),r.manager.itemEnd(t)})).catch((t=>{i&&i(t)})):(setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s);const a={};a.credentials="anonymous"===this.crossOrigin?"same-origin":"include",a.headers=this.requestHeader;const o=fetch(t,a).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:"none"}))})).then((function(n){return Gd.add(t,n),e&&e(n),r.manager.itemEnd(t),n})).catch((function(e){i&&i(e),Gd.remove(t),r.manager.itemError(t),r.manager.itemEnd(t)}));Gd.add(t,o),r.manager.itemStart(t)}}let Pp;class Ip{static getContext(){return void 0===Pp&&(Pp=new(window.AudioContext||window.webkitAudioContext)),Pp}static setContext(t){Pp=t}}class Lp extends jd{constructor(t){super(t)}load(t,e,n,i){const r=this,s=new Zd(this.manager);function a(e){i?i(e):console.error(e),r.manager.itemError(t)}s.setResponseType("arraybuffer"),s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(t,(function(t){try{const n=t.slice(0);Ip.getContext().decodeAudioData(n,(function(t){e(t)})).catch(a)}catch(t){a(t)}}),n,i)}}const Up=new ar,Np=new ar,Dp=new ar;class Op{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new ta,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new ta,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep,Dp.copy(t.projectionMatrix);const n=e.eyeSep/2,i=n*e.near/e.focus,r=e.near*Math.tan(Gn*e.fov*.5)/e.zoom;let s,a;Np.elements[12]=-n,Up.elements[12]=n,s=-r*e.aspect+i,a=r*e.aspect+i,Dp.elements[0]=2*e.near/(a-s),Dp.elements[8]=(a+s)/(a-s),this.cameraL.projectionMatrix.copy(Dp),s=-r*e.aspect-i,a=r*e.aspect-i,Dp.elements[0]=2*e.near/(a-s),Dp.elements[8]=(a+s)/(a-s),this.cameraR.projectionMatrix.copy(Dp)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Np),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Up)}}class Fp{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Bp(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=Bp();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function Bp(){return("undefined"==typeof performance?Date:performance).now()}const zp=new Pi,kp=new Ci,Vp=new Pi,Hp=new Pi;class Gp extends Ur{constructor(){super(),this.type="AudioListener",this.context=Ip.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Fp}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(zp,kp,Vp),Hp.set(0,0,-1).applyQuaternion(kp),e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(zp.x,t),e.positionY.linearRampToValueAtTime(zp.y,t),e.positionZ.linearRampToValueAtTime(zp.z,t),e.forwardX.linearRampToValueAtTime(Hp.x,t),e.forwardY.linearRampToValueAtTime(Hp.y,t),e.forwardZ.linearRampToValueAtTime(Hp.z,t),e.upX.linearRampToValueAtTime(n.x,t),e.upY.linearRampToValueAtTime(n.y,t),e.upZ.linearRampToValueAtTime(n.z,t)}else e.setPosition(zp.x,zp.y,zp.z),e.setOrientation(Hp.x,Hp.y,Hp.z,n.x,n.y,n.z)}}class Wp extends Ur{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,null!==this.source&&(this.source.stop(),this.source.onended=null),this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(!1!==this._connected){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){return this.detune=t,!0===this.isPlaying&&void 0!==this.source.detune&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}const Xp=new Pi,jp=new Ci,qp=new Pi,Yp=new Pi;class Zp extends Wp{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){super.connect(),this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){return this.panner.refDistance=t,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){return this.panner.rolloffFactor=t,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){return this.panner.distanceModel=t,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){return this.panner.maxDistance=t,this}setDirectionalCone(t,e,n){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=n,this}updateMatrixWorld(t){if(super.updateMatrixWorld(t),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(Xp,jp,qp),Yp.set(0,0,1).applyQuaternion(jp);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(Xp.x,t),e.positionY.linearRampToValueAtTime(Xp.y,t),e.positionZ.linearRampToValueAtTime(Xp.z,t),e.orientationX.linearRampToValueAtTime(Yp.x,t),e.orientationY.linearRampToValueAtTime(Yp.y,t),e.orientationZ.linearRampToValueAtTime(Yp.z,t)}else e.setPosition(Xp.x,Xp.y,Xp.z),e.setOrientation(Yp.x,Yp.y,Yp.z)}}class Jp{constructor(t,e=2048){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=e,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let n=0;n<e.length;n++)t+=e[n];return t/e.length}}class Kp{constructor(t,e,n){let i,r,s;switch(this.binding=t,this.valueSize=n,e){case"quaternion":i=this._slerp,r=this._slerpAdditive,s=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*n),this._workIndex=5;break;case"string":case"bool":i=this._select,r=this._select,s=this._setAdditiveIdentityOther,this.buffer=new Array(5*n);break;default:i=this._lerp,r=this._lerpAdditive,s=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*n)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=r,this._setIdentity=s,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const n=this.buffer,i=this.valueSize,r=t*i+i;let s=this.cumulativeWeight;if(0===s){for(let t=0;t!==i;++t)n[r+t]=n[t];s=e}else{s+=e;const t=e/s;this._mixBufferRegion(n,r,0,t,i)}this.cumulativeWeight=s}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,i=n*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,i,0,t,n),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,i=t*e+e,r=this.cumulativeWeight,s=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const t=e*this._origIndex;this._mixBufferRegion(n,i,t,1-r,e)}s>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(n[t]!==n[t+e]){a.setValue(n,i);break}}saveOriginalState(){const t=this.binding,e=this.buffer,n=this.valueSize,i=n*this._origIndex;t.getValue(e,i);for(let t=n,r=i;t!==r;++t)e[t]=e[i+t%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let n=t;n<e;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[e+n]=this.buffer[t+n]}_select(t,e,n,i,r){if(i>=.5)for(let i=0;i!==r;++i)t[e+i]=t[n+i]}_slerp(t,e,n,i){Ci.slerpFlat(t,e,t,e,t,n,i)}_slerpAdditive(t,e,n,i,r){const s=this._workIndex*r;Ci.multiplyQuaternionsFlat(t,s,t,e,t,n),Ci.slerpFlat(t,e,t,e,t,s,i)}_lerp(t,e,n,i,r){const s=1-i;for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]*s+t[n+a]*i}}_lerpAdditive(t,e,n,i,r){for(let s=0;s!==r;++s){const r=e+s;t[r]=t[r]+t[n+s]*i}}}const $p="\\[\\]\\.:\\/",Qp=new RegExp("["+$p+"]","g"),tm="[^"+$p+"]",em="[^"+$p.replace("\\.","")+"]",nm=new RegExp("^"+/((?:WC+[\/:])*)/.source.replace("WC",tm)+/(WCOD+)?/.source.replace("WCOD",em)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",tm)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",tm)+"$"),im=["material","materials","bones","map"];class rm{constructor(t,e,n){this.path=e,this.parsedPath=n||rm.parseTrackName(e),this.node=rm.findNode(t,this.parsedPath.nodeName),this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,n){return t&&t.isAnimationObjectGroup?new rm.Composite(t,e,n):new rm(t,e,n)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(Qp,"")}static parseTrackName(t){const e=nm.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){const t=n.nodeName.substring(i+1);-1!==im.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e)return r;const s=n(r.children);if(s)return s}return null},i=n(t.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)t[e++]=n[i]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,i=e.propertyName;let r=e.propertyIndex;if(t||(t=rm.findNode(this.rootNode,e.nodeName),this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");if(n){let i=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===i){i=e;break}break;case"map":if("map"in t){t=t.map;break}if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.map)return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);t=t.material.map;break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==i){if(void 0===t[i])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[i]}}const s=t[i];if(void 0===s){const n=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+i+" but it wasn't found.",t)}let a=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?a=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(a=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else void 0!==s.fromArray&&void 0!==s.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(o=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=i;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}rm.Composite=class{constructor(t,e,n){const i=n||rm.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}},rm.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},rm.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},rm.prototype.GetterByBindingType=[rm.prototype._getValue_direct,rm.prototype._getValue_array,rm.prototype._getValue_arrayElement,rm.prototype._getValue_toArray],rm.prototype.SetterByBindingTypeAndVersioning=[[rm.prototype._setValue_direct,rm.prototype._setValue_direct_setNeedsUpdate,rm.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[rm.prototype._setValue_array,rm.prototype._setValue_array_setNeedsUpdate,rm.prototype._setValue_array_setMatrixWorldNeedsUpdate],[rm.prototype._setValue_arrayElement,rm.prototype._setValue_arrayElement_setNeedsUpdate,rm.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[rm.prototype._setValue_fromArray,rm.prototype._setValue_fromArray_setNeedsUpdate,rm.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class sm{constructor(){this.isAnimationObjectGroup=!0,this.uuid=Xn(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,n=arguments.length;e!==n;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,n=this._paths,i=this._parsedPaths,r=this._bindings,s=r.length;let a,o=t.length,l=this.nCachedObjects_;for(let c=0,h=arguments.length;c!==h;++c){const h=arguments[c],u=h.uuid;let d=e[u];if(void 0===d){d=o++,e[u]=d,t.push(h);for(let t=0,e=s;t!==e;++t)r[t].push(new rm(h,n[t],i[t]))}else if(d<l){a=t[d];const o=--l,c=t[o];e[c.uuid]=d,t[d]=c,e[u]=o,t[o]=h;for(let t=0,e=s;t!==e;++t){const e=r[t],s=e[o];let a=e[d];e[d]=s,void 0===a&&(a=new rm(h,n[t],i[t])),e[o]=a}}else t[d]!==a&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=l}remove(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,i=n.length;let r=this.nCachedObjects_;for(let s=0,a=arguments.length;s!==a;++s){const a=arguments[s],o=a.uuid,l=e[o];if(void 0!==l&&l>=r){const s=r++,c=t[s];e[c.uuid]=l,t[l]=c,e[o]=s,t[s]=a;for(let t=0,e=i;t!==e;++t){const e=n[t],i=e[s],r=e[l];e[l]=i,e[s]=r}}}this.nCachedObjects_=r}uncache(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,i=n.length;let r=this.nCachedObjects_,s=t.length;for(let a=0,o=arguments.length;a!==o;++a){const o=arguments[a].uuid,l=e[o];if(void 0!==l)if(delete e[o],l<r){const a=--r,o=t[a],c=--s,h=t[c];e[o.uuid]=l,t[l]=o,e[h.uuid]=a,t[a]=h,t.pop();for(let t=0,e=i;t!==e;++t){const e=n[t],i=e[a],r=e[c];e[l]=i,e[a]=r,e.pop()}}else{const r=--s,a=t[r];r>0&&(e[a.uuid]=l),t[l]=a,t.pop();for(let t=0,e=i;t!==e;++t){const e=n[t];e[l]=e[r],e.pop()}}}this.nCachedObjects_=r}subscribe_(t,e){const n=this._bindingsIndicesByPath;let i=n[t];const r=this._bindings;if(void 0!==i)return r[i];const s=this._paths,a=this._parsedPaths,o=this._objects,l=o.length,c=this.nCachedObjects_,h=new Array(l);i=r.length,n[t]=i,s.push(t),a.push(e),r.push(h);for(let n=c,i=o.length;n!==i;++n){const i=o[n];h[n]=new rm(i,t,e)}return h}unsubscribe_(t){const e=this._bindingsIndicesByPath,n=e[t];if(void 0!==n){const i=this._paths,r=this._parsedPaths,s=this._bindings,a=s.length-1,o=s[a];e[t[a]]=n,s[n]=o,s.pop(),r[n]=r[a],r.pop(),i[n]=i[a],i.pop()}}}class am{constructor(t,e,n=null,i=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=n,this.blendMode=i;const r=e.tracks,s=r.length,a=new Array(s),o={endingStart:De,endingEnd:De};for(let t=0;t!==s;++t){const e=r[t].createInterpolant(null);a[t]=e,e.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(s),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){const n=this._clip.duration,i=t._clip.duration,r=i/n,s=n/i;t.warp(1,r,e),this.warp(s,1,e)}return this}crossFadeTo(t,e,n){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const i=this._mixer,r=i.time,s=this.timeScale;let a=this._timeScaleInterpolant;null===a&&(a=i._lendControlInterpolant(),this._timeScaleInterpolant=a);const o=a.parameterPositions,l=a.sampleValues;return o[0]=r,o[1]=r+n,l[0]=t/s,l[1]=e/s,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,n,i){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const i=(t-r)*n;i<0||0===n?e=0:(this._startTime=null,e=n*i)}e*=this._updateTimeScale(t);const s=this._updateTime(e),a=this._updateWeight(t);if(a>0){const t=this._interpolants,e=this._propertyBindings;if(this.blendMode===ze)for(let n=0,i=t.length;n!==i;++n)t[n].evaluate(s),e[n].accumulateAdditive(a);else for(let n=0,r=t.length;n!==r;++n)t[n].evaluate(s),e[n].accumulate(i,a)}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const n=this._weightInterpolant;if(null!==n){const i=n.evaluate(t)[0];e*=i,t>n.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const n=this._timeScaleInterpolant;if(null!==n){e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,n=this.loop;let i=this.time+t,r=this._loopCount;const s=2202===n;if(0===t)return-1===r?i:s&&1==(1&r)?e-i:i;if(2200===n){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(i>=e)i=e;else{if(!(i<0)){this.time=i;break t}i=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,s)):this._setEndings(0===this.repetitions,!0,s)),i>=e||i<0){const n=Math.floor(i/e);i-=e*n,r+=Math.abs(n);const a=this.repetitions-r;if(a<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=t>0?e:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===a){const e=t<0;this._setEndings(e,!e,s)}else this._setEndings(!1,!1,s);this._loopCount=r,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:n})}}else this.time=i;if(s&&1==(1&r))return e-i}return i}_setEndings(t,e,n){const i=this._interpolantSettings;n?(i.endingStart=Oe,i.endingEnd=Oe):(i.endingStart=t?this.zeroSlopeAtStart?Oe:De:Fe,i.endingEnd=e?this.zeroSlopeAtEnd?Oe:De:Fe)}_scheduleFading(t,e,n){const i=this._mixer,r=i.time;let s=this._weightInterpolant;null===s&&(s=i._lendControlInterpolant(),this._weightInterpolant=s);const a=s.parameterPositions,o=s.sampleValues;return a[0]=r,o[0]=e,a[1]=r+t,o[1]=n,this}}const om=new Float32Array(1);class lm extends kn{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,i=t._clip.tracks,r=i.length,s=t._propertyBindings,a=t._interpolants,o=n.uuid,l=this._bindingsByRootAndName;let c=l[o];void 0===c&&(c={},l[o]=c);for(let t=0;t!==r;++t){const r=i[t],l=r.name;let h=c[l];if(void 0!==h)++h.referenceCount,s[t]=h;else{if(h=s[t],void 0!==h){null===h._cacheIndex&&(++h.referenceCount,this._addInactiveBinding(h,o,l));continue}const i=e&&e._propertyBindings[t].binding.parsedPath;h=new Kp(rm.create(n,l,i),r.ValueTypeName,r.getValueSize()),++h.referenceCount,this._addInactiveBinding(h,o,l),s[t]=h}a[t].resultBuffer=h.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,i=this._actionsByClip[n];this._bindAction(t,i&&i.knownActions[0]),this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==n.useCount++&&(this._lendBinding(n),n.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.useCount&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,n){const i=this._actions,r=this._actionsByClip;let s=r[e];if(void 0===s)s={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=s;else{const e=s.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=i.length,i.push(t),s.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],i=t._cacheIndex;n._cacheIndex=i,e[i]=n,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,s=this._actionsByClip,a=s[r],o=a.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c,o[c]=l,o.pop(),t._byClipCacheIndex=null;delete a.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete s[r],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.referenceCount&&this._removeInactiveBinding(n)}}_lendAction(t){const e=this._actions,n=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_addInactiveBinding(t,e,n){const i=this._bindingsByRootAndName,r=this._bindings;let s=i[e];void 0===s&&(s={},i[e]=s),s[n]=t,t._cacheIndex=r.length,r.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,i=n.rootNode.uuid,r=n.path,s=this._bindingsByRootAndName,a=s[i],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l,e[l]=o,e.pop(),delete a[r],0===Object.keys(a).length&&delete s[i]}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];return void 0===n&&(n=new Id(new Float32Array(2),new Float32Array(2),1,om),n.__cacheIndex=e,t[e]=n),n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i,e[i]=t,r.__cacheIndex=n,e[n]=r}clipAction(t,e,n){const i=e||this._root,r=i.uuid;let s="string"==typeof t?Vd.findByName(i,t):t;const a=null!==s?s.uuid:t,o=this._actionsByClip[a];let l=null;if(void 0===n&&(n=null!==s?s.blendMode:Be),void 0!==o){const t=o.actionByRoot[r];if(void 0!==t&&t.blendMode===n)return t;l=o.knownActions[0],null===s&&(s=l._clip)}if(null===s)return null;const c=new am(this,s,e,n);return this._bindAction(c,l),this._addInactiveAction(c,a,r),c}existingAction(t,e){const n=e||this._root,i=n.uuid,r="string"==typeof t?Vd.findByName(n,t):t,s=r?r.uuid:t,a=this._actionsByClip[s];return void 0!==a&&a.actionByRoot[i]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,n=this._nActiveActions,i=this.time+=t,r=Math.sign(t),s=this._accuIndex^=1;for(let a=0;a!==n;++a){e[a]._update(i,t,r,s)}const a=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t)a[t].apply(s);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,i=this._actionsByClip,r=i[n];if(void 0!==r){const t=r.knownActions;for(let n=0,i=t.length;n!==i;++n){const i=t[n];this._deactivateAction(i);const r=i._cacheIndex,s=e[e.length-1];i._cacheIndex=null,i._byClipCacheIndex=null,s._cacheIndex=r,e[r]=s,e.pop(),this._removeInactiveBindingsForAction(i)}delete i[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const i=n[t].actionByRoot[e];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}const i=this._bindingsByRootAndName[e];if(void 0!==i)for(const t in i){const e=i[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}class cm{constructor(t){this.value=t}clone(){return new cm(void 0===this.value.clone?this.value:this.value.clone())}}let hm=0;class um extends kn{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:hm++}),this.name="",this.usage=An,this.uniforms=[]}add(t){return this.uniforms.push(t),this}remove(t){const e=this.uniforms.indexOf(t);return-1!==e&&this.uniforms.splice(e,1),this}setName(t){return this.name=t,this}setUsage(t){return this.usage=t,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(t){this.name=t.name,this.usage=t.usage;const e=t.uniforms;this.uniforms.length=0;for(let t=0,n=e.length;t<n;t++){const n=Array.isArray(e[t])?e[t]:[e[t]];for(let t=0;t<n.length;t++)this.uniforms.push(n[t].clone())}return this}clone(){return(new this.constructor).copy(this)}}class dm extends ac{constructor(t,e,n=1){super(t,e),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}class pm{constructor(t,e,n,i,r){this.isGLBufferAttribute=!0,this.name="",this.buffer=t,this.type=e,this.itemSize=n,this.elementSize=i,this.count=r,this.version=0}set needsUpdate(t){!0===t&&this.version++}setBuffer(t){return this.buffer=t,this}setType(t,e){return this.type=t,this.elementSize=e,this}setItemSize(t){return this.itemSize=t,this}setCount(t){return this.count=t,this}}const mm=new ar;class fm{constructor(t,e,n=0,i=1/0){this.ray=new sr(t,e),this.near=n,this.far=i,this.camera=null,this.layers=new vr,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}setFromXRController(t){return mm.identity().extractRotation(t.matrixWorld),this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(mm),this}intersectObject(t,e=!0,n=[]){return vm(t,this,n,e),n.sort(gm),n}intersectObjects(t,e=!0,n=[]){for(let i=0,r=t.length;i<r;i++)vm(t[i],this,n,e);return n.sort(gm),n}}function gm(t,e){return t.distance-e.distance}function vm(t,e,n,i){let r=!0;if(t.layers.test(e.layers)){!1===t.raycast(e,n)&&(r=!1)}if(!0===r&&!0===i){const i=t.children;for(let t=0,r=i.length;t<r;t++)vm(i[t],e,n,!0)}}class _m{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(jn(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class xm{constructor(t=1,e=0,n=0){return this.radius=t,this.theta=e,this.y=n,this}set(t,e,n){return this.radius=t,this.theta=e,this.y=n,this}copy(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+n*n),this.theta=Math.atan2(t,n),this.y=e,this}clone(){return(new this.constructor).copy(this)}}const ym=new $n;class Mm{constructor(t=new $n(1/0,1/0),e=new $n(-1/0,-1/0)){this.isBox2=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=ym.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,ym).distanceTo(t)}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Sm=new Pi,bm=new Pi;class wm{constructor(t=new Pi,e=new Pi){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){Sm.subVectors(t,this.start),bm.subVectors(this.end,this.start);const n=bm.dot(bm);let i=bm.dot(Sm)/n;return e&&(i=jn(i,0,1)),i}closestPointToPoint(t,e,n){const i=this.closestPointToPointParameter(t,e);return this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}const Tm=new Pi;class Em extends Ur{constructor(t,e){super(),this.light=t,this.matrixAutoUpdate=!1,this.color=e,this.type="SpotLightHelper";const n=new ws,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let t=0,e=1,n=32;t<n;t++,e++){const r=t/n*Math.PI*2,s=e/n*Math.PI*2;i.push(Math.cos(r),Math.sin(r),1,Math.cos(s),Math.sin(s),1)}n.setAttribute("position",new gs(i,3));const r=new vh({fog:!1,toneMapped:!1});this.cone=new Ch(n,r),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),this.parent?(this.parent.updateWorldMatrix(!0),this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)):this.matrix.copy(this.light.matrixWorld),this.matrixWorld.copy(this.light.matrixWorld);const t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),Tm.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Tm),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const Am=new Pi,Rm=new ar,Cm=new ar;class Pm extends Ch{constructor(t){const e=Im(t),n=new ws,i=[],r=[],s=new Zr(0,0,1),a=new Zr(0,1,0);for(let t=0;t<e.length;t++){const n=e[t];n.parent&&n.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(s.r,s.g,s.b),r.push(a.r,a.g,a.b))}n.setAttribute("position",new gs(i,3)),n.setAttribute("color",new gs(r,3));super(n,new vh({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,n=this.geometry,i=n.getAttribute("position");Cm.copy(this.root.matrixWorld).invert();for(let t=0,n=0;t<e.length;t++){const r=e[t];r.parent&&r.parent.isBone&&(Rm.multiplyMatrices(Cm,r.matrixWorld),Am.setFromMatrixPosition(Rm),i.setXYZ(n,Am.x,Am.y,Am.z),Rm.multiplyMatrices(Cm,r.parent.matrixWorld),Am.setFromMatrixPosition(Rm),i.setXYZ(n+1,Am.x,Am.y,Am.z),n+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}dispose(){this.geometry.dispose(),this.material.dispose()}}function Im(t){const e=[];!0===t.isBone&&e.push(t);for(let n=0;n<t.children.length;n++)e.push.apply(e,Im(t.children[n]));return e}class Lm extends Hs{constructor(t,e,n){super(new sd(e,4,2),new Qr({wireframe:!0,fog:!1,toneMapped:!1})),this.light=t,this.color=n,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const Um=new Pi,Nm=new Zr,Dm=new Zr;class Om extends Ur{constructor(t,e,n){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="HemisphereLightHelper";const i=new nd(e);i.rotateY(.5*Math.PI),this.material=new Qr({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const r=i.getAttribute("position"),s=new Float32Array(3*r.count);i.setAttribute("color",new os(s,3)),this.add(new Hs(i,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const e=t.geometry.getAttribute("color");Nm.copy(this.light.color),Dm.copy(this.light.groundColor);for(let t=0,n=e.count;t<n;t++){const i=t<n/2?Nm:Dm;e.setXYZ(t,i.r,i.g,i.b)}e.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),t.lookAt(Um.setFromMatrixPosition(this.light.matrixWorld).negate())}}class Fm extends Ch{constructor(t=10,e=10,n=4473924,i=8947848){n=new Zr(n),i=new Zr(i);const r=e/2,s=t/e,a=t/2,o=[],l=[];for(let t=0,c=0,h=-a;t<=e;t++,h+=s){o.push(-a,0,h,a,0,h),o.push(h,0,-a,h,0,a);const e=t===r?n:i;e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3}const c=new ws;c.setAttribute("position",new gs(o,3)),c.setAttribute("color",new gs(l,3));super(c,new vh({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class Bm extends Ch{constructor(t=10,e=16,n=8,i=64,r=4473924,s=8947848){r=new Zr(r),s=new Zr(s);const a=[],o=[];if(e>1)for(let n=0;n<e;n++){const i=n/e*(2*Math.PI),l=Math.sin(i)*t,c=Math.cos(i)*t;a.push(0,0,0),a.push(l,0,c);const h=1&n?r:s;o.push(h.r,h.g,h.b),o.push(h.r,h.g,h.b)}for(let e=0;e<n;e++){const l=1&e?r:s,c=t-t/n*e;for(let t=0;t<i;t++){let e=t/i*(2*Math.PI),n=Math.sin(e)*c,r=Math.cos(e)*c;a.push(n,0,r),o.push(l.r,l.g,l.b),e=(t+1)/i*(2*Math.PI),n=Math.sin(e)*c,r=Math.cos(e)*c,a.push(n,0,r),o.push(l.r,l.g,l.b)}}const l=new ws;l.setAttribute("position",new gs(a,3)),l.setAttribute("color",new gs(o,3));super(l,new vh({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const zm=new Pi,km=new Pi,Vm=new Pi;class Hm extends Ur{constructor(t,e,n){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="DirectionalLightHelper",void 0===e&&(e=1);let i=new ws;i.setAttribute("position",new gs([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const r=new vh({fog:!1,toneMapped:!1});this.lightPlane=new Th(i,r),this.add(this.lightPlane),i=new ws,i.setAttribute("position",new gs([0,0,0,0,0,1],3)),this.targetLine=new Th(i,r),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),zm.setFromMatrixPosition(this.light.matrixWorld),km.setFromMatrixPosition(this.light.target.matrixWorld),Vm.subVectors(km,zm),this.lightPlane.lookAt(km),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(km),this.targetLine.scale.z=Vm.length()}}const Gm=new Pi,Wm=new Js;class Xm extends Ch{constructor(t){const e=new ws,n=new vh({color:16777215,vertexColors:!0,toneMapped:!1}),i=[],r=[],s={};function a(t,e){o(t),o(e)}function o(t){i.push(0,0,0),r.push(0,0,0),void 0===s[t]&&(s[t]=[]),s[t].push(i.length/3-1)}a("n1","n2"),a("n2","n4"),a("n4","n3"),a("n3","n1"),a("f1","f2"),a("f2","f4"),a("f4","f3"),a("f3","f1"),a("n1","f1"),a("n2","f2"),a("n3","f3"),a("n4","f4"),a("p","n1"),a("p","n2"),a("p","n3"),a("p","n4"),a("u1","u2"),a("u2","u3"),a("u3","u1"),a("c","t"),a("p","c"),a("cn1","cn2"),a("cn3","cn4"),a("cf1","cf2"),a("cf3","cf4"),e.setAttribute("position",new gs(i,3)),e.setAttribute("color",new gs(r,3)),super(e,n),this.type="CameraHelper",this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=s,this.update();const l=new Zr(16755200),c=new Zr(16711680),h=new Zr(43775),u=new Zr(16777215),d=new Zr(3355443);this.setColors(l,c,h,u,d)}setColors(t,e,n,i,r){const s=this.geometry.getAttribute("color");s.setXYZ(0,t.r,t.g,t.b),s.setXYZ(1,t.r,t.g,t.b),s.setXYZ(2,t.r,t.g,t.b),s.setXYZ(3,t.r,t.g,t.b),s.setXYZ(4,t.r,t.g,t.b),s.setXYZ(5,t.r,t.g,t.b),s.setXYZ(6,t.r,t.g,t.b),s.setXYZ(7,t.r,t.g,t.b),s.setXYZ(8,t.r,t.g,t.b),s.setXYZ(9,t.r,t.g,t.b),s.setXYZ(10,t.r,t.g,t.b),s.setXYZ(11,t.r,t.g,t.b),s.setXYZ(12,t.r,t.g,t.b),s.setXYZ(13,t.r,t.g,t.b),s.setXYZ(14,t.r,t.g,t.b),s.setXYZ(15,t.r,t.g,t.b),s.setXYZ(16,t.r,t.g,t.b),s.setXYZ(17,t.r,t.g,t.b),s.setXYZ(18,t.r,t.g,t.b),s.setXYZ(19,t.r,t.g,t.b),s.setXYZ(20,t.r,t.g,t.b),s.setXYZ(21,t.r,t.g,t.b),s.setXYZ(22,t.r,t.g,t.b),s.setXYZ(23,t.r,t.g,t.b),s.setXYZ(24,e.r,e.g,e.b),s.setXYZ(25,e.r,e.g,e.b),s.setXYZ(26,e.r,e.g,e.b),s.setXYZ(27,e.r,e.g,e.b),s.setXYZ(28,e.r,e.g,e.b),s.setXYZ(29,e.r,e.g,e.b),s.setXYZ(30,e.r,e.g,e.b),s.setXYZ(31,e.r,e.g,e.b),s.setXYZ(32,n.r,n.g,n.b),s.setXYZ(33,n.r,n.g,n.b),s.setXYZ(34,n.r,n.g,n.b),s.setXYZ(35,n.r,n.g,n.b),s.setXYZ(36,n.r,n.g,n.b),s.setXYZ(37,n.r,n.g,n.b),s.setXYZ(38,i.r,i.g,i.b),s.setXYZ(39,i.r,i.g,i.b),s.setXYZ(40,r.r,r.g,r.b),s.setXYZ(41,r.r,r.g,r.b),s.setXYZ(42,r.r,r.g,r.b),s.setXYZ(43,r.r,r.g,r.b),s.setXYZ(44,r.r,r.g,r.b),s.setXYZ(45,r.r,r.g,r.b),s.setXYZ(46,r.r,r.g,r.b),s.setXYZ(47,r.r,r.g,r.b),s.setXYZ(48,r.r,r.g,r.b),s.setXYZ(49,r.r,r.g,r.b),s.needsUpdate=!0}update(){const t=this.geometry,e=this.pointMap;Wm.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),jm("c",e,t,Wm,0,0,-1),jm("t",e,t,Wm,0,0,1),jm("n1",e,t,Wm,-1,-1,-1),jm("n2",e,t,Wm,1,-1,-1),jm("n3",e,t,Wm,-1,1,-1),jm("n4",e,t,Wm,1,1,-1),jm("f1",e,t,Wm,-1,-1,1),jm("f2",e,t,Wm,1,-1,1),jm("f3",e,t,Wm,-1,1,1),jm("f4",e,t,Wm,1,1,1),jm("u1",e,t,Wm,.7,1.1,-1),jm("u2",e,t,Wm,-.7,1.1,-1),jm("u3",e,t,Wm,0,2,-1),jm("cf1",e,t,Wm,-1,0,1),jm("cf2",e,t,Wm,1,0,1),jm("cf3",e,t,Wm,0,-1,1),jm("cf4",e,t,Wm,0,1,1),jm("cn1",e,t,Wm,-1,0,-1),jm("cn2",e,t,Wm,1,0,-1),jm("cn3",e,t,Wm,0,-1,-1),jm("cn4",e,t,Wm,0,1,-1),t.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function jm(t,e,n,i,r,s,a){Gm.set(r,s,a).unproject(i);const o=e[t];if(void 0!==o){const t=n.getAttribute("position");for(let e=0,n=o.length;e<n;e++)t.setXYZ(o[e],Gm.x,Gm.y,Gm.z)}}const qm=new Ui;class Ym extends Ch{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(24),r=new ws;r.setIndex(new os(n,1)),r.setAttribute("position",new os(i,3)),super(r,new vh({color:e,toneMapped:!1})),this.object=t,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&qm.setFromObject(this.object),qm.isEmpty())return;const e=qm.min,n=qm.max,i=this.geometry.attributes.position,r=i.array;r[0]=n.x,r[1]=n.y,r[2]=n.z,r[3]=e.x,r[4]=n.y,r[5]=n.z,r[6]=e.x,r[7]=e.y,r[8]=n.z,r[9]=n.x,r[10]=e.y,r[11]=n.z,r[12]=n.x,r[13]=n.y,r[14]=e.z,r[15]=e.x,r[16]=n.y,r[17]=e.z,r[18]=e.x,r[19]=e.y,r[20]=e.z,r[21]=n.x,r[22]=e.y,r[23]=e.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(t){return this.object=t,this.update(),this}copy(t,e){return super.copy(t,e),this.object=t.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class Zm extends Ch{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new ws;i.setIndex(new os(n,1)),i.setAttribute("position",new gs([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(i,new vh({color:e,toneMapped:!1})),this.box=t,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(t))}dispose(){this.geometry.dispose(),this.material.dispose()}}class Jm extends Th{constructor(t,e=1,n=16776960){const i=n,r=new ws;r.setAttribute("position",new gs([1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),r.computeBoundingSphere(),super(r,new vh({color:i,toneMapped:!1})),this.type="PlaneHelper",this.plane=t,this.size=e;const s=new ws;s.setAttribute("position",new gs([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),s.computeBoundingSphere(),this.add(new Hs(s,new Qr({color:i,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(t){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(t)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const Km=new Pi;let $m,Qm;class tf extends Ur{constructor(t=new Pi(0,0,1),e=new Pi(0,0,0),n=1,i=16776960,r=.2*n,s=.2*r){super(),this.type="ArrowHelper",void 0===$m&&($m=new ws,$m.setAttribute("position",new gs([0,0,0,0,1,0],3)),Qm=new fu(0,.5,1,5,1),Qm.translate(0,-.5,0)),this.position.copy(e),this.line=new Th($m,new vh({color:i,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Hs(Qm,new Qr({color:i,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(n,r,s)}setDirection(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{Km.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(Km,e)}}setLength(t,e=.2*t,n=.2*e){this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(n,e,n),this.cone.position.y=t,this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t),this.cone.material.color.set(t)}copy(t){return super.copy(t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class ef extends Ch{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=new ws;n.setAttribute("position",new gs(e,3)),n.setAttribute("color",new gs([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));super(n,new vh({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}setColors(t,e,n){const i=new Zr,r=this.geometry.attributes.color.array;return i.set(t),i.toArray(r,0),i.toArray(r,3),i.set(e),i.toArray(r,6),i.toArray(r,9),i.set(n),i.toArray(r,12),i.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class nf{constructor(){this.type="ShapePath",this.color=new Zr,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new uu,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,n,i){return this.currentPath.quadraticCurveTo(t,e,n,i),this}bezierCurveTo(t,e,n,i,r,s){return this.currentPath.bezierCurveTo(t,e,n,i,r,s),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t){function e(t,e){const n=e.length;let i=!1;for(let r=n-1,s=0;s<n;r=s++){let n=e[r],a=e[s],o=a.x-n.x,l=a.y-n.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(n=e[s],o=-o,a=e[r],l=-l),t.y<n.y||t.y>a.y)continue;if(t.y===n.y){if(t.x===n.x)return!0}else{const e=l*(t.x-n.x)-o*(t.y-n.y);if(0===e)return!0;if(e<0)continue;i=!i}}else{if(t.y!==n.y)continue;if(a.x<=t.x&&t.x<=n.x||n.x<=t.x&&t.x<=a.x)return!0}}return i}const n=Ju.isClockWise,i=this.subPaths;if(0===i.length)return[];let r,s,a;const o=[];if(1===i.length)return s=i[0],a=new wu,a.curves=s.curves,o.push(a),o;let l=!n(i[0].getPoints());l=t?!l:l;const c=[],h=[];let u,d,p=[],m=0;h[m]=void 0,p[m]=[];for(let e=0,a=i.length;e<a;e++)s=i[e],u=s.getPoints(),r=n(u),r=t?!r:r,r?(!l&&h[m]&&m++,h[m]={s:new wu,p:u},h[m].s.curves=s.curves,l&&m++,p[m]=[]):p[m].push({h:s,p:u[0]});if(!h[0])return function(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n],r=new wu;r.curves=i.curves,e.push(r)}return e}(i);if(h.length>1){let t=!1,n=0;for(let t=0,e=h.length;t<e;t++)c[t]=[];for(let i=0,r=h.length;i<r;i++){const r=p[i];for(let s=0;s<r.length;s++){const a=r[s];let o=!0;for(let r=0;r<h.length;r++)e(a.p,h[r].p)&&(i!==r&&n++,o?(o=!1,c[r].push(a)):t=!0);o&&c[i].push(a)}}n>0&&!1===t&&(p=c)}for(let t=0,e=h.length;t<e;t++){a=h[t].s,o.push(a),d=p[t];for(let t=0,e=d.length;t<e;t++)a.holes.push(d[t].h)}return o}}class rf extends wi{constructor(t=1,e=1,n=1,i={}){console.warn('THREE.WebGLMultipleRenderTargets has been deprecated and will be removed in r172. Use THREE.WebGLRenderTarget and set the "count" parameter to enable MRT.'),super(t,e,{...i,count:n}),this.isWebGLMultipleRenderTargets=!0}get texture(){return this.textures}}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:t}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=t);export{et as ACESFilmicToneMapping,y as AddEquation,J as AddOperation,ze as AdditiveAnimationBlendMode,g as AdditiveBlending,it as AgXToneMapping,Bt as AlphaFormat,En as AlwaysCompare,V as AlwaysDepth,_n as AlwaysStencilFunc,vp as AmbientLight,am as AnimationAction,Vd as AnimationClip,Jd as AnimationLoader,lm as AnimationMixer,sm as AnimationObjectGroup,Rd as AnimationUtils,jh as ArcCurve,jl as ArrayCamera,tf as ArrowHelper,st as AttachedBindMode,Wp as Audio,Jp as AudioAnalyser,Ip as AudioContext,Gp as AudioListener,Lp as AudioLoader,ef as AxesHelper,d as BackSide,Ge as BasicDepthPacking,o as BasicShadowMap,gh as BatchedMesh,Bc as Bone,Nd as BooleanKeyframeTrack,Mm as Box2,Ui as Box3,Zm as Box3Helper,Ws as BoxGeometry,Ym as BoxHelper,os as BufferAttribute,ws as BufferGeometry,wp as BufferGeometryLoader,At as ByteType,Gd as Cache,Js as Camera,Xm as CameraHelper,Gh as CanvasTexture,pu as CapsuleGeometry,$h as CatmullRomCurve3,tt as CineonToneMapping,mu as CircleGeometry,mt as ClampToEdgeWrapping,Fp as Clock,Zr as Color,Dd as ColorKeyframeTrack,di as ColorManagement,Vh as CompressedArrayTexture,Hh as CompressedCubeTexture,kh as CompressedTexture,Kd as CompressedTextureLoader,gu as ConeGeometry,B as ConstantAlphaFactor,O as ConstantColorFactor,na as CubeCamera,lt as CubeReflectionMapping,ct as CubeRefractionMapping,ia as CubeTexture,Qd as CubeTextureLoader,dt as CubeUVReflectionMapping,nu as CubicBezierCurve,iu as CubicBezierCurve3,Pd as CubicInterpolant,r as CullFaceBack,s as CullFaceFront,a as CullFaceFrontBack,i as CullFaceNone,Wh as Curve,hu as CurvePath,x as CustomBlending,nt as CustomToneMapping,fu as CylinderGeometry,xm as Cylindrical,Ai as Data3DTexture,Ti as DataArrayTexture,zc as DataTexture,tp as DataTextureLoader,rs as DataUtils,on as DecrementStencilOp,cn as DecrementWrapStencilOp,Xd as DefaultLoadingManager,Gt as DepthFormat,Wt as DepthStencilFormat,$a as DepthTexture,at as DetachedBindMode,gp as DirectionalLight,Hm as DirectionalLightHelper,Ld as DiscreteInterpolant,Je as DisplayP3ColorSpace,_u as DodecahedronGeometry,p as DoubleSide,I as DstAlphaFactor,U as DstColorFactor,Nn as DynamicCopyUsage,Rn as DynamicDrawUsage,In as DynamicReadUsage,bu as EdgesGeometry,Xh as EllipseCurve,Mn as EqualCompare,W as EqualDepth,pn as EqualStencilFunc,ht as EquirectangularReflectionMapping,ut as EquirectangularRefractionMapping,gr as Euler,kn as EventDispatcher,Qu as ExtrudeGeometry,Zd as FileLoader,fs as Float16BufferAttribute,gs as Float32BufferAttribute,Lt as FloatType,rc as Fog,ic as FogExp2,zh as FramebufferTexture,u as FrontSide,ua as Frustum,pm as GLBufferAttribute,On as GLSL1,Fn as GLSL3,bn as GreaterCompare,j as GreaterDepth,Tn as GreaterEqualCompare,X as GreaterEqualDepth,vn as GreaterEqualStencilFunc,fn as GreaterStencilFunc,Fm as GridHelper,ql as Group,Ut as HalfFloatType,ip as HemisphereLight,Om as HemisphereLightHelper,ed as IcosahedronGeometry,Cp as ImageBitmapLoader,$d as ImageLoader,gi as ImageUtils,an as IncrementStencilOp,ln as IncrementWrapStencilOp,Gc as InstancedBufferAttribute,bp as InstancedBufferGeometry,dm as InstancedInterleavedBuffer,Kc as InstancedMesh,us as Int16BufferAttribute,ps as Int32BufferAttribute,ls as Int8BufferAttribute,Pt as IntType,ac as InterleavedBuffer,lc as InterleavedBufferAttribute,Cd as Interpolant,Le as InterpolateDiscrete,Ue as InterpolateLinear,Ne as InterpolateSmooth,hn as InvertStencilOp,rn as KeepStencilOp,Ud as KeyframeTrack,Ac as LOD,du as LatheGeometry,vr as Layers,yn as LessCompare,H as LessDepth,Sn as LessEqualCompare,G as LessEqualDepth,mn as LessEqualStencilFunc,dn as LessStencilFunc,np as Light,yp as LightProbe,Th as Line,wm as Line3,vh as LineBasicMaterial,ru as LineCurve,su as LineCurve3,Sd as LineDashedMaterial,Ph as LineLoop,Ch as LineSegments,Ke as LinearDisplayP3ColorSpace,Mt as LinearFilter,Id as LinearInterpolant,Tt as LinearMipMapLinearFilter,bt as LinearMipMapNearestFilter,wt as LinearMipmapLinearFilter,St as LinearMipmapNearestFilter,Ze as LinearSRGBColorSpace,$ as LinearToneMapping,$e as LinearTransfer,jd as Loader,Sp as LoaderUtils,Wd as LoadingManager,Ce as LoopOnce,Ie as LoopPingPong,Pe as LoopRepeat,Ht as LuminanceAlphaFormat,Vt as LuminanceFormat,e as MOUSE,$r as Material,Mp as MaterialLoader,Kn as MathUtils,Qn as Matrix3,ar as Matrix4,w as MaxEquation,Hs as Mesh,Qr as MeshBasicMaterial,Bl as MeshDepthMaterial,zl as MeshDistanceMaterial,yd as MeshLambertMaterial,Md as MeshMatcapMaterial,xd as MeshNormalMaterial,vd as MeshPhongMaterial,gd as MeshPhysicalMaterial,fd as MeshStandardMaterial,_d as MeshToonMaterial,b as MinEquation,ft as MirroredRepeatWrapping,Z as MixOperation,_ as MultiplyBlending,Y as MultiplyOperation,gt as NearestFilter,yt as NearestMipMapLinearFilter,_t as NearestMipMapNearestFilter,xt as NearestMipmapLinearFilter,vt as NearestMipmapNearestFilter,rt as NeutralToneMapping,xn as NeverCompare,k as NeverDepth,un as NeverStencilFunc,m as NoBlending,qe as NoColorSpace,K as NoToneMapping,Be as NormalAnimationBlendMode,f as NormalBlending,wn as NotEqualCompare,q as NotEqualDepth,gn as NotEqualStencilFunc,Od as NumberKeyframeTrack,Ur as Object3D,Tp as ObjectLoader,je as ObjectSpaceNormalMap,nd as OctahedronGeometry,E as OneFactor,z as OneMinusConstantAlphaFactor,F as OneMinusConstantColorFactor,L as OneMinusDstAlphaFactor,N as OneMinusDstColorFactor,P as OneMinusSrcAlphaFactor,R as OneMinusSrcColorFactor,Aa as OrthographicCamera,en as P3Primaries,l as PCFShadowMap,c as PCFSoftShadowMap,za as PMREMGenerator,uu as Path,ta as PerspectiveCamera,la as Plane,ma as PlaneGeometry,Jm as PlaneHelper,mp as PointLight,Lm as PointLightHelper,Oh as Points,Ih as PointsMaterial,Bm as PolarGridHelper,vu as PolyhedronGeometry,Zp as PositionalAudio,rm as PropertyBinding,Kp as PropertyMixer,au as QuadraticBezierCurve,ou as QuadraticBezierCurve3,Ci as Quaternion,Bd as QuaternionKeyframeTrack,Fd as QuaternionLinearInterpolant,Ae as RED_GREEN_RGTC2_Format,Te as RED_RGTC1_Format,t as REVISION,We as RGBADepthPacking,kt as RGBAFormat,Jt as RGBAIntegerFormat,xe as RGBA_ASTC_10x10_Format,ge as RGBA_ASTC_10x5_Format,ve as RGBA_ASTC_10x6_Format,_e as RGBA_ASTC_10x8_Format,ye as RGBA_ASTC_12x10_Format,Me as RGBA_ASTC_12x12_Format,le as RGBA_ASTC_4x4_Format,ce as RGBA_ASTC_5x4_Format,he as RGBA_ASTC_5x5_Format,ue as RGBA_ASTC_6x5_Format,de as RGBA_ASTC_6x6_Format,pe as RGBA_ASTC_8x5_Format,me as RGBA_ASTC_8x6_Format,fe as RGBA_ASTC_8x8_Format,Se as RGBA_BPTC_Format,oe as RGBA_ETC2_EAC_Format,re as RGBA_PVRTC_2BPPV1_Format,ie as RGBA_PVRTC_4BPPV1_Format,$t as RGBA_S3TC_DXT1_Format,Qt as RGBA_S3TC_DXT3_Format,te as RGBA_S3TC_DXT5_Format,zt as RGBFormat,Zt as RGBIntegerFormat,be as RGB_BPTC_SIGNED_Format,we as RGB_BPTC_UNSIGNED_Format,se as RGB_ETC1_Format,ae as RGB_ETC2_Format,ne as RGB_PVRTC_2BPPV1_Format,ee as RGB_PVRTC_4BPPV1_Format,Kt as RGB_S3TC_DXT1_Format,qt as RGFormat,Yt as RGIntegerFormat,md as RawShaderMaterial,sr as Ray,fm as Raycaster,tn as Rec709Primaries,_p as RectAreaLight,Xt as RedFormat,jt as RedIntegerFormat,Q as ReinhardToneMapping,bi as RenderTarget,pt as RepeatWrapping,sn as ReplaceStencilOp,S as ReverseSubtractEquation,id as RingGeometry,Re as SIGNED_RED_GREEN_RGTC2_Format,Ee as SIGNED_RED_RGTC1_Format,Ye as SRGBColorSpace,Qe as SRGBTransfer,sc as Scene,fa as ShaderChunk,va as ShaderLib,Zs as ShaderMaterial,pd as ShadowMaterial,wu as Shape,rd as ShapeGeometry,nf as ShapePath,Ju as ShapeUtils,Rt as ShortType,Hc as Skeleton,Pm as SkeletonHelper,Fc as SkinnedMesh,_i as Source,Ki as Sphere,sd as SphereGeometry,_m as Spherical,xp as SphericalHarmonics3,lu as SplineCurve,cp as SpotLight,Em as SpotLightHelper,bc as Sprite,cc as SpriteMaterial,C as SrcAlphaFactor,D as SrcAlphaSaturateFactor,A as SrcColorFactor,Un as StaticCopyUsage,An as StaticDrawUsage,Pn as StaticReadUsage,Op as StereoCamera,Dn as StreamCopyUsage,Cn as StreamDrawUsage,Ln as StreamReadUsage,zd as StringKeyframeTrack,M as SubtractEquation,v as SubtractiveBlending,n as TOUCH,Xe as TangentSpaceNormalMap,ad as TetrahedronGeometry,Mi as Texture,ep as TextureLoader,Gl as TextureUtils,od as TorusGeometry,ld as TorusKnotGeometry,Wr as Triangle,He as TriangleFanDrawMode,Ve as TriangleStripDrawMode,ke as TrianglesDrawMode,cd as TubeGeometry,ot as UVMapping,ds as Uint16BufferAttribute,ms as Uint32BufferAttribute,cs as Uint8BufferAttribute,hs as Uint8ClampedBufferAttribute,cm as Uniform,um as UniformsGroup,ga as UniformsLib,Ys as UniformsUtils,Et as UnsignedByteType,Ot as UnsignedInt248Type,Ft as UnsignedInt5999Type,It as UnsignedIntType,Nt as UnsignedShort4444Type,Dt as UnsignedShort5551Type,Ct as UnsignedShortType,h as VSMShadowMap,$n as Vector2,Pi as Vector3,Si as Vector4,kd as VectorKeyframeTrack,Bh as VideoTexture,Ri as WebGL3DRenderTarget,Ei as WebGLArrayRenderTarget,Bn as WebGLCoordinateSystem,ra as WebGLCubeRenderTarget,rf as WebGLMultipleRenderTargets,wi as WebGLRenderTarget,nc as WebGLRenderer,Xl as WebGLUtils,zn as WebGPUCoordinateSystem,hd as WireframeGeometry,Fe as WrapAroundEnding,De as ZeroCurvatureEnding,T as ZeroFactor,Oe as ZeroSlopeEnding,nn as ZeroStencilOp,si as createCanvasElement};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWUubW9kdWxlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy5qcyIsIi4uL3NyYy9jb3JlL0V2ZW50RGlzcGF0Y2hlci5qcyIsIi4uL3NyYy9tYXRoL01hdGhVdGlscy5qcyIsIi4uL3NyYy9tYXRoL1ZlY3RvcjIuanMiLCIuLi9zcmMvbWF0aC9NYXRyaXgzLmpzIiwiLi4vc3JjL3V0aWxzLmpzIiwiLi4vc3JjL21hdGgvQ29sb3JNYW5hZ2VtZW50LmpzIiwiLi4vc3JjL2V4dHJhcy9JbWFnZVV0aWxzLmpzIiwiLi4vc3JjL3RleHR1cmVzL1NvdXJjZS5qcyIsIi4uL3NyYy90ZXh0dXJlcy9UZXh0dXJlLmpzIiwiLi4vc3JjL21hdGgvVmVjdG9yNC5qcyIsIi4uL3NyYy9jb3JlL1JlbmRlclRhcmdldC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvV2ViR0xSZW5kZXJUYXJnZXQuanMiLCIuLi9zcmMvdGV4dHVyZXMvRGF0YUFycmF5VGV4dHVyZS5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvV2ViR0xBcnJheVJlbmRlclRhcmdldC5qcyIsIi4uL3NyYy90ZXh0dXJlcy9EYXRhM0RUZXh0dXJlLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9XZWJHTDNEUmVuZGVyVGFyZ2V0LmpzIiwiLi4vc3JjL21hdGgvUXVhdGVybmlvbi5qcyIsIi4uL3NyYy9tYXRoL1ZlY3RvcjMuanMiLCIuLi9zcmMvbWF0aC9Cb3gzLmpzIiwiLi4vc3JjL21hdGgvU3BoZXJlLmpzIiwiLi4vc3JjL21hdGgvUmF5LmpzIiwiLi4vc3JjL21hdGgvTWF0cml4NC5qcyIsIi4uL3NyYy9tYXRoL0V1bGVyLmpzIiwiLi4vc3JjL2NvcmUvTGF5ZXJzLmpzIiwiLi4vc3JjL2NvcmUvT2JqZWN0M0QuanMiLCIuLi9zcmMvbWF0aC9UcmlhbmdsZS5qcyIsIi4uL3NyYy9tYXRoL0NvbG9yLmpzIiwiLi4vc3JjL21hdGVyaWFscy9NYXRlcmlhbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvTWVzaEJhc2ljTWF0ZXJpYWwuanMiLCIuLi9zcmMvZXh0cmFzL0RhdGFVdGlscy5qcyIsIi4uL3NyYy9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyIsIi4uL3NyYy9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzIiwiLi4vc3JjL29iamVjdHMvTWVzaC5qcyIsIi4uL3NyYy9nZW9tZXRyaWVzL0JveEdlb21ldHJ5LmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1VuaWZvcm1zVXRpbHMuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL1NoYWRlck1hdGVyaWFsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2RlZmF1bHRfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvZGVmYXVsdF9mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL2NhbWVyYXMvQ2FtZXJhLmpzIiwiLi4vc3JjL2NhbWVyYXMvUGVyc3BlY3RpdmVDYW1lcmEuanMiLCIuLi9zcmMvY2FtZXJhcy9DdWJlQ2FtZXJhLmpzIiwiLi4vc3JjL3RleHR1cmVzL0N1YmVUZXh0dXJlLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9XZWJHTEN1YmVSZW5kZXJUYXJnZXQuanMiLCIuLi9zcmMvbWF0aC9QbGFuZS5qcyIsIi4uL3NyYy9tYXRoL0ZydXN0dW0uanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMQW5pbWF0aW9uLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTEF0dHJpYnV0ZXMuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9QbGFuZUdlb21ldHJ5LmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckxpYi9iYWNrZ3JvdW5kLmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvYWxwaGFoYXNoX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvYWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9hbHBoYW1hcF9mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2FscGhhbWFwX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9hbHBoYXRlc3RfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9hbHBoYXRlc3RfcGFyc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2FvbWFwX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvYW9tYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2JhdGNoaW5nX3BhcnNfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvYmF0Y2hpbmdfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvYmVnaW5fdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvYmVnaW5ub3JtYWxfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvYnNkZnMuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9pcmlkZXNjZW5jZV9mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2J1bXBtYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2NsaXBwaW5nX3BsYW5lc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2NsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvY2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvY2xpcHBpbmdfcGxhbmVzX3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2NvbG9yX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvY29sb3JfcGFyc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2NvbG9yX3BhcnNfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvY29sb3JfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvY29tbW9uLmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvZGVmYXVsdG5vcm1hbF92ZXJ0ZXguZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9kaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXguZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9kaXNwbGFjZW1lbnRtYXBfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvZW1pc3NpdmVtYXBfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9lbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvY29sb3JzcGFjZV9mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2NvbG9yc3BhY2VfcGFyc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2Vudm1hcF9mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2Vudm1hcF9jb21tb25fcGFyc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2Vudm1hcF9wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvZW52bWFwX3BhcnNfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9lbnZtYXBfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvZm9nX3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2ZvZ19wYXJzX3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2ZvZ19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2ZvZ19wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvZ3JhZGllbnRtYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2xpZ2h0bWFwX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9saWdodHNfbGFtYmVydF9mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2xpZ2h0c19sYW1iZXJ0X3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9saWdodHNfcGFyc19iZWdpbi5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2xpZ2h0c190b29uX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvbGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2xpZ2h0c19waG9uZ19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2xpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9saWdodHNfZnJhZ21lbnRfYmVnaW4uZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9saWdodHNfZnJhZ21lbnRfbWFwcy5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2xpZ2h0c19mcmFnbWVudF9lbmQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9sb2dkZXB0aGJ1Zl9mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2xvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2xvZ2RlcHRoYnVmX3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL21hcF9mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL21hcF9wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvbWFwX3BhcnRpY2xlX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvbWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9tZXRhbG5lc3NtYXBfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9tZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL21vcnBoaW5zdGFuY2VfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvbW9ycGhjb2xvcl92ZXJ0ZXguZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9tb3JwaG5vcm1hbF92ZXJ0ZXguZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9tb3JwaHRhcmdldF9wYXJzX3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL21vcnBodGFyZ2V0X3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL25vcm1hbF9mcmFnbWVudF9iZWdpbi5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL25vcm1hbF9mcmFnbWVudF9tYXBzLmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvbm9ybWFsX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9ub3JtYWxfcGFyc192ZXJ0ZXguZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9ub3JtYWxfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9jbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luLmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzLmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9pcmlkZXNjZW5jZV9wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvb3BhcXVlX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvcGFja2luZy5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL3ByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9wcm9qZWN0X3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2RpdGhlcmluZ19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2RpdGhlcmluZ19wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvcm91Z2huZXNzbWFwX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9zaGFkb3dtYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL3NoYWRvd21hcF9wYXJzX3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL3NoYWRvd21hcF92ZXJ0ZXguZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9zaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9za2luYmFzZV92ZXJ0ZXguZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9za2lubmluZ19wYXJzX3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL3NraW5uaW5nX3ZlcnRleC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL3NraW5ub3JtYWxfdmVydGV4Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvc3BlY3VsYXJtYXBfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay9zcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvdG9uZW1hcHBpbmdfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay90b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvdHJhbnNtaXNzaW9uX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvdHJhbnNtaXNzaW9uX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay91dl9wYXJzX2ZyYWdtZW50Lmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvdXZfcGFyc192ZXJ0ZXguZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay91dl92ZXJ0ZXguZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay93b3JsZHBvc192ZXJ0ZXguZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIvYmFja2dyb3VuZEN1YmUuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIvY3ViZS5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckxpYi9kZXB0aC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckxpYi9kaXN0YW5jZVJHQkEuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIvZXF1aXJlY3QuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIvbGluZWRhc2hlZC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckxpYi9tZXNoYmFzaWMuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIvbWVzaGxhbWJlcnQuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIvbWVzaG1hdGNhcC5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckxpYi9tZXNobm9ybWFsLmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyTGliL21lc2hwaG9uZy5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckxpYi9tZXNocGh5c2ljYWwuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIvbWVzaHRvb24uZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIvcG9pbnRzLmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyTGliL3NoYWRvdy5nbHNsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckxpYi9zcHJpdGUuZ2xzbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9Vbmlmb3Jtc0xpYi5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMQmFja2dyb3VuZC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wvV2ViR0xCaW5kaW5nU3RhdGVzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTEJ1ZmZlclJlbmRlcmVyLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTENhcGFiaWxpdGllcy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wvV2ViR0xDbGlwcGluZy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wvV2ViR0xDdWJlTWFwcy5qcyIsIi4uL3NyYy9jYW1lcmFzL09ydGhvZ3JhcGhpY0NhbWVyYS5qcyIsIi4uL3NyYy9leHRyYXMvUE1SRU1HZW5lcmF0b3IuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMQ3ViZVVWTWFwcy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wvV2ViR0xFeHRlbnNpb25zLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTEdlb21ldHJpZXMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTEluZm8uanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMTW9ycGh0YXJnZXRzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTE9iamVjdHMuanMiLCIuLi9zcmMvdGV4dHVyZXMvRGVwdGhUZXh0dXJlLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTFVuaWZvcm1zLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTFNoYWRlci5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wvV2ViR0xQcm9ncmFtLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTFNoYWRlckNhY2hlLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTFByb2dyYW1zLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTFByb3BlcnRpZXMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMUmVuZGVyTGlzdHMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMTGlnaHRzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTFJlbmRlclN0YXRlcy5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvTWVzaERlcHRoTWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL01lc2hEaXN0YW5jZU1hdGVyaWFsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTFNoYWRvd01hcC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIvdnNtLmdsc2wuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMU3RhdGUuanMiLCIuLi9zcmMvZXh0cmFzL1RleHR1cmVVdGlscy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wvV2ViR0xUZXh0dXJlcy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wvV2ViR0xVdGlscy5qcyIsIi4uL3NyYy9jYW1lcmFzL0FycmF5Q2FtZXJhLmpzIiwiLi4vc3JjL29iamVjdHMvR3JvdXAuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYnhyL1dlYlhSQ29udHJvbGxlci5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2VieHIvV2ViWFJEZXB0aFNlbnNpbmcuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYnhyL1dlYlhSTWFuYWdlci5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wvV2ViR0xNYXRlcmlhbHMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMVW5pZm9ybXNHcm91cHMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL1dlYkdMUmVuZGVyZXIuanMiLCIuLi9zcmMvc2NlbmVzL0ZvZ0V4cDIuanMiLCIuLi9zcmMvc2NlbmVzL0ZvZy5qcyIsIi4uL3NyYy9zY2VuZXMvU2NlbmUuanMiLCIuLi9zcmMvY29yZS9JbnRlcmxlYXZlZEJ1ZmZlci5qcyIsIi4uL3NyYy9jb3JlL0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLmpzIiwiLi4vc3JjL21hdGVyaWFscy9TcHJpdGVNYXRlcmlhbC5qcyIsIi4uL3NyYy9vYmplY3RzL1Nwcml0ZS5qcyIsIi4uL3NyYy9vYmplY3RzL0xPRC5qcyIsIi4uL3NyYy9vYmplY3RzL1NraW5uZWRNZXNoLmpzIiwiLi4vc3JjL29iamVjdHMvQm9uZS5qcyIsIi4uL3NyYy90ZXh0dXJlcy9EYXRhVGV4dHVyZS5qcyIsIi4uL3NyYy9vYmplY3RzL1NrZWxldG9uLmpzIiwiLi4vc3JjL2NvcmUvSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLmpzIiwiLi4vc3JjL29iamVjdHMvSW5zdGFuY2VkTWVzaC5qcyIsIi4uL3NyYy9vYmplY3RzL0JhdGNoZWRNZXNoLmpzIiwiLi4vc3JjL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyIsIi4uL3NyYy9vYmplY3RzL0xpbmUuanMiLCIuLi9zcmMvb2JqZWN0cy9MaW5lU2VnbWVudHMuanMiLCIuLi9zcmMvb2JqZWN0cy9MaW5lTG9vcC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvUG9pbnRzTWF0ZXJpYWwuanMiLCIuLi9zcmMvb2JqZWN0cy9Qb2ludHMuanMiLCIuLi9zcmMvdGV4dHVyZXMvVmlkZW9UZXh0dXJlLmpzIiwiLi4vc3JjL3RleHR1cmVzL0ZyYW1lYnVmZmVyVGV4dHVyZS5qcyIsIi4uL3NyYy90ZXh0dXJlcy9Db21wcmVzc2VkVGV4dHVyZS5qcyIsIi4uL3NyYy90ZXh0dXJlcy9Db21wcmVzc2VkQXJyYXlUZXh0dXJlLmpzIiwiLi4vc3JjL3RleHR1cmVzL0NvbXByZXNzZWRDdWJlVGV4dHVyZS5qcyIsIi4uL3NyYy90ZXh0dXJlcy9DYW52YXNUZXh0dXJlLmpzIiwiLi4vc3JjL2V4dHJhcy9jb3JlL0N1cnZlLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvRWxsaXBzZUN1cnZlLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvQXJjQ3VydmUuanMiLCIuLi9zcmMvZXh0cmFzL2N1cnZlcy9DYXRtdWxsUm9tQ3VydmUzLmpzIiwiLi4vc3JjL2V4dHJhcy9jb3JlL0ludGVycG9sYXRpb25zLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvQ3ViaWNCZXppZXJDdXJ2ZS5qcyIsIi4uL3NyYy9leHRyYXMvY3VydmVzL0N1YmljQmV6aWVyQ3VydmUzLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvTGluZUN1cnZlLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvTGluZUN1cnZlMy5qcyIsIi4uL3NyYy9leHRyYXMvY3VydmVzL1F1YWRyYXRpY0JlemllckN1cnZlLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvUXVhZHJhdGljQmV6aWVyQ3VydmUzLmpzIiwiLi4vc3JjL2V4dHJhcy9jdXJ2ZXMvU3BsaW5lQ3VydmUuanMiLCIuLi9zcmMvZXh0cmFzL2NvcmUvQ3VydmVQYXRoLmpzIiwiLi4vc3JjL2V4dHJhcy9jb3JlL1BhdGguanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9MYXRoZUdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvQ2Fwc3VsZUdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvQ2lyY2xlR2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9DeWxpbmRlckdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvQ29uZUdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvUG9seWhlZHJvbkdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvRG9kZWNhaGVkcm9uR2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9FZGdlc0dlb21ldHJ5LmpzIiwiLi4vc3JjL2V4dHJhcy9jb3JlL1NoYXBlLmpzIiwiLi4vc3JjL2V4dHJhcy9FYXJjdXQuanMiLCIuLi9zcmMvZXh0cmFzL1NoYXBlVXRpbHMuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9FeHRydWRlR2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9JY29zYWhlZHJvbkdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvT2N0YWhlZHJvbkdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvUmluZ0dlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvU2hhcGVHZW9tZXRyeS5qcyIsIi4uL3NyYy9nZW9tZXRyaWVzL1NwaGVyZUdlb21ldHJ5LmpzIiwiLi4vc3JjL2dlb21ldHJpZXMvVGV0cmFoZWRyb25HZW9tZXRyeS5qcyIsIi4uL3NyYy9nZW9tZXRyaWVzL1RvcnVzR2VvbWV0cnkuanMiLCIuLi9zcmMvZ2VvbWV0cmllcy9Ub3J1c0tub3RHZW9tZXRyeS5qcyIsIi4uL3NyYy9nZW9tZXRyaWVzL1R1YmVHZW9tZXRyeS5qcyIsIi4uL3NyYy9nZW9tZXRyaWVzL1dpcmVmcmFtZUdlb21ldHJ5LmpzIiwiLi4vc3JjL21hdGVyaWFscy9TaGFkb3dNYXRlcmlhbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvUmF3U2hhZGVyTWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL01lc2hTdGFuZGFyZE1hdGVyaWFsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9NZXNoUGh5c2ljYWxNYXRlcmlhbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvTWVzaFBob25nTWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL01lc2hUb29uTWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL01lc2hOb3JtYWxNYXRlcmlhbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvTWVzaExhbWJlcnRNYXRlcmlhbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvTWVzaE1hdGNhcE1hdGVyaWFsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9MaW5lRGFzaGVkTWF0ZXJpYWwuanMiLCIuLi9zcmMvYW5pbWF0aW9uL0FuaW1hdGlvblV0aWxzLmpzIiwiLi4vc3JjL21hdGgvSW50ZXJwb2xhbnQuanMiLCIuLi9zcmMvbWF0aC9pbnRlcnBvbGFudHMvQ3ViaWNJbnRlcnBvbGFudC5qcyIsIi4uL3NyYy9tYXRoL2ludGVycG9sYW50cy9MaW5lYXJJbnRlcnBvbGFudC5qcyIsIi4uL3NyYy9tYXRoL2ludGVycG9sYW50cy9EaXNjcmV0ZUludGVycG9sYW50LmpzIiwiLi4vc3JjL2FuaW1hdGlvbi9LZXlmcmFtZVRyYWNrLmpzIiwiLi4vc3JjL2FuaW1hdGlvbi90cmFja3MvQm9vbGVhbktleWZyYW1lVHJhY2suanMiLCIuLi9zcmMvYW5pbWF0aW9uL3RyYWNrcy9Db2xvcktleWZyYW1lVHJhY2suanMiLCIuLi9zcmMvYW5pbWF0aW9uL3RyYWNrcy9OdW1iZXJLZXlmcmFtZVRyYWNrLmpzIiwiLi4vc3JjL21hdGgvaW50ZXJwb2xhbnRzL1F1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudC5qcyIsIi4uL3NyYy9hbmltYXRpb24vdHJhY2tzL1F1YXRlcm5pb25LZXlmcmFtZVRyYWNrLmpzIiwiLi4vc3JjL2FuaW1hdGlvbi90cmFja3MvU3RyaW5nS2V5ZnJhbWVUcmFjay5qcyIsIi4uL3NyYy9hbmltYXRpb24vdHJhY2tzL1ZlY3RvcktleWZyYW1lVHJhY2suanMiLCIuLi9zcmMvYW5pbWF0aW9uL0FuaW1hdGlvbkNsaXAuanMiLCIuLi9zcmMvbG9hZGVycy9DYWNoZS5qcyIsIi4uL3NyYy9sb2FkZXJzL0xvYWRpbmdNYW5hZ2VyLmpzIiwiLi4vc3JjL2xvYWRlcnMvTG9hZGVyLmpzIiwiLi4vc3JjL2xvYWRlcnMvRmlsZUxvYWRlci5qcyIsIi4uL3NyYy9sb2FkZXJzL0FuaW1hdGlvbkxvYWRlci5qcyIsIi4uL3NyYy9sb2FkZXJzL0NvbXByZXNzZWRUZXh0dXJlTG9hZGVyLmpzIiwiLi4vc3JjL2xvYWRlcnMvSW1hZ2VMb2FkZXIuanMiLCIuLi9zcmMvbG9hZGVycy9DdWJlVGV4dHVyZUxvYWRlci5qcyIsIi4uL3NyYy9sb2FkZXJzL0RhdGFUZXh0dXJlTG9hZGVyLmpzIiwiLi4vc3JjL2xvYWRlcnMvVGV4dHVyZUxvYWRlci5qcyIsIi4uL3NyYy9saWdodHMvTGlnaHQuanMiLCIuLi9zcmMvbGlnaHRzL0hlbWlzcGhlcmVMaWdodC5qcyIsIi4uL3NyYy9saWdodHMvTGlnaHRTaGFkb3cuanMiLCIuLi9zcmMvbGlnaHRzL1Nwb3RMaWdodFNoYWRvdy5qcyIsIi4uL3NyYy9saWdodHMvU3BvdExpZ2h0LmpzIiwiLi4vc3JjL2xpZ2h0cy9Qb2ludExpZ2h0U2hhZG93LmpzIiwiLi4vc3JjL2xpZ2h0cy9Qb2ludExpZ2h0LmpzIiwiLi4vc3JjL2xpZ2h0cy9EaXJlY3Rpb25hbExpZ2h0U2hhZG93LmpzIiwiLi4vc3JjL2xpZ2h0cy9EaXJlY3Rpb25hbExpZ2h0LmpzIiwiLi4vc3JjL2xpZ2h0cy9BbWJpZW50TGlnaHQuanMiLCIuLi9zcmMvbGlnaHRzL1JlY3RBcmVhTGlnaHQuanMiLCIuLi9zcmMvbWF0aC9TcGhlcmljYWxIYXJtb25pY3MzLmpzIiwiLi4vc3JjL2xpZ2h0cy9MaWdodFByb2JlLmpzIiwiLi4vc3JjL2xvYWRlcnMvTWF0ZXJpYWxMb2FkZXIuanMiLCIuLi9zcmMvbG9hZGVycy9Mb2FkZXJVdGlscy5qcyIsIi4uL3NyYy9jb3JlL0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LmpzIiwiLi4vc3JjL2xvYWRlcnMvQnVmZmVyR2VvbWV0cnlMb2FkZXIuanMiLCIuLi9zcmMvbG9hZGVycy9PYmplY3RMb2FkZXIuanMiLCIuLi9zcmMvbG9hZGVycy9JbWFnZUJpdG1hcExvYWRlci5qcyIsIi4uL3NyYy9hdWRpby9BdWRpb0NvbnRleHQuanMiLCIuLi9zcmMvbG9hZGVycy9BdWRpb0xvYWRlci5qcyIsIi4uL3NyYy9jYW1lcmFzL1N0ZXJlb0NhbWVyYS5qcyIsIi4uL3NyYy9jb3JlL0Nsb2NrLmpzIiwiLi4vc3JjL2F1ZGlvL0F1ZGlvTGlzdGVuZXIuanMiLCIuLi9zcmMvYXVkaW8vQXVkaW8uanMiLCIuLi9zcmMvYXVkaW8vUG9zaXRpb25hbEF1ZGlvLmpzIiwiLi4vc3JjL2F1ZGlvL0F1ZGlvQW5hbHlzZXIuanMiLCIuLi9zcmMvYW5pbWF0aW9uL1Byb3BlcnR5TWl4ZXIuanMiLCIuLi9zcmMvYW5pbWF0aW9uL1Byb3BlcnR5QmluZGluZy5qcyIsIi4uL3NyYy9hbmltYXRpb24vQW5pbWF0aW9uT2JqZWN0R3JvdXAuanMiLCIuLi9zcmMvYW5pbWF0aW9uL0FuaW1hdGlvbkFjdGlvbi5qcyIsIi4uL3NyYy9hbmltYXRpb24vQW5pbWF0aW9uTWl4ZXIuanMiLCIuLi9zcmMvY29yZS9Vbmlmb3JtLmpzIiwiLi4vc3JjL2NvcmUvVW5pZm9ybXNHcm91cC5qcyIsIi4uL3NyYy9jb3JlL0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLmpzIiwiLi4vc3JjL2NvcmUvR0xCdWZmZXJBdHRyaWJ1dGUuanMiLCIuLi9zcmMvY29yZS9SYXljYXN0ZXIuanMiLCIuLi9zcmMvbWF0aC9TcGhlcmljYWwuanMiLCIuLi9zcmMvbWF0aC9DeWxpbmRyaWNhbC5qcyIsIi4uL3NyYy9tYXRoL0JveDIuanMiLCIuLi9zcmMvbWF0aC9MaW5lMy5qcyIsIi4uL3NyYy9oZWxwZXJzL1Nwb3RMaWdodEhlbHBlci5qcyIsIi4uL3NyYy9oZWxwZXJzL1NrZWxldG9uSGVscGVyLmpzIiwiLi4vc3JjL2hlbHBlcnMvUG9pbnRMaWdodEhlbHBlci5qcyIsIi4uL3NyYy9oZWxwZXJzL0hlbWlzcGhlcmVMaWdodEhlbHBlci5qcyIsIi4uL3NyYy9oZWxwZXJzL0dyaWRIZWxwZXIuanMiLCIuLi9zcmMvaGVscGVycy9Qb2xhckdyaWRIZWxwZXIuanMiLCIuLi9zcmMvaGVscGVycy9EaXJlY3Rpb25hbExpZ2h0SGVscGVyLmpzIiwiLi4vc3JjL2hlbHBlcnMvQ2FtZXJhSGVscGVyLmpzIiwiLi4vc3JjL2hlbHBlcnMvQm94SGVscGVyLmpzIiwiLi4vc3JjL2hlbHBlcnMvQm94M0hlbHBlci5qcyIsIi4uL3NyYy9oZWxwZXJzL1BsYW5lSGVscGVyLmpzIiwiLi4vc3JjL2hlbHBlcnMvQXJyb3dIZWxwZXIuanMiLCIuLi9zcmMvaGVscGVycy9BeGVzSGVscGVyLmpzIiwiLi4vc3JjL2V4dHJhcy9jb3JlL1NoYXBlUGF0aC5qcyIsIi4uL3NyYy9UaHJlZS5MZWdhY3kuanMiLCIuLi9zcmMvVGhyZWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFJFVklTSU9OID0gJzE2Nic7XG5cbmV4cG9ydCBjb25zdCBNT1VTRSA9IHsgTEVGVDogMCwgTUlERExFOiAxLCBSSUdIVDogMiwgUk9UQVRFOiAwLCBET0xMWTogMSwgUEFOOiAyIH07XG5leHBvcnQgY29uc3QgVE9VQ0ggPSB7IFJPVEFURTogMCwgUEFOOiAxLCBET0xMWV9QQU46IDIsIERPTExZX1JPVEFURTogMyB9O1xuZXhwb3J0IGNvbnN0IEN1bGxGYWNlTm9uZSA9IDA7XG5leHBvcnQgY29uc3QgQ3VsbEZhY2VCYWNrID0gMTtcbmV4cG9ydCBjb25zdCBDdWxsRmFjZUZyb250ID0gMjtcbmV4cG9ydCBjb25zdCBDdWxsRmFjZUZyb250QmFjayA9IDM7XG5leHBvcnQgY29uc3QgQmFzaWNTaGFkb3dNYXAgPSAwO1xuZXhwb3J0IGNvbnN0IFBDRlNoYWRvd01hcCA9IDE7XG5leHBvcnQgY29uc3QgUENGU29mdFNoYWRvd01hcCA9IDI7XG5leHBvcnQgY29uc3QgVlNNU2hhZG93TWFwID0gMztcbmV4cG9ydCBjb25zdCBGcm9udFNpZGUgPSAwO1xuZXhwb3J0IGNvbnN0IEJhY2tTaWRlID0gMTtcbmV4cG9ydCBjb25zdCBEb3VibGVTaWRlID0gMjtcbmV4cG9ydCBjb25zdCBOb0JsZW5kaW5nID0gMDtcbmV4cG9ydCBjb25zdCBOb3JtYWxCbGVuZGluZyA9IDE7XG5leHBvcnQgY29uc3QgQWRkaXRpdmVCbGVuZGluZyA9IDI7XG5leHBvcnQgY29uc3QgU3VidHJhY3RpdmVCbGVuZGluZyA9IDM7XG5leHBvcnQgY29uc3QgTXVsdGlwbHlCbGVuZGluZyA9IDQ7XG5leHBvcnQgY29uc3QgQ3VzdG9tQmxlbmRpbmcgPSA1O1xuZXhwb3J0IGNvbnN0IEFkZEVxdWF0aW9uID0gMTAwO1xuZXhwb3J0IGNvbnN0IFN1YnRyYWN0RXF1YXRpb24gPSAxMDE7XG5leHBvcnQgY29uc3QgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gPSAxMDI7XG5leHBvcnQgY29uc3QgTWluRXF1YXRpb24gPSAxMDM7XG5leHBvcnQgY29uc3QgTWF4RXF1YXRpb24gPSAxMDQ7XG5leHBvcnQgY29uc3QgWmVyb0ZhY3RvciA9IDIwMDtcbmV4cG9ydCBjb25zdCBPbmVGYWN0b3IgPSAyMDE7XG5leHBvcnQgY29uc3QgU3JjQ29sb3JGYWN0b3IgPSAyMDI7XG5leHBvcnQgY29uc3QgT25lTWludXNTcmNDb2xvckZhY3RvciA9IDIwMztcbmV4cG9ydCBjb25zdCBTcmNBbHBoYUZhY3RvciA9IDIwNDtcbmV4cG9ydCBjb25zdCBPbmVNaW51c1NyY0FscGhhRmFjdG9yID0gMjA1O1xuZXhwb3J0IGNvbnN0IERzdEFscGhhRmFjdG9yID0gMjA2O1xuZXhwb3J0IGNvbnN0IE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgPSAyMDc7XG5leHBvcnQgY29uc3QgRHN0Q29sb3JGYWN0b3IgPSAyMDg7XG5leHBvcnQgY29uc3QgT25lTWludXNEc3RDb2xvckZhY3RvciA9IDIwOTtcbmV4cG9ydCBjb25zdCBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yID0gMjEwO1xuZXhwb3J0IGNvbnN0IENvbnN0YW50Q29sb3JGYWN0b3IgPSAyMTE7XG5leHBvcnQgY29uc3QgT25lTWludXNDb25zdGFudENvbG9yRmFjdG9yID0gMjEyO1xuZXhwb3J0IGNvbnN0IENvbnN0YW50QWxwaGFGYWN0b3IgPSAyMTM7XG5leHBvcnQgY29uc3QgT25lTWludXNDb25zdGFudEFscGhhRmFjdG9yID0gMjE0O1xuZXhwb3J0IGNvbnN0IE5ldmVyRGVwdGggPSAwO1xuZXhwb3J0IGNvbnN0IEFsd2F5c0RlcHRoID0gMTtcbmV4cG9ydCBjb25zdCBMZXNzRGVwdGggPSAyO1xuZXhwb3J0IGNvbnN0IExlc3NFcXVhbERlcHRoID0gMztcbmV4cG9ydCBjb25zdCBFcXVhbERlcHRoID0gNDtcbmV4cG9ydCBjb25zdCBHcmVhdGVyRXF1YWxEZXB0aCA9IDU7XG5leHBvcnQgY29uc3QgR3JlYXRlckRlcHRoID0gNjtcbmV4cG9ydCBjb25zdCBOb3RFcXVhbERlcHRoID0gNztcbmV4cG9ydCBjb25zdCBNdWx0aXBseU9wZXJhdGlvbiA9IDA7XG5leHBvcnQgY29uc3QgTWl4T3BlcmF0aW9uID0gMTtcbmV4cG9ydCBjb25zdCBBZGRPcGVyYXRpb24gPSAyO1xuZXhwb3J0IGNvbnN0IE5vVG9uZU1hcHBpbmcgPSAwO1xuZXhwb3J0IGNvbnN0IExpbmVhclRvbmVNYXBwaW5nID0gMTtcbmV4cG9ydCBjb25zdCBSZWluaGFyZFRvbmVNYXBwaW5nID0gMjtcbmV4cG9ydCBjb25zdCBDaW5lb25Ub25lTWFwcGluZyA9IDM7XG5leHBvcnQgY29uc3QgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nID0gNDtcbmV4cG9ydCBjb25zdCBDdXN0b21Ub25lTWFwcGluZyA9IDU7XG5leHBvcnQgY29uc3QgQWdYVG9uZU1hcHBpbmcgPSA2O1xuZXhwb3J0IGNvbnN0IE5ldXRyYWxUb25lTWFwcGluZyA9IDc7XG5leHBvcnQgY29uc3QgQXR0YWNoZWRCaW5kTW9kZSA9ICdhdHRhY2hlZCc7XG5leHBvcnQgY29uc3QgRGV0YWNoZWRCaW5kTW9kZSA9ICdkZXRhY2hlZCc7XG5cbmV4cG9ydCBjb25zdCBVVk1hcHBpbmcgPSAzMDA7XG5leHBvcnQgY29uc3QgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nID0gMzAxO1xuZXhwb3J0IGNvbnN0IEN1YmVSZWZyYWN0aW9uTWFwcGluZyA9IDMwMjtcbmV4cG9ydCBjb25zdCBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyA9IDMwMztcbmV4cG9ydCBjb25zdCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyA9IDMwNDtcbmV4cG9ydCBjb25zdCBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyA9IDMwNjtcbmV4cG9ydCBjb25zdCBSZXBlYXRXcmFwcGluZyA9IDEwMDA7XG5leHBvcnQgY29uc3QgQ2xhbXBUb0VkZ2VXcmFwcGluZyA9IDEwMDE7XG5leHBvcnQgY29uc3QgTWlycm9yZWRSZXBlYXRXcmFwcGluZyA9IDEwMDI7XG5leHBvcnQgY29uc3QgTmVhcmVzdEZpbHRlciA9IDEwMDM7XG5leHBvcnQgY29uc3QgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA0O1xuZXhwb3J0IGNvbnN0IE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcbmV4cG9ydCBjb25zdCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyID0gMTAwNTtcbmV4cG9ydCBjb25zdCBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyID0gMTAwNTtcbmV4cG9ydCBjb25zdCBMaW5lYXJGaWx0ZXIgPSAxMDA2O1xuZXhwb3J0IGNvbnN0IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA3O1xuZXhwb3J0IGNvbnN0IExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA3O1xuZXhwb3J0IGNvbnN0IExpbmVhck1pcG1hcExpbmVhckZpbHRlciA9IDEwMDg7XG5leHBvcnQgY29uc3QgTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyID0gMTAwODtcbmV4cG9ydCBjb25zdCBVbnNpZ25lZEJ5dGVUeXBlID0gMTAwOTtcbmV4cG9ydCBjb25zdCBCeXRlVHlwZSA9IDEwMTA7XG5leHBvcnQgY29uc3QgU2hvcnRUeXBlID0gMTAxMTtcbmV4cG9ydCBjb25zdCBVbnNpZ25lZFNob3J0VHlwZSA9IDEwMTI7XG5leHBvcnQgY29uc3QgSW50VHlwZSA9IDEwMTM7XG5leHBvcnQgY29uc3QgVW5zaWduZWRJbnRUeXBlID0gMTAxNDtcbmV4cG9ydCBjb25zdCBGbG9hdFR5cGUgPSAxMDE1O1xuZXhwb3J0IGNvbnN0IEhhbGZGbG9hdFR5cGUgPSAxMDE2O1xuZXhwb3J0IGNvbnN0IFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSA9IDEwMTc7XG5leHBvcnQgY29uc3QgVW5zaWduZWRTaG9ydDU1NTFUeXBlID0gMTAxODtcbmV4cG9ydCBjb25zdCBVbnNpZ25lZEludDI0OFR5cGUgPSAxMDIwO1xuZXhwb3J0IGNvbnN0IFVuc2lnbmVkSW50NTk5OVR5cGUgPSAzNTkwMjtcbmV4cG9ydCBjb25zdCBBbHBoYUZvcm1hdCA9IDEwMjE7XG5leHBvcnQgY29uc3QgUkdCRm9ybWF0ID0gMTAyMjtcbmV4cG9ydCBjb25zdCBSR0JBRm9ybWF0ID0gMTAyMztcbmV4cG9ydCBjb25zdCBMdW1pbmFuY2VGb3JtYXQgPSAxMDI0O1xuZXhwb3J0IGNvbnN0IEx1bWluYW5jZUFscGhhRm9ybWF0ID0gMTAyNTtcbmV4cG9ydCBjb25zdCBEZXB0aEZvcm1hdCA9IDEwMjY7XG5leHBvcnQgY29uc3QgRGVwdGhTdGVuY2lsRm9ybWF0ID0gMTAyNztcbmV4cG9ydCBjb25zdCBSZWRGb3JtYXQgPSAxMDI4O1xuZXhwb3J0IGNvbnN0IFJlZEludGVnZXJGb3JtYXQgPSAxMDI5O1xuZXhwb3J0IGNvbnN0IFJHRm9ybWF0ID0gMTAzMDtcbmV4cG9ydCBjb25zdCBSR0ludGVnZXJGb3JtYXQgPSAxMDMxO1xuZXhwb3J0IGNvbnN0IFJHQkludGVnZXJGb3JtYXQgPSAxMDMyO1xuZXhwb3J0IGNvbnN0IFJHQkFJbnRlZ2VyRm9ybWF0ID0gMTAzMztcblxuZXhwb3J0IGNvbnN0IFJHQl9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3NzY7XG5leHBvcnQgY29uc3QgUkdCQV9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3Nzc7XG5leHBvcnQgY29uc3QgUkdCQV9TM1RDX0RYVDNfRm9ybWF0ID0gMzM3Nzg7XG5leHBvcnQgY29uc3QgUkdCQV9TM1RDX0RYVDVfRm9ybWF0ID0gMzM3Nzk7XG5leHBvcnQgY29uc3QgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MDtcbmV4cG9ydCBjb25zdCBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IDM1ODQxO1xuZXhwb3J0IGNvbnN0IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IDM1ODQyO1xuZXhwb3J0IGNvbnN0IFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IDM1ODQzO1xuZXhwb3J0IGNvbnN0IFJHQl9FVEMxX0Zvcm1hdCA9IDM2MTk2O1xuZXhwb3J0IGNvbnN0IFJHQl9FVEMyX0Zvcm1hdCA9IDM3NDkyO1xuZXhwb3J0IGNvbnN0IFJHQkFfRVRDMl9FQUNfRm9ybWF0ID0gMzc0OTY7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzR4NF9Gb3JtYXQgPSAzNzgwODtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfNXg0X0Zvcm1hdCA9IDM3ODA5O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ181eDVfRm9ybWF0ID0gMzc4MTA7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgPSAzNzgxMTtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfNng2X0Zvcm1hdCA9IDM3ODEyO1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ184eDVfRm9ybWF0ID0gMzc4MTM7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgPSAzNzgxNDtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfOHg4X0Zvcm1hdCA9IDM3ODE1O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCA9IDM3ODE2O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCA9IDM3ODE3O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCA9IDM3ODE4O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgPSAzNzgxOTtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ID0gMzc4MjA7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCA9IDM3ODIxO1xuZXhwb3J0IGNvbnN0IFJHQkFfQlBUQ19Gb3JtYXQgPSAzNjQ5MjtcbmV4cG9ydCBjb25zdCBSR0JfQlBUQ19TSUdORURfRm9ybWF0ID0gMzY0OTQ7XG5leHBvcnQgY29uc3QgUkdCX0JQVENfVU5TSUdORURfRm9ybWF0ID0gMzY0OTU7XG5leHBvcnQgY29uc3QgUkVEX1JHVEMxX0Zvcm1hdCA9IDM2MjgzO1xuZXhwb3J0IGNvbnN0IFNJR05FRF9SRURfUkdUQzFfRm9ybWF0ID0gMzYyODQ7XG5leHBvcnQgY29uc3QgUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCA9IDM2Mjg1O1xuZXhwb3J0IGNvbnN0IFNJR05FRF9SRURfR1JFRU5fUkdUQzJfRm9ybWF0ID0gMzYyODY7XG5leHBvcnQgY29uc3QgTG9vcE9uY2UgPSAyMjAwO1xuZXhwb3J0IGNvbnN0IExvb3BSZXBlYXQgPSAyMjAxO1xuZXhwb3J0IGNvbnN0IExvb3BQaW5nUG9uZyA9IDIyMDI7XG5leHBvcnQgY29uc3QgSW50ZXJwb2xhdGVEaXNjcmV0ZSA9IDIzMDA7XG5leHBvcnQgY29uc3QgSW50ZXJwb2xhdGVMaW5lYXIgPSAyMzAxO1xuZXhwb3J0IGNvbnN0IEludGVycG9sYXRlU21vb3RoID0gMjMwMjtcbmV4cG9ydCBjb25zdCBaZXJvQ3VydmF0dXJlRW5kaW5nID0gMjQwMDtcbmV4cG9ydCBjb25zdCBaZXJvU2xvcGVFbmRpbmcgPSAyNDAxO1xuZXhwb3J0IGNvbnN0IFdyYXBBcm91bmRFbmRpbmcgPSAyNDAyO1xuZXhwb3J0IGNvbnN0IE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSA9IDI1MDA7XG5leHBvcnQgY29uc3QgQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUgPSAyNTAxO1xuZXhwb3J0IGNvbnN0IFRyaWFuZ2xlc0RyYXdNb2RlID0gMDtcbmV4cG9ydCBjb25zdCBUcmlhbmdsZVN0cmlwRHJhd01vZGUgPSAxO1xuZXhwb3J0IGNvbnN0IFRyaWFuZ2xlRmFuRHJhd01vZGUgPSAyO1xuZXhwb3J0IGNvbnN0IEJhc2ljRGVwdGhQYWNraW5nID0gMzIwMDtcbmV4cG9ydCBjb25zdCBSR0JBRGVwdGhQYWNraW5nID0gMzIwMTtcbmV4cG9ydCBjb25zdCBUYW5nZW50U3BhY2VOb3JtYWxNYXAgPSAwO1xuZXhwb3J0IGNvbnN0IE9iamVjdFNwYWNlTm9ybWFsTWFwID0gMTtcblxuLy8gQ29sb3Igc3BhY2Ugc3RyaW5nIGlkZW50aWZpZXJzLCBtYXRjaGluZyBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDQgYW5kIFdlYkdQVSBuYW1lcyB3aGVyZSBhdmFpbGFibGUuXG5leHBvcnQgY29uc3QgTm9Db2xvclNwYWNlID0gJyc7XG5leHBvcnQgY29uc3QgU1JHQkNvbG9yU3BhY2UgPSAnc3JnYic7XG5leHBvcnQgY29uc3QgTGluZWFyU1JHQkNvbG9yU3BhY2UgPSAnc3JnYi1saW5lYXInO1xuZXhwb3J0IGNvbnN0IERpc3BsYXlQM0NvbG9yU3BhY2UgPSAnZGlzcGxheS1wMyc7XG5leHBvcnQgY29uc3QgTGluZWFyRGlzcGxheVAzQ29sb3JTcGFjZSA9ICdkaXNwbGF5LXAzLWxpbmVhcic7XG5cbmV4cG9ydCBjb25zdCBMaW5lYXJUcmFuc2ZlciA9ICdsaW5lYXInO1xuZXhwb3J0IGNvbnN0IFNSR0JUcmFuc2ZlciA9ICdzcmdiJztcblxuZXhwb3J0IGNvbnN0IFJlYzcwOVByaW1hcmllcyA9ICdyZWM3MDknO1xuZXhwb3J0IGNvbnN0IFAzUHJpbWFyaWVzID0gJ3AzJztcblxuZXhwb3J0IGNvbnN0IFplcm9TdGVuY2lsT3AgPSAwO1xuZXhwb3J0IGNvbnN0IEtlZXBTdGVuY2lsT3AgPSA3NjgwO1xuZXhwb3J0IGNvbnN0IFJlcGxhY2VTdGVuY2lsT3AgPSA3NjgxO1xuZXhwb3J0IGNvbnN0IEluY3JlbWVudFN0ZW5jaWxPcCA9IDc2ODI7XG5leHBvcnQgY29uc3QgRGVjcmVtZW50U3RlbmNpbE9wID0gNzY4MztcbmV4cG9ydCBjb25zdCBJbmNyZW1lbnRXcmFwU3RlbmNpbE9wID0gMzQwNTU7XG5leHBvcnQgY29uc3QgRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCA9IDM0MDU2O1xuZXhwb3J0IGNvbnN0IEludmVydFN0ZW5jaWxPcCA9IDUzODY7XG5cbmV4cG9ydCBjb25zdCBOZXZlclN0ZW5jaWxGdW5jID0gNTEyO1xuZXhwb3J0IGNvbnN0IExlc3NTdGVuY2lsRnVuYyA9IDUxMztcbmV4cG9ydCBjb25zdCBFcXVhbFN0ZW5jaWxGdW5jID0gNTE0O1xuZXhwb3J0IGNvbnN0IExlc3NFcXVhbFN0ZW5jaWxGdW5jID0gNTE1O1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJTdGVuY2lsRnVuYyA9IDUxNjtcbmV4cG9ydCBjb25zdCBOb3RFcXVhbFN0ZW5jaWxGdW5jID0gNTE3O1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jID0gNTE4O1xuZXhwb3J0IGNvbnN0IEFsd2F5c1N0ZW5jaWxGdW5jID0gNTE5O1xuXG5leHBvcnQgY29uc3QgTmV2ZXJDb21wYXJlID0gNTEyO1xuZXhwb3J0IGNvbnN0IExlc3NDb21wYXJlID0gNTEzO1xuZXhwb3J0IGNvbnN0IEVxdWFsQ29tcGFyZSA9IDUxNDtcbmV4cG9ydCBjb25zdCBMZXNzRXF1YWxDb21wYXJlID0gNTE1O1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJDb21wYXJlID0gNTE2O1xuZXhwb3J0IGNvbnN0IE5vdEVxdWFsQ29tcGFyZSA9IDUxNztcbmV4cG9ydCBjb25zdCBHcmVhdGVyRXF1YWxDb21wYXJlID0gNTE4O1xuZXhwb3J0IGNvbnN0IEFsd2F5c0NvbXBhcmUgPSA1MTk7XG5cbmV4cG9ydCBjb25zdCBTdGF0aWNEcmF3VXNhZ2UgPSAzNTA0NDtcbmV4cG9ydCBjb25zdCBEeW5hbWljRHJhd1VzYWdlID0gMzUwNDg7XG5leHBvcnQgY29uc3QgU3RyZWFtRHJhd1VzYWdlID0gMzUwNDA7XG5leHBvcnQgY29uc3QgU3RhdGljUmVhZFVzYWdlID0gMzUwNDU7XG5leHBvcnQgY29uc3QgRHluYW1pY1JlYWRVc2FnZSA9IDM1MDQ5O1xuZXhwb3J0IGNvbnN0IFN0cmVhbVJlYWRVc2FnZSA9IDM1MDQxO1xuZXhwb3J0IGNvbnN0IFN0YXRpY0NvcHlVc2FnZSA9IDM1MDQ2O1xuZXhwb3J0IGNvbnN0IER5bmFtaWNDb3B5VXNhZ2UgPSAzNTA1MDtcbmV4cG9ydCBjb25zdCBTdHJlYW1Db3B5VXNhZ2UgPSAzNTA0MjtcblxuZXhwb3J0IGNvbnN0IEdMU0wxID0gJzEwMCc7XG5leHBvcnQgY29uc3QgR0xTTDMgPSAnMzAwIGVzJztcblxuZXhwb3J0IGNvbnN0IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSA9IDIwMDA7XG5leHBvcnQgY29uc3QgV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSA9IDIwMDE7XG4iLCIvKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvZXZlbnRkaXNwYXRjaGVyLmpzL1xuICovXG5cbmNsYXNzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0YWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgdGhpcy5fbGlzdGVuZXJzID0ge307XG5cblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxpc3RlbmVyc1sgdHlwZSBdID0gW107XG5cblx0XHR9XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgPT09IC0gMSApIHtcblxuXHRcdFx0bGlzdGVuZXJzWyB0eXBlIF0ucHVzaCggbGlzdGVuZXIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0aGFzRXZlbnRMaXN0ZW5lciggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0Y29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuXG5cdFx0cmV0dXJuIGxpc3RlbmVyc1sgdHlwZSBdICE9PSB1bmRlZmluZWQgJiYgbGlzdGVuZXJzWyB0eXBlIF0uaW5kZXhPZiggbGlzdGVuZXIgKSAhPT0gLSAxO1xuXG5cdH1cblxuXHRyZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cdFx0Y29uc3QgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGluZGV4ID0gbGlzdGVuZXJBcnJheS5pbmRleE9mKCBsaXN0ZW5lciApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0bGlzdGVuZXJBcnJheS5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZGlzcGF0Y2hFdmVudCggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuXHRcdGNvbnN0IGxpc3RlbmVyQXJyYXkgPSBsaXN0ZW5lcnNbIGV2ZW50LnR5cGUgXTtcblxuXHRcdGlmICggbGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRldmVudC50YXJnZXQgPSB0aGlzO1xuXG5cdFx0XHQvLyBNYWtlIGEgY29weSwgaW4gY2FzZSBsaXN0ZW5lcnMgYXJlIHJlbW92ZWQgd2hpbGUgaXRlcmF0aW5nLlxuXHRcdFx0Y29uc3QgYXJyYXkgPSBsaXN0ZW5lckFycmF5LnNsaWNlKCAwICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXlbIGkgXS5jYWxsKCB0aGlzLCBldmVudCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGV2ZW50LnRhcmdldCA9IG51bGw7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgRXZlbnREaXNwYXRjaGVyIH07XG4iLCJjb25zdCBfbHV0ID0gWyAnMDAnLCAnMDEnLCAnMDInLCAnMDMnLCAnMDQnLCAnMDUnLCAnMDYnLCAnMDcnLCAnMDgnLCAnMDknLCAnMGEnLCAnMGInLCAnMGMnLCAnMGQnLCAnMGUnLCAnMGYnLCAnMTAnLCAnMTEnLCAnMTInLCAnMTMnLCAnMTQnLCAnMTUnLCAnMTYnLCAnMTcnLCAnMTgnLCAnMTknLCAnMWEnLCAnMWInLCAnMWMnLCAnMWQnLCAnMWUnLCAnMWYnLCAnMjAnLCAnMjEnLCAnMjInLCAnMjMnLCAnMjQnLCAnMjUnLCAnMjYnLCAnMjcnLCAnMjgnLCAnMjknLCAnMmEnLCAnMmInLCAnMmMnLCAnMmQnLCAnMmUnLCAnMmYnLCAnMzAnLCAnMzEnLCAnMzInLCAnMzMnLCAnMzQnLCAnMzUnLCAnMzYnLCAnMzcnLCAnMzgnLCAnMzknLCAnM2EnLCAnM2InLCAnM2MnLCAnM2QnLCAnM2UnLCAnM2YnLCAnNDAnLCAnNDEnLCAnNDInLCAnNDMnLCAnNDQnLCAnNDUnLCAnNDYnLCAnNDcnLCAnNDgnLCAnNDknLCAnNGEnLCAnNGInLCAnNGMnLCAnNGQnLCAnNGUnLCAnNGYnLCAnNTAnLCAnNTEnLCAnNTInLCAnNTMnLCAnNTQnLCAnNTUnLCAnNTYnLCAnNTcnLCAnNTgnLCAnNTknLCAnNWEnLCAnNWInLCAnNWMnLCAnNWQnLCAnNWUnLCAnNWYnLCAnNjAnLCAnNjEnLCAnNjInLCAnNjMnLCAnNjQnLCAnNjUnLCAnNjYnLCAnNjcnLCAnNjgnLCAnNjknLCAnNmEnLCAnNmInLCAnNmMnLCAnNmQnLCAnNmUnLCAnNmYnLCAnNzAnLCAnNzEnLCAnNzInLCAnNzMnLCAnNzQnLCAnNzUnLCAnNzYnLCAnNzcnLCAnNzgnLCAnNzknLCAnN2EnLCAnN2InLCAnN2MnLCAnN2QnLCAnN2UnLCAnN2YnLCAnODAnLCAnODEnLCAnODInLCAnODMnLCAnODQnLCAnODUnLCAnODYnLCAnODcnLCAnODgnLCAnODknLCAnOGEnLCAnOGInLCAnOGMnLCAnOGQnLCAnOGUnLCAnOGYnLCAnOTAnLCAnOTEnLCAnOTInLCAnOTMnLCAnOTQnLCAnOTUnLCAnOTYnLCAnOTcnLCAnOTgnLCAnOTknLCAnOWEnLCAnOWInLCAnOWMnLCAnOWQnLCAnOWUnLCAnOWYnLCAnYTAnLCAnYTEnLCAnYTInLCAnYTMnLCAnYTQnLCAnYTUnLCAnYTYnLCAnYTcnLCAnYTgnLCAnYTknLCAnYWEnLCAnYWInLCAnYWMnLCAnYWQnLCAnYWUnLCAnYWYnLCAnYjAnLCAnYjEnLCAnYjInLCAnYjMnLCAnYjQnLCAnYjUnLCAnYjYnLCAnYjcnLCAnYjgnLCAnYjknLCAnYmEnLCAnYmInLCAnYmMnLCAnYmQnLCAnYmUnLCAnYmYnLCAnYzAnLCAnYzEnLCAnYzInLCAnYzMnLCAnYzQnLCAnYzUnLCAnYzYnLCAnYzcnLCAnYzgnLCAnYzknLCAnY2EnLCAnY2InLCAnY2MnLCAnY2QnLCAnY2UnLCAnY2YnLCAnZDAnLCAnZDEnLCAnZDInLCAnZDMnLCAnZDQnLCAnZDUnLCAnZDYnLCAnZDcnLCAnZDgnLCAnZDknLCAnZGEnLCAnZGInLCAnZGMnLCAnZGQnLCAnZGUnLCAnZGYnLCAnZTAnLCAnZTEnLCAnZTInLCAnZTMnLCAnZTQnLCAnZTUnLCAnZTYnLCAnZTcnLCAnZTgnLCAnZTknLCAnZWEnLCAnZWInLCAnZWMnLCAnZWQnLCAnZWUnLCAnZWYnLCAnZjAnLCAnZjEnLCAnZjInLCAnZjMnLCAnZjQnLCAnZjUnLCAnZjYnLCAnZjcnLCAnZjgnLCAnZjknLCAnZmEnLCAnZmInLCAnZmMnLCAnZmQnLCAnZmUnLCAnZmYnIF07XG5cbmxldCBfc2VlZCA9IDEyMzQ1Njc7XG5cblxuY29uc3QgREVHMlJBRCA9IE1hdGguUEkgLyAxODA7XG5jb25zdCBSQUQyREVHID0gMTgwIC8gTWF0aC5QSTtcblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxOTYzMTM2IzIxOTYzMTM2XG5mdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKSB7XG5cblx0Y29uc3QgZDAgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdGNvbnN0IGQxID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRjb25zdCBkMiA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0Y29uc3QgZDMgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdGNvbnN0IHV1aWQgPSBfbHV0WyBkMCAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDggJiAweGZmIF0gKyBfbHV0WyBkMCA+PiAxNiAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDI0ICYgMHhmZiBdICsgJy0nICtcblx0XHRcdF9sdXRbIGQxICYgMHhmZiBdICsgX2x1dFsgZDEgPj4gOCAmIDB4ZmYgXSArICctJyArIF9sdXRbIGQxID4+IDE2ICYgMHgwZiB8IDB4NDAgXSArIF9sdXRbIGQxID4+IDI0ICYgMHhmZiBdICsgJy0nICtcblx0XHRcdF9sdXRbIGQyICYgMHgzZiB8IDB4ODAgXSArIF9sdXRbIGQyID4+IDggJiAweGZmIF0gKyAnLScgKyBfbHV0WyBkMiA+PiAxNiAmIDB4ZmYgXSArIF9sdXRbIGQyID4+IDI0ICYgMHhmZiBdICtcblx0XHRcdF9sdXRbIGQzICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gOCAmIDB4ZmYgXSArIF9sdXRbIGQzID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gMjQgJiAweGZmIF07XG5cblx0Ly8gLnRvTG93ZXJDYXNlKCkgaGVyZSBmbGF0dGVucyBjb25jYXRlbmF0ZWQgc3RyaW5ncyB0byBzYXZlIGhlYXAgbWVtb3J5IHNwYWNlLlxuXHRyZXR1cm4gdXVpZC50b0xvd2VyQ2FzZSgpO1xuXG59XG5cbmZ1bmN0aW9uIGNsYW1wKCB2YWx1ZSwgbWluLCBtYXggKSB7XG5cblx0cmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIHZhbHVlICkgKTtcblxufVxuXG4vLyBjb21wdXRlIGV1Y2xpZGVhbiBtb2R1bG8gb2YgbSAlIG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vZHVsb19vcGVyYXRpb25cbmZ1bmN0aW9uIGV1Y2xpZGVhbk1vZHVsbyggbiwgbSApIHtcblxuXHRyZXR1cm4gKCAoIG4gJSBtICkgKyBtICkgJSBtO1xuXG59XG5cbi8vIExpbmVhciBtYXBwaW5nIGZyb20gcmFuZ2UgPGExLCBhMj4gdG8gcmFuZ2UgPGIxLCBiMj5cbmZ1bmN0aW9uIG1hcExpbmVhciggeCwgYTEsIGEyLCBiMSwgYjIgKSB7XG5cblx0cmV0dXJuIGIxICsgKCB4IC0gYTEgKSAqICggYjIgLSBiMSApIC8gKCBhMiAtIGExICk7XG5cbn1cblxuLy8gaHR0cHM6Ly93d3cuZ2FtZWRldi5uZXQvdHV0b3JpYWxzL3Byb2dyYW1taW5nL2dlbmVyYWwtYW5kLWdhbWVwbGF5LXByb2dyYW1taW5nL2ludmVyc2UtbGVycC1hLXN1cGVyLXVzZWZ1bC15ZXQtb2Z0ZW4tb3Zlcmxvb2tlZC1mdW5jdGlvbi1yNTIzMC9cbmZ1bmN0aW9uIGludmVyc2VMZXJwKCB4LCB5LCB2YWx1ZSApIHtcblxuXHRpZiAoIHggIT09IHkgKSB7XG5cblx0XHRyZXR1cm4gKCB2YWx1ZSAtIHggKSAvICggeSAtIHggKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cmV0dXJuIDA7XG5cblx0fVxuXG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpbmVhcl9pbnRlcnBvbGF0aW9uXG5mdW5jdGlvbiBsZXJwKCB4LCB5LCB0ICkge1xuXG5cdHJldHVybiAoIDEgLSB0ICkgKiB4ICsgdCAqIHk7XG5cbn1cblxuLy8gaHR0cDovL3d3dy5yb3J5ZHJpc2NvbGwuY29tLzIwMTYvMDMvMDcvZnJhbWUtcmF0ZS1pbmRlcGVuZGVudC1kYW1waW5nLXVzaW5nLWxlcnAvXG5mdW5jdGlvbiBkYW1wKCB4LCB5LCBsYW1iZGEsIGR0ICkge1xuXG5cdHJldHVybiBsZXJwKCB4LCB5LCAxIC0gTWF0aC5leHAoIC0gbGFtYmRhICogZHQgKSApO1xuXG59XG5cbi8vIGh0dHBzOi8vd3d3LmRlc21vcy5jb20vY2FsY3VsYXRvci92Y3Nqbnl6N3g0XG5mdW5jdGlvbiBwaW5ncG9uZyggeCwgbGVuZ3RoID0gMSApIHtcblxuXHRyZXR1cm4gbGVuZ3RoIC0gTWF0aC5hYnMoIGV1Y2xpZGVhbk1vZHVsbyggeCwgbGVuZ3RoICogMiApIC0gbGVuZ3RoICk7XG5cbn1cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbW9vdGhzdGVwXG5mdW5jdGlvbiBzbW9vdGhzdGVwKCB4LCBtaW4sIG1heCApIHtcblxuXHRpZiAoIHggPD0gbWluICkgcmV0dXJuIDA7XG5cdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdHJldHVybiB4ICogeCAqICggMyAtIDIgKiB4ICk7XG5cbn1cblxuZnVuY3Rpb24gc21vb3RoZXJzdGVwKCB4LCBtaW4sIG1heCApIHtcblxuXHRpZiAoIHggPD0gbWluICkgcmV0dXJuIDA7XG5cdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdHJldHVybiB4ICogeCAqIHggKiAoIHggKiAoIHggKiA2IC0gMTUgKSArIDEwICk7XG5cbn1cblxuLy8gUmFuZG9tIGludGVnZXIgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxuZnVuY3Rpb24gcmFuZEludCggbG93LCBoaWdoICkge1xuXG5cdHJldHVybiBsb3cgKyBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICsgMSApICk7XG5cbn1cblxuLy8gUmFuZG9tIGZsb2F0IGZyb20gPGxvdywgaGlnaD4gaW50ZXJ2YWxcbmZ1bmN0aW9uIHJhbmRGbG9hdCggbG93LCBoaWdoICkge1xuXG5cdHJldHVybiBsb3cgKyBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICk7XG5cbn1cblxuLy8gUmFuZG9tIGZsb2F0IGZyb20gPC1yYW5nZS8yLCByYW5nZS8yPiBpbnRlcnZhbFxuZnVuY3Rpb24gcmFuZEZsb2F0U3ByZWFkKCByYW5nZSApIHtcblxuXHRyZXR1cm4gcmFuZ2UgKiAoIDAuNSAtIE1hdGgucmFuZG9tKCkgKTtcblxufVxuXG4vLyBEZXRlcm1pbmlzdGljIHBzZXVkby1yYW5kb20gZmxvYXQgaW4gdGhlIGludGVydmFsIFsgMCwgMSBdXG5mdW5jdGlvbiBzZWVkZWRSYW5kb20oIHMgKSB7XG5cblx0aWYgKCBzICE9PSB1bmRlZmluZWQgKSBfc2VlZCA9IHM7XG5cblx0Ly8gTXVsYmVycnkzMiBnZW5lcmF0b3JcblxuXHRsZXQgdCA9IF9zZWVkICs9IDB4NkQyQjc5RjU7XG5cblx0dCA9IE1hdGguaW11bCggdCBeIHQgPj4+IDE1LCB0IHwgMSApO1xuXG5cdHQgXj0gdCArIE1hdGguaW11bCggdCBeIHQgPj4+IDcsIHQgfCA2MSApO1xuXG5cdHJldHVybiAoICggdCBeIHQgPj4+IDE0ICkgPj4+IDAgKSAvIDQyOTQ5NjcyOTY7XG5cbn1cblxuZnVuY3Rpb24gZGVnVG9SYWQoIGRlZ3JlZXMgKSB7XG5cblx0cmV0dXJuIGRlZ3JlZXMgKiBERUcyUkFEO1xuXG59XG5cbmZ1bmN0aW9uIHJhZFRvRGVnKCByYWRpYW5zICkge1xuXG5cdHJldHVybiByYWRpYW5zICogUkFEMkRFRztcblxufVxuXG5mdW5jdGlvbiBpc1Bvd2VyT2ZUd28oIHZhbHVlICkge1xuXG5cdHJldHVybiAoIHZhbHVlICYgKCB2YWx1ZSAtIDEgKSApID09PSAwICYmIHZhbHVlICE9PSAwO1xuXG59XG5cbmZ1bmN0aW9uIGNlaWxQb3dlck9mVHdvKCB2YWx1ZSApIHtcblxuXHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguY2VpbCggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XG5cbn1cblxuZnVuY3Rpb24gZmxvb3JQb3dlck9mVHdvKCB2YWx1ZSApIHtcblxuXHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguZmxvb3IoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFF1YXRlcm5pb25Gcm9tUHJvcGVyRXVsZXIoIHEsIGEsIGIsIGMsIG9yZGVyICkge1xuXG5cdC8vIEludHJpbnNpYyBQcm9wZXIgRXVsZXIgQW5nbGVzIC0gc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V1bGVyX2FuZ2xlc1xuXG5cdC8vIHJvdGF0aW9ucyBhcmUgYXBwbGllZCB0byB0aGUgYXhlcyBpbiB0aGUgb3JkZXIgc3BlY2lmaWVkIGJ5ICdvcmRlcidcblx0Ly8gcm90YXRpb24gYnkgYW5nbGUgJ2EnIGlzIGFwcGxpZWQgZmlyc3QsIHRoZW4gYnkgYW5nbGUgJ2InLCB0aGVuIGJ5IGFuZ2xlICdjJ1xuXHQvLyBhbmdsZXMgYXJlIGluIHJhZGlhbnNcblxuXHRjb25zdCBjb3MgPSBNYXRoLmNvcztcblx0Y29uc3Qgc2luID0gTWF0aC5zaW47XG5cblx0Y29uc3QgYzIgPSBjb3MoIGIgLyAyICk7XG5cdGNvbnN0IHMyID0gc2luKCBiIC8gMiApO1xuXG5cdGNvbnN0IGMxMyA9IGNvcyggKCBhICsgYyApIC8gMiApO1xuXHRjb25zdCBzMTMgPSBzaW4oICggYSArIGMgKSAvIDIgKTtcblxuXHRjb25zdCBjMV8zID0gY29zKCAoIGEgLSBjICkgLyAyICk7XG5cdGNvbnN0IHMxXzMgPSBzaW4oICggYSAtIGMgKSAvIDIgKTtcblxuXHRjb25zdCBjM18xID0gY29zKCAoIGMgLSBhICkgLyAyICk7XG5cdGNvbnN0IHMzXzEgPSBzaW4oICggYyAtIGEgKSAvIDIgKTtcblxuXHRzd2l0Y2ggKCBvcmRlciApIHtcblxuXHRcdGNhc2UgJ1hZWCc6XG5cdFx0XHRxLnNldCggYzIgKiBzMTMsIHMyICogYzFfMywgczIgKiBzMV8zLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdZWlknOlxuXHRcdFx0cS5zZXQoIHMyICogczFfMywgYzIgKiBzMTMsIHMyICogYzFfMywgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnWlhaJzpcblx0XHRcdHEuc2V0KCBzMiAqIGMxXzMsIHMyICogczFfMywgYzIgKiBzMTMsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ1haWCc6XG5cdFx0XHRxLnNldCggYzIgKiBzMTMsIHMyICogczNfMSwgczIgKiBjM18xLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdZWFknOlxuXHRcdFx0cS5zZXQoIHMyICogYzNfMSwgYzIgKiBzMTMsIHMyICogczNfMSwgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnWllaJzpcblx0XHRcdHEuc2V0KCBzMiAqIHMzXzEsIHMyICogYzNfMSwgYzIgKiBzMTMsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRoVXRpbHM6IC5zZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyKCkgZW5jb3VudGVyZWQgYW4gdW5rbm93biBvcmRlcjogJyArIG9yZGVyICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGRlbm9ybWFsaXplKCB2YWx1ZSwgYXJyYXkgKSB7XG5cblx0c3dpdGNoICggYXJyYXkuY29uc3RydWN0b3IgKSB7XG5cblx0XHRjYXNlIEZsb2F0MzJBcnJheTpcblxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXG5cdFx0Y2FzZSBVaW50MzJBcnJheTpcblxuXHRcdFx0cmV0dXJuIHZhbHVlIC8gNDI5NDk2NzI5NS4wO1xuXG5cdFx0Y2FzZSBVaW50MTZBcnJheTpcblxuXHRcdFx0cmV0dXJuIHZhbHVlIC8gNjU1MzUuMDtcblxuXHRcdGNhc2UgVWludDhBcnJheTpcblxuXHRcdFx0cmV0dXJuIHZhbHVlIC8gMjU1LjA7XG5cblx0XHRjYXNlIEludDMyQXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLm1heCggdmFsdWUgLyAyMTQ3NDgzNjQ3LjAsIC0gMS4wICk7XG5cblx0XHRjYXNlIEludDE2QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLm1heCggdmFsdWUgLyAzMjc2Ny4wLCAtIDEuMCApO1xuXG5cdFx0Y2FzZSBJbnQ4QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLm1heCggdmFsdWUgLyAxMjcuMCwgLSAxLjAgKTtcblxuXHRcdGRlZmF1bHQ6XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ0ludmFsaWQgY29tcG9uZW50IHR5cGUuJyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoIHZhbHVlLCBhcnJheSApIHtcblxuXHRzd2l0Y2ggKCBhcnJheS5jb25zdHJ1Y3RvciApIHtcblxuXHRcdGNhc2UgRmxvYXQzMkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cblx0XHRjYXNlIFVpbnQzMkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggdmFsdWUgKiA0Mjk0OTY3Mjk1LjAgKTtcblxuXHRcdGNhc2UgVWludDE2QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDY1NTM1LjAgKTtcblxuXHRcdGNhc2UgVWludDhBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMjU1LjAgKTtcblxuXHRcdGNhc2UgSW50MzJBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMjE0NzQ4MzY0Ny4wICk7XG5cblx0XHRjYXNlIEludDE2QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDMyNzY3LjAgKTtcblxuXHRcdGNhc2UgSW50OEFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggdmFsdWUgKiAxMjcuMCApO1xuXG5cdFx0ZGVmYXVsdDpcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnSW52YWxpZCBjb21wb25lbnQgdHlwZS4nICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IE1hdGhVdGlscyA9IHtcblx0REVHMlJBRDogREVHMlJBRCxcblx0UkFEMkRFRzogUkFEMkRFRyxcblx0Z2VuZXJhdGVVVUlEOiBnZW5lcmF0ZVVVSUQsXG5cdGNsYW1wOiBjbGFtcCxcblx0ZXVjbGlkZWFuTW9kdWxvOiBldWNsaWRlYW5Nb2R1bG8sXG5cdG1hcExpbmVhcjogbWFwTGluZWFyLFxuXHRpbnZlcnNlTGVycDogaW52ZXJzZUxlcnAsXG5cdGxlcnA6IGxlcnAsXG5cdGRhbXA6IGRhbXAsXG5cdHBpbmdwb25nOiBwaW5ncG9uZyxcblx0c21vb3Roc3RlcDogc21vb3Roc3RlcCxcblx0c21vb3RoZXJzdGVwOiBzbW9vdGhlcnN0ZXAsXG5cdHJhbmRJbnQ6IHJhbmRJbnQsXG5cdHJhbmRGbG9hdDogcmFuZEZsb2F0LFxuXHRyYW5kRmxvYXRTcHJlYWQ6IHJhbmRGbG9hdFNwcmVhZCxcblx0c2VlZGVkUmFuZG9tOiBzZWVkZWRSYW5kb20sXG5cdGRlZ1RvUmFkOiBkZWdUb1JhZCxcblx0cmFkVG9EZWc6IHJhZFRvRGVnLFxuXHRpc1Bvd2VyT2ZUd286IGlzUG93ZXJPZlR3byxcblx0Y2VpbFBvd2VyT2ZUd286IGNlaWxQb3dlck9mVHdvLFxuXHRmbG9vclBvd2VyT2ZUd286IGZsb29yUG93ZXJPZlR3byxcblx0c2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcjogc2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcixcblx0bm9ybWFsaXplOiBub3JtYWxpemUsXG5cdGRlbm9ybWFsaXplOiBkZW5vcm1hbGl6ZVxufTtcblxuZXhwb3J0IHtcblx0REVHMlJBRCxcblx0UkFEMkRFRyxcblx0Z2VuZXJhdGVVVUlELFxuXHRjbGFtcCxcblx0ZXVjbGlkZWFuTW9kdWxvLFxuXHRtYXBMaW5lYXIsXG5cdGludmVyc2VMZXJwLFxuXHRsZXJwLFxuXHRkYW1wLFxuXHRwaW5ncG9uZyxcblx0c21vb3Roc3RlcCxcblx0c21vb3RoZXJzdGVwLFxuXHRyYW5kSW50LFxuXHRyYW5kRmxvYXQsXG5cdHJhbmRGbG9hdFNwcmVhZCxcblx0c2VlZGVkUmFuZG9tLFxuXHRkZWdUb1JhZCxcblx0cmFkVG9EZWcsXG5cdGlzUG93ZXJPZlR3byxcblx0Y2VpbFBvd2VyT2ZUd28sXG5cdGZsb29yUG93ZXJPZlR3byxcblx0c2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcixcblx0bm9ybWFsaXplLFxuXHRkZW5vcm1hbGl6ZSxcblx0TWF0aFV0aWxzXG59O1xuIiwiaW1wb3J0ICogYXMgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzLmpzJztcblxuY2xhc3MgVmVjdG9yMiB7XG5cblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCApIHtcblxuXHRcdFZlY3RvcjIucHJvdG90eXBlLmlzVmVjdG9yMiA9IHRydWU7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cblx0fVxuXG5cdGdldCB3aWR0aCgpIHtcblxuXHRcdHJldHVybiB0aGlzLng7XG5cblx0fVxuXG5cdHNldCB3aWR0aCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnggPSB2YWx1ZTtcblxuXHR9XG5cblx0Z2V0IGhlaWdodCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnk7XG5cblx0fVxuXG5cdHNldCBoZWlnaHQoIHZhbHVlICkge1xuXG5cdFx0dGhpcy55ID0gdmFsdWU7XG5cblx0fVxuXG5cdHNldCggeCwgeSApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WCggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WSggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0Q29tcG9uZW50KCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q29tcG9uZW50KCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnkgKTtcblxuXHR9XG5cblx0Y29weSggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkKCB2ICkge1xuXG5cdFx0dGhpcy54ICs9IHYueDtcblx0XHR0aGlzLnkgKz0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxlZFZlY3RvciggdiwgcyApIHtcblxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YiggdiApIHtcblxuXHRcdHRoaXMueCAtPSB2Lng7XG5cdFx0dGhpcy55IC09IHYueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdWJTY2FsYXIoIHMgKSB7XG5cblx0XHR0aGlzLnggLT0gcztcblx0XHR0aGlzLnkgLT0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdWJWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54IC0gYi54O1xuXHRcdHRoaXMueSA9IGEueSAtIGIueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseSggdiApIHtcblxuXHRcdHRoaXMueCAqPSB2Lng7XG5cdFx0dGhpcy55ICo9IHYueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ICo9IHNjYWxhcjtcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpdmlkZSggdiApIHtcblxuXHRcdHRoaXMueCAvPSB2Lng7XG5cdFx0dGhpcy55IC89IHYueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXZpZGVTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKCAxIC8gc2NhbGFyICk7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4MyggbSApIHtcblxuXHRcdGNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnk7XG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeSArIGVbIDYgXTtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtaW4oIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYXgoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbGFtcCggbWluLCBtYXggKSB7XG5cblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pbi54LCBNYXRoLm1pbiggbWF4LngsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pbi55LCBNYXRoLm1pbiggbWF4LnksIHRoaXMueSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXBTY2FsYXIoIG1pblZhbCwgbWF4VmFsICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnkgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wTGVuZ3RoKCBtaW4sIG1heCApIHtcblxuXHRcdGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9XG5cblx0Zmxvb3IoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjZWlsKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdW5kKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm91bmRUb1plcm8oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnRydW5jKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnRydW5jKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRuZWdhdGUoKSB7XG5cblx0XHR0aGlzLnggPSAtIHRoaXMueDtcblx0XHR0aGlzLnkgPSAtIHRoaXMueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkb3QoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55O1xuXG5cdH1cblxuXHRjcm9zcyggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnkgLSB0aGlzLnkgKiB2Lng7XG5cblx0fVxuXG5cdGxlbmd0aFNxKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueTtcblxuXHR9XG5cblx0bGVuZ3RoKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICk7XG5cblx0fVxuXG5cdG1hbmhhdHRhbkxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICk7XG5cblx0fVxuXG5cdG5vcm1hbGl6ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggdGhpcy5sZW5ndGgoKSB8fCAxICk7XG5cblx0fVxuXG5cdGFuZ2xlKCkge1xuXG5cdFx0Ly8gY29tcHV0ZXMgdGhlIGFuZ2xlIGluIHJhZGlhbnMgd2l0aCByZXNwZWN0IHRvIHRoZSBwb3NpdGl2ZSB4LWF4aXNcblxuXHRcdGNvbnN0IGFuZ2xlID0gTWF0aC5hdGFuMiggLSB0aGlzLnksIC0gdGhpcy54ICkgKyBNYXRoLlBJO1xuXG5cdFx0cmV0dXJuIGFuZ2xlO1xuXG5cdH1cblxuXHRhbmdsZVRvKCB2ICkge1xuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSBNYXRoLnNxcnQoIHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHJldHVybiBNYXRoLlBJIC8gMjtcblxuXHRcdGNvbnN0IHRoZXRhID0gdGhpcy5kb3QoIHYgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0Ly8gY2xhbXAsIHRvIGhhbmRsZSBudW1lcmljYWwgcHJvYmxlbXNcblxuXHRcdHJldHVybiBNYXRoLmFjb3MoIE1hdGhVdGlscy5jbGFtcCggdGhldGEsIC0gMSwgMSApICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG8oIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSB7XG5cblx0XHRjb25zdCBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2Lnk7XG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xuXG5cdH1cblxuXHRtYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKTtcblxuXHR9XG5cblx0c2V0TGVuZ3RoKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fVxuXG5cdGxlcnAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnBWZWN0b3JzKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ID0gdjEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSA9IHYxLnkgKyAoIHYyLnkgLSB2MS55ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICk7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHR0aGlzLnggPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy55ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy54O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLnk7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3RhdGVBcm91bmQoIGNlbnRlciwgYW5nbGUgKSB7XG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIGFuZ2xlICksIHMgPSBNYXRoLnNpbiggYW5nbGUgKTtcblxuXHRcdGNvbnN0IHggPSB0aGlzLnggLSBjZW50ZXIueDtcblx0XHRjb25zdCB5ID0gdGhpcy55IC0gY2VudGVyLnk7XG5cblx0XHR0aGlzLnggPSB4ICogYyAtIHkgKiBzICsgY2VudGVyLng7XG5cdFx0dGhpcy55ID0geCAqIHMgKyB5ICogYyArIGNlbnRlci55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJhbmRvbSgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucmFuZG9tKCk7XG5cdFx0dGhpcy55ID0gTWF0aC5yYW5kb20oKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHtcblxuXHRcdHlpZWxkIHRoaXMueDtcblx0XHR5aWVsZCB0aGlzLnk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFZlY3RvcjIgfTtcbiIsImNsYXNzIE1hdHJpeDMge1xuXG5cdGNvbnN0cnVjdG9yKCBuMTEsIG4xMiwgbjEzLCBuMjEsIG4yMiwgbjIzLCBuMzEsIG4zMiwgbjMzICkge1xuXG5cdFx0TWF0cml4My5wcm90b3R5cGUuaXNNYXRyaXgzID0gdHJ1ZTtcblxuXHRcdHRoaXMuZWxlbWVudHMgPSBbXG5cblx0XHRcdDEsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMVxuXG5cdFx0XTtcblxuXHRcdGlmICggbjExICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuc2V0KCBuMTEsIG4xMiwgbjEzLCBuMjEsIG4yMiwgbjIzLCBuMzEsIG4zMiwgbjMzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldCggbjExLCBuMTIsIG4xMywgbjIxLCBuMjIsIG4yMywgbjMxLCBuMzIsIG4zMyApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBuMTE7IHRlWyAxIF0gPSBuMjE7IHRlWyAyIF0gPSBuMzE7XG5cdFx0dGVbIDMgXSA9IG4xMjsgdGVbIDQgXSA9IG4yMjsgdGVbIDUgXSA9IG4zMjtcblx0XHR0ZVsgNiBdID0gbjEzOyB0ZVsgNyBdID0gbjIzOyB0ZVsgOCBdID0gbjMzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGlkZW50aXR5KCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBtICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBtZVsgMCBdOyB0ZVsgMSBdID0gbWVbIDEgXTsgdGVbIDIgXSA9IG1lWyAyIF07XG5cdFx0dGVbIDMgXSA9IG1lWyAzIF07IHRlWyA0IF0gPSBtZVsgNCBdOyB0ZVsgNSBdID0gbWVbIDUgXTtcblx0XHR0ZVsgNiBdID0gbWVbIDYgXTsgdGVbIDcgXSA9IG1lWyA3IF07IHRlWyA4IF0gPSBtZVsgOCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGV4dHJhY3RCYXNpcyggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHhBeGlzLnNldEZyb21NYXRyaXgzQ29sdW1uKCB0aGlzLCAwICk7XG5cdFx0eUF4aXMuc2V0RnJvbU1hdHJpeDNDb2x1bW4oIHRoaXMsIDEgKTtcblx0XHR6QXhpcy5zZXRGcm9tTWF0cml4M0NvbHVtbiggdGhpcywgMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXg0KCBtICkge1xuXG5cdFx0Y29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdG1lWyAwIF0sIG1lWyA0IF0sIG1lWyA4IF0sXG5cdFx0XHRtZVsgMSBdLCBtZVsgNSBdLCBtZVsgOSBdLFxuXHRcdFx0bWVbIDIgXSwgbWVbIDYgXSwgbWVbIDEwIF1cblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHkoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLCBtICk7XG5cblx0fVxuXG5cdHByZW11bHRpcGx5KCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApO1xuXG5cdH1cblxuXHRtdWx0aXBseU1hdHJpY2VzKCBhLCBiICkge1xuXG5cdFx0Y29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuXHRcdGNvbnN0IGJlID0gYi5lbGVtZW50cztcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgMyBdLCBhMTMgPSBhZVsgNiBdO1xuXHRcdGNvbnN0IGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA0IF0sIGEyMyA9IGFlWyA3IF07XG5cdFx0Y29uc3QgYTMxID0gYWVbIDIgXSwgYTMyID0gYWVbIDUgXSwgYTMzID0gYWVbIDggXTtcblxuXHRcdGNvbnN0IGIxMSA9IGJlWyAwIF0sIGIxMiA9IGJlWyAzIF0sIGIxMyA9IGJlWyA2IF07XG5cdFx0Y29uc3QgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDQgXSwgYjIzID0gYmVbIDcgXTtcblx0XHRjb25zdCBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNSBdLCBiMzMgPSBiZVsgOCBdO1xuXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMTtcblx0XHR0ZVsgMyBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xuXHRcdHRlWyA2IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzM7XG5cblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxO1xuXHRcdHRlWyA0IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzI7XG5cdFx0dGVbIDcgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMztcblxuXHRcdHRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzE7XG5cdFx0dGVbIDUgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMjtcblx0XHR0ZVsgOCBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5U2NhbGFyKCBzICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSAqPSBzOyB0ZVsgMyBdICo9IHM7IHRlWyA2IF0gKj0gcztcblx0XHR0ZVsgMSBdICo9IHM7IHRlWyA0IF0gKj0gczsgdGVbIDcgXSAqPSBzO1xuXHRcdHRlWyAyIF0gKj0gczsgdGVbIDUgXSAqPSBzOyB0ZVsgOCBdICo9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGV0ZXJtaW5hbnQoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBhID0gdGVbIDAgXSwgYiA9IHRlWyAxIF0sIGMgPSB0ZVsgMiBdLFxuXHRcdFx0ZCA9IHRlWyAzIF0sIGUgPSB0ZVsgNCBdLCBmID0gdGVbIDUgXSxcblx0XHRcdGcgPSB0ZVsgNiBdLCBoID0gdGVbIDcgXSwgaSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYSAqIGUgKiBpIC0gYSAqIGYgKiBoIC0gYiAqIGQgKiBpICsgYiAqIGYgKiBnICsgYyAqIGQgKiBoIC0gYyAqIGUgKiBnO1xuXG5cdH1cblxuXHRpbnZlcnQoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cblx0XHRcdG4xMSA9IHRlWyAwIF0sIG4yMSA9IHRlWyAxIF0sIG4zMSA9IHRlWyAyIF0sXG5cdFx0XHRuMTIgPSB0ZVsgMyBdLCBuMjIgPSB0ZVsgNCBdLCBuMzIgPSB0ZVsgNSBdLFxuXHRcdFx0bjEzID0gdGVbIDYgXSwgbjIzID0gdGVbIDcgXSwgbjMzID0gdGVbIDggXSxcblxuXHRcdFx0dDExID0gbjMzICogbjIyIC0gbjMyICogbjIzLFxuXHRcdFx0dDEyID0gbjMyICogbjEzIC0gbjMzICogbjEyLFxuXHRcdFx0dDEzID0gbjIzICogbjEyIC0gbjIyICogbjEzLFxuXG5cdFx0XHRkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTM7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCApO1xuXG5cdFx0Y29uc3QgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjMxICogbjIzIC0gbjMzICogbjIxICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjMyICogbjIxIC0gbjMxICogbjIyICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgMyBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA0IF0gPSAoIG4zMyAqIG4xMSAtIG4zMSAqIG4xMyApICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4zMSAqIG4xMiAtIG4zMiAqIG4xMSApICogZGV0SW52O1xuXG5cdFx0dGVbIDYgXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgNyBdID0gKCBuMjEgKiBuMTMgLSBuMjMgKiBuMTEgKSAqIGRldEludjtcblx0XHR0ZVsgOCBdID0gKCBuMjIgKiBuMTEgLSBuMjEgKiBuMTIgKSAqIGRldEludjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc3Bvc2UoKSB7XG5cblx0XHRsZXQgdG1wO1xuXHRcdGNvbnN0IG0gPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dG1wID0gbVsgMSBdOyBtWyAxIF0gPSBtWyAzIF07IG1bIDMgXSA9IHRtcDtcblx0XHR0bXAgPSBtWyAyIF07IG1bIDIgXSA9IG1bIDYgXTsgbVsgNiBdID0gdG1wO1xuXHRcdHRtcCA9IG1bIDUgXTsgbVsgNSBdID0gbVsgNyBdOyBtWyA3IF0gPSB0bXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Tm9ybWFsTWF0cml4KCBtYXRyaXg0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeDQoIG1hdHJpeDQgKS5pbnZlcnQoKS50cmFuc3Bvc2UoKTtcblxuXHR9XG5cblx0dHJhbnNwb3NlSW50b0FycmF5KCByICkge1xuXG5cdFx0Y29uc3QgbSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRyWyAwIF0gPSBtWyAwIF07XG5cdFx0clsgMSBdID0gbVsgMyBdO1xuXHRcdHJbIDIgXSA9IG1bIDYgXTtcblx0XHRyWyAzIF0gPSBtWyAxIF07XG5cdFx0clsgNCBdID0gbVsgNCBdO1xuXHRcdHJbIDUgXSA9IG1bIDcgXTtcblx0XHRyWyA2IF0gPSBtWyAyIF07XG5cdFx0clsgNyBdID0gbVsgNSBdO1xuXHRcdHJbIDggXSA9IG1bIDggXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRVdlRyYW5zZm9ybSggdHgsIHR5LCBzeCwgc3ksIHJvdGF0aW9uLCBjeCwgY3kgKSB7XG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIHJvdGF0aW9uICk7XG5cdFx0Y29uc3QgcyA9IE1hdGguc2luKCByb3RhdGlvbiApO1xuXG5cdFx0dGhpcy5zZXQoXG5cdFx0XHRzeCAqIGMsIHN4ICogcywgLSBzeCAqICggYyAqIGN4ICsgcyAqIGN5ICkgKyBjeCArIHR4LFxuXHRcdFx0LSBzeSAqIHMsIHN5ICogYywgLSBzeSAqICggLSBzICogY3ggKyBjICogY3kgKSArIGN5ICsgdHksXG5cdFx0XHQwLCAwLCAxXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvL1xuXG5cdHNjYWxlKCBzeCwgc3kgKSB7XG5cblx0XHR0aGlzLnByZW11bHRpcGx5KCBfbTMubWFrZVNjYWxlKCBzeCwgc3kgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdGF0ZSggdGhldGEgKSB7XG5cblx0XHR0aGlzLnByZW11bHRpcGx5KCBfbTMubWFrZVJvdGF0aW9uKCAtIHRoZXRhICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc2xhdGUoIHR4LCB0eSApIHtcblxuXHRcdHRoaXMucHJlbXVsdGlwbHkoIF9tMy5tYWtlVHJhbnNsYXRpb24oIHR4LCB0eSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Ly8gZm9yIDJEIFRyYW5zZm9ybXNcblxuXHRtYWtlVHJhbnNsYXRpb24oIHgsIHkgKSB7XG5cblx0XHRpZiAoIHguaXNWZWN0b3IyICkge1xuXG5cdFx0XHR0aGlzLnNldChcblxuXHRcdFx0XHQxLCAwLCB4LngsXG5cdFx0XHRcdDAsIDEsIHgueSxcblx0XHRcdFx0MCwgMCwgMVxuXG5cdFx0XHQpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5zZXQoXG5cblx0XHRcdFx0MSwgMCwgeCxcblx0XHRcdFx0MCwgMSwgeSxcblx0XHRcdFx0MCwgMCwgMVxuXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvbiggdGhldGEgKSB7XG5cblx0XHQvLyBjb3VudGVyY2xvY2t3aXNlXG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cdFx0Y29uc3QgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdGMsIC0gcywgMCxcblx0XHRcdHMsIGMsIDAsXG5cdFx0XHQwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VTY2FsZSggeCwgeSApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHR4LCAwLCAwLFxuXHRcdFx0MCwgeSwgMCxcblx0XHRcdDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Ly9cblxuXHRlcXVhbHMoIG1hdHJpeCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGVbIGkgXSAhPT0gbWVbIGkgXSApIHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5lbGVtZW50c1sgaSBdID0gYXJyYXlbIGkgKyBvZmZzZXQgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGVbIDAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGVbIDEgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA1IF0gPSB0ZVsgNSBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDggXSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuZnJvbUFycmF5KCB0aGlzLmVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9tMyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKTtcblxuZXhwb3J0IHsgTWF0cml4MyB9O1xuIiwiZnVuY3Rpb24gYXJyYXlNaW4oIGFycmF5ICkge1xuXG5cdGlmICggYXJyYXkubGVuZ3RoID09PSAwICkgcmV0dXJuIEluZmluaXR5O1xuXG5cdGxldCBtaW4gPSBhcnJheVsgMCBdO1xuXG5cdGZvciAoIGxldCBpID0gMSwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7ICsrIGkgKSB7XG5cblx0XHRpZiAoIGFycmF5WyBpIF0gPCBtaW4gKSBtaW4gPSBhcnJheVsgaSBdO1xuXG5cdH1cblxuXHRyZXR1cm4gbWluO1xuXG59XG5cbmZ1bmN0aW9uIGFycmF5TWF4KCBhcnJheSApIHtcblxuXHRpZiAoIGFycmF5Lmxlbmd0aCA9PT0gMCApIHJldHVybiAtIEluZmluaXR5O1xuXG5cdGxldCBtYXggPSBhcnJheVsgMCBdO1xuXG5cdGZvciAoIGxldCBpID0gMSwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7ICsrIGkgKSB7XG5cblx0XHRpZiAoIGFycmF5WyBpIF0gPiBtYXggKSBtYXggPSBhcnJheVsgaSBdO1xuXG5cdH1cblxuXHRyZXR1cm4gbWF4O1xuXG59XG5cbmZ1bmN0aW9uIGFycmF5TmVlZHNVaW50MzIoIGFycmF5ICkge1xuXG5cdC8vIGFzc3VtZXMgbGFyZ2VyIHZhbHVlcyB1c3VhbGx5IG9uIGxhc3RcblxuXHRmb3IgKCBsZXQgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgLS0gaSApIHtcblxuXHRcdGlmICggYXJyYXlbIGkgXSA+PSA2NTUzNSApIHJldHVybiB0cnVlOyAvLyBhY2NvdW50IGZvciBQUklNSVRJVkVfUkVTVEFSVF9GSVhFRF9JTkRFWCwgIzI0NTY1XG5cblx0fVxuXG5cdHJldHVybiBmYWxzZTtcblxufVxuXG5jb25zdCBUWVBFRF9BUlJBWVMgPSB7XG5cdEludDhBcnJheTogSW50OEFycmF5LFxuXHRVaW50OEFycmF5OiBVaW50OEFycmF5LFxuXHRVaW50OENsYW1wZWRBcnJheTogVWludDhDbGFtcGVkQXJyYXksXG5cdEludDE2QXJyYXk6IEludDE2QXJyYXksXG5cdFVpbnQxNkFycmF5OiBVaW50MTZBcnJheSxcblx0SW50MzJBcnJheTogSW50MzJBcnJheSxcblx0VWludDMyQXJyYXk6IFVpbnQzMkFycmF5LFxuXHRGbG9hdDMyQXJyYXk6IEZsb2F0MzJBcnJheSxcblx0RmxvYXQ2NEFycmF5OiBGbG9hdDY0QXJyYXlcbn07XG5cbmZ1bmN0aW9uIGdldFR5cGVkQXJyYXkoIHR5cGUsIGJ1ZmZlciApIHtcblxuXHRyZXR1cm4gbmV3IFRZUEVEX0FSUkFZU1sgdHlwZSBdKCBidWZmZXIgKTtcblxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMoIG5hbWUgKSB7XG5cblx0cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCBuYW1lICk7XG5cbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2FudmFzRWxlbWVudCgpIHtcblxuXHRjb25zdCBjYW52YXMgPSBjcmVhdGVFbGVtZW50TlMoICdjYW52YXMnICk7XG5cdGNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0cmV0dXJuIGNhbnZhcztcblxufVxuXG5jb25zdCBfY2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gd2Fybk9uY2UoIG1lc3NhZ2UgKSB7XG5cblx0aWYgKCBtZXNzYWdlIGluIF9jYWNoZSApIHJldHVybjtcblxuXHRfY2FjaGVbIG1lc3NhZ2UgXSA9IHRydWU7XG5cblx0Y29uc29sZS53YXJuKCBtZXNzYWdlICk7XG5cbn1cblxuZnVuY3Rpb24gcHJvYmVBc3luYyggZ2wsIHN5bmMsIGludGVydmFsICkge1xuXG5cdHJldHVybiBuZXcgUHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7XG5cblx0XHRmdW5jdGlvbiBwcm9iZSgpIHtcblxuXHRcdFx0c3dpdGNoICggZ2wuY2xpZW50V2FpdFN5bmMoIHN5bmMsIGdsLlNZTkNfRkxVU0hfQ09NTUFORFNfQklULCAwICkgKSB7XG5cblx0XHRcdFx0Y2FzZSBnbC5XQUlUX0ZBSUxFRDpcblx0XHRcdFx0XHRyZWplY3QoKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIGdsLlRJTUVPVVRfRVhQSVJFRDpcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCBwcm9iZSwgaW50ZXJ2YWwgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHJlc29sdmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c2V0VGltZW91dCggcHJvYmUsIGludGVydmFsICk7XG5cblx0fSApO1xuXG59XG5cbmV4cG9ydCB7IGFycmF5TWluLCBhcnJheU1heCwgYXJyYXlOZWVkc1VpbnQzMiwgZ2V0VHlwZWRBcnJheSwgY3JlYXRlRWxlbWVudE5TLCBjcmVhdGVDYW52YXNFbGVtZW50LCB3YXJuT25jZSwgcHJvYmVBc3luYyB9O1xuIiwiaW1wb3J0IHsgU1JHQkNvbG9yU3BhY2UsIExpbmVhclNSR0JDb2xvclNwYWNlLCBEaXNwbGF5UDNDb2xvclNwYWNlLCBMaW5lYXJEaXNwbGF5UDNDb2xvclNwYWNlLCBSZWM3MDlQcmltYXJpZXMsIFAzUHJpbWFyaWVzLCBTUkdCVHJhbnNmZXIsIExpbmVhclRyYW5zZmVyLCBOb0NvbG9yU3BhY2UsIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IE1hdHJpeDMgfSBmcm9tICcuL01hdHJpeDMuanMnO1xuXG4vKipcbiAqIE1hdHJpY2VzIGNvbnZlcnRpbmcgUDMgPC0+IFJlYy4gNzA5IHByaW1hcmllcywgd2l0aG91dCBnYW11dCBtYXBwaW5nXG4gKiBvciBjbGlwcGluZy4gQmFzZWQgb24gVzNDIHNwZWNpZmljYXRpb25zIGZvciBzUkdCIGFuZCBEaXNwbGF5IFAzLFxuICogYW5kIElDQyBzcGVjaWZpY2F0aW9ucyBmb3IgdGhlIEQ1MCBjb25uZWN0aW9uIHNwYWNlLiBWYWx1ZXMgaW4vb3V0XG4gKiBhcmUgX2xpbmVhcl8gc1JHQiBhbmQgX2xpbmVhcl8gRGlzcGxheSBQMy5cbiAqXG4gKiBOb3RlIHRoYXQgYm90aCBzUkdCIGFuZCBEaXNwbGF5IFAzIHVzZSB0aGUgc1JHQiB0cmFuc2ZlciBmdW5jdGlvbnMuXG4gKlxuICogUmVmZXJlbmNlOlxuICogLSBodHRwOi8vd3d3LnJ1c3NlbGxjb3R0cmVsbC5jb20vcGhvdG8vbWF0cml4Q2FsY3VsYXRvci5odG1cbiAqL1xuXG5jb25zdCBMSU5FQVJfU1JHQl9UT19MSU5FQVJfRElTUExBWV9QMyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKS5zZXQoXG5cdDAuODIyNDYyMSwgMC4xNzc1MzgsIDAuMCxcblx0MC4wMzMxOTQxLCAwLjk2NjgwNTgsIDAuMCxcblx0MC4wMTcwODI3LCAwLjA3MjM5NzQsIDAuOTEwNTE5OSxcbik7XG5cbmNvbnN0IExJTkVBUl9ESVNQTEFZX1AzX1RPX0xJTkVBUl9TUkdCID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpLnNldChcblx0MS4yMjQ5NDAxLCAtIDAuMjI0OTQwNCwgMC4wLFxuXHQtIDAuMDQyMDU2OSwgMS4wNDIwNTcxLCAwLjAsXG5cdC0gMC4wMTk2Mzc2LCAtIDAuMDc4NjM2MSwgMS4wOTgyNzM1XG4pO1xuXG4vKipcbiAqIERlZmluZXMgc3VwcG9ydGVkIGNvbG9yIHNwYWNlcyBieSB0cmFuc2ZlciBmdW5jdGlvbiBhbmQgcHJpbWFyaWVzLFxuICogYW5kIHByb3ZpZGVzIGNvbnZlcnNpb25zIHRvL2Zyb20gdGhlIExpbmVhci1zUkdCIHJlZmVyZW5jZSBzcGFjZS5cbiAqL1xuY29uc3QgQ09MT1JfU1BBQ0VTID0ge1xuXHRbIExpbmVhclNSR0JDb2xvclNwYWNlIF06IHtcblx0XHR0cmFuc2ZlcjogTGluZWFyVHJhbnNmZXIsXG5cdFx0cHJpbWFyaWVzOiBSZWM3MDlQcmltYXJpZXMsXG5cdFx0dG9SZWZlcmVuY2U6ICggY29sb3IgKSA9PiBjb2xvcixcblx0XHRmcm9tUmVmZXJlbmNlOiAoIGNvbG9yICkgPT4gY29sb3IsXG5cdH0sXG5cdFsgU1JHQkNvbG9yU3BhY2UgXToge1xuXHRcdHRyYW5zZmVyOiBTUkdCVHJhbnNmZXIsXG5cdFx0cHJpbWFyaWVzOiBSZWM3MDlQcmltYXJpZXMsXG5cdFx0dG9SZWZlcmVuY2U6ICggY29sb3IgKSA9PiBjb2xvci5jb252ZXJ0U1JHQlRvTGluZWFyKCksXG5cdFx0ZnJvbVJlZmVyZW5jZTogKCBjb2xvciApID0+IGNvbG9yLmNvbnZlcnRMaW5lYXJUb1NSR0IoKSxcblx0fSxcblx0WyBMaW5lYXJEaXNwbGF5UDNDb2xvclNwYWNlIF06IHtcblx0XHR0cmFuc2ZlcjogTGluZWFyVHJhbnNmZXIsXG5cdFx0cHJpbWFyaWVzOiBQM1ByaW1hcmllcyxcblx0XHR0b1JlZmVyZW5jZTogKCBjb2xvciApID0+IGNvbG9yLmFwcGx5TWF0cml4MyggTElORUFSX0RJU1BMQVlfUDNfVE9fTElORUFSX1NSR0IgKSxcblx0XHRmcm9tUmVmZXJlbmNlOiAoIGNvbG9yICkgPT4gY29sb3IuYXBwbHlNYXRyaXgzKCBMSU5FQVJfU1JHQl9UT19MSU5FQVJfRElTUExBWV9QMyApLFxuXHR9LFxuXHRbIERpc3BsYXlQM0NvbG9yU3BhY2UgXToge1xuXHRcdHRyYW5zZmVyOiBTUkdCVHJhbnNmZXIsXG5cdFx0cHJpbWFyaWVzOiBQM1ByaW1hcmllcyxcblx0XHR0b1JlZmVyZW5jZTogKCBjb2xvciApID0+IGNvbG9yLmNvbnZlcnRTUkdCVG9MaW5lYXIoKS5hcHBseU1hdHJpeDMoIExJTkVBUl9ESVNQTEFZX1AzX1RPX0xJTkVBUl9TUkdCICksXG5cdFx0ZnJvbVJlZmVyZW5jZTogKCBjb2xvciApID0+IGNvbG9yLmFwcGx5TWF0cml4MyggTElORUFSX1NSR0JfVE9fTElORUFSX0RJU1BMQVlfUDMgKS5jb252ZXJ0TGluZWFyVG9TUkdCKCksXG5cdH0sXG59O1xuXG5jb25zdCBTVVBQT1JURURfV09SS0lOR19DT0xPUl9TUEFDRVMgPSBuZXcgU2V0KCBbIExpbmVhclNSR0JDb2xvclNwYWNlLCBMaW5lYXJEaXNwbGF5UDNDb2xvclNwYWNlIF0gKTtcblxuZXhwb3J0IGNvbnN0IENvbG9yTWFuYWdlbWVudCA9IHtcblxuXHRlbmFibGVkOiB0cnVlLFxuXG5cdF93b3JraW5nQ29sb3JTcGFjZTogTGluZWFyU1JHQkNvbG9yU3BhY2UsXG5cblx0Z2V0IHdvcmtpbmdDb2xvclNwYWNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3dvcmtpbmdDb2xvclNwYWNlO1xuXG5cdH0sXG5cblx0c2V0IHdvcmtpbmdDb2xvclNwYWNlKCBjb2xvclNwYWNlICkge1xuXG5cdFx0aWYgKCAhIFNVUFBPUlRFRF9XT1JLSU5HX0NPTE9SX1NQQUNFUy5oYXMoIGNvbG9yU3BhY2UgKSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCBgVW5zdXBwb3J0ZWQgd29ya2luZyBjb2xvciBzcGFjZSwgXCIkeyBjb2xvclNwYWNlIH1cIi5gICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl93b3JraW5nQ29sb3JTcGFjZSA9IGNvbG9yU3BhY2U7XG5cblx0fSxcblxuXHRjb252ZXJ0OiBmdW5jdGlvbiAoIGNvbG9yLCBzb3VyY2VDb2xvclNwYWNlLCB0YXJnZXRDb2xvclNwYWNlICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlIHx8IHNvdXJjZUNvbG9yU3BhY2UgPT09IHRhcmdldENvbG9yU3BhY2UgfHwgISBzb3VyY2VDb2xvclNwYWNlIHx8ICEgdGFyZ2V0Q29sb3JTcGFjZSApIHtcblxuXHRcdFx0cmV0dXJuIGNvbG9yO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgc291cmNlVG9SZWZlcmVuY2UgPSBDT0xPUl9TUEFDRVNbIHNvdXJjZUNvbG9yU3BhY2UgXS50b1JlZmVyZW5jZTtcblx0XHRjb25zdCB0YXJnZXRGcm9tUmVmZXJlbmNlID0gQ09MT1JfU1BBQ0VTWyB0YXJnZXRDb2xvclNwYWNlIF0uZnJvbVJlZmVyZW5jZTtcblxuXHRcdHJldHVybiB0YXJnZXRGcm9tUmVmZXJlbmNlKCBzb3VyY2VUb1JlZmVyZW5jZSggY29sb3IgKSApO1xuXG5cdH0sXG5cblx0ZnJvbVdvcmtpbmdDb2xvclNwYWNlOiBmdW5jdGlvbiAoIGNvbG9yLCB0YXJnZXRDb2xvclNwYWNlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29udmVydCggY29sb3IsIHRoaXMuX3dvcmtpbmdDb2xvclNwYWNlLCB0YXJnZXRDb2xvclNwYWNlICk7XG5cblx0fSxcblxuXHR0b1dvcmtpbmdDb2xvclNwYWNlOiBmdW5jdGlvbiAoIGNvbG9yLCBzb3VyY2VDb2xvclNwYWNlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29udmVydCggY29sb3IsIHNvdXJjZUNvbG9yU3BhY2UsIHRoaXMuX3dvcmtpbmdDb2xvclNwYWNlICk7XG5cblx0fSxcblxuXHRnZXRQcmltYXJpZXM6IGZ1bmN0aW9uICggY29sb3JTcGFjZSApIHtcblxuXHRcdHJldHVybiBDT0xPUl9TUEFDRVNbIGNvbG9yU3BhY2UgXS5wcmltYXJpZXM7XG5cblx0fSxcblxuXHRnZXRUcmFuc2ZlcjogZnVuY3Rpb24gKCBjb2xvclNwYWNlICkge1xuXG5cdFx0aWYgKCBjb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgKSByZXR1cm4gTGluZWFyVHJhbnNmZXI7XG5cblx0XHRyZXR1cm4gQ09MT1JfU1BBQ0VTWyBjb2xvclNwYWNlIF0udHJhbnNmZXI7XG5cblx0fSxcblxufTtcblxuXG5leHBvcnQgZnVuY3Rpb24gU1JHQlRvTGluZWFyKCBjICkge1xuXG5cdHJldHVybiAoIGMgPCAwLjA0MDQ1ICkgPyBjICogMC4wNzczOTkzODA4IDogTWF0aC5wb3coIGMgKiAwLjk0Nzg2NzI5ODYgKyAwLjA1MjEzMjcwMTQsIDIuNCApO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMaW5lYXJUb1NSR0IoIGMgKSB7XG5cblx0cmV0dXJuICggYyA8IDAuMDAzMTMwOCApID8gYyAqIDEyLjkyIDogMS4wNTUgKiAoIE1hdGgucG93KCBjLCAwLjQxNjY2ICkgKSAtIDAuMDU1O1xuXG59XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50TlMgfSBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgeyBTUkdCVG9MaW5lYXIgfSBmcm9tICcuLi9tYXRoL0NvbG9yTWFuYWdlbWVudC5qcyc7XG5cbmxldCBfY2FudmFzO1xuXG5jbGFzcyBJbWFnZVV0aWxzIHtcblxuXHRzdGF0aWMgZ2V0RGF0YVVSTCggaW1hZ2UgKSB7XG5cblx0XHRpZiAoIC9eZGF0YTovaS50ZXN0KCBpbWFnZS5zcmMgKSApIHtcblxuXHRcdFx0cmV0dXJuIGltYWdlLnNyYztcblxuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ID09PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0cmV0dXJuIGltYWdlLnNyYztcblxuXHRcdH1cblxuXHRcdGxldCBjYW52YXM7XG5cblx0XHRpZiAoIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB7XG5cblx0XHRcdGNhbnZhcyA9IGltYWdlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBfY2FudmFzID09PSB1bmRlZmluZWQgKSBfY2FudmFzID0gY3JlYXRlRWxlbWVudE5TKCAnY2FudmFzJyApO1xuXG5cdFx0XHRfY2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG5cdFx0XHRfY2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcblxuXHRcdFx0Y29uc3QgY29udGV4dCA9IF9jYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXG5cdFx0XHRpZiAoIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VEYXRhICkge1xuXG5cdFx0XHRcdGNvbnRleHQucHV0SW1hZ2VEYXRhKCBpbWFnZSwgMCwgMCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZSwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNhbnZhcyA9IF9jYW52YXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNhbnZhcy53aWR0aCA+IDIwNDggfHwgY2FudmFzLmhlaWdodCA+IDIwNDggKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlVXRpbHMuZ2V0RGF0YVVSTDogSW1hZ2UgY29udmVydGVkIHRvIGpwZyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucycsIGltYWdlICk7XG5cblx0XHRcdHJldHVybiBjYW52YXMudG9EYXRhVVJMKCAnaW1hZ2UvanBlZycsIDAuNiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoICdpbWFnZS9wbmcnICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHN0YXRpYyBzUkdCVG9MaW5lYXIoIGltYWdlICkge1xuXG5cdFx0aWYgKCAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB8fFxuXHRcdFx0KCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB8fFxuXHRcdFx0KCB0eXBlb2YgSW1hZ2VCaXRtYXAgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VCaXRtYXAgKSApIHtcblxuXHRcdFx0Y29uc3QgY2FudmFzID0gY3JlYXRlRWxlbWVudE5TKCAnY2FudmFzJyApO1xuXG5cdFx0XHRjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG5cblx0XHRcdGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoIGltYWdlLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdGNvbnN0IGltYWdlRGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cdFx0XHRjb25zdCBkYXRhID0gaW1hZ2VEYXRhLmRhdGE7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGRhdGFbIGkgXSA9IFNSR0JUb0xpbmVhciggZGF0YVsgaSBdIC8gMjU1ICkgKiAyNTU7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29udGV4dC5wdXRJbWFnZURhdGEoIGltYWdlRGF0YSwgMCwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FudmFzO1xuXG5cdFx0fSBlbHNlIGlmICggaW1hZ2UuZGF0YSApIHtcblxuXHRcdFx0Y29uc3QgZGF0YSA9IGltYWdlLmRhdGEuc2xpY2UoIDAgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBkYXRhIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkgKSB7XG5cblx0XHRcdFx0XHRkYXRhWyBpIF0gPSBNYXRoLmZsb29yKCBTUkdCVG9MaW5lYXIoIGRhdGFbIGkgXSAvIDI1NSApICogMjU1ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGFzc3VtaW5nIGZsb2F0XG5cblx0XHRcdFx0XHRkYXRhWyBpIF0gPSBTUkdCVG9MaW5lYXIoIGRhdGFbIGkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHR3aWR0aDogaW1hZ2Uud2lkdGgsXG5cdFx0XHRcdGhlaWdodDogaW1hZ2UuaGVpZ2h0XG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VVdGlscy5zUkdCVG9MaW5lYXIoKTogVW5zdXBwb3J0ZWQgaW1hZ2UgdHlwZS4gTm8gY29sb3Igc3BhY2UgY29udmVyc2lvbiBhcHBsaWVkLicgKTtcblx0XHRcdHJldHVybiBpbWFnZTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgSW1hZ2VVdGlscyB9O1xuIiwiaW1wb3J0IHsgSW1hZ2VVdGlscyB9IGZyb20gJy4uL2V4dHJhcy9JbWFnZVV0aWxzLmpzJztcbmltcG9ydCAqIGFzIE1hdGhVdGlscyBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XG5cbmxldCBfc291cmNlSWQgPSAwO1xuXG5jbGFzcyBTb3VyY2Uge1xuXG5cdGNvbnN0cnVjdG9yKCBkYXRhID0gbnVsbCApIHtcblxuXHRcdHRoaXMuaXNTb3VyY2UgPSB0cnVlO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfc291cmNlSWQgKysgfSApO1xuXG5cdFx0dGhpcy51dWlkID0gTWF0aFV0aWxzLmdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0dGhpcy5kYXRhID0gZGF0YTtcblx0XHR0aGlzLmRhdGFSZWFkeSA9IHRydWU7XG5cblx0XHR0aGlzLnZlcnNpb24gPSAwO1xuXG5cdH1cblxuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEuaW1hZ2VzWyB0aGlzLnV1aWQgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gbWV0YS5pbWFnZXNbIHRoaXMudXVpZCBdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgb3V0cHV0ID0ge1xuXHRcdFx0dXVpZDogdGhpcy51dWlkLFxuXHRcdFx0dXJsOiAnJ1xuXHRcdH07XG5cblx0XHRjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuXG5cdFx0aWYgKCBkYXRhICE9PSBudWxsICkge1xuXG5cdFx0XHRsZXQgdXJsO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblxuXHRcdFx0XHQvLyBjdWJlIHRleHR1cmVcblxuXHRcdFx0XHR1cmwgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRhdGFbIGkgXS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHR1cmwucHVzaCggc2VyaWFsaXplSW1hZ2UoIGRhdGFbIGkgXS5pbWFnZSApICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR1cmwucHVzaCggc2VyaWFsaXplSW1hZ2UoIGRhdGFbIGkgXSApICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIHRleHR1cmVcblxuXHRcdFx0XHR1cmwgPSBzZXJpYWxpemVJbWFnZSggZGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dHB1dC51cmwgPSB1cmw7XG5cblx0XHR9XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRtZXRhLmltYWdlc1sgdGhpcy51dWlkIF0gPSBvdXRwdXQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0aWYgKCAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB8fFxuXHRcdCggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50ICkgfHxcblx0XHQoIHR5cGVvZiBJbWFnZUJpdG1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApICkge1xuXG5cdFx0Ly8gZGVmYXVsdCBpbWFnZXNcblxuXHRcdHJldHVybiBJbWFnZVV0aWxzLmdldERhdGFVUkwoIGltYWdlICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggaW1hZ2UuZGF0YSApIHtcblxuXHRcdFx0Ly8gaW1hZ2VzIG9mIERhdGFUZXh0dXJlXG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGRhdGE6IEFycmF5LmZyb20oIGltYWdlLmRhdGEgKSxcblx0XHRcdFx0d2lkdGg6IGltYWdlLndpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodCxcblx0XHRcdFx0dHlwZTogaW1hZ2UuZGF0YS5jb25zdHJ1Y3Rvci5uYW1lXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVGV4dHVyZTogVW5hYmxlIHRvIHNlcmlhbGl6ZSBUZXh0dXJlLicgKTtcblx0XHRcdHJldHVybiB7fTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgU291cmNlIH07XG4iLCJpbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuLi9jb3JlL0V2ZW50RGlzcGF0Y2hlci5qcyc7XG5pbXBvcnQge1xuXHRNaXJyb3JlZFJlcGVhdFdyYXBwaW5nLFxuXHRDbGFtcFRvRWRnZVdyYXBwaW5nLFxuXHRSZXBlYXRXcmFwcGluZyxcblx0VW5zaWduZWRCeXRlVHlwZSxcblx0UkdCQUZvcm1hdCxcblx0TGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLFxuXHRMaW5lYXJGaWx0ZXIsXG5cdFVWTWFwcGluZyxcblx0Tm9Db2xvclNwYWNlLFxufSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0ICogYXMgTWF0aFV0aWxzIGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgTWF0cml4MyB9IGZyb20gJy4uL21hdGgvTWF0cml4My5qcyc7XG5pbXBvcnQgeyBTb3VyY2UgfSBmcm9tICcuL1NvdXJjZS5qcyc7XG5cbmxldCBfdGV4dHVyZUlkID0gMDtcblxuY2xhc3MgVGV4dHVyZSBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0Y29uc3RydWN0b3IoIGltYWdlID0gVGV4dHVyZS5ERUZBVUxUX0lNQUdFLCBtYXBwaW5nID0gVGV4dHVyZS5ERUZBVUxUX01BUFBJTkcsIHdyYXBTID0gQ2xhbXBUb0VkZ2VXcmFwcGluZywgd3JhcFQgPSBDbGFtcFRvRWRnZVdyYXBwaW5nLCBtYWdGaWx0ZXIgPSBMaW5lYXJGaWx0ZXIsIG1pbkZpbHRlciA9IExpbmVhck1pcG1hcExpbmVhckZpbHRlciwgZm9ybWF0ID0gUkdCQUZvcm1hdCwgdHlwZSA9IFVuc2lnbmVkQnl0ZVR5cGUsIGFuaXNvdHJvcHkgPSBUZXh0dXJlLkRFRkFVTFRfQU5JU09UUk9QWSwgY29sb3JTcGFjZSA9IE5vQ29sb3JTcGFjZSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzVGV4dHVyZSA9IHRydWU7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF90ZXh0dXJlSWQgKysgfSApO1xuXG5cdFx0dGhpcy51dWlkID0gTWF0aFV0aWxzLmdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cblx0XHR0aGlzLnNvdXJjZSA9IG5ldyBTb3VyY2UoIGltYWdlICk7XG5cdFx0dGhpcy5taXBtYXBzID0gW107XG5cblx0XHR0aGlzLm1hcHBpbmcgPSBtYXBwaW5nO1xuXHRcdHRoaXMuY2hhbm5lbCA9IDA7XG5cblx0XHR0aGlzLndyYXBTID0gd3JhcFM7XG5cdFx0dGhpcy53cmFwVCA9IHdyYXBUO1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXI7XG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXI7XG5cblx0XHR0aGlzLmFuaXNvdHJvcHkgPSBhbmlzb3Ryb3B5O1xuXG5cdFx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdFx0dGhpcy5pbnRlcm5hbEZvcm1hdCA9IG51bGw7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblxuXHRcdHRoaXMub2Zmc2V0ID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcblx0XHR0aGlzLnJlcGVhdCA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cdFx0dGhpcy5jZW50ZXIgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xuXHRcdHRoaXMucm90YXRpb24gPSAwO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcblx0XHR0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7XG5cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHRydWU7XG5cdFx0dGhpcy5wcmVtdWx0aXBseUFscGhhID0gZmFsc2U7XG5cdFx0dGhpcy5mbGlwWSA9IHRydWU7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSA0O1x0Ly8gdmFsaWQgdmFsdWVzOiAxLCAyLCA0LCA4IChzZWUgaHR0cDovL3d3dy5raHJvbm9zLm9yZy9vcGVuZ2xlcy9zZGsvZG9jcy9tYW4veGh0bWwvZ2xQaXhlbFN0b3JlaS54bWwpXG5cblx0XHR0aGlzLmNvbG9yU3BhY2UgPSBjb2xvclNwYWNlO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IHt9O1xuXG5cdFx0dGhpcy52ZXJzaW9uID0gMDtcblx0XHR0aGlzLm9uVXBkYXRlID0gbnVsbDtcblxuXHRcdHRoaXMuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gZmFsc2U7IC8vIGluZGljYXRlcyB3aGV0aGVyIGEgdGV4dHVyZSBiZWxvbmdzIHRvIGEgcmVuZGVyIHRhcmdldCBvciBub3Rcblx0XHR0aGlzLnBtcmVtVmVyc2lvbiA9IDA7IC8vIGluZGljYXRlcyB3aGV0aGVyIHRoaXMgdGV4dHVyZSBzaG91bGQgYmUgcHJvY2Vzc2VkIGJ5IFBNUkVNR2VuZXJhdG9yIG9yIG5vdCAob25seSByZWxldmFudCBmb3IgcmVuZGVyIHRhcmdldCB0ZXh0dXJlcylcblxuXHR9XG5cblx0Z2V0IGltYWdlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc291cmNlLmRhdGE7XG5cblx0fVxuXG5cdHNldCBpbWFnZSggdmFsdWUgPSBudWxsICkge1xuXG5cdFx0dGhpcy5zb3VyY2UuZGF0YSA9IHZhbHVlO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXgoKSB7XG5cblx0XHR0aGlzLm1hdHJpeC5zZXRVdlRyYW5zZm9ybSggdGhpcy5vZmZzZXQueCwgdGhpcy5vZmZzZXQueSwgdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueSwgdGhpcy5yb3RhdGlvbiwgdGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHR0aGlzLnNvdXJjZSA9IHNvdXJjZS5zb3VyY2U7XG5cdFx0dGhpcy5taXBtYXBzID0gc291cmNlLm1pcG1hcHMuc2xpY2UoIDAgKTtcblxuXHRcdHRoaXMubWFwcGluZyA9IHNvdXJjZS5tYXBwaW5nO1xuXHRcdHRoaXMuY2hhbm5lbCA9IHNvdXJjZS5jaGFubmVsO1xuXG5cdFx0dGhpcy53cmFwUyA9IHNvdXJjZS53cmFwUztcblx0XHR0aGlzLndyYXBUID0gc291cmNlLndyYXBUO1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBzb3VyY2UubWFnRmlsdGVyO1xuXHRcdHRoaXMubWluRmlsdGVyID0gc291cmNlLm1pbkZpbHRlcjtcblxuXHRcdHRoaXMuYW5pc290cm9weSA9IHNvdXJjZS5hbmlzb3Ryb3B5O1xuXG5cdFx0dGhpcy5mb3JtYXQgPSBzb3VyY2UuZm9ybWF0O1xuXHRcdHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBzb3VyY2UuaW50ZXJuYWxGb3JtYXQ7XG5cdFx0dGhpcy50eXBlID0gc291cmNlLnR5cGU7XG5cblx0XHR0aGlzLm9mZnNldC5jb3B5KCBzb3VyY2Uub2Zmc2V0ICk7XG5cdFx0dGhpcy5yZXBlYXQuY29weSggc291cmNlLnJlcGVhdCApO1xuXHRcdHRoaXMuY2VudGVyLmNvcHkoIHNvdXJjZS5jZW50ZXIgKTtcblx0XHR0aGlzLnJvdGF0aW9uID0gc291cmNlLnJvdGF0aW9uO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXguY29weSggc291cmNlLm1hdHJpeCApO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBzb3VyY2UuZ2VuZXJhdGVNaXBtYXBzO1xuXHRcdHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IHNvdXJjZS5wcmVtdWx0aXBseUFscGhhO1xuXHRcdHRoaXMuZmxpcFkgPSBzb3VyY2UuZmxpcFk7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSBzb3VyY2UudW5wYWNrQWxpZ25tZW50O1xuXHRcdHRoaXMuY29sb3JTcGFjZSA9IHNvdXJjZS5jb2xvclNwYWNlO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBzb3VyY2UudXNlckRhdGEgKSApO1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJldHVybiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG91dHB1dCA9IHtcblxuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC42LFxuXHRcdFx0XHR0eXBlOiAnVGV4dHVyZScsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ1RleHR1cmUudG9KU09OJ1xuXHRcdFx0fSxcblxuXHRcdFx0dXVpZDogdGhpcy51dWlkLFxuXHRcdFx0bmFtZTogdGhpcy5uYW1lLFxuXG5cdFx0XHRpbWFnZTogdGhpcy5zb3VyY2UudG9KU09OKCBtZXRhICkudXVpZCxcblxuXHRcdFx0bWFwcGluZzogdGhpcy5tYXBwaW5nLFxuXHRcdFx0Y2hhbm5lbDogdGhpcy5jaGFubmVsLFxuXG5cdFx0XHRyZXBlYXQ6IFsgdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueSBdLFxuXHRcdFx0b2Zmc2V0OiBbIHRoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnkgXSxcblx0XHRcdGNlbnRlcjogWyB0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55IF0sXG5cdFx0XHRyb3RhdGlvbjogdGhpcy5yb3RhdGlvbixcblxuXHRcdFx0d3JhcDogWyB0aGlzLndyYXBTLCB0aGlzLndyYXBUIF0sXG5cblx0XHRcdGZvcm1hdDogdGhpcy5mb3JtYXQsXG5cdFx0XHRpbnRlcm5hbEZvcm1hdDogdGhpcy5pbnRlcm5hbEZvcm1hdCxcblx0XHRcdHR5cGU6IHRoaXMudHlwZSxcblx0XHRcdGNvbG9yU3BhY2U6IHRoaXMuY29sb3JTcGFjZSxcblxuXHRcdFx0bWluRmlsdGVyOiB0aGlzLm1pbkZpbHRlcixcblx0XHRcdG1hZ0ZpbHRlcjogdGhpcy5tYWdGaWx0ZXIsXG5cdFx0XHRhbmlzb3Ryb3B5OiB0aGlzLmFuaXNvdHJvcHksXG5cblx0XHRcdGZsaXBZOiB0aGlzLmZsaXBZLFxuXG5cdFx0XHRnZW5lcmF0ZU1pcG1hcHM6IHRoaXMuZ2VuZXJhdGVNaXBtYXBzLFxuXHRcdFx0cHJlbXVsdGlwbHlBbHBoYTogdGhpcy5wcmVtdWx0aXBseUFscGhhLFxuXHRcdFx0dW5wYWNrQWxpZ25tZW50OiB0aGlzLnVucGFja0FsaWdubWVudFxuXG5cdFx0fTtcblxuXHRcdGlmICggT2JqZWN0LmtleXMoIHRoaXMudXNlckRhdGEgKS5sZW5ndGggPiAwICkgb3V0cHV0LnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdGlmICggISBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdID0gb3V0cHV0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxuXHR0cmFuc2Zvcm1VdiggdXYgKSB7XG5cblx0XHRpZiAoIHRoaXMubWFwcGluZyAhPT0gVVZNYXBwaW5nICkgcmV0dXJuIHV2O1xuXG5cdFx0dXYuYXBwbHlNYXRyaXgzKCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0aWYgKCB1di54IDwgMCB8fCB1di54ID4gMSApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy53cmFwUyApIHtcblxuXHRcdFx0XHRjYXNlIFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueCA9IHV2LnggPCAwID8gMCA6IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggTWF0aC5mbG9vciggdXYueCApICUgMiApID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHR1di54ID0gTWF0aC5jZWlsKCB1di54ICkgLSB1di54O1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB1di55IDwgMCB8fCB1di55ID4gMSApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy53cmFwVCApIHtcblxuXHRcdFx0XHRjYXNlIFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueSA9IHV2LnkgLSBNYXRoLmZsb29yKCB1di55ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueSA9IHV2LnkgPCAwID8gMCA6IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggTWF0aC5mbG9vciggdXYueSApICUgMiApID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHR1di55ID0gTWF0aC5jZWlsKCB1di55ICkgLSB1di55O1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dXYueSA9IHV2LnkgLSBNYXRoLmZsb29yKCB1di55ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmZsaXBZICkge1xuXG5cdFx0XHR1di55ID0gMSAtIHV2Lnk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdXY7XG5cblx0fVxuXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cdFx0XHR0aGlzLnNvdXJjZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldCBuZWVkc1BNUkVNVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMucG1yZW1WZXJzaW9uICsrO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5UZXh0dXJlLkRFRkFVTFRfSU1BR0UgPSBudWxsO1xuVGV4dHVyZS5ERUZBVUxUX01BUFBJTkcgPSBVVk1hcHBpbmc7XG5UZXh0dXJlLkRFRkFVTFRfQU5JU09UUk9QWSA9IDE7XG5cbmV4cG9ydCB7IFRleHR1cmUgfTtcbiIsImNsYXNzIFZlY3RvcjQge1xuXG5cdGNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAsIHogPSAwLCB3ID0gMSApIHtcblxuXHRcdFZlY3RvcjQucHJvdG90eXBlLmlzVmVjdG9yNCA9IHRydWU7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblx0XHR0aGlzLncgPSB3O1xuXG5cdH1cblxuXHRnZXQgd2lkdGgoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy56O1xuXG5cdH1cblxuXHRzZXQgd2lkdGgoIHZhbHVlICkge1xuXG5cdFx0dGhpcy56ID0gdmFsdWU7XG5cblx0fVxuXG5cdGdldCBoZWlnaHQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy53O1xuXG5cdH1cblxuXHRzZXQgaGVpZ2h0KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMudyA9IHZhbHVlO1xuXG5cdH1cblxuXHRzZXQoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblx0XHR0aGlzLncgPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xuXHRcdHRoaXMueSA9IHNjYWxhcjtcblx0XHR0aGlzLnogPSBzY2FsYXI7XG5cdFx0dGhpcy53ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFgoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFkoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFooIHogKSB7XG5cblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFcoIHcgKSB7XG5cblx0XHR0aGlzLncgPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldENvbXBvbmVudCggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IHRoaXMueiA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMzogdGhpcy53ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRDb21wb25lbnQoIGluZGV4ICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcblx0XHRcdGNhc2UgMTogcmV0dXJuIHRoaXMueTtcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcblx0XHRcdGNhc2UgMzogcmV0dXJuIHRoaXMudztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncgKTtcblxuXHR9XG5cblx0Y29weSggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cdFx0dGhpcy56ID0gdi56O1xuXHRcdHRoaXMudyA9ICggdi53ICE9PSB1bmRlZmluZWQgKSA/IHYudyA6IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkKCB2ICkge1xuXG5cdFx0dGhpcy54ICs9IHYueDtcblx0XHR0aGlzLnkgKz0gdi55O1xuXHRcdHRoaXMueiArPSB2Lno7XG5cdFx0dGhpcy53ICs9IHYudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRTY2FsYXIoIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gcztcblx0XHR0aGlzLnkgKz0gcztcblx0XHR0aGlzLnogKz0gcztcblx0XHR0aGlzLncgKz0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xuXHRcdHRoaXMueSA9IGEueSArIGIueTtcblx0XHR0aGlzLnogPSBhLnogKyBiLno7XG5cdFx0dGhpcy53ID0gYS53ICsgYi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxlZFZlY3RvciggdiwgcyApIHtcblxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xuXHRcdHRoaXMueiArPSB2LnogKiBzO1xuXHRcdHRoaXMudyArPSB2LncgKiBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YiggdiApIHtcblxuXHRcdHRoaXMueCAtPSB2Lng7XG5cdFx0dGhpcy55IC09IHYueTtcblx0XHR0aGlzLnogLT0gdi56O1xuXHRcdHRoaXMudyAtPSB2Lnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cdFx0dGhpcy56IC09IHM7XG5cdFx0dGhpcy53IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cdFx0dGhpcy56ID0gYS56IC0gYi56O1xuXHRcdHRoaXMudyA9IGEudyAtIGIudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseSggdiApIHtcblxuXHRcdHRoaXMueCAqPSB2Lng7XG5cdFx0dGhpcy55ICo9IHYueTtcblx0XHR0aGlzLnogKj0gdi56O1xuXHRcdHRoaXMudyAqPSB2Lnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHlTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblx0XHR0aGlzLnogKj0gc2NhbGFyO1xuXHRcdHRoaXMudyAqPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlNYXRyaXg0KCBtICkge1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMueiwgdyA9IHRoaXMudztcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogeiArIGVbIDEyIF0gKiB3O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogeiArIGVbIDEzIF0gKiB3O1xuXHRcdHRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHogKyBlWyAxNCBdICogdztcblx0XHR0aGlzLncgPSBlWyAzIF0gKiB4ICsgZVsgNyBdICogeSArIGVbIDExIF0gKiB6ICsgZVsgMTUgXSAqIHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGl2aWRlU2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH1cblxuXHRzZXRBeGlzQW5nbGVGcm9tUXVhdGVybmlvbiggcSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9xdWF0ZXJuaW9uVG9BbmdsZS9pbmRleC5odG1cblxuXHRcdC8vIHEgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHR0aGlzLncgPSAyICogTWF0aC5hY29zKCBxLncgKTtcblxuXHRcdGNvbnN0IHMgPSBNYXRoLnNxcnQoIDEgLSBxLncgKiBxLncgKTtcblxuXHRcdGlmICggcyA8IDAuMDAwMSApIHtcblxuXHRcdFx0dGhpcy54ID0gMTtcblx0XHRcdHRoaXMueSA9IDA7XG5cdFx0XHR0aGlzLnogPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy54ID0gcS54IC8gcztcblx0XHRcdHRoaXMueSA9IHEueSAvIHM7XG5cdFx0XHR0aGlzLnogPSBxLnogLyBzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEF4aXNBbmdsZUZyb21Sb3RhdGlvbk1hdHJpeCggbSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb0FuZ2xlL2luZGV4Lmh0bVxuXG5cdFx0Ly8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcblxuXHRcdGxldCBhbmdsZSwgeCwgeSwgejsgLy8gdmFyaWFibGVzIGZvciByZXN1bHRcblx0XHRjb25zdCBlcHNpbG9uID0gMC4wMSxcdFx0Ly8gbWFyZ2luIHRvIGFsbG93IGZvciByb3VuZGluZyBlcnJvcnNcblx0XHRcdGVwc2lsb24yID0gMC4xLFx0XHQvLyBtYXJnaW4gdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiAwIGFuZCAxODAgZGVncmVlc1xuXG5cdFx0XHR0ZSA9IG0uZWxlbWVudHMsXG5cblx0XHRcdG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF0sXG5cdFx0XHRtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdLFxuXHRcdFx0bTMxID0gdGVbIDIgXSwgbTMyID0gdGVbIDYgXSwgbTMzID0gdGVbIDEwIF07XG5cblx0XHRpZiAoICggTWF0aC5hYnMoIG0xMiAtIG0yMSApIDwgZXBzaWxvbiApICYmXG5cdFx0ICAgICAoIE1hdGguYWJzKCBtMTMgLSBtMzEgKSA8IGVwc2lsb24gKSAmJlxuXHRcdCAgICAgKCBNYXRoLmFicyggbTIzIC0gbTMyICkgPCBlcHNpbG9uICkgKSB7XG5cblx0XHRcdC8vIHNpbmd1bGFyaXR5IGZvdW5kXG5cdFx0XHQvLyBmaXJzdCBjaGVjayBmb3IgaWRlbnRpdHkgbWF0cml4IHdoaWNoIG11c3QgaGF2ZSArMSBmb3IgYWxsIHRlcm1zXG5cdFx0XHQvLyBpbiBsZWFkaW5nIGRpYWdvbmFsIGFuZCB6ZXJvIGluIG90aGVyIHRlcm1zXG5cblx0XHRcdGlmICggKCBNYXRoLmFicyggbTEyICsgbTIxICkgPCBlcHNpbG9uMiApICYmXG5cdFx0XHQgICAgICggTWF0aC5hYnMoIG0xMyArIG0zMSApIDwgZXBzaWxvbjIgKSAmJlxuXHRcdFx0ICAgICAoIE1hdGguYWJzKCBtMjMgKyBtMzIgKSA8IGVwc2lsb24yICkgJiZcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTExICsgbTIyICsgbTMzIC0gMyApIDwgZXBzaWxvbjIgKSApIHtcblxuXHRcdFx0XHQvLyB0aGlzIHNpbmd1bGFyaXR5IGlzIGlkZW50aXR5IG1hdHJpeCBzbyBhbmdsZSA9IDBcblxuXHRcdFx0XHR0aGlzLnNldCggMSwgMCwgMCwgMCApO1xuXG5cdFx0XHRcdHJldHVybiB0aGlzOyAvLyB6ZXJvIGFuZ2xlLCBhcmJpdHJhcnkgYXhpc1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIG90aGVyd2lzZSB0aGlzIHNpbmd1bGFyaXR5IGlzIGFuZ2xlID0gMTgwXG5cblx0XHRcdGFuZ2xlID0gTWF0aC5QSTtcblxuXHRcdFx0Y29uc3QgeHggPSAoIG0xMSArIDEgKSAvIDI7XG5cdFx0XHRjb25zdCB5eSA9ICggbTIyICsgMSApIC8gMjtcblx0XHRcdGNvbnN0IHp6ID0gKCBtMzMgKyAxICkgLyAyO1xuXHRcdFx0Y29uc3QgeHkgPSAoIG0xMiArIG0yMSApIC8gNDtcblx0XHRcdGNvbnN0IHh6ID0gKCBtMTMgKyBtMzEgKSAvIDQ7XG5cdFx0XHRjb25zdCB5eiA9ICggbTIzICsgbTMyICkgLyA0O1xuXG5cdFx0XHRpZiAoICggeHggPiB5eSApICYmICggeHggPiB6eiApICkge1xuXG5cdFx0XHRcdC8vIG0xMSBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtXG5cblx0XHRcdFx0aWYgKCB4eCA8IGVwc2lsb24gKSB7XG5cblx0XHRcdFx0XHR4ID0gMDtcblx0XHRcdFx0XHR5ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eiA9IDAuNzA3MTA2NzgxO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR4ID0gTWF0aC5zcXJ0KCB4eCApO1xuXHRcdFx0XHRcdHkgPSB4eSAvIHg7XG5cdFx0XHRcdFx0eiA9IHh6IC8geDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHl5ID4genogKSB7XG5cblx0XHRcdFx0Ly8gbTIyIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm1cblxuXHRcdFx0XHRpZiAoIHl5IDwgZXBzaWxvbiApIHtcblxuXHRcdFx0XHRcdHggPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR5ID0gMDtcblx0XHRcdFx0XHR6ID0gMC43MDcxMDY3ODE7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHkgPSBNYXRoLnNxcnQoIHl5ICk7XG5cdFx0XHRcdFx0eCA9IHh5IC8geTtcblx0XHRcdFx0XHR6ID0geXogLyB5O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBtMzMgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybSBzbyBiYXNlIHJlc3VsdCBvbiB0aGlzXG5cblx0XHRcdFx0aWYgKCB6eiA8IGVwc2lsb24gKSB7XG5cblx0XHRcdFx0XHR4ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eSA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHogPSAwO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR6ID0gTWF0aC5zcXJ0KCB6eiApO1xuXHRcdFx0XHRcdHggPSB4eiAvIHo7XG5cdFx0XHRcdFx0eSA9IHl6IC8gejtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zZXQoIHgsIHksIHosIGFuZ2xlICk7XG5cblx0XHRcdHJldHVybiB0aGlzOyAvLyByZXR1cm4gMTgwIGRlZyByb3RhdGlvblxuXG5cdFx0fVxuXG5cdFx0Ly8gYXMgd2UgaGF2ZSByZWFjaGVkIGhlcmUgdGhlcmUgYXJlIG5vIHNpbmd1bGFyaXRpZXMgc28gd2UgY2FuIGhhbmRsZSBub3JtYWxseVxuXG5cdFx0bGV0IHMgPSBNYXRoLnNxcnQoICggbTMyIC0gbTIzICkgKiAoIG0zMiAtIG0yMyApICtcblx0XHRcdCggbTEzIC0gbTMxICkgKiAoIG0xMyAtIG0zMSApICtcblx0XHRcdCggbTIxIC0gbTEyICkgKiAoIG0yMSAtIG0xMiApICk7IC8vIHVzZWQgdG8gbm9ybWFsaXplXG5cblx0XHRpZiAoIE1hdGguYWJzKCBzICkgPCAwLjAwMSApIHMgPSAxO1xuXG5cdFx0Ly8gcHJldmVudCBkaXZpZGUgYnkgemVybywgc2hvdWxkIG5vdCBoYXBwZW4gaWYgbWF0cml4IGlzIG9ydGhvZ29uYWwgYW5kIHNob3VsZCBiZVxuXHRcdC8vIGNhdWdodCBieSBzaW5ndWxhcml0eSB0ZXN0IGFib3ZlLCBidXQgSSd2ZSBsZWZ0IGl0IGluIGp1c3QgaW4gY2FzZVxuXG5cdFx0dGhpcy54ID0gKCBtMzIgLSBtMjMgKSAvIHM7XG5cdFx0dGhpcy55ID0gKCBtMTMgLSBtMzEgKSAvIHM7XG5cdFx0dGhpcy56ID0gKCBtMjEgLSBtMTIgKSAvIHM7XG5cdFx0dGhpcy53ID0gTWF0aC5hY29zKCAoIG0xMSArIG0yMiArIG0zMyAtIDEgKSAvIDIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tTWF0cml4UG9zaXRpb24oIG0gKSB7XG5cblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDEyIF07XG5cdFx0dGhpcy55ID0gZVsgMTMgXTtcblx0XHR0aGlzLnogPSBlWyAxNCBdO1xuXHRcdHRoaXMudyA9IGVbIDE1IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWluKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5taW4oIHRoaXMudywgdi53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWF4KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5tYXgoIHRoaXMudywgdi53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCBtaW4ueiwgTWF0aC5taW4oIG1heC56LCB0aGlzLnogKSApO1xuXHRcdHRoaXMudyA9IE1hdGgubWF4KCBtaW4udywgTWF0aC5taW4oIG1heC53LCB0aGlzLncgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnogKSApO1xuXHRcdHRoaXMudyA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMudyApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXBMZW5ndGgoIG1pbiwgbWF4ICkge1xuXG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggbGVuZ3RoIHx8IDEgKS5tdWx0aXBseVNjYWxhciggTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgbGVuZ3RoICkgKSApO1xuXG5cdH1cblxuXHRmbG9vcigpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9IE1hdGguZmxvb3IoIHRoaXMudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNlaWwoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmNlaWwoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5jZWlsKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLmNlaWwoIHRoaXMudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdW5kKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5yb3VuZCggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5yb3VuZCggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm91bmRUb1plcm8oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnRydW5jKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnRydW5jKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnRydW5jKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLnRydW5jKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRuZWdhdGUoKSB7XG5cblx0XHR0aGlzLnggPSAtIHRoaXMueDtcblx0XHR0aGlzLnkgPSAtIHRoaXMueTtcblx0XHR0aGlzLnogPSAtIHRoaXMuejtcblx0XHR0aGlzLncgPSAtIHRoaXMudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkb3QoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56ICsgdGhpcy53ICogdi53O1xuXG5cdH1cblxuXHRsZW5ndGhTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKyB0aGlzLncgKiB0aGlzLnc7XG5cblx0fVxuXG5cdGxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudyApO1xuXG5cdH1cblxuXHRtYW5oYXR0YW5MZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApICsgTWF0aC5hYnMoIHRoaXMueiApICsgTWF0aC5hYnMoIHRoaXMudyApO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH1cblxuXHRzZXRMZW5ndGgoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9XG5cblx0bGVycCggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cdFx0dGhpcy56ICs9ICggdi56IC0gdGhpcy56ICkgKiBhbHBoYTtcblx0XHR0aGlzLncgKz0gKCB2LncgLSB0aGlzLncgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnBWZWN0b3JzKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ID0gdjEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSA9IHYxLnkgKyAoIHYyLnkgLSB2MS55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogPSB2MS56ICsgKCB2Mi56IC0gdjEueiApICogYWxwaGE7XG5cdFx0dGhpcy53ID0gdjEudyArICggdjIudyAtIHYxLncgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICYmICggdi53ID09PSB0aGlzLncgKSApO1xuXG5cdH1cblxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy56ID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblx0XHR0aGlzLncgPSBhcnJheVsgb2Zmc2V0ICsgMyBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy56O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0aGlzLnc7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblx0XHR0aGlzLncgPSBhdHRyaWJ1dGUuZ2V0VyggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYW5kb20oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdHRoaXMueSA9IE1hdGgucmFuZG9tKCk7XG5cdFx0dGhpcy56ID0gTWF0aC5yYW5kb20oKTtcblx0XHR0aGlzLncgPSBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy54O1xuXHRcdHlpZWxkIHRoaXMueTtcblx0XHR5aWVsZCB0aGlzLno7XG5cdFx0eWllbGQgdGhpcy53O1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBWZWN0b3I0IH07XG4iLCJpbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuL0V2ZW50RGlzcGF0Y2hlci5qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBMaW5lYXJGaWx0ZXIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uL21hdGgvVmVjdG9yNC5qcyc7XG5pbXBvcnQgeyBTb3VyY2UgfSBmcm9tICcuLi90ZXh0dXJlcy9Tb3VyY2UuanMnO1xuXG4vKlxuIEluIG9wdGlvbnMsIHdlIGNhbiBzcGVjaWZ5OlxuICogVGV4dHVyZSBwYXJhbWV0ZXJzIGZvciBhbiBhdXRvLWdlbmVyYXRlZCB0YXJnZXQgdGV4dHVyZVxuICogZGVwdGhCdWZmZXIvc3RlbmNpbEJ1ZmZlcjogQm9vbGVhbnMgdG8gaW5kaWNhdGUgaWYgd2Ugc2hvdWxkIGdlbmVyYXRlIHRoZXNlIGJ1ZmZlcnNcbiovXG5jbGFzcyBSZW5kZXJUYXJnZXQgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIG9wdGlvbnMgPSB7fSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzUmVuZGVyVGFyZ2V0ID0gdHJ1ZTtcblxuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHR0aGlzLmRlcHRoID0gMTtcblxuXHRcdHRoaXMuc2Npc3NvciA9IG5ldyBWZWN0b3I0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0dGhpcy5zY2lzc29yVGVzdCA9IGZhbHNlO1xuXG5cdFx0dGhpcy52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRjb25zdCBpbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgZGVwdGg6IDEgfTtcblxuXHRcdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKCB7XG5cdFx0XHRnZW5lcmF0ZU1pcG1hcHM6IGZhbHNlLFxuXHRcdFx0aW50ZXJuYWxGb3JtYXQ6IG51bGwsXG5cdFx0XHRtaW5GaWx0ZXI6IExpbmVhckZpbHRlcixcblx0XHRcdGRlcHRoQnVmZmVyOiB0cnVlLFxuXHRcdFx0c3RlbmNpbEJ1ZmZlcjogZmFsc2UsXG5cdFx0XHRyZXNvbHZlRGVwdGhCdWZmZXI6IHRydWUsXG5cdFx0XHRyZXNvbHZlU3RlbmNpbEJ1ZmZlcjogdHJ1ZSxcblx0XHRcdGRlcHRoVGV4dHVyZTogbnVsbCxcblx0XHRcdHNhbXBsZXM6IDAsXG5cdFx0XHRjb3VudDogMVxuXHRcdH0sIG9wdGlvbnMgKTtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSggaW1hZ2UsIG9wdGlvbnMubWFwcGluZywgb3B0aW9ucy53cmFwUywgb3B0aW9ucy53cmFwVCwgb3B0aW9ucy5tYWdGaWx0ZXIsIG9wdGlvbnMubWluRmlsdGVyLCBvcHRpb25zLmZvcm1hdCwgb3B0aW9ucy50eXBlLCBvcHRpb25zLmFuaXNvdHJvcHksIG9wdGlvbnMuY29sb3JTcGFjZSApO1xuXG5cdFx0dGV4dHVyZS5mbGlwWSA9IGZhbHNlO1xuXHRcdHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gb3B0aW9ucy5nZW5lcmF0ZU1pcG1hcHM7XG5cdFx0dGV4dHVyZS5pbnRlcm5hbEZvcm1hdCA9IG9wdGlvbnMuaW50ZXJuYWxGb3JtYXQ7XG5cblx0XHR0aGlzLnRleHR1cmVzID0gW107XG5cblx0XHRjb25zdCBjb3VudCA9IG9wdGlvbnMuY291bnQ7XG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXSA9IHRleHR1cmUuY2xvbmUoKTtcblx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5kZXB0aEJ1ZmZlciA9IG9wdGlvbnMuZGVwdGhCdWZmZXI7XG5cdFx0dGhpcy5zdGVuY2lsQnVmZmVyID0gb3B0aW9ucy5zdGVuY2lsQnVmZmVyO1xuXG5cdFx0dGhpcy5yZXNvbHZlRGVwdGhCdWZmZXIgPSBvcHRpb25zLnJlc29sdmVEZXB0aEJ1ZmZlcjtcblx0XHR0aGlzLnJlc29sdmVTdGVuY2lsQnVmZmVyID0gb3B0aW9ucy5yZXNvbHZlU3RlbmNpbEJ1ZmZlcjtcblxuXHRcdHRoaXMuZGVwdGhUZXh0dXJlID0gb3B0aW9ucy5kZXB0aFRleHR1cmU7XG5cblx0XHR0aGlzLnNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXM7XG5cblx0fVxuXG5cdGdldCB0ZXh0dXJlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudGV4dHVyZXNbIDAgXTtcblxuXHR9XG5cblx0c2V0IHRleHR1cmUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlc1sgMCBdID0gdmFsdWU7XG5cblx0fVxuXG5cdHNldFNpemUoIHdpZHRoLCBoZWlnaHQsIGRlcHRoID0gMSApIHtcblxuXHRcdGlmICggdGhpcy53aWR0aCAhPT0gd2lkdGggfHwgdGhpcy5oZWlnaHQgIT09IGhlaWdodCB8fCB0aGlzLmRlcHRoICE9PSBkZXB0aCApIHtcblxuXHRcdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHR0aGlzLmRlcHRoID0gZGVwdGg7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0aGlzLnRleHR1cmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXS5pbWFnZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0XHR0aGlzLnRleHR1cmVzWyBpIF0uaW1hZ2UuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0XHR0aGlzLnRleHR1cmVzWyBpIF0uaW1hZ2UuZGVwdGggPSBkZXB0aDtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlld3BvcnQuc2V0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0dGhpcy5zY2lzc29yLnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy53aWR0aCA9IHNvdXJjZS53aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XG5cdFx0dGhpcy5kZXB0aCA9IHNvdXJjZS5kZXB0aDtcblxuXHRcdHRoaXMuc2Npc3Nvci5jb3B5KCBzb3VyY2Uuc2Npc3NvciApO1xuXHRcdHRoaXMuc2Npc3NvclRlc3QgPSBzb3VyY2Uuc2Npc3NvclRlc3Q7XG5cblx0XHR0aGlzLnZpZXdwb3J0LmNvcHkoIHNvdXJjZS52aWV3cG9ydCApO1xuXG5cdFx0dGhpcy50ZXh0dXJlcy5sZW5ndGggPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHNvdXJjZS50ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy50ZXh0dXJlc1sgaSBdID0gc291cmNlLnRleHR1cmVzWyBpIF0uY2xvbmUoKTtcblx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZW5zdXJlIGltYWdlIG9iamVjdCBpcyBub3Qgc2hhcmVkLCBzZWUgIzIwMzI4XG5cblx0XHRjb25zdCBpbWFnZSA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudGV4dHVyZS5pbWFnZSApO1xuXHRcdHRoaXMudGV4dHVyZS5zb3VyY2UgPSBuZXcgU291cmNlKCBpbWFnZSApO1xuXG5cdFx0dGhpcy5kZXB0aEJ1ZmZlciA9IHNvdXJjZS5kZXB0aEJ1ZmZlcjtcblx0XHR0aGlzLnN0ZW5jaWxCdWZmZXIgPSBzb3VyY2Uuc3RlbmNpbEJ1ZmZlcjtcblxuXHRcdHRoaXMucmVzb2x2ZURlcHRoQnVmZmVyID0gc291cmNlLnJlc29sdmVEZXB0aEJ1ZmZlcjtcblx0XHR0aGlzLnJlc29sdmVTdGVuY2lsQnVmZmVyID0gc291cmNlLnJlc29sdmVTdGVuY2lsQnVmZmVyO1xuXG5cdFx0aWYgKCBzb3VyY2UuZGVwdGhUZXh0dXJlICE9PSBudWxsICkgdGhpcy5kZXB0aFRleHR1cmUgPSBzb3VyY2UuZGVwdGhUZXh0dXJlLmNsb25lKCk7XG5cblx0XHR0aGlzLnNhbXBsZXMgPSBzb3VyY2Uuc2FtcGxlcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFJlbmRlclRhcmdldCB9O1xuIiwiaW1wb3J0IHsgUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi4vY29yZS9SZW5kZXJUYXJnZXQuanMnO1xuXG5jbGFzcyBXZWJHTFJlbmRlclRhcmdldCBleHRlbmRzIFJlbmRlclRhcmdldCB7XG5cblx0Y29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgb3B0aW9ucyA9IHt9ICkge1xuXG5cdFx0c3VwZXIoIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKTtcblxuXHRcdHRoaXMuaXNXZWJHTFJlbmRlclRhcmdldCA9IHRydWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFdlYkdMUmVuZGVyVGFyZ2V0IH07XG4iLCJpbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlLmpzJztcbmltcG9ydCB7IENsYW1wVG9FZGdlV3JhcHBpbmcsIE5lYXJlc3RGaWx0ZXIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuXG5jbGFzcyBEYXRhQXJyYXlUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0Y29uc3RydWN0b3IoIGRhdGEgPSBudWxsLCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSApIHtcblxuXHRcdHN1cGVyKCBudWxsICk7XG5cblx0XHR0aGlzLmlzRGF0YUFycmF5VGV4dHVyZSA9IHRydWU7XG5cblx0XHR0aGlzLmltYWdlID0geyBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9O1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xuXHRcdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHRcdHRoaXMud3JhcFIgPSBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSAxO1xuXG5cdFx0dGhpcy5sYXllclVwZGF0ZXMgPSBuZXcgU2V0KCk7XG5cblx0fVxuXG5cdGFkZExheWVyVXBkYXRlKCBsYXllckluZGV4ICkge1xuXG5cdFx0dGhpcy5sYXllclVwZGF0ZXMuYWRkKCBsYXllckluZGV4ICk7XG5cblx0fVxuXG5cdGNsZWFyTGF5ZXJVcGRhdGVzKCkge1xuXG5cdFx0dGhpcy5sYXllclVwZGF0ZXMuY2xlYXIoKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgRGF0YUFycmF5VGV4dHVyZSB9O1xuIiwiaW1wb3J0IHsgV2ViR0xSZW5kZXJUYXJnZXQgfSBmcm9tICcuL1dlYkdMUmVuZGVyVGFyZ2V0LmpzJztcbmltcG9ydCB7IERhdGFBcnJheVRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9EYXRhQXJyYXlUZXh0dXJlLmpzJztcblxuY2xhc3MgV2ViR0xBcnJheVJlbmRlclRhcmdldCBleHRlbmRzIFdlYkdMUmVuZGVyVGFyZ2V0IHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBkZXB0aCA9IDEsIG9wdGlvbnMgPSB7fSApIHtcblxuXHRcdHN1cGVyKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7XG5cblx0XHR0aGlzLmlzV2ViR0xBcnJheVJlbmRlclRhcmdldCA9IHRydWU7XG5cblx0XHR0aGlzLmRlcHRoID0gZGVwdGg7XG5cblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgRGF0YUFycmF5VGV4dHVyZSggbnVsbCwgd2lkdGgsIGhlaWdodCwgZGVwdGggKTtcblxuXHRcdHRoaXMudGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBXZWJHTEFycmF5UmVuZGVyVGFyZ2V0IH07XG4iLCJpbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlLmpzJztcbmltcG9ydCB7IENsYW1wVG9FZGdlV3JhcHBpbmcsIE5lYXJlc3RGaWx0ZXIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuXG5jbGFzcyBEYXRhM0RUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0Y29uc3RydWN0b3IoIGRhdGEgPSBudWxsLCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSApIHtcblxuXHRcdC8vIFdlJ3JlIGdvaW5nIHRvIGFkZCAuc2V0WFhYKCkgbWV0aG9kcyBmb3Igc2V0dGluZyBwcm9wZXJ0aWVzIGxhdGVyLlxuXHRcdC8vIFVzZXJzIGNhbiBzdGlsbCBzZXQgaW4gRGF0YVRleHR1cmUzRCBkaXJlY3RseS5cblx0XHQvL1xuXHRcdC8vXHRjb25zdCB0ZXh0dXJlID0gbmV3IFRIUkVFLkRhdGFUZXh0dXJlM0QoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICk7XG5cdFx0Ly8gXHR0ZXh0dXJlLmFuaXNvdHJvcHkgPSAxNjtcblx0XHQvL1xuXHRcdC8vIFNlZSAjMTQ4MzlcblxuXHRcdHN1cGVyKCBudWxsICk7XG5cblx0XHR0aGlzLmlzRGF0YTNEVGV4dHVyZSA9IHRydWU7XG5cblx0XHR0aGlzLmltYWdlID0geyBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9O1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xuXHRcdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHRcdHRoaXMud3JhcFIgPSBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSAxO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBEYXRhM0RUZXh0dXJlIH07XG4iLCJpbXBvcnQgeyBXZWJHTFJlbmRlclRhcmdldCB9IGZyb20gJy4vV2ViR0xSZW5kZXJUYXJnZXQuanMnO1xuaW1wb3J0IHsgRGF0YTNEVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL0RhdGEzRFRleHR1cmUuanMnO1xuXG5jbGFzcyBXZWJHTDNEUmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xuXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSwgb3B0aW9ucyA9IHt9ICkge1xuXG5cdFx0c3VwZXIoIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKTtcblxuXHRcdHRoaXMuaXNXZWJHTDNEUmVuZGVyVGFyZ2V0ID0gdHJ1ZTtcblxuXHRcdHRoaXMuZGVwdGggPSBkZXB0aDtcblxuXHRcdHRoaXMudGV4dHVyZSA9IG5ldyBEYXRhM0RUZXh0dXJlKCBudWxsLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xuXG5cdFx0dGhpcy50ZXh0dXJlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHRydWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFdlYkdMM0RSZW5kZXJUYXJnZXQgfTtcbiIsImltcG9ydCAqIGFzIE1hdGhVdGlscyBmcm9tICcuL01hdGhVdGlscy5qcyc7XG5cbmNsYXNzIFF1YXRlcm5pb24ge1xuXG5cdGNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAsIHogPSAwLCB3ID0gMSApIHtcblxuXHRcdHRoaXMuaXNRdWF0ZXJuaW9uID0gdHJ1ZTtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX3cgPSB3O1xuXG5cdH1cblxuXHRzdGF0aWMgc2xlcnBGbGF0KCBkc3QsIGRzdE9mZnNldCwgc3JjMCwgc3JjT2Zmc2V0MCwgc3JjMSwgc3JjT2Zmc2V0MSwgdCApIHtcblxuXHRcdC8vIGZ1enotZnJlZSwgYXJyYXktYmFzZWQgUXVhdGVybmlvbiBTTEVSUCBvcGVyYXRpb25cblxuXHRcdGxldCB4MCA9IHNyYzBbIHNyY09mZnNldDAgKyAwIF0sXG5cdFx0XHR5MCA9IHNyYzBbIHNyY09mZnNldDAgKyAxIF0sXG5cdFx0XHR6MCA9IHNyYzBbIHNyY09mZnNldDAgKyAyIF0sXG5cdFx0XHR3MCA9IHNyYzBbIHNyY09mZnNldDAgKyAzIF07XG5cblx0XHRjb25zdCB4MSA9IHNyYzFbIHNyY09mZnNldDEgKyAwIF0sXG5cdFx0XHR5MSA9IHNyYzFbIHNyY09mZnNldDEgKyAxIF0sXG5cdFx0XHR6MSA9IHNyYzFbIHNyY09mZnNldDEgKyAyIF0sXG5cdFx0XHR3MSA9IHNyYzFbIHNyY09mZnNldDEgKyAzIF07XG5cblx0XHRpZiAoIHQgPT09IDAgKSB7XG5cblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMCBdID0geDA7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkwO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MDtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzA7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHQgPT09IDEgKSB7XG5cblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMCBdID0geDE7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkxO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MTtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzE7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHcwICE9PSB3MSB8fCB4MCAhPT0geDEgfHwgeTAgIT09IHkxIHx8IHowICE9PSB6MSApIHtcblxuXHRcdFx0bGV0IHMgPSAxIC0gdDtcblx0XHRcdGNvbnN0IGNvcyA9IHgwICogeDEgKyB5MCAqIHkxICsgejAgKiB6MSArIHcwICogdzEsXG5cdFx0XHRcdGRpciA9ICggY29zID49IDAgPyAxIDogLSAxICksXG5cdFx0XHRcdHNxclNpbiA9IDEgLSBjb3MgKiBjb3M7XG5cblx0XHRcdC8vIFNraXAgdGhlIFNsZXJwIGZvciB0aW55IHN0ZXBzIHRvIGF2b2lkIG51bWVyaWMgcHJvYmxlbXM6XG5cdFx0XHRpZiAoIHNxclNpbiA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdGNvbnN0IHNpbiA9IE1hdGguc3FydCggc3FyU2luICksXG5cdFx0XHRcdFx0bGVuID0gTWF0aC5hdGFuMiggc2luLCBjb3MgKiBkaXIgKTtcblxuXHRcdFx0XHRzID0gTWF0aC5zaW4oIHMgKiBsZW4gKSAvIHNpbjtcblx0XHRcdFx0dCA9IE1hdGguc2luKCB0ICogbGVuICkgLyBzaW47XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdERpciA9IHQgKiBkaXI7XG5cblx0XHRcdHgwID0geDAgKiBzICsgeDEgKiB0RGlyO1xuXHRcdFx0eTAgPSB5MCAqIHMgKyB5MSAqIHREaXI7XG5cdFx0XHR6MCA9IHowICogcyArIHoxICogdERpcjtcblx0XHRcdHcwID0gdzAgKiBzICsgdzEgKiB0RGlyO1xuXG5cdFx0XHQvLyBOb3JtYWxpemUgaW4gY2FzZSB3ZSBqdXN0IGRpZCBhIGxlcnA6XG5cdFx0XHRpZiAoIHMgPT09IDEgLSB0ICkge1xuXG5cdFx0XHRcdGNvbnN0IGYgPSAxIC8gTWF0aC5zcXJ0KCB4MCAqIHgwICsgeTAgKiB5MCArIHowICogejAgKyB3MCAqIHcwICk7XG5cblx0XHRcdFx0eDAgKj0gZjtcblx0XHRcdFx0eTAgKj0gZjtcblx0XHRcdFx0ejAgKj0gZjtcblx0XHRcdFx0dzAgKj0gZjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZHN0WyBkc3RPZmZzZXQgXSA9IHgwO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcwO1xuXG5cdH1cblxuXHRzdGF0aWMgbXVsdGlwbHlRdWF0ZXJuaW9uc0ZsYXQoIGRzdCwgZHN0T2Zmc2V0LCBzcmMwLCBzcmNPZmZzZXQwLCBzcmMxLCBzcmNPZmZzZXQxICkge1xuXG5cdFx0Y29uc3QgeDAgPSBzcmMwWyBzcmNPZmZzZXQwIF07XG5cdFx0Y29uc3QgeTAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMSBdO1xuXHRcdGNvbnN0IHowID0gc3JjMFsgc3JjT2Zmc2V0MCArIDIgXTtcblx0XHRjb25zdCB3MCA9IHNyYzBbIHNyY09mZnNldDAgKyAzIF07XG5cblx0XHRjb25zdCB4MSA9IHNyYzFbIHNyY09mZnNldDEgXTtcblx0XHRjb25zdCB5MSA9IHNyYzFbIHNyY09mZnNldDEgKyAxIF07XG5cdFx0Y29uc3QgejEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMiBdO1xuXHRcdGNvbnN0IHcxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDMgXTtcblxuXHRcdGRzdFsgZHN0T2Zmc2V0IF0gPSB4MCAqIHcxICsgdzAgKiB4MSArIHkwICogejEgLSB6MCAqIHkxO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTAgKiB3MSArIHcwICogeTEgKyB6MCAqIHgxIC0geDAgKiB6MTtcblx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowICogdzEgKyB3MCAqIHoxICsgeDAgKiB5MSAtIHkwICogeDE7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MCAqIHcxIC0geDAgKiB4MSAtIHkwICogeTEgLSB6MCAqIHoxO1xuXG5cdFx0cmV0dXJuIGRzdDtcblxuXHR9XG5cblx0Z2V0IHgoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feDtcblxuXHR9XG5cblx0c2V0IHgoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5feCA9IHZhbHVlO1xuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0Z2V0IHkoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feTtcblxuXHR9XG5cblx0c2V0IHkoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5feSA9IHZhbHVlO1xuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0Z2V0IHooKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fejtcblxuXHR9XG5cblx0c2V0IHooIHZhbHVlICkge1xuXG5cdFx0dGhpcy5feiA9IHZhbHVlO1xuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0Z2V0IHcoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fdztcblxuXHR9XG5cblx0c2V0IHcoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5fdyA9IHZhbHVlO1xuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0c2V0KCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0dGhpcy5feCA9IHg7XG5cdFx0dGhpcy5feSA9IHk7XG5cdFx0dGhpcy5feiA9IHo7XG5cdFx0dGhpcy5fdyA9IHc7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3osIHRoaXMuX3cgKTtcblxuXHR9XG5cblx0Y29weSggcXVhdGVybmlvbiApIHtcblxuXHRcdHRoaXMuX3ggPSBxdWF0ZXJuaW9uLng7XG5cdFx0dGhpcy5feSA9IHF1YXRlcm5pb24ueTtcblx0XHR0aGlzLl96ID0gcXVhdGVybmlvbi56O1xuXHRcdHRoaXMuX3cgPSBxdWF0ZXJuaW9uLnc7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUV1bGVyKCBldWxlciwgdXBkYXRlID0gdHJ1ZSApIHtcblxuXHRcdGNvbnN0IHggPSBldWxlci5feCwgeSA9IGV1bGVyLl95LCB6ID0gZXVsZXIuX3osIG9yZGVyID0gZXVsZXIuX29yZGVyO1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5tYXRod29ya3MuY29tL21hdGxhYmNlbnRyYWwvZmlsZWV4Y2hhbmdlL1xuXHRcdC8vIFx0MjA2OTYtZnVuY3Rpb24tdG8tY29udmVydC1iZXR3ZWVuLWRjbS1ldWxlci1hbmdsZXMtcXVhdGVybmlvbnMtYW5kLWV1bGVyLXZlY3RvcnMvXG5cdFx0Ly9cdGNvbnRlbnQvU3BpbkNhbGMubVxuXG5cdFx0Y29uc3QgY29zID0gTWF0aC5jb3M7XG5cdFx0Y29uc3Qgc2luID0gTWF0aC5zaW47XG5cblx0XHRjb25zdCBjMSA9IGNvcyggeCAvIDIgKTtcblx0XHRjb25zdCBjMiA9IGNvcyggeSAvIDIgKTtcblx0XHRjb25zdCBjMyA9IGNvcyggeiAvIDIgKTtcblxuXHRcdGNvbnN0IHMxID0gc2luKCB4IC8gMiApO1xuXHRcdGNvbnN0IHMyID0gc2luKCB5IC8gMiApO1xuXHRcdGNvbnN0IHMzID0gc2luKCB6IC8gMiApO1xuXG5cdFx0c3dpdGNoICggb3JkZXIgKSB7XG5cblx0XHRcdGNhc2UgJ1hZWic6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdZWFonOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWlhZJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1pZWCc6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdZWlgnOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWFpZJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlF1YXRlcm5pb246IC5zZXRGcm9tRXVsZXIoKSBlbmNvdW50ZXJlZCBhbiB1bmtub3duIG9yZGVyOiAnICsgb3JkZXIgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdXBkYXRlID09PSB0cnVlICkgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL2FuZ2xlVG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxuXG5cdFx0Ly8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcblxuXHRcdGNvbnN0IGhhbGZBbmdsZSA9IGFuZ2xlIC8gMiwgcyA9IE1hdGguc2luKCBoYWxmQW5nbGUgKTtcblxuXHRcdHRoaXMuX3ggPSBheGlzLnggKiBzO1xuXHRcdHRoaXMuX3kgPSBheGlzLnkgKiBzO1xuXHRcdHRoaXMuX3ogPSBheGlzLnogKiBzO1xuXHRcdHRoaXMuX3cgPSBNYXRoLmNvcyggaGFsZkFuZ2xlICk7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHRjb25zdCB0ZSA9IG0uZWxlbWVudHMsXG5cblx0XHRcdG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF0sXG5cdFx0XHRtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdLFxuXHRcdFx0bTMxID0gdGVbIDIgXSwgbTMyID0gdGVbIDYgXSwgbTMzID0gdGVbIDEwIF0sXG5cblx0XHRcdHRyYWNlID0gbTExICsgbTIyICsgbTMzO1xuXG5cdFx0aWYgKCB0cmFjZSA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IHMgPSAwLjUgLyBNYXRoLnNxcnQoIHRyYWNlICsgMS4wICk7XG5cblx0XHRcdHRoaXMuX3cgPSAwLjI1IC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0zMiAtIG0yMyApICogcztcblx0XHRcdHRoaXMuX3kgPSAoIG0xMyAtIG0zMSApICogcztcblx0XHRcdHRoaXMuX3ogPSAoIG0yMSAtIG0xMiApICogcztcblxuXHRcdH0gZWxzZSBpZiAoIG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMgKSB7XG5cblx0XHRcdGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0xMSAtIG0yMiAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMzIgLSBtMjMgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMTMgKyBtMzEgKSAvIHM7XG5cblx0XHR9IGVsc2UgaWYgKCBtMjIgPiBtMzMgKSB7XG5cblx0XHRcdGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0yMiAtIG0xMSAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMTMgLSBtMzEgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl95ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMjMgKyBtMzIgKSAvIHM7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMzMgLSBtMTEgLSBtMjIgKTtcblxuXHRcdFx0dGhpcy5fdyA9ICggbTIxIC0gbTEyICkgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTEzICsgbTMxICkgLyBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTIzICsgbTMyICkgLyBzO1xuXHRcdFx0dGhpcy5feiA9IDAuMjUgKiBzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Vbml0VmVjdG9ycyggdkZyb20sIHZUbyApIHtcblxuXHRcdC8vIGFzc3VtZXMgZGlyZWN0aW9uIHZlY3RvcnMgdkZyb20gYW5kIHZUbyBhcmUgbm9ybWFsaXplZFxuXG5cdFx0bGV0IHIgPSB2RnJvbS5kb3QoIHZUbyApICsgMTtcblxuXHRcdGlmICggciA8IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHQvLyB2RnJvbSBhbmQgdlRvIHBvaW50IGluIG9wcG9zaXRlIGRpcmVjdGlvbnNcblxuXHRcdFx0ciA9IDA7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIHZGcm9tLnggKSA+IE1hdGguYWJzKCB2RnJvbS56ICkgKSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IC0gdkZyb20ueTtcblx0XHRcdFx0dGhpcy5feSA9IHZGcm9tLng7XG5cdFx0XHRcdHRoaXMuX3ogPSAwO1xuXHRcdFx0XHR0aGlzLl93ID0gcjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdFx0dGhpcy5feSA9IC0gdkZyb20uejtcblx0XHRcdFx0dGhpcy5feiA9IHZGcm9tLnk7XG5cdFx0XHRcdHRoaXMuX3cgPSByO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBjcm9zc1ZlY3RvcnMoIHZGcm9tLCB2VG8gKTsgLy8gaW5saW5lZCB0byBhdm9pZCBjeWNsaWMgZGVwZW5kZW5jeSBvbiBWZWN0b3IzXG5cblx0XHRcdHRoaXMuX3ggPSB2RnJvbS55ICogdlRvLnogLSB2RnJvbS56ICogdlRvLnk7XG5cdFx0XHR0aGlzLl95ID0gdkZyb20ueiAqIHZUby54IC0gdkZyb20ueCAqIHZUby56O1xuXHRcdFx0dGhpcy5feiA9IHZGcm9tLnggKiB2VG8ueSAtIHZGcm9tLnkgKiB2VG8ueDtcblx0XHRcdHRoaXMuX3cgPSByO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdGFuZ2xlVG8oIHEgKSB7XG5cblx0XHRyZXR1cm4gMiAqIE1hdGguYWNvcyggTWF0aC5hYnMoIE1hdGhVdGlscy5jbGFtcCggdGhpcy5kb3QoIHEgKSwgLSAxLCAxICkgKSApO1xuXG5cdH1cblxuXHRyb3RhdGVUb3dhcmRzKCBxLCBzdGVwICkge1xuXG5cdFx0Y29uc3QgYW5nbGUgPSB0aGlzLmFuZ2xlVG8oIHEgKTtcblxuXHRcdGlmICggYW5nbGUgPT09IDAgKSByZXR1cm4gdGhpcztcblxuXHRcdGNvbnN0IHQgPSBNYXRoLm1pbiggMSwgc3RlcCAvIGFuZ2xlICk7XG5cblx0XHR0aGlzLnNsZXJwKCBxLCB0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aWRlbnRpdHkoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAsIDEgKTtcblxuXHR9XG5cblx0aW52ZXJ0KCkge1xuXG5cdFx0Ly8gcXVhdGVybmlvbiBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdHJldHVybiB0aGlzLmNvbmp1Z2F0ZSgpO1xuXG5cdH1cblxuXHRjb25qdWdhdGUoKSB7XG5cblx0XHR0aGlzLl94ICo9IC0gMTtcblx0XHR0aGlzLl95ICo9IC0gMTtcblx0XHR0aGlzLl96ICo9IC0gMTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkb3QoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feCAqIHYuX3ggKyB0aGlzLl95ICogdi5feSArIHRoaXMuX3ogKiB2Ll96ICsgdGhpcy5fdyAqIHYuX3c7XG5cblx0fVxuXG5cdGxlbmd0aFNxKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93O1xuXG5cdH1cblxuXHRsZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLl94ICogdGhpcy5feCArIHRoaXMuX3kgKiB0aGlzLl95ICsgdGhpcy5feiAqIHRoaXMuX3ogKyB0aGlzLl93ICogdGhpcy5fdyApO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHRsZXQgbCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRpZiAoIGwgPT09IDAgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0dGhpcy5feSA9IDA7XG5cdFx0XHR0aGlzLl96ID0gMDtcblx0XHRcdHRoaXMuX3cgPSAxO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bCA9IDEgLyBsO1xuXG5cdFx0XHR0aGlzLl94ID0gdGhpcy5feCAqIGw7XG5cdFx0XHR0aGlzLl95ID0gdGhpcy5feSAqIGw7XG5cdFx0XHR0aGlzLl96ID0gdGhpcy5feiAqIGw7XG5cdFx0XHR0aGlzLl93ID0gdGhpcy5fdyAqIGw7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHkoIHEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKCB0aGlzLCBxICk7XG5cblx0fVxuXG5cdHByZW11bHRpcGx5KCBxICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgdGhpcyApO1xuXG5cdH1cblxuXHRtdWx0aXBseVF1YXRlcm5pb25zKCBhLCBiICkge1xuXG5cdFx0Ly8gZnJvbSBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL2NvZGUvaW5kZXguaHRtXG5cblx0XHRjb25zdCBxYXggPSBhLl94LCBxYXkgPSBhLl95LCBxYXogPSBhLl96LCBxYXcgPSBhLl93O1xuXHRcdGNvbnN0IHFieCA9IGIuX3gsIHFieSA9IGIuX3ksIHFieiA9IGIuX3osIHFidyA9IGIuX3c7XG5cblx0XHR0aGlzLl94ID0gcWF4ICogcWJ3ICsgcWF3ICogcWJ4ICsgcWF5ICogcWJ6IC0gcWF6ICogcWJ5O1xuXHRcdHRoaXMuX3kgPSBxYXkgKiBxYncgKyBxYXcgKiBxYnkgKyBxYXogKiBxYnggLSBxYXggKiBxYno7XG5cdFx0dGhpcy5feiA9IHFheiAqIHFidyArIHFhdyAqIHFieiArIHFheCAqIHFieSAtIHFheSAqIHFieDtcblx0XHR0aGlzLl93ID0gcWF3ICogcWJ3IC0gcWF4ICogcWJ4IC0gcWF5ICogcWJ5IC0gcWF6ICogcWJ6O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNsZXJwKCBxYiwgdCApIHtcblxuXHRcdGlmICggdCA9PT0gMCApIHJldHVybiB0aGlzO1xuXHRcdGlmICggdCA9PT0gMSApIHJldHVybiB0aGlzLmNvcHkoIHFiICk7XG5cblx0XHRjb25zdCB4ID0gdGhpcy5feCwgeSA9IHRoaXMuX3ksIHogPSB0aGlzLl96LCB3ID0gdGhpcy5fdztcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvc2xlcnAvXG5cblx0XHRsZXQgY29zSGFsZlRoZXRhID0gdyAqIHFiLl93ICsgeCAqIHFiLl94ICsgeSAqIHFiLl95ICsgeiAqIHFiLl96O1xuXG5cdFx0aWYgKCBjb3NIYWxmVGhldGEgPCAwICkge1xuXG5cdFx0XHR0aGlzLl93ID0gLSBxYi5fdztcblx0XHRcdHRoaXMuX3ggPSAtIHFiLl94O1xuXHRcdFx0dGhpcy5feSA9IC0gcWIuX3k7XG5cdFx0XHR0aGlzLl96ID0gLSBxYi5fejtcblxuXHRcdFx0Y29zSGFsZlRoZXRhID0gLSBjb3NIYWxmVGhldGE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmNvcHkoIHFiICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNvc0hhbGZUaGV0YSA+PSAxLjAgKSB7XG5cblx0XHRcdHRoaXMuX3cgPSB3O1xuXHRcdFx0dGhpcy5feCA9IHg7XG5cdFx0XHR0aGlzLl95ID0geTtcblx0XHRcdHRoaXMuX3ogPSB6O1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IHNxclNpbkhhbGZUaGV0YSA9IDEuMCAtIGNvc0hhbGZUaGV0YSAqIGNvc0hhbGZUaGV0YTtcblxuXHRcdGlmICggc3FyU2luSGFsZlRoZXRhIDw9IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRjb25zdCBzID0gMSAtIHQ7XG5cdFx0XHR0aGlzLl93ID0gcyAqIHcgKyB0ICogdGhpcy5fdztcblx0XHRcdHRoaXMuX3ggPSBzICogeCArIHQgKiB0aGlzLl94O1xuXHRcdFx0dGhpcy5feSA9IHMgKiB5ICsgdCAqIHRoaXMuX3k7XG5cdFx0XHR0aGlzLl96ID0gcyAqIHogKyB0ICogdGhpcy5fejtcblxuXHRcdFx0dGhpcy5ub3JtYWxpemUoKTsgLy8gbm9ybWFsaXplIGNhbGxzIF9vbkNoYW5nZUNhbGxiYWNrKClcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBzaW5IYWxmVGhldGEgPSBNYXRoLnNxcnQoIHNxclNpbkhhbGZUaGV0YSApO1xuXHRcdGNvbnN0IGhhbGZUaGV0YSA9IE1hdGguYXRhbjIoIHNpbkhhbGZUaGV0YSwgY29zSGFsZlRoZXRhICk7XG5cdFx0Y29uc3QgcmF0aW9BID0gTWF0aC5zaW4oICggMSAtIHQgKSAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhLFxuXHRcdFx0cmF0aW9CID0gTWF0aC5zaW4oIHQgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YTtcblxuXHRcdHRoaXMuX3cgPSAoIHcgKiByYXRpb0EgKyB0aGlzLl93ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feCA9ICggeCAqIHJhdGlvQSArIHRoaXMuX3ggKiByYXRpb0IgKTtcblx0XHR0aGlzLl95ID0gKCB5ICogcmF0aW9BICsgdGhpcy5feSAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3ogPSAoIHogKiByYXRpb0EgKyB0aGlzLl96ICogcmF0aW9CICk7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2xlcnBRdWF0ZXJuaW9ucyggcWEsIHFiLCB0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weSggcWEgKS5zbGVycCggcWIsIHQgKTtcblxuXHR9XG5cblx0cmFuZG9tKCkge1xuXG5cdFx0Ly8gc2V0cyB0aGlzIHF1YXRlcm5pb24gdG8gYSB1bmlmb3JtIHJhbmRvbSB1bml0IHF1YXRlcm5uaW9uXG5cblx0XHQvLyBLZW4gU2hvZW1ha2Vcblx0XHQvLyBVbmlmb3JtIHJhbmRvbSByb3RhdGlvbnNcblx0XHQvLyBELiBLaXJrLCBlZGl0b3IsIEdyYXBoaWNzIEdlbXMgSUlJLCBwYWdlcyAxMjQtMTMyLiBBY2FkZW1pYyBQcmVzcywgTmV3IFlvcmssIDE5OTIuXG5cblx0XHRjb25zdCB0aGV0YTEgPSAyICogTWF0aC5QSSAqIE1hdGgucmFuZG9tKCk7XG5cdFx0Y29uc3QgdGhldGEyID0gMiAqIE1hdGguUEkgKiBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0Y29uc3QgeDAgPSBNYXRoLnJhbmRvbSgpO1xuXHRcdGNvbnN0IHIxID0gTWF0aC5zcXJ0KCAxIC0geDAgKTtcblx0XHRjb25zdCByMiA9IE1hdGguc3FydCggeDAgKTtcblxuXHRcdHJldHVybiB0aGlzLnNldChcblx0XHRcdHIxICogTWF0aC5zaW4oIHRoZXRhMSApLFxuXHRcdFx0cjEgKiBNYXRoLmNvcyggdGhldGExICksXG5cdFx0XHRyMiAqIE1hdGguc2luKCB0aGV0YTIgKSxcblx0XHRcdHIyICogTWF0aC5jb3MoIHRoZXRhMiApLFxuXHRcdCk7XG5cblx0fVxuXG5cdGVxdWFscyggcXVhdGVybmlvbiApIHtcblxuXHRcdHJldHVybiAoIHF1YXRlcm5pb24uX3ggPT09IHRoaXMuX3ggKSAmJiAoIHF1YXRlcm5pb24uX3kgPT09IHRoaXMuX3kgKSAmJiAoIHF1YXRlcm5pb24uX3ogPT09IHRoaXMuX3ogKSAmJiAoIHF1YXRlcm5pb24uX3cgPT09IHRoaXMuX3cgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMuX3ggPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy5feSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy5feiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cdFx0dGhpcy5fdyA9IGFycmF5WyBvZmZzZXQgKyAzIF07XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX3c7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XG5cblx0XHR0aGlzLl94ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy5feSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXHRcdHRoaXMuX3ogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblx0XHR0aGlzLl93ID0gYXR0cmlidXRlLmdldFcoIGluZGV4ICk7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudG9BcnJheSgpO1xuXG5cdH1cblxuXHRfb25DaGFuZ2UoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdF9vbkNoYW5nZUNhbGxiYWNrKCkge31cblxuXHQqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHtcblxuXHRcdHlpZWxkIHRoaXMuX3g7XG5cdFx0eWllbGQgdGhpcy5feTtcblx0XHR5aWVsZCB0aGlzLl96O1xuXHRcdHlpZWxkIHRoaXMuX3c7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFF1YXRlcm5pb24gfTtcbiIsImltcG9ydCAqIGFzIE1hdGhVdGlscyBmcm9tICcuL01hdGhVdGlscy5qcyc7XG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSAnLi9RdWF0ZXJuaW9uLmpzJztcblxuY2xhc3MgVmVjdG9yMyB7XG5cblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCwgeiA9IDAgKSB7XG5cblx0XHRWZWN0b3IzLnByb3RvdHlwZS5pc1ZlY3RvcjMgPSB0cnVlO1xuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG5cblx0fVxuXG5cdHNldCggeCwgeSwgeiApIHtcblxuXHRcdGlmICggeiA9PT0gdW5kZWZpbmVkICkgeiA9IHRoaXMuejsgLy8gc3ByaXRlLnNjYWxlLnNldCh4LHkpXG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cdFx0dGhpcy56ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFgoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFkoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFooIHogKSB7XG5cblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldENvbXBvbmVudCggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IHRoaXMueiA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q29tcG9uZW50KCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRjYXNlIDI6IHJldHVybiB0aGlzLno7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnksIHRoaXMueiApO1xuXG5cdH1cblxuXHRjb3B5KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gdi54O1xuXHRcdHRoaXMueSA9IHYueTtcblx0XHR0aGlzLnogPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkKCB2ICkge1xuXG5cdFx0dGhpcy54ICs9IHYueDtcblx0XHR0aGlzLnkgKz0gdi55O1xuXHRcdHRoaXMueiArPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cdFx0dGhpcy56ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cdFx0dGhpcy56ID0gYS56ICsgYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxlZFZlY3RvciggdiwgcyApIHtcblxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xuXHRcdHRoaXMueiArPSB2LnogKiBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YiggdiApIHtcblxuXHRcdHRoaXMueCAtPSB2Lng7XG5cdFx0dGhpcy55IC09IHYueTtcblx0XHR0aGlzLnogLT0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YlNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXHRcdHRoaXMueiAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YlZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXHRcdHRoaXMueiA9IGEueiAtIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseSggdiApIHtcblxuXHRcdHRoaXMueCAqPSB2Lng7XG5cdFx0dGhpcy55ICo9IHYueTtcblx0XHR0aGlzLnogKj0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseVZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKiBiLng7XG5cdFx0dGhpcy55ID0gYS55ICogYi55O1xuXHRcdHRoaXMueiA9IGEueiAqIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcHBseUV1bGVyKCBldWxlciApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciApICk7XG5cblx0fVxuXG5cdGFwcGx5QXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSApO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDMoIG0gKSB7XG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDMgXSAqIHkgKyBlWyA2IF0gKiB6O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgNyBdICogejtcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDggXSAqIHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlOb3JtYWxNYXRyaXgoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDMoIG0gKS5ub3JtYWxpemUoKTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXg0KCBtICkge1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdGNvbnN0IHcgPSAxIC8gKCBlWyAzIF0gKiB4ICsgZVsgNyBdICogeSArIGVbIDExIF0gKiB6ICsgZVsgMTUgXSApO1xuXG5cdFx0dGhpcy54ID0gKCBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHogKyBlWyAxMiBdICkgKiB3O1xuXHRcdHRoaXMueSA9ICggZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6ICsgZVsgMTMgXSApICogdztcblx0XHR0aGlzLnogPSAoIGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHogKyBlWyAxNCBdICkgKiB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5UXVhdGVybmlvbiggcSApIHtcblxuXHRcdC8vIHF1YXRlcm5pb24gcSBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdGNvbnN0IHZ4ID0gdGhpcy54LCB2eSA9IHRoaXMueSwgdnogPSB0aGlzLno7XG5cdFx0Y29uc3QgcXggPSBxLngsIHF5ID0gcS55LCBxeiA9IHEueiwgcXcgPSBxLnc7XG5cblx0XHQvLyB0ID0gMiAqIGNyb3NzKCBxLnh5eiwgdiApO1xuXHRcdGNvbnN0IHR4ID0gMiAqICggcXkgKiB2eiAtIHF6ICogdnkgKTtcblx0XHRjb25zdCB0eSA9IDIgKiAoIHF6ICogdnggLSBxeCAqIHZ6ICk7XG5cdFx0Y29uc3QgdHogPSAyICogKCBxeCAqIHZ5IC0gcXkgKiB2eCApO1xuXG5cdFx0Ly8gdiArIHEudyAqIHQgKyBjcm9zcyggcS54eXosIHQgKTtcblx0XHR0aGlzLnggPSB2eCArIHF3ICogdHggKyBxeSAqIHR6IC0gcXogKiB0eTtcblx0XHR0aGlzLnkgPSB2eSArIHF3ICogdHkgKyBxeiAqIHR4IC0gcXggKiB0ejtcblx0XHR0aGlzLnogPSB2eiArIHF3ICogdHogKyBxeCAqIHR5IC0gcXkgKiB0eDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRwcm9qZWN0KCBjYW1lcmEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKS5hcHBseU1hdHJpeDQoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0fVxuXG5cdHVucHJvamVjdCggY2FtZXJhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKS5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdH1cblxuXHR0cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKSB7XG5cblx0XHQvLyBpbnB1dDogVEhSRUUuTWF0cml4NCBhZmZpbmUgbWF0cml4XG5cdFx0Ly8gdmVjdG9yIGludGVycHJldGVkIGFzIGEgZGlyZWN0aW9uXG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogejtcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdGRpdmlkZSggdiApIHtcblxuXHRcdHRoaXMueCAvPSB2Lng7XG5cdFx0dGhpcy55IC89IHYueTtcblx0XHR0aGlzLnogLz0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpdmlkZVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9XG5cblx0bWluKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWF4KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCBtaW4ueiwgTWF0aC5taW4oIG1heC56LCB0aGlzLnogKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnogKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wTGVuZ3RoKCBtaW4sIG1heCApIHtcblxuXHRcdGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9XG5cblx0Zmxvb3IoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmZsb29yKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjZWlsKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm91bmQoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3VuZFRvWmVybygpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgudHJ1bmMoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgudHJ1bmMoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGgudHJ1bmMoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG5lZ2F0ZSgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXHRcdHRoaXMueiA9IC0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRvdCggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2Lno7XG5cblx0fVxuXG5cdC8vIFRPRE8gbGVuZ3RoU3F1YXJlZD9cblxuXHRsZW5ndGhTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLno7XG5cblx0fVxuXG5cdGxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiApO1xuXG5cdH1cblxuXHRtYW5oYXR0YW5MZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApICsgTWF0aC5hYnMoIHRoaXMueiApO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH1cblxuXHRzZXRMZW5ndGgoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9XG5cblx0bGVycCggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cdFx0dGhpcy56ICs9ICggdi56IC0gdGhpcy56ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRsZXJwVmVjdG9ycyggdjEsIHYyLCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCA9IHYxLnggKyAoIHYyLnggLSB2MS54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgPSB2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGE7XG5cdFx0dGhpcy56ID0gdjEueiArICggdjIueiAtIHYxLnogKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNyb3NzKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKCB0aGlzLCB2ICk7XG5cblx0fVxuXG5cdGNyb3NzVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdGNvbnN0IGF4ID0gYS54LCBheSA9IGEueSwgYXogPSBhLno7XG5cdFx0Y29uc3QgYnggPSBiLngsIGJ5ID0gYi55LCBieiA9IGIuejtcblxuXHRcdHRoaXMueCA9IGF5ICogYnogLSBheiAqIGJ5O1xuXHRcdHRoaXMueSA9IGF6ICogYnggLSBheCAqIGJ6O1xuXHRcdHRoaXMueiA9IGF4ICogYnkgLSBheSAqIGJ4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHByb2plY3RPblZlY3RvciggdiApIHtcblxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gdi5sZW5ndGhTcSgpO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCApO1xuXG5cdFx0Y29uc3Qgc2NhbGFyID0gdi5kb3QoIHRoaXMgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weSggdiApLm11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKTtcblxuXHR9XG5cblx0cHJvamVjdE9uUGxhbmUoIHBsYW5lTm9ybWFsICkge1xuXG5cdFx0X3ZlY3Rvci5jb3B5KCB0aGlzICkucHJvamVjdE9uVmVjdG9yKCBwbGFuZU5vcm1hbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc3ViKCBfdmVjdG9yICk7XG5cblx0fVxuXG5cdHJlZmxlY3QoIG5vcm1hbCApIHtcblxuXHRcdC8vIHJlZmxlY3QgaW5jaWRlbnQgdmVjdG9yIG9mZiBwbGFuZSBvcnRob2dvbmFsIHRvIG5vcm1hbFxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdHJldHVybiB0aGlzLnN1YiggX3ZlY3Rvci5jb3B5KCBub3JtYWwgKS5tdWx0aXBseVNjYWxhciggMiAqIHRoaXMuZG90KCBub3JtYWwgKSApICk7XG5cblx0fVxuXG5cdGFuZ2xlVG8oIHYgKSB7XG5cblx0XHRjb25zdCBkZW5vbWluYXRvciA9IE1hdGguc3FydCggdGhpcy5sZW5ndGhTcSgpICogdi5sZW5ndGhTcSgpICk7XG5cblx0XHRpZiAoIGRlbm9taW5hdG9yID09PSAwICkgcmV0dXJuIE1hdGguUEkgLyAyO1xuXG5cdFx0Y29uc3QgdGhldGEgPSB0aGlzLmRvdCggdiApIC8gZGVub21pbmF0b3I7XG5cblx0XHQvLyBjbGFtcCwgdG8gaGFuZGxlIG51bWVyaWNhbCBwcm9ibGVtc1xuXG5cdFx0cmV0dXJuIE1hdGguYWNvcyggTWF0aFV0aWxzLmNsYW1wKCB0aGV0YSwgLSAxLCAxICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUbyggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvU3F1YXJlZCggdiApIHtcblxuXHRcdGNvbnN0IGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueSwgZHogPSB0aGlzLnogLSB2Lno7XG5cblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6O1xuXG5cdH1cblxuXHRtYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKSArIE1hdGguYWJzKCB0aGlzLnogLSB2LnogKTtcblxuXHR9XG5cblx0c2V0RnJvbVNwaGVyaWNhbCggcyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21TcGhlcmljYWxDb29yZHMoIHMucmFkaXVzLCBzLnBoaSwgcy50aGV0YSApO1xuXG5cdH1cblxuXHRzZXRGcm9tU3BoZXJpY2FsQ29vcmRzKCByYWRpdXMsIHBoaSwgdGhldGEgKSB7XG5cblx0XHRjb25zdCBzaW5QaGlSYWRpdXMgPSBNYXRoLnNpbiggcGhpICkgKiByYWRpdXM7XG5cblx0XHR0aGlzLnggPSBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNvcyggcGhpICkgKiByYWRpdXM7XG5cdFx0dGhpcy56ID0gc2luUGhpUmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUN5bGluZHJpY2FsKCBjICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzKCBjLnJhZGl1cywgYy50aGV0YSwgYy55ICk7XG5cblx0fVxuXG5cdHNldEZyb21DeWxpbmRyaWNhbENvb3JkcyggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMueCA9IHJhZGl1cyAqIE1hdGguc2luKCB0aGV0YSApO1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gcmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBtICkge1xuXG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAxMiBdO1xuXHRcdHRoaXMueSA9IGVbIDEzIF07XG5cdFx0dGhpcy56ID0gZVsgMTQgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tTWF0cml4U2NhbGUoIG0gKSB7XG5cblx0XHRjb25zdCBzeCA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN5ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc3ogPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDIgKS5sZW5ndGgoKTtcblxuXHRcdHRoaXMueCA9IHN4O1xuXHRcdHRoaXMueSA9IHN5O1xuXHRcdHRoaXMueiA9IHN6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXhDb2x1bW4oIG0sIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbUFycmF5KCBtLmVsZW1lbnRzLCBpbmRleCAqIDQgKTtcblxuXHR9XG5cblx0c2V0RnJvbU1hdHJpeDNDb2x1bW4oIG0sIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbUFycmF5KCBtLmVsZW1lbnRzLCBpbmRleCAqIDMgKTtcblxuXHR9XG5cblx0c2V0RnJvbUV1bGVyKCBlICkge1xuXG5cdFx0dGhpcy54ID0gZS5feDtcblx0XHR0aGlzLnkgPSBlLl95O1xuXHRcdHRoaXMueiA9IGUuX3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUNvbG9yKCBjICkge1xuXG5cdFx0dGhpcy54ID0gYy5yO1xuXHRcdHRoaXMueSA9IGMuZztcblx0XHR0aGlzLnogPSBjLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCB2ICkge1xuXG5cdFx0cmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSAmJiAoIHYueiA9PT0gdGhpcy56ICkgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYW5kb20oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdHRoaXMueSA9IE1hdGgucmFuZG9tKCk7XG5cdFx0dGhpcy56ID0gTWF0aC5yYW5kb20oKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYW5kb21EaXJlY3Rpb24oKSB7XG5cblx0XHQvLyBodHRwczovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9TcGhlcmVQb2ludFBpY2tpbmcuaHRtbFxuXG5cdFx0Y29uc3QgdGhldGEgPSBNYXRoLnJhbmRvbSgpICogTWF0aC5QSSAqIDI7XG5cdFx0Y29uc3QgdSA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcblx0XHRjb25zdCBjID0gTWF0aC5zcXJ0KCAxIC0gdSAqIHUgKTtcblxuXHRcdHRoaXMueCA9IGMgKiBNYXRoLmNvcyggdGhldGEgKTtcblx0XHR0aGlzLnkgPSB1O1xuXHRcdHRoaXMueiA9IGMgKiBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHtcblxuXHRcdHlpZWxkIHRoaXMueDtcblx0XHR5aWVsZCB0aGlzLnk7XG5cdFx0eWllbGQgdGhpcy56O1xuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3F1YXRlcm5pb24gPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5cbmV4cG9ydCB7IFZlY3RvcjMgfTtcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuL1ZlY3RvcjMuanMnO1xuXG5jbGFzcyBCb3gzIHtcblxuXHRjb25zdHJ1Y3RvciggbWluID0gbmV3IFZlY3RvcjMoICsgSW5maW5pdHksICsgSW5maW5pdHksICsgSW5maW5pdHkgKSwgbWF4ID0gbmV3IFZlY3RvcjMoIC0gSW5maW5pdHksIC0gSW5maW5pdHksIC0gSW5maW5pdHkgKSApIHtcblxuXHRcdHRoaXMuaXNCb3gzID0gdHJ1ZTtcblxuXHRcdHRoaXMubWluID0gbWluO1xuXHRcdHRoaXMubWF4ID0gbWF4O1xuXG5cdH1cblxuXHRzZXQoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUFycmF5KCBhcnJheSApIHtcblxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYXJyYXkubGVuZ3RoOyBpIDwgaWw7IGkgKz0gMyApIHtcblxuXHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBfdmVjdG9yLmZyb21BcnJheSggYXJyYXksIGkgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYXR0cmlidXRlLmNvdW50OyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggX3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGkgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Qb2ludHMoIHBvaW50cyApIHtcblxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIHBvaW50c1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUNlbnRlckFuZFNpemUoIGNlbnRlciwgc2l6ZSApIHtcblxuXHRcdGNvbnN0IGhhbGZTaXplID0gX3ZlY3Rvci5jb3B5KCBzaXplICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGNlbnRlciApLmFkZCggaGFsZlNpemUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tT2JqZWN0KCBvYmplY3QsIHByZWNpc2UgPSBmYWxzZSApIHtcblxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRyZXR1cm4gdGhpcy5leHBhbmRCeU9iamVjdCggb2JqZWN0LCBwcmVjaXNlICk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRjb3B5KCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5jb3B5KCBib3gubWluICk7XG5cdFx0dGhpcy5tYXguY29weSggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VFbXB0eSgpIHtcblxuXHRcdHRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gdGhpcy5taW4ueiA9ICsgSW5maW5pdHk7XG5cdFx0dGhpcy5tYXgueCA9IHRoaXMubWF4LnkgPSB0aGlzLm1heC56ID0gLSBJbmZpbml0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRpc0VtcHR5KCkge1xuXG5cdFx0Ly8gdGhpcyBpcyBhIG1vcmUgcm9idXN0IGNoZWNrIGZvciBlbXB0eSB0aGFuICggdm9sdW1lIDw9IDAgKSBiZWNhdXNlIHZvbHVtZSBjYW4gZ2V0IHBvc2l0aXZlIHdpdGggdHdvIG5lZ2F0aXZlIGF4ZXNcblxuXHRcdHJldHVybiAoIHRoaXMubWF4LnggPCB0aGlzLm1pbi54ICkgfHwgKCB0aGlzLm1heC55IDwgdGhpcy5taW4ueSApIHx8ICggdGhpcy5tYXgueiA8IHRoaXMubWluLnogKTtcblxuXHR9XG5cblx0Z2V0Q2VudGVyKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwLCAwICkgOiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5taW4sIHRoaXMubWF4ICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH1cblxuXHRnZXRTaXplKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7XG5cblx0fVxuXG5cdGV4cGFuZEJ5UG9pbnQoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBwb2ludCApO1xuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHBhbmRCeVZlY3RvciggdmVjdG9yICkge1xuXG5cdFx0dGhpcy5taW4uc3ViKCB2ZWN0b3IgKTtcblx0XHR0aGlzLm1heC5hZGQoIHZlY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGV4cGFuZEJ5U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGRTY2FsYXIoIC0gc2NhbGFyICk7XG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHBhbmRCeU9iamVjdCggb2JqZWN0LCBwcmVjaXNlID0gZmFsc2UgKSB7XG5cblx0XHQvLyBDb21wdXRlcyB0aGUgd29ybGQtYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveCBvZiBhbiBvYmplY3QgKGluY2x1ZGluZyBpdHMgY2hpbGRyZW4pLFxuXHRcdC8vIGFjY291bnRpbmcgZm9yIGJvdGggdGhlIG9iamVjdCdzLCBhbmQgY2hpbGRyZW4ncywgd29ybGQgdHJhbnNmb3Jtc1xuXG5cdFx0b2JqZWN0LnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgZmFsc2UgKTtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0aWYgKCBnZW9tZXRyeSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXG5cdFx0XHQvLyBwcmVjaXNlIEFBQkIgY29tcHV0YXRpb24gYmFzZWQgb24gdmVydGV4IGRhdGEgcmVxdWlyZXMgYXQgbGVhc3QgYSBwb3NpdGlvbiBhdHRyaWJ1dGUuXG5cdFx0XHQvLyBpbnN0YW5jaW5nIGlzbid0IHN1cHBvcnRlZCBzbyBmYXIgYW5kIHVzZXMgdGhlIG5vcm1hbCAoY29uc2VydmF0aXZlKSBjb2RlIHBhdGguXG5cblx0XHRcdGlmICggcHJlY2lzZSA9PT0gdHJ1ZSAmJiBwb3NpdGlvbkF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggIT09IHRydWUgKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBvYmplY3QuaXNNZXNoID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuZ2V0VmVydGV4UG9zaXRpb24oIGksIF92ZWN0b3IgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdF92ZWN0b3IuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblx0XHRcdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuYm91bmRpbmdCb3ggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdC8vIG9iamVjdC1sZXZlbCBib3VuZGluZyBib3hcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmJvdW5kaW5nQm94ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfYm94LmNvcHkoIG9iamVjdC5ib3VuZGluZ0JveCApO1xuXG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGdlb21ldHJ5LWxldmVsIGJvdW5kaW5nIGJveFxuXG5cdFx0XHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfYm94LmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdF9ib3guYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR0aGlzLnVuaW9uKCBfYm94ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5leHBhbmRCeU9iamVjdCggY2hpbGRyZW5bIGkgXSwgcHJlY2lzZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbnRhaW5zUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIHBvaW50LnggPCB0aGlzLm1pbi54IHx8IHBvaW50LnggPiB0aGlzLm1heC54IHx8XG5cdFx0XHRwb2ludC55IDwgdGhpcy5taW4ueSB8fCBwb2ludC55ID4gdGhpcy5tYXgueSB8fFxuXHRcdFx0cG9pbnQueiA8IHRoaXMubWluLnogfHwgcG9pbnQueiA+IHRoaXMubWF4LnogPyBmYWxzZSA6IHRydWU7XG5cblx0fVxuXG5cdGNvbnRhaW5zQm94KCBib3ggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5taW4ueCA8PSBib3gubWluLnggJiYgYm94Lm1heC54IDw9IHRoaXMubWF4LnggJiZcblx0XHRcdHRoaXMubWluLnkgPD0gYm94Lm1pbi55ICYmIGJveC5tYXgueSA8PSB0aGlzLm1heC55ICYmXG5cdFx0XHR0aGlzLm1pbi56IDw9IGJveC5taW4ueiAmJiBib3gubWF4LnogPD0gdGhpcy5tYXguejtcblxuXHR9XG5cblx0Z2V0UGFyYW1ldGVyKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0Ly8gVGhpcyBjYW4gcG90ZW50aWFsbHkgaGF2ZSBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBib3hcblx0XHQvLyBoYXMgYSBzaXplIGRpbWVuc2lvbiBvZiAwLlxuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoXG5cdFx0XHQoIHBvaW50LnggLSB0aGlzLm1pbi54ICkgLyAoIHRoaXMubWF4LnggLSB0aGlzLm1pbi54ICksXG5cdFx0XHQoIHBvaW50LnkgLSB0aGlzLm1pbi55ICkgLyAoIHRoaXMubWF4LnkgLSB0aGlzLm1pbi55ICksXG5cdFx0XHQoIHBvaW50LnogLSB0aGlzLm1pbi56ICkgLyAoIHRoaXMubWF4LnogLSB0aGlzLm1pbi56IClcblx0XHQpO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHQvLyB1c2luZyA2IHNwbGl0dGluZyBwbGFuZXMgdG8gcnVsZSBvdXQgaW50ZXJzZWN0aW9ucy5cblx0XHRyZXR1cm4gYm94Lm1heC54IDwgdGhpcy5taW4ueCB8fCBib3gubWluLnggPiB0aGlzLm1heC54IHx8XG5cdFx0XHRib3gubWF4LnkgPCB0aGlzLm1pbi55IHx8IGJveC5taW4ueSA+IHRoaXMubWF4LnkgfHxcblx0XHRcdGJveC5tYXgueiA8IHRoaXMubWluLnogfHwgYm94Lm1pbi56ID4gdGhpcy5tYXgueiA/IGZhbHNlIDogdHJ1ZTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkge1xuXG5cdFx0Ly8gRmluZCB0aGUgcG9pbnQgb24gdGhlIEFBQkIgY2xvc2VzdCB0byB0aGUgc3BoZXJlIGNlbnRlci5cblx0XHR0aGlzLmNsYW1wUG9pbnQoIHNwaGVyZS5jZW50ZXIsIF92ZWN0b3IgKTtcblxuXHRcdC8vIElmIHRoYXQgcG9pbnQgaXMgaW5zaWRlIHRoZSBzcGhlcmUsIHRoZSBBQUJCIGFuZCBzcGhlcmUgaW50ZXJzZWN0LlxuXHRcdHJldHVybiBfdmVjdG9yLmRpc3RhbmNlVG9TcXVhcmVkKCBzcGhlcmUuY2VudGVyICkgPD0gKCBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cyApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzUGxhbmUoIHBsYW5lICkge1xuXG5cdFx0Ly8gV2UgY29tcHV0ZSB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBkb3QgcHJvZHVjdCB2YWx1ZXMuIElmIHRob3NlIHZhbHVlc1xuXHRcdC8vIGFyZSBvbiB0aGUgc2FtZSBzaWRlIChiYWNrIG9yIGZyb250KSBvZiB0aGUgcGxhbmUsIHRoZW4gdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLlxuXG5cdFx0bGV0IG1pbiwgbWF4O1xuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueCA+IDAgKSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblxuXHRcdH1cblxuXHRcdGlmICggcGxhbmUubm9ybWFsLnkgPiAwICkge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5tYXgueTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4Lnk7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueiA+IDAgKSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWluICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5tYXguejtcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gKCBtaW4gPD0gLSBwbGFuZS5jb25zdGFudCAmJiBtYXggPj0gLSBwbGFuZS5jb25zdGFudCApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzVHJpYW5nbGUoIHRyaWFuZ2xlICkge1xuXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29tcHV0ZSBib3ggY2VudGVyIGFuZCBleHRlbnRzXG5cdFx0dGhpcy5nZXRDZW50ZXIoIF9jZW50ZXIgKTtcblx0XHRfZXh0ZW50cy5zdWJWZWN0b3JzKCB0aGlzLm1heCwgX2NlbnRlciApO1xuXG5cdFx0Ly8gdHJhbnNsYXRlIHRyaWFuZ2xlIHRvIGFhYmIgb3JpZ2luXG5cdFx0X3YwLnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmEsIF9jZW50ZXIgKTtcblx0XHRfdjEuc3ViVmVjdG9ycyggdHJpYW5nbGUuYiwgX2NlbnRlciApO1xuXHRcdF92Mi5zdWJWZWN0b3JzKCB0cmlhbmdsZS5jLCBfY2VudGVyICk7XG5cblx0XHQvLyBjb21wdXRlIGVkZ2UgdmVjdG9ycyBmb3IgdHJpYW5nbGVcblx0XHRfZjAuc3ViVmVjdG9ycyggX3YxLCBfdjAgKTtcblx0XHRfZjEuc3ViVmVjdG9ycyggX3YyLCBfdjEgKTtcblx0XHRfZjIuc3ViVmVjdG9ycyggX3YwLCBfdjIgKTtcblxuXHRcdC8vIHRlc3QgYWdhaW5zdCBheGVzIHRoYXQgYXJlIGdpdmVuIGJ5IGNyb3NzIHByb2R1Y3QgY29tYmluYXRpb25zIG9mIHRoZSBlZGdlcyBvZiB0aGUgdHJpYW5nbGUgYW5kIHRoZSBlZGdlcyBvZiB0aGUgYWFiYlxuXHRcdC8vIG1ha2UgYW4gYXhpcyB0ZXN0aW5nIG9mIGVhY2ggb2YgdGhlIDMgc2lkZXMgb2YgdGhlIGFhYmIgYWdhaW5zdCBlYWNoIG9mIHRoZSAzIHNpZGVzIG9mIHRoZSB0cmlhbmdsZSA9IDkgYXhpcyBvZiBzZXBhcmF0aW9uXG5cdFx0Ly8gYXhpc19paiA9IHVfaSB4IGZfaiAodTAsIHUxLCB1MiA9IGZhY2Ugbm9ybWFscyBvZiBhYWJiID0geCx5LHogYXhlcyB2ZWN0b3JzIHNpbmNlIGFhYmIgaXMgYXhpcyBhbGlnbmVkKVxuXHRcdGxldCBheGVzID0gW1xuXHRcdFx0MCwgLSBfZjAueiwgX2YwLnksIDAsIC0gX2YxLnosIF9mMS55LCAwLCAtIF9mMi56LCBfZjIueSxcblx0XHRcdF9mMC56LCAwLCAtIF9mMC54LCBfZjEueiwgMCwgLSBfZjEueCwgX2YyLnosIDAsIC0gX2YyLngsXG5cdFx0XHQtIF9mMC55LCBfZjAueCwgMCwgLSBfZjEueSwgX2YxLngsIDAsIC0gX2YyLnksIF9mMi54LCAwXG5cdFx0XTtcblx0XHRpZiAoICEgc2F0Rm9yQXhlcyggYXhlcywgX3YwLCBfdjEsIF92MiwgX2V4dGVudHMgKSApIHtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdGVzdCAzIGZhY2Ugbm9ybWFscyBmcm9tIHRoZSBhYWJiXG5cdFx0YXhlcyA9IFsgMSwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMSBdO1xuXHRcdGlmICggISBzYXRGb3JBeGVzKCBheGVzLCBfdjAsIF92MSwgX3YyLCBfZXh0ZW50cyApICkge1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHQvLyBmaW5hbGx5IHRlc3RpbmcgdGhlIGZhY2Ugbm9ybWFsIG9mIHRoZSB0cmlhbmdsZVxuXHRcdC8vIHVzZSBhbHJlYWR5IGV4aXN0aW5nIHRyaWFuZ2xlIGVkZ2UgdmVjdG9ycyBoZXJlXG5cdFx0X3RyaWFuZ2xlTm9ybWFsLmNyb3NzVmVjdG9ycyggX2YwLCBfZjEgKTtcblx0XHRheGVzID0gWyBfdHJpYW5nbGVOb3JtYWwueCwgX3RyaWFuZ2xlTm9ybWFsLnksIF90cmlhbmdsZU5vcm1hbC56IF07XG5cblx0XHRyZXR1cm4gc2F0Rm9yQXhlcyggYXhlcywgX3YwLCBfdjEsIF92MiwgX2V4dGVudHMgKTtcblxuXHR9XG5cblx0Y2xhbXBQb2ludCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jbGFtcFBvaW50KCBwb2ludCwgX3ZlY3RvciApLmRpc3RhbmNlVG8oIHBvaW50ICk7XG5cblx0fVxuXG5cdGdldEJvdW5kaW5nU3BoZXJlKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkge1xuXG5cdFx0XHR0YXJnZXQubWFrZUVtcHR5KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmdldENlbnRlciggdGFyZ2V0LmNlbnRlciApO1xuXG5cdFx0XHR0YXJnZXQucmFkaXVzID0gdGhpcy5nZXRTaXplKCBfdmVjdG9yICkubGVuZ3RoKCkgKiAwLjU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHRpbnRlcnNlY3QoIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1heCggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1pbiggYm94Lm1heCApO1xuXG5cdFx0Ly8gZW5zdXJlIHRoYXQgaWYgdGhlcmUgaXMgbm8gb3ZlcmxhcCwgdGhlIHJlc3VsdCBpcyBmdWxseSBlbXB0eSwgbm90IHNsaWdodGx5IGVtcHR5IHdpdGggbm9uLWluZi8raW5mIHZhbHVlcyB0aGF0IHdpbGwgY2F1c2Ugc3Vic2VxdWVuY2UgaW50ZXJzZWN0cyB0byBlcnJvbmVvdXNseSByZXR1cm4gdmFsaWQgdmFsdWVzLlxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVuaW9uKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5tYXgoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdC8vIHRyYW5zZm9ybSBvZiBlbXB0eSBib3ggaXMgYW4gZW1wdHkgYm94LlxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSByZXR1cm4gdGhpcztcblxuXHRcdC8vIE5PVEU6IEkgYW0gdXNpbmcgYSBiaW5hcnkgcGF0dGVybiB0byBzcGVjaWZ5IGFsbCAyXjMgY29tYmluYXRpb25zIGJlbG93XG5cdFx0X3BvaW50c1sgMCBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAwMFxuXHRcdF9wb2ludHNbIDEgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWluLnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMDFcblx0XHRfcG9pbnRzWyAyIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDEwXG5cdFx0X3BvaW50c1sgMyBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAxMVxuXHRcdF9wb2ludHNbIDQgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMDBcblx0XHRfcG9pbnRzWyA1IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTAxXG5cdFx0X3BvaW50c1sgNiBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDExMFxuXHRcdF9wb2ludHNbIDcgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWF4LnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMTFcblxuXHRcdHRoaXMuc2V0RnJvbVBvaW50cyggX3BvaW50cyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRyYW5zbGF0ZSggb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5taW4uYWRkKCBvZmZzZXQgKTtcblx0XHR0aGlzLm1heC5hZGQoIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5taW4uZXF1YWxzKCB0aGlzLm1pbiApICYmIGJveC5tYXguZXF1YWxzKCB0aGlzLm1heCApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfcG9pbnRzID0gW1xuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKVxuXTtcblxuY29uc3QgX3ZlY3RvciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX2JveCA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcblxuLy8gdHJpYW5nbGUgY2VudGVyZWQgdmVydGljZXNcblxuY29uc3QgX3YwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG4vLyB0cmlhbmdsZSBlZGdlIHZlY3RvcnNcblxuY29uc3QgX2YwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2YxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2YyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfY2VudGVyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2V4dGVudHMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdHJpYW5nbGVOb3JtYWwgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdGVzdEF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmZ1bmN0aW9uIHNhdEZvckF4ZXMoIGF4ZXMsIHYwLCB2MSwgdjIsIGV4dGVudHMgKSB7XG5cblx0Zm9yICggbGV0IGkgPSAwLCBqID0gYXhlcy5sZW5ndGggLSAzOyBpIDw9IGo7IGkgKz0gMyApIHtcblxuXHRcdF90ZXN0QXhpcy5mcm9tQXJyYXkoIGF4ZXMsIGkgKTtcblx0XHQvLyBwcm9qZWN0IHRoZSBhYWJiIG9udG8gdGhlIHNlcGFyYXRpbmcgYXhpc1xuXHRcdGNvbnN0IHIgPSBleHRlbnRzLnggKiBNYXRoLmFicyggX3Rlc3RBeGlzLnggKSArIGV4dGVudHMueSAqIE1hdGguYWJzKCBfdGVzdEF4aXMueSApICsgZXh0ZW50cy56ICogTWF0aC5hYnMoIF90ZXN0QXhpcy56ICk7XG5cdFx0Ly8gcHJvamVjdCBhbGwgMyB2ZXJ0aWNlcyBvZiB0aGUgdHJpYW5nbGUgb250byB0aGUgc2VwYXJhdGluZyBheGlzXG5cdFx0Y29uc3QgcDAgPSB2MC5kb3QoIF90ZXN0QXhpcyApO1xuXHRcdGNvbnN0IHAxID0gdjEuZG90KCBfdGVzdEF4aXMgKTtcblx0XHRjb25zdCBwMiA9IHYyLmRvdCggX3Rlc3RBeGlzICk7XG5cdFx0Ly8gYWN0dWFsIHRlc3QsIGJhc2ljYWxseSBzZWUgaWYgZWl0aGVyIG9mIHRoZSBtb3N0IGV4dHJlbWUgb2YgdGhlIHRyaWFuZ2xlIHBvaW50cyBpbnRlcnNlY3RzIHJcblx0XHRpZiAoIE1hdGgubWF4KCAtIE1hdGgubWF4KCBwMCwgcDEsIHAyICksIE1hdGgubWluKCBwMCwgcDEsIHAyICkgKSA+IHIgKSB7XG5cblx0XHRcdC8vIHBvaW50cyBvZiB0aGUgcHJvamVjdGVkIHRyaWFuZ2xlIGFyZSBvdXRzaWRlIHRoZSBwcm9qZWN0ZWQgaGFsZi1sZW5ndGggb2YgdGhlIGFhYmJcblx0XHRcdC8vIHRoZSBheGlzIGlzIHNlcGFyYXRpbmcgYW5kIHdlIGNhbiBleGl0XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB0cnVlO1xuXG59XG5cbmV4cG9ydCB7IEJveDMgfTtcbiIsImltcG9ydCB7IEJveDMgfSBmcm9tICcuL0JveDMuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMy5qcyc7XG5cbmNvbnN0IF9ib3ggPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7XG5jb25zdCBfdjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIFNwaGVyZSB7XG5cblx0Y29uc3RydWN0b3IoIGNlbnRlciA9IG5ldyBWZWN0b3IzKCksIHJhZGl1cyA9IC0gMSApIHtcblxuXHRcdHRoaXMuaXNTcGhlcmUgPSB0cnVlO1xuXG5cdFx0dGhpcy5jZW50ZXIgPSBjZW50ZXI7XG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cblx0fVxuXG5cdHNldCggY2VudGVyLCByYWRpdXMgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5jb3B5KCBjZW50ZXIgKTtcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMsIG9wdGlvbmFsQ2VudGVyICkge1xuXG5cdFx0Y29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXI7XG5cblx0XHRpZiAoIG9wdGlvbmFsQ2VudGVyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNlbnRlci5jb3B5KCBvcHRpb25hbENlbnRlciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2JveC5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKS5nZXRDZW50ZXIoIGNlbnRlciApO1xuXG5cdFx0fVxuXG5cdFx0bGV0IG1heFJhZGl1c1NxID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdG1heFJhZGl1c1NxID0gTWF0aC5tYXgoIG1heFJhZGl1c1NxLCBjZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50c1sgaSBdICkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMucmFkaXVzID0gTWF0aC5zcXJ0KCBtYXhSYWRpdXNTcSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHNwaGVyZSApIHtcblxuXHRcdHRoaXMuY2VudGVyLmNvcHkoIHNwaGVyZS5jZW50ZXIgKTtcblx0XHR0aGlzLnJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aXNFbXB0eSgpIHtcblxuXHRcdHJldHVybiAoIHRoaXMucmFkaXVzIDwgMCApO1xuXG5cdH1cblxuXHRtYWtlRW1wdHkoKSB7XG5cblx0XHR0aGlzLmNlbnRlci5zZXQoIDAsIDAsIDAgKTtcblx0XHR0aGlzLnJhZGl1cyA9IC0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb250YWluc1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiAoIHBvaW50LmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLmNlbnRlciApIDw9ICggdGhpcy5yYWRpdXMgKiB0aGlzLnJhZGl1cyApICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gKCBwb2ludC5kaXN0YW5jZVRvKCB0aGlzLmNlbnRlciApIC0gdGhpcy5yYWRpdXMgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkge1xuXG5cdFx0Y29uc3QgcmFkaXVzU3VtID0gdGhpcy5yYWRpdXMgKyBzcGhlcmUucmFkaXVzO1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuY2VudGVyICkgPD0gKCByYWRpdXNTdW0gKiByYWRpdXNTdW0gKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c0JveCggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzU3BoZXJlKCB0aGlzICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNQbGFuZSggcGxhbmUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5jZW50ZXIgKSApIDw9IHRoaXMucmFkaXVzO1xuXG5cdH1cblxuXHRjbGFtcFBvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgZGVsdGFMZW5ndGhTcSA9IHRoaXMuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0dGFyZ2V0LmNvcHkoIHBvaW50ICk7XG5cblx0XHRpZiAoIGRlbHRhTGVuZ3RoU3EgPiAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApIHtcblxuXHRcdFx0dGFyZ2V0LnN1YiggdGhpcy5jZW50ZXIgKS5ub3JtYWxpemUoKTtcblx0XHRcdHRhcmdldC5tdWx0aXBseVNjYWxhciggdGhpcy5yYWRpdXMgKS5hZGQoIHRoaXMuY2VudGVyICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHRnZXRCb3VuZGluZ0JveCggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHtcblxuXHRcdFx0Ly8gRW1wdHkgc3BoZXJlIHByb2R1Y2VzIGVtcHR5IGJvdW5kaW5nIGJveFxuXHRcdFx0dGFyZ2V0Lm1ha2VFbXB0eSgpO1xuXHRcdFx0cmV0dXJuIHRhcmdldDtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5zZXQoIHRoaXMuY2VudGVyLCB0aGlzLmNlbnRlciApO1xuXHRcdHRhcmdldC5leHBhbmRCeVNjYWxhciggdGhpcy5yYWRpdXMgKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbWF0cml4ICkge1xuXG5cdFx0dGhpcy5jZW50ZXIuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblx0XHR0aGlzLnJhZGl1cyA9IHRoaXMucmFkaXVzICogbWF0cml4LmdldE1heFNjYWxlT25BeGlzKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJhbnNsYXRlKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5hZGQoIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGV4cGFuZEJ5UG9pbnQoIHBvaW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHtcblxuXHRcdFx0dGhpcy5jZW50ZXIuY29weSggcG9pbnQgKTtcblxuXHRcdFx0dGhpcy5yYWRpdXMgPSAwO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdF92MS5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5jZW50ZXIgKTtcblxuXHRcdGNvbnN0IGxlbmd0aFNxID0gX3YxLmxlbmd0aFNxKCk7XG5cblx0XHRpZiAoIGxlbmd0aFNxID4gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKSB7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgbWluaW1hbCBzcGhlcmVcblxuXHRcdFx0Y29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KCBsZW5ndGhTcSApO1xuXG5cdFx0XHRjb25zdCBkZWx0YSA9ICggbGVuZ3RoIC0gdGhpcy5yYWRpdXMgKSAqIDAuNTtcblxuXHRcdFx0dGhpcy5jZW50ZXIuYWRkU2NhbGVkVmVjdG9yKCBfdjEsIGRlbHRhIC8gbGVuZ3RoICk7XG5cblx0XHRcdHRoaXMucmFkaXVzICs9IGRlbHRhO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVuaW9uKCBzcGhlcmUgKSB7XG5cblx0XHRpZiAoIHNwaGVyZS5pc0VtcHR5KCkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHtcblxuXHRcdFx0dGhpcy5jb3B5KCBzcGhlcmUgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY2VudGVyLmVxdWFscyggc3BoZXJlLmNlbnRlciApID09PSB0cnVlICkge1xuXG5cdFx0XHQgdGhpcy5yYWRpdXMgPSBNYXRoLm1heCggdGhpcy5yYWRpdXMsIHNwaGVyZS5yYWRpdXMgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF92Mi5zdWJWZWN0b3JzKCBzcGhlcmUuY2VudGVyLCB0aGlzLmNlbnRlciApLnNldExlbmd0aCggc3BoZXJlLnJhZGl1cyApO1xuXG5cdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIF92MS5jb3B5KCBzcGhlcmUuY2VudGVyICkuYWRkKCBfdjIgKSApO1xuXG5cdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIF92MS5jb3B5KCBzcGhlcmUuY2VudGVyICkuc3ViKCBfdjIgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5jZW50ZXIuZXF1YWxzKCB0aGlzLmNlbnRlciApICYmICggc3BoZXJlLnJhZGl1cyA9PT0gdGhpcy5yYWRpdXMgKTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFNwaGVyZSB9O1xuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMy5qcyc7XG5cbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfc2VnQ2VudGVyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3NlZ0RpciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9kaWZmID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfZWRnZTEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfZWRnZTIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbm9ybWFsID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBSYXkge1xuXG5cdGNvbnN0cnVjdG9yKCBvcmlnaW4gPSBuZXcgVmVjdG9yMygpLCBkaXJlY3Rpb24gPSBuZXcgVmVjdG9yMyggMCwgMCwgLSAxICkgKSB7XG5cblx0XHR0aGlzLm9yaWdpbiA9IG9yaWdpbjtcblx0XHR0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcblxuXHR9XG5cblx0c2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcblxuXHRcdHRoaXMub3JpZ2luLmNvcHkoIG9yaWdpbiApO1xuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIGRpcmVjdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHJheSApIHtcblxuXHRcdHRoaXMub3JpZ2luLmNvcHkoIHJheS5vcmlnaW4gKTtcblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCByYXkuZGlyZWN0aW9uICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXQoIHQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5vcmlnaW4gKS5hZGRTY2FsZWRWZWN0b3IoIHRoaXMuZGlyZWN0aW9uLCB0ICk7XG5cblx0fVxuXG5cdGxvb2tBdCggdiApIHtcblxuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIHYgKS5zdWIoIHRoaXMub3JpZ2luICkubm9ybWFsaXplKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmVjYXN0KCB0ICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uY29weSggdGhpcy5hdCggdCwgX3ZlY3RvciApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHRhcmdldC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5vcmlnaW4gKTtcblxuXHRcdGNvbnN0IGRpcmVjdGlvbkRpc3RhbmNlID0gdGFyZ2V0LmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGlyZWN0aW9uRGlzdGFuY2UgPCAwICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMub3JpZ2luICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMub3JpZ2luICkuYWRkU2NhbGVkVmVjdG9yKCB0aGlzLmRpcmVjdGlvbiwgZGlyZWN0aW9uRGlzdGFuY2UgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0Y29uc3QgZGlyZWN0aW9uRGlzdGFuY2UgPSBfdmVjdG9yLnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLm9yaWdpbiApLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdC8vIHBvaW50IGJlaGluZCB0aGUgcmF5XG5cblx0XHRpZiAoIGRpcmVjdGlvbkRpc3RhbmNlIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0fVxuXG5cdFx0X3ZlY3Rvci5jb3B5KCB0aGlzLm9yaWdpbiApLmFkZFNjYWxlZFZlY3RvciggdGhpcy5kaXJlY3Rpb24sIGRpcmVjdGlvbkRpc3RhbmNlICk7XG5cblx0XHRyZXR1cm4gX3ZlY3Rvci5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VTcVRvU2VnbWVudCggdjAsIHYxLCBvcHRpb25hbFBvaW50T25SYXksIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7XG5cblx0XHQvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wbWpvbmlhay9HZW9tZXRyaWNUb29scy9ibG9iL21hc3Rlci9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZURpc3RSYXlTZWdtZW50Lmhcblx0XHQvLyBJdCByZXR1cm5zIHRoZSBtaW4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgcmF5IGFuZCB0aGUgc2VnbWVudFxuXHRcdC8vIGRlZmluZWQgYnkgdjAgYW5kIHYxXG5cdFx0Ly8gSXQgY2FuIGFsc28gc2V0IHR3byBvcHRpb25hbCB0YXJnZXRzIDpcblx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSByYXlcblx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSBzZWdtZW50XG5cblx0XHRfc2VnQ2VudGVyLmNvcHkoIHYwICkuYWRkKCB2MSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblx0XHRfc2VnRGlyLmNvcHkoIHYxICkuc3ViKCB2MCApLm5vcm1hbGl6ZSgpO1xuXHRcdF9kaWZmLmNvcHkoIHRoaXMub3JpZ2luICkuc3ViKCBfc2VnQ2VudGVyICk7XG5cblx0XHRjb25zdCBzZWdFeHRlbnQgPSB2MC5kaXN0YW5jZVRvKCB2MSApICogMC41O1xuXHRcdGNvbnN0IGEwMSA9IC0gdGhpcy5kaXJlY3Rpb24uZG90KCBfc2VnRGlyICk7XG5cdFx0Y29uc3QgYjAgPSBfZGlmZi5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cdFx0Y29uc3QgYjEgPSAtIF9kaWZmLmRvdCggX3NlZ0RpciApO1xuXHRcdGNvbnN0IGMgPSBfZGlmZi5sZW5ndGhTcSgpO1xuXHRcdGNvbnN0IGRldCA9IE1hdGguYWJzKCAxIC0gYTAxICogYTAxICk7XG5cdFx0bGV0IHMwLCBzMSwgc3FyRGlzdCwgZXh0RGV0O1xuXG5cdFx0aWYgKCBkZXQgPiAwICkge1xuXG5cdFx0XHQvLyBUaGUgcmF5IGFuZCBzZWdtZW50IGFyZSBub3QgcGFyYWxsZWwuXG5cblx0XHRcdHMwID0gYTAxICogYjEgLSBiMDtcblx0XHRcdHMxID0gYTAxICogYjAgLSBiMTtcblx0XHRcdGV4dERldCA9IHNlZ0V4dGVudCAqIGRldDtcblxuXHRcdFx0aWYgKCBzMCA+PSAwICkge1xuXG5cdFx0XHRcdGlmICggczEgPj0gLSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHMxIDw9IGV4dERldCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDBcblx0XHRcdFx0XHRcdC8vIE1pbmltdW0gYXQgaW50ZXJpb3IgcG9pbnRzIG9mIHJheSBhbmQgc2VnbWVudC5cblxuXHRcdFx0XHRcdFx0Y29uc3QgaW52RGV0ID0gMSAvIGRldDtcblx0XHRcdFx0XHRcdHMwICo9IGludkRldDtcblx0XHRcdFx0XHRcdHMxICo9IGludkRldDtcblx0XHRcdFx0XHRcdHNxckRpc3QgPSBzMCAqICggczAgKyBhMDEgKiBzMSArIDIgKiBiMCApICsgczEgKiAoIGEwMSAqIHMwICsgczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gMVxuXG5cdFx0XHRcdFx0XHRzMSA9IHNlZ0V4dGVudDtcblx0XHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHJlZ2lvbiA1XG5cblx0XHRcdFx0XHRzMSA9IC0gc2VnRXh0ZW50O1xuXHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHMxIDw9IC0gZXh0RGV0ICkge1xuXG5cdFx0XHRcdFx0Ly8gcmVnaW9uIDRcblxuXHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCAtIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTtcblx0XHRcdFx0XHRzMSA9ICggczAgPiAwICkgPyAtIHNlZ0V4dGVudCA6IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XG5cdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzMSA8PSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHQvLyByZWdpb24gM1xuXG5cdFx0XHRcdFx0czAgPSAwO1xuXHRcdFx0XHRcdHMxID0gTWF0aC5taW4oIE1hdGgubWF4KCAtIHNlZ0V4dGVudCwgLSBiMSApLCBzZWdFeHRlbnQgKTtcblx0XHRcdFx0XHRzcXJEaXN0ID0gczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyByZWdpb24gMlxuXG5cdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTtcblx0XHRcdFx0XHRzMSA9ICggczAgPiAwICkgPyBzZWdFeHRlbnQgOiBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBSYXkgYW5kIHNlZ21lbnQgYXJlIHBhcmFsbGVsLlxuXG5cdFx0XHRzMSA9ICggYTAxID4gMCApID8gLSBzZWdFeHRlbnQgOiBzZWdFeHRlbnQ7XG5cdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7XG5cdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25hbFBvaW50T25SYXkgKSB7XG5cblx0XHRcdG9wdGlvbmFsUG9pbnRPblJheS5jb3B5KCB0aGlzLm9yaWdpbiApLmFkZFNjYWxlZFZlY3RvciggdGhpcy5kaXJlY3Rpb24sIHMwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7XG5cblx0XHRcdG9wdGlvbmFsUG9pbnRPblNlZ21lbnQuY29weSggX3NlZ0NlbnRlciApLmFkZFNjYWxlZFZlY3RvciggX3NlZ0RpciwgczEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzcXJEaXN0O1xuXG5cdH1cblxuXHRpbnRlcnNlY3RTcGhlcmUoIHNwaGVyZSwgdGFyZ2V0ICkge1xuXG5cdFx0X3ZlY3Rvci5zdWJWZWN0b3JzKCBzcGhlcmUuY2VudGVyLCB0aGlzLm9yaWdpbiApO1xuXHRcdGNvbnN0IHRjYSA9IF92ZWN0b3IuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXHRcdGNvbnN0IGQyID0gX3ZlY3Rvci5kb3QoIF92ZWN0b3IgKSAtIHRjYSAqIHRjYTtcblx0XHRjb25zdCByYWRpdXMyID0gc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRpZiAoIGQyID4gcmFkaXVzMiApIHJldHVybiBudWxsO1xuXG5cdFx0Y29uc3QgdGhjID0gTWF0aC5zcXJ0KCByYWRpdXMyIC0gZDIgKTtcblxuXHRcdC8vIHQwID0gZmlyc3QgaW50ZXJzZWN0IHBvaW50IC0gZW50cmFuY2Ugb24gZnJvbnQgb2Ygc3BoZXJlXG5cdFx0Y29uc3QgdDAgPSB0Y2EgLSB0aGM7XG5cblx0XHQvLyB0MSA9IHNlY29uZCBpbnRlcnNlY3QgcG9pbnQgLSBleGl0IHBvaW50IG9uIGJhY2sgb2Ygc3BoZXJlXG5cdFx0Y29uc3QgdDEgPSB0Y2EgKyB0aGM7XG5cblx0XHQvLyB0ZXN0IHRvIHNlZSBpZiB0MSBpcyBiZWhpbmQgdGhlIHJheSAtIGlmIHNvLCByZXR1cm4gbnVsbFxuXHRcdGlmICggdDEgPCAwICkgcmV0dXJuIG51bGw7XG5cblx0XHQvLyB0ZXN0IHRvIHNlZSBpZiB0MCBpcyBiZWhpbmQgdGhlIHJheTpcblx0XHQvLyBpZiBpdCBpcywgdGhlIHJheSBpcyBpbnNpZGUgdGhlIHNwaGVyZSwgc28gcmV0dXJuIHRoZSBzZWNvbmQgZXhpdCBwb2ludCBzY2FsZWQgYnkgdDEsXG5cdFx0Ly8gaW4gb3JkZXIgdG8gYWx3YXlzIHJldHVybiBhbiBpbnRlcnNlY3QgcG9pbnQgdGhhdCBpcyBpbiBmcm9udCBvZiB0aGUgcmF5LlxuXHRcdGlmICggdDAgPCAwICkgcmV0dXJuIHRoaXMuYXQoIHQxLCB0YXJnZXQgKTtcblxuXHRcdC8vIGVsc2UgdDAgaXMgaW4gZnJvbnQgb2YgdGhlIHJheSwgc28gcmV0dXJuIHRoZSBmaXJzdCBjb2xsaXNpb24gcG9pbnQgc2NhbGVkIGJ5IHQwXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHQwLCB0YXJnZXQgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSA8PSAoIHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG9QbGFuZSggcGxhbmUgKSB7XG5cblx0XHRjb25zdCBkZW5vbWluYXRvciA9IHBsYW5lLm5vcm1hbC5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cblx0XHRpZiAoIGRlbm9taW5hdG9yID09PSAwICkge1xuXG5cdFx0XHQvLyBsaW5lIGlzIGNvcGxhbmFyLCByZXR1cm4gb3JpZ2luXG5cdFx0XHRpZiAoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5vcmlnaW4gKSA9PT0gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gMDtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBOdWxsIGlzIHByZWZlcmFibGUgdG8gdW5kZWZpbmVkIHNpbmNlIHVuZGVmaW5lZCBtZWFucy4uLi4gaXQgaXMgdW5kZWZpbmVkXG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdCA9IC0gKCB0aGlzLm9yaWdpbi5kb3QoIHBsYW5lLm5vcm1hbCApICsgcGxhbmUuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0Ly8gUmV0dXJuIGlmIHRoZSByYXkgbmV2ZXIgaW50ZXJzZWN0cyB0aGUgcGxhbmVcblxuXHRcdHJldHVybiB0ID49IDAgPyB0IDogbnVsbDtcblxuXHR9XG5cblx0aW50ZXJzZWN0UGxhbmUoIHBsYW5lLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ID0gdGhpcy5kaXN0YW5jZVRvUGxhbmUoIHBsYW5lICk7XG5cblx0XHRpZiAoIHQgPT09IG51bGwgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHQsIHRhcmdldCApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzUGxhbmUoIHBsYW5lICkge1xuXG5cdFx0Ly8gY2hlY2sgaWYgdGhlIHJheSBsaWVzIG9uIHRoZSBwbGFuZSBmaXJzdFxuXG5cdFx0Y29uc3QgZGlzdFRvUG9pbnQgPSBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHRoaXMub3JpZ2luICk7XG5cblx0XHRpZiAoIGRpc3RUb1BvaW50ID09PSAwICkge1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gcGxhbmUubm9ybWFsLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgKiBkaXN0VG9Qb2ludCA8IDAgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gcmF5IG9yaWdpbiBpcyBiZWhpbmQgdGhlIHBsYW5lIChhbmQgaXMgcG9pbnRpbmcgYmVoaW5kIGl0KVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RCb3goIGJveCwgdGFyZ2V0ICkge1xuXG5cdFx0bGV0IHRtaW4sIHRtYXgsIHR5bWluLCB0eW1heCwgdHptaW4sIHR6bWF4O1xuXG5cdFx0Y29uc3QgaW52ZGlyeCA9IDEgLyB0aGlzLmRpcmVjdGlvbi54LFxuXHRcdFx0aW52ZGlyeSA9IDEgLyB0aGlzLmRpcmVjdGlvbi55LFxuXHRcdFx0aW52ZGlyeiA9IDEgLyB0aGlzLmRpcmVjdGlvbi56O1xuXG5cdFx0Y29uc3Qgb3JpZ2luID0gdGhpcy5vcmlnaW47XG5cblx0XHRpZiAoIGludmRpcnggPj0gMCApIHtcblxuXHRcdFx0dG1pbiA9ICggYm94Lm1pbi54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cdFx0XHR0bWF4ID0gKCBib3gubWF4LnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRtaW4gPSAoIGJveC5tYXgueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXHRcdFx0dG1heCA9ICggYm94Lm1pbi54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cblx0XHR9XG5cblx0XHRpZiAoIGludmRpcnkgPj0gMCApIHtcblxuXHRcdFx0dHltaW4gPSAoIGJveC5taW4ueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5O1xuXHRcdFx0dHltYXggPSAoIGJveC5tYXgueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dHltaW4gPSAoIGJveC5tYXgueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5O1xuXHRcdFx0dHltYXggPSAoIGJveC5taW4ueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAoIHRtaW4gPiB0eW1heCApIHx8ICggdHltaW4gPiB0bWF4ICkgKSByZXR1cm4gbnVsbDtcblxuXHRcdGlmICggdHltaW4gPiB0bWluIHx8IGlzTmFOKCB0bWluICkgKSB0bWluID0gdHltaW47XG5cblx0XHRpZiAoIHR5bWF4IDwgdG1heCB8fCBpc05hTiggdG1heCApICkgdG1heCA9IHR5bWF4O1xuXG5cdFx0aWYgKCBpbnZkaXJ6ID49IDAgKSB7XG5cblx0XHRcdHR6bWluID0gKCBib3gubWluLnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblx0XHRcdHR6bWF4ID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHR6bWluID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblx0XHRcdHR6bWF4ID0gKCBib3gubWluLnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblxuXHRcdH1cblxuXHRcdGlmICggKCB0bWluID4gdHptYXggKSB8fCAoIHR6bWluID4gdG1heCApICkgcmV0dXJuIG51bGw7XG5cblx0XHRpZiAoIHR6bWluID4gdG1pbiB8fCB0bWluICE9PSB0bWluICkgdG1pbiA9IHR6bWluO1xuXG5cdFx0aWYgKCB0em1heCA8IHRtYXggfHwgdG1heCAhPT0gdG1heCApIHRtYXggPSB0em1heDtcblxuXHRcdC8vcmV0dXJuIHBvaW50IGNsb3Nlc3QgdG8gdGhlIHJheSAocG9zaXRpdmUgc2lkZSlcblxuXHRcdGlmICggdG1heCA8IDAgKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiB0aGlzLmF0KCB0bWluID49IDAgPyB0bWluIDogdG1heCwgdGFyZ2V0ICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdEJveCggYm94LCBfdmVjdG9yICkgIT09IG51bGw7XG5cblx0fVxuXG5cdGludGVyc2VjdFRyaWFuZ2xlKCBhLCBiLCBjLCBiYWNrZmFjZUN1bGxpbmcsIHRhcmdldCApIHtcblxuXHRcdC8vIENvbXB1dGUgdGhlIG9mZnNldCBvcmlnaW4sIGVkZ2VzLCBhbmQgbm9ybWFsLlxuXG5cdFx0Ly8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcG1qb25pYWsvR2VvbWV0cmljVG9vbHMvYmxvYi9tYXN0ZXIvR1RFbmdpbmUvSW5jbHVkZS9NYXRoZW1hdGljcy9HdGVJbnRyUmF5M1RyaWFuZ2xlMy5oXG5cblx0XHRfZWRnZTEuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdF9lZGdlMi5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0X25vcm1hbC5jcm9zc1ZlY3RvcnMoIF9lZGdlMSwgX2VkZ2UyICk7XG5cblx0XHQvLyBTb2x2ZSBRICsgdCpEID0gYjEqRTEgKyBiMipFMiAoUSA9IGtEaWZmLCBEID0gcmF5IGRpcmVjdGlvbixcblx0XHQvLyBFMSA9IGtFZGdlMSwgRTIgPSBrRWRnZTIsIE4gPSBDcm9zcyhFMSxFMikpIGJ5XG5cdFx0Ly8gICB8RG90KEQsTil8KmIxID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoUSxFMikpXG5cdFx0Ly8gICB8RG90KEQsTil8KmIyID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoRTEsUSkpXG5cdFx0Ly8gICB8RG90KEQsTil8KnQgPSAtc2lnbihEb3QoRCxOKSkqRG90KFEsTilcblx0XHRsZXQgRGROID0gdGhpcy5kaXJlY3Rpb24uZG90KCBfbm9ybWFsICk7XG5cdFx0bGV0IHNpZ247XG5cblx0XHRpZiAoIERkTiA+IDAgKSB7XG5cblx0XHRcdGlmICggYmFja2ZhY2VDdWxsaW5nICkgcmV0dXJuIG51bGw7XG5cdFx0XHRzaWduID0gMTtcblxuXHRcdH0gZWxzZSBpZiAoIERkTiA8IDAgKSB7XG5cblx0XHRcdHNpZ24gPSAtIDE7XG5cdFx0XHREZE4gPSAtIERkTjtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0X2RpZmYuc3ViVmVjdG9ycyggdGhpcy5vcmlnaW4sIGEgKTtcblx0XHRjb25zdCBEZFF4RTIgPSBzaWduICogdGhpcy5kaXJlY3Rpb24uZG90KCBfZWRnZTIuY3Jvc3NWZWN0b3JzKCBfZGlmZiwgX2VkZ2UyICkgKTtcblxuXHRcdC8vIGIxIDwgMCwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0aWYgKCBEZFF4RTIgPCAwICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IERkRTF4USA9IHNpZ24gKiB0aGlzLmRpcmVjdGlvbi5kb3QoIF9lZGdlMS5jcm9zcyggX2RpZmYgKSApO1xuXG5cdFx0Ly8gYjIgPCAwLCBubyBpbnRlcnNlY3Rpb25cblx0XHRpZiAoIERkRTF4USA8IDAgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYjErYjIgPiAxLCBubyBpbnRlcnNlY3Rpb25cblx0XHRpZiAoIERkUXhFMiArIERkRTF4USA+IERkTiApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHQvLyBMaW5lIGludGVyc2VjdHMgdHJpYW5nbGUsIGNoZWNrIGlmIHJheSBkb2VzLlxuXHRcdGNvbnN0IFFkTiA9IC0gc2lnbiAqIF9kaWZmLmRvdCggX25vcm1hbCApO1xuXG5cdFx0Ly8gdCA8IDAsIG5vIGludGVyc2VjdGlvblxuXHRcdGlmICggUWROIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHQvLyBSYXkgaW50ZXJzZWN0cyB0cmlhbmdsZS5cblx0XHRyZXR1cm4gdGhpcy5hdCggUWROIC8gRGROLCB0YXJnZXQgKTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXg0KCBtYXRyaXg0ICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uYXBwbHlNYXRyaXg0KCBtYXRyaXg0ICk7XG5cdFx0dGhpcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXg0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCByYXkgKSB7XG5cblx0XHRyZXR1cm4gcmF5Lm9yaWdpbi5lcXVhbHMoIHRoaXMub3JpZ2luICkgJiYgcmF5LmRpcmVjdGlvbi5lcXVhbHMoIHRoaXMuZGlyZWN0aW9uICk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBSYXkgfTtcbiIsImltcG9ydCB7IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSwgV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzLmpzJztcblxuY2xhc3MgTWF0cml4NCB7XG5cblx0Y29uc3RydWN0b3IoIG4xMSwgbjEyLCBuMTMsIG4xNCwgbjIxLCBuMjIsIG4yMywgbjI0LCBuMzEsIG4zMiwgbjMzLCBuMzQsIG40MSwgbjQyLCBuNDMsIG40NCApIHtcblxuXHRcdE1hdHJpeDQucHJvdG90eXBlLmlzTWF0cml4NCA9IHRydWU7XG5cblx0XHR0aGlzLmVsZW1lbnRzID0gW1xuXG5cdFx0XHQxLCAwLCAwLCAwLFxuXHRcdFx0MCwgMSwgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHRdO1xuXG5cdFx0aWYgKCBuMTEgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5zZXQoIG4xMSwgbjEyLCBuMTMsIG4xNCwgbjIxLCBuMjIsIG4yMywgbjI0LCBuMzEsIG4zMiwgbjMzLCBuMzQsIG40MSwgbjQyLCBuNDMsIG40NCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXQoIG4xMSwgbjEyLCBuMTMsIG4xNCwgbjIxLCBuMjIsIG4yMywgbjI0LCBuMzEsIG4zMiwgbjMzLCBuMzQsIG40MSwgbjQyLCBuNDMsIG40NCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBuMTE7IHRlWyA0IF0gPSBuMTI7IHRlWyA4IF0gPSBuMTM7IHRlWyAxMiBdID0gbjE0O1xuXHRcdHRlWyAxIF0gPSBuMjE7IHRlWyA1IF0gPSBuMjI7IHRlWyA5IF0gPSBuMjM7IHRlWyAxMyBdID0gbjI0O1xuXHRcdHRlWyAyIF0gPSBuMzE7IHRlWyA2IF0gPSBuMzI7IHRlWyAxMCBdID0gbjMzOyB0ZVsgMTQgXSA9IG4zNDtcblx0XHR0ZVsgMyBdID0gbjQxOyB0ZVsgNyBdID0gbjQyOyB0ZVsgMTEgXSA9IG40MzsgdGVbIDE1IF0gPSBuNDQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aWRlbnRpdHkoKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgMCwgMCwgMCxcblx0XHRcdDAsIDEsIDAsIDAsXG5cdFx0XHQwLCAwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgTWF0cml4NCgpLmZyb21BcnJheSggdGhpcy5lbGVtZW50cyApO1xuXG5cdH1cblxuXHRjb3B5KCBtICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBtZVsgMCBdOyB0ZVsgMSBdID0gbWVbIDEgXTsgdGVbIDIgXSA9IG1lWyAyIF07IHRlWyAzIF0gPSBtZVsgMyBdO1xuXHRcdHRlWyA0IF0gPSBtZVsgNCBdOyB0ZVsgNSBdID0gbWVbIDUgXTsgdGVbIDYgXSA9IG1lWyA2IF07IHRlWyA3IF0gPSBtZVsgNyBdO1xuXHRcdHRlWyA4IF0gPSBtZVsgOCBdOyB0ZVsgOSBdID0gbWVbIDkgXTsgdGVbIDEwIF0gPSBtZVsgMTAgXTsgdGVbIDExIF0gPSBtZVsgMTEgXTtcblx0XHR0ZVsgMTIgXSA9IG1lWyAxMiBdOyB0ZVsgMTMgXSA9IG1lWyAxMyBdOyB0ZVsgMTQgXSA9IG1lWyAxNCBdOyB0ZVsgMTUgXSA9IG1lWyAxNSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHlQb3NpdGlvbiggbSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cywgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDEyIF0gPSBtZVsgMTIgXTtcblx0XHR0ZVsgMTMgXSA9IG1lWyAxMyBdO1xuXHRcdHRlWyAxNCBdID0gbWVbIDE0IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbU1hdHJpeDMoIG0gKSB7XG5cblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0bWVbIDAgXSwgbWVbIDMgXSwgbWVbIDYgXSwgMCxcblx0XHRcdG1lWyAxIF0sIG1lWyA0IF0sIG1lWyA3IF0sIDAsXG5cdFx0XHRtZVsgMiBdLCBtZVsgNSBdLCBtZVsgOCBdLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHRyYWN0QmFzaXMoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7XG5cblx0XHR4QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAwICk7XG5cdFx0eUF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMSApO1xuXHRcdHpBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlQmFzaXMoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7XG5cblx0XHR0aGlzLnNldChcblx0XHRcdHhBeGlzLngsIHlBeGlzLngsIHpBeGlzLngsIDAsXG5cdFx0XHR4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLFxuXHRcdFx0eEF4aXMueiwgeUF4aXMueiwgekF4aXMueiwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGV4dHJhY3RSb3RhdGlvbiggbSApIHtcblxuXHRcdC8vIHRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgcmVmbGVjdGlvbiBtYXRyaWNlc1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcblxuXHRcdGNvbnN0IHNjYWxlWCA9IDEgLyBfdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHNjYWxlWSA9IDEgLyBfdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMSApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHNjYWxlWiA9IDEgLyBfdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDEgXSA9IG1lWyAxIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDIgXSA9IG1lWyAyIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDMgXSA9IDA7XG5cblx0XHR0ZVsgNCBdID0gbWVbIDQgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNSBdID0gbWVbIDUgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNiBdID0gbWVbIDYgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNyBdID0gMDtcblxuXHRcdHRlWyA4IF0gPSBtZVsgOCBdICogc2NhbGVaO1xuXHRcdHRlWyA5IF0gPSBtZVsgOSBdICogc2NhbGVaO1xuXHRcdHRlWyAxMCBdID0gbWVbIDEwIF0gKiBzY2FsZVo7XG5cdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0dGVbIDEyIF0gPSAwO1xuXHRcdHRlWyAxMyBdID0gMDtcblx0XHR0ZVsgMTQgXSA9IDA7XG5cdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvbkZyb21FdWxlciggZXVsZXIgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCB4ID0gZXVsZXIueCwgeSA9IGV1bGVyLnksIHogPSBldWxlci56O1xuXHRcdGNvbnN0IGEgPSBNYXRoLmNvcyggeCApLCBiID0gTWF0aC5zaW4oIHggKTtcblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIHkgKSwgZCA9IE1hdGguc2luKCB5ICk7XG5cdFx0Y29uc3QgZSA9IE1hdGguY29zKCB6ICksIGYgPSBNYXRoLnNpbiggeiApO1xuXG5cdFx0aWYgKCBldWxlci5vcmRlciA9PT0gJ1hZWicgKSB7XG5cblx0XHRcdGNvbnN0IGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSAtIGMgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGQ7XG5cblx0XHRcdHRlWyAxIF0gPSBhZiArIGJlICogZDtcblx0XHRcdHRlWyA1IF0gPSBhZSAtIGJmICogZDtcblx0XHRcdHRlWyA5IF0gPSAtIGIgKiBjO1xuXG5cdFx0XHR0ZVsgMiBdID0gYmYgLSBhZSAqIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYmUgKyBhZiAqIGQ7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdZWFonICkge1xuXG5cdFx0XHRjb25zdCBjZSA9IGMgKiBlLCBjZiA9IGMgKiBmLCBkZSA9IGQgKiBlLCBkZiA9IGQgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gY2UgKyBkZiAqIGI7XG5cdFx0XHR0ZVsgNCBdID0gZGUgKiBiIC0gY2Y7XG5cdFx0XHR0ZVsgOCBdID0gYSAqIGQ7XG5cblx0XHRcdHRlWyAxIF0gPSBhICogZjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSAtIGI7XG5cblx0XHRcdHRlWyAyIF0gPSBjZiAqIGIgLSBkZTtcblx0XHRcdHRlWyA2IF0gPSBkZiArIGNlICogYjtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1pYWScgKSB7XG5cblx0XHRcdGNvbnN0IGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjZSAtIGRmICogYjtcblx0XHRcdHRlWyA0IF0gPSAtIGEgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGRlICsgY2YgKiBiO1xuXG5cdFx0XHR0ZVsgMSBdID0gY2YgKyBkZSAqIGI7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gZGYgLSBjZSAqIGI7XG5cblx0XHRcdHRlWyAyIF0gPSAtIGEgKiBkO1xuXHRcdFx0dGVbIDYgXSA9IGI7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdaWVgnICkge1xuXG5cdFx0XHRjb25zdCBhZSA9IGEgKiBlLCBhZiA9IGEgKiBmLCBiZSA9IGIgKiBlLCBiZiA9IGIgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gYmUgKiBkIC0gYWY7XG5cdFx0XHR0ZVsgOCBdID0gYWUgKiBkICsgYmY7XG5cblx0XHRcdHRlWyAxIF0gPSBjICogZjtcblx0XHRcdHRlWyA1IF0gPSBiZiAqIGQgKyBhZTtcblx0XHRcdHRlWyA5IF0gPSBhZiAqIGQgLSBiZTtcblxuXHRcdFx0dGVbIDIgXSA9IC0gZDtcblx0XHRcdHRlWyA2IF0gPSBiICogYztcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1laWCcgKSB7XG5cblx0XHRcdGNvbnN0IGFjID0gYSAqIGMsIGFkID0gYSAqIGQsIGJjID0gYiAqIGMsIGJkID0gYiAqIGQ7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSBiZCAtIGFjICogZjtcblx0XHRcdHRlWyA4IF0gPSBiYyAqIGYgKyBhZDtcblxuXHRcdFx0dGVbIDEgXSA9IGY7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gLSBiICogZTtcblxuXHRcdFx0dGVbIDIgXSA9IC0gZCAqIGU7XG5cdFx0XHR0ZVsgNiBdID0gYWQgKiBmICsgYmM7XG5cdFx0XHR0ZVsgMTAgXSA9IGFjIC0gYmQgKiBmO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdYWlknICkge1xuXG5cdFx0XHRjb25zdCBhYyA9IGEgKiBjLCBhZCA9IGEgKiBkLCBiYyA9IGIgKiBjLCBiZCA9IGIgKiBkO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gLSBmO1xuXHRcdFx0dGVbIDggXSA9IGQgKiBlO1xuXG5cdFx0XHR0ZVsgMSBdID0gYWMgKiBmICsgYmQ7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gYWQgKiBmIC0gYmM7XG5cblx0XHRcdHRlWyAyIF0gPSBiYyAqIGYgLSBhZDtcblx0XHRcdHRlWyA2IF0gPSBiICogZTtcblx0XHRcdHRlWyAxMCBdID0gYmQgKiBmICsgYWM7XG5cblx0XHR9XG5cblx0XHQvLyBib3R0b20gcm93XG5cdFx0dGVbIDMgXSA9IDA7XG5cdFx0dGVbIDcgXSA9IDA7XG5cdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0Ly8gbGFzdCBjb2x1bW5cblx0XHR0ZVsgMTIgXSA9IDA7XG5cdFx0dGVbIDEzIF0gPSAwO1xuXHRcdHRlWyAxNCBdID0gMDtcblx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jb21wb3NlKCBfemVybywgcSwgX29uZSApO1xuXG5cdH1cblxuXHRsb29rQXQoIGV5ZSwgdGFyZ2V0LCB1cCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdF96LnN1YlZlY3RvcnMoIGV5ZSwgdGFyZ2V0ICk7XG5cblx0XHRpZiAoIF96Lmxlbmd0aFNxKCkgPT09IDAgKSB7XG5cblx0XHRcdC8vIGV5ZSBhbmQgdGFyZ2V0IGFyZSBpbiB0aGUgc2FtZSBwb3NpdGlvblxuXG5cdFx0XHRfei56ID0gMTtcblxuXHRcdH1cblxuXHRcdF96Lm5vcm1hbGl6ZSgpO1xuXHRcdF94LmNyb3NzVmVjdG9ycyggdXAsIF96ICk7XG5cblx0XHRpZiAoIF94Lmxlbmd0aFNxKCkgPT09IDAgKSB7XG5cblx0XHRcdC8vIHVwIGFuZCB6IGFyZSBwYXJhbGxlbFxuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCB1cC56ICkgPT09IDEgKSB7XG5cblx0XHRcdFx0X3oueCArPSAwLjAwMDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X3oueiArPSAwLjAwMDE7XG5cblx0XHRcdH1cblxuXHRcdFx0X3oubm9ybWFsaXplKCk7XG5cdFx0XHRfeC5jcm9zc1ZlY3RvcnMoIHVwLCBfeiApO1xuXG5cdFx0fVxuXG5cdFx0X3gubm9ybWFsaXplKCk7XG5cdFx0X3kuY3Jvc3NWZWN0b3JzKCBfeiwgX3ggKTtcblxuXHRcdHRlWyAwIF0gPSBfeC54OyB0ZVsgNCBdID0gX3kueDsgdGVbIDggXSA9IF96Lng7XG5cdFx0dGVbIDEgXSA9IF94Lnk7IHRlWyA1IF0gPSBfeS55OyB0ZVsgOSBdID0gX3oueTtcblx0XHR0ZVsgMiBdID0gX3guejsgdGVbIDYgXSA9IF95Lno7IHRlWyAxMCBdID0gX3ouejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseSggbSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIHRoaXMsIG0gKTtcblxuXHR9XG5cblx0cHJlbXVsdGlwbHkoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCBtLCB0aGlzICk7XG5cblx0fVxuXG5cdG11bHRpcGx5TWF0cmljZXMoIGEsIGIgKSB7XG5cblx0XHRjb25zdCBhZSA9IGEuZWxlbWVudHM7XG5cdFx0Y29uc3QgYmUgPSBiLmVsZW1lbnRzO1xuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IGExMSA9IGFlWyAwIF0sIGExMiA9IGFlWyA0IF0sIGExMyA9IGFlWyA4IF0sIGExNCA9IGFlWyAxMiBdO1xuXHRcdGNvbnN0IGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA1IF0sIGEyMyA9IGFlWyA5IF0sIGEyNCA9IGFlWyAxMyBdO1xuXHRcdGNvbnN0IGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA2IF0sIGEzMyA9IGFlWyAxMCBdLCBhMzQgPSBhZVsgMTQgXTtcblx0XHRjb25zdCBhNDEgPSBhZVsgMyBdLCBhNDIgPSBhZVsgNyBdLCBhNDMgPSBhZVsgMTEgXSwgYTQ0ID0gYWVbIDE1IF07XG5cblx0XHRjb25zdCBiMTEgPSBiZVsgMCBdLCBiMTIgPSBiZVsgNCBdLCBiMTMgPSBiZVsgOCBdLCBiMTQgPSBiZVsgMTIgXTtcblx0XHRjb25zdCBiMjEgPSBiZVsgMSBdLCBiMjIgPSBiZVsgNSBdLCBiMjMgPSBiZVsgOSBdLCBiMjQgPSBiZVsgMTMgXTtcblx0XHRjb25zdCBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNiBdLCBiMzMgPSBiZVsgMTAgXSwgYjM0ID0gYmVbIDE0IF07XG5cdFx0Y29uc3QgYjQxID0gYmVbIDMgXSwgYjQyID0gYmVbIDcgXSwgYjQzID0gYmVbIDExIF0sIGI0NCA9IGJlWyAxNSBdO1xuXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMSArIGExNCAqIGI0MTtcblx0XHR0ZVsgNCBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyICsgYTE0ICogYjQyO1xuXHRcdHRlWyA4IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzMgKyBhMTQgKiBiNDM7XG5cdFx0dGVbIDEyIF0gPSBhMTEgKiBiMTQgKyBhMTIgKiBiMjQgKyBhMTMgKiBiMzQgKyBhMTQgKiBiNDQ7XG5cblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxICsgYTI0ICogYjQxO1xuXHRcdHRlWyA1IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzIgKyBhMjQgKiBiNDI7XG5cdFx0dGVbIDkgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMyArIGEyNCAqIGI0Mztcblx0XHR0ZVsgMTMgXSA9IGEyMSAqIGIxNCArIGEyMiAqIGIyNCArIGEyMyAqIGIzNCArIGEyNCAqIGI0NDtcblxuXHRcdHRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzEgKyBhMzQgKiBiNDE7XG5cdFx0dGVbIDYgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMiArIGEzNCAqIGI0Mjtcblx0XHR0ZVsgMTAgXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMyArIGEzNCAqIGI0Mztcblx0XHR0ZVsgMTQgXSA9IGEzMSAqIGIxNCArIGEzMiAqIGIyNCArIGEzMyAqIGIzNCArIGEzNCAqIGI0NDtcblxuXHRcdHRlWyAzIF0gPSBhNDEgKiBiMTEgKyBhNDIgKiBiMjEgKyBhNDMgKiBiMzEgKyBhNDQgKiBiNDE7XG5cdFx0dGVbIDcgXSA9IGE0MSAqIGIxMiArIGE0MiAqIGIyMiArIGE0MyAqIGIzMiArIGE0NCAqIGI0Mjtcblx0XHR0ZVsgMTEgXSA9IGE0MSAqIGIxMyArIGE0MiAqIGIyMyArIGE0MyAqIGIzMyArIGE0NCAqIGI0Mztcblx0XHR0ZVsgMTUgXSA9IGE0MSAqIGIxNCArIGE0MiAqIGIyNCArIGE0MyAqIGIzNCArIGE0NCAqIGI0NDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseVNjYWxhciggcyApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gczsgdGVbIDQgXSAqPSBzOyB0ZVsgOCBdICo9IHM7IHRlWyAxMiBdICo9IHM7XG5cdFx0dGVbIDEgXSAqPSBzOyB0ZVsgNSBdICo9IHM7IHRlWyA5IF0gKj0gczsgdGVbIDEzIF0gKj0gcztcblx0XHR0ZVsgMiBdICo9IHM7IHRlWyA2IF0gKj0gczsgdGVbIDEwIF0gKj0gczsgdGVbIDE0IF0gKj0gcztcblx0XHR0ZVsgMyBdICo9IHM7IHRlWyA3IF0gKj0gczsgdGVbIDExIF0gKj0gczsgdGVbIDE1IF0gKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkZXRlcm1pbmFudCgpIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IG4xMSA9IHRlWyAwIF0sIG4xMiA9IHRlWyA0IF0sIG4xMyA9IHRlWyA4IF0sIG4xNCA9IHRlWyAxMiBdO1xuXHRcdGNvbnN0IG4yMSA9IHRlWyAxIF0sIG4yMiA9IHRlWyA1IF0sIG4yMyA9IHRlWyA5IF0sIG4yNCA9IHRlWyAxMyBdO1xuXHRcdGNvbnN0IG4zMSA9IHRlWyAyIF0sIG4zMiA9IHRlWyA2IF0sIG4zMyA9IHRlWyAxMCBdLCBuMzQgPSB0ZVsgMTQgXTtcblx0XHRjb25zdCBuNDEgPSB0ZVsgMyBdLCBuNDIgPSB0ZVsgNyBdLCBuNDMgPSB0ZVsgMTEgXSwgbjQ0ID0gdGVbIDE1IF07XG5cblx0XHQvL1RPRE86IG1ha2UgdGhpcyBtb3JlIGVmZmljaWVudFxuXHRcdC8vKCBiYXNlZCBvbiBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL21hdHJpeC9mdW5jdGlvbnMvaW52ZXJzZS9mb3VyRC9pbmRleC5odG0gKVxuXG5cdFx0cmV0dXJuIChcblx0XHRcdG40MSAqIChcblx0XHRcdFx0KyBuMTQgKiBuMjMgKiBuMzJcblx0XHRcdFx0IC0gbjEzICogbjI0ICogbjMyXG5cdFx0XHRcdCAtIG4xNCAqIG4yMiAqIG4zM1xuXHRcdFx0XHQgKyBuMTIgKiBuMjQgKiBuMzNcblx0XHRcdFx0ICsgbjEzICogbjIyICogbjM0XG5cdFx0XHRcdCAtIG4xMiAqIG4yMyAqIG4zNFxuXHRcdFx0KSArXG5cdFx0XHRuNDIgKiAoXG5cdFx0XHRcdCsgbjExICogbjIzICogbjM0XG5cdFx0XHRcdCAtIG4xMSAqIG4yNCAqIG4zM1xuXHRcdFx0XHQgKyBuMTQgKiBuMjEgKiBuMzNcblx0XHRcdFx0IC0gbjEzICogbjIxICogbjM0XG5cdFx0XHRcdCArIG4xMyAqIG4yNCAqIG4zMVxuXHRcdFx0XHQgLSBuMTQgKiBuMjMgKiBuMzFcblx0XHRcdCkgK1xuXHRcdFx0bjQzICogKFxuXHRcdFx0XHQrIG4xMSAqIG4yNCAqIG4zMlxuXHRcdFx0XHQgLSBuMTEgKiBuMjIgKiBuMzRcblx0XHRcdFx0IC0gbjE0ICogbjIxICogbjMyXG5cdFx0XHRcdCArIG4xMiAqIG4yMSAqIG4zNFxuXHRcdFx0XHQgKyBuMTQgKiBuMjIgKiBuMzFcblx0XHRcdFx0IC0gbjEyICogbjI0ICogbjMxXG5cdFx0XHQpICtcblx0XHRcdG40NCAqIChcblx0XHRcdFx0LSBuMTMgKiBuMjIgKiBuMzFcblx0XHRcdFx0IC0gbjExICogbjIzICogbjMyXG5cdFx0XHRcdCArIG4xMSAqIG4yMiAqIG4zM1xuXHRcdFx0XHQgKyBuMTMgKiBuMjEgKiBuMzJcblx0XHRcdFx0IC0gbjEyICogbjIxICogbjMzXG5cdFx0XHRcdCArIG4xMiAqIG4yMyAqIG4zMVxuXHRcdFx0KVxuXG5cdFx0KTtcblxuXHR9XG5cblx0dHJhbnNwb3NlKCkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGxldCB0bXA7XG5cblx0XHR0bXAgPSB0ZVsgMSBdOyB0ZVsgMSBdID0gdGVbIDQgXTsgdGVbIDQgXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgMiBdOyB0ZVsgMiBdID0gdGVbIDggXTsgdGVbIDggXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgNiBdOyB0ZVsgNiBdID0gdGVbIDkgXTsgdGVbIDkgXSA9IHRtcDtcblxuXHRcdHRtcCA9IHRlWyAzIF07IHRlWyAzIF0gPSB0ZVsgMTIgXTsgdGVbIDEyIF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDcgXTsgdGVbIDcgXSA9IHRlWyAxMyBdOyB0ZVsgMTMgXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgMTEgXTsgdGVbIDExIF0gPSB0ZVsgMTQgXTsgdGVbIDE0IF0gPSB0bXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0UG9zaXRpb24oIHgsIHksIHogKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRpZiAoIHguaXNWZWN0b3IzICkge1xuXG5cdFx0XHR0ZVsgMTIgXSA9IHgueDtcblx0XHRcdHRlWyAxMyBdID0geC55O1xuXHRcdFx0dGVbIDE0IF0gPSB4Lno7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0ZVsgMTIgXSA9IHg7XG5cdFx0XHR0ZVsgMTMgXSA9IHk7XG5cdFx0XHR0ZVsgMTQgXSA9IHo7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aW52ZXJ0KCkge1xuXG5cdFx0Ly8gYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzLFxuXG5cdFx0XHRuMTEgPSB0ZVsgMCBdLCBuMjEgPSB0ZVsgMSBdLCBuMzEgPSB0ZVsgMiBdLCBuNDEgPSB0ZVsgMyBdLFxuXHRcdFx0bjEyID0gdGVbIDQgXSwgbjIyID0gdGVbIDUgXSwgbjMyID0gdGVbIDYgXSwgbjQyID0gdGVbIDcgXSxcblx0XHRcdG4xMyA9IHRlWyA4IF0sIG4yMyA9IHRlWyA5IF0sIG4zMyA9IHRlWyAxMCBdLCBuNDMgPSB0ZVsgMTEgXSxcblx0XHRcdG4xNCA9IHRlWyAxMiBdLCBuMjQgPSB0ZVsgMTMgXSwgbjM0ID0gdGVbIDE0IF0sIG40NCA9IHRlWyAxNSBdLFxuXG5cdFx0XHR0MTEgPSBuMjMgKiBuMzQgKiBuNDIgLSBuMjQgKiBuMzMgKiBuNDIgKyBuMjQgKiBuMzIgKiBuNDMgLSBuMjIgKiBuMzQgKiBuNDMgLSBuMjMgKiBuMzIgKiBuNDQgKyBuMjIgKiBuMzMgKiBuNDQsXG5cdFx0XHR0MTIgPSBuMTQgKiBuMzMgKiBuNDIgLSBuMTMgKiBuMzQgKiBuNDIgLSBuMTQgKiBuMzIgKiBuNDMgKyBuMTIgKiBuMzQgKiBuNDMgKyBuMTMgKiBuMzIgKiBuNDQgLSBuMTIgKiBuMzMgKiBuNDQsXG5cdFx0XHR0MTMgPSBuMTMgKiBuMjQgKiBuNDIgLSBuMTQgKiBuMjMgKiBuNDIgKyBuMTQgKiBuMjIgKiBuNDMgLSBuMTIgKiBuMjQgKiBuNDMgLSBuMTMgKiBuMjIgKiBuNDQgKyBuMTIgKiBuMjMgKiBuNDQsXG5cdFx0XHR0MTQgPSBuMTQgKiBuMjMgKiBuMzIgLSBuMTMgKiBuMjQgKiBuMzIgLSBuMTQgKiBuMjIgKiBuMzMgKyBuMTIgKiBuMjQgKiBuMzMgKyBuMTMgKiBuMjIgKiBuMzQgLSBuMTIgKiBuMjMgKiBuMzQ7XG5cblx0XHRjb25zdCBkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTMgKyBuNDEgKiB0MTQ7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCApO1xuXG5cdFx0Y29uc3QgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjI0ICogbjMzICogbjQxIC0gbjIzICogbjM0ICogbjQxIC0gbjI0ICogbjMxICogbjQzICsgbjIxICogbjM0ICogbjQzICsgbjIzICogbjMxICogbjQ0IC0gbjIxICogbjMzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjIyICogbjM0ICogbjQxIC0gbjI0ICogbjMyICogbjQxICsgbjI0ICogbjMxICogbjQyIC0gbjIxICogbjM0ICogbjQyIC0gbjIyICogbjMxICogbjQ0ICsgbjIxICogbjMyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDMgXSA9ICggbjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgNCBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4xMyAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMyAqIG40MSArIG4xNCAqIG4zMSAqIG40MyAtIG4xMSAqIG4zNCAqIG40MyAtIG4xMyAqIG4zMSAqIG40NCArIG4xMSAqIG4zMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA2IF0gPSAoIG4xNCAqIG4zMiAqIG40MSAtIG4xMiAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMSAqIG40MiArIG4xMSAqIG4zNCAqIG40MiArIG4xMiAqIG4zMSAqIG40NCAtIG4xMSAqIG4zMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA3IF0gPSAoIG4xMiAqIG4zMyAqIG40MSAtIG4xMyAqIG4zMiAqIG40MSArIG4xMyAqIG4zMSAqIG40MiAtIG4xMSAqIG4zMyAqIG40MiAtIG4xMiAqIG4zMSAqIG40MyArIG4xMSAqIG4zMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDggXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgOSBdID0gKCBuMTQgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjEgKiBuNDMgKyBuMTEgKiBuMjQgKiBuNDMgKyBuMTMgKiBuMjEgKiBuNDQgLSBuMTEgKiBuMjMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMTAgXSA9ICggbjEyICogbjI0ICogbjQxIC0gbjE0ICogbjIyICogbjQxICsgbjE0ICogbjIxICogbjQyIC0gbjExICogbjI0ICogbjQyIC0gbjEyICogbjIxICogbjQ0ICsgbjExICogbjIyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDExIF0gPSAoIG4xMyAqIG4yMiAqIG40MSAtIG4xMiAqIG4yMyAqIG40MSAtIG4xMyAqIG4yMSAqIG40MiArIG4xMSAqIG4yMyAqIG40MiArIG4xMiAqIG4yMSAqIG40MyAtIG4xMSAqIG4yMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDEyIF0gPSB0MTQgKiBkZXRJbnY7XG5cdFx0dGVbIDEzIF0gPSAoIG4xMyAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMyAqIG4zMSArIG4xNCAqIG4yMSAqIG4zMyAtIG4xMSAqIG4yNCAqIG4zMyAtIG4xMyAqIG4yMSAqIG4zNCArIG4xMSAqIG4yMyAqIG4zNCApICogZGV0SW52O1xuXHRcdHRlWyAxNCBdID0gKCBuMTQgKiBuMjIgKiBuMzEgLSBuMTIgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjEgKiBuMzIgKyBuMTEgKiBuMjQgKiBuMzIgKyBuMTIgKiBuMjEgKiBuMzQgLSBuMTEgKiBuMjIgKiBuMzQgKSAqIGRldEludjtcblx0XHR0ZVsgMTUgXSA9ICggbjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzICkgKiBkZXRJbnY7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2NhbGUoIHYgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgeCA9IHYueCwgeSA9IHYueSwgeiA9IHYuejtcblxuXHRcdHRlWyAwIF0gKj0geDsgdGVbIDQgXSAqPSB5OyB0ZVsgOCBdICo9IHo7XG5cdFx0dGVbIDEgXSAqPSB4OyB0ZVsgNSBdICo9IHk7IHRlWyA5IF0gKj0gejtcblx0XHR0ZVsgMiBdICo9IHg7IHRlWyA2IF0gKj0geTsgdGVbIDEwIF0gKj0gejtcblx0XHR0ZVsgMyBdICo9IHg7IHRlWyA3IF0gKj0geTsgdGVbIDExIF0gKj0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRNYXhTY2FsZU9uQXhpcygpIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IHNjYWxlWFNxID0gdGVbIDAgXSAqIHRlWyAwIF0gKyB0ZVsgMSBdICogdGVbIDEgXSArIHRlWyAyIF0gKiB0ZVsgMiBdO1xuXHRcdGNvbnN0IHNjYWxlWVNxID0gdGVbIDQgXSAqIHRlWyA0IF0gKyB0ZVsgNSBdICogdGVbIDUgXSArIHRlWyA2IF0gKiB0ZVsgNiBdO1xuXHRcdGNvbnN0IHNjYWxlWlNxID0gdGVbIDggXSAqIHRlWyA4IF0gKyB0ZVsgOSBdICogdGVbIDkgXSArIHRlWyAxMCBdICogdGVbIDEwIF07XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLm1heCggc2NhbGVYU3EsIHNjYWxlWVNxLCBzY2FsZVpTcSApICk7XG5cblx0fVxuXG5cdG1ha2VUcmFuc2xhdGlvbiggeCwgeSwgeiApIHtcblxuXHRcdGlmICggeC5pc1ZlY3RvcjMgKSB7XG5cblx0XHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRcdDEsIDAsIDAsIHgueCxcblx0XHRcdFx0MCwgMSwgMCwgeC55LFxuXHRcdFx0XHQwLCAwLCAxLCB4LnosXG5cdFx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdFx0KTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRcdDEsIDAsIDAsIHgsXG5cdFx0XHRcdDAsIDEsIDAsIHksXG5cdFx0XHRcdDAsIDAsIDEsIHosXG5cdFx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdFx0KTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25YKCB0aGV0YSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCBjLCAtIHMsIDAsXG5cdFx0XHQwLCBzLCBjLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25ZKCB0aGV0YSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdCBjLCAwLCBzLCAwLFxuXHRcdFx0IDAsIDEsIDAsIDAsXG5cdFx0XHQtIHMsIDAsIGMsIDAsXG5cdFx0XHQgMCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25aKCB0aGV0YSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdGMsIC0gcywgMCwgMCxcblx0XHRcdHMsIGMsIDAsIDAsXG5cdFx0XHQwLCAwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25BeGlzKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIEJhc2VkIG9uIGh0dHA6Ly93d3cuZ2FtZWRldi5uZXQvcmVmZXJlbmNlL2FydGljbGVzL2FydGljbGUxMTk5LmFzcFxuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCBhbmdsZSApO1xuXHRcdGNvbnN0IHMgPSBNYXRoLnNpbiggYW5nbGUgKTtcblx0XHRjb25zdCB0ID0gMSAtIGM7XG5cdFx0Y29uc3QgeCA9IGF4aXMueCwgeSA9IGF4aXMueSwgeiA9IGF4aXMuejtcblx0XHRjb25zdCB0eCA9IHQgKiB4LCB0eSA9IHQgKiB5O1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdHR4ICogeCArIGMsIHR4ICogeSAtIHMgKiB6LCB0eCAqIHogKyBzICogeSwgMCxcblx0XHRcdHR4ICogeSArIHMgKiB6LCB0eSAqIHkgKyBjLCB0eSAqIHogLSBzICogeCwgMCxcblx0XHRcdHR4ICogeiAtIHMgKiB5LCB0eSAqIHogKyBzICogeCwgdCAqIHogKiB6ICsgYywgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVNjYWxlKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdHgsIDAsIDAsIDAsXG5cdFx0XHQwLCB5LCAwLCAwLFxuXHRcdFx0MCwgMCwgeiwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVNoZWFyKCB4eSwgeHosIHl4LCB5eiwgengsIHp5ICkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIHl4LCB6eCwgMCxcblx0XHRcdHh5LCAxLCB6eSwgMCxcblx0XHRcdHh6LCB5eiwgMSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3QgeCA9IHF1YXRlcm5pb24uX3gsIHkgPSBxdWF0ZXJuaW9uLl95LCB6ID0gcXVhdGVybmlvbi5feiwgdyA9IHF1YXRlcm5pb24uX3c7XG5cdFx0Y29uc3QgeDIgPSB4ICsgeCxcdHkyID0geSArIHksIHoyID0geiArIHo7XG5cdFx0Y29uc3QgeHggPSB4ICogeDIsIHh5ID0geCAqIHkyLCB4eiA9IHggKiB6Mjtcblx0XHRjb25zdCB5eSA9IHkgKiB5MiwgeXogPSB5ICogejIsIHp6ID0geiAqIHoyO1xuXHRcdGNvbnN0IHd4ID0gdyAqIHgyLCB3eSA9IHcgKiB5Miwgd3ogPSB3ICogejI7XG5cblx0XHRjb25zdCBzeCA9IHNjYWxlLngsIHN5ID0gc2NhbGUueSwgc3ogPSBzY2FsZS56O1xuXG5cdFx0dGVbIDAgXSA9ICggMSAtICggeXkgKyB6eiApICkgKiBzeDtcblx0XHR0ZVsgMSBdID0gKCB4eSArIHd6ICkgKiBzeDtcblx0XHR0ZVsgMiBdID0gKCB4eiAtIHd5ICkgKiBzeDtcblx0XHR0ZVsgMyBdID0gMDtcblxuXHRcdHRlWyA0IF0gPSAoIHh5IC0gd3ogKSAqIHN5O1xuXHRcdHRlWyA1IF0gPSAoIDEgLSAoIHh4ICsgenogKSApICogc3k7XG5cdFx0dGVbIDYgXSA9ICggeXogKyB3eCApICogc3k7XG5cdFx0dGVbIDcgXSA9IDA7XG5cblx0XHR0ZVsgOCBdID0gKCB4eiArIHd5ICkgKiBzejtcblx0XHR0ZVsgOSBdID0gKCB5eiAtIHd4ICkgKiBzejtcblx0XHR0ZVsgMTAgXSA9ICggMSAtICggeHggKyB5eSApICkgKiBzejtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHR0ZVsgMTIgXSA9IHBvc2l0aW9uLng7XG5cdFx0dGVbIDEzIF0gPSBwb3NpdGlvbi55O1xuXHRcdHRlWyAxNCBdID0gcG9zaXRpb24uejtcblx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRsZXQgc3ggPSBfdjEuc2V0KCB0ZVsgMCBdLCB0ZVsgMSBdLCB0ZVsgMiBdICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc3kgPSBfdjEuc2V0KCB0ZVsgNCBdLCB0ZVsgNSBdLCB0ZVsgNiBdICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc3ogPSBfdjEuc2V0KCB0ZVsgOCBdLCB0ZVsgOSBdLCB0ZVsgMTAgXSApLmxlbmd0aCgpO1xuXG5cdFx0Ly8gaWYgZGV0ZXJtaW5lIGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGVcblx0XHRjb25zdCBkZXQgPSB0aGlzLmRldGVybWluYW50KCk7XG5cdFx0aWYgKCBkZXQgPCAwICkgc3ggPSAtIHN4O1xuXG5cdFx0cG9zaXRpb24ueCA9IHRlWyAxMiBdO1xuXHRcdHBvc2l0aW9uLnkgPSB0ZVsgMTMgXTtcblx0XHRwb3NpdGlvbi56ID0gdGVbIDE0IF07XG5cblx0XHQvLyBzY2FsZSB0aGUgcm90YXRpb24gcGFydFxuXHRcdF9tMS5jb3B5KCB0aGlzICk7XG5cblx0XHRjb25zdCBpbnZTWCA9IDEgLyBzeDtcblx0XHRjb25zdCBpbnZTWSA9IDEgLyBzeTtcblx0XHRjb25zdCBpbnZTWiA9IDEgLyBzejtcblxuXHRcdF9tMS5lbGVtZW50c1sgMCBdICo9IGludlNYO1xuXHRcdF9tMS5lbGVtZW50c1sgMSBdICo9IGludlNYO1xuXHRcdF9tMS5lbGVtZW50c1sgMiBdICo9IGludlNYO1xuXG5cdFx0X20xLmVsZW1lbnRzWyA0IF0gKj0gaW52U1k7XG5cdFx0X20xLmVsZW1lbnRzWyA1IF0gKj0gaW52U1k7XG5cdFx0X20xLmVsZW1lbnRzWyA2IF0gKj0gaW52U1k7XG5cblx0XHRfbTEuZWxlbWVudHNbIDggXSAqPSBpbnZTWjtcblx0XHRfbTEuZWxlbWVudHNbIDkgXSAqPSBpbnZTWjtcblx0XHRfbTEuZWxlbWVudHNbIDEwIF0gKj0gaW52U1o7XG5cblx0XHRxdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX20xICk7XG5cblx0XHRzY2FsZS54ID0gc3g7XG5cdFx0c2NhbGUueSA9IHN5O1xuXHRcdHNjYWxlLnogPSBzejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUGVyc3BlY3RpdmUoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyLCBjb29yZGluYXRlU3lzdGVtID0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IHggPSAyICogbmVhciAvICggcmlnaHQgLSBsZWZ0ICk7XG5cdFx0Y29uc3QgeSA9IDIgKiBuZWFyIC8gKCB0b3AgLSBib3R0b20gKTtcblxuXHRcdGNvbnN0IGEgPSAoIHJpZ2h0ICsgbGVmdCApIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHRjb25zdCBiID0gKCB0b3AgKyBib3R0b20gKSAvICggdG9wIC0gYm90dG9tICk7XG5cblx0XHRsZXQgYywgZDtcblxuXHRcdGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHRjID0gLSAoIGZhciArIG5lYXIgKSAvICggZmFyIC0gbmVhciApO1xuXHRcdFx0ZCA9ICggLSAyICogZmFyICogbmVhciApIC8gKCBmYXIgLSBuZWFyICk7XG5cblx0XHR9IGVsc2UgaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHUFVDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHRjID0gLSBmYXIgLyAoIGZhciAtIG5lYXIgKTtcblx0XHRcdGQgPSAoIC0gZmFyICogbmVhciApIC8gKCBmYXIgLSBuZWFyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5NYXRyaXg0Lm1ha2VQZXJzcGVjdGl2ZSgpOiBJbnZhbGlkIGNvb3JkaW5hdGUgc3lzdGVtOiAnICsgY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0fVxuXG5cdFx0dGVbIDAgXSA9IHg7XHR0ZVsgNCBdID0gMDtcdHRlWyA4IF0gPSBhOyBcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMSBdID0gMDtcdHRlWyA1IF0gPSB5O1x0dGVbIDkgXSA9IGI7IFx0dGVbIDEzIF0gPSAwO1xuXHRcdHRlWyAyIF0gPSAwO1x0dGVbIDYgXSA9IDA7XHR0ZVsgMTAgXSA9IGM7IFx0dGVbIDE0IF0gPSBkO1xuXHRcdHRlWyAzIF0gPSAwO1x0dGVbIDcgXSA9IDA7XHR0ZVsgMTEgXSA9IC0gMTtcdHRlWyAxNSBdID0gMDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlT3J0aG9ncmFwaGljKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciwgY29vcmRpbmF0ZVN5c3RlbSA9IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCB3ID0gMS4wIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHRjb25zdCBoID0gMS4wIC8gKCB0b3AgLSBib3R0b20gKTtcblx0XHRjb25zdCBwID0gMS4wIC8gKCBmYXIgLSBuZWFyICk7XG5cblx0XHRjb25zdCB4ID0gKCByaWdodCArIGxlZnQgKSAqIHc7XG5cdFx0Y29uc3QgeSA9ICggdG9wICsgYm90dG9tICkgKiBoO1xuXG5cdFx0bGV0IHosIHpJbnY7XG5cblx0XHRpZiAoIGNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdFx0eiA9ICggZmFyICsgbmVhciApICogcDtcblx0XHRcdHpJbnYgPSAtIDIgKiBwO1xuXG5cdFx0fSBlbHNlIGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdFx0eiA9IG5lYXIgKiBwO1xuXHRcdFx0ekludiA9IC0gMSAqIHA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5NYXRyaXg0Lm1ha2VPcnRob2dyYXBoaWMoKTogSW52YWxpZCBjb29yZGluYXRlIHN5c3RlbTogJyArIGNvb3JkaW5hdGVTeXN0ZW0gKTtcblxuXHRcdH1cblxuXHRcdHRlWyAwIF0gPSAyICogdztcdHRlWyA0IF0gPSAwO1x0XHR0ZVsgOCBdID0gMDsgXHRcdHRlWyAxMiBdID0gLSB4O1xuXHRcdHRlWyAxIF0gPSAwOyBcdFx0dGVbIDUgXSA9IDIgKiBoO1x0dGVbIDkgXSA9IDA7IFx0XHR0ZVsgMTMgXSA9IC0geTtcblx0XHR0ZVsgMiBdID0gMDsgXHRcdHRlWyA2IF0gPSAwO1x0XHR0ZVsgMTAgXSA9IHpJbnY7XHR0ZVsgMTQgXSA9IC0gejtcblx0XHR0ZVsgMyBdID0gMDsgXHRcdHRlWyA3IF0gPSAwO1x0XHR0ZVsgMTEgXSA9IDA7XHRcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIG1hdHJpeCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0ZVsgMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0ZVsgMSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0ZVsgMiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDQgXSA9IHRlWyA0IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDUgXSA9IHRlWyA1IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgOCBdID0gdGVbIDggXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgOSBdID0gdGVbIDkgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTAgXSA9IHRlWyAxMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMSBdID0gdGVbIDExIF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgMTIgXSA9IHRlWyAxMiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMyBdID0gdGVbIDEzIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDE0IF0gPSB0ZVsgMTQgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTUgXSA9IHRlWyAxNSBdO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxufVxuXG5jb25zdCBfdjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbTEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfemVybyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIDAsIDAgKTtcbmNvbnN0IF9vbmUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAxLCAxLCAxICk7XG5jb25zdCBfeCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF95ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ogPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmV4cG9ydCB7IE1hdHJpeDQgfTtcbiIsImltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuL1F1YXRlcm5pb24uanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4vTWF0cml4NC5qcyc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4vTWF0aFV0aWxzLmpzJztcblxuY29uc3QgX21hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9xdWF0ZXJuaW9uID0gLypAX19QVVJFX18qLyBuZXcgUXVhdGVybmlvbigpO1xuXG5jbGFzcyBFdWxlciB7XG5cblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCwgeiA9IDAsIG9yZGVyID0gRXVsZXIuREVGQVVMVF9PUkRFUiApIHtcblxuXHRcdHRoaXMuaXNFdWxlciA9IHRydWU7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xuXG5cdH1cblxuXHRnZXQgeCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl94O1xuXG5cdH1cblxuXHRzZXQgeCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl94ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRnZXQgeSgpIHtcblxuXHRcdHJldHVybiB0aGlzLl95O1xuXG5cdH1cblxuXHRzZXQgeSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl95ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRnZXQgeigpIHtcblxuXHRcdHJldHVybiB0aGlzLl96O1xuXG5cdH1cblxuXHRzZXQgeiggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl96ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRnZXQgb3JkZXIoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fb3JkZXI7XG5cblx0fVxuXG5cdHNldCBvcmRlciggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl9vcmRlciA9IHZhbHVlO1xuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0c2V0KCB4LCB5LCB6LCBvcmRlciA9IHRoaXMuX29yZGVyICkge1xuXG5cdFx0dGhpcy5feCA9IHg7XG5cdFx0dGhpcy5feSA9IHk7XG5cdFx0dGhpcy5feiA9IHo7XG5cdFx0dGhpcy5fb3JkZXIgPSBvcmRlcjtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fb3JkZXIgKTtcblxuXHR9XG5cblx0Y29weSggZXVsZXIgKSB7XG5cblx0XHR0aGlzLl94ID0gZXVsZXIuX3g7XG5cdFx0dGhpcy5feSA9IGV1bGVyLl95O1xuXHRcdHRoaXMuX3ogPSBldWxlci5fejtcblx0XHR0aGlzLl9vcmRlciA9IGV1bGVyLl9vcmRlcjtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tUm90YXRpb25NYXRyaXgoIG0sIG9yZGVyID0gdGhpcy5fb3JkZXIsIHVwZGF0ZSA9IHRydWUgKSB7XG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0Y29uc3QgdGUgPSBtLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF07XG5cdFx0Y29uc3QgbTIxID0gdGVbIDEgXSwgbTIyID0gdGVbIDUgXSwgbTIzID0gdGVbIDkgXTtcblx0XHRjb25zdCBtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXTtcblxuXHRcdHN3aXRjaCAoIG9yZGVyICkge1xuXG5cdFx0XHRjYXNlICdYWVonOlxuXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmFzaW4oIGNsYW1wKCBtMTMsIC0gMSwgMSApICk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggbTEzICkgPCAwLjk5OTk5OTkgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0zMyApO1xuXHRcdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTExICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCBtMzIsIG0yMiApO1xuXHRcdFx0XHRcdHRoaXMuX3ogPSAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWVhaJzpcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMjMsIC0gMSwgMSApICk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggbTIzICkgPCAwLjk5OTk5OTkgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMzMgKTtcblx0XHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMjIgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIC0gbTMxLCBtMTEgKTtcblx0XHRcdFx0XHR0aGlzLl96ID0gMDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1pYWSc6XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXNpbiggY2xhbXAoIG0zMiwgLSAxLCAxICkgKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMzIgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTMzICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMjIgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy5feSA9IDA7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdaWVgnOlxuXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0zMSwgLSAxLCAxICkgKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMzEgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCBtMzIsIG0zMyApO1xuXHRcdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0xMSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0yMiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWVpYJzpcblxuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hc2luKCBjbGFtcCggbTIxLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0yMSApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMjIgKTtcblx0XHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0xMSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMzMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1haWSc6XG5cblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXNpbiggLSBjbGFtcCggbTEyLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0xMiApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTIyICk7XG5cdFx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTExICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTMzICk7XG5cdFx0XHRcdFx0dGhpcy5feSA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkV1bGVyOiAuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgZW5jb3VudGVyZWQgYW4gdW5rbm93biBvcmRlcjogJyArIG9yZGVyICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xuXG5cdFx0aWYgKCB1cGRhdGUgPT09IHRydWUgKSB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVF1YXRlcm5pb24oIHEsIG9yZGVyLCB1cGRhdGUgKSB7XG5cblx0XHRfbWF0cml4Lm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICk7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tYXRyaXgsIG9yZGVyLCB1cGRhdGUgKTtcblxuXHR9XG5cblx0c2V0RnJvbVZlY3RvcjMoIHYsIG9yZGVyID0gdGhpcy5fb3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIHYueCwgdi55LCB2LnosIG9yZGVyICk7XG5cblx0fVxuXG5cdHJlb3JkZXIoIG5ld09yZGVyICkge1xuXG5cdFx0Ly8gV0FSTklORzogdGhpcyBkaXNjYXJkcyByZXZvbHV0aW9uIGluZm9ybWF0aW9uIC1iaG91c3RvblxuXG5cdFx0X3F1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tUXVhdGVybmlvbiggX3F1YXRlcm5pb24sIG5ld09yZGVyICk7XG5cblx0fVxuXG5cdGVxdWFscyggZXVsZXIgKSB7XG5cblx0XHRyZXR1cm4gKCBldWxlci5feCA9PT0gdGhpcy5feCApICYmICggZXVsZXIuX3kgPT09IHRoaXMuX3kgKSAmJiAoIGV1bGVyLl96ID09PSB0aGlzLl96ICkgJiYgKCBldWxlci5fb3JkZXIgPT09IHRoaXMuX29yZGVyICk7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXkgKSB7XG5cblx0XHR0aGlzLl94ID0gYXJyYXlbIDAgXTtcblx0XHR0aGlzLl95ID0gYXJyYXlbIDEgXTtcblx0XHR0aGlzLl96ID0gYXJyYXlbIDIgXTtcblx0XHRpZiAoIGFycmF5WyAzIF0gIT09IHVuZGVmaW5lZCApIHRoaXMuX29yZGVyID0gYXJyYXlbIDMgXTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy5feDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy5feTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5fejtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGhpcy5fb3JkZXI7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdF9vbkNoYW5nZSggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0X29uQ2hhbmdlQ2FsbGJhY2soKSB7fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy5feDtcblx0XHR5aWVsZCB0aGlzLl95O1xuXHRcdHlpZWxkIHRoaXMuX3o7XG5cdFx0eWllbGQgdGhpcy5fb3JkZXI7XG5cblx0fVxuXG59XG5cbkV1bGVyLkRFRkFVTFRfT1JERVIgPSAnWFlaJztcblxuZXhwb3J0IHsgRXVsZXIgfTtcbiIsImNsYXNzIExheWVycyB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHR0aGlzLm1hc2sgPSAxIHwgMDtcblxuXHR9XG5cblx0c2V0KCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrID0gKCAxIDw8IGNoYW5uZWwgfCAwICkgPj4+IDA7XG5cblx0fVxuXG5cdGVuYWJsZSggY2hhbm5lbCApIHtcblxuXHRcdHRoaXMubWFzayB8PSAxIDw8IGNoYW5uZWwgfCAwO1xuXG5cdH1cblxuXHRlbmFibGVBbGwoKSB7XG5cblx0XHR0aGlzLm1hc2sgPSAweGZmZmZmZmZmIHwgMDtcblxuXHR9XG5cblx0dG9nZ2xlKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrIF49IDEgPDwgY2hhbm5lbCB8IDA7XG5cblx0fVxuXG5cdGRpc2FibGUoIGNoYW5uZWwgKSB7XG5cblx0XHR0aGlzLm1hc2sgJj0gfiAoIDEgPDwgY2hhbm5lbCB8IDAgKTtcblxuXHR9XG5cblx0ZGlzYWJsZUFsbCgpIHtcblxuXHRcdHRoaXMubWFzayA9IDA7XG5cblx0fVxuXG5cdHRlc3QoIGxheWVycyApIHtcblxuXHRcdHJldHVybiAoIHRoaXMubWFzayAmIGxheWVycy5tYXNrICkgIT09IDA7XG5cblx0fVxuXG5cdGlzRW5hYmxlZCggY2hhbm5lbCApIHtcblxuXHRcdHJldHVybiAoIHRoaXMubWFzayAmICggMSA8PCBjaGFubmVsIHwgMCApICkgIT09IDA7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgTGF5ZXJzIH07XG4iLCJpbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSAnLi4vbWF0aC9RdWF0ZXJuaW9uLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuL0V2ZW50RGlzcGF0Y2hlci5qcyc7XG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uL21hdGgvRXVsZXIuanMnO1xuaW1wb3J0IHsgTGF5ZXJzIH0gZnJvbSAnLi9MYXllcnMuanMnO1xuaW1wb3J0IHsgTWF0cml4MyB9IGZyb20gJy4uL21hdGgvTWF0cml4My5qcyc7XG5pbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuXG5sZXQgX29iamVjdDNESWQgPSAwO1xuXG5jb25zdCBfdjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcTEgPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5jb25zdCBfbTEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfdGFyZ2V0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfcG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfc2NhbGUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcXVhdGVybmlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTtcblxuY29uc3QgX3hBeGlzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMCwgMCApO1xuY29uc3QgX3lBeGlzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xuY29uc3QgX3pBeGlzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMCwgMSApO1xuXG5jb25zdCBfYWRkZWRFdmVudCA9IHsgdHlwZTogJ2FkZGVkJyB9O1xuY29uc3QgX3JlbW92ZWRFdmVudCA9IHsgdHlwZTogJ3JlbW92ZWQnIH07XG5cbmNvbnN0IF9jaGlsZGFkZGVkRXZlbnQgPSB7IHR5cGU6ICdjaGlsZGFkZGVkJywgY2hpbGQ6IG51bGwgfTtcbmNvbnN0IF9jaGlsZHJlbW92ZWRFdmVudCA9IHsgdHlwZTogJ2NoaWxkcmVtb3ZlZCcsIGNoaWxkOiBudWxsIH07XG5cbmNsYXNzIE9iamVjdDNEIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzT2JqZWN0M0QgPSB0cnVlO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfb2JqZWN0M0RJZCArKyB9ICk7XG5cblx0XHR0aGlzLnV1aWQgPSBNYXRoVXRpbHMuZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR0aGlzLm5hbWUgPSAnJztcblx0XHR0aGlzLnR5cGUgPSAnT2JqZWN0M0QnO1xuXG5cdFx0dGhpcy5wYXJlbnQgPSBudWxsO1xuXHRcdHRoaXMuY2hpbGRyZW4gPSBbXTtcblxuXHRcdHRoaXMudXAgPSBPYmplY3QzRC5ERUZBVUxUX1VQLmNsb25lKCk7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3Qgcm90YXRpb24gPSBuZXcgRXVsZXIoKTtcblx0XHRjb25zdCBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblx0XHRjb25zdCBzY2FsZSA9IG5ldyBWZWN0b3IzKCAxLCAxLCAxICk7XG5cblx0XHRmdW5jdGlvbiBvblJvdGF0aW9uQ2hhbmdlKCkge1xuXG5cdFx0XHRxdWF0ZXJuaW9uLnNldEZyb21FdWxlciggcm90YXRpb24sIGZhbHNlICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvblF1YXRlcm5pb25DaGFuZ2UoKSB7XG5cblx0XHRcdHJvdGF0aW9uLnNldEZyb21RdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uLCB1bmRlZmluZWQsIGZhbHNlICk7XG5cblx0XHR9XG5cblx0XHRyb3RhdGlvbi5fb25DaGFuZ2UoIG9uUm90YXRpb25DaGFuZ2UgKTtcblx0XHRxdWF0ZXJuaW9uLl9vbkNoYW5nZSggb25RdWF0ZXJuaW9uQ2hhbmdlICk7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcywge1xuXHRcdFx0cG9zaXRpb246IHtcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogcG9zaXRpb25cblx0XHRcdH0sXG5cdFx0XHRyb3RhdGlvbjoge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiByb3RhdGlvblxuXHRcdFx0fSxcblx0XHRcdHF1YXRlcm5pb246IHtcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogcXVhdGVybmlvblxuXHRcdFx0fSxcblx0XHRcdHNjYWxlOiB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHNjYWxlXG5cdFx0XHR9LFxuXHRcdFx0bW9kZWxWaWV3TWF0cml4OiB7XG5cdFx0XHRcdHZhbHVlOiBuZXcgTWF0cml4NCgpXG5cdFx0XHR9LFxuXHRcdFx0bm9ybWFsTWF0cml4OiB7XG5cdFx0XHRcdHZhbHVlOiBuZXcgTWF0cml4MygpXG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHRoaXMubWF0cml4V29ybGQgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gT2JqZWN0M0QuREVGQVVMVF9NQVRSSVhfQVVUT19VUERBVEU7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZSA9IE9iamVjdDNELkRFRkFVTFRfTUFUUklYX1dPUkxEX0FVVE9fVVBEQVRFOyAvLyBjaGVja2VkIGJ5IHRoZSByZW5kZXJlclxuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdHRoaXMuY2FzdFNoYWRvdyA9IGZhbHNlO1xuXHRcdHRoaXMucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5mcnVzdHVtQ3VsbGVkID0gdHJ1ZTtcblx0XHR0aGlzLnJlbmRlck9yZGVyID0gMDtcblxuXHRcdHRoaXMuYW5pbWF0aW9ucyA9IFtdO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IHt9O1xuXG5cdH1cblxuXHRvbkJlZm9yZVNoYWRvdyggLyogcmVuZGVyZXIsIG9iamVjdCwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBncm91cCAqLyApIHt9XG5cblx0b25BZnRlclNoYWRvdyggLyogcmVuZGVyZXIsIG9iamVjdCwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBncm91cCAqLyApIHt9XG5cblx0b25CZWZvcmVSZW5kZXIoIC8qIHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICovICkge31cblxuXHRvbkFmdGVyUmVuZGVyKCAvKiByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCAqLyApIHt9XG5cblx0YXBwbHlNYXRyaXg0KCBtYXRyaXggKSB7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSApIHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0XHR0aGlzLm1hdHJpeC5wcmVtdWx0aXBseSggbWF0cml4ICk7XG5cblx0XHR0aGlzLm1hdHJpeC5kZWNvbXBvc2UoIHRoaXMucG9zaXRpb24sIHRoaXMucXVhdGVybmlvbiwgdGhpcy5zY2FsZSApO1xuXG5cdH1cblxuXHRhcHBseVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIHEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRSb3RhdGlvbkZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApO1xuXG5cdH1cblxuXHRzZXRSb3RhdGlvbkZyb21FdWxlciggZXVsZXIgKSB7XG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciwgdHJ1ZSApO1xuXG5cdH1cblxuXHRzZXRSb3RhdGlvbkZyb21NYXRyaXgoIG0gKSB7XG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggbSApO1xuXG5cdH1cblxuXHRzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBxIGlzIG5vcm1hbGl6ZWRcblxuXHRcdHRoaXMucXVhdGVybmlvbi5jb3B5KCBxICk7XG5cblx0fVxuXG5cdHJvdGF0ZU9uQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgb2JqZWN0IG9uIGF4aXMgaW4gb2JqZWN0IHNwYWNlXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdF9xMS5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApO1xuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLm11bHRpcGx5KCBfcTEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3RhdGVPbldvcmxkQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgb2JqZWN0IG9uIGF4aXMgaW4gd29ybGQgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXHRcdC8vIG1ldGhvZCBhc3N1bWVzIG5vIHJvdGF0ZWQgcGFyZW50XG5cblx0XHRfcTEuc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggX3ExICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm90YXRlWCggYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIF94QXhpcywgYW5nbGUgKTtcblxuXHR9XG5cblx0cm90YXRlWSggYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIF95QXhpcywgYW5nbGUgKTtcblxuXHR9XG5cblx0cm90YXRlWiggYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIF96QXhpcywgYW5nbGUgKTtcblxuXHR9XG5cblx0dHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApIHtcblxuXHRcdC8vIHRyYW5zbGF0ZSBvYmplY3QgYnkgZGlzdGFuY2UgYWxvbmcgYXhpcyBpbiBvYmplY3Qgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0X3YxLmNvcHkoIGF4aXMgKS5hcHBseVF1YXRlcm5pb24oIHRoaXMucXVhdGVybmlvbiApO1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5hZGQoIF92MS5tdWx0aXBseVNjYWxhciggZGlzdGFuY2UgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRyYW5zbGF0ZVgoIGRpc3RhbmNlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBfeEF4aXMsIGRpc3RhbmNlICk7XG5cblx0fVxuXG5cdHRyYW5zbGF0ZVkoIGRpc3RhbmNlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBfeUF4aXMsIGRpc3RhbmNlICk7XG5cblx0fVxuXG5cdHRyYW5zbGF0ZVooIGRpc3RhbmNlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBfekF4aXMsIGRpc3RhbmNlICk7XG5cblx0fVxuXG5cdGxvY2FsVG9Xb3JsZCggdmVjdG9yICkge1xuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0fVxuXG5cdHdvcmxkVG9Mb2NhbCggdmVjdG9yICkge1xuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBfbTEuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpICk7XG5cblx0fVxuXG5cdGxvb2tBdCggeCwgeSwgeiApIHtcblxuXHRcdC8vIFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgb2JqZWN0cyBoYXZpbmcgbm9uLXVuaWZvcm1seS1zY2FsZWQgcGFyZW50KHMpXG5cblx0XHRpZiAoIHguaXNWZWN0b3IzICkge1xuXG5cdFx0XHRfdGFyZ2V0LmNvcHkoIHggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF90YXJnZXQuc2V0KCB4LCB5LCB6ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRfcG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRpZiAoIHRoaXMuaXNDYW1lcmEgfHwgdGhpcy5pc0xpZ2h0ICkge1xuXG5cdFx0XHRfbTEubG9va0F0KCBfcG9zaXRpb24sIF90YXJnZXQsIHRoaXMudXAgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9tMS5sb29rQXQoIF90YXJnZXQsIF9wb3NpdGlvbiwgdGhpcy51cCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX20xICk7XG5cblx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0X20xLmV4dHJhY3RSb3RhdGlvbiggcGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRfcTEuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbTEgKTtcblx0XHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggX3ExLmludmVydCgpICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGFkZCggb2JqZWN0ICkge1xuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmFkZCggYXJndW1lbnRzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0ID09PSB0aGlzICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3QgY2FuXFwndCBiZSBhZGRlZCBhcyBhIGNoaWxkIG9mIGl0c2VsZi4nLCBvYmplY3QgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QgJiYgb2JqZWN0LmlzT2JqZWN0M0QgKSB7XG5cblx0XHRcdG9iamVjdC5yZW1vdmVGcm9tUGFyZW50KCk7XG5cdFx0XHRvYmplY3QucGFyZW50ID0gdGhpcztcblx0XHRcdHRoaXMuY2hpbGRyZW4ucHVzaCggb2JqZWN0ICk7XG5cblx0XHRcdG9iamVjdC5kaXNwYXRjaEV2ZW50KCBfYWRkZWRFdmVudCApO1xuXG5cdFx0XHRfY2hpbGRhZGRlZEV2ZW50LmNoaWxkID0gb2JqZWN0O1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfY2hpbGRhZGRlZEV2ZW50ICk7XG5cdFx0XHRfY2hpbGRhZGRlZEV2ZW50LmNoaWxkID0gbnVsbDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3QzRC5hZGQ6IG9iamVjdCBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuT2JqZWN0M0QuJywgb2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmVtb3ZlKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMucmVtb3ZlKCBhcmd1bWVudHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoIG9iamVjdCApO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gLSAxICkge1xuXG5cdFx0XHRvYmplY3QucGFyZW50ID0gbnVsbDtcblx0XHRcdHRoaXMuY2hpbGRyZW4uc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRvYmplY3QuZGlzcGF0Y2hFdmVudCggX3JlbW92ZWRFdmVudCApO1xuXG5cdFx0XHRfY2hpbGRyZW1vdmVkRXZlbnQuY2hpbGQgPSBvYmplY3Q7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9jaGlsZHJlbW92ZWRFdmVudCApO1xuXHRcdFx0X2NoaWxkcmVtb3ZlZEV2ZW50LmNoaWxkID0gbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyZW1vdmVGcm9tUGFyZW50KCkge1xuXG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cblx0XHRpZiAoIHBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0cGFyZW50LnJlbW92ZSggdGhpcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsZWFyKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKCAuLi4gdGhpcy5jaGlsZHJlbiApO1xuXG5cdH1cblxuXHRhdHRhY2goIG9iamVjdCApIHtcblxuXHRcdC8vIGFkZHMgb2JqZWN0IGFzIGEgY2hpbGQgb2YgdGhpcywgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIG9iamVjdCdzIHdvcmxkIHRyYW5zZm9ybVxuXG5cdFx0Ly8gTm90ZTogVGhpcyBtZXRob2QgZG9lcyBub3Qgc3VwcG9ydCBzY2VuZSBncmFwaHMgaGF2aW5nIG5vbi11bmlmb3JtbHktc2NhbGVkIG5vZGVzKHMpXG5cblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0X20xLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdGlmICggb2JqZWN0LnBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0b2JqZWN0LnBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdFx0X20xLm11bHRpcGx5KCBvYmplY3QucGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR9XG5cblx0XHRvYmplY3QuYXBwbHlNYXRyaXg0KCBfbTEgKTtcblxuXHRcdG9iamVjdC5yZW1vdmVGcm9tUGFyZW50KCk7XG5cdFx0b2JqZWN0LnBhcmVudCA9IHRoaXM7XG5cdFx0dGhpcy5jaGlsZHJlbi5wdXNoKCBvYmplY3QgKTtcblxuXHRcdG9iamVjdC51cGRhdGVXb3JsZE1hdHJpeCggZmFsc2UsIHRydWUgKTtcblxuXHRcdG9iamVjdC5kaXNwYXRjaEV2ZW50KCBfYWRkZWRFdmVudCApO1xuXG5cdFx0X2NoaWxkYWRkZWRFdmVudC5jaGlsZCA9IG9iamVjdDtcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9jaGlsZGFkZGVkRXZlbnQgKTtcblx0XHRfY2hpbGRhZGRlZEV2ZW50LmNoaWxkID0gbnVsbDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRPYmplY3RCeUlkKCBpZCApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoICdpZCcsIGlkICk7XG5cblx0fVxuXG5cdGdldE9iamVjdEJ5TmFtZSggbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoICduYW1lJywgbmFtZSApO1xuXG5cdH1cblxuXHRnZXRPYmplY3RCeVByb3BlcnR5KCBuYW1lLCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpc1sgbmFtZSBdID09PSB2YWx1ZSApIHJldHVybiB0aGlzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5bIGkgXTtcblx0XHRcdGNvbnN0IG9iamVjdCA9IGNoaWxkLmdldE9iamVjdEJ5UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cblx0XHRcdGlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG9iamVjdDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9XG5cblx0Z2V0T2JqZWN0c0J5UHJvcGVydHkoIG5hbWUsIHZhbHVlLCByZXN1bHQgPSBbXSApIHtcblxuXHRcdGlmICggdGhpc1sgbmFtZSBdID09PSB2YWx1ZSApIHJlc3VsdC5wdXNoKCB0aGlzICk7XG5cblx0XHRjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLmdldE9iamVjdHNCeVByb3BlcnR5KCBuYW1lLCB2YWx1ZSwgcmVzdWx0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxuXHRnZXRXb3JsZFBvc2l0aW9uKCB0YXJnZXQgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHR9XG5cblx0Z2V0V29ybGRRdWF0ZXJuaW9uKCB0YXJnZXQgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIF9wb3NpdGlvbiwgdGFyZ2V0LCBfc2NhbGUgKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdGdldFdvcmxkU2NhbGUoIHRhcmdldCApIHtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uLCBfcXVhdGVybmlvbiwgdGFyZ2V0ICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHRnZXRXb3JsZERpcmVjdGlvbiggdGFyZ2V0ICkge1xuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdGNvbnN0IGUgPSB0aGlzLm1hdHJpeFdvcmxkLmVsZW1lbnRzO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIGVbIDggXSwgZVsgOSBdLCBlWyAxMCBdICkubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdHJheWNhc3QoIC8qIHJheWNhc3RlciwgaW50ZXJzZWN0cyAqLyApIHt9XG5cblx0dHJhdmVyc2UoIGNhbGxiYWNrICkge1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNoaWxkcmVuWyBpIF0udHJhdmVyc2UoIGNhbGxiYWNrICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHRyYXZlcnNlVmlzaWJsZSggY2FsbGJhY2sgKSB7XG5cblx0XHRpZiAoIHRoaXMudmlzaWJsZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRjYWxsYmFjayggdGhpcyApO1xuXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y2hpbGRyZW5bIGkgXS50cmF2ZXJzZVZpc2libGUoIGNhbGxiYWNrICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHRyYXZlcnNlQW5jZXN0b3JzKCBjYWxsYmFjayApIHtcblxuXHRcdGNvbnN0IHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG5cdFx0aWYgKCBwYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdGNhbGxiYWNrKCBwYXJlbnQgKTtcblxuXHRcdFx0cGFyZW50LnRyYXZlcnNlQW5jZXN0b3JzKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXgoKSB7XG5cblx0XHR0aGlzLm1hdHJpeC5jb21wb3NlKCB0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHRoaXMuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlIHx8IGZvcmNlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMubWF0cml4V29ybGRBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGlmICggdGhpcy5wYXJlbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggdGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRmb3JjZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyBtYWtlIHN1cmUgZGVzY2VuZGFudHMgYXJlIHVwZGF0ZWQgaWYgcmVxdWlyZWRcblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bIGkgXTtcblxuXHRcdFx0Y2hpbGQudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHVwZGF0ZVdvcmxkTWF0cml4KCB1cGRhdGVQYXJlbnRzLCB1cGRhdGVDaGlsZHJlbiApIHtcblxuXHRcdGNvbnN0IHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG5cdFx0aWYgKCB1cGRhdGVQYXJlbnRzID09PSB0cnVlICYmIHBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0cGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgKSB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0aWYgKCB0aGlzLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCwgdGhpcy5tYXRyaXggKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gbWFrZSBzdXJlIGRlc2NlbmRhbnRzIGFyZSB1cGRhdGVkXG5cblx0XHRpZiAoIHVwZGF0ZUNoaWxkcmVuID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgY2hpbGQgPSBjaGlsZHJlblsgaSBdO1xuXG5cdFx0XHRcdGNoaWxkLnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgdHJ1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdC8vIG1ldGEgaXMgYSBzdHJpbmcgd2hlbiBjYWxsZWQgZnJvbSBKU09OLnN0cmluZ2lmeVxuXHRcdGNvbnN0IGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0Y29uc3Qgb3V0cHV0ID0ge307XG5cblx0XHQvLyBtZXRhIGlzIGEgaGFzaCB1c2VkIHRvIGNvbGxlY3QgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLlxuXHRcdC8vIG5vdCBwcm92aWRpbmcgaXQgaW1wbGllcyB0aGF0IHRoaXMgaXMgdGhlIHJvb3Qgb2JqZWN0XG5cdFx0Ly8gYmVpbmcgc2VyaWFsaXplZC5cblx0XHRpZiAoIGlzUm9vdE9iamVjdCApIHtcblxuXHRcdFx0Ly8gaW5pdGlhbGl6ZSBtZXRhIG9ialxuXHRcdFx0bWV0YSA9IHtcblx0XHRcdFx0Z2VvbWV0cmllczoge30sXG5cdFx0XHRcdG1hdGVyaWFsczoge30sXG5cdFx0XHRcdHRleHR1cmVzOiB7fSxcblx0XHRcdFx0aW1hZ2VzOiB7fSxcblx0XHRcdFx0c2hhcGVzOiB7fSxcblx0XHRcdFx0c2tlbGV0b25zOiB7fSxcblx0XHRcdFx0YW5pbWF0aW9uczoge30sXG5cdFx0XHRcdG5vZGVzOiB7fVxuXHRcdFx0fTtcblxuXHRcdFx0b3V0cHV0Lm1ldGFkYXRhID0ge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjYsXG5cdFx0XHRcdHR5cGU6ICdPYmplY3QnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdPYmplY3QzRC50b0pTT04nXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc3RhbmRhcmQgT2JqZWN0M0Qgc2VyaWFsaXphdGlvblxuXG5cdFx0Y29uc3Qgb2JqZWN0ID0ge307XG5cblx0XHRvYmplY3QudXVpZCA9IHRoaXMudXVpZDtcblx0XHRvYmplY3QudHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIG9iamVjdC5uYW1lID0gdGhpcy5uYW1lO1xuXHRcdGlmICggdGhpcy5jYXN0U2hhZG93ID09PSB0cnVlICkgb2JqZWN0LmNhc3RTaGFkb3cgPSB0cnVlO1xuXHRcdGlmICggdGhpcy5yZWNlaXZlU2hhZG93ID09PSB0cnVlICkgb2JqZWN0LnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIG9iamVjdC52aXNpYmxlID0gZmFsc2U7XG5cdFx0aWYgKCB0aGlzLmZydXN0dW1DdWxsZWQgPT09IGZhbHNlICkgb2JqZWN0LmZydXN0dW1DdWxsZWQgPSBmYWxzZTtcblx0XHRpZiAoIHRoaXMucmVuZGVyT3JkZXIgIT09IDAgKSBvYmplY3QucmVuZGVyT3JkZXIgPSB0aGlzLnJlbmRlck9yZGVyO1xuXHRcdGlmICggT2JqZWN0LmtleXMoIHRoaXMudXNlckRhdGEgKS5sZW5ndGggPiAwICkgb2JqZWN0LnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdG9iamVjdC5sYXllcnMgPSB0aGlzLmxheWVycy5tYXNrO1xuXHRcdG9iamVjdC5tYXRyaXggPSB0aGlzLm1hdHJpeC50b0FycmF5KCk7XG5cdFx0b2JqZWN0LnVwID0gdGhpcy51cC50b0FycmF5KCk7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9PT0gZmFsc2UgKSBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0Ly8gb2JqZWN0IHNwZWNpZmljIHByb3BlcnRpZXNcblxuXHRcdGlmICggdGhpcy5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdG9iamVjdC50eXBlID0gJ0luc3RhbmNlZE1lc2gnO1xuXHRcdFx0b2JqZWN0LmNvdW50ID0gdGhpcy5jb3VudDtcblx0XHRcdG9iamVjdC5pbnN0YW5jZU1hdHJpeCA9IHRoaXMuaW5zdGFuY2VNYXRyaXgudG9KU09OKCk7XG5cdFx0XHRpZiAoIHRoaXMuaW5zdGFuY2VDb2xvciAhPT0gbnVsbCApIG9iamVjdC5pbnN0YW5jZUNvbG9yID0gdGhpcy5pbnN0YW5jZUNvbG9yLnRvSlNPTigpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzQmF0Y2hlZE1lc2ggKSB7XG5cblx0XHRcdG9iamVjdC50eXBlID0gJ0JhdGNoZWRNZXNoJztcblx0XHRcdG9iamVjdC5wZXJPYmplY3RGcnVzdHVtQ3VsbGVkID0gdGhpcy5wZXJPYmplY3RGcnVzdHVtQ3VsbGVkO1xuXHRcdFx0b2JqZWN0LnNvcnRPYmplY3RzID0gdGhpcy5zb3J0T2JqZWN0cztcblxuXHRcdFx0b2JqZWN0LmRyYXdSYW5nZXMgPSB0aGlzLl9kcmF3UmFuZ2VzO1xuXHRcdFx0b2JqZWN0LnJlc2VydmVkUmFuZ2VzID0gdGhpcy5fcmVzZXJ2ZWRSYW5nZXM7XG5cblx0XHRcdG9iamVjdC52aXNpYmlsaXR5ID0gdGhpcy5fdmlzaWJpbGl0eTtcblx0XHRcdG9iamVjdC5hY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG5cdFx0XHRvYmplY3QuYm91bmRzID0gdGhpcy5fYm91bmRzLm1hcCggYm91bmQgPT4gKCB7XG5cdFx0XHRcdGJveEluaXRpYWxpemVkOiBib3VuZC5ib3hJbml0aWFsaXplZCxcblx0XHRcdFx0Ym94TWluOiBib3VuZC5ib3gubWluLnRvQXJyYXkoKSxcblx0XHRcdFx0Ym94TWF4OiBib3VuZC5ib3gubWF4LnRvQXJyYXkoKSxcblxuXHRcdFx0XHRzcGhlcmVJbml0aWFsaXplZDogYm91bmQuc3BoZXJlSW5pdGlhbGl6ZWQsXG5cdFx0XHRcdHNwaGVyZVJhZGl1czogYm91bmQuc3BoZXJlLnJhZGl1cyxcblx0XHRcdFx0c3BoZXJlQ2VudGVyOiBib3VuZC5zcGhlcmUuY2VudGVyLnRvQXJyYXkoKVxuXHRcdFx0fSApICk7XG5cblx0XHRcdG9iamVjdC5tYXhJbnN0YW5jZUNvdW50ID0gdGhpcy5fbWF4SW5zdGFuY2VDb3VudDtcblx0XHRcdG9iamVjdC5tYXhWZXJ0ZXhDb3VudCA9IHRoaXMuX21heFZlcnRleENvdW50O1xuXHRcdFx0b2JqZWN0Lm1heEluZGV4Q291bnQgPSB0aGlzLl9tYXhJbmRleENvdW50O1xuXG5cdFx0XHRvYmplY3QuZ2VvbWV0cnlJbml0aWFsaXplZCA9IHRoaXMuX2dlb21ldHJ5SW5pdGlhbGl6ZWQ7XG5cdFx0XHRvYmplY3QuZ2VvbWV0cnlDb3VudCA9IHRoaXMuX2dlb21ldHJ5Q291bnQ7XG5cblx0XHRcdG9iamVjdC5tYXRyaWNlc1RleHR1cmUgPSB0aGlzLl9tYXRyaWNlc1RleHR1cmUudG9KU09OKCBtZXRhICk7XG5cblx0XHRcdGlmICggdGhpcy5fY29sb3JzVGV4dHVyZSAhPT0gbnVsbCApIG9iamVjdC5jb2xvcnNUZXh0dXJlID0gdGhpcy5fY29sb3JzVGV4dHVyZS50b0pTT04oIG1ldGEgKTtcblxuXHRcdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdG9iamVjdC5ib3VuZGluZ1NwaGVyZSA9IHtcblx0XHRcdFx0XHRjZW50ZXI6IG9iamVjdC5ib3VuZGluZ1NwaGVyZS5jZW50ZXIudG9BcnJheSgpLFxuXHRcdFx0XHRcdHJhZGl1czogb2JqZWN0LmJvdW5kaW5nU3BoZXJlLnJhZGl1c1xuXHRcdFx0XHR9O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRvYmplY3QuYm91bmRpbmdCb3ggPSB7XG5cdFx0XHRcdFx0bWluOiBvYmplY3QuYm91bmRpbmdCb3gubWluLnRvQXJyYXkoKSxcblx0XHRcdFx0XHRtYXg6IG9iamVjdC5ib3VuZGluZ0JveC5tYXgudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRmdW5jdGlvbiBzZXJpYWxpemUoIGxpYnJhcnksIGVsZW1lbnQgKSB7XG5cblx0XHRcdGlmICggbGlicmFyeVsgZWxlbWVudC51dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRsaWJyYXJ5WyBlbGVtZW50LnV1aWQgXSA9IGVsZW1lbnQudG9KU09OKCBtZXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW1lbnQudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5pc1NjZW5lICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuYmFja2dyb3VuZCApIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMuYmFja2dyb3VuZC5pc0NvbG9yICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0LmJhY2tncm91bmQgPSB0aGlzLmJhY2tncm91bmQudG9KU09OKCk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdGhpcy5iYWNrZ3JvdW5kLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5iYWNrZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5lbnZpcm9ubWVudCAmJiB0aGlzLmVudmlyb25tZW50LmlzVGV4dHVyZSAmJiB0aGlzLmVudmlyb25tZW50LmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRvYmplY3QuZW52aXJvbm1lbnQgPSB0aGlzLmVudmlyb25tZW50LnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuaXNNZXNoIHx8IHRoaXMuaXNMaW5lIHx8IHRoaXMuaXNQb2ludHMgKSB7XG5cblx0XHRcdG9iamVjdC5nZW9tZXRyeSA9IHNlcmlhbGl6ZSggbWV0YS5nZW9tZXRyaWVzLCB0aGlzLmdlb21ldHJ5ICk7XG5cblx0XHRcdGNvbnN0IHBhcmFtZXRlcnMgPSB0aGlzLmdlb21ldHJ5LnBhcmFtZXRlcnM7XG5cblx0XHRcdGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICYmIHBhcmFtZXRlcnMuc2hhcGVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2hhcGVzID0gcGFyYW1ldGVycy5zaGFwZXM7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRzZXJpYWxpemUoIG1ldGEuc2hhcGVzLCBzaGFwZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzZXJpYWxpemUoIG1ldGEuc2hhcGVzLCBzaGFwZXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5pc1NraW5uZWRNZXNoICkge1xuXG5cdFx0XHRvYmplY3QuYmluZE1vZGUgPSB0aGlzLmJpbmRNb2RlO1xuXHRcdFx0b2JqZWN0LmJpbmRNYXRyaXggPSB0aGlzLmJpbmRNYXRyaXgudG9BcnJheSgpO1xuXG5cdFx0XHRpZiAoIHRoaXMuc2tlbGV0b24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzZXJpYWxpemUoIG1ldGEuc2tlbGV0b25zLCB0aGlzLnNrZWxldG9uICk7XG5cblx0XHRcdFx0b2JqZWN0LnNrZWxldG9uID0gdGhpcy5za2VsZXRvbi51dWlkO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB0aGlzLm1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0Y29uc3QgdXVpZHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLm1hdGVyaWFsLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR1dWlkcy5wdXNoKCBzZXJpYWxpemUoIG1ldGEubWF0ZXJpYWxzLCB0aGlzLm1hdGVyaWFsWyBpIF0gKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvYmplY3QubWF0ZXJpYWwgPSB1dWlkcztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRvYmplY3QubWF0ZXJpYWwgPSBzZXJpYWxpemUoIG1ldGEubWF0ZXJpYWxzLCB0aGlzLm1hdGVyaWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0b2JqZWN0LmNoaWxkcmVuID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdG9iamVjdC5jaGlsZHJlbi5wdXNoKCB0aGlzLmNoaWxkcmVuWyBpIF0udG9KU09OKCBtZXRhICkub2JqZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuYW5pbWF0aW9ucy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRvYmplY3QuYW5pbWF0aW9ucyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmFuaW1hdGlvbnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGFuaW1hdGlvbiA9IHRoaXMuYW5pbWF0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdG9iamVjdC5hbmltYXRpb25zLnB1c2goIHNlcmlhbGl6ZSggbWV0YS5hbmltYXRpb25zLCBhbmltYXRpb24gKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGlzUm9vdE9iamVjdCApIHtcblxuXHRcdFx0Y29uc3QgZ2VvbWV0cmllcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuZ2VvbWV0cmllcyApO1xuXHRcdFx0Y29uc3QgbWF0ZXJpYWxzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5tYXRlcmlhbHMgKTtcblx0XHRcdGNvbnN0IHRleHR1cmVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS50ZXh0dXJlcyApO1xuXHRcdFx0Y29uc3QgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5pbWFnZXMgKTtcblx0XHRcdGNvbnN0IHNoYXBlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuc2hhcGVzICk7XG5cdFx0XHRjb25zdCBza2VsZXRvbnMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnNrZWxldG9ucyApO1xuXHRcdFx0Y29uc3QgYW5pbWF0aW9ucyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuYW5pbWF0aW9ucyApO1xuXHRcdFx0Y29uc3Qgbm9kZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLm5vZGVzICk7XG5cblx0XHRcdGlmICggZ2VvbWV0cmllcy5sZW5ndGggPiAwICkgb3V0cHV0Lmdlb21ldHJpZXMgPSBnZW9tZXRyaWVzO1xuXHRcdFx0aWYgKCBtYXRlcmlhbHMubGVuZ3RoID4gMCApIG91dHB1dC5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7XG5cdFx0XHRpZiAoIHRleHR1cmVzLmxlbmd0aCA+IDAgKSBvdXRwdXQudGV4dHVyZXMgPSB0ZXh0dXJlcztcblx0XHRcdGlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBvdXRwdXQuaW1hZ2VzID0gaW1hZ2VzO1xuXHRcdFx0aWYgKCBzaGFwZXMubGVuZ3RoID4gMCApIG91dHB1dC5zaGFwZXMgPSBzaGFwZXM7XG5cdFx0XHRpZiAoIHNrZWxldG9ucy5sZW5ndGggPiAwICkgb3V0cHV0LnNrZWxldG9ucyA9IHNrZWxldG9ucztcblx0XHRcdGlmICggYW5pbWF0aW9ucy5sZW5ndGggPiAwICkgb3V0cHV0LmFuaW1hdGlvbnMgPSBhbmltYXRpb25zO1xuXHRcdFx0aWYgKCBub2Rlcy5sZW5ndGggPiAwICkgb3V0cHV0Lm5vZGVzID0gbm9kZXM7XG5cblx0XHR9XG5cblx0XHRvdXRwdXQub2JqZWN0ID0gb2JqZWN0O1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHRcdC8vIGV4dHJhY3QgZGF0YSBmcm9tIHRoZSBjYWNoZSBoYXNoXG5cdFx0Ly8gcmVtb3ZlIG1ldGFkYXRhIG9uIGVhY2ggaXRlbVxuXHRcdC8vIGFuZCByZXR1cm4gYXMgYXJyYXlcblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcblxuXHRcdFx0Y29uc3QgdmFsdWVzID0gW107XG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gY2FjaGUgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGF0YSA9IGNhY2hlWyBrZXkgXTtcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlcztcblxuXHRcdH1cblxuXHR9XG5cblx0Y2xvbmUoIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMsIHJlY3Vyc2l2ZSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSA9IHRydWUgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdHRoaXMudXAuY29weSggc291cmNlLnVwICk7XG5cblx0XHR0aGlzLnBvc2l0aW9uLmNvcHkoIHNvdXJjZS5wb3NpdGlvbiApO1xuXHRcdHRoaXMucm90YXRpb24ub3JkZXIgPSBzb3VyY2Uucm90YXRpb24ub3JkZXI7XG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHNvdXJjZS5xdWF0ZXJuaW9uICk7XG5cdFx0dGhpcy5zY2FsZS5jb3B5KCBzb3VyY2Uuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4LmNvcHkoIHNvdXJjZS5tYXRyaXggKTtcblx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhXb3JsZEF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gc291cmNlLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU7XG5cblx0XHR0aGlzLmxheWVycy5tYXNrID0gc291cmNlLmxheWVycy5tYXNrO1xuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXG5cdFx0dGhpcy5jYXN0U2hhZG93ID0gc291cmNlLmNhc3RTaGFkb3c7XG5cdFx0dGhpcy5yZWNlaXZlU2hhZG93ID0gc291cmNlLnJlY2VpdmVTaGFkb3c7XG5cblx0XHR0aGlzLmZydXN0dW1DdWxsZWQgPSBzb3VyY2UuZnJ1c3R1bUN1bGxlZDtcblx0XHR0aGlzLnJlbmRlck9yZGVyID0gc291cmNlLnJlbmRlck9yZGVyO1xuXG5cdFx0dGhpcy5hbmltYXRpb25zID0gc291cmNlLmFuaW1hdGlvbnMuc2xpY2UoKTtcblxuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcblxuXHRcdGlmICggcmVjdXJzaXZlID09PSB0cnVlICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBzb3VyY2UuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGNoaWxkID0gc291cmNlLmNoaWxkcmVuWyBpIF07XG5cdFx0XHRcdHRoaXMuYWRkKCBjaGlsZC5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5PYmplY3QzRC5ERUZBVUxUX1VQID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xuT2JqZWN0M0QuREVGQVVMVF9NQVRSSVhfQVVUT19VUERBVEUgPSB0cnVlO1xuT2JqZWN0M0QuREVGQVVMVF9NQVRSSVhfV09STERfQVVUT19VUERBVEUgPSB0cnVlO1xuXG5leHBvcnQgeyBPYmplY3QzRCB9O1xuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMy5qcyc7XG5cbmNvbnN0IF92MCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX3ZhYiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92YWMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmJjID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZhcCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92YnAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmNwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBUcmlhbmdsZSB7XG5cblx0Y29uc3RydWN0b3IoIGEgPSBuZXcgVmVjdG9yMygpLCBiID0gbmV3IFZlY3RvcjMoKSwgYyA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHR0aGlzLmEgPSBhO1xuXHRcdHRoaXMuYiA9IGI7XG5cdFx0dGhpcy5jID0gYztcblxuXHR9XG5cblx0c3RhdGljIGdldE5vcm1hbCggYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdFx0dGFyZ2V0LnN1YlZlY3RvcnMoIGMsIGIgKTtcblx0XHRfdjAuc3ViVmVjdG9ycyggYSwgYiApO1xuXHRcdHRhcmdldC5jcm9zcyggX3YwICk7XG5cblx0XHRjb25zdCB0YXJnZXRMZW5ndGhTcSA9IHRhcmdldC5sZW5ndGhTcSgpO1xuXHRcdGlmICggdGFyZ2V0TGVuZ3RoU3EgPiAwICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0Lm11bHRpcGx5U2NhbGFyKCAxIC8gTWF0aC5zcXJ0KCB0YXJnZXRMZW5ndGhTcSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggMCwgMCwgMCApO1xuXG5cdH1cblxuXHQvLyBzdGF0aWMvaW5zdGFuY2UgbWV0aG9kIHRvIGNhbGN1bGF0ZSBiYXJ5Y2VudHJpYyBjb29yZGluYXRlc1xuXHQvLyBiYXNlZCBvbjogaHR0cDovL3d3dy5ibGFja3Bhd24uY29tL3RleHRzL3BvaW50aW5wb2x5L2RlZmF1bHQuaHRtbFxuXHRzdGF0aWMgZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdFx0X3YwLnN1YlZlY3RvcnMoIGMsIGEgKTtcblx0XHRfdjEuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdF92Mi5zdWJWZWN0b3JzKCBwb2ludCwgYSApO1xuXG5cdFx0Y29uc3QgZG90MDAgPSBfdjAuZG90KCBfdjAgKTtcblx0XHRjb25zdCBkb3QwMSA9IF92MC5kb3QoIF92MSApO1xuXHRcdGNvbnN0IGRvdDAyID0gX3YwLmRvdCggX3YyICk7XG5cdFx0Y29uc3QgZG90MTEgPSBfdjEuZG90KCBfdjEgKTtcblx0XHRjb25zdCBkb3QxMiA9IF92MS5kb3QoIF92MiApO1xuXG5cdFx0Y29uc3QgZGVub20gPSAoIGRvdDAwICogZG90MTEgLSBkb3QwMSAqIGRvdDAxICk7XG5cblx0XHQvLyBjb2xsaW5lYXIgb3Igc2luZ3VsYXIgdHJpYW5nbGVcblx0XHRpZiAoIGRlbm9tID09PSAwICkge1xuXG5cdFx0XHR0YXJnZXQuc2V0KCAwLCAwLCAwICk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGludkRlbm9tID0gMSAvIGRlbm9tO1xuXHRcdGNvbnN0IHUgPSAoIGRvdDExICogZG90MDIgLSBkb3QwMSAqIGRvdDEyICkgKiBpbnZEZW5vbTtcblx0XHRjb25zdCB2ID0gKCBkb3QwMCAqIGRvdDEyIC0gZG90MDEgKiBkb3QwMiApICogaW52RGVub207XG5cblx0XHQvLyBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcyBtdXN0IGFsd2F5cyBzdW0gdG8gMVxuXHRcdHJldHVybiB0YXJnZXQuc2V0KCAxIC0gdSAtIHYsIHYsIHUgKTtcblxuXHR9XG5cblx0c3RhdGljIGNvbnRhaW5zUG9pbnQoIHBvaW50LCBhLCBiLCBjICkge1xuXG5cdFx0Ly8gaWYgdGhlIHRyaWFuZ2xlIGlzIGRlZ2VuZXJhdGUgdGhlbiB3ZSBjYW4ndCBjb250YWluIGEgcG9pbnRcblx0XHRpZiAoIHRoaXMuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgX3YzICkgPT09IG51bGwgKSB7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiAoIF92My54ID49IDAgKSAmJiAoIF92My55ID49IDAgKSAmJiAoICggX3YzLnggKyBfdjMueSApIDw9IDEgKTtcblxuXHR9XG5cblx0c3RhdGljIGdldEludGVycG9sYXRpb24oIHBvaW50LCBwMSwgcDIsIHAzLCB2MSwgdjIsIHYzLCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRoaXMuZ2V0QmFyeWNvb3JkKCBwb2ludCwgcDEsIHAyLCBwMywgX3YzICkgPT09IG51bGwgKSB7XG5cblx0XHRcdHRhcmdldC54ID0gMDtcblx0XHRcdHRhcmdldC55ID0gMDtcblx0XHRcdGlmICggJ3onIGluIHRhcmdldCApIHRhcmdldC56ID0gMDtcblx0XHRcdGlmICggJ3cnIGluIHRhcmdldCApIHRhcmdldC53ID0gMDtcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LnNldFNjYWxhciggMCApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHYxLCBfdjMueCApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHYyLCBfdjMueSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHYzLCBfdjMueiApO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0c3RhdGljIGlzRnJvbnRGYWNpbmcoIGEsIGIsIGMsIGRpcmVjdGlvbiApIHtcblxuXHRcdF92MC5zdWJWZWN0b3JzKCBjLCBiICk7XG5cdFx0X3YxLnN1YlZlY3RvcnMoIGEsIGIgKTtcblxuXHRcdC8vIHN0cmljdGx5IGZyb250IGZhY2luZ1xuXHRcdHJldHVybiAoIF92MC5jcm9zcyggX3YxICkuZG90KCBkaXJlY3Rpb24gKSA8IDAgKSA/IHRydWUgOiBmYWxzZTtcblxuXHR9XG5cblx0c2V0KCBhLCBiLCBjICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIGEgKTtcblx0XHR0aGlzLmIuY29weSggYiApO1xuXHRcdHRoaXMuYy5jb3B5KCBjICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVBvaW50c0FuZEluZGljZXMoIHBvaW50cywgaTAsIGkxLCBpMiApIHtcblxuXHRcdHRoaXMuYS5jb3B5KCBwb2ludHNbIGkwIF0gKTtcblx0XHR0aGlzLmIuY29weSggcG9pbnRzWyBpMSBdICk7XG5cdFx0dGhpcy5jLmNvcHkoIHBvaW50c1sgaTIgXSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21BdHRyaWJ1dGVBbmRJbmRpY2VzKCBhdHRyaWJ1dGUsIGkwLCBpMSwgaTIgKSB7XG5cblx0XHR0aGlzLmEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpMCApO1xuXHRcdHRoaXMuYi5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGkxICk7XG5cdFx0dGhpcy5jLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaTIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggdHJpYW5nbGUgKSB7XG5cblx0XHR0aGlzLmEuY29weSggdHJpYW5nbGUuYSApO1xuXHRcdHRoaXMuYi5jb3B5KCB0cmlhbmdsZS5iICk7XG5cdFx0dGhpcy5jLmNvcHkoIHRyaWFuZ2xlLmMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRBcmVhKCkge1xuXG5cdFx0X3YwLnN1YlZlY3RvcnMoIHRoaXMuYywgdGhpcy5iICk7XG5cdFx0X3YxLnN1YlZlY3RvcnMoIHRoaXMuYSwgdGhpcy5iICk7XG5cblx0XHRyZXR1cm4gX3YwLmNyb3NzKCBfdjEgKS5sZW5ndGgoKSAqIDAuNTtcblxuXHR9XG5cblx0Z2V0TWlkcG9pbnQoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKS5hZGQoIHRoaXMuYyApLm11bHRpcGx5U2NhbGFyKCAxIC8gMyApO1xuXG5cdH1cblxuXHRnZXROb3JtYWwoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXROb3JtYWwoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHRhcmdldCApO1xuXG5cdH1cblxuXHRnZXRQbGFuZSggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXRGcm9tQ29wbGFuYXJQb2ludHMoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMgKTtcblxuXHR9XG5cblx0Z2V0QmFyeWNvb3JkKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldEJhcnljb29yZCggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHRhcmdldCApO1xuXG5cdH1cblxuXHRnZXRJbnRlcnBvbGF0aW9uKCBwb2ludCwgdjEsIHYyLCB2MywgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldEludGVycG9sYXRpb24oIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB2MSwgdjIsIHYzLCB0YXJnZXQgKTtcblxuXHR9XG5cblx0Y29udGFpbnNQb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuY29udGFpbnNQb2ludCggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMgKTtcblxuXHR9XG5cblx0aXNGcm9udEZhY2luZyggZGlyZWN0aW9uICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmlzRnJvbnRGYWNpbmcoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIGRpcmVjdGlvbiApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNUcmlhbmdsZSggdGhpcyApO1xuXG5cdH1cblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50KCBwLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zdCBhID0gdGhpcy5hLCBiID0gdGhpcy5iLCBjID0gdGhpcy5jO1xuXHRcdGxldCB2LCB3O1xuXG5cdFx0Ly8gYWxnb3JpdGhtIHRoYW5rcyB0byBSZWFsLVRpbWUgQ29sbGlzaW9uIERldGVjdGlvbiBieSBDaHJpc3RlciBFcmljc29uLFxuXHRcdC8vIHB1Ymxpc2hlZCBieSBNb3JnYW4gS2F1Zm1hbm4gUHVibGlzaGVycywgKGMpIDIwMDUgRWxzZXZpZXIgSW5jLixcblx0XHQvLyB1bmRlciB0aGUgYWNjb21wYW55aW5nIGxpY2Vuc2U7IHNlZSBjaGFwdGVyIDUuMS41IGZvciBkZXRhaWxlZCBleHBsYW5hdGlvbi5cblx0XHQvLyBiYXNpY2FsbHksIHdlJ3JlIGRpc3Rpbmd1aXNoaW5nIHdoaWNoIG9mIHRoZSB2b3Jvbm9pIHJlZ2lvbnMgb2YgdGhlIHRyaWFuZ2xlXG5cdFx0Ly8gdGhlIHBvaW50IGxpZXMgaW4gd2l0aCB0aGUgbWluaW11bSBhbW91bnQgb2YgcmVkdW5kYW50IGNvbXB1dGF0aW9uLlxuXG5cdFx0X3ZhYi5zdWJWZWN0b3JzKCBiLCBhICk7XG5cdFx0X3ZhYy5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0X3ZhcC5zdWJWZWN0b3JzKCBwLCBhICk7XG5cdFx0Y29uc3QgZDEgPSBfdmFiLmRvdCggX3ZhcCApO1xuXHRcdGNvbnN0IGQyID0gX3ZhYy5kb3QoIF92YXAgKTtcblx0XHRpZiAoIGQxIDw9IDAgJiYgZDIgPD0gMCApIHtcblxuXHRcdFx0Ly8gdmVydGV4IHJlZ2lvbiBvZiBBOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEsIDAsIDApXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKTtcblxuXHRcdH1cblxuXHRcdF92YnAuc3ViVmVjdG9ycyggcCwgYiApO1xuXHRcdGNvbnN0IGQzID0gX3ZhYi5kb3QoIF92YnAgKTtcblx0XHRjb25zdCBkNCA9IF92YWMuZG90KCBfdmJwICk7XG5cdFx0aWYgKCBkMyA+PSAwICYmIGQ0IDw9IGQzICkge1xuXG5cdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEI7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMSwgMClcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYiApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdmMgPSBkMSAqIGQ0IC0gZDMgKiBkMjtcblx0XHRpZiAoIHZjIDw9IDAgJiYgZDEgPj0gMCAmJiBkMyA8PSAwICkge1xuXG5cdFx0XHR2ID0gZDEgLyAoIGQxIC0gZDMgKTtcblx0XHRcdC8vIGVkZ2UgcmVnaW9uIG9mIEFCOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEtdiwgdiwgMClcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYSApLmFkZFNjYWxlZFZlY3RvciggX3ZhYiwgdiApO1xuXG5cdFx0fVxuXG5cdFx0X3ZjcC5zdWJWZWN0b3JzKCBwLCBjICk7XG5cdFx0Y29uc3QgZDUgPSBfdmFiLmRvdCggX3ZjcCApO1xuXHRcdGNvbnN0IGQ2ID0gX3ZhYy5kb3QoIF92Y3AgKTtcblx0XHRpZiAoIGQ2ID49IDAgJiYgZDUgPD0gZDYgKSB7XG5cblx0XHRcdC8vIHZlcnRleCByZWdpb24gb2YgQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAwLCAxKVxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBjICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB2YiA9IGQ1ICogZDIgLSBkMSAqIGQ2O1xuXHRcdGlmICggdmIgPD0gMCAmJiBkMiA+PSAwICYmIGQ2IDw9IDAgKSB7XG5cblx0XHRcdHcgPSBkMiAvICggZDIgLSBkNiApO1xuXHRcdFx0Ly8gZWRnZSByZWdpb24gb2YgQUM7IGJhcnljZW50cmljIGNvb3JkcyAoMS13LCAwLCB3KVxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFjLCB3ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB2YSA9IGQzICogZDYgLSBkNSAqIGQ0O1xuXHRcdGlmICggdmEgPD0gMCAmJiAoIGQ0IC0gZDMgKSA+PSAwICYmICggZDUgLSBkNiApID49IDAgKSB7XG5cblx0XHRcdF92YmMuc3ViVmVjdG9ycyggYywgYiApO1xuXHRcdFx0dyA9ICggZDQgLSBkMyApIC8gKCAoIGQ0IC0gZDMgKSArICggZDUgLSBkNiApICk7XG5cdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBCQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLXcsIHcpXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGIgKS5hZGRTY2FsZWRWZWN0b3IoIF92YmMsIHcgKTsgLy8gZWRnZSByZWdpb24gb2YgQkNcblxuXHRcdH1cblxuXHRcdC8vIGZhY2UgcmVnaW9uXG5cdFx0Y29uc3QgZGVub20gPSAxIC8gKCB2YSArIHZiICsgdmMgKTtcblx0XHQvLyB1ID0gdmEgKiBkZW5vbVxuXHRcdHYgPSB2YiAqIGRlbm9tO1xuXHRcdHcgPSB2YyAqIGRlbm9tO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFiLCB2ICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFjLCB3ICk7XG5cblx0fVxuXG5cdGVxdWFscyggdHJpYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdHJpYW5nbGUuYS5lcXVhbHMoIHRoaXMuYSApICYmIHRyaWFuZ2xlLmIuZXF1YWxzKCB0aGlzLmIgKSAmJiB0cmlhbmdsZS5jLmVxdWFscyggdGhpcy5jICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFRyaWFuZ2xlIH07XG4iLCJpbXBvcnQgeyBjbGFtcCwgZXVjbGlkZWFuTW9kdWxvLCBsZXJwIH0gZnJvbSAnLi9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgQ29sb3JNYW5hZ2VtZW50LCBTUkdCVG9MaW5lYXIsIExpbmVhclRvU1JHQiB9IGZyb20gJy4vQ29sb3JNYW5hZ2VtZW50LmpzJztcbmltcG9ydCB7IFNSR0JDb2xvclNwYWNlIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuY29uc3QgX2NvbG9yS2V5d29yZHMgPSB7ICdhbGljZWJsdWUnOiAweEYwRjhGRiwgJ2FudGlxdWV3aGl0ZSc6IDB4RkFFQkQ3LCAnYXF1YSc6IDB4MDBGRkZGLCAnYXF1YW1hcmluZSc6IDB4N0ZGRkQ0LCAnYXp1cmUnOiAweEYwRkZGRixcblx0J2JlaWdlJzogMHhGNUY1REMsICdiaXNxdWUnOiAweEZGRTRDNCwgJ2JsYWNrJzogMHgwMDAwMDAsICdibGFuY2hlZGFsbW9uZCc6IDB4RkZFQkNELCAnYmx1ZSc6IDB4MDAwMEZGLCAnYmx1ZXZpb2xldCc6IDB4OEEyQkUyLFxuXHQnYnJvd24nOiAweEE1MkEyQSwgJ2J1cmx5d29vZCc6IDB4REVCODg3LCAnY2FkZXRibHVlJzogMHg1RjlFQTAsICdjaGFydHJldXNlJzogMHg3RkZGMDAsICdjaG9jb2xhdGUnOiAweEQyNjkxRSwgJ2NvcmFsJzogMHhGRjdGNTAsXG5cdCdjb3JuZmxvd2VyYmx1ZSc6IDB4NjQ5NUVELCAnY29ybnNpbGsnOiAweEZGRjhEQywgJ2NyaW1zb24nOiAweERDMTQzQywgJ2N5YW4nOiAweDAwRkZGRiwgJ2RhcmtibHVlJzogMHgwMDAwOEIsICdkYXJrY3lhbic6IDB4MDA4QjhCLFxuXHQnZGFya2dvbGRlbnJvZCc6IDB4Qjg4NjBCLCAnZGFya2dyYXknOiAweEE5QTlBOSwgJ2RhcmtncmVlbic6IDB4MDA2NDAwLCAnZGFya2dyZXknOiAweEE5QTlBOSwgJ2RhcmtraGFraSc6IDB4QkRCNzZCLCAnZGFya21hZ2VudGEnOiAweDhCMDA4Qixcblx0J2RhcmtvbGl2ZWdyZWVuJzogMHg1NTZCMkYsICdkYXJrb3JhbmdlJzogMHhGRjhDMDAsICdkYXJrb3JjaGlkJzogMHg5OTMyQ0MsICdkYXJrcmVkJzogMHg4QjAwMDAsICdkYXJrc2FsbW9uJzogMHhFOTk2N0EsICdkYXJrc2VhZ3JlZW4nOiAweDhGQkM4Rixcblx0J2RhcmtzbGF0ZWJsdWUnOiAweDQ4M0Q4QiwgJ2RhcmtzbGF0ZWdyYXknOiAweDJGNEY0RiwgJ2RhcmtzbGF0ZWdyZXknOiAweDJGNEY0RiwgJ2Rhcmt0dXJxdW9pc2UnOiAweDAwQ0VEMSwgJ2Rhcmt2aW9sZXQnOiAweDk0MDBEMyxcblx0J2RlZXBwaW5rJzogMHhGRjE0OTMsICdkZWVwc2t5Ymx1ZSc6IDB4MDBCRkZGLCAnZGltZ3JheSc6IDB4Njk2OTY5LCAnZGltZ3JleSc6IDB4Njk2OTY5LCAnZG9kZ2VyYmx1ZSc6IDB4MUU5MEZGLCAnZmlyZWJyaWNrJzogMHhCMjIyMjIsXG5cdCdmbG9yYWx3aGl0ZSc6IDB4RkZGQUYwLCAnZm9yZXN0Z3JlZW4nOiAweDIyOEIyMiwgJ2Z1Y2hzaWEnOiAweEZGMDBGRiwgJ2dhaW5zYm9ybyc6IDB4RENEQ0RDLCAnZ2hvc3R3aGl0ZSc6IDB4RjhGOEZGLCAnZ29sZCc6IDB4RkZENzAwLFxuXHQnZ29sZGVucm9kJzogMHhEQUE1MjAsICdncmF5JzogMHg4MDgwODAsICdncmVlbic6IDB4MDA4MDAwLCAnZ3JlZW55ZWxsb3cnOiAweEFERkYyRiwgJ2dyZXknOiAweDgwODA4MCwgJ2hvbmV5ZGV3JzogMHhGMEZGRjAsICdob3RwaW5rJzogMHhGRjY5QjQsXG5cdCdpbmRpYW5yZWQnOiAweENENUM1QywgJ2luZGlnbyc6IDB4NEIwMDgyLCAnaXZvcnknOiAweEZGRkZGMCwgJ2toYWtpJzogMHhGMEU2OEMsICdsYXZlbmRlcic6IDB4RTZFNkZBLCAnbGF2ZW5kZXJibHVzaCc6IDB4RkZGMEY1LCAnbGF3bmdyZWVuJzogMHg3Q0ZDMDAsXG5cdCdsZW1vbmNoaWZmb24nOiAweEZGRkFDRCwgJ2xpZ2h0Ymx1ZSc6IDB4QUREOEU2LCAnbGlnaHRjb3JhbCc6IDB4RjA4MDgwLCAnbGlnaHRjeWFuJzogMHhFMEZGRkYsICdsaWdodGdvbGRlbnJvZHllbGxvdyc6IDB4RkFGQUQyLCAnbGlnaHRncmF5JzogMHhEM0QzRDMsXG5cdCdsaWdodGdyZWVuJzogMHg5MEVFOTAsICdsaWdodGdyZXknOiAweEQzRDNEMywgJ2xpZ2h0cGluayc6IDB4RkZCNkMxLCAnbGlnaHRzYWxtb24nOiAweEZGQTA3QSwgJ2xpZ2h0c2VhZ3JlZW4nOiAweDIwQjJBQSwgJ2xpZ2h0c2t5Ymx1ZSc6IDB4ODdDRUZBLFxuXHQnbGlnaHRzbGF0ZWdyYXknOiAweDc3ODg5OSwgJ2xpZ2h0c2xhdGVncmV5JzogMHg3Nzg4OTksICdsaWdodHN0ZWVsYmx1ZSc6IDB4QjBDNERFLCAnbGlnaHR5ZWxsb3cnOiAweEZGRkZFMCwgJ2xpbWUnOiAweDAwRkYwMCwgJ2xpbWVncmVlbic6IDB4MzJDRDMyLFxuXHQnbGluZW4nOiAweEZBRjBFNiwgJ21hZ2VudGEnOiAweEZGMDBGRiwgJ21hcm9vbic6IDB4ODAwMDAwLCAnbWVkaXVtYXF1YW1hcmluZSc6IDB4NjZDREFBLCAnbWVkaXVtYmx1ZSc6IDB4MDAwMENELCAnbWVkaXVtb3JjaGlkJzogMHhCQTU1RDMsXG5cdCdtZWRpdW1wdXJwbGUnOiAweDkzNzBEQiwgJ21lZGl1bXNlYWdyZWVuJzogMHgzQ0IzNzEsICdtZWRpdW1zbGF0ZWJsdWUnOiAweDdCNjhFRSwgJ21lZGl1bXNwcmluZ2dyZWVuJzogMHgwMEZBOUEsICdtZWRpdW10dXJxdW9pc2UnOiAweDQ4RDFDQyxcblx0J21lZGl1bXZpb2xldHJlZCc6IDB4QzcxNTg1LCAnbWlkbmlnaHRibHVlJzogMHgxOTE5NzAsICdtaW50Y3JlYW0nOiAweEY1RkZGQSwgJ21pc3R5cm9zZSc6IDB4RkZFNEUxLCAnbW9jY2FzaW4nOiAweEZGRTRCNSwgJ25hdmFqb3doaXRlJzogMHhGRkRFQUQsXG5cdCduYXZ5JzogMHgwMDAwODAsICdvbGRsYWNlJzogMHhGREY1RTYsICdvbGl2ZSc6IDB4ODA4MDAwLCAnb2xpdmVkcmFiJzogMHg2QjhFMjMsICdvcmFuZ2UnOiAweEZGQTUwMCwgJ29yYW5nZXJlZCc6IDB4RkY0NTAwLCAnb3JjaGlkJzogMHhEQTcwRDYsXG5cdCdwYWxlZ29sZGVucm9kJzogMHhFRUU4QUEsICdwYWxlZ3JlZW4nOiAweDk4RkI5OCwgJ3BhbGV0dXJxdW9pc2UnOiAweEFGRUVFRSwgJ3BhbGV2aW9sZXRyZWQnOiAweERCNzA5MywgJ3BhcGF5YXdoaXAnOiAweEZGRUZENSwgJ3BlYWNocHVmZic6IDB4RkZEQUI5LFxuXHQncGVydSc6IDB4Q0Q4NTNGLCAncGluayc6IDB4RkZDMENCLCAncGx1bSc6IDB4RERBMERELCAncG93ZGVyYmx1ZSc6IDB4QjBFMEU2LCAncHVycGxlJzogMHg4MDAwODAsICdyZWJlY2NhcHVycGxlJzogMHg2NjMzOTksICdyZWQnOiAweEZGMDAwMCwgJ3Jvc3licm93bic6IDB4QkM4RjhGLFxuXHQncm95YWxibHVlJzogMHg0MTY5RTEsICdzYWRkbGVicm93bic6IDB4OEI0NTEzLCAnc2FsbW9uJzogMHhGQTgwNzIsICdzYW5keWJyb3duJzogMHhGNEE0NjAsICdzZWFncmVlbic6IDB4MkU4QjU3LCAnc2Vhc2hlbGwnOiAweEZGRjVFRSxcblx0J3NpZW5uYSc6IDB4QTA1MjJELCAnc2lsdmVyJzogMHhDMEMwQzAsICdza3libHVlJzogMHg4N0NFRUIsICdzbGF0ZWJsdWUnOiAweDZBNUFDRCwgJ3NsYXRlZ3JheSc6IDB4NzA4MDkwLCAnc2xhdGVncmV5JzogMHg3MDgwOTAsICdzbm93JzogMHhGRkZBRkEsXG5cdCdzcHJpbmdncmVlbic6IDB4MDBGRjdGLCAnc3RlZWxibHVlJzogMHg0NjgyQjQsICd0YW4nOiAweEQyQjQ4QywgJ3RlYWwnOiAweDAwODA4MCwgJ3RoaXN0bGUnOiAweEQ4QkZEOCwgJ3RvbWF0byc6IDB4RkY2MzQ3LCAndHVycXVvaXNlJzogMHg0MEUwRDAsXG5cdCd2aW9sZXQnOiAweEVFODJFRSwgJ3doZWF0JzogMHhGNURFQjMsICd3aGl0ZSc6IDB4RkZGRkZGLCAnd2hpdGVzbW9rZSc6IDB4RjVGNUY1LCAneWVsbG93JzogMHhGRkZGMDAsICd5ZWxsb3dncmVlbic6IDB4OUFDRDMyIH07XG5cbmNvbnN0IF9oc2xBID0geyBoOiAwLCBzOiAwLCBsOiAwIH07XG5jb25zdCBfaHNsQiA9IHsgaDogMCwgczogMCwgbDogMCB9O1xuXG5mdW5jdGlvbiBodWUycmdiKCBwLCBxLCB0ICkge1xuXG5cdGlmICggdCA8IDAgKSB0ICs9IDE7XG5cdGlmICggdCA+IDEgKSB0IC09IDE7XG5cdGlmICggdCA8IDEgLyA2ICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogdDtcblx0aWYgKCB0IDwgMSAvIDIgKSByZXR1cm4gcTtcblx0aWYgKCB0IDwgMiAvIDMgKSByZXR1cm4gcCArICggcSAtIHAgKSAqIDYgKiAoIDIgLyAzIC0gdCApO1xuXHRyZXR1cm4gcDtcblxufVxuXG5jbGFzcyBDb2xvciB7XG5cblx0Y29uc3RydWN0b3IoIHIsIGcsIGIgKSB7XG5cblx0XHR0aGlzLmlzQ29sb3IgPSB0cnVlO1xuXG5cdFx0dGhpcy5yID0gMTtcblx0XHR0aGlzLmcgPSAxO1xuXHRcdHRoaXMuYiA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIHIsIGcsIGIgKTtcblxuXHR9XG5cblx0c2V0KCByLCBnLCBiICkge1xuXG5cdFx0aWYgKCBnID09PSB1bmRlZmluZWQgJiYgYiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyByIGlzIFRIUkVFLkNvbG9yLCBoZXggb3Igc3RyaW5nXG5cblx0XHRcdGNvbnN0IHZhbHVlID0gcjtcblxuXHRcdFx0aWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHRcdHRoaXMuY29weSggdmFsdWUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyApIHtcblxuXHRcdFx0XHR0aGlzLnNldEhleCggdmFsdWUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0XHR0aGlzLnNldFN0eWxlKCB2YWx1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnNldFJHQiggciwgZywgYiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy5yID0gc2NhbGFyO1xuXHRcdHRoaXMuZyA9IHNjYWxhcjtcblx0XHR0aGlzLmIgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0SGV4KCBoZXgsIGNvbG9yU3BhY2UgPSBTUkdCQ29sb3JTcGFjZSApIHtcblxuXHRcdGhleCA9IE1hdGguZmxvb3IoIGhleCApO1xuXG5cdFx0dGhpcy5yID0gKCBoZXggPj4gMTYgJiAyNTUgKSAvIDI1NTtcblx0XHR0aGlzLmcgPSAoIGhleCA+PiA4ICYgMjU1ICkgLyAyNTU7XG5cdFx0dGhpcy5iID0gKCBoZXggJiAyNTUgKSAvIDI1NTtcblxuXHRcdENvbG9yTWFuYWdlbWVudC50b1dvcmtpbmdDb2xvclNwYWNlKCB0aGlzLCBjb2xvclNwYWNlICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0UkdCKCByLCBnLCBiLCBjb2xvclNwYWNlID0gQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICkge1xuXG5cdFx0dGhpcy5yID0gcjtcblx0XHR0aGlzLmcgPSBnO1xuXHRcdHRoaXMuYiA9IGI7XG5cblx0XHRDb2xvck1hbmFnZW1lbnQudG9Xb3JraW5nQ29sb3JTcGFjZSggdGhpcywgY29sb3JTcGFjZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEhTTCggaCwgcywgbCwgY29sb3JTcGFjZSA9IENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZSApIHtcblxuXHRcdC8vIGgscyxsIHJhbmdlcyBhcmUgaW4gMC4wIC0gMS4wXG5cdFx0aCA9IGV1Y2xpZGVhbk1vZHVsbyggaCwgMSApO1xuXHRcdHMgPSBjbGFtcCggcywgMCwgMSApO1xuXHRcdGwgPSBjbGFtcCggbCwgMCwgMSApO1xuXG5cdFx0aWYgKCBzID09PSAwICkge1xuXG5cdFx0XHR0aGlzLnIgPSB0aGlzLmcgPSB0aGlzLmIgPSBsO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcCA9IGwgPD0gMC41ID8gbCAqICggMSArIHMgKSA6IGwgKyBzIC0gKCBsICogcyApO1xuXHRcdFx0Y29uc3QgcSA9ICggMiAqIGwgKSAtIHA7XG5cblx0XHRcdHRoaXMuciA9IGh1ZTJyZ2IoIHEsIHAsIGggKyAxIC8gMyApO1xuXHRcdFx0dGhpcy5nID0gaHVlMnJnYiggcSwgcCwgaCApO1xuXHRcdFx0dGhpcy5iID0gaHVlMnJnYiggcSwgcCwgaCAtIDEgLyAzICk7XG5cblx0XHR9XG5cblx0XHRDb2xvck1hbmFnZW1lbnQudG9Xb3JraW5nQ29sb3JTcGFjZSggdGhpcywgY29sb3JTcGFjZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFN0eWxlKCBzdHlsZSwgY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlQWxwaGEoIHN0cmluZyApIHtcblxuXHRcdFx0aWYgKCBzdHJpbmcgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0aWYgKCBwYXJzZUZsb2F0KCBzdHJpbmcgKSA8IDEgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IEFscGhhIGNvbXBvbmVudCBvZiAnICsgc3R5bGUgKyAnIHdpbGwgYmUgaWdub3JlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0bGV0IG07XG5cblx0XHRpZiAoIG0gPSAvXihcXHcrKVxcKChbXlxcKV0qKVxcKS8uZXhlYyggc3R5bGUgKSApIHtcblxuXHRcdFx0Ly8gcmdiIC8gaHNsXG5cblx0XHRcdGxldCBjb2xvcjtcblx0XHRcdGNvbnN0IG5hbWUgPSBtWyAxIF07XG5cdFx0XHRjb25zdCBjb21wb25lbnRzID0gbVsgMiBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ3JnYic6XG5cdFx0XHRcdGNhc2UgJ3JnYmEnOlxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyooPzosXFxzKihcXGQqXFwuP1xcZCspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZ2IoMjU1LDAsMCkgcmdiYSgyNTUsMCwwLDAuNSlcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA0IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0UkdCKFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMjU1LFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMjU1LFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSApIC8gMjU1LFxuXHRcdFx0XHRcdFx0XHRjb2xvclNwYWNlXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQrKVxcJVxccyosXFxzKihcXGQrKVxcJVxccyosXFxzKihcXGQrKVxcJVxccyooPzosXFxzKihcXGQqXFwuP1xcZCspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZ2IoMTAwJSwwJSwwJSkgcmdiYSgxMDAlLDAlLDAlLDAuNSlcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA0IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0UkdCKFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMTAwLFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMTAwLFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSApIC8gMTAwLFxuXHRcdFx0XHRcdFx0XHRjb2xvclNwYWNlXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnaHNsJzpcblx0XHRcdFx0Y2FzZSAnaHNsYSc6XG5cblx0XHRcdFx0XHRpZiAoIGNvbG9yID0gL15cXHMqKFxcZCpcXC4/XFxkKylcXHMqLFxccyooXFxkKlxcLj9cXGQrKVxcJVxccyosXFxzKihcXGQqXFwuP1xcZCspXFwlXFxzKig/OixcXHMqKFxcZCpcXC4/XFxkKylcXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGhzbCgxMjAsNTAlLDUwJSkgaHNsYSgxMjAsNTAlLDUwJSwwLjUpXG5cblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNCBdICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnNldEhTTChcblx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdCggY29sb3JbIDEgXSApIC8gMzYwLFxuXHRcdFx0XHRcdFx0XHRwYXJzZUZsb2F0KCBjb2xvclsgMiBdICkgLyAxMDAsXG5cdFx0XHRcdFx0XHRcdHBhcnNlRmxvYXQoIGNvbG9yWyAzIF0gKSAvIDEwMCxcblx0XHRcdFx0XHRcdFx0Y29sb3JTcGFjZVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciBtb2RlbCAnICsgc3R5bGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbSA9IC9eXFwjKFtBLUZhLWZcXGRdKykkLy5leGVjKCBzdHlsZSApICkge1xuXG5cdFx0XHQvLyBoZXggY29sb3JcblxuXHRcdFx0Y29uc3QgaGV4ID0gbVsgMSBdO1xuXHRcdFx0Y29uc3Qgc2l6ZSA9IGhleC5sZW5ndGg7XG5cblx0XHRcdGlmICggc2l6ZSA9PT0gMyApIHtcblxuXHRcdFx0XHQvLyAjZmYwXG5cdFx0XHRcdHJldHVybiB0aGlzLnNldFJHQihcblx0XHRcdFx0XHRwYXJzZUludCggaGV4LmNoYXJBdCggMCApLCAxNiApIC8gMTUsXG5cdFx0XHRcdFx0cGFyc2VJbnQoIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDE1LFxuXHRcdFx0XHRcdHBhcnNlSW50KCBoZXguY2hhckF0KCAyICksIDE2ICkgLyAxNSxcblx0XHRcdFx0XHRjb2xvclNwYWNlXG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHNpemUgPT09IDYgKSB7XG5cblx0XHRcdFx0Ly8gI2ZmMDAwMFxuXHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRIZXgoIHBhcnNlSW50KCBoZXgsIDE2ICksIGNvbG9yU3BhY2UgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogSW52YWxpZCBoZXggY29sb3IgJyArIHN0eWxlICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHN0eWxlICYmIHN0eWxlLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNldENvbG9yTmFtZSggc3R5bGUsIGNvbG9yU3BhY2UgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRDb2xvck5hbWUoIHN0eWxlLCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7XG5cblx0XHQvLyBjb2xvciBrZXl3b3Jkc1xuXHRcdGNvbnN0IGhleCA9IF9jb2xvcktleXdvcmRzWyBzdHlsZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRpZiAoIGhleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyByZWRcblx0XHRcdHRoaXMuc2V0SGV4KCBoZXgsIGNvbG9yU3BhY2UgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHVua25vd24gY29sb3Jcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbG9yOiBVbmtub3duIGNvbG9yICcgKyBzdHlsZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLnIsIHRoaXMuZywgdGhpcy5iICk7XG5cblx0fVxuXG5cdGNvcHkoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3Iucjtcblx0XHR0aGlzLmcgPSBjb2xvci5nO1xuXHRcdHRoaXMuYiA9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weVNSR0JUb0xpbmVhciggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLnIgKTtcblx0XHR0aGlzLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTtcblx0XHR0aGlzLmIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5TGluZWFyVG9TUkdCKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciA9IExpbmVhclRvU1JHQiggY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IExpbmVhclRvU1JHQiggY29sb3IuZyApO1xuXHRcdHRoaXMuYiA9IExpbmVhclRvU1JHQiggY29sb3IuYiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbnZlcnRTUkdCVG9MaW5lYXIoKSB7XG5cblx0XHR0aGlzLmNvcHlTUkdCVG9MaW5lYXIoIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb252ZXJ0TGluZWFyVG9TUkdCKCkge1xuXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9TUkdCKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0SGV4KCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7XG5cblx0XHRDb2xvck1hbmFnZW1lbnQuZnJvbVdvcmtpbmdDb2xvclNwYWNlKCBfY29sb3IuY29weSggdGhpcyApLCBjb2xvclNwYWNlICk7XG5cblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggY2xhbXAoIF9jb2xvci5yICogMjU1LCAwLCAyNTUgKSApICogNjU1MzYgKyBNYXRoLnJvdW5kKCBjbGFtcCggX2NvbG9yLmcgKiAyNTUsIDAsIDI1NSApICkgKiAyNTYgKyBNYXRoLnJvdW5kKCBjbGFtcCggX2NvbG9yLmIgKiAyNTUsIDAsIDI1NSApICk7XG5cblx0fVxuXG5cdGdldEhleFN0cmluZyggY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xuXG5cdFx0cmV0dXJuICggJzAwMDAwMCcgKyB0aGlzLmdldEhleCggY29sb3JTcGFjZSApLnRvU3RyaW5nKCAxNiApICkuc2xpY2UoIC0gNiApO1xuXG5cdH1cblxuXHRnZXRIU0woIHRhcmdldCwgY29sb3JTcGFjZSA9IENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZSApIHtcblxuXHRcdC8vIGgscyxsIHJhbmdlcyBhcmUgaW4gMC4wIC0gMS4wXG5cblx0XHRDb2xvck1hbmFnZW1lbnQuZnJvbVdvcmtpbmdDb2xvclNwYWNlKCBfY29sb3IuY29weSggdGhpcyApLCBjb2xvclNwYWNlICk7XG5cblx0XHRjb25zdCByID0gX2NvbG9yLnIsIGcgPSBfY29sb3IuZywgYiA9IF9jb2xvci5iO1xuXG5cdFx0Y29uc3QgbWF4ID0gTWF0aC5tYXgoIHIsIGcsIGIgKTtcblx0XHRjb25zdCBtaW4gPSBNYXRoLm1pbiggciwgZywgYiApO1xuXG5cdFx0bGV0IGh1ZSwgc2F0dXJhdGlvbjtcblx0XHRjb25zdCBsaWdodG5lc3MgPSAoIG1pbiArIG1heCApIC8gMi4wO1xuXG5cdFx0aWYgKCBtaW4gPT09IG1heCApIHtcblxuXHRcdFx0aHVlID0gMDtcblx0XHRcdHNhdHVyYXRpb24gPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgZGVsdGEgPSBtYXggLSBtaW47XG5cblx0XHRcdHNhdHVyYXRpb24gPSBsaWdodG5lc3MgPD0gMC41ID8gZGVsdGEgLyAoIG1heCArIG1pbiApIDogZGVsdGEgLyAoIDIgLSBtYXggLSBtaW4gKTtcblxuXHRcdFx0c3dpdGNoICggbWF4ICkge1xuXG5cdFx0XHRcdGNhc2UgcjogaHVlID0gKCBnIC0gYiApIC8gZGVsdGEgKyAoIGcgPCBiID8gNiA6IDAgKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgZzogaHVlID0gKCBiIC0gciApIC8gZGVsdGEgKyAyOyBicmVhaztcblx0XHRcdFx0Y2FzZSBiOiBodWUgPSAoIHIgLSBnICkgLyBkZWx0YSArIDQ7IGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGh1ZSAvPSA2O1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LmggPSBodWU7XG5cdFx0dGFyZ2V0LnMgPSBzYXR1cmF0aW9uO1xuXHRcdHRhcmdldC5sID0gbGlnaHRuZXNzO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0Z2V0UkdCKCB0YXJnZXQsIGNvbG9yU3BhY2UgPSBDb2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2UgKSB7XG5cblx0XHRDb2xvck1hbmFnZW1lbnQuZnJvbVdvcmtpbmdDb2xvclNwYWNlKCBfY29sb3IuY29weSggdGhpcyApLCBjb2xvclNwYWNlICk7XG5cblx0XHR0YXJnZXQuciA9IF9jb2xvci5yO1xuXHRcdHRhcmdldC5nID0gX2NvbG9yLmc7XG5cdFx0dGFyZ2V0LmIgPSBfY29sb3IuYjtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdGdldFN0eWxlKCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7XG5cblx0XHRDb2xvck1hbmFnZW1lbnQuZnJvbVdvcmtpbmdDb2xvclNwYWNlKCBfY29sb3IuY29weSggdGhpcyApLCBjb2xvclNwYWNlICk7XG5cblx0XHRjb25zdCByID0gX2NvbG9yLnIsIGcgPSBfY29sb3IuZywgYiA9IF9jb2xvci5iO1xuXG5cdFx0aWYgKCBjb2xvclNwYWNlICE9PSBTUkdCQ29sb3JTcGFjZSApIHtcblxuXHRcdFx0Ly8gUmVxdWlyZXMgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCA0IChodHRwczovL3d3dy53My5vcmcvVFIvY3NzLWNvbG9yLTQvKS5cblx0XHRcdHJldHVybiBgY29sb3IoJHsgY29sb3JTcGFjZSB9ICR7IHIudG9GaXhlZCggMyApIH0gJHsgZy50b0ZpeGVkKCAzICkgfSAkeyBiLnRvRml4ZWQoIDMgKSB9KWA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYHJnYigkeyBNYXRoLnJvdW5kKCByICogMjU1ICkgfSwkeyBNYXRoLnJvdW5kKCBnICogMjU1ICkgfSwkeyBNYXRoLnJvdW5kKCBiICogMjU1ICkgfSlgO1xuXG5cdH1cblxuXHRvZmZzZXRIU0woIGgsIHMsIGwgKSB7XG5cblx0XHR0aGlzLmdldEhTTCggX2hzbEEgKTtcblxuXHRcdHJldHVybiB0aGlzLnNldEhTTCggX2hzbEEuaCArIGgsIF9oc2xBLnMgKyBzLCBfaHNsQS5sICsgbCApO1xuXG5cdH1cblxuXHRhZGQoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yICs9IGNvbG9yLnI7XG5cdFx0dGhpcy5nICs9IGNvbG9yLmc7XG5cdFx0dGhpcy5iICs9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkQ29sb3JzKCBjb2xvcjEsIGNvbG9yMiApIHtcblxuXHRcdHRoaXMuciA9IGNvbG9yMS5yICsgY29sb3IyLnI7XG5cdFx0dGhpcy5nID0gY29sb3IxLmcgKyBjb2xvcjIuZztcblx0XHR0aGlzLmIgPSBjb2xvcjEuYiArIGNvbG9yMi5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxhciggcyApIHtcblxuXHRcdHRoaXMuciArPSBzO1xuXHRcdHRoaXMuZyArPSBzO1xuXHRcdHRoaXMuYiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YiggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgPSBNYXRoLm1heCggMCwgdGhpcy5yIC0gY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IE1hdGgubWF4KCAwLCB0aGlzLmcgLSBjb2xvci5nICk7XG5cdFx0dGhpcy5iID0gTWF0aC5tYXgoIDAsIHRoaXMuYiAtIGNvbG9yLmIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseSggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgKj0gY29sb3Iucjtcblx0XHR0aGlzLmcgKj0gY29sb3IuZztcblx0XHR0aGlzLmIgKj0gY29sb3IuYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseVNjYWxhciggcyApIHtcblxuXHRcdHRoaXMuciAqPSBzO1xuXHRcdHRoaXMuZyAqPSBzO1xuXHRcdHRoaXMuYiAqPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnAoIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdHRoaXMuciArPSAoIGNvbG9yLnIgLSB0aGlzLnIgKSAqIGFscGhhO1xuXHRcdHRoaXMuZyArPSAoIGNvbG9yLmcgLSB0aGlzLmcgKSAqIGFscGhhO1xuXHRcdHRoaXMuYiArPSAoIGNvbG9yLmIgLSB0aGlzLmIgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnBDb2xvcnMoIGNvbG9yMSwgY29sb3IyLCBhbHBoYSApIHtcblxuXHRcdHRoaXMuciA9IGNvbG9yMS5yICsgKCBjb2xvcjIuciAtIGNvbG9yMS5yICkgKiBhbHBoYTtcblx0XHR0aGlzLmcgPSBjb2xvcjEuZyArICggY29sb3IyLmcgLSBjb2xvcjEuZyApICogYWxwaGE7XG5cdFx0dGhpcy5iID0gY29sb3IxLmIgKyAoIGNvbG9yMi5iIC0gY29sb3IxLmIgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnBIU0woIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdHRoaXMuZ2V0SFNMKCBfaHNsQSApO1xuXHRcdGNvbG9yLmdldEhTTCggX2hzbEIgKTtcblxuXHRcdGNvbnN0IGggPSBsZXJwKCBfaHNsQS5oLCBfaHNsQi5oLCBhbHBoYSApO1xuXHRcdGNvbnN0IHMgPSBsZXJwKCBfaHNsQS5zLCBfaHNsQi5zLCBhbHBoYSApO1xuXHRcdGNvbnN0IGwgPSBsZXJwKCBfaHNsQS5sLCBfaHNsQi5sLCBhbHBoYSApO1xuXG5cdFx0dGhpcy5zZXRIU0woIGgsIHMsIGwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tVmVjdG9yMyggdiApIHtcblxuXHRcdHRoaXMuciA9IHYueDtcblx0XHR0aGlzLmcgPSB2Lnk7XG5cdFx0dGhpcy5iID0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4MyggbSApIHtcblxuXHRcdGNvbnN0IHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmI7XG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnIgPSBlWyAwIF0gKiByICsgZVsgMyBdICogZyArIGVbIDYgXSAqIGI7XG5cdFx0dGhpcy5nID0gZVsgMSBdICogciArIGVbIDQgXSAqIGcgKyBlWyA3IF0gKiBiO1xuXHRcdHRoaXMuYiA9IGVbIDIgXSAqIHIgKyBlWyA1IF0gKiBnICsgZVsgOCBdICogYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIGMgKSB7XG5cblx0XHRyZXR1cm4gKCBjLnIgPT09IHRoaXMuciApICYmICggYy5nID09PSB0aGlzLmcgKSAmJiAoIGMuYiA9PT0gdGhpcy5iICk7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHR0aGlzLnIgPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy5nID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLmIgPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLnI7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuZztcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5iO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4ICkge1xuXG5cdFx0dGhpcy5yID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy5nID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy5iID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0SGV4KCk7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy5yO1xuXHRcdHlpZWxkIHRoaXMuZztcblx0XHR5aWVsZCB0aGlzLmI7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9jb2xvciA9IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCk7XG5cbkNvbG9yLk5BTUVTID0gX2NvbG9yS2V5d29yZHM7XG5cbmV4cG9ydCB7IENvbG9yIH07XG4iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi4vY29yZS9FdmVudERpc3BhdGNoZXIuanMnO1xuaW1wb3J0IHsgRnJvbnRTaWRlLCBOb3JtYWxCbGVuZGluZywgTGVzc0VxdWFsRGVwdGgsIEFkZEVxdWF0aW9uLCBPbmVNaW51c1NyY0FscGhhRmFjdG9yLCBTcmNBbHBoYUZhY3RvciwgQWx3YXlzU3RlbmNpbEZ1bmMsIEtlZXBTdGVuY2lsT3AgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0ICogYXMgTWF0aFV0aWxzIGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcblxubGV0IF9tYXRlcmlhbElkID0gMDtcblxuY2xhc3MgTWF0ZXJpYWwgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNNYXRlcmlhbCA9IHRydWU7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF9tYXRlcmlhbElkICsrIH0gKTtcblxuXHRcdHRoaXMudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcblxuXHRcdHRoaXMubmFtZSA9ICcnO1xuXHRcdHRoaXMudHlwZSA9ICdNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmJsZW5kaW5nID0gTm9ybWFsQmxlbmRpbmc7XG5cdFx0dGhpcy5zaWRlID0gRnJvbnRTaWRlO1xuXHRcdHRoaXMudmVydGV4Q29sb3JzID0gZmFsc2U7XG5cblx0XHR0aGlzLm9wYWNpdHkgPSAxO1xuXHRcdHRoaXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcblx0XHR0aGlzLmFscGhhSGFzaCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5ibGVuZFNyYyA9IFNyY0FscGhhRmFjdG9yO1xuXHRcdHRoaXMuYmxlbmREc3QgPSBPbmVNaW51c1NyY0FscGhhRmFjdG9yO1xuXHRcdHRoaXMuYmxlbmRFcXVhdGlvbiA9IEFkZEVxdWF0aW9uO1xuXHRcdHRoaXMuYmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdFx0dGhpcy5ibGVuZERzdEFscGhhID0gbnVsbDtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XG5cdFx0dGhpcy5ibGVuZENvbG9yID0gbmV3IENvbG9yKCAwLCAwLCAwICk7XG5cdFx0dGhpcy5ibGVuZEFscGhhID0gMDtcblxuXHRcdHRoaXMuZGVwdGhGdW5jID0gTGVzc0VxdWFsRGVwdGg7XG5cdFx0dGhpcy5kZXB0aFRlc3QgPSB0cnVlO1xuXHRcdHRoaXMuZGVwdGhXcml0ZSA9IHRydWU7XG5cblx0XHR0aGlzLnN0ZW5jaWxXcml0ZU1hc2sgPSAweGZmO1xuXHRcdHRoaXMuc3RlbmNpbEZ1bmMgPSBBbHdheXNTdGVuY2lsRnVuYztcblx0XHR0aGlzLnN0ZW5jaWxSZWYgPSAwO1xuXHRcdHRoaXMuc3RlbmNpbEZ1bmNNYXNrID0gMHhmZjtcblx0XHR0aGlzLnN0ZW5jaWxGYWlsID0gS2VlcFN0ZW5jaWxPcDtcblx0XHR0aGlzLnN0ZW5jaWxaRmFpbCA9IEtlZXBTdGVuY2lsT3A7XG5cdFx0dGhpcy5zdGVuY2lsWlBhc3MgPSBLZWVwU3RlbmNpbE9wO1xuXHRcdHRoaXMuc3RlbmNpbFdyaXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gbnVsbDtcblx0XHR0aGlzLmNsaXBJbnRlcnNlY3Rpb24gPSBmYWxzZTtcblx0XHR0aGlzLmNsaXBTaGFkb3dzID0gZmFsc2U7XG5cblx0XHR0aGlzLnNoYWRvd1NpZGUgPSBudWxsO1xuXG5cdFx0dGhpcy5jb2xvcldyaXRlID0gdHJ1ZTtcblxuXHRcdHRoaXMucHJlY2lzaW9uID0gbnVsbDsgLy8gb3ZlcnJpZGUgdGhlIHJlbmRlcmVyJ3MgZGVmYXVsdCBwcmVjaXNpb24gZm9yIHRoaXMgbWF0ZXJpYWxcblxuXHRcdHRoaXMucG9seWdvbk9mZnNldCA9IGZhbHNlO1xuXHRcdHRoaXMucG9seWdvbk9mZnNldEZhY3RvciA9IDA7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgPSAwO1xuXG5cdFx0dGhpcy5kaXRoZXJpbmcgPSBmYWxzZTtcblxuXHRcdHRoaXMuYWxwaGFUb0NvdmVyYWdlID0gZmFsc2U7XG5cdFx0dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPSBmYWxzZTtcblx0XHR0aGlzLmZvcmNlU2luZ2xlUGFzcyA9IGZhbHNlO1xuXG5cdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdHRoaXMudG9uZU1hcHBlZCA9IHRydWU7XG5cblx0XHR0aGlzLnVzZXJEYXRhID0ge307XG5cblx0XHR0aGlzLnZlcnNpb24gPSAwO1xuXG5cdFx0dGhpcy5fYWxwaGFUZXN0ID0gMDtcblxuXHR9XG5cblx0Z2V0IGFscGhhVGVzdCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9hbHBoYVRlc3Q7XG5cblx0fVxuXG5cdHNldCBhbHBoYVRlc3QoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9hbHBoYVRlc3QgPiAwICE9PSB2YWx1ZSA+IDAgKSB7XG5cblx0XHRcdHRoaXMudmVyc2lvbiArKztcblxuXHRcdH1cblxuXHRcdHRoaXMuX2FscGhhVGVzdCA9IHZhbHVlO1xuXG5cdH1cblxuXHRvbkJlZm9yZUNvbXBpbGUoIC8qIHNoYWRlcm9iamVjdCwgcmVuZGVyZXIgKi8gKSB7fVxuXG5cdGN1c3RvbVByb2dyYW1DYWNoZUtleSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm9uQmVmb3JlQ29tcGlsZS50b1N0cmluZygpO1xuXG5cdH1cblxuXHRzZXRWYWx1ZXMoIHZhbHVlcyApIHtcblxuXHRcdGlmICggdmFsdWVzID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gdmFsdWVzICkge1xuXG5cdFx0XHRjb25zdCBuZXdWYWx1ZSA9IHZhbHVlc1sga2V5IF07XG5cblx0XHRcdGlmICggbmV3VmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIGBUSFJFRS5NYXRlcmlhbDogcGFyYW1ldGVyICckeyBrZXkgfScgaGFzIHZhbHVlIG9mIHVuZGVmaW5lZC5gICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXNbIGtleSBdO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggYFRIUkVFLk1hdGVyaWFsOiAnJHsga2V5IH0nIGlzIG5vdCBhIHByb3BlcnR5IG9mIFRIUkVFLiR7IHRoaXMudHlwZSB9LmAgKTtcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdFx0Y3VycmVudFZhbHVlLnNldCggbmV3VmFsdWUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggKCBjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLmlzVmVjdG9yMyApICYmICggbmV3VmFsdWUgJiYgbmV3VmFsdWUuaXNWZWN0b3IzICkgKSB7XG5cblx0XHRcdFx0Y3VycmVudFZhbHVlLmNvcHkoIG5ld1ZhbHVlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpc1sga2V5IF0gPSBuZXdWYWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRtZXRhID0ge1xuXHRcdFx0XHR0ZXh0dXJlczoge30sXG5cdFx0XHRcdGltYWdlczoge31cblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC42LFxuXHRcdFx0XHR0eXBlOiAnTWF0ZXJpYWwnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdNYXRlcmlhbC50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIE1hdGVyaWFsIHNlcmlhbGl6YXRpb25cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICYmIHRoaXMuY29sb3IuaXNDb2xvciApIGRhdGEuY29sb3IgPSB0aGlzLmNvbG9yLmdldEhleCgpO1xuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5yb3VnaG5lc3MgPSB0aGlzLnJvdWdobmVzcztcblx0XHRpZiAoIHRoaXMubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLm1ldGFsbmVzcyA9IHRoaXMubWV0YWxuZXNzO1xuXG5cdFx0aWYgKCB0aGlzLnNoZWVuICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoZWVuID0gdGhpcy5zaGVlbjtcblx0XHRpZiAoIHRoaXMuc2hlZW5Db2xvciAmJiB0aGlzLnNoZWVuQ29sb3IuaXNDb2xvciApIGRhdGEuc2hlZW5Db2xvciA9IHRoaXMuc2hlZW5Db2xvci5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuc2hlZW5Sb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEuc2hlZW5Sb3VnaG5lc3MgPSB0aGlzLnNoZWVuUm91Z2huZXNzO1xuXHRcdGlmICggdGhpcy5lbWlzc2l2ZSAmJiB0aGlzLmVtaXNzaXZlLmlzQ29sb3IgKSBkYXRhLmVtaXNzaXZlID0gdGhpcy5lbWlzc2l2ZS5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSAxICkgZGF0YS5lbWlzc2l2ZUludGVuc2l0eSA9IHRoaXMuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHRpZiAoIHRoaXMuc3BlY3VsYXIgJiYgdGhpcy5zcGVjdWxhci5pc0NvbG9yICkgZGF0YS5zcGVjdWxhciA9IHRoaXMuc3BlY3VsYXIuZ2V0SGV4KCk7XG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFySW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBkYXRhLnNwZWN1bGFySW50ZW5zaXR5ID0gdGhpcy5zcGVjdWxhckludGVuc2l0eTtcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXJDb2xvciAmJiB0aGlzLnNwZWN1bGFyQ29sb3IuaXNDb2xvciApIGRhdGEuc3BlY3VsYXJDb2xvciA9IHRoaXMuc3BlY3VsYXJDb2xvci5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuc2hpbmluZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoaW5pbmVzcyA9IHRoaXMuc2hpbmluZXNzO1xuXHRcdGlmICggdGhpcy5jbGVhcmNvYXQgIT09IHVuZGVmaW5lZCApIGRhdGEuY2xlYXJjb2F0ID0gdGhpcy5jbGVhcmNvYXQ7XG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdFJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5jbGVhcmNvYXRSb3VnaG5lc3MgPSB0aGlzLmNsZWFyY29hdFJvdWdobmVzcztcblxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXRNYXAgJiYgdGhpcy5jbGVhcmNvYXRNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmNsZWFyY29hdE1hcCA9IHRoaXMuY2xlYXJjb2F0TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwICYmIHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPSB0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdE5vcm1hbE1hcCAmJiB0aGlzLmNsZWFyY29hdE5vcm1hbE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuY2xlYXJjb2F0Tm9ybWFsTWFwID0gdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSB0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlLnRvQXJyYXkoKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5kaXNwZXJzaW9uICE9PSB1bmRlZmluZWQgKSBkYXRhLmRpc3BlcnNpb24gPSB0aGlzLmRpc3BlcnNpb247XG5cblx0XHRpZiAoIHRoaXMuaXJpZGVzY2VuY2UgIT09IHVuZGVmaW5lZCApIGRhdGEuaXJpZGVzY2VuY2UgPSB0aGlzLmlyaWRlc2NlbmNlO1xuXHRcdGlmICggdGhpcy5pcmlkZXNjZW5jZUlPUiAhPT0gdW5kZWZpbmVkICkgZGF0YS5pcmlkZXNjZW5jZUlPUiA9IHRoaXMuaXJpZGVzY2VuY2VJT1I7XG5cdFx0aWYgKCB0aGlzLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2UgIT09IHVuZGVmaW5lZCApIGRhdGEuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSA9IHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZTtcblxuXHRcdGlmICggdGhpcy5pcmlkZXNjZW5jZU1hcCAmJiB0aGlzLmlyaWRlc2NlbmNlTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5pcmlkZXNjZW5jZU1hcCA9IHRoaXMuaXJpZGVzY2VuY2VNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCAmJiB0aGlzLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA9IHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSBkYXRhLmFuaXNvdHJvcHkgPSB0aGlzLmFuaXNvdHJvcHk7XG5cdFx0aWYgKCB0aGlzLmFuaXNvdHJvcHlSb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5hbmlzb3Ryb3B5Um90YXRpb24gPSB0aGlzLmFuaXNvdHJvcHlSb3RhdGlvbjtcblxuXHRcdGlmICggdGhpcy5hbmlzb3Ryb3B5TWFwICYmIHRoaXMuYW5pc290cm9weU1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuYW5pc290cm9weU1hcCA9IHRoaXMuYW5pc290cm9weU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hcCAmJiB0aGlzLm1hcC5pc1RleHR1cmUgKSBkYXRhLm1hcCA9IHRoaXMubWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLm1hdGNhcCAmJiB0aGlzLm1hdGNhcC5pc1RleHR1cmUgKSBkYXRhLm1hdGNhcCA9IHRoaXMubWF0Y2FwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLmFscGhhTWFwICYmIHRoaXMuYWxwaGFNYXAuaXNUZXh0dXJlICkgZGF0YS5hbHBoYU1hcCA9IHRoaXMuYWxwaGFNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdGlmICggdGhpcy5saWdodE1hcCAmJiB0aGlzLmxpZ2h0TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5saWdodE1hcCA9IHRoaXMubGlnaHRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEubGlnaHRNYXBJbnRlbnNpdHkgPSB0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmFvTWFwICYmIHRoaXMuYW9NYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmFvTWFwID0gdGhpcy5hb01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5hb01hcEludGVuc2l0eSA9IHRoaXMuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYnVtcE1hcCAmJiB0aGlzLmJ1bXBNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmJ1bXBNYXAgPSB0aGlzLmJ1bXBNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuYnVtcFNjYWxlID0gdGhpcy5idW1wU2NhbGU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsTWFwICYmIHRoaXMubm9ybWFsTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5ub3JtYWxNYXAgPSB0aGlzLm5vcm1hbE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5ub3JtYWxNYXBUeXBlID0gdGhpcy5ub3JtYWxNYXBUeXBlO1xuXHRcdFx0ZGF0YS5ub3JtYWxTY2FsZSA9IHRoaXMubm9ybWFsU2NhbGUudG9BcnJheSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmRpc3BsYWNlbWVudE1hcCAmJiB0aGlzLmRpc3BsYWNlbWVudE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50TWFwID0gdGhpcy5kaXNwbGFjZW1lbnRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50U2NhbGUgPSB0aGlzLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRCaWFzID0gdGhpcy5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzc01hcCAmJiB0aGlzLnJvdWdobmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLnJvdWdobmVzc01hcCA9IHRoaXMucm91Z2huZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLm1ldGFsbmVzc01hcCAmJiB0aGlzLm1ldGFsbmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLm1ldGFsbmVzc01hcCA9IHRoaXMubWV0YWxuZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuZW1pc3NpdmVNYXAgJiYgdGhpcy5lbWlzc2l2ZU1hcC5pc1RleHR1cmUgKSBkYXRhLmVtaXNzaXZlTWFwID0gdGhpcy5lbWlzc2l2ZU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5zcGVjdWxhck1hcCAmJiB0aGlzLnNwZWN1bGFyTWFwLmlzVGV4dHVyZSApIGRhdGEuc3BlY3VsYXJNYXAgPSB0aGlzLnNwZWN1bGFyTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFySW50ZW5zaXR5TWFwICYmIHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAuaXNUZXh0dXJlICkgZGF0YS5zcGVjdWxhckludGVuc2l0eU1hcCA9IHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXJDb2xvck1hcCAmJiB0aGlzLnNwZWN1bGFyQ29sb3JNYXAuaXNUZXh0dXJlICkgZGF0YS5zcGVjdWxhckNvbG9yTWFwID0gdGhpcy5zcGVjdWxhckNvbG9yTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuZW52TWFwICYmIHRoaXMuZW52TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5lbnZNYXAgPSB0aGlzLmVudk1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0XHRpZiAoIHRoaXMuY29tYmluZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5jb21iaW5lID0gdGhpcy5jb21iaW5lO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmVudk1hcFJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBkYXRhLmVudk1hcFJvdGF0aW9uID0gdGhpcy5lbnZNYXBSb3RhdGlvbi50b0FycmF5KCk7XG5cdFx0aWYgKCB0aGlzLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgZGF0YS5lbnZNYXBJbnRlbnNpdHkgPSB0aGlzLmVudk1hcEludGVuc2l0eTtcblx0XHRpZiAoIHRoaXMucmVmbGVjdGl2aXR5ICE9PSB1bmRlZmluZWQgKSBkYXRhLnJlZmxlY3Rpdml0eSA9IHRoaXMucmVmbGVjdGl2aXR5O1xuXHRcdGlmICggdGhpcy5yZWZyYWN0aW9uUmF0aW8gIT09IHVuZGVmaW5lZCApIGRhdGEucmVmcmFjdGlvblJhdGlvID0gdGhpcy5yZWZyYWN0aW9uUmF0aW87XG5cblx0XHRpZiAoIHRoaXMuZ3JhZGllbnRNYXAgJiYgdGhpcy5ncmFkaWVudE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuZ3JhZGllbnRNYXAgPSB0aGlzLmdyYWRpZW50TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMudHJhbnNtaXNzaW9uICE9PSB1bmRlZmluZWQgKSBkYXRhLnRyYW5zbWlzc2lvbiA9IHRoaXMudHJhbnNtaXNzaW9uO1xuXHRcdGlmICggdGhpcy50cmFuc21pc3Npb25NYXAgJiYgdGhpcy50cmFuc21pc3Npb25NYXAuaXNUZXh0dXJlICkgZGF0YS50cmFuc21pc3Npb25NYXAgPSB0aGlzLnRyYW5zbWlzc2lvbk1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy50aGlja25lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEudGhpY2tuZXNzID0gdGhpcy50aGlja25lc3M7XG5cdFx0aWYgKCB0aGlzLnRoaWNrbmVzc01hcCAmJiB0aGlzLnRoaWNrbmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLnRoaWNrbmVzc01hcCA9IHRoaXMudGhpY2tuZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLmF0dGVudWF0aW9uRGlzdGFuY2UgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmF0dGVudWF0aW9uRGlzdGFuY2UgIT09IEluZmluaXR5ICkgZGF0YS5hdHRlbnVhdGlvbkRpc3RhbmNlID0gdGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlO1xuXHRcdGlmICggdGhpcy5hdHRlbnVhdGlvbkNvbG9yICE9PSB1bmRlZmluZWQgKSBkYXRhLmF0dGVudWF0aW9uQ29sb3IgPSB0aGlzLmF0dGVudWF0aW9uQ29sb3IuZ2V0SGV4KCk7XG5cblx0XHRpZiAoIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaXplID0gdGhpcy5zaXplO1xuXHRcdGlmICggdGhpcy5zaGFkb3dTaWRlICE9PSBudWxsICkgZGF0YS5zaGFkb3dTaWRlID0gdGhpcy5zaGFkb3dTaWRlO1xuXHRcdGlmICggdGhpcy5zaXplQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIGRhdGEuc2l6ZUF0dGVudWF0aW9uID0gdGhpcy5zaXplQXR0ZW51YXRpb247XG5cblx0XHRpZiAoIHRoaXMuYmxlbmRpbmcgIT09IE5vcm1hbEJsZW5kaW5nICkgZGF0YS5ibGVuZGluZyA9IHRoaXMuYmxlbmRpbmc7XG5cdFx0aWYgKCB0aGlzLnNpZGUgIT09IEZyb250U2lkZSApIGRhdGEuc2lkZSA9IHRoaXMuc2lkZTtcblx0XHRpZiAoIHRoaXMudmVydGV4Q29sb3JzID09PSB0cnVlICkgZGF0YS52ZXJ0ZXhDb2xvcnMgPSB0cnVlO1xuXG5cdFx0aWYgKCB0aGlzLm9wYWNpdHkgPCAxICkgZGF0YS5vcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuXHRcdGlmICggdGhpcy50cmFuc3BhcmVudCA9PT0gdHJ1ZSApIGRhdGEudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0aWYgKCB0aGlzLmJsZW5kU3JjICE9PSBTcmNBbHBoYUZhY3RvciApIGRhdGEuYmxlbmRTcmMgPSB0aGlzLmJsZW5kU3JjO1xuXHRcdGlmICggdGhpcy5ibGVuZERzdCAhPT0gT25lTWludXNTcmNBbHBoYUZhY3RvciApIGRhdGEuYmxlbmREc3QgPSB0aGlzLmJsZW5kRHN0O1xuXHRcdGlmICggdGhpcy5ibGVuZEVxdWF0aW9uICE9PSBBZGRFcXVhdGlvbiApIGRhdGEuYmxlbmRFcXVhdGlvbiA9IHRoaXMuYmxlbmRFcXVhdGlvbjtcblx0XHRpZiAoIHRoaXMuYmxlbmRTcmNBbHBoYSAhPT0gbnVsbCApIGRhdGEuYmxlbmRTcmNBbHBoYSA9IHRoaXMuYmxlbmRTcmNBbHBoYTtcblx0XHRpZiAoIHRoaXMuYmxlbmREc3RBbHBoYSAhPT0gbnVsbCApIGRhdGEuYmxlbmREc3RBbHBoYSA9IHRoaXMuYmxlbmREc3RBbHBoYTtcblx0XHRpZiAoIHRoaXMuYmxlbmRFcXVhdGlvbkFscGhhICE9PSBudWxsICkgZGF0YS5ibGVuZEVxdWF0aW9uQWxwaGEgPSB0aGlzLmJsZW5kRXF1YXRpb25BbHBoYTtcblx0XHRpZiAoIHRoaXMuYmxlbmRDb2xvciAmJiB0aGlzLmJsZW5kQ29sb3IuaXNDb2xvciApIGRhdGEuYmxlbmRDb2xvciA9IHRoaXMuYmxlbmRDb2xvci5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuYmxlbmRBbHBoYSAhPT0gMCApIGRhdGEuYmxlbmRBbHBoYSA9IHRoaXMuYmxlbmRBbHBoYTtcblxuXHRcdGlmICggdGhpcy5kZXB0aEZ1bmMgIT09IExlc3NFcXVhbERlcHRoICkgZGF0YS5kZXB0aEZ1bmMgPSB0aGlzLmRlcHRoRnVuYztcblx0XHRpZiAoIHRoaXMuZGVwdGhUZXN0ID09PSBmYWxzZSApIGRhdGEuZGVwdGhUZXN0ID0gdGhpcy5kZXB0aFRlc3Q7XG5cdFx0aWYgKCB0aGlzLmRlcHRoV3JpdGUgPT09IGZhbHNlICkgZGF0YS5kZXB0aFdyaXRlID0gdGhpcy5kZXB0aFdyaXRlO1xuXHRcdGlmICggdGhpcy5jb2xvcldyaXRlID09PSBmYWxzZSApIGRhdGEuY29sb3JXcml0ZSA9IHRoaXMuY29sb3JXcml0ZTtcblxuXHRcdGlmICggdGhpcy5zdGVuY2lsV3JpdGVNYXNrICE9PSAweGZmICkgZGF0YS5zdGVuY2lsV3JpdGVNYXNrID0gdGhpcy5zdGVuY2lsV3JpdGVNYXNrO1xuXHRcdGlmICggdGhpcy5zdGVuY2lsRnVuYyAhPT0gQWx3YXlzU3RlbmNpbEZ1bmMgKSBkYXRhLnN0ZW5jaWxGdW5jID0gdGhpcy5zdGVuY2lsRnVuYztcblx0XHRpZiAoIHRoaXMuc3RlbmNpbFJlZiAhPT0gMCApIGRhdGEuc3RlbmNpbFJlZiA9IHRoaXMuc3RlbmNpbFJlZjtcblx0XHRpZiAoIHRoaXMuc3RlbmNpbEZ1bmNNYXNrICE9PSAweGZmICkgZGF0YS5zdGVuY2lsRnVuY01hc2sgPSB0aGlzLnN0ZW5jaWxGdW5jTWFzaztcblx0XHRpZiAoIHRoaXMuc3RlbmNpbEZhaWwgIT09IEtlZXBTdGVuY2lsT3AgKSBkYXRhLnN0ZW5jaWxGYWlsID0gdGhpcy5zdGVuY2lsRmFpbDtcblx0XHRpZiAoIHRoaXMuc3RlbmNpbFpGYWlsICE9PSBLZWVwU3RlbmNpbE9wICkgZGF0YS5zdGVuY2lsWkZhaWwgPSB0aGlzLnN0ZW5jaWxaRmFpbDtcblx0XHRpZiAoIHRoaXMuc3RlbmNpbFpQYXNzICE9PSBLZWVwU3RlbmNpbE9wICkgZGF0YS5zdGVuY2lsWlBhc3MgPSB0aGlzLnN0ZW5jaWxaUGFzcztcblx0XHRpZiAoIHRoaXMuc3RlbmNpbFdyaXRlID09PSB0cnVlICkgZGF0YS5zdGVuY2lsV3JpdGUgPSB0aGlzLnN0ZW5jaWxXcml0ZTtcblxuXHRcdC8vIHJvdGF0aW9uIChTcHJpdGVNYXRlcmlhbClcblx0XHRpZiAoIHRoaXMucm90YXRpb24gIT09IHVuZGVmaW5lZCAmJiB0aGlzLnJvdGF0aW9uICE9PSAwICkgZGF0YS5yb3RhdGlvbiA9IHRoaXMucm90YXRpb247XG5cblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldCA9PT0gdHJ1ZSApIGRhdGEucG9seWdvbk9mZnNldCA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgIT09IDAgKSBkYXRhLnBvbHlnb25PZmZzZXRGYWN0b3IgPSB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gMCApIGRhdGEucG9seWdvbk9mZnNldFVuaXRzID0gdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHRpZiAoIHRoaXMubGluZXdpZHRoICE9PSB1bmRlZmluZWQgJiYgdGhpcy5saW5ld2lkdGggIT09IDEgKSBkYXRhLmxpbmV3aWR0aCA9IHRoaXMubGluZXdpZHRoO1xuXHRcdGlmICggdGhpcy5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5kYXNoU2l6ZSA9IHRoaXMuZGFzaFNpemU7XG5cdFx0aWYgKCB0aGlzLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZ2FwU2l6ZSA9IHRoaXMuZ2FwU2l6ZTtcblx0XHRpZiAoIHRoaXMuc2NhbGUgIT09IHVuZGVmaW5lZCApIGRhdGEuc2NhbGUgPSB0aGlzLnNjYWxlO1xuXG5cdFx0aWYgKCB0aGlzLmRpdGhlcmluZyA9PT0gdHJ1ZSApIGRhdGEuZGl0aGVyaW5nID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5hbHBoYVRlc3QgPiAwICkgZGF0YS5hbHBoYVRlc3QgPSB0aGlzLmFscGhhVGVzdDtcblx0XHRpZiAoIHRoaXMuYWxwaGFIYXNoID09PSB0cnVlICkgZGF0YS5hbHBoYUhhc2ggPSB0cnVlO1xuXHRcdGlmICggdGhpcy5hbHBoYVRvQ292ZXJhZ2UgPT09IHRydWUgKSBkYXRhLmFscGhhVG9Db3ZlcmFnZSA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9PT0gdHJ1ZSApIGRhdGEucHJlbXVsdGlwbGllZEFscGhhID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMuZm9yY2VTaW5nbGVQYXNzID09PSB0cnVlICkgZGF0YS5mb3JjZVNpbmdsZVBhc3MgPSB0cnVlO1xuXG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZSA9PT0gdHJ1ZSApIGRhdGEud2lyZWZyYW1lID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID4gMSApIGRhdGEud2lyZWZyYW1lTGluZXdpZHRoID0gdGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZUxpbmVjYXAgIT09ICdyb3VuZCcgKSBkYXRhLndpcmVmcmFtZUxpbmVjYXAgPSB0aGlzLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZUxpbmVqb2luICE9PSAncm91bmQnICkgZGF0YS53aXJlZnJhbWVMaW5lam9pbiA9IHRoaXMud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHRpZiAoIHRoaXMuZmxhdFNoYWRpbmcgPT09IHRydWUgKSBkYXRhLmZsYXRTaGFkaW5nID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIGRhdGEudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0aWYgKCB0aGlzLnRvbmVNYXBwZWQgPT09IGZhbHNlICkgZGF0YS50b25lTWFwcGVkID0gZmFsc2U7XG5cblx0XHRpZiAoIHRoaXMuZm9nID09PSBmYWxzZSApIGRhdGEuZm9nID0gZmFsc2U7XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLnVzZXJEYXRhICkubGVuZ3RoID4gMCApIGRhdGEudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xuXG5cdFx0Ly8gVE9ETzogQ29waWVkIGZyb20gT2JqZWN0M0QudG9KU09OXG5cblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcblxuXHRcdFx0Y29uc3QgdmFsdWVzID0gW107XG5cblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0gY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRkZWxldGUgZGF0YS5tZXRhZGF0YTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWVzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS50ZXh0dXJlcyApO1xuXHRcdFx0Y29uc3QgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5pbWFnZXMgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlcy5sZW5ndGggPiAwICkgZGF0YS50ZXh0dXJlcyA9IHRleHR1cmVzO1xuXHRcdFx0aWYgKCBpbWFnZXMubGVuZ3RoID4gMCApIGRhdGEuaW1hZ2VzID0gaW1hZ2VzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdHRoaXMuYmxlbmRpbmcgPSBzb3VyY2UuYmxlbmRpbmc7XG5cdFx0dGhpcy5zaWRlID0gc291cmNlLnNpZGU7XG5cdFx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBzb3VyY2UudmVydGV4Q29sb3JzO1xuXG5cdFx0dGhpcy5vcGFjaXR5ID0gc291cmNlLm9wYWNpdHk7XG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IHNvdXJjZS50cmFuc3BhcmVudDtcblxuXHRcdHRoaXMuYmxlbmRTcmMgPSBzb3VyY2UuYmxlbmRTcmM7XG5cdFx0dGhpcy5ibGVuZERzdCA9IHNvdXJjZS5ibGVuZERzdDtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb24gPSBzb3VyY2UuYmxlbmRFcXVhdGlvbjtcblx0XHR0aGlzLmJsZW5kU3JjQWxwaGEgPSBzb3VyY2UuYmxlbmRTcmNBbHBoYTtcblx0XHR0aGlzLmJsZW5kRHN0QWxwaGEgPSBzb3VyY2UuYmxlbmREc3RBbHBoYTtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSA9IHNvdXJjZS5ibGVuZEVxdWF0aW9uQWxwaGE7XG5cdFx0dGhpcy5ibGVuZENvbG9yLmNvcHkoIHNvdXJjZS5ibGVuZENvbG9yICk7XG5cdFx0dGhpcy5ibGVuZEFscGhhID0gc291cmNlLmJsZW5kQWxwaGE7XG5cblx0XHR0aGlzLmRlcHRoRnVuYyA9IHNvdXJjZS5kZXB0aEZ1bmM7XG5cdFx0dGhpcy5kZXB0aFRlc3QgPSBzb3VyY2UuZGVwdGhUZXN0O1xuXHRcdHRoaXMuZGVwdGhXcml0ZSA9IHNvdXJjZS5kZXB0aFdyaXRlO1xuXG5cdFx0dGhpcy5zdGVuY2lsV3JpdGVNYXNrID0gc291cmNlLnN0ZW5jaWxXcml0ZU1hc2s7XG5cdFx0dGhpcy5zdGVuY2lsRnVuYyA9IHNvdXJjZS5zdGVuY2lsRnVuYztcblx0XHR0aGlzLnN0ZW5jaWxSZWYgPSBzb3VyY2Uuc3RlbmNpbFJlZjtcblx0XHR0aGlzLnN0ZW5jaWxGdW5jTWFzayA9IHNvdXJjZS5zdGVuY2lsRnVuY01hc2s7XG5cdFx0dGhpcy5zdGVuY2lsRmFpbCA9IHNvdXJjZS5zdGVuY2lsRmFpbDtcblx0XHR0aGlzLnN0ZW5jaWxaRmFpbCA9IHNvdXJjZS5zdGVuY2lsWkZhaWw7XG5cdFx0dGhpcy5zdGVuY2lsWlBhc3MgPSBzb3VyY2Uuc3RlbmNpbFpQYXNzO1xuXHRcdHRoaXMuc3RlbmNpbFdyaXRlID0gc291cmNlLnN0ZW5jaWxXcml0ZTtcblxuXHRcdGNvbnN0IHNyY1BsYW5lcyA9IHNvdXJjZS5jbGlwcGluZ1BsYW5lcztcblx0XHRsZXQgZHN0UGxhbmVzID0gbnVsbDtcblxuXHRcdGlmICggc3JjUGxhbmVzICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBuID0gc3JjUGxhbmVzLmxlbmd0aDtcblx0XHRcdGRzdFBsYW5lcyA9IG5ldyBBcnJheSggbiApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0ZHN0UGxhbmVzWyBpIF0gPSBzcmNQbGFuZXNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gZHN0UGxhbmVzO1xuXHRcdHRoaXMuY2xpcEludGVyc2VjdGlvbiA9IHNvdXJjZS5jbGlwSW50ZXJzZWN0aW9uO1xuXHRcdHRoaXMuY2xpcFNoYWRvd3MgPSBzb3VyY2UuY2xpcFNoYWRvd3M7XG5cblx0XHR0aGlzLnNoYWRvd1NpZGUgPSBzb3VyY2Uuc2hhZG93U2lkZTtcblxuXHRcdHRoaXMuY29sb3JXcml0ZSA9IHNvdXJjZS5jb2xvcldyaXRlO1xuXG5cdFx0dGhpcy5wcmVjaXNpb24gPSBzb3VyY2UucHJlY2lzaW9uO1xuXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0ID0gc291cmNlLnBvbHlnb25PZmZzZXQ7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gc291cmNlLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgPSBzb3VyY2UucG9seWdvbk9mZnNldFVuaXRzO1xuXG5cdFx0dGhpcy5kaXRoZXJpbmcgPSBzb3VyY2UuZGl0aGVyaW5nO1xuXG5cdFx0dGhpcy5hbHBoYVRlc3QgPSBzb3VyY2UuYWxwaGFUZXN0O1xuXHRcdHRoaXMuYWxwaGFIYXNoID0gc291cmNlLmFscGhhSGFzaDtcblx0XHR0aGlzLmFscGhhVG9Db3ZlcmFnZSA9IHNvdXJjZS5hbHBoYVRvQ292ZXJhZ2U7XG5cdFx0dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPSBzb3VyY2UucHJlbXVsdGlwbGllZEFscGhhO1xuXHRcdHRoaXMuZm9yY2VTaW5nbGVQYXNzID0gc291cmNlLmZvcmNlU2luZ2xlUGFzcztcblxuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXG5cdFx0dGhpcy50b25lTWFwcGVkID0gc291cmNlLnRvbmVNYXBwZWQ7XG5cblx0XHR0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIHNvdXJjZS51c2VyRGF0YSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cblx0b25CdWlsZCggLyogc2hhZGVyb2JqZWN0LCByZW5kZXJlciAqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ01hdGVyaWFsOiBvbkJ1aWxkKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7IC8vIEBkZXByZWNhdGVkLCByMTY2XG5cblx0fVxuXG5cdG9uQmVmb3JlUmVuZGVyKCAvKiByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG9iamVjdCwgZ3JvdXAgKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdNYXRlcmlhbDogb25CZWZvcmVSZW5kZXIoKSBoYXMgYmVlbiByZW1vdmVkLicgKTsgLy8gQGRlcHJlY2F0ZWQsIHIxNjZcblxuXHR9XG5cblxufVxuXG5leHBvcnQgeyBNYXRlcmlhbCB9O1xuIiwiaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsLmpzJztcbmltcG9ydCB7IE11bHRpcGx5T3BlcmF0aW9uIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uL21hdGgvRXVsZXIuanMnO1xuXG5jbGFzcyBNZXNoQmFzaWNNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzTWVzaEJhc2ljTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hCYXNpY01hdGVyaWFsJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGVtaXNzaXZlXG5cblx0XHR0aGlzLm1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5hb01hcCA9IG51bGw7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdFx0dGhpcy5lbnZNYXBSb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuXHRcdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xuXHRcdHRoaXMucmVmbGVjdGl2aXR5ID0gMTtcblx0XHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XG5cdFx0dGhpcy5lbnZNYXBSb3RhdGlvbi5jb3B5KCBzb3VyY2UuZW52TWFwUm90YXRpb24gKTtcblx0XHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0dGhpcy5mb2cgPSBzb3VyY2UuZm9nO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IE1lc2hCYXNpY01hdGVyaWFsIH07XG4iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcblxuLy8gRmFzdCBIYWxmIEZsb2F0IENvbnZlcnNpb25zLCBodHRwOi8vd3d3LmZveC10b29sa2l0Lm9yZy9mdHAvZmFzdGhhbGZmbG9hdGNvbnZlcnNpb24ucGRmXG5cbmNvbnN0IF90YWJsZXMgPSAvKkBfX1BVUkVfXyovIF9nZW5lcmF0ZVRhYmxlcygpO1xuXG5mdW5jdGlvbiBfZ2VuZXJhdGVUYWJsZXMoKSB7XG5cblx0Ly8gZmxvYXQzMiB0byBmbG9hdDE2IGhlbHBlcnNcblxuXHRjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoIDQgKTtcblx0Y29uc3QgZmxvYXRWaWV3ID0gbmV3IEZsb2F0MzJBcnJheSggYnVmZmVyICk7XG5cdGNvbnN0IHVpbnQzMlZpZXcgPSBuZXcgVWludDMyQXJyYXkoIGJ1ZmZlciApO1xuXG5cdGNvbnN0IGJhc2VUYWJsZSA9IG5ldyBVaW50MzJBcnJheSggNTEyICk7XG5cdGNvbnN0IHNoaWZ0VGFibGUgPSBuZXcgVWludDMyQXJyYXkoIDUxMiApO1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IDI1NjsgKysgaSApIHtcblxuXHRcdGNvbnN0IGUgPSBpIC0gMTI3O1xuXG5cdFx0Ly8gdmVyeSBzbWFsbCBudW1iZXIgKDAsIC0wKVxuXG5cdFx0aWYgKCBlIDwgLSAyNyApIHtcblxuXHRcdFx0YmFzZVRhYmxlWyBpIF0gPSAweDAwMDA7XG5cdFx0XHRiYXNlVGFibGVbIGkgfCAweDEwMCBdID0gMHg4MDAwO1xuXHRcdFx0c2hpZnRUYWJsZVsgaSBdID0gMjQ7XG5cdFx0XHRzaGlmdFRhYmxlWyBpIHwgMHgxMDAgXSA9IDI0O1xuXG5cdFx0XHQvLyBzbWFsbCBudW1iZXIgKGRlbm9ybSlcblxuXHRcdH0gZWxzZSBpZiAoIGUgPCAtIDE0ICkge1xuXG5cdFx0XHRiYXNlVGFibGVbIGkgXSA9IDB4MDQwMCA+PiAoIC0gZSAtIDE0ICk7XG5cdFx0XHRiYXNlVGFibGVbIGkgfCAweDEwMCBdID0gKCAweDA0MDAgPj4gKCAtIGUgLSAxNCApICkgfCAweDgwMDA7XG5cdFx0XHRzaGlmdFRhYmxlWyBpIF0gPSAtIGUgLSAxO1xuXHRcdFx0c2hpZnRUYWJsZVsgaSB8IDB4MTAwIF0gPSAtIGUgLSAxO1xuXG5cdFx0XHQvLyBub3JtYWwgbnVtYmVyXG5cblx0XHR9IGVsc2UgaWYgKCBlIDw9IDE1ICkge1xuXG5cdFx0XHRiYXNlVGFibGVbIGkgXSA9ICggZSArIDE1ICkgPDwgMTA7XG5cdFx0XHRiYXNlVGFibGVbIGkgfCAweDEwMCBdID0gKCAoIGUgKyAxNSApIDw8IDEwICkgfCAweDgwMDA7XG5cdFx0XHRzaGlmdFRhYmxlWyBpIF0gPSAxMztcblx0XHRcdHNoaWZ0VGFibGVbIGkgfCAweDEwMCBdID0gMTM7XG5cblx0XHRcdC8vIGxhcmdlIG51bWJlciAoSW5maW5pdHksIC1JbmZpbml0eSlcblxuXHRcdH0gZWxzZSBpZiAoIGUgPCAxMjggKSB7XG5cblx0XHRcdGJhc2VUYWJsZVsgaSBdID0gMHg3YzAwO1xuXHRcdFx0YmFzZVRhYmxlWyBpIHwgMHgxMDAgXSA9IDB4ZmMwMDtcblx0XHRcdHNoaWZ0VGFibGVbIGkgXSA9IDI0O1xuXHRcdFx0c2hpZnRUYWJsZVsgaSB8IDB4MTAwIF0gPSAyNDtcblxuXHRcdFx0Ly8gc3RheSAoTmFOLCBJbmZpbml0eSwgLUluZmluaXR5KVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0YmFzZVRhYmxlWyBpIF0gPSAweDdjMDA7XG5cdFx0XHRiYXNlVGFibGVbIGkgfCAweDEwMCBdID0gMHhmYzAwO1xuXHRcdFx0c2hpZnRUYWJsZVsgaSBdID0gMTM7XG5cdFx0XHRzaGlmdFRhYmxlWyBpIHwgMHgxMDAgXSA9IDEzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBmbG9hdDE2IHRvIGZsb2F0MzIgaGVscGVyc1xuXG5cdGNvbnN0IG1hbnRpc3NhVGFibGUgPSBuZXcgVWludDMyQXJyYXkoIDIwNDggKTtcblx0Y29uc3QgZXhwb25lbnRUYWJsZSA9IG5ldyBVaW50MzJBcnJheSggNjQgKTtcblx0Y29uc3Qgb2Zmc2V0VGFibGUgPSBuZXcgVWludDMyQXJyYXkoIDY0ICk7XG5cblx0Zm9yICggbGV0IGkgPSAxOyBpIDwgMTAyNDsgKysgaSApIHtcblxuXHRcdGxldCBtID0gaSA8PCAxMzsgLy8gemVybyBwYWQgbWFudGlzc2EgYml0c1xuXHRcdGxldCBlID0gMDsgLy8gemVybyBleHBvbmVudFxuXG5cdFx0Ly8gbm9ybWFsaXplZFxuXHRcdHdoaWxlICggKCBtICYgMHgwMDgwMDAwMCApID09PSAwICkge1xuXG5cdFx0XHRtIDw8PSAxO1xuXHRcdFx0ZSAtPSAweDAwODAwMDAwOyAvLyBkZWNyZW1lbnQgZXhwb25lbnRcblxuXHRcdH1cblxuXHRcdG0gJj0gfiAweDAwODAwMDAwOyAvLyBjbGVhciBsZWFkaW5nIDEgYml0XG5cdFx0ZSArPSAweDM4ODAwMDAwOyAvLyBhZGp1c3QgYmlhc1xuXG5cdFx0bWFudGlzc2FUYWJsZVsgaSBdID0gbSB8IGU7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMTAyNDsgaSA8IDIwNDg7ICsrIGkgKSB7XG5cblx0XHRtYW50aXNzYVRhYmxlWyBpIF0gPSAweDM4MDAwMDAwICsgKCAoIGkgLSAxMDI0ICkgPDwgMTMgKTtcblxuXHR9XG5cblx0Zm9yICggbGV0IGkgPSAxOyBpIDwgMzE7ICsrIGkgKSB7XG5cblx0XHRleHBvbmVudFRhYmxlWyBpIF0gPSBpIDw8IDIzO1xuXG5cdH1cblxuXHRleHBvbmVudFRhYmxlWyAzMSBdID0gMHg0NzgwMDAwMDtcblx0ZXhwb25lbnRUYWJsZVsgMzIgXSA9IDB4ODAwMDAwMDA7XG5cblx0Zm9yICggbGV0IGkgPSAzMzsgaSA8IDYzOyArKyBpICkge1xuXG5cdFx0ZXhwb25lbnRUYWJsZVsgaSBdID0gMHg4MDAwMDAwMCArICggKCBpIC0gMzIgKSA8PCAyMyApO1xuXG5cdH1cblxuXHRleHBvbmVudFRhYmxlWyA2MyBdID0gMHhjNzgwMDAwMDtcblxuXHRmb3IgKCBsZXQgaSA9IDE7IGkgPCA2NDsgKysgaSApIHtcblxuXHRcdGlmICggaSAhPT0gMzIgKSB7XG5cblx0XHRcdG9mZnNldFRhYmxlWyBpIF0gPSAxMDI0O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGZsb2F0VmlldzogZmxvYXRWaWV3LFxuXHRcdHVpbnQzMlZpZXc6IHVpbnQzMlZpZXcsXG5cdFx0YmFzZVRhYmxlOiBiYXNlVGFibGUsXG5cdFx0c2hpZnRUYWJsZTogc2hpZnRUYWJsZSxcblx0XHRtYW50aXNzYVRhYmxlOiBtYW50aXNzYVRhYmxlLFxuXHRcdGV4cG9uZW50VGFibGU6IGV4cG9uZW50VGFibGUsXG5cdFx0b2Zmc2V0VGFibGU6IG9mZnNldFRhYmxlXG5cdH07XG5cbn1cblxuLy8gZmxvYXQzMiB0byBmbG9hdDE2XG5cbmZ1bmN0aW9uIHRvSGFsZkZsb2F0KCB2YWwgKSB7XG5cblx0aWYgKCBNYXRoLmFicyggdmFsICkgPiA2NTUwNCApIGNvbnNvbGUud2FybiggJ1RIUkVFLkRhdGFVdGlscy50b0hhbGZGbG9hdCgpOiBWYWx1ZSBvdXQgb2YgcmFuZ2UuJyApO1xuXG5cdHZhbCA9IGNsYW1wKCB2YWwsIC0gNjU1MDQsIDY1NTA0ICk7XG5cblx0X3RhYmxlcy5mbG9hdFZpZXdbIDAgXSA9IHZhbDtcblx0Y29uc3QgZiA9IF90YWJsZXMudWludDMyVmlld1sgMCBdO1xuXHRjb25zdCBlID0gKCBmID4+IDIzICkgJiAweDFmZjtcblx0cmV0dXJuIF90YWJsZXMuYmFzZVRhYmxlWyBlIF0gKyAoICggZiAmIDB4MDA3ZmZmZmYgKSA+PiBfdGFibGVzLnNoaWZ0VGFibGVbIGUgXSApO1xuXG59XG5cbi8vIGZsb2F0MTYgdG8gZmxvYXQzMlxuXG5mdW5jdGlvbiBmcm9tSGFsZkZsb2F0KCB2YWwgKSB7XG5cblx0Y29uc3QgbSA9IHZhbCA+PiAxMDtcblx0X3RhYmxlcy51aW50MzJWaWV3WyAwIF0gPSBfdGFibGVzLm1hbnRpc3NhVGFibGVbIF90YWJsZXMub2Zmc2V0VGFibGVbIG0gXSArICggdmFsICYgMHgzZmYgKSBdICsgX3RhYmxlcy5leHBvbmVudFRhYmxlWyBtIF07XG5cdHJldHVybiBfdGFibGVzLmZsb2F0Vmlld1sgMCBdO1xuXG59XG5cbmNvbnN0IERhdGFVdGlscyA9IHtcblx0dG9IYWxmRmxvYXQ6IHRvSGFsZkZsb2F0LFxuXHRmcm9tSGFsZkZsb2F0OiBmcm9tSGFsZkZsb2F0LFxufTtcblxuZXhwb3J0IHtcblx0dG9IYWxmRmxvYXQsXG5cdGZyb21IYWxmRmxvYXQsXG5cdERhdGFVdGlsc1xufTtcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBkZW5vcm1hbGl6ZSwgbm9ybWFsaXplIH0gZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgU3RhdGljRHJhd1VzYWdlLCBGbG9hdFR5cGUgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgZnJvbUhhbGZGbG9hdCwgdG9IYWxmRmxvYXQgfSBmcm9tICcuLi9leHRyYXMvRGF0YVV0aWxzLmpzJztcbmltcG9ydCB7IHdhcm5PbmNlIH0gZnJvbSAnLi4vdXRpbHMuanMnO1xuXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZlY3RvcjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5cbmNsYXNzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCA9IGZhbHNlICkge1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBhcnJheSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiBhcnJheSBzaG91bGQgYmUgYSBUeXBlZCBBcnJheS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmlzQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuXHRcdHRoaXMubmFtZSA9ICcnO1xuXG5cdFx0dGhpcy5hcnJheSA9IGFycmF5O1xuXHRcdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0XHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIGl0ZW1TaXplIDogMDtcblx0XHR0aGlzLm5vcm1hbGl6ZWQgPSBub3JtYWxpemVkO1xuXG5cdFx0dGhpcy51c2FnZSA9IFN0YXRpY0RyYXdVc2FnZTtcblx0XHR0aGlzLl91cGRhdGVSYW5nZSA9IHsgb2Zmc2V0OiAwLCBjb3VudDogLSAxIH07XG5cdFx0dGhpcy51cGRhdGVSYW5nZXMgPSBbXTtcblx0XHR0aGlzLmdwdVR5cGUgPSBGbG9hdFR5cGU7XG5cblx0XHR0aGlzLnZlcnNpb24gPSAwO1xuXG5cdH1cblxuXHRvblVwbG9hZENhbGxiYWNrKCkge31cblxuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cblx0Z2V0IHVwZGF0ZVJhbmdlKCkge1xuXG5cdFx0d2Fybk9uY2UoICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IHVwZGF0ZVJhbmdlKCkgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHIxNjkuIFVzZSBhZGRVcGRhdGVSYW5nZSgpIGluc3RlYWQuJyApOyAvLyBAZGVwcmVjYXRlZCwgcjE1OVxuXHRcdHJldHVybiB0aGlzLl91cGRhdGVSYW5nZTtcblxuXHR9XG5cblx0c2V0VXNhZ2UoIHZhbHVlICkge1xuXG5cdFx0dGhpcy51c2FnZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFVwZGF0ZVJhbmdlKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZVJhbmdlcy5wdXNoKCB7IHN0YXJ0LCBjb3VudCB9ICk7XG5cblx0fVxuXG5cdGNsZWFyVXBkYXRlUmFuZ2VzKCkge1xuXG5cdFx0dGhpcy51cGRhdGVSYW5nZXMubGVuZ3RoID0gMDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cdFx0dGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3IoIHNvdXJjZS5hcnJheSApO1xuXHRcdHRoaXMuaXRlbVNpemUgPSBzb3VyY2UuaXRlbVNpemU7XG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblx0XHR0aGlzLm5vcm1hbGl6ZWQgPSBzb3VyY2Uubm9ybWFsaXplZDtcblxuXHRcdHRoaXMudXNhZ2UgPSBzb3VyY2UudXNhZ2U7XG5cdFx0dGhpcy5ncHVUeXBlID0gc291cmNlLmdwdVR5cGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weUF0KCBpbmRleDEsIGF0dHJpYnV0ZSwgaW5kZXgyICkge1xuXG5cdFx0aW5kZXgxICo9IHRoaXMuaXRlbVNpemU7XG5cdFx0aW5kZXgyICo9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuaXRlbVNpemU7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBhdHRyaWJ1dGUuYXJyYXlbIGluZGV4MiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5QXJyYXkoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5hcnJheS5zZXQoIGFycmF5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlNYXRyaXgzKCBtICkge1xuXG5cdFx0aWYgKCB0aGlzLml0ZW1TaXplID09PSAyICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRfdmVjdG9yMi5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cdFx0XHRcdF92ZWN0b3IyLmFwcGx5TWF0cml4MyggbSApO1xuXG5cdFx0XHRcdHRoaXMuc2V0WFkoIGksIF92ZWN0b3IyLngsIF92ZWN0b3IyLnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5pdGVtU2l6ZSA9PT0gMyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cdFx0XHRcdF92ZWN0b3IuYXBwbHlNYXRyaXgzKCBtICk7XG5cblx0XHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRfdmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcblxuXHRcdFx0X3ZlY3Rvci5hcHBseU1hdHJpeDQoIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcHBseU5vcm1hbE1hdHJpeCggbSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRfdmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcblxuXHRcdFx0X3ZlY3Rvci5hcHBseU5vcm1hbE1hdHJpeCggbSApO1xuXG5cdFx0XHR0aGlzLnNldFhZWiggaSwgX3ZlY3Rvci54LCBfdmVjdG9yLnksIF92ZWN0b3IueiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRyYW5zZm9ybURpcmVjdGlvbiggbSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRfdmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcblxuXHRcdFx0X3ZlY3Rvci50cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXQoIHZhbHVlLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Ly8gTWF0Y2hpbmcgQnVmZmVyQXR0cmlidXRlIGNvbnN0cnVjdG9yLCBkbyBub3Qgbm9ybWFsaXplIHRoZSBhcnJheS5cblx0XHR0aGlzLmFycmF5LnNldCggdmFsdWUsIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldENvbXBvbmVudCggaW5kZXgsIGNvbXBvbmVudCApIHtcblxuXHRcdGxldCB2YWx1ZSA9IHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIGNvbXBvbmVudCBdO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB2YWx1ZSA9IGRlbm9ybWFsaXplKCB2YWx1ZSwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXG5cdH1cblxuXHRzZXRDb21wb25lbnQoIGluZGV4LCBjb21wb25lbnQsIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB2YWx1ZSA9IG5vcm1hbGl6ZSggdmFsdWUsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIGNvbXBvbmVudCBdID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0WCggaW5kZXggKSB7XG5cblx0XHRsZXQgeCA9IHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB4ID0gZGVub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHJldHVybiB4O1xuXG5cdH1cblxuXHRzZXRYKCBpbmRleCwgeCApIHtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF0gPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFkoIGluZGV4ICkge1xuXG5cdFx0bGV0IHkgPSB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxIF07XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHkgPSBkZW5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHk7XG5cblx0fVxuXG5cdHNldFkoIGluZGV4LCB5ICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFooIGluZGV4ICkge1xuXG5cdFx0bGV0IHogPSB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF07XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHogPSBkZW5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHo7XG5cblx0fVxuXG5cdHNldFooIGluZGV4LCB6ICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFcoIGluZGV4ICkge1xuXG5cdFx0bGV0IHcgPSB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF07XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHcgPSBkZW5vcm1hbGl6ZSggdywgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHc7XG5cblx0fVxuXG5cdHNldFcoIGluZGV4LCB3ICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB3ID0gbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFhZKCBpbmRleCwgeCwgeSApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHtcblxuXHRcdFx0eCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXHRcdFx0eSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYWVooIGluZGV4LCB4LCB5LCB6ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkge1xuXG5cdFx0XHR4ID0gbm9ybWFsaXplKCB4LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYWVpXKCBpbmRleCwgeCwgeSwgeiwgdyApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHtcblxuXHRcdFx0eCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXHRcdFx0eSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXHRcdFx0eiA9IG5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xuXHRcdFx0dyA9IG5vcm1hbGl6ZSggdywgdGhpcy5hcnJheSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG9uVXBsb2FkKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMub25VcGxvYWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmFycmF5LCB0aGlzLml0ZW1TaXplICkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0aXRlbVNpemU6IHRoaXMuaXRlbVNpemUsXG5cdFx0XHR0eXBlOiB0aGlzLmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsXG5cdFx0XHRhcnJheTogQXJyYXkuZnJvbSggdGhpcy5hcnJheSApLFxuXHRcdFx0bm9ybWFsaXplZDogdGhpcy5ub3JtYWxpemVkXG5cdFx0fTtcblxuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblx0XHRpZiAoIHRoaXMudXNhZ2UgIT09IFN0YXRpY0RyYXdVc2FnZSApIGRhdGEudXNhZ2UgPSB0aGlzLnVzYWdlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbi8vXG5cbmNsYXNzIEludDhCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IEludDhBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVWludDhCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IFVpbnQ4QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgVWludDhDbGFtcGVkQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIEludDE2QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBJbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IFVpbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBJbnQzMkJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgSW50MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVWludDMyQnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBVaW50MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgVWludDE2QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0XHR0aGlzLmlzRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cblx0fVxuXG5cdGdldFgoIGluZGV4ICkge1xuXG5cdFx0bGV0IHggPSBmcm9tSGFsZkZsb2F0KCB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgXSApO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB4ID0gZGVub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHJldHVybiB4O1xuXG5cdH1cblxuXHRzZXRYKCBpbmRleCwgeCApIHtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF0gPSB0b0hhbGZGbG9hdCggeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFkoIGluZGV4ICkge1xuXG5cdFx0bGV0IHkgPSBmcm9tSGFsZkZsb2F0KCB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxIF0gKTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeSA9IGRlbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XG5cblx0XHRyZXR1cm4geTtcblxuXHR9XG5cblx0c2V0WSggaW5kZXgsIHkgKSB7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXSA9IHRvSGFsZkZsb2F0KCB5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0WiggaW5kZXggKSB7XG5cblx0XHRsZXQgeiA9IGZyb21IYWxmRmxvYXQoIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDIgXSApO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB6ID0gZGVub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcblxuXHRcdHJldHVybiB6O1xuXG5cdH1cblxuXHRzZXRaKCBpbmRleCwgeiApIHtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeiA9IG5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMiBdID0gdG9IYWxmRmxvYXQoIHogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRXKCBpbmRleCApIHtcblxuXHRcdGxldCB3ID0gZnJvbUhhbGZGbG9hdCggdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMyBdICk7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHcgPSBkZW5vcm1hbGl6ZSggdywgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHc7XG5cblx0fVxuXG5cdHNldFcoIGluZGV4LCB3ICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB3ID0gbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF0gPSB0b0hhbGZGbG9hdCggdyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFhZKCBpbmRleCwgeCwgeSApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHtcblxuXHRcdFx0eCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXHRcdFx0eSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB0b0hhbGZGbG9hdCggeCApO1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0gdG9IYWxmRmxvYXQoIHkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYWVooIGluZGV4LCB4LCB5LCB6ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkge1xuXG5cdFx0XHR4ID0gbm9ybWFsaXplKCB4LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHRvSGFsZkZsb2F0KCB4ICk7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB0b0hhbGZGbG9hdCggeSApO1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gdG9IYWxmRmxvYXQoIHogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYWVpXKCBpbmRleCwgeCwgeSwgeiwgdyApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHtcblxuXHRcdFx0eCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXHRcdFx0eSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXHRcdFx0eiA9IG5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xuXHRcdFx0dyA9IG5vcm1hbGl6ZSggdywgdGhpcy5hcnJheSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB0b0hhbGZGbG9hdCggeCApO1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0gdG9IYWxmRmxvYXQoIHkgKTtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHRvSGFsZkZsb2F0KCB6ICk7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAzIF0gPSB0b0hhbGZGbG9hdCggdyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblxuY2xhc3MgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgRmxvYXQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG4vL1xuXG5leHBvcnQge1xuXHRGbG9hdDMyQnVmZmVyQXR0cmlidXRlLFxuXHRGbG9hdDE2QnVmZmVyQXR0cmlidXRlLFxuXHRVaW50MzJCdWZmZXJBdHRyaWJ1dGUsXG5cdEludDMyQnVmZmVyQXR0cmlidXRlLFxuXHRVaW50MTZCdWZmZXJBdHRyaWJ1dGUsXG5cdEludDE2QnVmZmVyQXR0cmlidXRlLFxuXHRVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUsXG5cdFVpbnQ4QnVmZmVyQXR0cmlidXRlLFxuXHRJbnQ4QnVmZmVyQXR0cmlidXRlLFxuXHRCdWZmZXJBdHRyaWJ1dGVcbn07XG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgQm94MyB9IGZyb20gJy4uL21hdGgvQm94My5qcyc7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuL0V2ZW50RGlzcGF0Y2hlci5qcyc7XG5pbXBvcnQgeyBCdWZmZXJBdHRyaWJ1dGUsIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgVWludDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgU3BoZXJlIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmUuanMnO1xuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuL09iamVjdDNELmpzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXRoL01hdHJpeDQuanMnO1xuaW1wb3J0IHsgTWF0cml4MyB9IGZyb20gJy4uL21hdGgvTWF0cml4My5qcyc7XG5pbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgYXJyYXlOZWVkc1VpbnQzMiB9IGZyb20gJy4uL3V0aWxzLmpzJztcblxubGV0IF9pZCA9IDA7XG5cbmNvbnN0IF9tMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9vYmogPSAvKkBfX1BVUkVfXyovIG5ldyBPYmplY3QzRCgpO1xuY29uc3QgX29mZnNldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9ib3ggPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7XG5jb25zdCBfYm94TW9ycGhUYXJnZXRzID0gLypAX19QVVJFX18qLyBuZXcgQm94MygpO1xuY29uc3QgX3ZlY3RvciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgQnVmZmVyR2VvbWV0cnkgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNCdWZmZXJHZW9tZXRyeSA9IHRydWU7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF9pZCArKyB9ICk7XG5cblx0XHR0aGlzLnV1aWQgPSBNYXRoVXRpbHMuZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR0aGlzLm5hbWUgPSAnJztcblx0XHR0aGlzLnR5cGUgPSAnQnVmZmVyR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5pbmRleCA9IG51bGw7XG5cdFx0dGhpcy5hdHRyaWJ1dGVzID0ge307XG5cblx0XHR0aGlzLm1vcnBoQXR0cmlidXRlcyA9IHt9O1xuXHRcdHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSBmYWxzZTtcblxuXHRcdHRoaXMuZ3JvdXBzID0gW107XG5cblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdHRoaXMuZHJhd1JhbmdlID0geyBzdGFydDogMCwgY291bnQ6IEluZmluaXR5IH07XG5cblx0XHR0aGlzLnVzZXJEYXRhID0ge307XG5cblx0fVxuXG5cdGdldEluZGV4KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaW5kZXg7XG5cblx0fVxuXG5cdHNldEluZGV4KCBpbmRleCApIHtcblxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggaW5kZXggKSApIHtcblxuXHRcdFx0dGhpcy5pbmRleCA9IG5ldyAoIGFycmF5TmVlZHNVaW50MzIoIGluZGV4ICkgPyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUgOiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgKSggaW5kZXgsIDEgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuaW5kZXggPSBpbmRleDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRBdHRyaWJ1dGUoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0fVxuXG5cdHNldEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlICkge1xuXG5cdFx0dGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF0gPSBhdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGVsZXRlQXR0cmlidXRlKCBuYW1lICkge1xuXG5cdFx0ZGVsZXRlIHRoaXMuYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGhhc0F0dHJpYnV0ZSggbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXSAhPT0gdW5kZWZpbmVkO1xuXG5cdH1cblxuXHRhZGRHcm91cCggc3RhcnQsIGNvdW50LCBtYXRlcmlhbEluZGV4ID0gMCApIHtcblxuXHRcdHRoaXMuZ3JvdXBzLnB1c2goIHtcblxuXHRcdFx0c3RhcnQ6IHN0YXJ0LFxuXHRcdFx0Y291bnQ6IGNvdW50LFxuXHRcdFx0bWF0ZXJpYWxJbmRleDogbWF0ZXJpYWxJbmRleFxuXG5cdFx0fSApO1xuXG5cdH1cblxuXHRjbGVhckdyb3VwcygpIHtcblxuXHRcdHRoaXMuZ3JvdXBzID0gW107XG5cblx0fVxuXG5cdHNldERyYXdSYW5nZSggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0dGhpcy5kcmF3UmFuZ2Uuc3RhcnQgPSBzdGFydDtcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50O1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwb3NpdGlvbi5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0XHRwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBub3JtYWwgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0aWYgKCBub3JtYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3Qgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0XHRub3JtYWwuYXBwbHlOb3JtYWxNYXRyaXgoIG5vcm1hbE1hdHJpeCApO1xuXG5cdFx0XHRub3JtYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGFuZ2VudCA9IHRoaXMuYXR0cmlidXRlcy50YW5nZW50O1xuXG5cdFx0aWYgKCB0YW5nZW50ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRhbmdlbnQudHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXggKTtcblxuXHRcdFx0dGFuZ2VudC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlRdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0X20xLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm90YXRlWCggYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHgtYXhpc1xuXG5cdFx0X20xLm1ha2VSb3RhdGlvblgoIGFuZ2xlICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm90YXRlWSggYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xuXG5cdFx0X20xLm1ha2VSb3RhdGlvblkoIGFuZ2xlICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm90YXRlWiggYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHotYXhpc1xuXG5cdFx0X20xLm1ha2VSb3RhdGlvblooIGFuZ2xlICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJhbnNsYXRlKCB4LCB5LCB6ICkge1xuXG5cdFx0Ly8gdHJhbnNsYXRlIGdlb21ldHJ5XG5cblx0XHRfbTEubWFrZVRyYW5zbGF0aW9uKCB4LCB5LCB6ICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2NhbGUoIHgsIHksIHogKSB7XG5cblx0XHQvLyBzY2FsZSBnZW9tZXRyeVxuXG5cdFx0X20xLm1ha2VTY2FsZSggeCwgeSwgeiApO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9tMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxvb2tBdCggdmVjdG9yICkge1xuXG5cdFx0X29iai5sb29rQXQoIHZlY3RvciApO1xuXG5cdFx0X29iai51cGRhdGVNYXRyaXgoKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfb2JqLm1hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNlbnRlcigpIHtcblxuXHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHR0aGlzLmJvdW5kaW5nQm94LmdldENlbnRlciggX29mZnNldCApLm5lZ2F0ZSgpO1xuXG5cdFx0dGhpcy50cmFuc2xhdGUoIF9vZmZzZXQueCwgX29mZnNldC55LCBfb2Zmc2V0LnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMgKSB7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gcG9pbnRzWyBpIF07XG5cdFx0XHRwb3NpdGlvbi5wdXNoKCBwb2ludC54LCBwb2ludC55LCBwb2ludC56IHx8IDAgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIDMgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbXB1dGVCb3VuZGluZ0JveCgpIHtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAmJiBwb3NpdGlvbi5pc0dMQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk6IEdMQnVmZmVyQXR0cmlidXRlIHJlcXVpcmVzIGEgbWFudWFsIGJvdW5kaW5nIGJveC4nLCB0aGlzICk7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3guc2V0KFxuXHRcdFx0XHRuZXcgVmVjdG9yMyggLSBJbmZpbml0eSwgLSBJbmZpbml0eSwgLSBJbmZpbml0eSApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3guc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24gKTtcblxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnRcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07XG5cdFx0XHRcdFx0X2JveC5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yLmFkZFZlY3RvcnMoIHRoaXMuYm91bmRpbmdCb3gubWluLCBfYm94Lm1pbiApO1xuXHRcdFx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfdmVjdG9yICk7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IuYWRkVmVjdG9ycyggdGhpcy5ib3VuZGluZ0JveC5tYXgsIF9ib3gubWF4ICk7XG5cdFx0XHRcdFx0XHR0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX2JveC5taW4gKTtcblx0XHRcdFx0XHRcdHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX2JveC5tYXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3gubWFrZUVtcHR5KCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi54ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnkgKSB8fCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueiApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk6IENvbXB1dGVkIG1pbi9tYXggaGF2ZSBOYU4gdmFsdWVzLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsIHRoaXMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkge1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gPSB0aGlzLm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdGlmICggcG9zaXRpb24gJiYgcG9zaXRpb24uaXNHTEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOiBHTEJ1ZmZlckF0dHJpYnV0ZSByZXF1aXJlcyBhIG1hbnVhbCBib3VuZGluZyBzcGhlcmUuJywgdGhpcyApO1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlLnNldCggbmV3IFZlY3RvcjMoKSwgSW5maW5pdHkgKTtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwb3NpdGlvbiApIHtcblxuXHRcdFx0Ly8gZmlyc3QsIGZpbmQgdGhlIGNlbnRlciBvZiB0aGUgYm91bmRpbmcgc3BoZXJlXG5cblx0XHRcdGNvbnN0IGNlbnRlciA9IHRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyO1xuXG5cdFx0XHRfYm94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggYXR0cmlidXRlcyBpZiBwcmVzZW50XG5cblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvblsgaSBdO1xuXHRcdFx0XHRcdF9ib3hNb3JwaFRhcmdldHMuc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSApIHtcblxuXHRcdFx0XHRcdFx0X3ZlY3Rvci5hZGRWZWN0b3JzKCBfYm94Lm1pbiwgX2JveE1vcnBoVGFyZ2V0cy5taW4gKTtcblx0XHRcdFx0XHRcdF9ib3guZXhwYW5kQnlQb2ludCggX3ZlY3RvciApO1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yLmFkZFZlY3RvcnMoIF9ib3gubWF4LCBfYm94TW9ycGhUYXJnZXRzLm1heCApO1xuXHRcdFx0XHRcdFx0X2JveC5leHBhbmRCeVBvaW50KCBfdmVjdG9yICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRfYm94LmV4cGFuZEJ5UG9pbnQoIF9ib3hNb3JwaFRhcmdldHMubWluICk7XG5cdFx0XHRcdFx0XHRfYm94LmV4cGFuZEJ5UG9pbnQoIF9ib3hNb3JwaFRhcmdldHMubWF4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdF9ib3guZ2V0Q2VudGVyKCBjZW50ZXIgKTtcblxuXHRcdFx0Ly8gc2Vjb25kLCB0cnkgdG8gZmluZCBhIGJvdW5kaW5nU3BoZXJlIHdpdGggYSByYWRpdXMgc21hbGxlciB0aGFuIHRoZVxuXHRcdFx0Ly8gYm91bmRpbmdTcGhlcmUgb2YgdGhlIGJvdW5kaW5nQm94OiBzcXJ0KDMpIHNtYWxsZXIgaW4gdGhlIGJlc3QgY2FzZVxuXG5cdFx0XHRsZXQgbWF4UmFkaXVzU3EgPSAwO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9zaXRpb24uY291bnQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRfdmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpICk7XG5cblx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggX3ZlY3RvciApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnRcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07XG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IG1vcnBoQXR0cmlidXRlLmNvdW50OyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUsIGogKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBtb3JwaFRhcmdldHNSZWxhdGl2ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRfb2Zmc2V0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBqICk7XG5cdFx0XHRcdFx0XHRcdF92ZWN0b3IuYWRkKCBfb2Zmc2V0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggX3ZlY3RvciApICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzID0gTWF0aC5zcXJ0KCBtYXhSYWRpdXNTcSApO1xuXG5cdFx0XHRpZiAoIGlzTmFOKCB0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cyApICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogQ29tcHV0ZWQgcmFkaXVzIGlzIE5hTi4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Y29tcHV0ZVRhbmdlbnRzKCkge1xuXG5cdFx0Y29uc3QgaW5kZXggPSB0aGlzLmluZGV4O1xuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBiYXNlZCBvbiBodHRwOi8vd3d3LnRlcmF0aG9uLmNvbS9jb2RlL3RhbmdlbnQuaHRtbFxuXHRcdC8vIChwZXIgdmVydGV4IHRhbmdlbnRzKVxuXG5cdFx0aWYgKCBpbmRleCA9PT0gbnVsbCB8fFxuXHRcdFx0IGF0dHJpYnV0ZXMucG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0IGF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQgfHxcblx0XHRcdCBhdHRyaWJ1dGVzLnV2ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVUYW5nZW50cygpIGZhaWxlZC4gTWlzc2luZyByZXF1aXJlZCBhdHRyaWJ1dGVzIChpbmRleCwgcG9zaXRpb24sIG5vcm1hbCBvciB1diknICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0Y29uc3Qgbm9ybWFsQXR0cmlidXRlID0gYXR0cmlidXRlcy5ub3JtYWw7XG5cdFx0Y29uc3QgdXZBdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLnV2O1xuXG5cdFx0aWYgKCB0aGlzLmhhc0F0dHJpYnV0ZSggJ3RhbmdlbnQnICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3RhbmdlbnQnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCA0ICogcG9zaXRpb25BdHRyaWJ1dGUuY291bnQgKSwgNCApICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0YW5nZW50QXR0cmlidXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoICd0YW5nZW50JyApO1xuXG5cdFx0Y29uc3QgdGFuMSA9IFtdLCB0YW4yID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSArKyApIHtcblxuXHRcdFx0dGFuMVsgaSBdID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHRhbjJbIGkgXSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB2QSA9IG5ldyBWZWN0b3IzKCksXG5cdFx0XHR2QiA9IG5ldyBWZWN0b3IzKCksXG5cdFx0XHR2QyA9IG5ldyBWZWN0b3IzKCksXG5cblx0XHRcdHV2QSA9IG5ldyBWZWN0b3IyKCksXG5cdFx0XHR1dkIgPSBuZXcgVmVjdG9yMigpLFxuXHRcdFx0dXZDID0gbmV3IFZlY3RvcjIoKSxcblxuXHRcdFx0c2RpciA9IG5ldyBWZWN0b3IzKCksXG5cdFx0XHR0ZGlyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRyaWFuZ2xlKCBhLCBiLCBjICkge1xuXG5cdFx0XHR2QS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgYSApO1xuXHRcdFx0dkIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGIgKTtcblx0XHRcdHZDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBjICk7XG5cblx0XHRcdHV2QS5mcm9tQnVmZmVyQXR0cmlidXRlKCB1dkF0dHJpYnV0ZSwgYSApO1xuXHRcdFx0dXZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2QXR0cmlidXRlLCBiICk7XG5cdFx0XHR1dkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXZBdHRyaWJ1dGUsIGMgKTtcblxuXHRcdFx0dkIuc3ViKCB2QSApO1xuXHRcdFx0dkMuc3ViKCB2QSApO1xuXG5cdFx0XHR1dkIuc3ViKCB1dkEgKTtcblx0XHRcdHV2Qy5zdWIoIHV2QSApO1xuXG5cdFx0XHRjb25zdCByID0gMS4wIC8gKCB1dkIueCAqIHV2Qy55IC0gdXZDLnggKiB1dkIueSApO1xuXG5cdFx0XHQvLyBzaWxlbnRseSBpZ25vcmUgZGVnZW5lcmF0ZSB1diB0cmlhbmdsZXMgaGF2aW5nIGNvaW5jaWRlbnQgb3IgY29saW5lYXIgdmVydGljZXNcblxuXHRcdFx0aWYgKCAhIGlzRmluaXRlKCByICkgKSByZXR1cm47XG5cblx0XHRcdHNkaXIuY29weSggdkIgKS5tdWx0aXBseVNjYWxhciggdXZDLnkgKS5hZGRTY2FsZWRWZWN0b3IoIHZDLCAtIHV2Qi55ICkubXVsdGlwbHlTY2FsYXIoIHIgKTtcblx0XHRcdHRkaXIuY29weSggdkMgKS5tdWx0aXBseVNjYWxhciggdXZCLnggKS5hZGRTY2FsZWRWZWN0b3IoIHZCLCAtIHV2Qy54ICkubXVsdGlwbHlTY2FsYXIoIHIgKTtcblxuXHRcdFx0dGFuMVsgYSBdLmFkZCggc2RpciApO1xuXHRcdFx0dGFuMVsgYiBdLmFkZCggc2RpciApO1xuXHRcdFx0dGFuMVsgYyBdLmFkZCggc2RpciApO1xuXG5cdFx0XHR0YW4yWyBhIF0uYWRkKCB0ZGlyICk7XG5cdFx0XHR0YW4yWyBiIF0uYWRkKCB0ZGlyICk7XG5cdFx0XHR0YW4yWyBjIF0uYWRkKCB0ZGlyICk7XG5cblx0XHR9XG5cblx0XHRsZXQgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG5cblx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdGdyb3VwcyA9IFsge1xuXHRcdFx0XHRzdGFydDogMCxcblx0XHRcdFx0Y291bnQ6IGluZGV4LmNvdW50XG5cdFx0XHR9IF07XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXG5cdFx0XHRjb25zdCBzdGFydCA9IGdyb3VwLnN0YXJ0O1xuXHRcdFx0Y29uc3QgY291bnQgPSBncm91cC5jb3VudDtcblxuXHRcdFx0Zm9yICggbGV0IGogPSBzdGFydCwgamwgPSBzdGFydCArIGNvdW50OyBqIDwgamw7IGogKz0gMyApIHtcblxuXHRcdFx0XHRoYW5kbGVUcmlhbmdsZShcblx0XHRcdFx0XHRpbmRleC5nZXRYKCBqICsgMCApLFxuXHRcdFx0XHRcdGluZGV4LmdldFgoIGogKyAxICksXG5cdFx0XHRcdFx0aW5kZXguZ2V0WCggaiArIDIgKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCB0bXAgPSBuZXcgVmVjdG9yMygpLCB0bXAyID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCBuID0gbmV3IFZlY3RvcjMoKSwgbjIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlVmVydGV4KCB2ICkge1xuXG5cdFx0XHRuLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbEF0dHJpYnV0ZSwgdiApO1xuXHRcdFx0bjIuY29weSggbiApO1xuXG5cdFx0XHRjb25zdCB0ID0gdGFuMVsgdiBdO1xuXG5cdFx0XHQvLyBHcmFtLVNjaG1pZHQgb3J0aG9nb25hbGl6ZVxuXG5cdFx0XHR0bXAuY29weSggdCApO1xuXHRcdFx0dG1wLnN1Yiggbi5tdWx0aXBseVNjYWxhciggbi5kb3QoIHQgKSApICkubm9ybWFsaXplKCk7XG5cblx0XHRcdC8vIENhbGN1bGF0ZSBoYW5kZWRuZXNzXG5cblx0XHRcdHRtcDIuY3Jvc3NWZWN0b3JzKCBuMiwgdCApO1xuXHRcdFx0Y29uc3QgdGVzdCA9IHRtcDIuZG90KCB0YW4yWyB2IF0gKTtcblx0XHRcdGNvbnN0IHcgPSAoIHRlc3QgPCAwLjAgKSA/IC0gMS4wIDogMS4wO1xuXG5cdFx0XHR0YW5nZW50QXR0cmlidXRlLnNldFhZWlcoIHYsIHRtcC54LCB0bXAueSwgdG1wLnosIHcgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cblx0XHRcdGNvbnN0IHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRjb25zdCBjb3VudCA9IGdyb3VwLmNvdW50O1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IHN0YXJ0LCBqbCA9IHN0YXJ0ICsgY291bnQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdGhhbmRsZVZlcnRleCggaW5kZXguZ2V0WCggaiArIDAgKSApO1xuXHRcdFx0XHRoYW5kbGVWZXJ0ZXgoIGluZGV4LmdldFgoIGogKyAxICkgKTtcblx0XHRcdFx0aGFuZGxlVmVydGV4KCBpbmRleC5nZXRYKCBqICsgMiApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Y29tcHV0ZVZlcnRleE5vcm1hbHMoKSB7XG5cblx0XHRjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XG5cdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSB0aGlzLmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXG5cdFx0aWYgKCBwb3NpdGlvbkF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsZXQgbm9ybWFsQXR0cmlidXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoICdub3JtYWwnICk7XG5cblx0XHRcdGlmICggbm9ybWFsQXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bm9ybWFsQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggcG9zaXRpb25BdHRyaWJ1dGUuY291bnQgKiAzICksIDMgKTtcblx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBub3JtYWxBdHRyaWJ1dGUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyByZXNldCBleGlzdGluZyBub3JtYWxzIHRvIHplcm9cblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbm9ybWFsQXR0cmlidXRlLmNvdW50OyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCBpLCAwLCAwLCAwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHBBID0gbmV3IFZlY3RvcjMoKSwgcEIgPSBuZXcgVmVjdG9yMygpLCBwQyA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBuQSA9IG5ldyBWZWN0b3IzKCksIG5CID0gbmV3IFZlY3RvcjMoKSwgbkMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0Y29uc3QgY2IgPSBuZXcgVmVjdG9yMygpLCBhYiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdC8vIGluZGV4ZWQgZWxlbWVudHNcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gaW5kZXguY291bnQ7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdkEgPSBpbmRleC5nZXRYKCBpICsgMCApO1xuXHRcdFx0XHRcdGNvbnN0IHZCID0gaW5kZXguZ2V0WCggaSArIDEgKTtcblx0XHRcdFx0XHRjb25zdCB2QyA9IGluZGV4LmdldFgoIGkgKyAyICk7XG5cblx0XHRcdFx0XHRwQS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgdkEgKTtcblx0XHRcdFx0XHRwQi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgdkIgKTtcblx0XHRcdFx0XHRwQy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgdkMgKTtcblxuXHRcdFx0XHRcdGNiLnN1YlZlY3RvcnMoIHBDLCBwQiApO1xuXHRcdFx0XHRcdGFiLnN1YlZlY3RvcnMoIHBBLCBwQiApO1xuXHRcdFx0XHRcdGNiLmNyb3NzKCBhYiApO1xuXG5cdFx0XHRcdFx0bkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlLCB2QSApO1xuXHRcdFx0XHRcdG5CLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbEF0dHJpYnV0ZSwgdkIgKTtcblx0XHRcdFx0XHRuQy5mcm9tQnVmZmVyQXR0cmlidXRlKCBub3JtYWxBdHRyaWJ1dGUsIHZDICk7XG5cblx0XHRcdFx0XHRuQS5hZGQoIGNiICk7XG5cdFx0XHRcdFx0bkIuYWRkKCBjYiApO1xuXHRcdFx0XHRcdG5DLmFkZCggY2IgKTtcblxuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIHZBLCBuQS54LCBuQS55LCBuQS56ICk7XG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggdkIsIG5CLngsIG5CLnksIG5CLnogKTtcblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCB2QywgbkMueCwgbkMueSwgbkMueiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBub24taW5kZXhlZCBlbGVtZW50cyAodW5jb25uZWN0ZWQgdHJpYW5nbGUgc291cClcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0cEEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKyAwICk7XG5cdFx0XHRcdFx0cEIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKyAxICk7XG5cdFx0XHRcdFx0cEMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKyAyICk7XG5cblx0XHRcdFx0XHRjYi5zdWJWZWN0b3JzKCBwQywgcEIgKTtcblx0XHRcdFx0XHRhYi5zdWJWZWN0b3JzKCBwQSwgcEIgKTtcblx0XHRcdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIGkgKyAwLCBjYi54LCBjYi55LCBjYi56ICk7XG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggaSArIDEsIGNiLngsIGNiLnksIGNiLnogKTtcblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCBpICsgMiwgY2IueCwgY2IueSwgY2IueiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTtcblxuXHRcdFx0bm9ybWFsQXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0bm9ybWFsaXplTm9ybWFscygpIHtcblxuXHRcdGNvbnN0IG5vcm1hbHMgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG5vcm1hbHMuY291bnQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCBpICk7XG5cblx0XHRcdF92ZWN0b3Iubm9ybWFsaXplKCk7XG5cblx0XHRcdG5vcm1hbHMuc2V0WFlaKCBpLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHRvTm9uSW5kZXhlZCgpIHtcblxuXHRcdGZ1bmN0aW9uIGNvbnZlcnRCdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kaWNlcyApIHtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0XHRjb25zdCBpdGVtU2l6ZSA9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcblx0XHRcdGNvbnN0IG5vcm1hbGl6ZWQgPSBhdHRyaWJ1dGUubm9ybWFsaXplZDtcblxuXHRcdFx0Y29uc3QgYXJyYXkyID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKCBpbmRpY2VzLmxlbmd0aCAqIGl0ZW1TaXplICk7XG5cblx0XHRcdGxldCBpbmRleCA9IDAsIGluZGV4MiA9IDA7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluZGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdFx0aW5kZXggPSBpbmRpY2VzWyBpIF0gKiBhdHRyaWJ1dGUuZGF0YS5zdHJpZGUgKyBhdHRyaWJ1dGUub2Zmc2V0O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpbmRleCA9IGluZGljZXNbIGkgXSAqIGl0ZW1TaXplO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBpdGVtU2l6ZTsgaiArKyApIHtcblxuXHRcdFx0XHRcdGFycmF5MlsgaW5kZXgyICsrIF0gPSBhcnJheVsgaW5kZXggKysgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5MiwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuaW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LnRvTm9uSW5kZXhlZCgpOiBCdWZmZXJHZW9tZXRyeSBpcyBhbHJlYWR5IG5vbi1pbmRleGVkLicgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHRjb25zdCBpbmRpY2VzID0gdGhpcy5pbmRleC5hcnJheTtcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gYXR0cmlidXRlc1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGNvbnN0IG5ld0F0dHJpYnV0ZSA9IGNvbnZlcnRCdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kaWNlcyApO1xuXG5cdFx0XHRnZW9tZXRyeTIuc2V0QXR0cmlidXRlKCBuYW1lLCBuZXdBdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IG1vcnBoQXJyYXkgPSBbXTtcblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVbIGkgXTtcblxuXHRcdFx0XHRjb25zdCBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTtcblxuXHRcdFx0XHRtb3JwaEFycmF5LnB1c2goIG5ld0F0dHJpYnV0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5Mi5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IG1vcnBoQXJyYXk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeTIubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHRjb25zdCBncm91cHMgPSB0aGlzLmdyb3VwcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0Z2VvbWV0cnkyLmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBnZW9tZXRyeTI7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSB7XG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjYsXG5cdFx0XHRcdHR5cGU6ICdCdWZmZXJHZW9tZXRyeScsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ0J1ZmZlckdlb21ldHJ5LnRvSlNPTidcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gc3RhbmRhcmQgQnVmZmVyR2VvbWV0cnkgc2VyaWFsaXphdGlvblxuXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcblx0XHRpZiAoIHRoaXMubmFtZSAhPT0gJycgKSBkYXRhLm5hbWUgPSB0aGlzLm5hbWU7XG5cdFx0aWYgKCBPYmplY3Qua2V5cyggdGhpcy51c2VyRGF0YSApLmxlbmd0aCA+IDAgKSBkYXRhLnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdGlmICggdGhpcy5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBwYXJhbWV0ZXJzICkge1xuXG5cdFx0XHRcdGlmICggcGFyYW1ldGVyc1sga2V5IF0gIT09IHVuZGVmaW5lZCApIGRhdGFbIGtleSBdID0gcGFyYW1ldGVyc1sga2V5IF07XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cblx0XHR9XG5cblx0XHQvLyBmb3Igc2ltcGxpY2l0eSB0aGUgY29kZSBhc3N1bWVzIGF0dHJpYnV0ZXMgYXJlIG5vdCBzaGFyZWQgYWNyb3NzIGdlb21ldHJpZXMsIHNlZSAjMTU4MTFcblxuXHRcdGRhdGEuZGF0YSA9IHsgYXR0cmlidXRlczoge30gfTtcblxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5pbmRleCA9IHtcblx0XHRcdFx0dHlwZTogaW5kZXguYXJyYXkuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdFx0YXJyYXk6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBpbmRleC5hcnJheSApXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdGZvciAoIGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0ZGF0YS5kYXRhLmF0dHJpYnV0ZXNbIGtleSBdID0gYXR0cmlidXRlLnRvSlNPTiggZGF0YS5kYXRhICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSB7fTtcblx0XHRsZXQgaGFzTW9ycGhBdHRyaWJ1dGVzID0gZmFsc2U7XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gdGhpcy5tb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZUFycmF5ID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXNbIGtleSBdO1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYXR0cmlidXRlQXJyYXkubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlQXJyYXlbIGkgXTtcblxuXHRcdFx0XHRhcnJheS5wdXNoKCBhdHRyaWJ1dGUudG9KU09OKCBkYXRhLmRhdGEgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYXJyYXkubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRtb3JwaEF0dHJpYnV0ZXNbIGtleSBdID0gYXJyYXk7XG5cblx0XHRcdFx0aGFzTW9ycGhBdHRyaWJ1dGVzID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBoYXNNb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5tb3JwaEF0dHJpYnV0ZXMgPSBtb3JwaEF0dHJpYnV0ZXM7XG5cdFx0XHRkYXRhLmRhdGEubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG5cblx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRkYXRhLmRhdGEuZ3JvdXBzID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIGdyb3VwcyApICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBib3VuZGluZ1NwaGVyZSA9IHRoaXMuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRkYXRhLmRhdGEuYm91bmRpbmdTcGhlcmUgPSB7XG5cdFx0XHRcdGNlbnRlcjogYm91bmRpbmdTcGhlcmUuY2VudGVyLnRvQXJyYXkoKSxcblx0XHRcdFx0cmFkaXVzOiBib3VuZGluZ1NwaGVyZS5yYWRpdXNcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdC8vIHJlc2V0XG5cblx0XHR0aGlzLmluZGV4ID0gbnVsbDtcblx0XHR0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcblx0XHR0aGlzLm1vcnBoQXR0cmlidXRlcyA9IHt9O1xuXHRcdHRoaXMuZ3JvdXBzID0gW107XG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0XHQvLyB1c2VkIGZvciBzdG9yaW5nIGNsb25lZCwgc2hhcmVkIGRhdGFcblxuXHRcdGNvbnN0IGRhdGEgPSB7fTtcblxuXHRcdC8vIG5hbWVcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0Ly8gaW5kZXhcblxuXHRcdGNvbnN0IGluZGV4ID0gc291cmNlLmluZGV4O1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5zZXRJbmRleCggaW5kZXguY2xvbmUoIGRhdGEgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYXR0cmlidXRlc1xuXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHNvdXJjZS5hdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlLmNsb25lKCBkYXRhICkgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IHNvdXJjZS5tb3JwaEF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIG1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBbXTtcblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGFycmF5LnB1c2goIG1vcnBoQXR0cmlidXRlWyBpIF0uY2xvbmUoIGRhdGEgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF0gPSBhcnJheTtcblxuXHRcdH1cblxuXHRcdHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSBzb3VyY2UubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cblx0XHQvLyBncm91cHNcblxuXHRcdGNvbnN0IGdyb3VwcyA9IHNvdXJjZS5ncm91cHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdHRoaXMuYWRkR3JvdXAoIGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm91bmRpbmcgYm94XG5cblx0XHRjb25zdCBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDtcblxuXHRcdGlmICggYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm91bmRpbmcgc3BoZXJlXG5cblx0XHRjb25zdCBib3VuZGluZ1NwaGVyZSA9IHNvdXJjZS5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZHJhdyByYW5nZVxuXG5cdFx0dGhpcy5kcmF3UmFuZ2Uuc3RhcnQgPSBzb3VyY2UuZHJhd1JhbmdlLnN0YXJ0O1xuXHRcdHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gc291cmNlLmRyYXdSYW5nZS5jb3VudDtcblxuXHRcdC8vIHVzZXIgZGF0YVxuXG5cdFx0dGhpcy51c2VyRGF0YSA9IHNvdXJjZS51c2VyRGF0YTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH07XG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgU3BoZXJlIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmUuanMnO1xuaW1wb3J0IHsgUmF5IH0gZnJvbSAnLi4vbWF0aC9SYXkuanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xuaW1wb3J0IHsgVHJpYW5nbGUgfSBmcm9tICcuLi9tYXRoL1RyaWFuZ2xlLmpzJztcbmltcG9ydCB7IEJhY2tTaWRlLCBGcm9udFNpZGUgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgTWVzaEJhc2ljTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvTWVzaEJhc2ljTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcblxuY29uc3QgX2ludmVyc2VNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfcmF5ID0gLypAX19QVVJFX18qLyBuZXcgUmF5KCk7XG5jb25zdCBfc3BoZXJlID0gLypAX19QVVJFX18qLyBuZXcgU3BoZXJlKCk7XG5jb25zdCBfc3BoZXJlSGl0QXQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF92QSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92QiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92QyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX3RlbXBBID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX21vcnBoQSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX3V2QSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IF91dkIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfdXZDID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuXG5jb25zdCBfbm9ybWFsQSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9ub3JtYWxCID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX25vcm1hbEMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9pbnRlcnNlY3Rpb25Qb2ludCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBNZXNoIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLCBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNNZXNoID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoJztcblxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblx0XHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cblx0XHR0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHRpZiAoIHNvdXJjZS5tb3JwaFRhcmdldEluZmx1ZW5jZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSBzb3VyY2UubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnNsaWNlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHNvdXJjZS5tb3JwaFRhcmdldERpY3Rpb25hcnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5tYXRlcmlhbCA9IEFycmF5LmlzQXJyYXkoIHNvdXJjZS5tYXRlcmlhbCApID8gc291cmNlLm1hdGVyaWFsLnNsaWNlKCkgOiBzb3VyY2UubWF0ZXJpYWw7XG5cdFx0dGhpcy5nZW9tZXRyeSA9IHNvdXJjZS5nZW9tZXRyeTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR1cGRhdGVNb3JwaFRhcmdldHMoKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTtcblxuXHRcdGlmICgga2V5cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1sga2V5c1sgMCBdIF07XG5cblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xuXHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHt9O1xuXG5cdFx0XHRcdGZvciAoIGxldCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG5hbWUgPSBtb3JwaEF0dHJpYnV0ZVsgbSBdLm5hbWUgfHwgU3RyaW5nKCBtICk7XG5cblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKCAwICk7XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGdldFZlcnRleFBvc2l0aW9uKCBpbmRleCwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRjb25zdCBtb3JwaFBvc2l0aW9uID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdGNvbnN0IG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cblx0XHR0YXJnZXQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4ICk7XG5cblx0XHRjb25zdCBtb3JwaEluZmx1ZW5jZXMgPSB0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcblxuXHRcdGlmICggbW9ycGhQb3NpdGlvbiAmJiBtb3JwaEluZmx1ZW5jZXMgKSB7XG5cblx0XHRcdF9tb3JwaEEuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtb3JwaFBvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZmx1ZW5jZSA9IG1vcnBoSW5mbHVlbmNlc1sgaSBdO1xuXHRcdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoUG9zaXRpb25bIGkgXTtcblxuXHRcdFx0XHRpZiAoIGluZmx1ZW5jZSA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdF90ZW1wQS5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgaW5kZXggKTtcblxuXHRcdFx0XHRpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xuXG5cdFx0XHRcdFx0X21vcnBoQS5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQSwgaW5mbHVlbmNlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdF9tb3JwaEEuYWRkU2NhbGVkVmVjdG9yKCBfdGVtcEEuc3ViKCB0YXJnZXQgKSwgaW5mbHVlbmNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRhcmdldC5hZGQoIF9tb3JwaEEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7XG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXG5cdFx0aWYgKCBtYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Ly8gdGVzdCB3aXRoIGJvdW5kaW5nIHNwaGVyZSBpbiB3b3JsZCBzcGFjZVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0X3NwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdF9zcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0Ly8gY2hlY2sgZGlzdGFuY2UgZnJvbSByYXkgb3JpZ2luIHRvIGJvdW5kaW5nIHNwaGVyZVxuXG5cdFx0X3JheS5jb3B5KCByYXljYXN0ZXIucmF5ICkucmVjYXN0KCByYXljYXN0ZXIubmVhciApO1xuXG5cdFx0aWYgKCBfc3BoZXJlLmNvbnRhaW5zUG9pbnQoIF9yYXkub3JpZ2luICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRpZiAoIF9yYXkuaW50ZXJzZWN0U3BoZXJlKCBfc3BoZXJlLCBfc3BoZXJlSGl0QXQgKSA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdFx0aWYgKCBfcmF5Lm9yaWdpbi5kaXN0YW5jZVRvU3F1YXJlZCggX3NwaGVyZUhpdEF0ICkgPiAoIHJheWNhc3Rlci5mYXIgLSByYXljYXN0ZXIubmVhciApICoqIDIgKSByZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHJheSB0byBsb2NhbCBzcGFjZSBvZiBtZXNoXG5cblx0XHRfaW52ZXJzZU1hdHJpeC5jb3B5KCBtYXRyaXhXb3JsZCApLmludmVydCgpO1xuXHRcdF9yYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggX2ludmVyc2VNYXRyaXggKTtcblxuXHRcdC8vIHRlc3Qgd2l0aCBib3VuZGluZyBib3ggaW4gbG9jYWwgc3BhY2VcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggX3JheS5pbnRlcnNlY3RzQm94KCBnZW9tZXRyeS5ib3VuZGluZ0JveCApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIHRlc3QgZm9yIGludGVyc2VjdGlvbnMgd2l0aCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5fY29tcHV0ZUludGVyc2VjdGlvbnMoIHJheWNhc3RlciwgaW50ZXJzZWN0cywgX3JheSApO1xuXG5cdH1cblxuXHRfY29tcHV0ZUludGVyc2VjdGlvbnMoIHJheWNhc3RlciwgaW50ZXJzZWN0cywgcmF5TG9jYWxTcGFjZSApIHtcblxuXHRcdGxldCBpbnRlcnNlY3Rpb247XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuXG5cdFx0Y29uc3QgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0Y29uc3QgdXYgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2O1xuXHRcdGNvbnN0IHV2MSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYxO1xuXHRcdGNvbnN0IG5vcm1hbCA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsO1xuXHRcdGNvbnN0IGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3Vwcztcblx0XHRjb25zdCBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHQvLyBpbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIGluZGV4LmNvdW50LCBNYXRoLm1pbiggKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICksICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKSApO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBhID0gaW5kZXguZ2V0WCggaiApO1xuXHRcdFx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIGogKyAxICk7XG5cdFx0XHRcdFx0XHRjb25zdCBjID0gaW5kZXguZ2V0WCggaiArIDIgKTtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXlMb2NhbFNwYWNlLCB1diwgdXYxLCBub3JtYWwsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGogLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBpbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3Ncblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2UubWF0ZXJpYWxJbmRleCA9IGdyb3VwLm1hdGVyaWFsSW5kZXg7XG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBpbmRleC5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gc3RhcnQsIGlsID0gZW5kOyBpIDwgaWw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleC5nZXRYKCBpICk7XG5cdFx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0Y29uc3QgYyA9IGluZGV4LmdldFgoIGkgKyAyICk7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0dlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXlMb2NhbFNwYWNlLCB1diwgdXYxLCBub3JtYWwsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaSAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG5vbi1pbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIHBvc2l0aW9uLmNvdW50LCBNYXRoLm1pbiggKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICksICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKSApO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBhID0gajtcblx0XHRcdFx0XHRcdGNvbnN0IGIgPSBqICsgMTtcblx0XHRcdFx0XHRcdGNvbnN0IGMgPSBqICsgMjtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXlMb2NhbFNwYWNlLCB1diwgdXYxLCBub3JtYWwsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGogLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlLm1hdGVyaWFsSW5kZXggPSBncm91cC5tYXRlcmlhbEluZGV4O1xuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggcG9zaXRpb24uY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBpbCA9IGVuZDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhID0gaTtcblx0XHRcdFx0XHRjb25zdCBiID0gaSArIDE7XG5cdFx0XHRcdFx0Y29uc3QgYyA9IGkgKyAyO1xuXG5cdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5TG9jYWxTcGFjZSwgdXYsIHV2MSwgbm9ybWFsLCBhLCBiLCBjICk7XG5cblx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBjaGVja0ludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBBLCBwQiwgcEMsIHBvaW50ICkge1xuXG5cdGxldCBpbnRlcnNlY3Q7XG5cblx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHtcblxuXHRcdGludGVyc2VjdCA9IHJheS5pbnRlcnNlY3RUcmlhbmdsZSggcEMsIHBCLCBwQSwgdHJ1ZSwgcG9pbnQgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aW50ZXJzZWN0ID0gcmF5LmludGVyc2VjdFRyaWFuZ2xlKCBwQSwgcEIsIHBDLCAoIG1hdGVyaWFsLnNpZGUgPT09IEZyb250U2lkZSApLCBwb2ludCApO1xuXG5cdH1cblxuXHRpZiAoIGludGVyc2VjdCA9PT0gbnVsbCApIHJldHVybiBudWxsO1xuXG5cdF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkLmNvcHkoIHBvaW50ICk7XG5cdF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0Y29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCApO1xuXG5cdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm4gbnVsbDtcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcblx0XHRwb2ludDogX2ludGVyc2VjdGlvblBvaW50V29ybGQuY2xvbmUoKSxcblx0XHRvYmplY3Q6IG9iamVjdFxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIGNoZWNrR2VvbWV0cnlJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCB1diwgdXYxLCBub3JtYWwsIGEsIGIsIGMgKSB7XG5cblx0b2JqZWN0LmdldFZlcnRleFBvc2l0aW9uKCBhLCBfdkEgKTtcblx0b2JqZWN0LmdldFZlcnRleFBvc2l0aW9uKCBiLCBfdkIgKTtcblx0b2JqZWN0LmdldFZlcnRleFBvc2l0aW9uKCBjLCBfdkMgKTtcblxuXHRjb25zdCBpbnRlcnNlY3Rpb24gPSBjaGVja0ludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIF92QSwgX3ZCLCBfdkMsIF9pbnRlcnNlY3Rpb25Qb2ludCApO1xuXG5cdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0aWYgKCB1diApIHtcblxuXHRcdFx0X3V2QS5mcm9tQnVmZmVyQXR0cmlidXRlKCB1diwgYSApO1xuXHRcdFx0X3V2Qi5mcm9tQnVmZmVyQXR0cmlidXRlKCB1diwgYiApO1xuXHRcdFx0X3V2Qy5mcm9tQnVmZmVyQXR0cmlidXRlKCB1diwgYyApO1xuXG5cdFx0XHRpbnRlcnNlY3Rpb24udXYgPSBUcmlhbmdsZS5nZXRJbnRlcnBvbGF0aW9uKCBfaW50ZXJzZWN0aW9uUG9pbnQsIF92QSwgX3ZCLCBfdkMsIF91dkEsIF91dkIsIF91dkMsIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdXYxICkge1xuXG5cdFx0XHRfdXZBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2MSwgYSApO1xuXHRcdFx0X3V2Qi5mcm9tQnVmZmVyQXR0cmlidXRlKCB1djEsIGIgKTtcblx0XHRcdF91dkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYxLCBjICk7XG5cblx0XHRcdGludGVyc2VjdGlvbi51djEgPSBUcmlhbmdsZS5nZXRJbnRlcnBvbGF0aW9uKCBfaW50ZXJzZWN0aW9uUG9pbnQsIF92QSwgX3ZCLCBfdkMsIF91dkEsIF91dkIsIF91dkMsIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbm9ybWFsICkge1xuXG5cdFx0XHRfbm9ybWFsQS5mcm9tQnVmZmVyQXR0cmlidXRlKCBub3JtYWwsIGEgKTtcblx0XHRcdF9ub3JtYWxCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbCwgYiApO1xuXHRcdFx0X25vcm1hbEMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsLCBjICk7XG5cblx0XHRcdGludGVyc2VjdGlvbi5ub3JtYWwgPSBUcmlhbmdsZS5nZXRJbnRlcnBvbGF0aW9uKCBfaW50ZXJzZWN0aW9uUG9pbnQsIF92QSwgX3ZCLCBfdkMsIF9ub3JtYWxBLCBfbm9ybWFsQiwgX25vcm1hbEMsIG5ldyBWZWN0b3IzKCkgKTtcblxuXHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24ubm9ybWFsLmRvdCggcmF5LmRpcmVjdGlvbiApID4gMCApIHtcblxuXHRcdFx0XHRpbnRlcnNlY3Rpb24ubm9ybWFsLm11bHRpcGx5U2NhbGFyKCAtIDEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZmFjZSA9IHtcblx0XHRcdGE6IGEsXG5cdFx0XHRiOiBiLFxuXHRcdFx0YzogYyxcblx0XHRcdG5vcm1hbDogbmV3IFZlY3RvcjMoKSxcblx0XHRcdG1hdGVyaWFsSW5kZXg6IDBcblx0XHR9O1xuXG5cdFx0VHJpYW5nbGUuZ2V0Tm9ybWFsKCBfdkEsIF92QiwgX3ZDLCBmYWNlLm5vcm1hbCApO1xuXG5cdFx0aW50ZXJzZWN0aW9uLmZhY2UgPSBmYWNlO1xuXG5cdH1cblxuXHRyZXR1cm4gaW50ZXJzZWN0aW9uO1xuXG59XG5cbmV4cG9ydCB7IE1lc2ggfTtcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5cbmNsYXNzIEJveEdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSwgd2lkdGhTZWdtZW50cyA9IDEsIGhlaWdodFNlZ21lbnRzID0gMSwgZGVwdGhTZWdtZW50cyA9IDEgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0JveEdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHdpZHRoOiB3aWR0aCxcblx0XHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdFx0ZGVwdGg6IGRlcHRoLFxuXHRcdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRcdGRlcHRoU2VnbWVudHM6IGRlcHRoU2VnbWVudHNcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Ly8gc2VnbWVudHNcblxuXHRcdHdpZHRoU2VnbWVudHMgPSBNYXRoLmZsb29yKCB3aWR0aFNlZ21lbnRzICk7XG5cdFx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApO1xuXHRcdGRlcHRoU2VnbWVudHMgPSBNYXRoLmZsb29yKCBkZXB0aFNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRsZXQgbnVtYmVyT2ZWZXJ0aWNlcyA9IDA7XG5cdFx0bGV0IGdyb3VwU3RhcnQgPSAwO1xuXG5cdFx0Ly8gYnVpbGQgZWFjaCBzaWRlIG9mIHRoZSBib3ggZ2VvbWV0cnlcblxuXHRcdGJ1aWxkUGxhbmUoICd6JywgJ3knLCAneCcsIC0gMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCB3aWR0aCwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDAgKTsgLy8gcHhcblx0XHRidWlsZFBsYW5lKCAneicsICd5JywgJ3gnLCAxLCAtIDEsIGRlcHRoLCBoZWlnaHQsIC0gd2lkdGgsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCAxICk7IC8vIG54XG5cdFx0YnVpbGRQbGFuZSggJ3gnLCAneicsICd5JywgMSwgMSwgd2lkdGgsIGRlcHRoLCBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMsIDIgKTsgLy8gcHlcblx0XHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAtIDEsIHdpZHRoLCBkZXB0aCwgLSBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMsIDMgKTsgLy8gbnlcblx0XHRidWlsZFBsYW5lKCAneCcsICd5JywgJ3onLCAxLCAtIDEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgNCApOyAvLyBwelxuXHRcdGJ1aWxkUGxhbmUoICd4JywgJ3knLCAneicsIC0gMSwgLSAxLCB3aWR0aCwgaGVpZ2h0LCAtIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgNSApOyAvLyBuelxuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0XHRmdW5jdGlvbiBidWlsZFBsYW5lKCB1LCB2LCB3LCB1ZGlyLCB2ZGlyLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZ3JpZFgsIGdyaWRZLCBtYXRlcmlhbEluZGV4ICkge1xuXG5cdFx0XHRjb25zdCBzZWdtZW50V2lkdGggPSB3aWR0aCAvIGdyaWRYO1xuXHRcdFx0Y29uc3Qgc2VnbWVudEhlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xuXG5cdFx0XHRjb25zdCB3aWR0aEhhbGYgPSB3aWR0aCAvIDI7XG5cdFx0XHRjb25zdCBoZWlnaHRIYWxmID0gaGVpZ2h0IC8gMjtcblx0XHRcdGNvbnN0IGRlcHRoSGFsZiA9IGRlcHRoIC8gMjtcblxuXHRcdFx0Y29uc3QgZ3JpZFgxID0gZ3JpZFggKyAxO1xuXHRcdFx0Y29uc3QgZ3JpZFkxID0gZ3JpZFkgKyAxO1xuXG5cdFx0XHRsZXQgdmVydGV4Q291bnRlciA9IDA7XG5cdFx0XHRsZXQgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHRcdGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRcdFx0Zm9yICggbGV0IGl5ID0gMDsgaXkgPCBncmlkWTE7IGl5ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHkgPSBpeSAqIHNlZ21lbnRIZWlnaHQgLSBoZWlnaHRIYWxmO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHggPSBpeCAqIHNlZ21lbnRXaWR0aCAtIHdpZHRoSGFsZjtcblxuXHRcdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0XHR2ZWN0b3JbIHUgXSA9IHggKiB1ZGlyO1xuXHRcdFx0XHRcdHZlY3RvclsgdiBdID0geSAqIHZkaXI7XG5cdFx0XHRcdFx0dmVjdG9yWyB3IF0gPSBkZXB0aEhhbGY7XG5cblx0XHRcdFx0XHQvLyBub3cgYXBwbHkgdmVjdG9yIHRvIHZlcnRleCBidWZmZXJcblxuXHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcblxuXHRcdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0XHR2ZWN0b3JbIHUgXSA9IDA7XG5cdFx0XHRcdFx0dmVjdG9yWyB2IF0gPSAwO1xuXHRcdFx0XHRcdHZlY3RvclsgdyBdID0gZGVwdGggPiAwID8gMSA6IC0gMTtcblxuXHRcdFx0XHRcdC8vIG5vdyBhcHBseSB2ZWN0b3IgdG8gbm9ybWFsIGJ1ZmZlclxuXG5cdFx0XHRcdFx0bm9ybWFscy5wdXNoKCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICk7XG5cblx0XHRcdFx0XHQvLyB1dnNcblxuXHRcdFx0XHRcdHV2cy5wdXNoKCBpeCAvIGdyaWRYICk7XG5cdFx0XHRcdFx0dXZzLnB1c2goIDEgLSAoIGl5IC8gZ3JpZFkgKSApO1xuXG5cdFx0XHRcdFx0Ly8gY291bnRlcnNcblxuXHRcdFx0XHRcdHZlcnRleENvdW50ZXIgKz0gMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaW5kaWNlc1xuXG5cdFx0XHQvLyAxLiB5b3UgbmVlZCB0aHJlZSBpbmRpY2VzIHRvIGRyYXcgYSBzaW5nbGUgZmFjZVxuXHRcdFx0Ly8gMi4gYSBzaW5nbGUgc2VnbWVudCBjb25zaXN0cyBvZiB0d28gZmFjZXNcblx0XHRcdC8vIDMuIHNvIHdlIG5lZWQgdG8gZ2VuZXJhdGUgc2l4ICgyKjMpIGluZGljZXMgcGVyIHNlZ21lbnRcblxuXHRcdFx0Zm9yICggbGV0IGl5ID0gMDsgaXkgPCBncmlkWTsgaXkgKysgKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPCBncmlkWDsgaXggKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogaXk7XG5cdFx0XHRcdFx0Y29uc3QgYiA9IG51bWJlck9mVmVydGljZXMgKyBpeCArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdFx0Y29uc3QgYyA9IG51bWJlck9mVmVydGljZXMgKyAoIGl4ICsgMSApICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdFx0XHRjb25zdCBkID0gbnVtYmVyT2ZWZXJ0aWNlcyArICggaXggKyAxICkgKyBncmlkWDEgKiBpeTtcblxuXHRcdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0XHRcdC8vIGluY3JlYXNlIGNvdW50ZXJcblxuXHRcdFx0XHRcdGdyb3VwQ291bnQgKz0gNjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gYWRkIGEgZ3JvdXAgdG8gdGhlIGdlb21ldHJ5LiB0aGlzIHdpbGwgZW5zdXJlIG11bHRpIG1hdGVyaWFsIHN1cHBvcnRcblxuXHRcdFx0c2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIG1hdGVyaWFsSW5kZXggKTtcblxuXHRcdFx0Ly8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzXG5cblx0XHRcdGdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDtcblxuXHRcdFx0Ly8gdXBkYXRlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlc1xuXG5cdFx0XHRudW1iZXJPZlZlcnRpY2VzICs9IHZlcnRleENvdW50ZXI7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBCb3hHZW9tZXRyeSggZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQsIGRhdGEuZGVwdGgsIGRhdGEud2lkdGhTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5kZXB0aFNlZ21lbnRzICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEJveEdlb21ldHJ5IH07XG4iLCJpbXBvcnQgeyBDb2xvck1hbmFnZW1lbnQgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yTWFuYWdlbWVudC5qcyc7XG5cbi8qKlxuICogVW5pZm9ybSBVdGlsaXRpZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVVbmlmb3Jtcyggc3JjICkge1xuXG5cdGNvbnN0IGRzdCA9IHt9O1xuXG5cdGZvciAoIGNvbnN0IHUgaW4gc3JjICkge1xuXG5cdFx0ZHN0WyB1IF0gPSB7fTtcblxuXHRcdGZvciAoIGNvbnN0IHAgaW4gc3JjWyB1IF0gKSB7XG5cblx0XHRcdGNvbnN0IHByb3BlcnR5ID0gc3JjWyB1IF1bIHAgXTtcblxuXHRcdFx0aWYgKCBwcm9wZXJ0eSAmJiAoIHByb3BlcnR5LmlzQ29sb3IgfHxcblx0XHRcdFx0cHJvcGVydHkuaXNNYXRyaXgzIHx8IHByb3BlcnR5LmlzTWF0cml4NCB8fFxuXHRcdFx0XHRwcm9wZXJ0eS5pc1ZlY3RvcjIgfHwgcHJvcGVydHkuaXNWZWN0b3IzIHx8IHByb3BlcnR5LmlzVmVjdG9yNCB8fFxuXHRcdFx0XHRwcm9wZXJ0eS5pc1RleHR1cmUgfHwgcHJvcGVydHkuaXNRdWF0ZXJuaW9uICkgKSB7XG5cblx0XHRcdFx0aWYgKCBwcm9wZXJ0eS5pc1JlbmRlclRhcmdldFRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdVbmlmb3Jtc1V0aWxzOiBUZXh0dXJlcyBvZiByZW5kZXIgdGFyZ2V0cyBjYW5ub3QgYmUgY2xvbmVkIHZpYSBjbG9uZVVuaWZvcm1zKCkgb3IgbWVyZ2VVbmlmb3JtcygpLicgKTtcblx0XHRcdFx0XHRkc3RbIHUgXVsgcCBdID0gbnVsbDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5LmNsb25lKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCBwcm9wZXJ0eSApICkge1xuXG5cdFx0XHRcdGRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eS5zbGljZSgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZHN0O1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVVuaWZvcm1zKCB1bmlmb3JtcyApIHtcblxuXHRjb25zdCBtZXJnZWQgPSB7fTtcblxuXHRmb3IgKCBsZXQgdSA9IDA7IHUgPCB1bmlmb3Jtcy5sZW5ndGg7IHUgKysgKSB7XG5cblx0XHRjb25zdCB0bXAgPSBjbG9uZVVuaWZvcm1zKCB1bmlmb3Jtc1sgdSBdICk7XG5cblx0XHRmb3IgKCBjb25zdCBwIGluIHRtcCApIHtcblxuXHRcdFx0bWVyZ2VkWyBwIF0gPSB0bXBbIHAgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIG1lcmdlZDtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVVbmlmb3Jtc0dyb3Vwcyggc3JjICkge1xuXG5cdGNvbnN0IGRzdCA9IFtdO1xuXG5cdGZvciAoIGxldCB1ID0gMDsgdSA8IHNyYy5sZW5ndGg7IHUgKysgKSB7XG5cblx0XHRkc3QucHVzaCggc3JjWyB1IF0uY2xvbmUoKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gZHN0O1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbmxpdFVuaWZvcm1Db2xvclNwYWNlKCByZW5kZXJlciApIHtcblxuXHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0aWYgKCBjdXJyZW50UmVuZGVyVGFyZ2V0ID09PSBudWxsICkge1xuXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzIzOTM3I2lzc3VlY29tbWVudC0xMTExMDY3Mzk4XG5cdFx0cmV0dXJuIHJlbmRlcmVyLm91dHB1dENvbG9yU3BhY2U7XG5cblx0fVxuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzI3ODY4XG5cdGlmICggY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICkge1xuXG5cdFx0cmV0dXJuIGN1cnJlbnRSZW5kZXJUYXJnZXQudGV4dHVyZS5jb2xvclNwYWNlO1xuXG5cdH1cblxuXHRyZXR1cm4gQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlO1xuXG59XG5cbi8vIExlZ2FjeVxuXG5jb25zdCBVbmlmb3Jtc1V0aWxzID0geyBjbG9uZTogY2xvbmVVbmlmb3JtcywgbWVyZ2U6IG1lcmdlVW5pZm9ybXMgfTtcblxuZXhwb3J0IHsgVW5pZm9ybXNVdGlscyB9O1xuIiwiaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsLmpzJztcbmltcG9ydCB7IGNsb25lVW5pZm9ybXMsIGNsb25lVW5pZm9ybXNHcm91cHMgfSBmcm9tICcuLi9yZW5kZXJlcnMvc2hhZGVycy9Vbmlmb3Jtc1V0aWxzLmpzJztcblxuaW1wb3J0IGRlZmF1bHRfdmVydGV4IGZyb20gJy4uL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckNodW5rL2RlZmF1bHRfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IGRlZmF1bHRfZnJhZ21lbnQgZnJvbSAnLi4vcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyQ2h1bmsvZGVmYXVsdF9mcmFnbWVudC5nbHNsLmpzJztcblxuY2xhc3MgU2hhZGVyTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdTaGFkZXJNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7fTtcblx0XHR0aGlzLnVuaWZvcm1zID0ge307XG5cdFx0dGhpcy51bmlmb3Jtc0dyb3VwcyA9IFtdO1xuXG5cdFx0dGhpcy52ZXJ0ZXhTaGFkZXIgPSBkZWZhdWx0X3ZlcnRleDtcblx0XHR0aGlzLmZyYWdtZW50U2hhZGVyID0gZGVmYXVsdF9mcmFnbWVudDtcblxuXHRcdHRoaXMubGluZXdpZHRoID0gMTtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdFx0dGhpcy5mb2cgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSBzY2VuZSBmb2dcblx0XHR0aGlzLmxpZ2h0cyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIHNjZW5lIGxpZ2h0c1xuXHRcdHRoaXMuY2xpcHBpbmcgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSB1c2VyLWRlZmluZWQgY2xpcHBpbmcgcGxhbmVzXG5cblx0XHR0aGlzLmZvcmNlU2luZ2xlUGFzcyA9IHRydWU7XG5cblx0XHR0aGlzLmV4dGVuc2lvbnMgPSB7XG5cdFx0XHRjbGlwQ3VsbERpc3RhbmNlOiBmYWxzZSwgLy8gc2V0IHRvIHVzZSB2ZXJ0ZXggc2hhZGVyIGNsaXBwaW5nXG5cdFx0XHRtdWx0aURyYXc6IGZhbHNlIC8vIHNldCB0byB1c2UgdmVydGV4IHNoYWRlciBtdWx0aV9kcmF3IC8gZW5hYmxlIGdsX0RyYXdJRFxuXHRcdH07XG5cblx0XHQvLyBXaGVuIHJlbmRlcmVkIGdlb21ldHJ5IGRvZXNuJ3QgaW5jbHVkZSB0aGVzZSBhdHRyaWJ1dGVzIGJ1dCB0aGUgbWF0ZXJpYWwgZG9lcyxcblx0XHQvLyB1c2UgdGhlc2UgZGVmYXVsdCB2YWx1ZXMgaW4gV2ViR0wuIFRoaXMgYXZvaWRzIGVycm9ycyB3aGVuIGJ1ZmZlciBkYXRhIGlzIG1pc3NpbmcuXG5cdFx0dGhpcy5kZWZhdWx0QXR0cmlidXRlVmFsdWVzID0ge1xuXHRcdFx0J2NvbG9yJzogWyAxLCAxLCAxIF0sXG5cdFx0XHQndXYnOiBbIDAsIDAgXSxcblx0XHRcdCd1djEnOiBbIDAsIDAgXVxuXHRcdH07XG5cblx0XHR0aGlzLmluZGV4MEF0dHJpYnV0ZU5hbWUgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuZ2xzbFZlcnNpb24gPSBudWxsO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5mcmFnbWVudFNoYWRlciA9IHNvdXJjZS5mcmFnbWVudFNoYWRlcjtcblx0XHR0aGlzLnZlcnRleFNoYWRlciA9IHNvdXJjZS52ZXJ0ZXhTaGFkZXI7XG5cblx0XHR0aGlzLnVuaWZvcm1zID0gY2xvbmVVbmlmb3Jtcyggc291cmNlLnVuaWZvcm1zICk7XG5cdFx0dGhpcy51bmlmb3Jtc0dyb3VwcyA9IGNsb25lVW5pZm9ybXNHcm91cHMoIHNvdXJjZS51bmlmb3Jtc0dyb3VwcyApO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5kZWZpbmVzICk7XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXG5cdFx0dGhpcy5mb2cgPSBzb3VyY2UuZm9nO1xuXHRcdHRoaXMubGlnaHRzID0gc291cmNlLmxpZ2h0cztcblx0XHR0aGlzLmNsaXBwaW5nID0gc291cmNlLmNsaXBwaW5nO1xuXG5cdFx0dGhpcy5leHRlbnNpb25zID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5leHRlbnNpb25zICk7XG5cblx0XHR0aGlzLmdsc2xWZXJzaW9uID0gc291cmNlLmdsc2xWZXJzaW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcblxuXHRcdGRhdGEuZ2xzbFZlcnNpb24gPSB0aGlzLmdsc2xWZXJzaW9uO1xuXHRcdGRhdGEudW5pZm9ybXMgPSB7fTtcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gdGhpcy51bmlmb3JtcyApIHtcblxuXHRcdFx0Y29uc3QgdW5pZm9ybSA9IHRoaXMudW5pZm9ybXNbIG5hbWUgXTtcblx0XHRcdGNvbnN0IHZhbHVlID0gdW5pZm9ybS52YWx1ZTtcblxuXHRcdFx0aWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1RleHR1cmUgKSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHR5cGU6ICd0Jyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9KU09OKCBtZXRhICkudXVpZFxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0XHR0eXBlOiAnYycsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlLmdldEhleCgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yMiApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ3YyJyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yMyApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ3YzJyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yNCApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ3Y0Jyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzTWF0cml4MyApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ20zJyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzTWF0cml4NCApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ200Jyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIG5vdGU6IHRoZSBhcnJheSB2YXJpYW50cyB2MnYsIHYzdiwgdjR2LCBtNHYgYW5kIHR2IGFyZSBub3Qgc3VwcG9ydGVkIHNvIGZhclxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLmRlZmluZXMgKS5sZW5ndGggPiAwICkgZGF0YS5kZWZpbmVzID0gdGhpcy5kZWZpbmVzO1xuXG5cdFx0ZGF0YS52ZXJ0ZXhTaGFkZXIgPSB0aGlzLnZlcnRleFNoYWRlcjtcblx0XHRkYXRhLmZyYWdtZW50U2hhZGVyID0gdGhpcy5mcmFnbWVudFNoYWRlcjtcblxuXHRcdGRhdGEubGlnaHRzID0gdGhpcy5saWdodHM7XG5cdFx0ZGF0YS5jbGlwcGluZyA9IHRoaXMuY2xpcHBpbmc7XG5cblx0XHRjb25zdCBleHRlbnNpb25zID0ge307XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gdGhpcy5leHRlbnNpb25zICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuZXh0ZW5zaW9uc1sga2V5IF0gPT09IHRydWUgKSBleHRlbnNpb25zWyBrZXkgXSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCBleHRlbnNpb25zICkubGVuZ3RoID4gMCApIGRhdGEuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgU2hhZGVyTWF0ZXJpYWwgfTtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG52b2lkIG1haW4oKSB7XG5cdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcbn1cbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxudm9pZCBtYWluKCkge1xuXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMC4wLCAxLjAgKTtcbn1cbmA7XG4iLCJpbXBvcnQgeyBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xuXG5jbGFzcyBDYW1lcmEgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc0NhbWVyYSA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2FtZXJhJztcblxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHR0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSBXZWJHTENvb3JkaW5hdGVTeXN0ZW07XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBzb3VyY2UucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggc291cmNlLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XG5cblx0XHR0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSBzb3VyY2UuY29vcmRpbmF0ZVN5c3RlbTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRXb3JsZERpcmVjdGlvbiggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHN1cGVyLmdldFdvcmxkRGlyZWN0aW9uKCB0YXJnZXQgKS5uZWdhdGUoKTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCB0aGlzLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0fVxuXG5cdHVwZGF0ZVdvcmxkTWF0cml4KCB1cGRhdGVQYXJlbnRzLCB1cGRhdGVDaGlsZHJlbiApIHtcblxuXHRcdHN1cGVyLnVwZGF0ZVdvcmxkTWF0cml4KCB1cGRhdGVQYXJlbnRzLCB1cGRhdGVDaGlsZHJlbiApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQ2FtZXJhIH07XG4iLCJpbXBvcnQgeyBDYW1lcmEgfSBmcm9tICcuL0NhbWVyYS5qcyc7XG5pbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcblxuY29uc3QgX3YzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX21pblRhcmdldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IF9tYXhUYXJnZXQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5cblxuY2xhc3MgUGVyc3BlY3RpdmVDYW1lcmEgZXh0ZW5kcyBDYW1lcmEge1xuXG5cdGNvbnN0cnVjdG9yKCBmb3YgPSA1MCwgYXNwZWN0ID0gMSwgbmVhciA9IDAuMSwgZmFyID0gMjAwMCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzUGVyc3BlY3RpdmVDYW1lcmEgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BlcnNwZWN0aXZlQ2FtZXJhJztcblxuXHRcdHRoaXMuZm92ID0gZm92O1xuXHRcdHRoaXMuem9vbSA9IDE7XG5cblx0XHR0aGlzLm5lYXIgPSBuZWFyO1xuXHRcdHRoaXMuZmFyID0gZmFyO1xuXHRcdHRoaXMuZm9jdXMgPSAxMDtcblxuXHRcdHRoaXMuYXNwZWN0ID0gYXNwZWN0O1xuXHRcdHRoaXMudmlldyA9IG51bGw7XG5cblx0XHR0aGlzLmZpbG1HYXVnZSA9IDM1O1x0Ly8gd2lkdGggb2YgdGhlIGZpbG0gKGRlZmF1bHQgaW4gbWlsbGltZXRlcnMpXG5cdFx0dGhpcy5maWxtT2Zmc2V0ID0gMDtcdC8vIGhvcml6b250YWwgZmlsbSBvZmZzZXQgKHNhbWUgdW5pdCBhcyBnYXVnZSlcblxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLmZvdiA9IHNvdXJjZS5mb3Y7XG5cdFx0dGhpcy56b29tID0gc291cmNlLnpvb207XG5cblx0XHR0aGlzLm5lYXIgPSBzb3VyY2UubmVhcjtcblx0XHR0aGlzLmZhciA9IHNvdXJjZS5mYXI7XG5cdFx0dGhpcy5mb2N1cyA9IHNvdXJjZS5mb2N1cztcblxuXHRcdHRoaXMuYXNwZWN0ID0gc291cmNlLmFzcGVjdDtcblx0XHR0aGlzLnZpZXcgPSBzb3VyY2UudmlldyA9PT0gbnVsbCA/IG51bGwgOiBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnZpZXcgKTtcblxuXHRcdHRoaXMuZmlsbUdhdWdlID0gc291cmNlLmZpbG1HYXVnZTtcblx0XHR0aGlzLmZpbG1PZmZzZXQgPSBzb3VyY2UuZmlsbU9mZnNldDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgRk9WIGJ5IGZvY2FsIGxlbmd0aCBpbiByZXNwZWN0IHRvIHRoZSBjdXJyZW50IC5maWxtR2F1Z2UuXG5cdCAqXG5cdCAqIFRoZSBkZWZhdWx0IGZpbG0gZ2F1Z2UgaXMgMzUsIHNvIHRoYXQgdGhlIGZvY2FsIGxlbmd0aCBjYW4gYmUgc3BlY2lmaWVkIGZvclxuXHQgKiBhIDM1bW0gKGZ1bGwgZnJhbWUpIGNhbWVyYS5cblx0ICpcblx0ICogVmFsdWVzIGZvciBmb2NhbCBsZW5ndGggYW5kIGZpbG0gZ2F1Z2UgbXVzdCBoYXZlIHRoZSBzYW1lIHVuaXQuXG5cdCAqL1xuXHRzZXRGb2NhbExlbmd0aCggZm9jYWxMZW5ndGggKSB7XG5cblx0XHQvKiogc2VlIHtAbGluayBodHRwOi8vd3d3LmJvYmF0a2lucy5jb20vcGhvdG9ncmFwaHkvdGVjaG5pY2FsL2ZpZWxkX29mX3ZpZXcuaHRtbH0gKi9cblx0XHRjb25zdCB2RXh0ZW50U2xvcGUgPSAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIGZvY2FsTGVuZ3RoO1xuXG5cdFx0dGhpcy5mb3YgPSBNYXRoVXRpbHMuUkFEMkRFRyAqIDIgKiBNYXRoLmF0YW4oIHZFeHRlbnRTbG9wZSApO1xuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2FsY3VsYXRlcyB0aGUgZm9jYWwgbGVuZ3RoIGZyb20gdGhlIGN1cnJlbnQgLmZvdiBhbmQgLmZpbG1HYXVnZS5cblx0ICovXG5cdGdldEZvY2FsTGVuZ3RoKCkge1xuXG5cdFx0Y29uc3QgdkV4dGVudFNsb3BlID0gTWF0aC50YW4oIE1hdGhVdGlscy5ERUcyUkFEICogMC41ICogdGhpcy5mb3YgKTtcblxuXHRcdHJldHVybiAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIHZFeHRlbnRTbG9wZTtcblxuXHR9XG5cblx0Z2V0RWZmZWN0aXZlRk9WKCkge1xuXG5cdFx0cmV0dXJuIE1hdGhVdGlscy5SQUQyREVHICogMiAqIE1hdGguYXRhbihcblx0XHRcdE1hdGgudGFuKCBNYXRoVXRpbHMuREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICkgLyB0aGlzLnpvb20gKTtcblxuXHR9XG5cblx0Z2V0RmlsbVdpZHRoKCkge1xuXG5cdFx0Ly8gZmlsbSBub3QgY29tcGxldGVseSBjb3ZlcmVkIGluIHBvcnRyYWl0IGZvcm1hdCAoYXNwZWN0IDwgMSlcblx0XHRyZXR1cm4gdGhpcy5maWxtR2F1Z2UgKiBNYXRoLm1pbiggdGhpcy5hc3BlY3QsIDEgKTtcblxuXHR9XG5cblx0Z2V0RmlsbUhlaWdodCgpIHtcblxuXHRcdC8vIGZpbG0gbm90IGNvbXBsZXRlbHkgY292ZXJlZCBpbiBsYW5kc2NhcGUgZm9ybWF0IChhc3BlY3QgPiAxKVxuXHRcdHJldHVybiB0aGlzLmZpbG1HYXVnZSAvIE1hdGgubWF4KCB0aGlzLmFzcGVjdCwgMSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIDJEIGJvdW5kcyBvZiB0aGUgY2FtZXJhJ3Mgdmlld2FibGUgcmVjdGFuZ2xlIGF0IGEgZ2l2ZW4gZGlzdGFuY2UgYWxvbmcgdGhlIHZpZXdpbmcgZGlyZWN0aW9uLlxuXHQgKiBTZXRzIG1pblRhcmdldCBhbmQgbWF4VGFyZ2V0IHRvIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgbG93ZXItbGVmdCBhbmQgdXBwZXItcmlnaHQgY29ybmVycyBvZiB0aGUgdmlldyByZWN0YW5nbGUuXG5cdCAqL1xuXHRnZXRWaWV3Qm91bmRzKCBkaXN0YW5jZSwgbWluVGFyZ2V0LCBtYXhUYXJnZXQgKSB7XG5cblx0XHRfdjMuc2V0KCAtIDEsIC0gMSwgMC41ICkuYXBwbHlNYXRyaXg0KCB0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XG5cblx0XHRtaW5UYXJnZXQuc2V0KCBfdjMueCwgX3YzLnkgKS5tdWx0aXBseVNjYWxhciggLSBkaXN0YW5jZSAvIF92My56ICk7XG5cblx0XHRfdjMuc2V0KCAxLCAxLCAwLjUgKS5hcHBseU1hdHJpeDQoIHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTtcblxuXHRcdG1heFRhcmdldC5zZXQoIF92My54LCBfdjMueSApLm11bHRpcGx5U2NhbGFyKCAtIGRpc3RhbmNlIC8gX3YzLnogKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBjYW1lcmEncyB2aWV3YWJsZSByZWN0YW5nbGUgYXQgYSBnaXZlbiBkaXN0YW5jZSBhbG9uZyB0aGUgdmlld2luZyBkaXJlY3Rpb24uXG5cdCAqIENvcGllcyB0aGUgcmVzdWx0IGludG8gdGhlIHRhcmdldCBWZWN0b3IyLCB3aGVyZSB4IGlzIHdpZHRoIGFuZCB5IGlzIGhlaWdodC5cblx0ICovXG5cdGdldFZpZXdTaXplKCBkaXN0YW5jZSwgdGFyZ2V0ICkge1xuXG5cdFx0dGhpcy5nZXRWaWV3Qm91bmRzKCBkaXN0YW5jZSwgX21pblRhcmdldCwgX21heFRhcmdldCApO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zdWJWZWN0b3JzKCBfbWF4VGFyZ2V0LCBfbWluVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGFuIG9mZnNldCBpbiBhIGxhcmdlciBmcnVzdHVtLiBUaGlzIGlzIHVzZWZ1bCBmb3IgbXVsdGktd2luZG93IG9yXG5cdCAqIG11bHRpLW1vbml0b3IvbXVsdGktbWFjaGluZSBzZXR1cHMuXG5cdCAqXG5cdCAqIEZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSAzeDIgbW9uaXRvcnMgYW5kIGVhY2ggbW9uaXRvciBpcyAxOTIweDEwODAgYW5kXG5cdCAqIHRoZSBtb25pdG9ycyBhcmUgaW4gZ3JpZCBsaWtlIHRoaXNcblx0ICpcblx0ICogICArLS0tKy0tLSstLS0rXG5cdCAqICAgfCBBIHwgQiB8IEMgfFxuXHQgKiAgICstLS0rLS0tKy0tLStcblx0ICogICB8IEQgfCBFIHwgRiB8XG5cdCAqICAgKy0tLSstLS0rLS0tK1xuXHQgKlxuXHQgKiB0aGVuIGZvciBlYWNoIG1vbml0b3IgeW91IHdvdWxkIGNhbGwgaXQgbGlrZSB0aGlzXG5cdCAqXG5cdCAqICAgY29uc3QgdyA9IDE5MjA7XG5cdCAqICAgY29uc3QgaCA9IDEwODA7XG5cdCAqICAgY29uc3QgZnVsbFdpZHRoID0gdyAqIDM7XG5cdCAqICAgY29uc3QgZnVsbEhlaWdodCA9IGggKiAyO1xuXHQgKlxuXHQgKiAgIC0tQS0tXG5cdCAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAwLCB3LCBoICk7XG5cdCAqICAgLS1CLS1cblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMSwgaCAqIDAsIHcsIGggKTtcblx0ICogICAtLUMtLVxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAyLCBoICogMCwgdywgaCApO1xuXHQgKiAgIC0tRC0tXG5cdCAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAxLCB3LCBoICk7XG5cdCAqICAgLS1FLS1cblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMSwgaCAqIDEsIHcsIGggKTtcblx0ICogICAtLUYtLVxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAyLCBoICogMSwgdywgaCApO1xuXHQgKlxuXHQgKiAgIE5vdGUgdGhlcmUgaXMgbm8gcmVhc29uIG1vbml0b3JzIGhhdmUgdG8gYmUgdGhlIHNhbWUgc2l6ZSBvciBpbiBhIGdyaWQuXG5cdCAqL1xuXHRzZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHR0aGlzLmFzcGVjdCA9IGZ1bGxXaWR0aCAvIGZ1bGxIZWlnaHQ7XG5cblx0XHRpZiAoIHRoaXMudmlldyA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52aWV3ID0ge1xuXHRcdFx0XHRlbmFibGVkOiB0cnVlLFxuXHRcdFx0XHRmdWxsV2lkdGg6IDEsXG5cdFx0XHRcdGZ1bGxIZWlnaHQ6IDEsXG5cdFx0XHRcdG9mZnNldFg6IDAsXG5cdFx0XHRcdG9mZnNldFk6IDAsXG5cdFx0XHRcdHdpZHRoOiAxLFxuXHRcdFx0XHRoZWlnaHQ6IDFcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7XG5cdFx0dGhpcy52aWV3LmZ1bGxXaWR0aCA9IGZ1bGxXaWR0aDtcblx0XHR0aGlzLnZpZXcuZnVsbEhlaWdodCA9IGZ1bGxIZWlnaHQ7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFggPSB4O1xuXHRcdHRoaXMudmlldy5vZmZzZXRZID0geTtcblx0XHR0aGlzLnZpZXcud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fVxuXG5cdGNsZWFyVmlld09mZnNldCgpIHtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fVxuXG5cdHVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKSB7XG5cblx0XHRjb25zdCBuZWFyID0gdGhpcy5uZWFyO1xuXHRcdGxldCB0b3AgPSBuZWFyICogTWF0aC50YW4oIE1hdGhVdGlscy5ERUcyUkFEICogMC41ICogdGhpcy5mb3YgKSAvIHRoaXMuem9vbTtcblx0XHRsZXQgaGVpZ2h0ID0gMiAqIHRvcDtcblx0XHRsZXQgd2lkdGggPSB0aGlzLmFzcGVjdCAqIGhlaWdodDtcblx0XHRsZXQgbGVmdCA9IC0gMC41ICogd2lkdGg7XG5cdFx0Y29uc3QgdmlldyA9IHRoaXMudmlldztcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICYmIHRoaXMudmlldy5lbmFibGVkICkge1xuXG5cdFx0XHRjb25zdCBmdWxsV2lkdGggPSB2aWV3LmZ1bGxXaWR0aCxcblx0XHRcdFx0ZnVsbEhlaWdodCA9IHZpZXcuZnVsbEhlaWdodDtcblxuXHRcdFx0bGVmdCArPSB2aWV3Lm9mZnNldFggKiB3aWR0aCAvIGZ1bGxXaWR0aDtcblx0XHRcdHRvcCAtPSB2aWV3Lm9mZnNldFkgKiBoZWlnaHQgLyBmdWxsSGVpZ2h0O1xuXHRcdFx0d2lkdGggKj0gdmlldy53aWR0aCAvIGZ1bGxXaWR0aDtcblx0XHRcdGhlaWdodCAqPSB2aWV3LmhlaWdodCAvIGZ1bGxIZWlnaHQ7XG5cblx0XHR9XG5cblx0XHRjb25zdCBza2V3ID0gdGhpcy5maWxtT2Zmc2V0O1xuXHRcdGlmICggc2tldyAhPT0gMCApIGxlZnQgKz0gbmVhciAqIHNrZXcgLyB0aGlzLmdldEZpbG1XaWR0aCgpO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgbGVmdCArIHdpZHRoLCB0b3AsIHRvcCAtIGhlaWdodCwgbmVhciwgdGhpcy5mYXIsIHRoaXMuY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCB0aGlzLnByb2plY3Rpb25NYXRyaXggKS5pbnZlcnQoKTtcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3QuZm92ID0gdGhpcy5mb3Y7XG5cdFx0ZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTtcblxuXHRcdGRhdGEub2JqZWN0Lm5lYXIgPSB0aGlzLm5lYXI7XG5cdFx0ZGF0YS5vYmplY3QuZmFyID0gdGhpcy5mYXI7XG5cdFx0ZGF0YS5vYmplY3QuZm9jdXMgPSB0aGlzLmZvY3VzO1xuXG5cdFx0ZGF0YS5vYmplY3QuYXNwZWN0ID0gdGhpcy5hc3BlY3Q7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIGRhdGEub2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgdGhpcy52aWV3ICk7XG5cblx0XHRkYXRhLm9iamVjdC5maWxtR2F1Z2UgPSB0aGlzLmZpbG1HYXVnZTtcblx0XHRkYXRhLm9iamVjdC5maWxtT2Zmc2V0ID0gdGhpcy5maWxtT2Zmc2V0O1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhIH07XG4iLCJpbXBvcnQgeyBXZWJHTENvb3JkaW5hdGVTeXN0ZW0sIFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcbmltcG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhIH0gZnJvbSAnLi9QZXJzcGVjdGl2ZUNhbWVyYS5qcyc7XG5cbmNvbnN0IGZvdiA9IC0gOTA7IC8vIG5lZ2F0aXZlIGZvdiBpcyBub3QgYW4gZXJyb3JcbmNvbnN0IGFzcGVjdCA9IDE7XG5cbmNsYXNzIEN1YmVDYW1lcmEgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoIG5lYXIsIGZhciwgcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDdWJlQ2FtZXJhJztcblxuXHRcdHRoaXMucmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0O1xuXHRcdHRoaXMuY29vcmRpbmF0ZVN5c3RlbSA9IG51bGw7XG5cdFx0dGhpcy5hY3RpdmVNaXBtYXBMZXZlbCA9IDA7XG5cblx0XHRjb25zdCBjYW1lcmFQWCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRcdGNhbWVyYVBYLmxheWVycyA9IHRoaXMubGF5ZXJzO1xuXHRcdHRoaXMuYWRkKCBjYW1lcmFQWCApO1xuXG5cdFx0Y29uc3QgY2FtZXJhTlggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0XHRjYW1lcmFOWC5sYXllcnMgPSB0aGlzLmxheWVycztcblx0XHR0aGlzLmFkZCggY2FtZXJhTlggKTtcblxuXHRcdGNvbnN0IGNhbWVyYVBZID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y2FtZXJhUFkubGF5ZXJzID0gdGhpcy5sYXllcnM7XG5cdFx0dGhpcy5hZGQoIGNhbWVyYVBZICk7XG5cblx0XHRjb25zdCBjYW1lcmFOWSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRcdGNhbWVyYU5ZLmxheWVycyA9IHRoaXMubGF5ZXJzO1xuXHRcdHRoaXMuYWRkKCBjYW1lcmFOWSApO1xuXG5cdFx0Y29uc3QgY2FtZXJhUFogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0XHRjYW1lcmFQWi5sYXllcnMgPSB0aGlzLmxheWVycztcblx0XHR0aGlzLmFkZCggY2FtZXJhUFogKTtcblxuXHRcdGNvbnN0IGNhbWVyYU5aID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y2FtZXJhTloubGF5ZXJzID0gdGhpcy5sYXllcnM7XG5cdFx0dGhpcy5hZGQoIGNhbWVyYU5aICk7XG5cblx0fVxuXG5cdHVwZGF0ZUNvb3JkaW5hdGVTeXN0ZW0oKSB7XG5cblx0XHRjb25zdCBjb29yZGluYXRlU3lzdGVtID0gdGhpcy5jb29yZGluYXRlU3lzdGVtO1xuXG5cdFx0Y29uc3QgY2FtZXJhcyA9IHRoaXMuY2hpbGRyZW4uY29uY2F0KCk7XG5cblx0XHRjb25zdCBbIGNhbWVyYVBYLCBjYW1lcmFOWCwgY2FtZXJhUFksIGNhbWVyYU5ZLCBjYW1lcmFQWiwgY2FtZXJhTlogXSA9IGNhbWVyYXM7XG5cblx0XHRmb3IgKCBjb25zdCBjYW1lcmEgb2YgY2FtZXJhcyApIHRoaXMucmVtb3ZlKCBjYW1lcmEgKTtcblxuXHRcdGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHRjYW1lcmFQWC51cC5zZXQoIDAsIDEsIDAgKTtcblx0XHRcdGNhbWVyYVBYLmxvb2tBdCggMSwgMCwgMCApO1xuXG5cdFx0XHRjYW1lcmFOWC51cC5zZXQoIDAsIDEsIDAgKTtcblx0XHRcdGNhbWVyYU5YLmxvb2tBdCggLSAxLCAwLCAwICk7XG5cblx0XHRcdGNhbWVyYVBZLnVwLnNldCggMCwgMCwgLSAxICk7XG5cdFx0XHRjYW1lcmFQWS5sb29rQXQoIDAsIDEsIDAgKTtcblxuXHRcdFx0Y2FtZXJhTlkudXAuc2V0KCAwLCAwLCAxICk7XG5cdFx0XHRjYW1lcmFOWS5sb29rQXQoIDAsIC0gMSwgMCApO1xuXG5cdFx0XHRjYW1lcmFQWi51cC5zZXQoIDAsIDEsIDAgKTtcblx0XHRcdGNhbWVyYVBaLmxvb2tBdCggMCwgMCwgMSApO1xuXG5cdFx0XHRjYW1lcmFOWi51cC5zZXQoIDAsIDEsIDAgKTtcblx0XHRcdGNhbWVyYU5aLmxvb2tBdCggMCwgMCwgLSAxICk7XG5cblx0XHR9IGVsc2UgaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHUFVDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHRjYW1lcmFQWC51cC5zZXQoIDAsIC0gMSwgMCApO1xuXHRcdFx0Y2FtZXJhUFgubG9va0F0KCAtIDEsIDAsIDAgKTtcblxuXHRcdFx0Y2FtZXJhTlgudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0XHRcdGNhbWVyYU5YLmxvb2tBdCggMSwgMCwgMCApO1xuXG5cdFx0XHRjYW1lcmFQWS51cC5zZXQoIDAsIDAsIDEgKTtcblx0XHRcdGNhbWVyYVBZLmxvb2tBdCggMCwgMSwgMCApO1xuXG5cdFx0XHRjYW1lcmFOWS51cC5zZXQoIDAsIDAsIC0gMSApO1xuXHRcdFx0Y2FtZXJhTlkubG9va0F0KCAwLCAtIDEsIDAgKTtcblxuXHRcdFx0Y2FtZXJhUFoudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0XHRcdGNhbWVyYVBaLmxvb2tBdCggMCwgMCwgMSApO1xuXG5cdFx0XHRjYW1lcmFOWi51cC5zZXQoIDAsIC0gMSwgMCApO1xuXHRcdFx0Y2FtZXJhTloubG9va0F0KCAwLCAwLCAtIDEgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkN1YmVDYW1lcmEudXBkYXRlQ29vcmRpbmF0ZVN5c3RlbSgpOiBJbnZhbGlkIGNvb3JkaW5hdGUgc3lzdGVtOiAnICsgY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggY29uc3QgY2FtZXJhIG9mIGNhbWVyYXMgKSB7XG5cblx0XHRcdHRoaXMuYWRkKCBjYW1lcmEgKTtcblxuXHRcdFx0Y2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHVwZGF0ZSggcmVuZGVyZXIsIHNjZW5lICkge1xuXG5cdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHRoaXMudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdGNvbnN0IHsgcmVuZGVyVGFyZ2V0LCBhY3RpdmVNaXBtYXBMZXZlbCB9ID0gdGhpcztcblxuXHRcdGlmICggdGhpcy5jb29yZGluYXRlU3lzdGVtICE9PSByZW5kZXJlci5jb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHR0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSByZW5kZXJlci5jb29yZGluYXRlU3lzdGVtO1xuXG5cdFx0XHR0aGlzLnVwZGF0ZUNvb3JkaW5hdGVTeXN0ZW0oKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IFsgY2FtZXJhUFgsIGNhbWVyYU5YLCBjYW1lcmFQWSwgY2FtZXJhTlksIGNhbWVyYVBaLCBjYW1lcmFOWiBdID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdGNvbnN0IGN1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblx0XHRjb25zdCBjdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSByZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpO1xuXHRcdGNvbnN0IGN1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCA9IHJlbmRlcmVyLmdldEFjdGl2ZU1pcG1hcExldmVsKCk7XG5cblx0XHRjb25zdCBjdXJyZW50WHJFbmFibGVkID0gcmVuZGVyZXIueHIuZW5hYmxlZDtcblxuXHRcdHJlbmRlcmVyLnhyLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGdlbmVyYXRlTWlwbWFwcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIDAsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFggKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAxLCBhY3RpdmVNaXBtYXBMZXZlbCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5YICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMiwgYWN0aXZlTWlwbWFwTGV2ZWwgKTtcblx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFQWSApO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIDMsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlkgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCA0LCBhY3RpdmVNaXBtYXBMZXZlbCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBaICk7XG5cblx0XHQvLyBtaXBtYXBzIGFyZSBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBsYXN0IGNhbGwgb2YgcmVuZGVyKClcblx0XHQvLyBhdCB0aGlzIHBvaW50LCBhbGwgc2lkZXMgb2YgdGhlIGN1YmUgcmVuZGVyIHRhcmdldCBhcmUgZGVmaW5lZFxuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIDUsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlogKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCwgY3VycmVudEFjdGl2ZUN1YmVGYWNlLCBjdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgKTtcblxuXHRcdHJlbmRlcmVyLnhyLmVuYWJsZWQgPSBjdXJyZW50WHJFbmFibGVkO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUubmVlZHNQTVJFTVVwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEN1YmVDYW1lcmEgfTtcbiIsImltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuL1RleHR1cmUuanMnO1xuaW1wb3J0IHsgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuY2xhc3MgQ3ViZVRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3RvciggaW1hZ2VzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGNvbG9yU3BhY2UgKSB7XG5cblx0XHRpbWFnZXMgPSBpbWFnZXMgIT09IHVuZGVmaW5lZCA/IGltYWdlcyA6IFtdO1xuXHRcdG1hcHBpbmcgPSBtYXBwaW5nICE9PSB1bmRlZmluZWQgPyBtYXBwaW5nIDogQ3ViZVJlZmxlY3Rpb25NYXBwaW5nO1xuXG5cdFx0c3VwZXIoIGltYWdlcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICk7XG5cblx0XHR0aGlzLmlzQ3ViZVRleHR1cmUgPSB0cnVlO1xuXG5cdFx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXG5cdH1cblxuXHRnZXQgaW1hZ2VzKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaW1hZ2U7XG5cblx0fVxuXG5cdHNldCBpbWFnZXMoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5pbWFnZSA9IHZhbHVlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBDdWJlVGV4dHVyZSB9O1xuIiwiaW1wb3J0IHsgQmFja1NpZGUsIExpbmVhckZpbHRlciwgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLCBOb0JsZW5kaW5nIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi9vYmplY3RzL01lc2guanMnO1xuaW1wb3J0IHsgQm94R2VvbWV0cnkgfSBmcm9tICcuLi9nZW9tZXRyaWVzL0JveEdlb21ldHJ5LmpzJztcbmltcG9ydCB7IFNoYWRlck1hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL1NoYWRlck1hdGVyaWFsLmpzJztcbmltcG9ydCB7IGNsb25lVW5pZm9ybXMgfSBmcm9tICcuL3NoYWRlcnMvVW5pZm9ybXNVdGlscy5qcyc7XG5pbXBvcnQgeyBXZWJHTFJlbmRlclRhcmdldCB9IGZyb20gJy4vV2ViR0xSZW5kZXJUYXJnZXQuanMnO1xuaW1wb3J0IHsgQ3ViZUNhbWVyYSB9IGZyb20gJy4uL2NhbWVyYXMvQ3ViZUNhbWVyYS5qcyc7XG5pbXBvcnQgeyBDdWJlVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL0N1YmVUZXh0dXJlLmpzJztcblxuY2xhc3MgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xuXG5cdGNvbnN0cnVjdG9yKCBzaXplID0gMSwgb3B0aW9ucyA9IHt9ICkge1xuXG5cdFx0c3VwZXIoIHNpemUsIHNpemUsIG9wdGlvbnMgKTtcblxuXHRcdHRoaXMuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5cdFx0Y29uc3QgaW1hZ2UgPSB7IHdpZHRoOiBzaXplLCBoZWlnaHQ6IHNpemUsIGRlcHRoOiAxIH07XG5cdFx0Y29uc3QgaW1hZ2VzID0gWyBpbWFnZSwgaW1hZ2UsIGltYWdlLCBpbWFnZSwgaW1hZ2UsIGltYWdlIF07XG5cblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoIGltYWdlcywgb3B0aW9ucy5tYXBwaW5nLCBvcHRpb25zLndyYXBTLCBvcHRpb25zLndyYXBULCBvcHRpb25zLm1hZ0ZpbHRlciwgb3B0aW9ucy5taW5GaWx0ZXIsIG9wdGlvbnMuZm9ybWF0LCBvcHRpb25zLnR5cGUsIG9wdGlvbnMuYW5pc290cm9weSwgb3B0aW9ucy5jb2xvclNwYWNlICk7XG5cblx0XHQvLyBCeSBjb252ZW50aW9uIC0tIGxpa2VseSBiYXNlZCBvbiB0aGUgUmVuZGVyTWFuIHNwZWMgZnJvbSB0aGUgMTk5MCdzIC0tIGN1YmUgbWFwcyBhcmUgc3BlY2lmaWVkIGJ5IFdlYkdMIChhbmQgdGhyZWUuanMpXG5cdFx0Ly8gaW4gYSBjb29yZGluYXRlIHN5c3RlbSBpbiB3aGljaCBwb3NpdGl2ZS14IGlzIHRvIHRoZSByaWdodCB3aGVuIGxvb2tpbmcgdXAgdGhlIHBvc2l0aXZlLXogYXhpcyAtLSBpbiBvdGhlciB3b3Jkcyxcblx0XHQvLyBpbiBhIGxlZnQtaGFuZGVkIGNvb3JkaW5hdGUgc3lzdGVtLiBCeSBjb250aW51aW5nIHRoaXMgY29udmVudGlvbiwgcHJlZXhpc3RpbmcgY3ViZSBtYXBzIGNvbnRpbnVlZCB0byByZW5kZXIgY29ycmVjdGx5LlxuXG5cdFx0Ly8gdGhyZWUuanMgdXNlcyBhIHJpZ2h0LWhhbmRlZCBjb29yZGluYXRlIHN5c3RlbS4gU28gZW52aXJvbm1lbnQgbWFwcyB1c2VkIGluIHRocmVlLmpzIGFwcGVhciB0byBoYXZlIHB4IGFuZCBueCBzd2FwcGVkXG5cdFx0Ly8gYW5kIHRoZSBmbGFnIGlzUmVuZGVyVGFyZ2V0VGV4dHVyZSBjb250cm9scyB0aGlzIGNvbnZlcnNpb24uIFRoZSBmbGlwIGlzIG5vdCByZXF1aXJlZCB3aGVuIHVzaW5nIFdlYkdMQ3ViZVJlbmRlclRhcmdldC50ZXh0dXJlXG5cdFx0Ly8gYXMgYSBjdWJlIHRleHR1cmUgKHRoaXMgaXMgZGV0ZWN0ZWQgd2hlbiBpc1JlbmRlclRhcmdldFRleHR1cmUgaXMgc2V0IHRvIHRydWUgZm9yIGN1YmUgdGV4dHVyZXMpLlxuXG5cdFx0dGhpcy50ZXh0dXJlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHRydWU7XG5cblx0XHR0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gb3B0aW9ucy5nZW5lcmF0ZU1pcG1hcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzIDogZmFsc2U7XG5cdFx0dGhpcy50ZXh0dXJlLm1pbkZpbHRlciA9IG9wdGlvbnMubWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1pbkZpbHRlciA6IExpbmVhckZpbHRlcjtcblxuXHR9XG5cblx0ZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUoIHJlbmRlcmVyLCB0ZXh0dXJlICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlLnR5cGUgPSB0ZXh0dXJlLnR5cGU7XG5cdFx0dGhpcy50ZXh0dXJlLmNvbG9yU3BhY2UgPSB0ZXh0dXJlLmNvbG9yU3BhY2U7XG5cblx0XHR0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XG5cdFx0dGhpcy50ZXh0dXJlLm1pbkZpbHRlciA9IHRleHR1cmUubWluRmlsdGVyO1xuXHRcdHRoaXMudGV4dHVyZS5tYWdGaWx0ZXIgPSB0ZXh0dXJlLm1hZ0ZpbHRlcjtcblxuXHRcdGNvbnN0IHNoYWRlciA9IHtcblxuXHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0dEVxdWlyZWN0OiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHR9LFxuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcblxuXHRcdFx0XHR2ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG5vcm1hbGl6ZSggKCBtYXRyaXggKiB2ZWM0KCBkaXIsIDAuMCApICkueHl6ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0XHRcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XG5cblx0XHRcdFx0XHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHRcdFx0XHRcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblxuXHRcdFx0XHR9XG5cdFx0XHRgLFxuXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogLyogZ2xzbCAqL2BcblxuXHRcdFx0XHR1bmlmb3JtIHNhbXBsZXIyRCB0RXF1aXJlY3Q7XG5cblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcblxuXHRcdFx0XHQjaW5jbHVkZSA8Y29tbW9uPlxuXG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0XHRcdHZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGREaXJlY3Rpb24gKTtcblxuXHRcdFx0XHRcdHZlYzIgc2FtcGxlVVYgPSBlcXVpcmVjdFV2KCBkaXJlY3Rpb24gKTtcblxuXHRcdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdEVxdWlyZWN0LCBzYW1wbGVVViApO1xuXG5cdFx0XHRcdH1cblx0XHRcdGBcblx0XHR9O1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQm94R2VvbWV0cnkoIDUsIDUsIDUgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cblx0XHRcdG5hbWU6ICdDdWJlbWFwRnJvbUVxdWlyZWN0JyxcblxuXHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIHNoYWRlci51bmlmb3JtcyApLFxuXHRcdFx0dmVydGV4U2hhZGVyOiBzaGFkZXIudmVydGV4U2hhZGVyLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHNoYWRlci5mcmFnbWVudFNoYWRlcixcblx0XHRcdHNpZGU6IEJhY2tTaWRlLFxuXHRcdFx0YmxlbmRpbmc6IE5vQmxlbmRpbmdcblxuXHRcdH0gKTtcblxuXHRcdG1hdGVyaWFsLnVuaWZvcm1zLnRFcXVpcmVjdC52YWx1ZSA9IHRleHR1cmU7XG5cblx0XHRjb25zdCBtZXNoID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0Y29uc3QgY3VycmVudE1pbkZpbHRlciA9IHRleHR1cmUubWluRmlsdGVyO1xuXG5cdFx0Ly8gQXZvaWQgYmx1cnJlZCBwb2xlc1xuXHRcdGlmICggdGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlciApIHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0Y29uc3QgY2FtZXJhID0gbmV3IEN1YmVDYW1lcmEoIDEsIDEwLCB0aGlzICk7XG5cdFx0Y2FtZXJhLnVwZGF0ZSggcmVuZGVyZXIsIG1lc2ggKTtcblxuXHRcdHRleHR1cmUubWluRmlsdGVyID0gY3VycmVudE1pbkZpbHRlcjtcblxuXHRcdG1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdG1lc2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsZWFyKCByZW5kZXJlciwgY29sb3IsIGRlcHRoLCBzdGVuY2lsICkge1xuXG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLCBpICk7XG5cblx0XHRcdHJlbmRlcmVyLmNsZWFyKCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKTtcblxuXHRcdH1cblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBXZWJHTEN1YmVSZW5kZXJUYXJnZXQgfTtcbiIsImltcG9ydCB7IE1hdHJpeDMgfSBmcm9tICcuL01hdHJpeDMuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMy5qcyc7XG5cbmNvbnN0IF92ZWN0b3IxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZlY3RvcjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbm9ybWFsTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpO1xuXG5jbGFzcyBQbGFuZSB7XG5cblx0Y29uc3RydWN0b3IoIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCAxLCAwLCAwICksIGNvbnN0YW50ID0gMCApIHtcblxuXHRcdHRoaXMuaXNQbGFuZSA9IHRydWU7XG5cblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHR0aGlzLm5vcm1hbCA9IG5vcm1hbDtcblx0XHR0aGlzLmNvbnN0YW50ID0gY29uc3RhbnQ7XG5cblx0fVxuXG5cdHNldCggbm9ybWFsLCBjb25zdGFudCApIHtcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIG5vcm1hbCApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSBjb25zdGFudDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRDb21wb25lbnRzKCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuc2V0KCB4LCB5LCB6ICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoIG5vcm1hbCwgcG9pbnQgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBub3JtYWwgKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gLSBwb2ludC5kb3QoIHRoaXMubm9ybWFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUNvcGxhbmFyUG9pbnRzKCBhLCBiLCBjICkge1xuXG5cdFx0Y29uc3Qgbm9ybWFsID0gX3ZlY3RvcjEuc3ViVmVjdG9ycyggYywgYiApLmNyb3NzKCBfdmVjdG9yMi5zdWJWZWN0b3JzKCBhLCBiICkgKS5ub3JtYWxpemUoKTtcblxuXHRcdC8vIFE6IHNob3VsZCBhbiBlcnJvciBiZSB0aHJvd24gaWYgbm9ybWFsIGlzIHplcm8gKGUuZy4gZGVnZW5lcmF0ZSBwbGFuZSk/XG5cblx0XHR0aGlzLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KCBub3JtYWwsIGEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBwbGFuZSApIHtcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIHBsYW5lLm5vcm1hbCApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSBwbGFuZS5jb25zdGFudDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHQvLyBOb3RlOiB3aWxsIGxlYWQgdG8gYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgcGxhbmUgaXMgaW52YWxpZC5cblxuXHRcdGNvbnN0IGludmVyc2VOb3JtYWxMZW5ndGggPSAxLjAgLyB0aGlzLm5vcm1hbC5sZW5ndGgoKTtcblx0XHR0aGlzLm5vcm1hbC5tdWx0aXBseVNjYWxhciggaW52ZXJzZU5vcm1hbExlbmd0aCApO1xuXHRcdHRoaXMuY29uc3RhbnQgKj0gaW52ZXJzZU5vcm1hbExlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRuZWdhdGUoKSB7XG5cblx0XHR0aGlzLmNvbnN0YW50ICo9IC0gMTtcblx0XHR0aGlzLm5vcm1hbC5uZWdhdGUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsLmRvdCggcG9pbnQgKSArIHRoaXMuY29uc3RhbnQ7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG9TcGhlcmUoIHNwaGVyZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmRpc3RhbmNlVG9Qb2ludCggc3BoZXJlLmNlbnRlciApIC0gc3BoZXJlLnJhZGl1cztcblxuXHR9XG5cblx0cHJvamVjdFBvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBwb2ludCApLmFkZFNjYWxlZFZlY3RvciggdGhpcy5ub3JtYWwsIC0gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0TGluZSggbGluZSwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgZGlyZWN0aW9uID0gbGluZS5kZWx0YSggX3ZlY3RvcjEgKTtcblxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gdGhpcy5ub3JtYWwuZG90KCBkaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSB7XG5cblx0XHRcdC8vIGxpbmUgaXMgY29wbGFuYXIsIHJldHVybiBvcmlnaW5cblx0XHRcdGlmICggdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuc3RhcnQgKSA9PT0gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGxpbmUuc3RhcnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBVbnN1cmUgaWYgdGhpcyBpcyB0aGUgY29ycmVjdCBtZXRob2QgdG8gaGFuZGxlIHRoaXMgY2FzZS5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdCA9IC0gKCBsaW5lLnN0YXJ0LmRvdCggdGhpcy5ub3JtYWwgKSArIHRoaXMuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0aWYgKCB0IDwgMCB8fCB0ID4gMSApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGxpbmUuc3RhcnQgKS5hZGRTY2FsZWRWZWN0b3IoIGRpcmVjdGlvbiwgdCApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzTGluZSggbGluZSApIHtcblxuXHRcdC8vIE5vdGU6IHRoaXMgdGVzdHMgaWYgYSBsaW5lIGludGVyc2VjdHMgdGhlIHBsYW5lLCBub3Qgd2hldGhlciBpdCAob3IgaXRzIGVuZC1wb2ludHMpIGFyZSBjb3BsYW5hciB3aXRoIGl0LlxuXG5cdFx0Y29uc3Qgc3RhcnRTaWduID0gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuc3RhcnQgKTtcblx0XHRjb25zdCBlbmRTaWduID0gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuZW5kICk7XG5cblx0XHRyZXR1cm4gKCBzdGFydFNpZ24gPCAwICYmIGVuZFNpZ24gPiAwICkgfHwgKCBlbmRTaWduIDwgMCAmJiBzdGFydFNpZ24gPiAwICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdHJldHVybiBib3guaW50ZXJzZWN0c1BsYW5lKCB0aGlzICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHtcblxuXHRcdHJldHVybiBzcGhlcmUuaW50ZXJzZWN0c1BsYW5lKCB0aGlzICk7XG5cblx0fVxuXG5cdGNvcGxhbmFyUG9pbnQoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5ub3JtYWwgKS5tdWx0aXBseVNjYWxhciggLSB0aGlzLmNvbnN0YW50ICk7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbWF0cml4LCBvcHRpb25hbE5vcm1hbE1hdHJpeCApIHtcblxuXHRcdGNvbnN0IG5vcm1hbE1hdHJpeCA9IG9wdGlvbmFsTm9ybWFsTWF0cml4IHx8IF9ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdGNvbnN0IHJlZmVyZW5jZVBvaW50ID0gdGhpcy5jb3BsYW5hclBvaW50KCBfdmVjdG9yMSApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0XHRjb25zdCBub3JtYWwgPSB0aGlzLm5vcm1hbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0dGhpcy5jb25zdGFudCA9IC0gcmVmZXJlbmNlUG9pbnQuZG90KCBub3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc2xhdGUoIG9mZnNldCApIHtcblxuXHRcdHRoaXMuY29uc3RhbnQgLT0gb2Zmc2V0LmRvdCggdGhpcy5ub3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIHBsYW5lICkge1xuXG5cdFx0cmV0dXJuIHBsYW5lLm5vcm1hbC5lcXVhbHMoIHRoaXMubm9ybWFsICkgJiYgKCBwbGFuZS5jb25zdGFudCA9PT0gdGhpcy5jb25zdGFudCApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgUGxhbmUgfTtcbiIsImltcG9ydCB7IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSwgV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFNwaGVyZSB9IGZyb20gJy4vU3BoZXJlLmpzJztcbmltcG9ydCB7IFBsYW5lIH0gZnJvbSAnLi9QbGFuZS5qcyc7XG5cbmNvbnN0IF9zcGhlcmUgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIEZydXN0dW0ge1xuXG5cdGNvbnN0cnVjdG9yKCBwMCA9IG5ldyBQbGFuZSgpLCBwMSA9IG5ldyBQbGFuZSgpLCBwMiA9IG5ldyBQbGFuZSgpLCBwMyA9IG5ldyBQbGFuZSgpLCBwNCA9IG5ldyBQbGFuZSgpLCBwNSA9IG5ldyBQbGFuZSgpICkge1xuXG5cdFx0dGhpcy5wbGFuZXMgPSBbIHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUgXTtcblxuXHR9XG5cblx0c2V0KCBwMCwgcDEsIHAyLCBwMywgcDQsIHA1ICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRwbGFuZXNbIDAgXS5jb3B5KCBwMCApO1xuXHRcdHBsYW5lc1sgMSBdLmNvcHkoIHAxICk7XG5cdFx0cGxhbmVzWyAyIF0uY29weSggcDIgKTtcblx0XHRwbGFuZXNbIDMgXS5jb3B5KCBwMyApO1xuXHRcdHBsYW5lc1sgNCBdLmNvcHkoIHA0ICk7XG5cdFx0cGxhbmVzWyA1IF0uY29weSggcDUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBmcnVzdHVtICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRwbGFuZXNbIGkgXS5jb3B5KCBmcnVzdHVtLnBsYW5lc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVByb2plY3Rpb25NYXRyaXgoIG0sIGNvb3JkaW5hdGVTeXN0ZW0gPSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cdFx0Y29uc3QgbWUwID0gbWVbIDAgXSwgbWUxID0gbWVbIDEgXSwgbWUyID0gbWVbIDIgXSwgbWUzID0gbWVbIDMgXTtcblx0XHRjb25zdCBtZTQgPSBtZVsgNCBdLCBtZTUgPSBtZVsgNSBdLCBtZTYgPSBtZVsgNiBdLCBtZTcgPSBtZVsgNyBdO1xuXHRcdGNvbnN0IG1lOCA9IG1lWyA4IF0sIG1lOSA9IG1lWyA5IF0sIG1lMTAgPSBtZVsgMTAgXSwgbWUxMSA9IG1lWyAxMSBdO1xuXHRcdGNvbnN0IG1lMTIgPSBtZVsgMTIgXSwgbWUxMyA9IG1lWyAxMyBdLCBtZTE0ID0gbWVbIDE0IF0sIG1lMTUgPSBtZVsgMTUgXTtcblxuXHRcdHBsYW5lc1sgMCBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMCwgbWU3IC0gbWU0LCBtZTExIC0gbWU4LCBtZTE1IC0gbWUxMiApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMSBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMCwgbWU3ICsgbWU0LCBtZTExICsgbWU4LCBtZTE1ICsgbWUxMiApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMiBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMSwgbWU3ICsgbWU1LCBtZTExICsgbWU5LCBtZTE1ICsgbWUxMyApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMyBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMSwgbWU3IC0gbWU1LCBtZTExIC0gbWU5LCBtZTE1IC0gbWUxMyApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgNCBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMiwgbWU3IC0gbWU2LCBtZTExIC0gbWUxMCwgbWUxNSAtIG1lMTQgKS5ub3JtYWxpemUoKTtcblxuXHRcdGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHRwbGFuZXNbIDUgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTIsIG1lNyArIG1lNiwgbWUxMSArIG1lMTAsIG1lMTUgKyBtZTE0ICkubm9ybWFsaXplKCk7XG5cblx0XHR9IGVsc2UgaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHUFVDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHRwbGFuZXNbIDUgXS5zZXRDb21wb25lbnRzKCBtZTIsIG1lNiwgbWUxMCwgbWUxNCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuRnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCgpOiBJbnZhbGlkIGNvb3JkaW5hdGUgc3lzdGVtOiAnICsgY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGludGVyc2VjdHNPYmplY3QoIG9iamVjdCApIHtcblxuXHRcdGlmICggb2JqZWN0LmJvdW5kaW5nU3BoZXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgb2JqZWN0LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0XHRfc3BoZXJlLmNvcHkoIG9iamVjdC5ib3VuZGluZ1NwaGVyZSApLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0XHRfc3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICkuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1Nwcml0ZSggc3ByaXRlICkge1xuXG5cdFx0X3NwaGVyZS5jZW50ZXIuc2V0KCAwLCAwLCAwICk7XG5cdFx0X3NwaGVyZS5yYWRpdXMgPSAwLjcwNzEwNjc4MTE4NjU0NzY7XG5cdFx0X3NwaGVyZS5hcHBseU1hdHJpeDQoIHNwcml0ZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblx0XHRjb25zdCBjZW50ZXIgPSBzcGhlcmUuY2VudGVyO1xuXHRcdGNvbnN0IG5lZ1JhZGl1cyA9IC0gc3BoZXJlLnJhZGl1cztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGRpc3RhbmNlID0gcGxhbmVzWyBpIF0uZGlzdGFuY2VUb1BvaW50KCBjZW50ZXIgKTtcblxuXHRcdFx0aWYgKCBkaXN0YW5jZSA8IG5lZ1JhZGl1cyApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBsYW5lID0gcGxhbmVzWyBpIF07XG5cblx0XHRcdC8vIGNvcm5lciBhdCBtYXggZGlzdGFuY2VcblxuXHRcdFx0X3ZlY3Rvci54ID0gcGxhbmUubm9ybWFsLnggPiAwID8gYm94Lm1heC54IDogYm94Lm1pbi54O1xuXHRcdFx0X3ZlY3Rvci55ID0gcGxhbmUubm9ybWFsLnkgPiAwID8gYm94Lm1heC55IDogYm94Lm1pbi55O1xuXHRcdFx0X3ZlY3Rvci56ID0gcGxhbmUubm9ybWFsLnogPiAwID8gYm94Lm1heC56IDogYm94Lm1pbi56O1xuXG5cdFx0XHRpZiAoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggX3ZlY3RvciApIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRjb250YWluc1BvaW50KCBwb2ludCApIHtcblxuXHRcdGNvbnN0IHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkgPCAwICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5cbmV4cG9ydCB7IEZydXN0dW0gfTtcbiIsImZ1bmN0aW9uIFdlYkdMQW5pbWF0aW9uKCkge1xuXG5cdGxldCBjb250ZXh0ID0gbnVsbDtcblx0bGV0IGlzQW5pbWF0aW5nID0gZmFsc2U7XG5cdGxldCBhbmltYXRpb25Mb29wID0gbnVsbDtcblx0bGV0IHJlcXVlc3RJZCA9IG51bGw7XG5cblx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSwgZnJhbWUgKSB7XG5cblx0XHRhbmltYXRpb25Mb29wKCB0aW1lLCBmcmFtZSApO1xuXG5cdFx0cmVxdWVzdElkID0gY29udGV4dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggaXNBbmltYXRpbmcgPT09IHRydWUgKSByZXR1cm47XG5cdFx0XHRpZiAoIGFuaW1hdGlvbkxvb3AgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRcdHJlcXVlc3RJZCA9IGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0XHRcdGlzQW5pbWF0aW5nID0gdHJ1ZTtcblxuXHRcdH0sXG5cblx0XHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnRleHQuY2FuY2VsQW5pbWF0aW9uRnJhbWUoIHJlcXVlc3RJZCApO1xuXG5cdFx0XHRpc0FuaW1hdGluZyA9IGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdHNldEFuaW1hdGlvbkxvb3A6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRcdGFuaW1hdGlvbkxvb3AgPSBjYWxsYmFjaztcblxuXHRcdH0sXG5cblx0XHRzZXRDb250ZXh0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb250ZXh0ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG5leHBvcnQgeyBXZWJHTEFuaW1hdGlvbiB9O1xuIiwiZnVuY3Rpb24gV2ViR0xBdHRyaWJ1dGVzKCBnbCApIHtcblxuXHRjb25zdCBidWZmZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gYXR0cmlidXRlLmFycmF5O1xuXHRcdGNvbnN0IHVzYWdlID0gYXR0cmlidXRlLnVzYWdlO1xuXHRcdGNvbnN0IHNpemUgPSBhcnJheS5ieXRlTGVuZ3RoO1xuXG5cdFx0Y29uc3QgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBidWZmZXJUeXBlLCBidWZmZXIgKTtcblx0XHRnbC5idWZmZXJEYXRhKCBidWZmZXJUeXBlLCBhcnJheSwgdXNhZ2UgKTtcblxuXHRcdGF0dHJpYnV0ZS5vblVwbG9hZENhbGxiYWNrKCk7XG5cblx0XHRsZXQgdHlwZTtcblxuXHRcdGlmICggYXJyYXkgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5GTE9BVDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgKSB7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLmlzRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHR0eXBlID0gZ2wuSEFMRl9GTE9BVDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0eXBlID0gZ2wuVU5TSUdORURfU0hPUlQ7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MTZBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLlNIT1JUO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLlVOU0lHTkVEX0lOVDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLklOVDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuQllURTtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLlVOU0lHTkVEX0JZVEU7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuVU5TSUdORURfQllURTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMQXR0cmlidXRlczogVW5zdXBwb3J0ZWQgYnVmZmVyIGRhdGEgZm9ybWF0OiAnICsgYXJyYXkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRidWZmZXI6IGJ1ZmZlcixcblx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRieXRlc1BlckVsZW1lbnQ6IGFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULFxuXHRcdFx0dmVyc2lvbjogYXR0cmlidXRlLnZlcnNpb24sXG5cdFx0XHRzaXplOiBzaXplXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQnVmZmVyKCBidWZmZXIsIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gYXR0cmlidXRlLmFycmF5O1xuXHRcdGNvbnN0IHVwZGF0ZVJhbmdlID0gYXR0cmlidXRlLl91cGRhdGVSYW5nZTsgLy8gQGRlcHJlY2F0ZWQsIHIxNTlcblx0XHRjb25zdCB1cGRhdGVSYW5nZXMgPSBhdHRyaWJ1dGUudXBkYXRlUmFuZ2VzO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgYnVmZmVyICk7XG5cblx0XHRpZiAoIHVwZGF0ZVJhbmdlLmNvdW50ID09PSAtIDEgJiYgdXBkYXRlUmFuZ2VzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Ly8gTm90IHVzaW5nIHVwZGF0ZSByYW5nZXNcblx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGJ1ZmZlclR5cGUsIDAsIGFycmF5ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHVwZGF0ZVJhbmdlcy5sZW5ndGggIT09IDAgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHVwZGF0ZVJhbmdlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHJhbmdlID0gdXBkYXRlUmFuZ2VzWyBpIF07XG5cblx0XHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgcmFuZ2Uuc3RhcnQgKiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCxcblx0XHRcdFx0XHRhcnJheSwgcmFuZ2Uuc3RhcnQsIHJhbmdlLmNvdW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXR0cmlidXRlLmNsZWFyVXBkYXRlUmFuZ2VzKCk7XG5cblx0XHR9XG5cblx0XHQvLyBAZGVwcmVjYXRlZCwgcjE1OVxuXHRcdGlmICggdXBkYXRlUmFuZ2UuY291bnQgIT09IC0gMSApIHtcblxuXHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgdXBkYXRlUmFuZ2Uub2Zmc2V0ICogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHRcdGFycmF5LCB1cGRhdGVSYW5nZS5vZmZzZXQsIHVwZGF0ZVJhbmdlLmNvdW50ICk7XG5cblx0XHRcdHVwZGF0ZVJhbmdlLmNvdW50ID0gLSAxOyAvLyByZXNldCByYW5nZVxuXG5cdFx0fVxuXG5cdFx0YXR0cmlidXRlLm9uVXBsb2FkQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBnZXQoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuZGF0YTtcblxuXHRcdHJldHVybiBidWZmZXJzLmdldCggYXR0cmlidXRlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbW92ZSggYXR0cmlidXRlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0Y29uc3QgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHRcdGlmICggZGF0YSApIHtcblxuXHRcdFx0Z2wuZGVsZXRlQnVmZmVyKCBkYXRhLmJ1ZmZlciApO1xuXG5cdFx0XHRidWZmZXJzLmRlbGV0ZSggYXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggYXR0cmlidXRlLCBidWZmZXJUeXBlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNHTEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0Y29uc3QgY2FjaGVkID0gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHRpZiAoICEgY2FjaGVkIHx8IGNhY2hlZC52ZXJzaW9uIDwgYXR0cmlidXRlLnZlcnNpb24gKSB7XG5cblx0XHRcdFx0YnVmZmVycy5zZXQoIGF0dHJpYnV0ZSwge1xuXHRcdFx0XHRcdGJ1ZmZlcjogYXR0cmlidXRlLmJ1ZmZlcixcblx0XHRcdFx0XHR0eXBlOiBhdHRyaWJ1dGUudHlwZSxcblx0XHRcdFx0XHRieXRlc1BlckVsZW1lbnQ6IGF0dHJpYnV0ZS5lbGVtZW50U2l6ZSxcblx0XHRcdFx0XHR2ZXJzaW9uOiBhdHRyaWJ1dGUudmVyc2lvblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0Y29uc3QgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHRcdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRidWZmZXJzLnNldCggYXR0cmlidXRlLCBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkYXRhLnZlcnNpb24gPCBhdHRyaWJ1dGUudmVyc2lvbiApIHtcblxuXHRcdFx0aWYgKCBkYXRhLnNpemUgIT09IGF0dHJpYnV0ZS5hcnJheS5ieXRlTGVuZ3RoICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMQXR0cmlidXRlczogVGhlIHNpemUgb2YgdGhlIGJ1ZmZlciBhdHRyaWJ1dGVcXCdzIGFycmF5IGJ1ZmZlciBkb2VzIG5vdCBtYXRjaCB0aGUgb3JpZ2luYWwgc2l6ZS4gUmVzaXppbmcgYnVmZmVyIGF0dHJpYnV0ZXMgaXMgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlQnVmZmVyKCBkYXRhLmJ1ZmZlciwgYXR0cmlidXRlLCBidWZmZXJUeXBlICk7XG5cblx0XHRcdGRhdGEudmVyc2lvbiA9IGF0dHJpYnV0ZS52ZXJzaW9uO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cblxuZXhwb3J0IHsgV2ViR0xBdHRyaWJ1dGVzIH07XG4iLCJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcblxuY2xhc3MgUGxhbmVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxLCB3aWR0aFNlZ21lbnRzID0gMSwgaGVpZ2h0U2VnbWVudHMgPSAxICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdQbGFuZUdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHdpZHRoOiB3aWR0aCxcblx0XHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50c1xuXHRcdH07XG5cblx0XHRjb25zdCB3aWR0aF9oYWxmID0gd2lkdGggLyAyO1xuXHRcdGNvbnN0IGhlaWdodF9oYWxmID0gaGVpZ2h0IC8gMjtcblxuXHRcdGNvbnN0IGdyaWRYID0gTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApO1xuXHRcdGNvbnN0IGdyaWRZID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKTtcblxuXHRcdGNvbnN0IGdyaWRYMSA9IGdyaWRYICsgMTtcblx0XHRjb25zdCBncmlkWTEgPSBncmlkWSArIDE7XG5cblx0XHRjb25zdCBzZWdtZW50X3dpZHRoID0gd2lkdGggLyBncmlkWDtcblx0XHRjb25zdCBzZWdtZW50X2hlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdFx0Y29uc3QgeSA9IGl5ICogc2VnbWVudF9oZWlnaHQgLSBoZWlnaHRfaGFsZjtcblxuXHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPCBncmlkWDE7IGl4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHggPSBpeCAqIHNlZ21lbnRfd2lkdGggLSB3aWR0aF9oYWxmO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIC0geSwgMCApO1xuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHRcdHV2cy5wdXNoKCBpeCAvIGdyaWRYICk7XG5cdFx0XHRcdHV2cy5wdXNoKCAxIC0gKCBpeSAvIGdyaWRZICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGl5ID0gMDsgaXkgPCBncmlkWTsgaXkgKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGEgPSBpeCArIGdyaWRYMSAqIGl5O1xuXHRcdFx0XHRjb25zdCBiID0gaXggKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0XHRjb25zdCBjID0gKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdGNvbnN0IGQgPSAoIGl4ICsgMSApICsgZ3JpZFgxICogaXk7XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgUGxhbmVHZW9tZXRyeSggZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQsIGRhdGEud2lkdGhTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cyApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBQbGFuZUdlb21ldHJ5IH07XG4iLCJleHBvcnQgY29uc3QgdmVydGV4ID0gLyogZ2xzbCAqL2BcbnZhcnlpbmcgdmVjMiB2VXY7XG51bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XG5cbnZvaWQgbWFpbigpIHtcblxuXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xuXG5cdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24ueHksIDEuMCwgMS4wICk7XG5cbn1cbmA7XG5cbmV4cG9ydCBjb25zdCBmcmFnbWVudCA9IC8qIGdsc2wgKi9gXG51bmlmb3JtIHNhbXBsZXIyRCB0MkQ7XG51bmlmb3JtIGZsb2F0IGJhY2tncm91bmRJbnRlbnNpdHk7XG5cbnZhcnlpbmcgdmVjMiB2VXY7XG5cbnZvaWQgbWFpbigpIHtcblxuXHR2ZWM0IHRleENvbG9yID0gdGV4dHVyZTJEKCB0MkQsIHZVdiApO1xuXG5cdCNpZmRlZiBERUNPREVfVklERU9fVEVYVFVSRVxuXG5cdFx0Ly8gdXNlIGlubGluZSBzUkdCIGRlY29kZSB1bnRpbCBicm93c2VycyBwcm9wZXJseSBzdXBwb3J0IFNSR0I4X0FQTEhBOCB3aXRoIHZpZGVvIHRleHR1cmVzXG5cblx0XHR0ZXhDb2xvciA9IHZlYzQoIG1peCggcG93KCB0ZXhDb2xvci5yZ2IgKiAwLjk0Nzg2NzI5ODYgKyB2ZWMzKCAwLjA1MjEzMjcwMTQgKSwgdmVjMyggMi40ICkgKSwgdGV4Q29sb3IucmdiICogMC4wNzczOTkzODA4LCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCB0ZXhDb2xvci5yZ2IsIHZlYzMoIDAuMDQwNDUgKSApICkgKSwgdGV4Q29sb3IudyApO1xuXG5cdCNlbmRpZlxuXG5cdHRleENvbG9yLnJnYiAqPSBiYWNrZ3JvdW5kSW50ZW5zaXR5O1xuXG5cdGdsX0ZyYWdDb2xvciA9IHRleENvbG9yO1xuXG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XG5cbn1cbmA7XG4iLCJpbXBvcnQgYWxwaGFoYXNoX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvYWxwaGFoYXNoX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvYWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgYWxwaGFtYXBfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9hbHBoYW1hcF9mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBhbHBoYW1hcF9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvYWxwaGFtYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBhbHBoYXRlc3RfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9hbHBoYXRlc3RfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgYWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9hbHBoYXRlc3RfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBhb21hcF9mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2FvbWFwX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGFvbWFwX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9hb21hcF9wYXJzX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGJhdGNoaW5nX3BhcnNfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvYmF0Y2hpbmdfcGFyc192ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgYmF0Y2hpbmdfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvYmF0Y2hpbmdfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IGJlZ2luX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL2JlZ2luX3ZlcnRleC5nbHNsLmpzJztcbmltcG9ydCBiZWdpbm5vcm1hbF92ZXJ0ZXggZnJvbSAnLi9TaGFkZXJDaHVuay9iZWdpbm5vcm1hbF92ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgYnNkZnMgZnJvbSAnLi9TaGFkZXJDaHVuay9ic2Rmcy5nbHNsLmpzJztcbmltcG9ydCBpcmlkZXNjZW5jZV9mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2lyaWRlc2NlbmNlX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGJ1bXBtYXBfcGFyc19mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2J1bXBtYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9jbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9jbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXggZnJvbSAnLi9TaGFkZXJDaHVuay9jbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL2NsaXBwaW5nX3BsYW5lc192ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgY29sb3JfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9jb2xvcl9mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBjb2xvcl9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvY29sb3JfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBjb2xvcl9wYXJzX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL2NvbG9yX3BhcnNfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IGNvbG9yX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL2NvbG9yX3ZlcnRleC5nbHNsLmpzJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi9TaGFkZXJDaHVuay9jb21tb24uZ2xzbC5qcyc7XG5pbXBvcnQgY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGRlZmF1bHRub3JtYWxfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvZGVmYXVsdG5vcm1hbF92ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXggZnJvbSAnLi9TaGFkZXJDaHVuay9kaXNwbGFjZW1lbnRtYXBfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IGVtaXNzaXZlbWFwX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvZW1pc3NpdmVtYXBfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2VtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgY29sb3JzcGFjZV9mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2NvbG9yc3BhY2VfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgY29sb3JzcGFjZV9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvY29sb3JzcGFjZV9wYXJzX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGVudm1hcF9mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2Vudm1hcF9mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9lbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgZW52bWFwX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9lbnZtYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBlbnZtYXBfcGFyc192ZXJ0ZXggZnJvbSAnLi9TaGFkZXJDaHVuay9lbnZtYXBfcGFyc192ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgZW52bWFwX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL2Vudm1hcF92ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgZm9nX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL2ZvZ192ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgZm9nX3BhcnNfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvZm9nX3BhcnNfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IGZvZ19mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2ZvZ19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBmb2dfcGFyc19mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2ZvZ19wYXJzX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9ncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9saWdodG1hcF9wYXJzX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGxpZ2h0c19sYW1iZXJ0X2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvbGlnaHRzX2xhbWJlcnRfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgbGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2xpZ2h0c19sYW1iZXJ0X3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgbGlnaHRzX3BhcnNfYmVnaW4gZnJvbSAnLi9TaGFkZXJDaHVuay9saWdodHNfcGFyc19iZWdpbi5nbHNsLmpzJztcbmltcG9ydCBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2Vudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGxpZ2h0c190b29uX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvbGlnaHRzX3Rvb25fZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgbGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2xpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgbGlnaHRzX3Bob25nX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvbGlnaHRzX3Bob25nX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgbGlnaHRzX2ZyYWdtZW50X2JlZ2luIGZyb20gJy4vU2hhZGVyQ2h1bmsvbGlnaHRzX2ZyYWdtZW50X2JlZ2luLmdsc2wuanMnO1xuaW1wb3J0IGxpZ2h0c19mcmFnbWVudF9tYXBzIGZyb20gJy4vU2hhZGVyQ2h1bmsvbGlnaHRzX2ZyYWdtZW50X21hcHMuZ2xzbC5qcyc7XG5pbXBvcnQgbGlnaHRzX2ZyYWdtZW50X2VuZCBmcm9tICcuL1NoYWRlckNodW5rL2xpZ2h0c19mcmFnbWVudF9lbmQuZ2xzbC5qcyc7XG5pbXBvcnQgbG9nZGVwdGhidWZfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9sb2dkZXB0aGJ1Zl9mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL2xvZ2RlcHRoYnVmX3BhcnNfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IGxvZ2RlcHRoYnVmX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL2xvZ2RlcHRoYnVmX3ZlcnRleC5nbHNsLmpzJztcbmltcG9ydCBtYXBfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9tYXBfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgbWFwX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9tYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBtYXBfcGFydGljbGVfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9tYXBfcGFydGljbGVfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgbWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9tYXBfcGFydGljbGVfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBtZXRhbG5lc3NtYXBfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9tZXRhbG5lc3NtYXBfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9tZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBtb3JwaGluc3RhbmNlX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL21vcnBoaW5zdGFuY2VfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IG1vcnBoY29sb3JfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvbW9ycGhjb2xvcl92ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgbW9ycGhub3JtYWxfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvbW9ycGhub3JtYWxfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgbW9ycGh0YXJnZXRfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvbW9ycGh0YXJnZXRfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IG5vcm1hbF9mcmFnbWVudF9iZWdpbiBmcm9tICcuL1NoYWRlckNodW5rL25vcm1hbF9mcmFnbWVudF9iZWdpbi5nbHNsLmpzJztcbmltcG9ydCBub3JtYWxfZnJhZ21lbnRfbWFwcyBmcm9tICcuL1NoYWRlckNodW5rL25vcm1hbF9mcmFnbWVudF9tYXBzLmdsc2wuanMnO1xuaW1wb3J0IG5vcm1hbF9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvbm9ybWFsX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgbm9ybWFsX3BhcnNfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvbm9ybWFsX3BhcnNfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IG5vcm1hbF92ZXJ0ZXggZnJvbSAnLi9TaGFkZXJDaHVuay9ub3JtYWxfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbiBmcm9tICcuL1NoYWRlckNodW5rL2NsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4uZ2xzbC5qcyc7XG5pbXBvcnQgY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzIGZyb20gJy4vU2hhZGVyQ2h1bmsvY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzLmdsc2wuanMnO1xuaW1wb3J0IGNsZWFyY29hdF9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgaXJpZGVzY2VuY2VfcGFyc19mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL2lyaWRlc2NlbmNlX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgb3BhcXVlX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvb3BhcXVlX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IHBhY2tpbmcgZnJvbSAnLi9TaGFkZXJDaHVuay9wYWNraW5nLmdsc2wuanMnO1xuaW1wb3J0IHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9wcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IHByb2plY3RfdmVydGV4IGZyb20gJy4vU2hhZGVyQ2h1bmsvcHJvamVjdF92ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgZGl0aGVyaW5nX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvZGl0aGVyaW5nX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgcm91Z2huZXNzbWFwX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvcm91Z2huZXNzbWFwX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay9zaGFkb3dtYXBfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCBzaGFkb3dtYXBfcGFyc192ZXJ0ZXggZnJvbSAnLi9TaGFkZXJDaHVuay9zaGFkb3dtYXBfcGFyc192ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgc2hhZG93bWFwX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL3NoYWRvd21hcF92ZXJ0ZXguZ2xzbC5qcyc7XG5pbXBvcnQgc2hhZG93bWFza19wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvc2hhZG93bWFza19wYXJzX2ZyYWdtZW50Lmdsc2wuanMnO1xuaW1wb3J0IHNraW5iYXNlX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL3NraW5iYXNlX3ZlcnRleC5nbHNsLmpzJztcbmltcG9ydCBza2lubmluZ19wYXJzX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL3NraW5uaW5nX3BhcnNfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IHNraW5uaW5nX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL3NraW5uaW5nX3ZlcnRleC5nbHNsLmpzJztcbmltcG9ydCBza2lubm9ybWFsX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL3NraW5ub3JtYWxfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IHNwZWN1bGFybWFwX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvc3BlY3VsYXJtYXBfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCBmcm9tICcuL1NoYWRlckNodW5rL3NwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgdG9uZW1hcHBpbmdfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay90b25lbWFwcGluZ19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCB0cmFuc21pc3Npb25fZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay90cmFuc21pc3Npb25fZnJhZ21lbnQuZ2xzbC5qcyc7XG5pbXBvcnQgdHJhbnNtaXNzaW9uX3BhcnNfZnJhZ21lbnQgZnJvbSAnLi9TaGFkZXJDaHVuay90cmFuc21pc3Npb25fcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCB1dl9wYXJzX2ZyYWdtZW50IGZyb20gJy4vU2hhZGVyQ2h1bmsvdXZfcGFyc19mcmFnbWVudC5nbHNsLmpzJztcbmltcG9ydCB1dl9wYXJzX3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL3V2X3BhcnNfdmVydGV4Lmdsc2wuanMnO1xuaW1wb3J0IHV2X3ZlcnRleCBmcm9tICcuL1NoYWRlckNodW5rL3V2X3ZlcnRleC5nbHNsLmpzJztcbmltcG9ydCB3b3JsZHBvc192ZXJ0ZXggZnJvbSAnLi9TaGFkZXJDaHVuay93b3JsZHBvc192ZXJ0ZXguZ2xzbC5qcyc7XG5cbmltcG9ydCAqIGFzIGJhY2tncm91bmQgZnJvbSAnLi9TaGFkZXJMaWIvYmFja2dyb3VuZC5nbHNsLmpzJztcbmltcG9ydCAqIGFzIGJhY2tncm91bmRDdWJlIGZyb20gJy4vU2hhZGVyTGliL2JhY2tncm91bmRDdWJlLmdsc2wuanMnO1xuaW1wb3J0ICogYXMgY3ViZSBmcm9tICcuL1NoYWRlckxpYi9jdWJlLmdsc2wuanMnO1xuaW1wb3J0ICogYXMgZGVwdGggZnJvbSAnLi9TaGFkZXJMaWIvZGVwdGguZ2xzbC5qcyc7XG5pbXBvcnQgKiBhcyBkaXN0YW5jZVJHQkEgZnJvbSAnLi9TaGFkZXJMaWIvZGlzdGFuY2VSR0JBLmdsc2wuanMnO1xuaW1wb3J0ICogYXMgZXF1aXJlY3QgZnJvbSAnLi9TaGFkZXJMaWIvZXF1aXJlY3QuZ2xzbC5qcyc7XG5pbXBvcnQgKiBhcyBsaW5lZGFzaGVkIGZyb20gJy4vU2hhZGVyTGliL2xpbmVkYXNoZWQuZ2xzbC5qcyc7XG5pbXBvcnQgKiBhcyBtZXNoYmFzaWMgZnJvbSAnLi9TaGFkZXJMaWIvbWVzaGJhc2ljLmdsc2wuanMnO1xuaW1wb3J0ICogYXMgbWVzaGxhbWJlcnQgZnJvbSAnLi9TaGFkZXJMaWIvbWVzaGxhbWJlcnQuZ2xzbC5qcyc7XG5pbXBvcnQgKiBhcyBtZXNobWF0Y2FwIGZyb20gJy4vU2hhZGVyTGliL21lc2htYXRjYXAuZ2xzbC5qcyc7XG5pbXBvcnQgKiBhcyBtZXNobm9ybWFsIGZyb20gJy4vU2hhZGVyTGliL21lc2hub3JtYWwuZ2xzbC5qcyc7XG5pbXBvcnQgKiBhcyBtZXNocGhvbmcgZnJvbSAnLi9TaGFkZXJMaWIvbWVzaHBob25nLmdsc2wuanMnO1xuaW1wb3J0ICogYXMgbWVzaHBoeXNpY2FsIGZyb20gJy4vU2hhZGVyTGliL21lc2hwaHlzaWNhbC5nbHNsLmpzJztcbmltcG9ydCAqIGFzIG1lc2h0b29uIGZyb20gJy4vU2hhZGVyTGliL21lc2h0b29uLmdsc2wuanMnO1xuaW1wb3J0ICogYXMgcG9pbnRzIGZyb20gJy4vU2hhZGVyTGliL3BvaW50cy5nbHNsLmpzJztcbmltcG9ydCAqIGFzIHNoYWRvdyBmcm9tICcuL1NoYWRlckxpYi9zaGFkb3cuZ2xzbC5qcyc7XG5pbXBvcnQgKiBhcyBzcHJpdGUgZnJvbSAnLi9TaGFkZXJMaWIvc3ByaXRlLmdsc2wuanMnO1xuXG5leHBvcnQgY29uc3QgU2hhZGVyQ2h1bmsgPSB7XG5cdGFscGhhaGFzaF9mcmFnbWVudDogYWxwaGFoYXNoX2ZyYWdtZW50LFxuXHRhbHBoYWhhc2hfcGFyc19mcmFnbWVudDogYWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQsXG5cdGFscGhhbWFwX2ZyYWdtZW50OiBhbHBoYW1hcF9mcmFnbWVudCxcblx0YWxwaGFtYXBfcGFyc19mcmFnbWVudDogYWxwaGFtYXBfcGFyc19mcmFnbWVudCxcblx0YWxwaGF0ZXN0X2ZyYWdtZW50OiBhbHBoYXRlc3RfZnJhZ21lbnQsXG5cdGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50OiBhbHBoYXRlc3RfcGFyc19mcmFnbWVudCxcblx0YW9tYXBfZnJhZ21lbnQ6IGFvbWFwX2ZyYWdtZW50LFxuXHRhb21hcF9wYXJzX2ZyYWdtZW50OiBhb21hcF9wYXJzX2ZyYWdtZW50LFxuXHRiYXRjaGluZ19wYXJzX3ZlcnRleDogYmF0Y2hpbmdfcGFyc192ZXJ0ZXgsXG5cdGJhdGNoaW5nX3ZlcnRleDogYmF0Y2hpbmdfdmVydGV4LFxuXHRiZWdpbl92ZXJ0ZXg6IGJlZ2luX3ZlcnRleCxcblx0YmVnaW5ub3JtYWxfdmVydGV4OiBiZWdpbm5vcm1hbF92ZXJ0ZXgsXG5cdGJzZGZzOiBic2Rmcyxcblx0aXJpZGVzY2VuY2VfZnJhZ21lbnQ6IGlyaWRlc2NlbmNlX2ZyYWdtZW50LFxuXHRidW1wbWFwX3BhcnNfZnJhZ21lbnQ6IGJ1bXBtYXBfcGFyc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQsXG5cdGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4OiBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgsXG5cdGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXgsXG5cdGNvbG9yX2ZyYWdtZW50OiBjb2xvcl9mcmFnbWVudCxcblx0Y29sb3JfcGFyc19mcmFnbWVudDogY29sb3JfcGFyc19mcmFnbWVudCxcblx0Y29sb3JfcGFyc192ZXJ0ZXg6IGNvbG9yX3BhcnNfdmVydGV4LFxuXHRjb2xvcl92ZXJ0ZXg6IGNvbG9yX3ZlcnRleCxcblx0Y29tbW9uOiBjb21tb24sXG5cdGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudDogY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50LFxuXHRkZWZhdWx0bm9ybWFsX3ZlcnRleDogZGVmYXVsdG5vcm1hbF92ZXJ0ZXgsXG5cdGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleDogZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4LFxuXHRkaXNwbGFjZW1lbnRtYXBfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfdmVydGV4LFxuXHRlbWlzc2l2ZW1hcF9mcmFnbWVudDogZW1pc3NpdmVtYXBfZnJhZ21lbnQsXG5cdGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ6IGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGNvbG9yc3BhY2VfZnJhZ21lbnQ6IGNvbG9yc3BhY2VfZnJhZ21lbnQsXG5cdGNvbG9yc3BhY2VfcGFyc19mcmFnbWVudDogY29sb3JzcGFjZV9wYXJzX2ZyYWdtZW50LFxuXHRlbnZtYXBfZnJhZ21lbnQ6IGVudm1hcF9mcmFnbWVudCxcblx0ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3BhcnNfdmVydGV4OiBlbnZtYXBfcGFyc192ZXJ0ZXgsXG5cdGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3ZlcnRleDogZW52bWFwX3ZlcnRleCxcblx0Zm9nX3ZlcnRleDogZm9nX3ZlcnRleCxcblx0Zm9nX3BhcnNfdmVydGV4OiBmb2dfcGFyc192ZXJ0ZXgsXG5cdGZvZ19mcmFnbWVudDogZm9nX2ZyYWdtZW50LFxuXHRmb2dfcGFyc19mcmFnbWVudDogZm9nX3BhcnNfZnJhZ21lbnQsXG5cdGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ6IGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19sYW1iZXJ0X2ZyYWdtZW50OiBsaWdodHNfbGFtYmVydF9mcmFnbWVudCxcblx0bGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudDogbGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX3BhcnNfYmVnaW46IGxpZ2h0c19wYXJzX2JlZ2luLFxuXHRsaWdodHNfdG9vbl9mcmFnbWVudDogbGlnaHRzX3Rvb25fZnJhZ21lbnQsXG5cdGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19waG9uZ19mcmFnbWVudDogbGlnaHRzX3Bob25nX2ZyYWdtZW50LFxuXHRsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudDogbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudDogbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50LFxuXHRsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudDogbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19mcmFnbWVudF9iZWdpbjogbGlnaHRzX2ZyYWdtZW50X2JlZ2luLFxuXHRsaWdodHNfZnJhZ21lbnRfbWFwczogbGlnaHRzX2ZyYWdtZW50X21hcHMsXG5cdGxpZ2h0c19mcmFnbWVudF9lbmQ6IGxpZ2h0c19mcmFnbWVudF9lbmQsXG5cdGxvZ2RlcHRoYnVmX2ZyYWdtZW50OiBsb2dkZXB0aGJ1Zl9mcmFnbWVudCxcblx0bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudDogbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcblx0bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg6IGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFxuXHRsb2dkZXB0aGJ1Zl92ZXJ0ZXg6IGxvZ2RlcHRoYnVmX3ZlcnRleCxcblx0bWFwX2ZyYWdtZW50OiBtYXBfZnJhZ21lbnQsXG5cdG1hcF9wYXJzX2ZyYWdtZW50OiBtYXBfcGFyc19mcmFnbWVudCxcblx0bWFwX3BhcnRpY2xlX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfZnJhZ21lbnQsXG5cdG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCxcblx0bWV0YWxuZXNzbWFwX2ZyYWdtZW50OiBtZXRhbG5lc3NtYXBfZnJhZ21lbnQsXG5cdG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50OiBtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCxcblx0bW9ycGhpbnN0YW5jZV92ZXJ0ZXg6IG1vcnBoaW5zdGFuY2VfdmVydGV4LFxuXHRtb3JwaGNvbG9yX3ZlcnRleDogbW9ycGhjb2xvcl92ZXJ0ZXgsXG5cdG1vcnBobm9ybWFsX3ZlcnRleDogbW9ycGhub3JtYWxfdmVydGV4LFxuXHRtb3JwaHRhcmdldF9wYXJzX3ZlcnRleDogbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsXG5cdG1vcnBodGFyZ2V0X3ZlcnRleDogbW9ycGh0YXJnZXRfdmVydGV4LFxuXHRub3JtYWxfZnJhZ21lbnRfYmVnaW46IG5vcm1hbF9mcmFnbWVudF9iZWdpbixcblx0bm9ybWFsX2ZyYWdtZW50X21hcHM6IG5vcm1hbF9mcmFnbWVudF9tYXBzLFxuXHRub3JtYWxfcGFyc19mcmFnbWVudDogbm9ybWFsX3BhcnNfZnJhZ21lbnQsXG5cdG5vcm1hbF9wYXJzX3ZlcnRleDogbm9ybWFsX3BhcnNfdmVydGV4LFxuXHRub3JtYWxfdmVydGV4OiBub3JtYWxfdmVydGV4LFxuXHRub3JtYWxtYXBfcGFyc19mcmFnbWVudDogbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW46IGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4sXG5cdGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwczogY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzLFxuXHRjbGVhcmNvYXRfcGFyc19mcmFnbWVudDogY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQsXG5cdGlyaWRlc2NlbmNlX3BhcnNfZnJhZ21lbnQ6IGlyaWRlc2NlbmNlX3BhcnNfZnJhZ21lbnQsXG5cdG9wYXF1ZV9mcmFnbWVudDogb3BhcXVlX2ZyYWdtZW50LFxuXHRwYWNraW5nOiBwYWNraW5nLFxuXHRwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50OiBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50LFxuXHRwcm9qZWN0X3ZlcnRleDogcHJvamVjdF92ZXJ0ZXgsXG5cdGRpdGhlcmluZ19mcmFnbWVudDogZGl0aGVyaW5nX2ZyYWdtZW50LFxuXHRkaXRoZXJpbmdfcGFyc19mcmFnbWVudDogZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQsXG5cdHJvdWdobmVzc21hcF9mcmFnbWVudDogcm91Z2huZXNzbWFwX2ZyYWdtZW50LFxuXHRyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudDogcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQsXG5cdHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50OiBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCxcblx0c2hhZG93bWFwX3BhcnNfdmVydGV4OiBzaGFkb3dtYXBfcGFyc192ZXJ0ZXgsXG5cdHNoYWRvd21hcF92ZXJ0ZXg6IHNoYWRvd21hcF92ZXJ0ZXgsXG5cdHNoYWRvd21hc2tfcGFyc19mcmFnbWVudDogc2hhZG93bWFza19wYXJzX2ZyYWdtZW50LFxuXHRza2luYmFzZV92ZXJ0ZXg6IHNraW5iYXNlX3ZlcnRleCxcblx0c2tpbm5pbmdfcGFyc192ZXJ0ZXg6IHNraW5uaW5nX3BhcnNfdmVydGV4LFxuXHRza2lubmluZ192ZXJ0ZXg6IHNraW5uaW5nX3ZlcnRleCxcblx0c2tpbm5vcm1hbF92ZXJ0ZXg6IHNraW5ub3JtYWxfdmVydGV4LFxuXHRzcGVjdWxhcm1hcF9mcmFnbWVudDogc3BlY3VsYXJtYXBfZnJhZ21lbnQsXG5cdHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ6IHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsXG5cdHRvbmVtYXBwaW5nX2ZyYWdtZW50OiB0b25lbWFwcGluZ19mcmFnbWVudCxcblx0dG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudDogdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCxcblx0dHJhbnNtaXNzaW9uX2ZyYWdtZW50OiB0cmFuc21pc3Npb25fZnJhZ21lbnQsXG5cdHRyYW5zbWlzc2lvbl9wYXJzX2ZyYWdtZW50OiB0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc19mcmFnbWVudDogdXZfcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc192ZXJ0ZXg6IHV2X3BhcnNfdmVydGV4LFxuXHR1dl92ZXJ0ZXg6IHV2X3ZlcnRleCxcblx0d29ybGRwb3NfdmVydGV4OiB3b3JsZHBvc192ZXJ0ZXgsXG5cblx0YmFja2dyb3VuZF92ZXJ0OiBiYWNrZ3JvdW5kLnZlcnRleCxcblx0YmFja2dyb3VuZF9mcmFnOiBiYWNrZ3JvdW5kLmZyYWdtZW50LFxuXHRiYWNrZ3JvdW5kQ3ViZV92ZXJ0OiBiYWNrZ3JvdW5kQ3ViZS52ZXJ0ZXgsXG5cdGJhY2tncm91bmRDdWJlX2ZyYWc6IGJhY2tncm91bmRDdWJlLmZyYWdtZW50LFxuXHRjdWJlX3ZlcnQ6IGN1YmUudmVydGV4LFxuXHRjdWJlX2ZyYWc6IGN1YmUuZnJhZ21lbnQsXG5cdGRlcHRoX3ZlcnQ6IGRlcHRoLnZlcnRleCxcblx0ZGVwdGhfZnJhZzogZGVwdGguZnJhZ21lbnQsXG5cdGRpc3RhbmNlUkdCQV92ZXJ0OiBkaXN0YW5jZVJHQkEudmVydGV4LFxuXHRkaXN0YW5jZVJHQkFfZnJhZzogZGlzdGFuY2VSR0JBLmZyYWdtZW50LFxuXHRlcXVpcmVjdF92ZXJ0OiBlcXVpcmVjdC52ZXJ0ZXgsXG5cdGVxdWlyZWN0X2ZyYWc6IGVxdWlyZWN0LmZyYWdtZW50LFxuXHRsaW5lZGFzaGVkX3ZlcnQ6IGxpbmVkYXNoZWQudmVydGV4LFxuXHRsaW5lZGFzaGVkX2ZyYWc6IGxpbmVkYXNoZWQuZnJhZ21lbnQsXG5cdG1lc2hiYXNpY192ZXJ0OiBtZXNoYmFzaWMudmVydGV4LFxuXHRtZXNoYmFzaWNfZnJhZzogbWVzaGJhc2ljLmZyYWdtZW50LFxuXHRtZXNobGFtYmVydF92ZXJ0OiBtZXNobGFtYmVydC52ZXJ0ZXgsXG5cdG1lc2hsYW1iZXJ0X2ZyYWc6IG1lc2hsYW1iZXJ0LmZyYWdtZW50LFxuXHRtZXNobWF0Y2FwX3ZlcnQ6IG1lc2htYXRjYXAudmVydGV4LFxuXHRtZXNobWF0Y2FwX2ZyYWc6IG1lc2htYXRjYXAuZnJhZ21lbnQsXG5cdG1lc2hub3JtYWxfdmVydDogbWVzaG5vcm1hbC52ZXJ0ZXgsXG5cdG1lc2hub3JtYWxfZnJhZzogbWVzaG5vcm1hbC5mcmFnbWVudCxcblx0bWVzaHBob25nX3ZlcnQ6IG1lc2hwaG9uZy52ZXJ0ZXgsXG5cdG1lc2hwaG9uZ19mcmFnOiBtZXNocGhvbmcuZnJhZ21lbnQsXG5cdG1lc2hwaHlzaWNhbF92ZXJ0OiBtZXNocGh5c2ljYWwudmVydGV4LFxuXHRtZXNocGh5c2ljYWxfZnJhZzogbWVzaHBoeXNpY2FsLmZyYWdtZW50LFxuXHRtZXNodG9vbl92ZXJ0OiBtZXNodG9vbi52ZXJ0ZXgsXG5cdG1lc2h0b29uX2ZyYWc6IG1lc2h0b29uLmZyYWdtZW50LFxuXHRwb2ludHNfdmVydDogcG9pbnRzLnZlcnRleCxcblx0cG9pbnRzX2ZyYWc6IHBvaW50cy5mcmFnbWVudCxcblx0c2hhZG93X3ZlcnQ6IHNoYWRvdy52ZXJ0ZXgsXG5cdHNoYWRvd19mcmFnOiBzaGFkb3cuZnJhZ21lbnQsXG5cdHNwcml0ZV92ZXJ0OiBzcHJpdGUudmVydGV4LFxuXHRzcHJpdGVfZnJhZzogc3ByaXRlLmZyYWdtZW50XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfQUxQSEFIQVNIXG5cblx0aWYgKCBkaWZmdXNlQ29sb3IuYSA8IGdldEFscGhhSGFzaFRocmVzaG9sZCggdlBvc2l0aW9uICkgKSBkaXNjYXJkO1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9BTFBIQUhBU0hcblxuXHQvKipcblx0ICogU2VlOiBodHRwczovL2Nhc3VhbC1lZmZlY3RzLmNvbS9yZXNlYXJjaC9XeW1hbjIwMTdIYXNoZWQvaW5kZXguaHRtbFxuXHQgKi9cblxuXHRjb25zdCBmbG9hdCBBTFBIQV9IQVNIX1NDQUxFID0gMC4wNTsgLy8gRGVyaXZlZCBmcm9tIHRyaWFscyBvbmx5LCBhbmQgbWF5IGJlIGNoYW5nZWQuXG5cblx0ZmxvYXQgaGFzaDJEKCB2ZWMyIHZhbHVlICkge1xuXG5cdFx0cmV0dXJuIGZyYWN0KCAxLjBlNCAqIHNpbiggMTcuMCAqIHZhbHVlLnggKyAwLjEgKiB2YWx1ZS55ICkgKiAoIDAuMSArIGFicyggc2luKCAxMy4wICogdmFsdWUueSArIHZhbHVlLnggKSApICkgKTtcblxuXHR9XG5cblx0ZmxvYXQgaGFzaDNEKCB2ZWMzIHZhbHVlICkge1xuXG5cdFx0cmV0dXJuIGhhc2gyRCggdmVjMiggaGFzaDJEKCB2YWx1ZS54eSApLCB2YWx1ZS56ICkgKTtcblxuXHR9XG5cblx0ZmxvYXQgZ2V0QWxwaGFIYXNoVGhyZXNob2xkKCB2ZWMzIHBvc2l0aW9uICkge1xuXG5cdFx0Ly8gRmluZCB0aGUgZGlzY3JldGl6ZWQgZGVyaXZhdGl2ZXMgb2Ygb3VyIGNvb3JkaW5hdGVzXG5cdFx0ZmxvYXQgbWF4RGVyaXYgPSBtYXgoXG5cdFx0XHRsZW5ndGgoIGRGZHgoIHBvc2l0aW9uLnh5eiApICksXG5cdFx0XHRsZW5ndGgoIGRGZHkoIHBvc2l0aW9uLnh5eiApIClcblx0XHQpO1xuXHRcdGZsb2F0IHBpeFNjYWxlID0gMS4wIC8gKCBBTFBIQV9IQVNIX1NDQUxFICogbWF4RGVyaXYgKTtcblxuXHRcdC8vIEZpbmQgdHdvIG5lYXJlc3QgbG9nLWRpc2NyZXRpemVkIG5vaXNlIHNjYWxlc1xuXHRcdHZlYzIgcGl4U2NhbGVzID0gdmVjMihcblx0XHRcdGV4cDIoIGZsb29yKCBsb2cyKCBwaXhTY2FsZSApICkgKSxcblx0XHRcdGV4cDIoIGNlaWwoIGxvZzIoIHBpeFNjYWxlICkgKSApXG5cdFx0KTtcblxuXHRcdC8vIENvbXB1dGUgYWxwaGEgdGhyZXNob2xkcyBhdCBvdXIgdHdvIG5vaXNlIHNjYWxlc1xuXHRcdHZlYzIgYWxwaGEgPSB2ZWMyKFxuXHRcdFx0aGFzaDNEKCBmbG9vciggcGl4U2NhbGVzLnggKiBwb3NpdGlvbi54eXogKSApLFxuXHRcdFx0aGFzaDNEKCBmbG9vciggcGl4U2NhbGVzLnkgKiBwb3NpdGlvbi54eXogKSApXG5cdFx0KTtcblxuXHRcdC8vIEZhY3RvciB0byBpbnRlcnBvbGF0ZSBsZXJwIHdpdGhcblx0XHRmbG9hdCBsZXJwRmFjdG9yID0gZnJhY3QoIGxvZzIoIHBpeFNjYWxlICkgKTtcblxuXHRcdC8vIEludGVycG9sYXRlIGFscGhhIHRocmVzaG9sZCBmcm9tIG5vaXNlIGF0IHR3byBzY2FsZXNcblx0XHRmbG9hdCB4ID0gKCAxLjAgLSBsZXJwRmFjdG9yICkgKiBhbHBoYS54ICsgbGVycEZhY3RvciAqIGFscGhhLnk7XG5cblx0XHQvLyBQYXNzIGludG8gQ0RGIHRvIGNvbXB1dGUgdW5pZm9ybWx5IGRpc3RyaWIgdGhyZXNob2xkXG5cdFx0ZmxvYXQgYSA9IG1pbiggbGVycEZhY3RvciwgMS4wIC0gbGVycEZhY3RvciApO1xuXHRcdHZlYzMgY2FzZXMgPSB2ZWMzKFxuXHRcdFx0eCAqIHggLyAoIDIuMCAqIGEgKiAoIDEuMCAtIGEgKSApLFxuXHRcdFx0KCB4IC0gMC41ICogYSApIC8gKCAxLjAgLSBhICksXG5cdFx0XHQxLjAgLSAoICggMS4wIC0geCApICogKCAxLjAgLSB4ICkgLyAoIDIuMCAqIGEgKiAoIDEuMCAtIGEgKSApIClcblx0XHQpO1xuXG5cdFx0Ly8gRmluZCBvdXIgZmluYWwsIHVuaWZvcm1seSBkaXN0cmlidXRlZCBhbHBoYSB0aHJlc2hvbGQgKM6xz4QpXG5cdFx0ZmxvYXQgdGhyZXNob2xkID0gKCB4IDwgKCAxLjAgLSBhICkgKVxuXHRcdFx0PyAoICggeCA8IGEgKSA/IGNhc2VzLnggOiBjYXNlcy55IClcblx0XHRcdDogY2FzZXMuejtcblxuXHRcdC8vIEF2b2lkcyDOsc+EID09IDAuIENvdWxkIGFsc28gZG8gzrHPhCA9MS3Osc+EXG5cdFx0cmV0dXJuIGNsYW1wKCB0aHJlc2hvbGQgLCAxLjBlLTYsIDEuMCApO1xuXG5cdH1cblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfQUxQSEFNQVBcblxuXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB2QWxwaGFNYXBVdiApLmc7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0FMUEhBTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0FMUEhBVEVTVFxuXG5cdCNpZmRlZiBBTFBIQV9UT19DT1ZFUkFHRVxuXG5cdGRpZmZ1c2VDb2xvci5hID0gc21vb3Roc3RlcCggYWxwaGFUZXN0LCBhbHBoYVRlc3QgKyBmd2lkdGgoIGRpZmZ1c2VDb2xvci5hICksIGRpZmZ1c2VDb2xvci5hICk7XG5cdGlmICggZGlmZnVzZUNvbG9yLmEgPT0gMC4wICkgZGlzY2FyZDtcblxuXHQjZWxzZVxuXG5cdGlmICggZGlmZnVzZUNvbG9yLmEgPCBhbHBoYVRlc3QgKSBkaXNjYXJkO1xuXG5cdCNlbmRpZlxuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9BTFBIQVRFU1Rcblx0dW5pZm9ybSBmbG9hdCBhbHBoYVRlc3Q7XG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9BT01BUFxuXG5cdC8vIHJlYWRzIGNoYW5uZWwgUiwgY29tcGF0aWJsZSB3aXRoIGEgY29tYmluZWQgT2NjbHVzaW9uUm91Z2huZXNzTWV0YWxsaWMgKFJHQikgdGV4dHVyZVxuXHRmbG9hdCBhbWJpZW50T2NjbHVzaW9uID0gKCB0ZXh0dXJlMkQoIGFvTWFwLCB2QW9NYXBVdiApLnIgLSAxLjAgKSAqIGFvTWFwSW50ZW5zaXR5ICsgMS4wO1xuXG5cdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBhbWJpZW50T2NjbHVzaW9uO1xuXG5cdCNpZiBkZWZpbmVkKCBVU0VfQ0xFQVJDT0FUICkgXG5cdFx0Y2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCAqPSBhbWJpZW50T2NjbHVzaW9uO1xuXHQjZW5kaWZcblxuXHQjaWYgZGVmaW5lZCggVVNFX1NIRUVOICkgXG5cdFx0c2hlZW5TcGVjdWxhckluZGlyZWN0ICo9IGFtYmllbnRPY2NsdXNpb247XG5cdCNlbmRpZlxuXG5cdCNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggU1RBTkRBUkQgKVxuXG5cdFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyICkgKTtcblxuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKj0gY29tcHV0ZVNwZWN1bGFyT2NjbHVzaW9uKCBkb3ROViwgYW1iaWVudE9jY2x1c2lvbiwgbWF0ZXJpYWwucm91Z2huZXNzICk7XG5cblx0I2VuZGlmXG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0FPTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgYW9NYXA7XG5cdHVuaWZvcm0gZmxvYXQgYW9NYXBJbnRlbnNpdHk7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0JBVENISU5HXG5cdCNpZiAhIGRlZmluZWQoIEdMX0FOR0xFX211bHRpX2RyYXcgKVxuXHQjZGVmaW5lIGdsX0RyYXdJRCBfZ2xfRHJhd0lEXG5cdHVuaWZvcm0gaW50IF9nbF9EcmF3SUQ7XG5cdCNlbmRpZlxuXG5cdHVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGJhdGNoaW5nVGV4dHVyZTtcblx0dW5pZm9ybSBoaWdocCB1c2FtcGxlcjJEIGJhdGNoaW5nSWRUZXh0dXJlO1xuXHRtYXQ0IGdldEJhdGNoaW5nTWF0cml4KCBjb25zdCBpbiBmbG9hdCBpICkge1xuXG5cdFx0aW50IHNpemUgPSB0ZXh0dXJlU2l6ZSggYmF0Y2hpbmdUZXh0dXJlLCAwICkueDtcblx0XHRpbnQgaiA9IGludCggaSApICogNDtcblx0XHRpbnQgeCA9IGogJSBzaXplO1xuXHRcdGludCB5ID0gaiAvIHNpemU7XG5cdFx0dmVjNCB2MSA9IHRleGVsRmV0Y2goIGJhdGNoaW5nVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSwgMCApO1xuXHRcdHZlYzQgdjIgPSB0ZXhlbEZldGNoKCBiYXRjaGluZ1RleHR1cmUsIGl2ZWMyKCB4ICsgMSwgeSApLCAwICk7XG5cdFx0dmVjNCB2MyA9IHRleGVsRmV0Y2goIGJhdGNoaW5nVGV4dHVyZSwgaXZlYzIoIHggKyAyLCB5ICksIDAgKTtcblx0XHR2ZWM0IHY0ID0gdGV4ZWxGZXRjaCggYmF0Y2hpbmdUZXh0dXJlLCBpdmVjMiggeCArIDMsIHkgKSwgMCApO1xuXHRcdHJldHVybiBtYXQ0KCB2MSwgdjIsIHYzLCB2NCApO1xuXG5cdH1cblxuXHRmbG9hdCBnZXRJbmRpcmVjdEluZGV4KCBjb25zdCBpbiBpbnQgaSApIHtcblxuXHRcdGludCBzaXplID0gdGV4dHVyZVNpemUoIGJhdGNoaW5nSWRUZXh0dXJlLCAwICkueDtcblx0XHRpbnQgeCA9IGkgJSBzaXplO1xuXHRcdGludCB5ID0gaSAvIHNpemU7XG5cdFx0cmV0dXJuIGZsb2F0KCB0ZXhlbEZldGNoKCBiYXRjaGluZ0lkVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSwgMCApLnIgKTtcblxuXHR9XG5cbiNlbmRpZlxuXG4jaWZkZWYgVVNFX0JBVENISU5HX0NPTE9SXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgYmF0Y2hpbmdDb2xvclRleHR1cmU7XG5cdHZlYzMgZ2V0QmF0Y2hpbmdDb2xvciggY29uc3QgaW4gZmxvYXQgaSApIHtcblxuXHRcdGludCBzaXplID0gdGV4dHVyZVNpemUoIGJhdGNoaW5nQ29sb3JUZXh0dXJlLCAwICkueDtcblx0XHRpbnQgaiA9IGludCggaSApO1xuXHRcdGludCB4ID0gaiAlIHNpemU7XG5cdFx0aW50IHkgPSBqIC8gc2l6ZTtcblx0XHRyZXR1cm4gdGV4ZWxGZXRjaCggYmF0Y2hpbmdDb2xvclRleHR1cmUsIGl2ZWMyKCB4LCB5ICksIDAgKS5yZ2I7XG5cblx0fVxuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9CQVRDSElOR1xuXHRtYXQ0IGJhdGNoaW5nTWF0cml4ID0gZ2V0QmF0Y2hpbmdNYXRyaXgoIGdldEluZGlyZWN0SW5kZXgoIGdsX0RyYXdJRCApICk7XG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxudmVjMyB0cmFuc2Zvcm1lZCA9IHZlYzMoIHBvc2l0aW9uICk7XG5cbiNpZmRlZiBVU0VfQUxQSEFIQVNIXG5cblx0dlBvc2l0aW9uID0gdmVjMyggcG9zaXRpb24gKTtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbnZlYzMgb2JqZWN0Tm9ybWFsID0gdmVjMyggbm9ybWFsICk7XG5cbiNpZmRlZiBVU0VfVEFOR0VOVFxuXG5cdHZlYzMgb2JqZWN0VGFuZ2VudCA9IHZlYzMoIHRhbmdlbnQueHl6ICk7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG5cbmZsb2F0IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggLyogY29uc3QgaW4gZmxvYXQgZG90TkwsIGNvbnN0IGluIGZsb2F0IGRvdE5WICovICkge1xuXG5cdC8vIGdlb21ldHJ5IHRlcm0gaXMgKG4gZG90IGwpKG4gZG90IHYpIC8gNChuIGRvdCBsKShuIGRvdCB2KVxuXHRyZXR1cm4gMC4yNTtcblxufVxuXG5mbG9hdCBEX0JsaW5uUGhvbmcoIGNvbnN0IGluIGZsb2F0IHNoaW5pbmVzcywgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XG5cblx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiAoIHNoaW5pbmVzcyAqIDAuNSArIDEuMCApICogcG93KCBkb3ROSCwgc2hpbmluZXNzICk7XG5cbn1cblxudmVjMyBCUkRGX0JsaW5uUGhvbmcoIGNvbnN0IGluIHZlYzMgbGlnaHREaXIsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc2hpbmluZXNzICkge1xuXG5cdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XG5cblx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xuXHRmbG9hdCBkb3RWSCA9IHNhdHVyYXRlKCBkb3QoIHZpZXdEaXIsIGhhbGZEaXIgKSApO1xuXG5cdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgMS4wLCBkb3RWSCApO1xuXG5cdGZsb2F0IEcgPSBHX0JsaW5uUGhvbmdfSW1wbGljaXQoIC8qIGRvdE5MLCBkb3ROViAqLyApO1xuXG5cdGZsb2F0IEQgPSBEX0JsaW5uUGhvbmcoIHNoaW5pbmVzcywgZG90TkggKTtcblxuXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcblxufSAvLyB2YWxpZGF0ZWRcblxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG5cbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcblxuXHQvLyBYWVogdG8gbGluZWFyLXNSR0IgY29sb3Igc3BhY2Vcblx0Y29uc3QgbWF0MyBYWVpfVE9fUkVDNzA5ID0gbWF0Myhcblx0XHQgMy4yNDA0NTQyLCAtMC45NjkyNjYwLCAgMC4wNTU2NDM0LFxuXHRcdC0xLjUzNzEzODUsICAxLjg3NjAxMDgsIC0wLjIwNDAyNTksXG5cdFx0LTAuNDk4NTMxNCwgIDAuMDQxNTU2MCwgIDEuMDU3MjI1MlxuXHQpO1xuXG5cdC8vIEFzc3VtZSBhaXIgaW50ZXJmYWNlIGZvciB0b3Bcblx0Ly8gTm90ZTogV2UgZG9uJ3QgaGFuZGxlIHRoZSBjYXNlIGZyZXNuZWwwID09IDFcblx0dmVjMyBGcmVzbmVsMFRvSW9yKCB2ZWMzIGZyZXNuZWwwICkge1xuXG5cdFx0dmVjMyBzcXJ0RjAgPSBzcXJ0KCBmcmVzbmVsMCApO1xuXHRcdHJldHVybiAoIHZlYzMoIDEuMCApICsgc3FydEYwICkgLyAoIHZlYzMoIDEuMCApIC0gc3FydEYwICk7XG5cblx0fVxuXG5cdC8vIENvbnZlcnNpb24gRk8vSU9SXG5cdHZlYzMgSW9yVG9GcmVzbmVsMCggdmVjMyB0cmFuc21pdHRlZElvciwgZmxvYXQgaW5jaWRlbnRJb3IgKSB7XG5cblx0XHRyZXR1cm4gcG93MiggKCB0cmFuc21pdHRlZElvciAtIHZlYzMoIGluY2lkZW50SW9yICkgKSAvICggdHJhbnNtaXR0ZWRJb3IgKyB2ZWMzKCBpbmNpZGVudElvciApICkgKTtcblxuXHR9XG5cblx0Ly8gaW9yIGlzIGEgdmFsdWUgYmV0d2VlbiAxLjAgYW5kIDMuMC4gMS4wIGlzIGFpciBpbnRlcmZhY2Vcblx0ZmxvYXQgSW9yVG9GcmVzbmVsMCggZmxvYXQgdHJhbnNtaXR0ZWRJb3IsIGZsb2F0IGluY2lkZW50SW9yICkge1xuXG5cdFx0cmV0dXJuIHBvdzIoICggdHJhbnNtaXR0ZWRJb3IgLSBpbmNpZGVudElvciApIC8gKCB0cmFuc21pdHRlZElvciArIGluY2lkZW50SW9yICkpO1xuXG5cdH1cblxuXHQvLyBGcmVzbmVsIGVxdWF0aW9ucyBmb3IgZGllbGVjdHJpYy9kaWVsZWN0cmljIGludGVyZmFjZXMuXG5cdC8vIFJlZjogaHR0cHM6Ly9iZWxjb3VyLmdpdGh1Yi5pby9ibG9nL3Jlc2VhcmNoLzIwMTcvMDUvMDEvYnJkZi10aGluLWZpbG0uaHRtbFxuXHQvLyBFdmFsdWF0aW9uIFhZWiBzZW5zaXRpdml0eSBjdXJ2ZXMgaW4gRm91cmllciBzcGFjZVxuXHR2ZWMzIGV2YWxTZW5zaXRpdml0eSggZmxvYXQgT1BELCB2ZWMzIHNoaWZ0ICkge1xuXG5cdFx0ZmxvYXQgcGhhc2UgPSAyLjAgKiBQSSAqIE9QRCAqIDEuMGUtOTtcblx0XHR2ZWMzIHZhbCA9IHZlYzMoIDUuNDg1NmUtMTMsIDQuNDIwMWUtMTMsIDUuMjQ4MWUtMTMgKTtcblx0XHR2ZWMzIHBvcyA9IHZlYzMoIDEuNjgxMGUrMDYsIDEuNzk1M2UrMDYsIDIuMjA4NGUrMDYgKTtcblx0XHR2ZWMzIHZhciA9IHZlYzMoIDQuMzI3OGUrMDksIDkuMzA0NmUrMDksIDYuNjEyMWUrMDkgKTtcblxuXHRcdHZlYzMgeHl6ID0gdmFsICogc3FydCggMi4wICogUEkgKiB2YXIgKSAqIGNvcyggcG9zICogcGhhc2UgKyBzaGlmdCApICogZXhwKCAtIHBvdzIoIHBoYXNlICkgKiB2YXIgKTtcblx0XHR4eXoueCArPSA5Ljc0NzBlLTE0ICogc3FydCggMi4wICogUEkgKiA0LjUyODJlKzA5ICkgKiBjb3MoIDIuMjM5OWUrMDYgKiBwaGFzZSArIHNoaWZ0WyAwIF0gKSAqIGV4cCggLSA0LjUyODJlKzA5ICogcG93MiggcGhhc2UgKSApO1xuXHRcdHh5eiAvPSAxLjA2ODVlLTc7XG5cblx0XHR2ZWMzIHJnYiA9IFhZWl9UT19SRUM3MDkgKiB4eXo7XG5cdFx0cmV0dXJuIHJnYjtcblxuXHR9XG5cblx0dmVjMyBldmFsSXJpZGVzY2VuY2UoIGZsb2F0IG91dHNpZGVJT1IsIGZsb2F0IGV0YTIsIGZsb2F0IGNvc1RoZXRhMSwgZmxvYXQgdGhpbkZpbG1UaGlja25lc3MsIHZlYzMgYmFzZUYwICkge1xuXG5cdFx0dmVjMyBJO1xuXG5cdFx0Ly8gRm9yY2UgaXJpZGVzY2VuY2VJT1IgLT4gb3V0c2lkZUlPUiB3aGVuIHRoaW5GaWxtVGhpY2tuZXNzIC0+IDAuMFxuXHRcdGZsb2F0IGlyaWRlc2NlbmNlSU9SID0gbWl4KCBvdXRzaWRlSU9SLCBldGEyLCBzbW9vdGhzdGVwKCAwLjAsIDAuMDMsIHRoaW5GaWxtVGhpY2tuZXNzICkgKTtcblx0XHQvLyBFdmFsdWF0ZSB0aGUgY29zVGhldGEgb24gdGhlIGJhc2UgbGF5ZXIgKFNuZWxsIGxhdylcblx0XHRmbG9hdCBzaW5UaGV0YTJTcSA9IHBvdzIoIG91dHNpZGVJT1IgLyBpcmlkZXNjZW5jZUlPUiApICogKCAxLjAgLSBwb3cyKCBjb3NUaGV0YTEgKSApO1xuXG5cdFx0Ly8gSGFuZGxlIFRJUjpcblx0XHRmbG9hdCBjb3NUaGV0YTJTcSA9IDEuMCAtIHNpblRoZXRhMlNxO1xuXHRcdGlmICggY29zVGhldGEyU3EgPCAwLjAgKSB7XG5cblx0XHRcdHJldHVybiB2ZWMzKCAxLjAgKTtcblxuXHRcdH1cblxuXHRcdGZsb2F0IGNvc1RoZXRhMiA9IHNxcnQoIGNvc1RoZXRhMlNxICk7XG5cblx0XHQvLyBGaXJzdCBpbnRlcmZhY2Vcblx0XHRmbG9hdCBSMCA9IElvclRvRnJlc25lbDAoIGlyaWRlc2NlbmNlSU9SLCBvdXRzaWRlSU9SICk7XG5cdFx0ZmxvYXQgUjEyID0gRl9TY2hsaWNrKCBSMCwgMS4wLCBjb3NUaGV0YTEgKTtcblx0XHRmbG9hdCBUMTIxID0gMS4wIC0gUjEyO1xuXHRcdGZsb2F0IHBoaTEyID0gMC4wO1xuXHRcdGlmICggaXJpZGVzY2VuY2VJT1IgPCBvdXRzaWRlSU9SICkgcGhpMTIgPSBQSTtcblx0XHRmbG9hdCBwaGkyMSA9IFBJIC0gcGhpMTI7XG5cblx0XHQvLyBTZWNvbmQgaW50ZXJmYWNlXG5cdFx0dmVjMyBiYXNlSU9SID0gRnJlc25lbDBUb0lvciggY2xhbXAoIGJhc2VGMCwgMC4wLCAwLjk5OTkgKSApOyAvLyBndWFyZCBhZ2FpbnN0IDEuMFxuXHRcdHZlYzMgUjEgPSBJb3JUb0ZyZXNuZWwwKCBiYXNlSU9SLCBpcmlkZXNjZW5jZUlPUiApO1xuXHRcdHZlYzMgUjIzID0gRl9TY2hsaWNrKCBSMSwgMS4wLCBjb3NUaGV0YTIgKTtcblx0XHR2ZWMzIHBoaTIzID0gdmVjMyggMC4wICk7XG5cdFx0aWYgKCBiYXNlSU9SWyAwIF0gPCBpcmlkZXNjZW5jZUlPUiApIHBoaTIzWyAwIF0gPSBQSTtcblx0XHRpZiAoIGJhc2VJT1JbIDEgXSA8IGlyaWRlc2NlbmNlSU9SICkgcGhpMjNbIDEgXSA9IFBJO1xuXHRcdGlmICggYmFzZUlPUlsgMiBdIDwgaXJpZGVzY2VuY2VJT1IgKSBwaGkyM1sgMiBdID0gUEk7XG5cblx0XHQvLyBQaGFzZSBzaGlmdFxuXHRcdGZsb2F0IE9QRCA9IDIuMCAqIGlyaWRlc2NlbmNlSU9SICogdGhpbkZpbG1UaGlja25lc3MgKiBjb3NUaGV0YTI7XG5cdFx0dmVjMyBwaGkgPSB2ZWMzKCBwaGkyMSApICsgcGhpMjM7XG5cblx0XHQvLyBDb21wb3VuZCB0ZXJtc1xuXHRcdHZlYzMgUjEyMyA9IGNsYW1wKCBSMTIgKiBSMjMsIDFlLTUsIDAuOTk5OSApO1xuXHRcdHZlYzMgcjEyMyA9IHNxcnQoIFIxMjMgKTtcblx0XHR2ZWMzIFJzID0gcG93MiggVDEyMSApICogUjIzIC8gKCB2ZWMzKCAxLjAgKSAtIFIxMjMgKTtcblxuXHRcdC8vIFJlZmxlY3RhbmNlIHRlcm0gZm9yIG0gPSAwIChEQyB0ZXJtIGFtcGxpdHVkZSlcblx0XHR2ZWMzIEMwID0gUjEyICsgUnM7XG5cdFx0SSA9IEMwO1xuXG5cdFx0Ly8gUmVmbGVjdGFuY2UgdGVybSBmb3IgbSA+IDAgKHBhaXJzIG9mIGRpcmFjcylcblx0XHR2ZWMzIENtID0gUnMgLSBUMTIxO1xuXHRcdGZvciAoIGludCBtID0gMTsgbSA8PSAyOyArKyBtICkge1xuXG5cdFx0XHRDbSAqPSByMTIzO1xuXHRcdFx0dmVjMyBTbSA9IDIuMCAqIGV2YWxTZW5zaXRpdml0eSggZmxvYXQoIG0gKSAqIE9QRCwgZmxvYXQoIG0gKSAqIHBoaSApO1xuXHRcdFx0SSArPSBDbSAqIFNtO1xuXG5cdFx0fVxuXG5cdFx0Ly8gU2luY2Ugb3V0IG9mIGdhbXV0IGNvbG9ycyBtaWdodCBiZSBwcm9kdWNlZCwgbmVnYXRpdmUgY29sb3IgdmFsdWVzIGFyZSBjbGFtcGVkIHRvIDAuXG5cdFx0cmV0dXJuIG1heCggSSwgdmVjMyggMC4wICkgKTtcblxuXHR9XG5cbiNlbmRpZlxuXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfQlVNUE1BUFxuXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGJ1bXBNYXA7XG5cdHVuaWZvcm0gZmxvYXQgYnVtcFNjYWxlO1xuXG5cdC8vIEJ1bXAgTWFwcGluZyBVbnBhcmFtZXRyaXplZCBTdXJmYWNlcyBvbiB0aGUgR1BVIGJ5IE1vcnRlbiBTLiBNaWtrZWxzZW5cblx0Ly8gaHR0cHM6Ly9tbWlray5naXRodWIuaW8vcGFwZXJzM2QvbW1fc2ZncmFkX2J1bXAucGRmXG5cblx0Ly8gRXZhbHVhdGUgdGhlIGRlcml2YXRpdmUgb2YgdGhlIGhlaWdodCB3LnIudC4gc2NyZWVuLXNwYWNlIHVzaW5nIGZvcndhcmQgZGlmZmVyZW5jaW5nIChsaXN0aW5nIDIpXG5cblx0dmVjMiBkSGR4eV9md2QoKSB7XG5cblx0XHR2ZWMyIGRTVGR4ID0gZEZkeCggdkJ1bXBNYXBVdiApO1xuXHRcdHZlYzIgZFNUZHkgPSBkRmR5KCB2QnVtcE1hcFV2ICk7XG5cblx0XHRmbG9hdCBIbGwgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZCdW1wTWFwVXYgKS54O1xuXHRcdGZsb2F0IGRCeCA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdkJ1bXBNYXBVdiArIGRTVGR4ICkueCAtIEhsbDtcblx0XHRmbG9hdCBkQnkgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZCdW1wTWFwVXYgKyBkU1RkeSApLnggLSBIbGw7XG5cblx0XHRyZXR1cm4gdmVjMiggZEJ4LCBkQnkgKTtcblxuXHR9XG5cblx0dmVjMyBwZXJ0dXJiTm9ybWFsQXJiKCB2ZWMzIHN1cmZfcG9zLCB2ZWMzIHN1cmZfbm9ybSwgdmVjMiBkSGR4eSwgZmxvYXQgZmFjZURpcmVjdGlvbiApIHtcblxuXHRcdC8vIG5vcm1hbGl6ZSBpcyBkb25lIHRvIGVuc3VyZSB0aGF0IHRoZSBidW1wIG1hcCBsb29rcyB0aGUgc2FtZSByZWdhcmRsZXNzIG9mIHRoZSB0ZXh0dXJlJ3Mgc2NhbGVcblx0XHR2ZWMzIHZTaWdtYVggPSBub3JtYWxpemUoIGRGZHgoIHN1cmZfcG9zLnh5eiApICk7XG5cdFx0dmVjMyB2U2lnbWFZID0gbm9ybWFsaXplKCBkRmR5KCBzdXJmX3Bvcy54eXogKSApO1xuXHRcdHZlYzMgdk4gPSBzdXJmX25vcm07IC8vIG5vcm1hbGl6ZWRcblxuXHRcdHZlYzMgUjEgPSBjcm9zcyggdlNpZ21hWSwgdk4gKTtcblx0XHR2ZWMzIFIyID0gY3Jvc3MoIHZOLCB2U2lnbWFYICk7XG5cblx0XHRmbG9hdCBmRGV0ID0gZG90KCB2U2lnbWFYLCBSMSApICogZmFjZURpcmVjdGlvbjtcblxuXHRcdHZlYzMgdkdyYWQgPSBzaWduKCBmRGV0ICkgKiAoIGRIZHh5LnggKiBSMSArIGRIZHh5LnkgKiBSMiApO1xuXHRcdHJldHVybiBub3JtYWxpemUoIGFicyggZkRldCApICogc3VyZl9ub3JtIC0gdkdyYWQgKTtcblxuXHR9XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcblxuXHR2ZWM0IHBsYW5lO1xuXG5cdCNpZmRlZiBBTFBIQV9UT19DT1ZFUkFHRVxuXG5cdFx0ZmxvYXQgZGlzdGFuY2VUb1BsYW5lLCBkaXN0YW5jZUdyYWRpZW50O1xuXHRcdGZsb2F0IGNsaXBPcGFjaXR5ID0gMS4wO1xuXG5cdFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxuXHRcdGZvciAoIGludCBpID0gMDsgaSA8IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcblxuXHRcdFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xuXHRcdFx0ZGlzdGFuY2VUb1BsYW5lID0gLSBkb3QoIHZDbGlwUG9zaXRpb24sIHBsYW5lLnh5eiApICsgcGxhbmUudztcblx0XHRcdGRpc3RhbmNlR3JhZGllbnQgPSBmd2lkdGgoIGRpc3RhbmNlVG9QbGFuZSApIC8gMi4wO1xuXHRcdFx0Y2xpcE9wYWNpdHkgKj0gc21vb3Roc3RlcCggLSBkaXN0YW5jZUdyYWRpZW50LCBkaXN0YW5jZUdyYWRpZW50LCBkaXN0YW5jZVRvUGxhbmUgKTtcblxuXHRcdFx0aWYgKCBjbGlwT3BhY2l0eSA9PSAwLjAgKSBkaXNjYXJkO1xuXG5cdFx0fVxuXHRcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cblx0XHQjaWYgVU5JT05fQ0xJUFBJTkdfUExBTkVTIDwgTlVNX0NMSVBQSU5HX1BMQU5FU1xuXG5cdFx0XHRmbG9hdCB1bmlvbkNsaXBPcGFjaXR5ID0gMS4wO1xuXG5cdFx0XHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XG5cdFx0XHRmb3IgKCBpbnQgaSA9IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSA8IE5VTV9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XG5cblx0XHRcdFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xuXHRcdFx0XHRkaXN0YW5jZVRvUGxhbmUgPSAtIGRvdCggdkNsaXBQb3NpdGlvbiwgcGxhbmUueHl6ICkgKyBwbGFuZS53O1xuXHRcdFx0XHRkaXN0YW5jZUdyYWRpZW50ID0gZndpZHRoKCBkaXN0YW5jZVRvUGxhbmUgKSAvIDIuMDtcblx0XHRcdFx0dW5pb25DbGlwT3BhY2l0eSAqPSAxLjAgLSBzbW9vdGhzdGVwKCAtIGRpc3RhbmNlR3JhZGllbnQsIGRpc3RhbmNlR3JhZGllbnQsIGRpc3RhbmNlVG9QbGFuZSApO1xuXG5cdFx0XHR9XG5cdFx0XHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxuXG5cdFx0XHRjbGlwT3BhY2l0eSAqPSAxLjAgLSB1bmlvbkNsaXBPcGFjaXR5O1xuXG5cdFx0I2VuZGlmXG5cblx0XHRkaWZmdXNlQ29sb3IuYSAqPSBjbGlwT3BhY2l0eTtcblxuXHRcdGlmICggZGlmZnVzZUNvbG9yLmEgPT0gMC4wICkgZGlzY2FyZDtcblxuXHQjZWxzZVxuXG5cdFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxuXHRcdGZvciAoIGludCBpID0gMDsgaSA8IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcblxuXHRcdFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xuXHRcdFx0aWYgKCBkb3QoIHZDbGlwUG9zaXRpb24sIHBsYW5lLnh5eiApID4gcGxhbmUudyApIGRpc2NhcmQ7XG5cblx0XHR9XG5cdFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcblxuXHRcdCNpZiBVTklPTl9DTElQUElOR19QTEFORVMgPCBOVU1fQ0xJUFBJTkdfUExBTkVTXG5cblx0XHRcdGJvb2wgY2xpcHBlZCA9IHRydWU7XG5cblx0XHRcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0XHRcdGZvciAoIGludCBpID0gVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpIDwgTlVNX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcblxuXHRcdFx0XHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XG5cdFx0XHRcdGNsaXBwZWQgPSAoIGRvdCggdkNsaXBQb3NpdGlvbiwgcGxhbmUueHl6ICkgPiBwbGFuZS53ICkgJiYgY2xpcHBlZDtcblxuXHRcdFx0fVxuXHRcdFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcblxuXHRcdFx0aWYgKCBjbGlwcGVkICkgZGlzY2FyZDtcblxuXHRcdCNlbmRpZlxuXG5cdCNlbmRpZlxuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXG5cblx0dmFyeWluZyB2ZWMzIHZDbGlwUG9zaXRpb247XG5cblx0dW5pZm9ybSB2ZWM0IGNsaXBwaW5nUGxhbmVzWyBOVU1fQ0xJUFBJTkdfUExBTkVTIF07XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcblxuXHR2YXJ5aW5nIHZlYzMgdkNsaXBQb3NpdGlvbjtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxuXG5cdHZDbGlwUG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXG5cblx0ZGlmZnVzZUNvbG9yICo9IHZDb2xvcjtcblxuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SIClcblxuXHRkaWZmdXNlQ29sb3IucmdiICo9IHZDb2xvcjtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxuXG5cdHZhcnlpbmcgdmVjNCB2Q29sb3I7XG5cbiNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApXG5cblx0dmFyeWluZyB2ZWMzIHZDb2xvcjtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxuXG5cdHZhcnlpbmcgdmVjNCB2Q29sb3I7XG5cbiNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApIHx8IGRlZmluZWQoIFVTRV9JTlNUQU5DSU5HX0NPTE9SICkgfHwgZGVmaW5lZCggVVNFX0JBVENISU5HX0NPTE9SIClcblxuXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXG5cblx0dkNvbG9yID0gdmVjNCggMS4wICk7XG5cbiNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApIHx8IGRlZmluZWQoIFVTRV9JTlNUQU5DSU5HX0NPTE9SICkgfHwgZGVmaW5lZCggVVNFX0JBVENISU5HX0NPTE9SIClcblxuXHR2Q29sb3IgPSB2ZWMzKCAxLjAgKTtcblxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfQ09MT1JcblxuXHR2Q29sb3IgKj0gY29sb3I7XG5cbiNlbmRpZlxuXG4jaWZkZWYgVVNFX0lOU1RBTkNJTkdfQ09MT1JcblxuXHR2Q29sb3IueHl6ICo9IGluc3RhbmNlQ29sb3IueHl6O1xuXG4jZW5kaWZcblxuI2lmZGVmIFVTRV9CQVRDSElOR19DT0xPUlxuXG5cdHZlYzMgYmF0Y2hpbmdDb2xvciA9IGdldEJhdGNoaW5nQ29sb3IoIGdldEluZGlyZWN0SW5kZXgoIGdsX0RyYXdJRCApICk7XG5cblx0dkNvbG9yLnh5eiAqPSBiYXRjaGluZ0NvbG9yLnh5ejtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1ODk3OTNcbiNkZWZpbmUgUEkyIDYuMjgzMTg1MzA3MTc5NTg2XG4jZGVmaW5lIFBJX0hBTEYgMS41NzA3OTYzMjY3OTQ4OTY2XG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxODM3OTA3XG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkyIDAuMTU5MTU0OTQzMDkxODk1MzVcbiNkZWZpbmUgRVBTSUxPTiAxZS02XG5cbiNpZm5kZWYgc2F0dXJhdGVcbi8vIDx0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50PiBtYXkgaGF2ZSBkZWZpbmVkIHNhdHVyYXRlKCkgYWxyZWFkeVxuI2RlZmluZSBzYXR1cmF0ZSggYSApIGNsYW1wKCBhLCAwLjAsIDEuMCApXG4jZW5kaWZcbiNkZWZpbmUgd2hpdGVDb21wbGVtZW50KCBhICkgKCAxLjAgLSBzYXR1cmF0ZSggYSApIClcblxuZmxvYXQgcG93MiggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeDsgfVxudmVjMyBwb3cyKCBjb25zdCBpbiB2ZWMzIHggKSB7IHJldHVybiB4Kng7IH1cbmZsb2F0IHBvdzMoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4KngqeDsgfVxuZmxvYXQgcG93NCggY29uc3QgaW4gZmxvYXQgeCApIHsgZmxvYXQgeDIgPSB4Kng7IHJldHVybiB4Mip4MjsgfVxuZmxvYXQgbWF4MyggY29uc3QgaW4gdmVjMyB2ICkgeyByZXR1cm4gbWF4KCBtYXgoIHYueCwgdi55ICksIHYueiApOyB9XG5mbG9hdCBhdmVyYWdlKCBjb25zdCBpbiB2ZWMzIHYgKSB7IHJldHVybiBkb3QoIHYsIHZlYzMoIDAuMzMzMzMzMyApICk7IH1cblxuLy8gZXhwZWN0cyB2YWx1ZXMgaW4gdGhlIHJhbmdlIG9mIFswLDFdeFswLDFdLCByZXR1cm5zIHZhbHVlcyBpbiB0aGUgWzAsMV0gcmFuZ2UuXG4vLyBkbyBub3QgY29sbGFwc2UgaW50byBhIHNpbmdsZSBmdW5jdGlvbiBwZXI6IGh0dHA6Ly9ieXRlYmxhY2tzbWl0aC5jb20vaW1wcm92ZW1lbnRzLXRvLXRoZS1jYW5vbmljYWwtb25lLWxpbmVyLWdsc2wtcmFuZC1mb3Itb3BlbmdsLWVzLTItMC9cbmhpZ2hwIGZsb2F0IHJhbmQoIGNvbnN0IGluIHZlYzIgdXYgKSB7XG5cblx0Y29uc3QgaGlnaHAgZmxvYXQgYSA9IDEyLjk4OTgsIGIgPSA3OC4yMzMsIGMgPSA0Mzc1OC41NDUzO1xuXHRoaWdocCBmbG9hdCBkdCA9IGRvdCggdXYueHksIHZlYzIoIGEsYiApICksIHNuID0gbW9kKCBkdCwgUEkgKTtcblxuXHRyZXR1cm4gZnJhY3QoIHNpbiggc24gKSAqIGMgKTtcblxufVxuXG4jaWZkZWYgSElHSF9QUkVDSVNJT05cblx0ZmxvYXQgcHJlY2lzaW9uU2FmZUxlbmd0aCggdmVjMyB2ICkgeyByZXR1cm4gbGVuZ3RoKCB2ICk7IH1cbiNlbHNlXG5cdGZsb2F0IHByZWNpc2lvblNhZmVMZW5ndGgoIHZlYzMgdiApIHtcblx0XHRmbG9hdCBtYXhDb21wb25lbnQgPSBtYXgzKCBhYnMoIHYgKSApO1xuXHRcdHJldHVybiBsZW5ndGgoIHYgLyBtYXhDb21wb25lbnQgKSAqIG1heENvbXBvbmVudDtcblx0fVxuI2VuZGlmXG5cbnN0cnVjdCBJbmNpZGVudExpZ2h0IHtcblx0dmVjMyBjb2xvcjtcblx0dmVjMyBkaXJlY3Rpb247XG5cdGJvb2wgdmlzaWJsZTtcbn07XG5cbnN0cnVjdCBSZWZsZWN0ZWRMaWdodCB7XG5cdHZlYzMgZGlyZWN0RGlmZnVzZTtcblx0dmVjMyBkaXJlY3RTcGVjdWxhcjtcblx0dmVjMyBpbmRpcmVjdERpZmZ1c2U7XG5cdHZlYzMgaW5kaXJlY3RTcGVjdWxhcjtcbn07XG5cbiNpZmRlZiBVU0VfQUxQSEFIQVNIXG5cblx0dmFyeWluZyB2ZWMzIHZQb3NpdGlvbjtcblxuI2VuZGlmXG5cbnZlYzMgdHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XG5cblx0cmV0dXJuIG5vcm1hbGl6ZSggKCBtYXRyaXggKiB2ZWM0KCBkaXIsIDAuMCApICkueHl6ICk7XG5cbn1cblxudmVjMyBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XG5cblx0Ly8gZGlyIGNhbiBiZSBlaXRoZXIgYSBkaXJlY3Rpb24gdmVjdG9yIG9yIGEgbm9ybWFsIHZlY3RvclxuXHQvLyB1cHBlci1sZWZ0IDN4MyBvZiBtYXRyaXggaXMgYXNzdW1lZCB0byBiZSBvcnRob2dvbmFsXG5cblx0cmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0KCBkaXIsIDAuMCApICogbWF0cml4ICkueHl6ICk7XG5cbn1cblxubWF0MyB0cmFuc3Bvc2VNYXQzKCBjb25zdCBpbiBtYXQzIG0gKSB7XG5cblx0bWF0MyB0bXA7XG5cblx0dG1wWyAwIF0gPSB2ZWMzKCBtWyAwIF0ueCwgbVsgMSBdLngsIG1bIDIgXS54ICk7XG5cdHRtcFsgMSBdID0gdmVjMyggbVsgMCBdLnksIG1bIDEgXS55LCBtWyAyIF0ueSApO1xuXHR0bXBbIDIgXSA9IHZlYzMoIG1bIDAgXS56LCBtWyAxIF0ueiwgbVsgMiBdLnogKTtcblxuXHRyZXR1cm4gdG1wO1xuXG59XG5cbmZsb2F0IGx1bWluYW5jZSggY29uc3QgaW4gdmVjMyByZ2IgKSB7XG5cblx0Ly8gYXNzdW1lcyByZ2IgaXMgaW4gbGluZWFyIGNvbG9yIHNwYWNlIHdpdGggc1JHQiBwcmltYXJpZXMgYW5kIEQ2NSB3aGl0ZSBwb2ludFxuXG5cdGNvbnN0IHZlYzMgd2VpZ2h0cyA9IHZlYzMoIDAuMjEyNjcyOSwgMC43MTUxNTIyLCAwLjA3MjE3NTAgKTtcblxuXHRyZXR1cm4gZG90KCB3ZWlnaHRzLCByZ2IgKTtcblxufVxuXG5ib29sIGlzUGVyc3BlY3RpdmVNYXRyaXgoIG1hdDQgbSApIHtcblxuXHRyZXR1cm4gbVsgMiBdWyAzIF0gPT0gLSAxLjA7XG5cbn1cblxudmVjMiBlcXVpcmVjdFV2KCBpbiB2ZWMzIGRpciApIHtcblxuXHQvLyBkaXIgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxuXG5cdGZsb2F0IHUgPSBhdGFuKCBkaXIueiwgZGlyLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xuXG5cdGZsb2F0IHYgPSBhc2luKCBjbGFtcCggZGlyLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcblxuXHRyZXR1cm4gdmVjMiggdSwgdiApO1xuXG59XG5cbnZlYzMgQlJERl9MYW1iZXJ0KCBjb25zdCBpbiB2ZWMzIGRpZmZ1c2VDb2xvciApIHtcblxuXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGRpZmZ1c2VDb2xvcjtcblxufSAvLyB2YWxpZGF0ZWRcblxudmVjMyBGX1NjaGxpY2soIGNvbnN0IGluIHZlYzMgZjAsIGNvbnN0IGluIGZsb2F0IGY5MCwgY29uc3QgaW4gZmxvYXQgZG90VkggKSB7XG5cblx0Ly8gT3JpZ2luYWwgYXBwcm94aW1hdGlvbiBieSBDaHJpc3RvcGhlIFNjaGxpY2sgJzk0XG5cdC8vIGZsb2F0IGZyZXNuZWwgPSBwb3coIDEuMCAtIGRvdFZILCA1LjAgKTtcblxuXHQvLyBPcHRpbWl6ZWQgdmFyaWFudCAocHJlc2VudGVkIGJ5IEVwaWMgYXQgU0lHR1JBUEggJzEzKVxuXHQvLyBodHRwczovL2NkbjIudW5yZWFsZW5naW5lLmNvbS9SZXNvdXJjZXMvZmlsZXMvMjAxM1NpZ2dyYXBoUHJlc2VudGF0aW9uc05vdGVzLTI2OTE1NzM4LnBkZlxuXHRmbG9hdCBmcmVzbmVsID0gZXhwMiggKCAtIDUuNTU0NzMgKiBkb3RWSCAtIDYuOTgzMTYgKSAqIGRvdFZIICk7XG5cblx0cmV0dXJuIGYwICogKCAxLjAgLSBmcmVzbmVsICkgKyAoIGY5MCAqIGZyZXNuZWwgKTtcblxufSAvLyB2YWxpZGF0ZWRcblxuZmxvYXQgRl9TY2hsaWNrKCBjb25zdCBpbiBmbG9hdCBmMCwgY29uc3QgaW4gZmxvYXQgZjkwLCBjb25zdCBpbiBmbG9hdCBkb3RWSCApIHtcblxuXHQvLyBPcmlnaW5hbCBhcHByb3hpbWF0aW9uIGJ5IENocmlzdG9waGUgU2NobGljayAnOTRcblx0Ly8gZmxvYXQgZnJlc25lbCA9IHBvdyggMS4wIC0gZG90VkgsIDUuMCApO1xuXG5cdC8vIE9wdGltaXplZCB2YXJpYW50IChwcmVzZW50ZWQgYnkgRXBpYyBhdCBTSUdHUkFQSCAnMTMpXG5cdC8vIGh0dHBzOi8vY2RuMi51bnJlYWxlbmdpbmUuY29tL1Jlc291cmNlcy9maWxlcy8yMDEzU2lnZ3JhcGhQcmVzZW50YXRpb25zTm90ZXMtMjY5MTU3MzgucGRmXG5cdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC0gNS41NTQ3MyAqIGRvdFZIIC0gNi45ODMxNiApICogZG90VkggKTtcblxuXHRyZXR1cm4gZjAgKiAoIDEuMCAtIGZyZXNuZWwgKSArICggZjkwICogZnJlc25lbCApO1xuXG59IC8vIHZhbGlkYXRlZFxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxuXG5cdCNkZWZpbmUgY3ViZVVWX21pbk1pcExldmVsIDQuMFxuXHQjZGVmaW5lIGN1YmVVVl9taW5UaWxlU2l6ZSAxNi4wXG5cblx0Ly8gVGhlc2Ugc2hhZGVyIGZ1bmN0aW9ucyBjb252ZXJ0IGJldHdlZW4gdGhlIFVWIGNvb3JkaW5hdGVzIG9mIGEgc2luZ2xlIGZhY2Ugb2Zcblx0Ly8gYSBjdWJlbWFwLCB0aGUgMC01IGludGVnZXIgaW5kZXggb2YgYSBjdWJlIGZhY2UsIGFuZCB0aGUgZGlyZWN0aW9uIHZlY3RvciBmb3Jcblx0Ly8gc2FtcGxpbmcgYSB0ZXh0dXJlQ3ViZSAobm90IGdlbmVyYWxseSBub3JtYWxpemVkICkuXG5cblx0ZmxvYXQgZ2V0RmFjZSggdmVjMyBkaXJlY3Rpb24gKSB7XG5cblx0XHR2ZWMzIGFic0RpcmVjdGlvbiA9IGFicyggZGlyZWN0aW9uICk7XG5cblx0XHRmbG9hdCBmYWNlID0gLSAxLjA7XG5cblx0XHRpZiAoIGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnogKSB7XG5cblx0XHRcdGlmICggYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueSApXG5cblx0XHRcdFx0ZmFjZSA9IGRpcmVjdGlvbi54ID4gMC4wID8gMC4wIDogMy4wO1xuXG5cdFx0XHRlbHNlXG5cblx0XHRcdFx0ZmFjZSA9IGRpcmVjdGlvbi55ID4gMC4wID8gMS4wIDogNC4wO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBhYnNEaXJlY3Rpb24ueiA+IGFic0RpcmVjdGlvbi55IClcblxuXHRcdFx0XHRmYWNlID0gZGlyZWN0aW9uLnogPiAwLjAgPyAyLjAgOiA1LjA7XG5cblx0XHRcdGVsc2VcblxuXHRcdFx0XHRmYWNlID0gZGlyZWN0aW9uLnkgPiAwLjAgPyAxLjAgOiA0LjA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFjZTtcblxuXHR9XG5cblx0Ly8gUkggY29vcmRpbmF0ZSBzeXN0ZW07IFBNUkVNIGZhY2UtaW5kZXhpbmcgY29udmVudGlvblxuXHR2ZWMyIGdldFVWKCB2ZWMzIGRpcmVjdGlvbiwgZmxvYXQgZmFjZSApIHtcblxuXHRcdHZlYzIgdXY7XG5cblx0XHRpZiAoIGZhY2UgPT0gMC4wICkge1xuXG5cdFx0XHR1diA9IHZlYzIoIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueCApOyAvLyBwb3MgeFxuXG5cdFx0fSBlbHNlIGlmICggZmFjZSA9PSAxLjAgKSB7XG5cblx0XHRcdHV2ID0gdmVjMiggLSBkaXJlY3Rpb24ueCwgLSBkaXJlY3Rpb24ueiApIC8gYWJzKCBkaXJlY3Rpb24ueSApOyAvLyBwb3MgeVxuXG5cdFx0fSBlbHNlIGlmICggZmFjZSA9PSAyLjAgKSB7XG5cblx0XHRcdHV2ID0gdmVjMiggLSBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnogKTsgLy8gcG9zIHpcblxuXHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gMy4wICkge1xuXG5cdFx0XHR1diA9IHZlYzIoIC0gZGlyZWN0aW9uLnosIGRpcmVjdGlvbi55ICkgLyBhYnMoIGRpcmVjdGlvbi54ICk7IC8vIG5lZyB4XG5cblx0XHR9IGVsc2UgaWYgKCBmYWNlID09IDQuMCApIHtcblxuXHRcdFx0dXYgPSB2ZWMyKCAtIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueiApIC8gYWJzKCBkaXJlY3Rpb24ueSApOyAvLyBuZWcgeVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dXYgPSB2ZWMyKCBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnogKTsgLy8gbmVnIHpcblxuXHRcdH1cblxuXHRcdHJldHVybiAwLjUgKiAoIHV2ICsgMS4wICk7XG5cblx0fVxuXG5cdHZlYzMgYmlsaW5lYXJDdWJlVVYoIHNhbXBsZXIyRCBlbnZNYXAsIHZlYzMgZGlyZWN0aW9uLCBmbG9hdCBtaXBJbnQgKSB7XG5cblx0XHRmbG9hdCBmYWNlID0gZ2V0RmFjZSggZGlyZWN0aW9uICk7XG5cblx0XHRmbG9hdCBmaWx0ZXJJbnQgPSBtYXgoIGN1YmVVVl9taW5NaXBMZXZlbCAtIG1pcEludCwgMC4wICk7XG5cblx0XHRtaXBJbnQgPSBtYXgoIG1pcEludCwgY3ViZVVWX21pbk1pcExldmVsICk7XG5cblx0XHRmbG9hdCBmYWNlU2l6ZSA9IGV4cDIoIG1pcEludCApO1xuXG5cdFx0aGlnaHAgdmVjMiB1diA9IGdldFVWKCBkaXJlY3Rpb24sIGZhY2UgKSAqICggZmFjZVNpemUgLSAyLjAgKSArIDEuMDsgLy8gIzI1MDcxXG5cblx0XHRpZiAoIGZhY2UgPiAyLjAgKSB7XG5cblx0XHRcdHV2LnkgKz0gZmFjZVNpemU7XG5cblx0XHRcdGZhY2UgLT0gMy4wO1xuXG5cdFx0fVxuXG5cdFx0dXYueCArPSBmYWNlICogZmFjZVNpemU7XG5cblx0XHR1di54ICs9IGZpbHRlckludCAqIDMuMCAqIGN1YmVVVl9taW5UaWxlU2l6ZTtcblxuXHRcdHV2LnkgKz0gNC4wICogKCBleHAyKCBDVUJFVVZfTUFYX01JUCApIC0gZmFjZVNpemUgKTtcblxuXHRcdHV2LnggKj0gQ1VCRVVWX1RFWEVMX1dJRFRIO1xuXHRcdHV2LnkgKj0gQ1VCRVVWX1RFWEVMX0hFSUdIVDtcblxuXHRcdCNpZmRlZiB0ZXh0dXJlMkRHcmFkRVhUXG5cblx0XHRcdHJldHVybiB0ZXh0dXJlMkRHcmFkRVhUKCBlbnZNYXAsIHV2LCB2ZWMyKCAwLjAgKSwgdmVjMiggMC4wICkgKS5yZ2I7IC8vIGRpc2FibGUgYW5pc290cm9waWMgZmlsdGVyaW5nXG5cblx0XHQjZWxzZVxuXG5cdFx0XHRyZXR1cm4gdGV4dHVyZTJEKCBlbnZNYXAsIHV2ICkucmdiO1xuXG5cdFx0I2VuZGlmXG5cblx0fVxuXG5cdC8vIFRoZXNlIGRlZmluZXMgbXVzdCBtYXRjaCB3aXRoIFBNUkVNR2VuZXJhdG9yXG5cblx0I2RlZmluZSBjdWJlVVZfcjAgMS4wXG5cdCNkZWZpbmUgY3ViZVVWX20wIC0gMi4wXG5cdCNkZWZpbmUgY3ViZVVWX3IxIDAuOFxuXHQjZGVmaW5lIGN1YmVVVl9tMSAtIDEuMFxuXHQjZGVmaW5lIGN1YmVVVl9yNCAwLjRcblx0I2RlZmluZSBjdWJlVVZfbTQgMi4wXG5cdCNkZWZpbmUgY3ViZVVWX3I1IDAuMzA1XG5cdCNkZWZpbmUgY3ViZVVWX201IDMuMFxuXHQjZGVmaW5lIGN1YmVVVl9yNiAwLjIxXG5cdCNkZWZpbmUgY3ViZVVWX202IDQuMFxuXG5cdGZsb2F0IHJvdWdobmVzc1RvTWlwKCBmbG9hdCByb3VnaG5lc3MgKSB7XG5cblx0XHRmbG9hdCBtaXAgPSAwLjA7XG5cblx0XHRpZiAoIHJvdWdobmVzcyA+PSBjdWJlVVZfcjEgKSB7XG5cblx0XHRcdG1pcCA9ICggY3ViZVVWX3IwIC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tMSAtIGN1YmVVVl9tMCApIC8gKCBjdWJlVVZfcjAgLSBjdWJlVVZfcjEgKSArIGN1YmVVVl9tMDtcblxuXHRcdH0gZWxzZSBpZiAoIHJvdWdobmVzcyA+PSBjdWJlVVZfcjQgKSB7XG5cblx0XHRcdG1pcCA9ICggY3ViZVVWX3IxIC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tNCAtIGN1YmVVVl9tMSApIC8gKCBjdWJlVVZfcjEgLSBjdWJlVVZfcjQgKSArIGN1YmVVVl9tMTtcblxuXHRcdH0gZWxzZSBpZiAoIHJvdWdobmVzcyA+PSBjdWJlVVZfcjUgKSB7XG5cblx0XHRcdG1pcCA9ICggY3ViZVVWX3I0IC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tNSAtIGN1YmVVVl9tNCApIC8gKCBjdWJlVVZfcjQgLSBjdWJlVVZfcjUgKSArIGN1YmVVVl9tNDtcblxuXHRcdH0gZWxzZSBpZiAoIHJvdWdobmVzcyA+PSBjdWJlVVZfcjYgKSB7XG5cblx0XHRcdG1pcCA9ICggY3ViZVVWX3I1IC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tNiAtIGN1YmVVVl9tNSApIC8gKCBjdWJlVVZfcjUgLSBjdWJlVVZfcjYgKSArIGN1YmVVVl9tNTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pcCA9IC0gMi4wICogbG9nMiggMS4xNiAqIHJvdWdobmVzcyApOyAvLyAxLjE2ID0gMS43OV4wLjI1XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1pcDtcblxuXHR9XG5cblx0dmVjNCB0ZXh0dXJlQ3ViZVVWKCBzYW1wbGVyMkQgZW52TWFwLCB2ZWMzIHNhbXBsZURpciwgZmxvYXQgcm91Z2huZXNzICkge1xuXG5cdFx0ZmxvYXQgbWlwID0gY2xhbXAoIHJvdWdobmVzc1RvTWlwKCByb3VnaG5lc3MgKSwgY3ViZVVWX20wLCBDVUJFVVZfTUFYX01JUCApO1xuXG5cdFx0ZmxvYXQgbWlwRiA9IGZyYWN0KCBtaXAgKTtcblxuXHRcdGZsb2F0IG1pcEludCA9IGZsb29yKCBtaXAgKTtcblxuXHRcdHZlYzMgY29sb3IwID0gYmlsaW5lYXJDdWJlVVYoIGVudk1hcCwgc2FtcGxlRGlyLCBtaXBJbnQgKTtcblxuXHRcdGlmICggbWlwRiA9PSAwLjAgKSB7XG5cblx0XHRcdHJldHVybiB2ZWM0KCBjb2xvcjAsIDEuMCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmVjMyBjb2xvcjEgPSBiaWxpbmVhckN1YmVVViggZW52TWFwLCBzYW1wbGVEaXIsIG1pcEludCArIDEuMCApO1xuXG5cdFx0XHRyZXR1cm4gdmVjNCggbWl4KCBjb2xvcjAsIGNvbG9yMSwgbWlwRiApLCAxLjAgKTtcblxuXHRcdH1cblxuXHR9XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG5cbnZlYzMgdHJhbnNmb3JtZWROb3JtYWwgPSBvYmplY3ROb3JtYWw7XG4jaWZkZWYgVVNFX1RBTkdFTlRcblxuXHR2ZWMzIHRyYW5zZm9ybWVkVGFuZ2VudCA9IG9iamVjdFRhbmdlbnQ7XG5cbiNlbmRpZlxuXG4jaWZkZWYgVVNFX0JBVENISU5HXG5cblx0Ly8gdGhpcyBpcyBpbiBsaWV1IG9mIGEgcGVyLWluc3RhbmNlIG5vcm1hbC1tYXRyaXhcblx0Ly8gc2hlYXIgdHJhbnNmb3JtcyBpbiB0aGUgaW5zdGFuY2UgbWF0cml4IGFyZSBub3Qgc3VwcG9ydGVkXG5cblx0bWF0MyBibSA9IG1hdDMoIGJhdGNoaW5nTWF0cml4ICk7XG5cdHRyYW5zZm9ybWVkTm9ybWFsIC89IHZlYzMoIGRvdCggYm1bIDAgXSwgYm1bIDAgXSApLCBkb3QoIGJtWyAxIF0sIGJtWyAxIF0gKSwgZG90KCBibVsgMiBdLCBibVsgMiBdICkgKTtcblx0dHJhbnNmb3JtZWROb3JtYWwgPSBibSAqIHRyYW5zZm9ybWVkTm9ybWFsO1xuXG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXG5cdFx0dHJhbnNmb3JtZWRUYW5nZW50ID0gYm0gKiB0cmFuc2Zvcm1lZFRhbmdlbnQ7XG5cblx0I2VuZGlmXG5cbiNlbmRpZlxuXG4jaWZkZWYgVVNFX0lOU1RBTkNJTkdcblxuXHQvLyB0aGlzIGlzIGluIGxpZXUgb2YgYSBwZXItaW5zdGFuY2Ugbm9ybWFsLW1hdHJpeFxuXHQvLyBzaGVhciB0cmFuc2Zvcm1zIGluIHRoZSBpbnN0YW5jZSBtYXRyaXggYXJlIG5vdCBzdXBwb3J0ZWRcblxuXHRtYXQzIGltID0gbWF0MyggaW5zdGFuY2VNYXRyaXggKTtcblx0dHJhbnNmb3JtZWROb3JtYWwgLz0gdmVjMyggZG90KCBpbVsgMCBdLCBpbVsgMCBdICksIGRvdCggaW1bIDEgXSwgaW1bIDEgXSApLCBkb3QoIGltWyAyIF0sIGltWyAyIF0gKSApO1xuXHR0cmFuc2Zvcm1lZE5vcm1hbCA9IGltICogdHJhbnNmb3JtZWROb3JtYWw7XG5cblx0I2lmZGVmIFVTRV9UQU5HRU5UXG5cblx0XHR0cmFuc2Zvcm1lZFRhbmdlbnQgPSBpbSAqIHRyYW5zZm9ybWVkVGFuZ2VudDtcblxuXHQjZW5kaWZcblxuI2VuZGlmXG5cbnRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsTWF0cml4ICogdHJhbnNmb3JtZWROb3JtYWw7XG5cbiNpZmRlZiBGTElQX1NJREVEXG5cblx0dHJhbnNmb3JtZWROb3JtYWwgPSAtIHRyYW5zZm9ybWVkTm9ybWFsO1xuXG4jZW5kaWZcblxuI2lmZGVmIFVTRV9UQU5HRU5UXG5cblx0dHJhbnNmb3JtZWRUYW5nZW50ID0gKCBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZFRhbmdlbnQsIDAuMCApICkueHl6O1xuXG5cdCNpZmRlZiBGTElQX1NJREVEXG5cblx0XHR0cmFuc2Zvcm1lZFRhbmdlbnQgPSAtIHRyYW5zZm9ybWVkVGFuZ2VudDtcblxuXHQjZW5kaWZcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgZGlzcGxhY2VtZW50TWFwO1xuXHR1bmlmb3JtIGZsb2F0IGRpc3BsYWNlbWVudFNjYWxlO1xuXHR1bmlmb3JtIGZsb2F0IGRpc3BsYWNlbWVudEJpYXM7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxuXG5cdHRyYW5zZm9ybWVkICs9IG5vcm1hbGl6ZSggb2JqZWN0Tm9ybWFsICkgKiAoIHRleHR1cmUyRCggZGlzcGxhY2VtZW50TWFwLCB2RGlzcGxhY2VtZW50TWFwVXYgKS54ICogZGlzcGxhY2VtZW50U2NhbGUgKyBkaXNwbGFjZW1lbnRCaWFzICk7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0VNSVNTSVZFTUFQXG5cblx0dmVjNCBlbWlzc2l2ZUNvbG9yID0gdGV4dHVyZTJEKCBlbWlzc2l2ZU1hcCwgdkVtaXNzaXZlTWFwVXYgKTtcblxuXHR0b3RhbEVtaXNzaXZlUmFkaWFuY2UgKj0gZW1pc3NpdmVDb2xvci5yZ2I7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0VNSVNTSVZFTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgZW1pc3NpdmVNYXA7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG5nbF9GcmFnQ29sb3IgPSBsaW5lYXJUb091dHB1dFRleGVsKCBnbF9GcmFnQ29sb3IgKTtcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuXG4vLyBodHRwOi8vd3d3LnJ1c3NlbGxjb3R0cmVsbC5jb20vcGhvdG8vbWF0cml4Q2FsY3VsYXRvci5odG1cblxuLy8gTGluZWFyIHNSR0IgPT4gWFlaID0+IExpbmVhciBEaXNwbGF5IFAzXG5jb25zdCBtYXQzIExJTkVBUl9TUkdCX1RPX0xJTkVBUl9ESVNQTEFZX1AzID0gbWF0Myhcblx0dmVjMyggMC44MjI0NjIxLCAwLjE3NzUzOCwgMC4wICksXG5cdHZlYzMoIDAuMDMzMTk0MSwgMC45NjY4MDU4LCAwLjAgKSxcblx0dmVjMyggMC4wMTcwODI3LCAwLjA3MjM5NzQsIDAuOTEwNTE5OSApXG4pO1xuXG4vLyBMaW5lYXIgRGlzcGxheSBQMyA9PiBYWVogPT4gTGluZWFyIHNSR0JcbmNvbnN0IG1hdDMgTElORUFSX0RJU1BMQVlfUDNfVE9fTElORUFSX1NSR0IgPSBtYXQzKFxuXHR2ZWMzKCAxLjIyNDk0MDEsIC0gMC4yMjQ5NDA0LCAwLjAgKSxcblx0dmVjMyggLSAwLjA0MjA1NjksIDEuMDQyMDU3MSwgMC4wICksXG5cdHZlYzMoIC0gMC4wMTk2Mzc2LCAtIDAuMDc4NjM2MSwgMS4wOTgyNzM1IClcbik7XG5cbnZlYzQgTGluZWFyU1JHQlRvTGluZWFyRGlzcGxheVAzKCBpbiB2ZWM0IHZhbHVlICkge1xuXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogTElORUFSX1NSR0JfVE9fTElORUFSX0RJU1BMQVlfUDMsIHZhbHVlLmEgKTtcbn1cblxudmVjNCBMaW5lYXJEaXNwbGF5UDNUb0xpbmVhclNSR0IoIGluIHZlYzQgdmFsdWUgKSB7XG5cdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgKiBMSU5FQVJfRElTUExBWV9QM19UT19MSU5FQVJfU1JHQiwgdmFsdWUuYSApO1xufVxuXG52ZWM0IExpbmVhclRyYW5zZmVyT0VURiggaW4gdmVjNCB2YWx1ZSApIHtcblx0cmV0dXJuIHZhbHVlO1xufVxuXG52ZWM0IHNSR0JUcmFuc2Zlck9FVEYoIGluIHZlYzQgdmFsdWUgKSB7XG5cdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCAwLjQxNjY2ICkgKSAqIDEuMDU1IC0gdmVjMyggMC4wNTUgKSwgdmFsdWUucmdiICogMTIuOTIsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wMDMxMzA4ICkgKSApICksIHZhbHVlLmEgKTtcbn1cblxuLy8gQGRlcHJlY2F0ZWQsIHIxNTZcbnZlYzQgTGluZWFyVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XG5cdHJldHVybiB2YWx1ZTtcbn1cblxuLy8gQGRlcHJlY2F0ZWQsIHIxNTZcbnZlYzQgTGluZWFyVG9zUkdCKCBpbiB2ZWM0IHZhbHVlICkge1xuXHRyZXR1cm4gc1JHQlRyYW5zZmVyT0VURiggdmFsdWUgKTtcbn1cbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9FTlZNQVBcblxuXHQjaWZkZWYgRU5WX1dPUkxEUE9TXG5cblx0XHR2ZWMzIGNhbWVyYVRvRnJhZztcblxuXHRcdGlmICggaXNPcnRob2dyYXBoaWMgKSB7XG5cblx0XHRcdGNhbWVyYVRvRnJhZyA9IG5vcm1hbGl6ZSggdmVjMyggLSB2aWV3TWF0cml4WyAwIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAxIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAyIF1bIDIgXSApICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjYW1lcmFUb0ZyYWcgPSBub3JtYWxpemUoIHZXb3JsZFBvc2l0aW9uIC0gY2FtZXJhUG9zaXRpb24gKTtcblxuXHRcdH1cblxuXHRcdC8vIFRyYW5zZm9ybWluZyBOb3JtYWwgVmVjdG9ycyB3aXRoIHRoZSBJbnZlcnNlIFRyYW5zZm9ybWF0aW9uXG5cdFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xuXG5cdFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cblxuXHRcdFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggY2FtZXJhVG9GcmFnLCB3b3JsZE5vcm1hbCApO1xuXG5cdFx0I2Vsc2VcblxuXHRcdFx0dmVjMyByZWZsZWN0VmVjID0gcmVmcmFjdCggY2FtZXJhVG9GcmFnLCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XG5cblx0XHQjZW5kaWZcblxuXHQjZWxzZVxuXG5cdFx0dmVjMyByZWZsZWN0VmVjID0gdlJlZmxlY3Q7XG5cblx0I2VuZGlmXG5cblx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcblxuXHRcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBlbnZNYXBSb3RhdGlvbiAqIHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKSApO1xuXG5cdCNlbHNlXG5cblx0XHR2ZWM0IGVudkNvbG9yID0gdmVjNCggMC4wICk7XG5cblx0I2VuZGlmXG5cblx0I2lmZGVmIEVOVk1BUF9CTEVORElOR19NVUxUSVBMWVxuXG5cdFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgb3V0Z29pbmdMaWdodCAqIGVudkNvbG9yLnh5eiwgc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eSApO1xuXG5cdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9CTEVORElOR19NSVggKVxuXG5cdFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XG5cblx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX0FERCApXG5cblx0XHRvdXRnb2luZ0xpZ2h0ICs9IGVudkNvbG9yLnh5eiAqIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHk7XG5cblx0I2VuZGlmXG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0VOVk1BUFxuXG5cdHVuaWZvcm0gZmxvYXQgZW52TWFwSW50ZW5zaXR5O1xuXHR1bmlmb3JtIGZsb2F0IGZsaXBFbnZNYXA7XG5cdHVuaWZvcm0gbWF0MyBlbnZNYXBSb3RhdGlvbjtcblxuXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxuXHRcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xuXHQjZWxzZVxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcblx0I2VuZGlmXG5cdFxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfRU5WTUFQXG5cblx0dW5pZm9ybSBmbG9hdCByZWZsZWN0aXZpdHk7XG5cblx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HICkgfHwgZGVmaW5lZCggTEFNQkVSVCApXG5cblx0XHQjZGVmaW5lIEVOVl9XT1JMRFBPU1xuXG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBFTlZfV09STERQT1NcblxuXHRcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcblx0XHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcblx0I2Vsc2Vcblx0XHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XG5cdCNlbmRpZlxuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9FTlZNQVBcblxuXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKSB8fCBkZWZpbmVkKCBMQU1CRVJUIClcblxuXHRcdCNkZWZpbmUgRU5WX1dPUkxEUE9TXG5cblx0I2VuZGlmXG5cblx0I2lmZGVmIEVOVl9XT1JMRFBPU1xuXHRcdFxuXHRcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcblxuXHQjZWxzZVxuXG5cdFx0dmFyeWluZyB2ZWMzIHZSZWZsZWN0O1xuXHRcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xuXG5cdCNlbmRpZlxuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9FTlZNQVBcblxuXHR2ZWMzIGdldElCTElycmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xuXG5cdFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVfVVZcblxuXHRcdFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xuXG5cdFx0XHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBlbnZNYXBSb3RhdGlvbiAqIHdvcmxkTm9ybWFsLCAxLjAgKTtcblxuXHRcdFx0cmV0dXJuIFBJICogZW52TWFwQ29sb3IucmdiICogZW52TWFwSW50ZW5zaXR5O1xuXG5cdFx0I2Vsc2VcblxuXHRcdFx0cmV0dXJuIHZlYzMoIDAuMCApO1xuXG5cdFx0I2VuZGlmXG5cblx0fVxuXG5cdHZlYzMgZ2V0SUJMUmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcblxuXHRcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFX1VWXG5cblx0XHRcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZmxlY3QoIC0gdmlld0Rpciwgbm9ybWFsICk7XG5cblx0XHRcdC8vIE1peGluZyB0aGUgcmVmbGVjdGlvbiB3aXRoIHRoZSBub3JtYWwgaXMgbW9yZSBhY2N1cmF0ZSBhbmQga2VlcHMgcm91Z2ggb2JqZWN0cyBmcm9tIGdhdGhlcmluZyBsaWdodCBmcm9tIGJlaGluZCB0aGVpciB0YW5nZW50IHBsYW5lLlxuXHRcdFx0cmVmbGVjdFZlYyA9IG5vcm1hbGl6ZSggbWl4KCByZWZsZWN0VmVjLCBub3JtYWwsIHJvdWdobmVzcyAqIHJvdWdobmVzcykgKTtcblxuXHRcdFx0cmVmbGVjdFZlYyA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHJlZmxlY3RWZWMsIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIGVudk1hcCwgZW52TWFwUm90YXRpb24gKiByZWZsZWN0VmVjLCByb3VnaG5lc3MgKTtcblxuXHRcdFx0cmV0dXJuIGVudk1hcENvbG9yLnJnYiAqIGVudk1hcEludGVuc2l0eTtcblxuXHRcdCNlbHNlXG5cblx0XHRcdHJldHVybiB2ZWMzKCAwLjAgKTtcblxuXHRcdCNlbmRpZlxuXG5cdH1cblxuXHQjaWZkZWYgVVNFX0FOSVNPVFJPUFlcblxuXHRcdHZlYzMgZ2V0SUJMQW5pc290cm9weVJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIHZlYzMgYml0YW5nZW50LCBjb25zdCBpbiBmbG9hdCBhbmlzb3Ryb3B5ICkge1xuXG5cdFx0XHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxuXG5cdFx0XHQgIC8vIGh0dHBzOi8vZ29vZ2xlLmdpdGh1Yi5pby9maWxhbWVudC9GaWxhbWVudC5tZC5odG1sI2xpZ2h0aW5nL2ltYWdlYmFzZWRsaWdodHMvYW5pc290cm9weVxuXHRcdFx0XHR2ZWMzIGJlbnROb3JtYWwgPSBjcm9zcyggYml0YW5nZW50LCB2aWV3RGlyICk7XG5cdFx0XHRcdGJlbnROb3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKCBiZW50Tm9ybWFsLCBiaXRhbmdlbnQgKSApO1xuXHRcdFx0XHRiZW50Tm9ybWFsID0gbm9ybWFsaXplKCBtaXgoIGJlbnROb3JtYWwsIG5vcm1hbCwgcG93MiggcG93MiggMS4wIC0gYW5pc290cm9weSAqICggMS4wIC0gcm91Z2huZXNzICkgKSApICkgKTtcblxuXHRcdFx0XHRyZXR1cm4gZ2V0SUJMUmFkaWFuY2UoIHZpZXdEaXIsIGJlbnROb3JtYWwsIHJvdWdobmVzcyApO1xuXG5cdFx0XHQjZWxzZVxuXG5cdFx0XHRcdHJldHVybiB2ZWMzKCAwLjAgKTtcblxuXHRcdFx0I2VuZGlmXG5cblx0XHR9XG5cblx0I2VuZGlmXG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0VOVk1BUFxuXG5cdCNpZmRlZiBFTlZfV09STERQT1NcblxuXHRcdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XG5cblx0I2Vsc2VcblxuXHRcdHZlYzMgY2FtZXJhVG9WZXJ0ZXg7XG5cblx0XHRpZiAoIGlzT3J0aG9ncmFwaGljICkge1xuXG5cdFx0XHRjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggdmVjMyggLSB2aWV3TWF0cml4WyAwIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAxIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAyIF1bIDIgXSApICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggd29ybGRQb3NpdGlvbi54eXogLSBjYW1lcmFQb3NpdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHRyYW5zZm9ybWVkTm9ybWFsLCB2aWV3TWF0cml4ICk7XG5cblx0XHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxuXG5cdFx0XHR2UmVmbGVjdCA9IHJlZmxlY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCApO1xuXG5cdFx0I2Vsc2VcblxuXHRcdFx0dlJlZmxlY3QgPSByZWZyYWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xuXG5cdFx0I2VuZGlmXG5cblx0I2VuZGlmXG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0ZPR1xuXG5cdHZGb2dEZXB0aCA9IC0gbXZQb3NpdGlvbi56O1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9GT0dcblxuXHR2YXJ5aW5nIGZsb2F0IHZGb2dEZXB0aDtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfRk9HXG5cblx0I2lmZGVmIEZPR19FWFAyXG5cblx0XHRmbG9hdCBmb2dGYWN0b3IgPSAxLjAgLSBleHAoIC0gZm9nRGVuc2l0eSAqIGZvZ0RlbnNpdHkgKiB2Rm9nRGVwdGggKiB2Rm9nRGVwdGggKTtcblxuXHQjZWxzZVxuXG5cdFx0ZmxvYXQgZm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCB2Rm9nRGVwdGggKTtcblxuXHQjZW5kaWZcblxuXHRnbF9GcmFnQ29sb3IucmdiID0gbWl4KCBnbF9GcmFnQ29sb3IucmdiLCBmb2dDb2xvciwgZm9nRmFjdG9yICk7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0ZPR1xuXG5cdHVuaWZvcm0gdmVjMyBmb2dDb2xvcjtcblx0dmFyeWluZyBmbG9hdCB2Rm9nRGVwdGg7XG5cblx0I2lmZGVmIEZPR19FWFAyXG5cblx0XHR1bmlmb3JtIGZsb2F0IGZvZ0RlbnNpdHk7XG5cblx0I2Vsc2VcblxuXHRcdHVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcblx0XHR1bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcblxuXHQjZW5kaWZcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcblxuI2lmZGVmIFVTRV9HUkFESUVOVE1BUFxuXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGdyYWRpZW50TWFwO1xuXG4jZW5kaWZcblxudmVjMyBnZXRHcmFkaWVudElycmFkaWFuY2UoIHZlYzMgbm9ybWFsLCB2ZWMzIGxpZ2h0RGlyZWN0aW9uICkge1xuXG5cdC8vIGRvdE5MIHdpbGwgYmUgZnJvbSAtMS4wIHRvIDEuMFxuXHRmbG9hdCBkb3ROTCA9IGRvdCggbm9ybWFsLCBsaWdodERpcmVjdGlvbiApO1xuXHR2ZWMyIGNvb3JkID0gdmVjMiggZG90TkwgKiAwLjUgKyAwLjUsIDAuMCApO1xuXG5cdCNpZmRlZiBVU0VfR1JBRElFTlRNQVBcblxuXHRcdHJldHVybiB2ZWMzKCB0ZXh0dXJlMkQoIGdyYWRpZW50TWFwLCBjb29yZCApLnIgKTtcblxuXHQjZWxzZVxuXG5cdFx0dmVjMiBmdyA9IGZ3aWR0aCggY29vcmQgKSAqIDAuNTtcblx0XHRyZXR1cm4gbWl4KCB2ZWMzKCAwLjcgKSwgdmVjMyggMS4wICksIHNtb290aHN0ZXAoIDAuNyAtIGZ3LngsIDAuNyArIGZ3LngsIGNvb3JkLnggKSApO1xuXG5cdCNlbmRpZlxuXG59XG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfTElHSFRNQVBcblxuXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcblx0dW5pZm9ybSBmbG9hdCBsaWdodE1hcEludGVuc2l0eTtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbkxhbWJlcnRNYXRlcmlhbCBtYXRlcmlhbDtcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XG5tYXRlcmlhbC5zcGVjdWxhclN0cmVuZ3RoID0gc3BlY3VsYXJTdHJlbmd0aDtcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG5cbnN0cnVjdCBMYW1iZXJ0TWF0ZXJpYWwge1xuXG5cdHZlYzMgZGlmZnVzZUNvbG9yO1xuXHRmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xuXG59O1xuXG52b2lkIFJFX0RpcmVjdF9MYW1iZXJ0KCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBMYW1iZXJ0TWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xuXG5cdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnlOb3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XG5cdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XG5cblx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcblxufVxuXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9MYW1iZXJ0KCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeU5vcm1hbCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVZpZXdEaXIsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGNvbnN0IGluIExhbWJlcnRNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XG5cblx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xuXG59XG5cbiNkZWZpbmUgUkVfRGlyZWN0XHRcdFx0XHRSRV9EaXJlY3RfTGFtYmVydFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcdFx0UkVfSW5kaXJlY3REaWZmdXNlX0xhbWJlcnRcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxudW5pZm9ybSBib29sIHJlY2VpdmVTaGFkb3c7XG51bmlmb3JtIHZlYzMgYW1iaWVudExpZ2h0Q29sb3I7XG5cbiNpZiBkZWZpbmVkKCBVU0VfTElHSFRfUFJPQkVTIClcblxuXHR1bmlmb3JtIHZlYzMgbGlnaHRQcm9iZVsgOSBdO1xuXG4jZW5kaWZcblxuLy8gZ2V0IHRoZSBpcnJhZGlhbmNlIChyYWRpYW5jZSBjb252b2x2ZWQgd2l0aCBjb3NpbmUgbG9iZSkgYXQgdGhlIHBvaW50ICdub3JtYWwnIG9uIHRoZSB1bml0IHNwaGVyZVxuLy8gc291cmNlOiBodHRwczovL2dyYXBoaWNzLnN0YW5mb3JkLmVkdS9wYXBlcnMvZW52bWFwL2Vudm1hcC5wZGZcbnZlYzMgc2hHZXRJcnJhZGlhbmNlQXQoIGluIHZlYzMgbm9ybWFsLCBpbiB2ZWMzIHNoQ29lZmZpY2llbnRzWyA5IF0gKSB7XG5cblx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxuXG5cdGZsb2F0IHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7XG5cblx0Ly8gYmFuZCAwXG5cdHZlYzMgcmVzdWx0ID0gc2hDb2VmZmljaWVudHNbIDAgXSAqIDAuODg2MjI3O1xuXG5cdC8vIGJhbmQgMVxuXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDEgXSAqIDIuMCAqIDAuNTExNjY0ICogeTtcblx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAyIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHo7XG5cdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMyBdICogMi4wICogMC41MTE2NjQgKiB4O1xuXG5cdC8vIGJhbmQgMlxuXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDQgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHk7XG5cdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNSBdICogMi4wICogMC40MjkwNDMgKiB5ICogejtcblx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA2IF0gKiAoIDAuNzQzMTI1ICogeiAqIHogLSAwLjI0NzcwOCApO1xuXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDcgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHo7XG5cdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgOCBdICogMC40MjkwNDMgKiAoIHggKiB4IC0geSAqIHkgKTtcblxuXHRyZXR1cm4gcmVzdWx0O1xuXG59XG5cbnZlYzMgZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgbGlnaHRQcm9iZVsgOSBdLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcblxuXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XG5cblx0dmVjMyBpcnJhZGlhbmNlID0gc2hHZXRJcnJhZGlhbmNlQXQoIHdvcmxkTm9ybWFsLCBsaWdodFByb2JlICk7XG5cblx0cmV0dXJuIGlycmFkaWFuY2U7XG5cbn1cblxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xuXG5cdHZlYzMgaXJyYWRpYW5jZSA9IGFtYmllbnRMaWdodENvbG9yO1xuXG5cdHJldHVybiBpcnJhZGlhbmNlO1xuXG59XG5cbmZsb2F0IGdldERpc3RhbmNlQXR0ZW51YXRpb24oIGNvbnN0IGluIGZsb2F0IGxpZ2h0RGlzdGFuY2UsIGNvbnN0IGluIGZsb2F0IGN1dG9mZkRpc3RhbmNlLCBjb25zdCBpbiBmbG9hdCBkZWNheUV4cG9uZW50ICkge1xuXG5cdC8vIGJhc2VkIHVwb24gRnJvc3RiaXRlIDMgTW92aW5nIHRvIFBoeXNpY2FsbHktYmFzZWQgUmVuZGVyaW5nXG5cdC8vIHBhZ2UgMzIsIGVxdWF0aW9uIDI2OiBFW3dpbmRvdzFdXG5cdC8vIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcblx0ZmxvYXQgZGlzdGFuY2VGYWxsb2ZmID0gMS4wIC8gbWF4KCBwb3coIGxpZ2h0RGlzdGFuY2UsIGRlY2F5RXhwb25lbnQgKSwgMC4wMSApO1xuXG5cdGlmICggY3V0b2ZmRGlzdGFuY2UgPiAwLjAgKSB7XG5cblx0XHRkaXN0YW5jZUZhbGxvZmYgKj0gcG93Miggc2F0dXJhdGUoIDEuMCAtIHBvdzQoIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSApICkgKTtcblxuXHR9XG5cblx0cmV0dXJuIGRpc3RhbmNlRmFsbG9mZjtcblxufVxuXG5mbG9hdCBnZXRTcG90QXR0ZW51YXRpb24oIGNvbnN0IGluIGZsb2F0IGNvbmVDb3NpbmUsIGNvbnN0IGluIGZsb2F0IHBlbnVtYnJhQ29zaW5lLCBjb25zdCBpbiBmbG9hdCBhbmdsZUNvc2luZSApIHtcblxuXHRyZXR1cm4gc21vb3Roc3RlcCggY29uZUNvc2luZSwgcGVudW1icmFDb3NpbmUsIGFuZ2xlQ29zaW5lICk7XG5cbn1cblxuI2lmIE5VTV9ESVJfTElHSFRTID4gMFxuXG5cdHN0cnVjdCBEaXJlY3Rpb25hbExpZ2h0IHtcblx0XHR2ZWMzIGRpcmVjdGlvbjtcblx0XHR2ZWMzIGNvbG9yO1xuXHR9O1xuXG5cdHVuaWZvcm0gRGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0c1sgTlVNX0RJUl9MSUdIVFMgXTtcblxuXHR2b2lkIGdldERpcmVjdGlvbmFsTGlnaHRJbmZvKCBjb25zdCBpbiBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQsIG91dCBJbmNpZGVudExpZ2h0IGxpZ2h0ICkge1xuXG5cdFx0bGlnaHQuY29sb3IgPSBkaXJlY3Rpb25hbExpZ2h0LmNvbG9yO1xuXHRcdGxpZ2h0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbmFsTGlnaHQuZGlyZWN0aW9uO1xuXHRcdGxpZ2h0LnZpc2libGUgPSB0cnVlO1xuXG5cdH1cblxuI2VuZGlmXG5cblxuI2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXG5cblx0c3RydWN0IFBvaW50TGlnaHQge1xuXHRcdHZlYzMgcG9zaXRpb247XG5cdFx0dmVjMyBjb2xvcjtcblx0XHRmbG9hdCBkaXN0YW5jZTtcblx0XHRmbG9hdCBkZWNheTtcblx0fTtcblxuXHR1bmlmb3JtIFBvaW50TGlnaHQgcG9pbnRMaWdodHNbIE5VTV9QT0lOVF9MSUdIVFMgXTtcblxuXHQvLyBsaWdodCBpcyBhbiBvdXQgcGFyYW1ldGVyIGFzIGhhdmluZyBpdCBhcyBhIHJldHVybiB2YWx1ZSBjYXVzZWQgY29tcGlsZXIgZXJyb3JzIG9uIHNvbWUgZGV2aWNlc1xuXHR2b2lkIGdldFBvaW50TGlnaHRJbmZvKCBjb25zdCBpbiBQb2ludExpZ2h0IHBvaW50TGlnaHQsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgb3V0IEluY2lkZW50TGlnaHQgbGlnaHQgKSB7XG5cblx0XHR2ZWMzIGxWZWN0b3IgPSBwb2ludExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnlQb3NpdGlvbjtcblxuXHRcdGxpZ2h0LmRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xuXG5cdFx0ZmxvYXQgbGlnaHREaXN0YW5jZSA9IGxlbmd0aCggbFZlY3RvciApO1xuXG5cdFx0bGlnaHQuY29sb3IgPSBwb2ludExpZ2h0LmNvbG9yO1xuXHRcdGxpZ2h0LmNvbG9yICo9IGdldERpc3RhbmNlQXR0ZW51YXRpb24oIGxpZ2h0RGlzdGFuY2UsIHBvaW50TGlnaHQuZGlzdGFuY2UsIHBvaW50TGlnaHQuZGVjYXkgKTtcblx0XHRsaWdodC52aXNpYmxlID0gKCBsaWdodC5jb2xvciAhPSB2ZWMzKCAwLjAgKSApO1xuXG5cdH1cblxuI2VuZGlmXG5cblxuI2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcblxuXHRzdHJ1Y3QgU3BvdExpZ2h0IHtcblx0XHR2ZWMzIHBvc2l0aW9uO1xuXHRcdHZlYzMgZGlyZWN0aW9uO1xuXHRcdHZlYzMgY29sb3I7XG5cdFx0ZmxvYXQgZGlzdGFuY2U7XG5cdFx0ZmxvYXQgZGVjYXk7XG5cdFx0ZmxvYXQgY29uZUNvcztcblx0XHRmbG9hdCBwZW51bWJyYUNvcztcblx0fTtcblxuXHR1bmlmb3JtIFNwb3RMaWdodCBzcG90TGlnaHRzWyBOVU1fU1BPVF9MSUdIVFMgXTtcblxuXHQvLyBsaWdodCBpcyBhbiBvdXQgcGFyYW1ldGVyIGFzIGhhdmluZyBpdCBhcyBhIHJldHVybiB2YWx1ZSBjYXVzZWQgY29tcGlsZXIgZXJyb3JzIG9uIHNvbWUgZGV2aWNlc1xuXHR2b2lkIGdldFNwb3RMaWdodEluZm8oIGNvbnN0IGluIFNwb3RMaWdodCBzcG90TGlnaHQsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgb3V0IEluY2lkZW50TGlnaHQgbGlnaHQgKSB7XG5cblx0XHR2ZWMzIGxWZWN0b3IgPSBzcG90TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeVBvc2l0aW9uO1xuXG5cdFx0bGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XG5cblx0XHRmbG9hdCBhbmdsZUNvcyA9IGRvdCggbGlnaHQuZGlyZWN0aW9uLCBzcG90TGlnaHQuZGlyZWN0aW9uICk7XG5cblx0XHRmbG9hdCBzcG90QXR0ZW51YXRpb24gPSBnZXRTcG90QXR0ZW51YXRpb24oIHNwb3RMaWdodC5jb25lQ29zLCBzcG90TGlnaHQucGVudW1icmFDb3MsIGFuZ2xlQ29zICk7XG5cblx0XHRpZiAoIHNwb3RBdHRlbnVhdGlvbiA+IDAuMCApIHtcblxuXHRcdFx0ZmxvYXQgbGlnaHREaXN0YW5jZSA9IGxlbmd0aCggbFZlY3RvciApO1xuXG5cdFx0XHRsaWdodC5jb2xvciA9IHNwb3RMaWdodC5jb2xvciAqIHNwb3RBdHRlbnVhdGlvbjtcblx0XHRcdGxpZ2h0LmNvbG9yICo9IGdldERpc3RhbmNlQXR0ZW51YXRpb24oIGxpZ2h0RGlzdGFuY2UsIHNwb3RMaWdodC5kaXN0YW5jZSwgc3BvdExpZ2h0LmRlY2F5ICk7XG5cdFx0XHRsaWdodC52aXNpYmxlID0gKCBsaWdodC5jb2xvciAhPSB2ZWMzKCAwLjAgKSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bGlnaHQuY29sb3IgPSB2ZWMzKCAwLjAgKTtcblx0XHRcdGxpZ2h0LnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHR9XG5cbiNlbmRpZlxuXG5cbiNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcblxuXHRzdHJ1Y3QgUmVjdEFyZWFMaWdodCB7XG5cdFx0dmVjMyBjb2xvcjtcblx0XHR2ZWMzIHBvc2l0aW9uO1xuXHRcdHZlYzMgaGFsZldpZHRoO1xuXHRcdHZlYzMgaGFsZkhlaWdodDtcblx0fTtcblxuXHQvLyBQcmUtY29tcHV0ZWQgdmFsdWVzIG9mIExpbmVhclRyYW5zZm9ybWVkQ29zaW5lIGFwcHJveGltYXRpb24gb2YgQlJERlxuXHQvLyBCUkRGIGFwcHJveGltYXRpb24gVGV4dHVyZSBpcyA2NHg2NFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBsdGNfMTsgLy8gUkdCQSBGbG9hdFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBsdGNfMjsgLy8gUkdCQSBGbG9hdFxuXG5cdHVuaWZvcm0gUmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0c1sgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgXTtcblxuI2VuZGlmXG5cblxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcblxuXHRzdHJ1Y3QgSGVtaXNwaGVyZUxpZ2h0IHtcblx0XHR2ZWMzIGRpcmVjdGlvbjtcblx0XHR2ZWMzIHNreUNvbG9yO1xuXHRcdHZlYzMgZ3JvdW5kQ29sb3I7XG5cdH07XG5cblx0dW5pZm9ybSBIZW1pc3BoZXJlTGlnaHQgaGVtaXNwaGVyZUxpZ2h0c1sgTlVNX0hFTUlfTElHSFRTIF07XG5cblx0dmVjMyBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBIZW1pc3BoZXJlTGlnaHQgaGVtaUxpZ2h0LCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcblxuXHRcdGZsb2F0IGRvdE5MID0gZG90KCBub3JtYWwsIGhlbWlMaWdodC5kaXJlY3Rpb24gKTtcblx0XHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodCA9IDAuNSAqIGRvdE5MICsgMC41O1xuXG5cdFx0dmVjMyBpcnJhZGlhbmNlID0gbWl4KCBoZW1pTGlnaHQuZ3JvdW5kQ29sb3IsIGhlbWlMaWdodC5za3lDb2xvciwgaGVtaURpZmZ1c2VXZWlnaHQgKTtcblxuXHRcdHJldHVybiBpcnJhZGlhbmNlO1xuXG5cdH1cblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcblRvb25NYXRlcmlhbCBtYXRlcmlhbDtcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xuXG5zdHJ1Y3QgVG9vbk1hdGVyaWFsIHtcblxuXHR2ZWMzIGRpZmZ1c2VDb2xvcjtcblxufTtcblxudm9pZCBSRV9EaXJlY3RfVG9vbiggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gVG9vbk1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcblxuXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRHcmFkaWVudElycmFkaWFuY2UoIGdlb21ldHJ5Tm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xuXG5cdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XG5cbn1cblxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfVG9vbiggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBUb29uTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xuXG5cdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcblxufVxuXG4jZGVmaW5lIFJFX0RpcmVjdFx0XHRcdFx0UkVfRGlyZWN0X1Rvb25cbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXHRcdFJFX0luZGlyZWN0RGlmZnVzZV9Ub29uXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbkJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbDtcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XG5tYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gc3BlY3VsYXI7XG5tYXRlcmlhbC5zcGVjdWxhclNoaW5pbmVzcyA9IHNoaW5pbmVzcztcbm1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGggPSBzcGVjdWxhclN0cmVuZ3RoO1xuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcblxuc3RydWN0IEJsaW5uUGhvbmdNYXRlcmlhbCB7XG5cblx0dmVjMyBkaWZmdXNlQ29sb3I7XG5cdHZlYzMgc3BlY3VsYXJDb2xvcjtcblx0ZmxvYXQgc3BlY3VsYXJTaGluaW5lc3M7XG5cdGZsb2F0IHNwZWN1bGFyU3RyZW5ndGg7XG5cbn07XG5cbnZvaWQgUkVfRGlyZWN0X0JsaW5uUGhvbmcoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeU5vcm1hbCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVZpZXdEaXIsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XG5cblx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeU5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcblx0dmVjMyBpcnJhZGlhbmNlID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcblxuXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xuXG5cdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBCUkRGX0JsaW5uUGhvbmcoIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeU5vcm1hbCwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgKSAqIG1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGg7XG5cbn1cblxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZyggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xuXG5cdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcblxufVxuXG4jZGVmaW5lIFJFX0RpcmVjdFx0XHRcdFx0UkVfRGlyZWN0X0JsaW5uUGhvbmdcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXHRcdFJFX0luZGlyZWN0RGlmZnVzZV9CbGlublBob25nXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcblBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWw7XG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiICogKCAxLjAgLSBtZXRhbG5lc3NGYWN0b3IgKTtcblxudmVjMyBkeHkgPSBtYXgoIGFicyggZEZkeCggbm9uUGVydHVyYmVkTm9ybWFsICkgKSwgYWJzKCBkRmR5KCBub25QZXJ0dXJiZWROb3JtYWwgKSApICk7XG5mbG9hdCBnZW9tZXRyeVJvdWdobmVzcyA9IG1heCggbWF4KCBkeHkueCwgZHh5LnkgKSwgZHh5LnogKTtcblxubWF0ZXJpYWwucm91Z2huZXNzID0gbWF4KCByb3VnaG5lc3NGYWN0b3IsIDAuMDUyNSApOy8vIDAuMDUyNSBjb3JyZXNwb25kcyB0byB0aGUgYmFzZSBtaXAgb2YgYSAyNTYgY3ViZW1hcC5cbm1hdGVyaWFsLnJvdWdobmVzcyArPSBnZW9tZXRyeVJvdWdobmVzcztcbm1hdGVyaWFsLnJvdWdobmVzcyA9IG1pbiggbWF0ZXJpYWwucm91Z2huZXNzLCAxLjAgKTtcblxuI2lmZGVmIElPUlxuXG5cdG1hdGVyaWFsLmlvciA9IGlvcjtcblxuXHQjaWZkZWYgVVNFX1NQRUNVTEFSXG5cblx0XHRmbG9hdCBzcGVjdWxhckludGVuc2l0eUZhY3RvciA9IHNwZWN1bGFySW50ZW5zaXR5O1xuXHRcdHZlYzMgc3BlY3VsYXJDb2xvckZhY3RvciA9IHNwZWN1bGFyQ29sb3I7XG5cblx0XHQjaWZkZWYgVVNFX1NQRUNVTEFSX0NPTE9STUFQXG5cblx0XHRcdHNwZWN1bGFyQ29sb3JGYWN0b3IgKj0gdGV4dHVyZTJEKCBzcGVjdWxhckNvbG9yTWFwLCB2U3BlY3VsYXJDb2xvck1hcFV2ICkucmdiO1xuXG5cdFx0I2VuZGlmXG5cblx0XHQjaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxuXG5cdFx0XHRzcGVjdWxhckludGVuc2l0eUZhY3RvciAqPSB0ZXh0dXJlMkQoIHNwZWN1bGFySW50ZW5zaXR5TWFwLCB2U3BlY3VsYXJJbnRlbnNpdHlNYXBVdiApLmE7XG5cblx0XHQjZW5kaWZcblxuXHRcdG1hdGVyaWFsLnNwZWN1bGFyRjkwID0gbWl4KCBzcGVjdWxhckludGVuc2l0eUZhY3RvciwgMS4wLCBtZXRhbG5lc3NGYWN0b3IgKTtcblxuXHQjZWxzZVxuXG5cdFx0ZmxvYXQgc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IgPSAxLjA7XG5cdFx0dmVjMyBzcGVjdWxhckNvbG9yRmFjdG9yID0gdmVjMyggMS4wICk7XG5cdFx0bWF0ZXJpYWwuc3BlY3VsYXJGOTAgPSAxLjA7XG5cblx0I2VuZGlmXG5cblx0bWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG1peCggbWluKCBwb3cyKCAoIG1hdGVyaWFsLmlvciAtIDEuMCApIC8gKCBtYXRlcmlhbC5pb3IgKyAxLjAgKSApICogc3BlY3VsYXJDb2xvckZhY3RvciwgdmVjMyggMS4wICkgKSAqIHNwZWN1bGFySW50ZW5zaXR5RmFjdG9yLCBkaWZmdXNlQ29sb3IucmdiLCBtZXRhbG5lc3NGYWN0b3IgKTtcblxuI2Vsc2VcblxuXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCAwLjA0ICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xuXHRtYXRlcmlhbC5zcGVjdWxhckY5MCA9IDEuMDtcblxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfQ0xFQVJDT0FUXG5cblx0bWF0ZXJpYWwuY2xlYXJjb2F0ID0gY2xlYXJjb2F0O1xuXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBjbGVhcmNvYXRSb3VnaG5lc3M7XG5cdG1hdGVyaWFsLmNsZWFyY29hdEYwID0gdmVjMyggMC4wNCApO1xuXHRtYXRlcmlhbC5jbGVhcmNvYXRGOTAgPSAxLjA7XG5cblx0I2lmZGVmIFVTRV9DTEVBUkNPQVRNQVBcblxuXHRcdG1hdGVyaWFsLmNsZWFyY29hdCAqPSB0ZXh0dXJlMkQoIGNsZWFyY29hdE1hcCwgdkNsZWFyY29hdE1hcFV2ICkueDtcblxuXHQjZW5kaWZcblxuXHQjaWZkZWYgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVBcblxuXHRcdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyAqPSB0ZXh0dXJlMkQoIGNsZWFyY29hdFJvdWdobmVzc01hcCwgdkNsZWFyY29hdFJvdWdobmVzc01hcFV2ICkueTtcblxuXHQjZW5kaWZcblxuXHRtYXRlcmlhbC5jbGVhcmNvYXQgPSBzYXR1cmF0ZSggbWF0ZXJpYWwuY2xlYXJjb2F0ICk7IC8vIEJ1cmxleSBjbGVhcmNvYXQgbW9kZWxcblx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gbWF4KCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MsIDAuMDUyNSApO1xuXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XG5cdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IG1pbiggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCAxLjAgKTtcblxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfRElTUEVSU0lPTlxuXG5cdG1hdGVyaWFsLmRpc3BlcnNpb24gPSBkaXNwZXJzaW9uO1xuXG4jZW5kaWZcblxuI2lmZGVmIFVTRV9JUklERVNDRU5DRVxuXG5cdG1hdGVyaWFsLmlyaWRlc2NlbmNlID0gaXJpZGVzY2VuY2U7XG5cdG1hdGVyaWFsLmlyaWRlc2NlbmNlSU9SID0gaXJpZGVzY2VuY2VJT1I7XG5cblx0I2lmZGVmIFVTRV9JUklERVNDRU5DRU1BUFxuXG5cdFx0bWF0ZXJpYWwuaXJpZGVzY2VuY2UgKj0gdGV4dHVyZTJEKCBpcmlkZXNjZW5jZU1hcCwgdklyaWRlc2NlbmNlTWFwVXYgKS5yO1xuXG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQXG5cblx0XHRtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzcyA9IChpcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW0gLSBpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW0pICogdGV4dHVyZTJEKCBpcmlkZXNjZW5jZVRoaWNrbmVzc01hcCwgdklyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXYgKS5nICsgaXJpZGVzY2VuY2VUaGlja25lc3NNaW5pbXVtO1xuXG5cdCNlbHNlXG5cblx0XHRtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzcyA9IGlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bTtcblxuXHQjZW5kaWZcblxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfU0hFRU5cblxuXHRtYXRlcmlhbC5zaGVlbkNvbG9yID0gc2hlZW5Db2xvcjtcblxuXHQjaWZkZWYgVVNFX1NIRUVOX0NPTE9STUFQXG5cblx0XHRtYXRlcmlhbC5zaGVlbkNvbG9yICo9IHRleHR1cmUyRCggc2hlZW5Db2xvck1hcCwgdlNoZWVuQ29sb3JNYXBVdiApLnJnYjtcblxuXHQjZW5kaWZcblxuXHRtYXRlcmlhbC5zaGVlblJvdWdobmVzcyA9IGNsYW1wKCBzaGVlblJvdWdobmVzcywgMC4wNywgMS4wICk7XG5cblx0I2lmZGVmIFVTRV9TSEVFTl9ST1VHSE5FU1NNQVBcblxuXHRcdG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzICo9IHRleHR1cmUyRCggc2hlZW5Sb3VnaG5lc3NNYXAsIHZTaGVlblJvdWdobmVzc01hcFV2ICkuYTtcblxuXHQjZW5kaWZcblxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfQU5JU09UUk9QWVxuXG5cdCNpZmRlZiBVU0VfQU5JU09UUk9QWU1BUFxuXG5cdFx0bWF0MiBhbmlzb3Ryb3B5TWF0ID0gbWF0MiggYW5pc290cm9weVZlY3Rvci54LCBhbmlzb3Ryb3B5VmVjdG9yLnksIC0gYW5pc290cm9weVZlY3Rvci55LCBhbmlzb3Ryb3B5VmVjdG9yLnggKTtcblx0XHR2ZWMzIGFuaXNvdHJvcHlQb2xhciA9IHRleHR1cmUyRCggYW5pc290cm9weU1hcCwgdkFuaXNvdHJvcHlNYXBVdiApLnJnYjtcblx0XHR2ZWMyIGFuaXNvdHJvcHlWID0gYW5pc290cm9weU1hdCAqIG5vcm1hbGl6ZSggMi4wICogYW5pc290cm9weVBvbGFyLnJnIC0gdmVjMiggMS4wICkgKSAqIGFuaXNvdHJvcHlQb2xhci5iO1xuXG5cdCNlbHNlXG5cblx0XHR2ZWMyIGFuaXNvdHJvcHlWID0gYW5pc290cm9weVZlY3RvcjtcblxuXHQjZW5kaWZcblxuXHRtYXRlcmlhbC5hbmlzb3Ryb3B5ID0gbGVuZ3RoKCBhbmlzb3Ryb3B5ViApO1xuXG5cdGlmKCBtYXRlcmlhbC5hbmlzb3Ryb3B5ID09IDAuMCApIHtcblx0XHRhbmlzb3Ryb3B5ViA9IHZlYzIoIDEuMCwgMC4wICk7XG5cdH0gZWxzZSB7XG5cdFx0YW5pc290cm9weVYgLz0gbWF0ZXJpYWwuYW5pc290cm9weTtcblx0XHRtYXRlcmlhbC5hbmlzb3Ryb3B5ID0gc2F0dXJhdGUoIG1hdGVyaWFsLmFuaXNvdHJvcHkgKTtcblx0fVxuXG5cdC8vIFJvdWdobmVzcyBhbG9uZyB0aGUgYW5pc290cm9weSBiaXRhbmdlbnQgaXMgdGhlIG1hdGVyaWFsIHJvdWdobmVzcywgd2hpbGUgdGhlIHRhbmdlbnQgcm91Z2huZXNzIGluY3JlYXNlcyB3aXRoIGFuaXNvdHJvcHkuXG5cdG1hdGVyaWFsLmFscGhhVCA9IG1peCggcG93MiggbWF0ZXJpYWwucm91Z2huZXNzICksIDEuMCwgcG93MiggbWF0ZXJpYWwuYW5pc290cm9weSApICk7XG5cblx0bWF0ZXJpYWwuYW5pc290cm9weVQgPSB0Ym5bIDAgXSAqIGFuaXNvdHJvcHlWLnggKyB0Ym5bIDEgXSAqIGFuaXNvdHJvcHlWLnk7XG5cdG1hdGVyaWFsLmFuaXNvdHJvcHlCID0gdGJuWyAxIF0gKiBhbmlzb3Ryb3B5Vi54IC0gdGJuWyAwIF0gKiBhbmlzb3Ryb3B5Vi55O1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuXG5zdHJ1Y3QgUGh5c2ljYWxNYXRlcmlhbCB7XG5cblx0dmVjMyBkaWZmdXNlQ29sb3I7XG5cdGZsb2F0IHJvdWdobmVzcztcblx0dmVjMyBzcGVjdWxhckNvbG9yO1xuXHRmbG9hdCBzcGVjdWxhckY5MDtcblx0ZmxvYXQgZGlzcGVyc2lvbjtcblxuXHQjaWZkZWYgVVNFX0NMRUFSQ09BVFxuXHRcdGZsb2F0IGNsZWFyY29hdDtcblx0XHRmbG9hdCBjbGVhcmNvYXRSb3VnaG5lc3M7XG5cdFx0dmVjMyBjbGVhcmNvYXRGMDtcblx0XHRmbG9hdCBjbGVhcmNvYXRGOTA7XG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBVU0VfSVJJREVTQ0VOQ0Vcblx0XHRmbG9hdCBpcmlkZXNjZW5jZTtcblx0XHRmbG9hdCBpcmlkZXNjZW5jZUlPUjtcblx0XHRmbG9hdCBpcmlkZXNjZW5jZVRoaWNrbmVzcztcblx0XHR2ZWMzIGlyaWRlc2NlbmNlRnJlc25lbDtcblx0XHR2ZWMzIGlyaWRlc2NlbmNlRjA7XG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBVU0VfU0hFRU5cblx0XHR2ZWMzIHNoZWVuQ29sb3I7XG5cdFx0ZmxvYXQgc2hlZW5Sb3VnaG5lc3M7XG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBJT1Jcblx0XHRmbG9hdCBpb3I7XG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXG5cdFx0ZmxvYXQgdHJhbnNtaXNzaW9uO1xuXHRcdGZsb2F0IHRyYW5zbWlzc2lvbkFscGhhO1xuXHRcdGZsb2F0IHRoaWNrbmVzcztcblx0XHRmbG9hdCBhdHRlbnVhdGlvbkRpc3RhbmNlO1xuXHRcdHZlYzMgYXR0ZW51YXRpb25Db2xvcjtcblx0I2VuZGlmXG5cblx0I2lmZGVmIFVTRV9BTklTT1RST1BZXG5cdFx0ZmxvYXQgYW5pc290cm9weTtcblx0XHRmbG9hdCBhbHBoYVQ7XG5cdFx0dmVjMyBhbmlzb3Ryb3B5VDtcblx0XHR2ZWMzIGFuaXNvdHJvcHlCO1xuXHQjZW5kaWZcblxufTtcblxuLy8gdGVtcG9yYXJ5XG52ZWMzIGNsZWFyY29hdFNwZWN1bGFyRGlyZWN0ID0gdmVjMyggMC4wICk7XG52ZWMzIGNsZWFyY29hdFNwZWN1bGFySW5kaXJlY3QgPSB2ZWMzKCAwLjAgKTtcbnZlYzMgc2hlZW5TcGVjdWxhckRpcmVjdCA9IHZlYzMoIDAuMCApO1xudmVjMyBzaGVlblNwZWN1bGFySW5kaXJlY3QgPSB2ZWMzKDAuMCApO1xuXG52ZWMzIFNjaGxpY2tfdG9fRjAoIGNvbnN0IGluIHZlYzMgZiwgY29uc3QgaW4gZmxvYXQgZjkwLCBjb25zdCBpbiBmbG9hdCBkb3RWSCApIHtcbiAgICBmbG9hdCB4ID0gY2xhbXAoIDEuMCAtIGRvdFZILCAwLjAsIDEuMCApO1xuICAgIGZsb2F0IHgyID0geCAqIHg7XG4gICAgZmxvYXQgeDUgPSBjbGFtcCggeCAqIHgyICogeDIsIDAuMCwgMC45OTk5ICk7XG5cbiAgICByZXR1cm4gKCBmIC0gdmVjMyggZjkwICkgKiB4NSApIC8gKCAxLjAgLSB4NSApO1xufVxuXG4vLyBNb3ZpbmcgRnJvc3RiaXRlIHRvIFBoeXNpY2FsbHkgQmFzZWQgUmVuZGVyaW5nIDMuMCAtIHBhZ2UgMTIsIGxpc3RpbmcgMlxuLy8gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZlxuZmxvYXQgVl9HR1hfU21pdGhDb3JyZWxhdGVkKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkwsIGNvbnN0IGluIGZsb2F0IGRvdE5WICkge1xuXG5cdGZsb2F0IGEyID0gcG93MiggYWxwaGEgKTtcblxuXHRmbG9hdCBndiA9IGRvdE5MICogc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROViApICk7XG5cdGZsb2F0IGdsID0gZG90TlYgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcblxuXHRyZXR1cm4gMC41IC8gbWF4KCBndiArIGdsLCBFUFNJTE9OICk7XG5cbn1cblxuLy8gTWljcm9mYWNldCBNb2RlbHMgZm9yIFJlZnJhY3Rpb24gdGhyb3VnaCBSb3VnaCBTdXJmYWNlcyAtIGVxdWF0aW9uICgzMylcbi8vIGh0dHA6Ly9ncmFwaGljcmFudHMuYmxvZ3Nwb3QuY29tLzIwMTMvMDgvc3BlY3VsYXItYnJkZi1yZWZlcmVuY2UuaHRtbFxuLy8gYWxwaGEgaXMgXCJyb3VnaG5lc3Mgc3F1YXJlZFwiIGluIERpc25leeKAmXMgcmVwYXJhbWV0ZXJpemF0aW9uXG5mbG9hdCBEX0dHWCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xuXG5cdGZsb2F0IGEyID0gcG93MiggYWxwaGEgKTtcblxuXHRmbG9hdCBkZW5vbSA9IHBvdzIoIGRvdE5IICkgKiAoIGEyIC0gMS4wICkgKyAxLjA7IC8vIGF2b2lkIGFscGhhID0gMCB3aXRoIGRvdE5IID0gMVxuXG5cdHJldHVybiBSRUNJUFJPQ0FMX1BJICogYTIgLyBwb3cyKCBkZW5vbSApO1xuXG59XG5cbi8vIGh0dHBzOi8vZ29vZ2xlLmdpdGh1Yi5pby9maWxhbWVudC9GaWxhbWVudC5tZC5odG1sI21hdGVyaWFsc3lzdGVtL2FuaXNvdHJvcGljbW9kZWwvYW5pc290cm9waWNzcGVjdWxhcmJyZGZcbiNpZmRlZiBVU0VfQU5JU09UUk9QWVxuXG5cdGZsb2F0IFZfR0dYX1NtaXRoQ29ycmVsYXRlZF9Bbmlzb3Ryb3BpYyggY29uc3QgaW4gZmxvYXQgYWxwaGFULCBjb25zdCBpbiBmbG9hdCBhbHBoYUIsIGNvbnN0IGluIGZsb2F0IGRvdFRWLCBjb25zdCBpbiBmbG9hdCBkb3RCViwgY29uc3QgaW4gZmxvYXQgZG90VEwsIGNvbnN0IGluIGZsb2F0IGRvdEJMLCBjb25zdCBpbiBmbG9hdCBkb3ROViwgY29uc3QgaW4gZmxvYXQgZG90TkwgKSB7XG5cblx0XHRmbG9hdCBndiA9IGRvdE5MICogbGVuZ3RoKCB2ZWMzKCBhbHBoYVQgKiBkb3RUViwgYWxwaGFCICogZG90QlYsIGRvdE5WICkgKTtcblx0XHRmbG9hdCBnbCA9IGRvdE5WICogbGVuZ3RoKCB2ZWMzKCBhbHBoYVQgKiBkb3RUTCwgYWxwaGFCICogZG90QkwsIGRvdE5MICkgKTtcblx0XHRmbG9hdCB2ID0gMC41IC8gKCBndiArIGdsICk7XG5cblx0XHRyZXR1cm4gc2F0dXJhdGUodik7XG5cblx0fVxuXG5cdGZsb2F0IERfR0dYX0FuaXNvdHJvcGljKCBjb25zdCBpbiBmbG9hdCBhbHBoYVQsIGNvbnN0IGluIGZsb2F0IGFscGhhQiwgY29uc3QgaW4gZmxvYXQgZG90TkgsIGNvbnN0IGluIGZsb2F0IGRvdFRILCBjb25zdCBpbiBmbG9hdCBkb3RCSCApIHtcblxuXHRcdGZsb2F0IGEyID0gYWxwaGFUICogYWxwaGFCO1xuXHRcdGhpZ2hwIHZlYzMgdiA9IHZlYzMoIGFscGhhQiAqIGRvdFRILCBhbHBoYVQgKiBkb3RCSCwgYTIgKiBkb3ROSCApO1xuXHRcdGhpZ2hwIGZsb2F0IHYyID0gZG90KCB2LCB2ICk7XG5cdFx0ZmxvYXQgdzIgPSBhMiAvIHYyO1xuXG5cdFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBhMiAqIHBvdzIgKCB3MiApO1xuXG5cdH1cblxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfQ0xFQVJDT0FUXG5cblx0Ly8gR0dYIERpc3RyaWJ1dGlvbiwgU2NobGljayBGcmVzbmVsLCBHR1hfU21pdGhDb3JyZWxhdGVkIFZpc2liaWxpdHlcblx0dmVjMyBCUkRGX0dHWF9DbGVhcmNvYXQoIGNvbnN0IGluIHZlYzMgbGlnaHREaXIsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwpIHtcblxuXHRcdHZlYzMgZjAgPSBtYXRlcmlhbC5jbGVhcmNvYXRGMDtcblx0XHRmbG9hdCBmOTAgPSBtYXRlcmlhbC5jbGVhcmNvYXRGOTA7XG5cdFx0ZmxvYXQgcm91Z2huZXNzID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzO1xuXG5cdFx0ZmxvYXQgYWxwaGEgPSBwb3cyKCByb3VnaG5lc3MgKTsgLy8gVUU0J3Mgcm91Z2huZXNzXG5cblx0XHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xuXG5cdFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcblx0XHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XG5cdFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xuXHRcdGZsb2F0IGRvdFZIID0gc2F0dXJhdGUoIGRvdCggdmlld0RpciwgaGFsZkRpciApICk7XG5cblx0XHR2ZWMzIEYgPSBGX1NjaGxpY2soIGYwLCBmOTAsIGRvdFZIICk7XG5cblx0XHRmbG9hdCBWID0gVl9HR1hfU21pdGhDb3JyZWxhdGVkKCBhbHBoYSwgZG90TkwsIGRvdE5WICk7XG5cblx0XHRmbG9hdCBEID0gRF9HR1goIGFscGhhLCBkb3ROSCApO1xuXG5cdFx0cmV0dXJuIEYgKiAoIFYgKiBEICk7XG5cblx0fVxuXG4jZW5kaWZcblxudmVjMyBCUkRGX0dHWCggY29uc3QgaW4gdmVjMyBsaWdodERpciwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCApIHtcblxuXHR2ZWMzIGYwID0gbWF0ZXJpYWwuc3BlY3VsYXJDb2xvcjtcblx0ZmxvYXQgZjkwID0gbWF0ZXJpYWwuc3BlY3VsYXJGOTA7XG5cdGZsb2F0IHJvdWdobmVzcyA9IG1hdGVyaWFsLnJvdWdobmVzcztcblxuXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApOyAvLyBVRTQncyByb3VnaG5lc3NcblxuXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xuXG5cdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBsaWdodERpciApICk7XG5cdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCB2aWV3RGlyICkgKTtcblx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xuXHRmbG9hdCBkb3RWSCA9IHNhdHVyYXRlKCBkb3QoIHZpZXdEaXIsIGhhbGZEaXIgKSApO1xuXG5cdHZlYzMgRiA9IEZfU2NobGljayggZjAsIGY5MCwgZG90VkggKTtcblxuXHQjaWZkZWYgVVNFX0lSSURFU0NFTkNFXG5cblx0XHRGID0gbWl4KCBGLCBtYXRlcmlhbC5pcmlkZXNjZW5jZUZyZXNuZWwsIG1hdGVyaWFsLmlyaWRlc2NlbmNlICk7XG5cblx0I2VuZGlmXG5cblx0I2lmZGVmIFVTRV9BTklTT1RST1BZXG5cblx0XHRmbG9hdCBkb3RUTCA9IGRvdCggbWF0ZXJpYWwuYW5pc290cm9weVQsIGxpZ2h0RGlyICk7XG5cdFx0ZmxvYXQgZG90VFYgPSBkb3QoIG1hdGVyaWFsLmFuaXNvdHJvcHlULCB2aWV3RGlyICk7XG5cdFx0ZmxvYXQgZG90VEggPSBkb3QoIG1hdGVyaWFsLmFuaXNvdHJvcHlULCBoYWxmRGlyICk7XG5cdFx0ZmxvYXQgZG90QkwgPSBkb3QoIG1hdGVyaWFsLmFuaXNvdHJvcHlCLCBsaWdodERpciApO1xuXHRcdGZsb2F0IGRvdEJWID0gZG90KCBtYXRlcmlhbC5hbmlzb3Ryb3B5Qiwgdmlld0RpciApO1xuXHRcdGZsb2F0IGRvdEJIID0gZG90KCBtYXRlcmlhbC5hbmlzb3Ryb3B5QiwgaGFsZkRpciApO1xuXG5cdFx0ZmxvYXQgViA9IFZfR0dYX1NtaXRoQ29ycmVsYXRlZF9Bbmlzb3Ryb3BpYyggbWF0ZXJpYWwuYWxwaGFULCBhbHBoYSwgZG90VFYsIGRvdEJWLCBkb3RUTCwgZG90QkwsIGRvdE5WLCBkb3ROTCApO1xuXG5cdFx0ZmxvYXQgRCA9IERfR0dYX0FuaXNvdHJvcGljKCBtYXRlcmlhbC5hbHBoYVQsIGFscGhhLCBkb3ROSCwgZG90VEgsIGRvdEJIICk7XG5cblx0I2Vsc2VcblxuXHRcdGZsb2F0IFYgPSBWX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGFscGhhLCBkb3ROTCwgZG90TlYgKTtcblxuXHRcdGZsb2F0IEQgPSBEX0dHWCggYWxwaGEsIGRvdE5IICk7XG5cblx0I2VuZGlmXG5cblx0cmV0dXJuIEYgKiAoIFYgKiBEICk7XG5cbn1cblxuLy8gUmVjdCBBcmVhIExpZ2h0XG5cbi8vIFJlYWwtVGltZSBQb2x5Z29uYWwtTGlnaHQgU2hhZGluZyB3aXRoIExpbmVhcmx5IFRyYW5zZm9ybWVkIENvc2luZXNcbi8vIGJ5IEVyaWMgSGVpdHosIEpvbmF0aGFuIER1cHV5LCBTdGVwaGVuIEhpbGwgYW5kIERhdmlkIE5ldWJlbHRcbi8vIGNvZGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9zZWxmc2hhZG93L2x0Y19jb2RlL1xuXG52ZWMyIExUQ19VdiggY29uc3QgaW4gdmVjMyBOLCBjb25zdCBpbiB2ZWMzIFYsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcblxuXHRjb25zdCBmbG9hdCBMVVRfU0laRSA9IDY0LjA7XG5cdGNvbnN0IGZsb2F0IExVVF9TQ0FMRSA9ICggTFVUX1NJWkUgLSAxLjAgKSAvIExVVF9TSVpFO1xuXHRjb25zdCBmbG9hdCBMVVRfQklBUyA9IDAuNSAvIExVVF9TSVpFO1xuXG5cdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggTiwgViApICk7XG5cblx0Ly8gdGV4dHVyZSBwYXJhbWV0ZXJpemVkIGJ5IHNxcnQoIEdHWCBhbHBoYSApIGFuZCBzcXJ0KCAxIC0gY29zKCB0aGV0YSApIClcblx0dmVjMiB1diA9IHZlYzIoIHJvdWdobmVzcywgc3FydCggMS4wIC0gZG90TlYgKSApO1xuXG5cdHV2ID0gdXYgKiBMVVRfU0NBTEUgKyBMVVRfQklBUztcblxuXHRyZXR1cm4gdXY7XG5cbn1cblxuZmxvYXQgTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yKCBjb25zdCBpbiB2ZWMzIGYgKSB7XG5cblx0Ly8gUmVhbC1UaW1lIEFyZWEgTGlnaHRpbmc6IGEgSm91cm5leSBmcm9tIFJlc2VhcmNoIHRvIFByb2R1Y3Rpb24gKHAuMTAyKVxuXHQvLyBBbiBhcHByb3hpbWF0aW9uIG9mIHRoZSBmb3JtIGZhY3RvciBvZiBhIGhvcml6b24tY2xpcHBlZCByZWN0YW5nbGUuXG5cblx0ZmxvYXQgbCA9IGxlbmd0aCggZiApO1xuXG5cdHJldHVybiBtYXgoICggbCAqIGwgKyBmLnogKSAvICggbCArIDEuMCApLCAwLjAgKTtcblxufVxuXG52ZWMzIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyB2MSwgY29uc3QgaW4gdmVjMyB2MiApIHtcblxuXHRmbG9hdCB4ID0gZG90KCB2MSwgdjIgKTtcblxuXHRmbG9hdCB5ID0gYWJzKCB4ICk7XG5cblx0Ly8gcmF0aW9uYWwgcG9seW5vbWlhbCBhcHByb3hpbWF0aW9uIHRvIHRoZXRhIC8gc2luKCB0aGV0YSApIC8gMlBJXG5cdGZsb2F0IGEgPSAwLjg1NDM5ODUgKyAoIDAuNDk2NTE1NSArIDAuMDE0NTIwNiAqIHkgKSAqIHk7XG5cdGZsb2F0IGIgPSAzLjQxNzU5NDAgKyAoIDQuMTYxNjcyNCArIHkgKSAqIHk7XG5cdGZsb2F0IHYgPSBhIC8gYjtcblxuXHRmbG9hdCB0aGV0YV9zaW50aGV0YSA9ICggeCA+IDAuMCApID8gdiA6IDAuNSAqIGludmVyc2VzcXJ0KCBtYXgoIDEuMCAtIHggKiB4LCAxZS03ICkgKSAtIHY7XG5cblx0cmV0dXJuIGNyb3NzKCB2MSwgdjIgKSAqIHRoZXRhX3NpbnRoZXRhO1xuXG59XG5cbnZlYzMgTFRDX0V2YWx1YXRlKCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gdmVjMyBQLCBjb25zdCBpbiBtYXQzIG1JbnYsIGNvbnN0IGluIHZlYzMgcmVjdENvb3Jkc1sgNCBdICkge1xuXG5cdC8vIGJhaWwgaWYgcG9pbnQgaXMgb24gYmFjayBzaWRlIG9mIHBsYW5lIG9mIGxpZ2h0XG5cdC8vIGFzc3VtZXMgY2N3IHdpbmRpbmcgb3JkZXIgb2YgbGlnaHQgdmVydGljZXNcblx0dmVjMyB2MSA9IHJlY3RDb29yZHNbIDEgXSAtIHJlY3RDb29yZHNbIDAgXTtcblx0dmVjMyB2MiA9IHJlY3RDb29yZHNbIDMgXSAtIHJlY3RDb29yZHNbIDAgXTtcblx0dmVjMyBsaWdodE5vcm1hbCA9IGNyb3NzKCB2MSwgdjIgKTtcblxuXHRpZiggZG90KCBsaWdodE5vcm1hbCwgUCAtIHJlY3RDb29yZHNbIDAgXSApIDwgMC4wICkgcmV0dXJuIHZlYzMoIDAuMCApO1xuXG5cdC8vIGNvbnN0cnVjdCBvcnRob25vcm1hbCBiYXNpcyBhcm91bmQgTlxuXHR2ZWMzIFQxLCBUMjtcblx0VDEgPSBub3JtYWxpemUoIFYgLSBOICogZG90KCBWLCBOICkgKTtcblx0VDIgPSAtIGNyb3NzKCBOLCBUMSApOyAvLyBuZWdhdGVkIGZyb20gcGFwZXI7IHBvc3NpYmx5IGR1ZSB0byBhIGRpZmZlcmVudCBoYW5kZWRuZXNzIG9mIHdvcmxkIGNvb3JkaW5hdGUgc3lzdGVtXG5cblx0Ly8gY29tcHV0ZSB0cmFuc2Zvcm1cblx0bWF0MyBtYXQgPSBtSW52ICogdHJhbnNwb3NlTWF0MyggbWF0MyggVDEsIFQyLCBOICkgKTtcblxuXHQvLyB0cmFuc2Zvcm0gcmVjdFxuXHR2ZWMzIGNvb3Jkc1sgNCBdO1xuXHRjb29yZHNbIDAgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMCBdIC0gUCApO1xuXHRjb29yZHNbIDEgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMSBdIC0gUCApO1xuXHRjb29yZHNbIDIgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMiBdIC0gUCApO1xuXHRjb29yZHNbIDMgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMyBdIC0gUCApO1xuXG5cdC8vIHByb2plY3QgcmVjdCBvbnRvIHNwaGVyZVxuXHRjb29yZHNbIDAgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAwIF0gKTtcblx0Y29vcmRzWyAxIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMSBdICk7XG5cdGNvb3Jkc1sgMiBdID0gbm9ybWFsaXplKCBjb29yZHNbIDIgXSApO1xuXHRjb29yZHNbIDMgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAzIF0gKTtcblxuXHQvLyBjYWxjdWxhdGUgdmVjdG9yIGZvcm0gZmFjdG9yXG5cdHZlYzMgdmVjdG9yRm9ybUZhY3RvciA9IHZlYzMoIDAuMCApO1xuXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAwIF0sIGNvb3Jkc1sgMSBdICk7XG5cdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDEgXSwgY29vcmRzWyAyIF0gKTtcblx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMiBdLCBjb29yZHNbIDMgXSApO1xuXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAzIF0sIGNvb3Jkc1sgMCBdICk7XG5cblx0Ly8gYWRqdXN0IGZvciBob3Jpem9uIGNsaXBwaW5nXG5cdGZsb2F0IHJlc3VsdCA9IExUQ19DbGlwcGVkU3BoZXJlRm9ybUZhY3RvciggdmVjdG9yRm9ybUZhY3RvciApO1xuXG4vKlxuXHQvLyBhbHRlcm5hdGUgbWV0aG9kIG9mIGFkanVzdGluZyBmb3IgaG9yaXpvbiBjbGlwcGluZyAoc2VlIHJlZmVyZWNlKVxuXHQvLyByZWZhY3RvcmluZyByZXF1aXJlZFxuXHRmbG9hdCBsZW4gPSBsZW5ndGgoIHZlY3RvckZvcm1GYWN0b3IgKTtcblx0ZmxvYXQgeiA9IHZlY3RvckZvcm1GYWN0b3IueiAvIGxlbjtcblxuXHRjb25zdCBmbG9hdCBMVVRfU0laRSA9IDY0LjA7XG5cdGNvbnN0IGZsb2F0IExVVF9TQ0FMRSA9ICggTFVUX1NJWkUgLSAxLjAgKSAvIExVVF9TSVpFO1xuXHRjb25zdCBmbG9hdCBMVVRfQklBUyA9IDAuNSAvIExVVF9TSVpFO1xuXG5cdC8vIHRhYnVsYXRlZCBob3Jpem9uLWNsaXBwZWQgc3BoZXJlLCBhcHBhcmVudGx5Li4uXG5cdHZlYzIgdXYgPSB2ZWMyKCB6ICogMC41ICsgMC41LCBsZW4gKTtcblx0dXYgPSB1diAqIExVVF9TQ0FMRSArIExVVF9CSUFTO1xuXG5cdGZsb2F0IHNjYWxlID0gdGV4dHVyZTJEKCBsdGNfMiwgdXYgKS53O1xuXG5cdGZsb2F0IHJlc3VsdCA9IGxlbiAqIHNjYWxlO1xuKi9cblxuXHRyZXR1cm4gdmVjMyggcmVzdWx0ICk7XG5cbn1cblxuLy8gRW5kIFJlY3QgQXJlYSBMaWdodFxuXG4jaWYgZGVmaW5lZCggVVNFX1NIRUVOIClcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9maWxhbWVudC9ibG9iL21hc3Rlci9zaGFkZXJzL3NyYy9icmRmLmZzXG5mbG9hdCBEX0NoYXJsaWUoIGZsb2F0IHJvdWdobmVzcywgZmxvYXQgZG90TkggKSB7XG5cblx0ZmxvYXQgYWxwaGEgPSBwb3cyKCByb3VnaG5lc3MgKTtcblxuXHQvLyBFc3RldmV6IGFuZCBLdWxsYSAyMDE3LCBcIlByb2R1Y3Rpb24gRnJpZW5kbHkgTWljcm9mYWNldCBTaGVlbiBCUkRGXCJcblx0ZmxvYXQgaW52QWxwaGEgPSAxLjAgLyBhbHBoYTtcblx0ZmxvYXQgY29zMmggPSBkb3ROSCAqIGRvdE5IO1xuXHRmbG9hdCBzaW4yaCA9IG1heCggMS4wIC0gY29zMmgsIDAuMDA3ODEyNSApOyAvLyAyXigtMTQvMiksIHNvIHNpbjJoXjIgPiAwIGluIGZwMTZcblxuXHRyZXR1cm4gKCAyLjAgKyBpbnZBbHBoYSApICogcG93KCBzaW4yaCwgaW52QWxwaGEgKiAwLjUgKSAvICggMi4wICogUEkgKTtcblxufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2ZpbGFtZW50L2Jsb2IvbWFzdGVyL3NoYWRlcnMvc3JjL2JyZGYuZnNcbmZsb2F0IFZfTmV1YmVsdCggZmxvYXQgZG90TlYsIGZsb2F0IGRvdE5MICkge1xuXG5cdC8vIE5ldWJlbHQgYW5kIFBldHRpbmVvIDIwMTMsIFwiQ3JhZnRpbmcgYSBOZXh0LWdlbiBNYXRlcmlhbCBQaXBlbGluZSBmb3IgVGhlIE9yZGVyOiAxODg2XCJcblx0cmV0dXJuIHNhdHVyYXRlKCAxLjAgLyAoIDQuMCAqICggZG90TkwgKyBkb3ROViAtIGRvdE5MICogZG90TlYgKSApICk7XG5cbn1cblxudmVjMyBCUkRGX1NoZWVuKCBjb25zdCBpbiB2ZWMzIGxpZ2h0RGlyLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCB2ZWMzIHNoZWVuQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNoZWVuUm91Z2huZXNzICkge1xuXG5cdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XG5cblx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcblx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xuXHRmbG9hdCBkb3ROSCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaGFsZkRpciApICk7XG5cblx0ZmxvYXQgRCA9IERfQ2hhcmxpZSggc2hlZW5Sb3VnaG5lc3MsIGRvdE5IICk7XG5cdGZsb2F0IFYgPSBWX05ldWJlbHQoIGRvdE5WLCBkb3ROTCApO1xuXG5cdHJldHVybiBzaGVlbkNvbG9yICogKCBEICogViApO1xuXG59XG5cbiNlbmRpZlxuXG4vLyBUaGlzIGlzIGEgY3VydmUtZml0IGFwcHJveG1hdGlvbiB0byB0aGUgXCJDaGFybGllIHNoZWVuXCIgQlJERiBpbnRlZ3JhdGVkIG92ZXIgdGhlIGhlbWlzcGhlcmUgZnJvbSBcbi8vIEVzdGV2ZXogYW5kIEt1bGxhIDIwMTcsIFwiUHJvZHVjdGlvbiBGcmllbmRseSBNaWNyb2ZhY2V0IFNoZWVuIEJSREZcIi4gVGhlIGFuYWx5c2lzIGNhbiBiZSBmb3VuZFxuLy8gaW4gdGhlIFNoZWVuIHNlY3Rpb24gb2YgaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xVDBEMVZTeVI0QWxscUlKVFFBcmFFSXpqbGI1aDRGS0gvdmlldz91c3A9c2hhcmluZ1xuZmxvYXQgSUJMU2hlZW5CUkRGKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XG5cblx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xuXG5cdGZsb2F0IHIyID0gcm91Z2huZXNzICogcm91Z2huZXNzO1xuXG5cdGZsb2F0IGEgPSByb3VnaG5lc3MgPCAwLjI1ID8gLTMzOS4yICogcjIgKyAxNjEuNCAqIHJvdWdobmVzcyAtIDI1LjkgOiAtOC40OCAqIHIyICsgMTQuMyAqIHJvdWdobmVzcyAtIDkuOTU7XG5cblx0ZmxvYXQgYiA9IHJvdWdobmVzcyA8IDAuMjUgPyA0NC4wICogcjIgLSAyMy43ICogcm91Z2huZXNzICsgMy4yNiA6IDEuOTcgKiByMiAtIDMuMjcgKiByb3VnaG5lc3MgKyAwLjcyO1xuXG5cdGZsb2F0IERHID0gZXhwKCBhICogZG90TlYgKyBiICkgKyAoIHJvdWdobmVzcyA8IDAuMjUgPyAwLjAgOiAwLjEgKiAoIHJvdWdobmVzcyAtIDAuMjUgKSApO1xuXG5cdHJldHVybiBzYXR1cmF0ZSggREcgKiBSRUNJUFJPQ0FMX1BJICk7XG5cbn1cblxuLy8gQW5hbHl0aWNhbCBhcHByb3hpbWF0aW9uIG9mIHRoZSBERkcgTFVULCBvbmUgaGFsZiBvZiB0aGVcbi8vIHNwbGl0LXN1bSBhcHByb3hpbWF0aW9uIHVzZWQgaW4gaW5kaXJlY3Qgc3BlY3VsYXIgbGlnaHRpbmcuXG4vLyB2aWEgJ2Vudmlyb25tZW50QlJERicgZnJvbSBcIlBoeXNpY2FsbHkgQmFzZWQgU2hhZGluZyBvbiBNb2JpbGVcIlxuLy8gaHR0cHM6Ly93d3cudW5yZWFsZW5naW5lLmNvbS9ibG9nL3BoeXNpY2FsbHktYmFzZWQtc2hhZGluZy1vbi1tb2JpbGVcbnZlYzIgREZHQXBwcm94KCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XG5cblx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xuXG5cdGNvbnN0IHZlYzQgYzAgPSB2ZWM0KCAtIDEsIC0gMC4wMjc1LCAtIDAuNTcyLCAwLjAyMiApO1xuXG5cdGNvbnN0IHZlYzQgYzEgPSB2ZWM0KCAxLCAwLjA0MjUsIDEuMDQsIC0gMC4wNCApO1xuXG5cdHZlYzQgciA9IHJvdWdobmVzcyAqIGMwICsgYzE7XG5cblx0ZmxvYXQgYTAwNCA9IG1pbiggci54ICogci54LCBleHAyKCAtIDkuMjggKiBkb3ROViApICkgKiByLnggKyByLnk7XG5cblx0dmVjMiBmYWIgPSB2ZWMyKCAtIDEuMDQsIDEuMDQgKSAqIGEwMDQgKyByLnp3O1xuXG5cdHJldHVybiBmYWI7XG5cbn1cblxudmVjMyBFbnZpcm9ubWVudEJSREYoIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc3BlY3VsYXJGOTAsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcblxuXHR2ZWMyIGZhYiA9IERGR0FwcHJveCggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcblxuXHRyZXR1cm4gc3BlY3VsYXJDb2xvciAqIGZhYi54ICsgc3BlY3VsYXJGOTAgKiBmYWIueTtcblxufVxuXG4vLyBGZGV6LUFnw7xlcmEncyBcIk11bHRpcGxlLVNjYXR0ZXJpbmcgTWljcm9mYWNldCBNb2RlbCBmb3IgUmVhbC1UaW1lIEltYWdlIEJhc2VkIExpZ2h0aW5nXCJcbi8vIEFwcHJveGltYXRlcyBtdWx0aXNjYXR0ZXJpbmcgaW4gb3JkZXIgdG8gcHJlc2VydmUgZW5lcmd5LlxuLy8gaHR0cDovL3d3dy5qY2d0Lm9yZy9wdWJsaXNoZWQvMDAwOC8wMS8wMy9cbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcbnZvaWQgY29tcHV0ZU11bHRpc2NhdHRlcmluZ0lyaWRlc2NlbmNlKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNwZWN1bGFyRjkwLCBjb25zdCBpbiBmbG9hdCBpcmlkZXNjZW5jZSwgY29uc3QgaW4gdmVjMyBpcmlkZXNjZW5jZUYwLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGlub3V0IHZlYzMgc2luZ2xlU2NhdHRlciwgaW5vdXQgdmVjMyBtdWx0aVNjYXR0ZXIgKSB7XG4jZWxzZVxudm9pZCBjb21wdXRlTXVsdGlzY2F0dGVyaW5nKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNwZWN1bGFyRjkwLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGlub3V0IHZlYzMgc2luZ2xlU2NhdHRlciwgaW5vdXQgdmVjMyBtdWx0aVNjYXR0ZXIgKSB7XG4jZW5kaWZcblxuXHR2ZWMyIGZhYiA9IERGR0FwcHJveCggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcblxuXHQjaWZkZWYgVVNFX0lSSURFU0NFTkNFXG5cblx0XHR2ZWMzIEZyID0gbWl4KCBzcGVjdWxhckNvbG9yLCBpcmlkZXNjZW5jZUYwLCBpcmlkZXNjZW5jZSApO1xuXG5cdCNlbHNlXG5cblx0XHR2ZWMzIEZyID0gc3BlY3VsYXJDb2xvcjtcblxuXHQjZW5kaWZcblxuXHR2ZWMzIEZzc0VzcyA9IEZyICogZmFiLnggKyBzcGVjdWxhckY5MCAqIGZhYi55O1xuXG5cdGZsb2F0IEVzcyA9IGZhYi54ICsgZmFiLnk7XG5cdGZsb2F0IEVtcyA9IDEuMCAtIEVzcztcblxuXHR2ZWMzIEZhdmcgPSBGciArICggMS4wIC0gRnIgKSAqIDAuMDQ3NjE5OyAvLyAxLzIxXG5cdHZlYzMgRm1zID0gRnNzRXNzICogRmF2ZyAvICggMS4wIC0gRW1zICogRmF2ZyApO1xuXG5cdHNpbmdsZVNjYXR0ZXIgKz0gRnNzRXNzO1xuXHRtdWx0aVNjYXR0ZXIgKz0gRm1zICogRW1zO1xuXG59XG5cbiNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcblxuXHR2b2lkIFJFX0RpcmVjdF9SZWN0QXJlYV9QaHlzaWNhbCggY29uc3QgaW4gUmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0LCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcblxuXHRcdHZlYzMgbm9ybWFsID0gZ2VvbWV0cnlOb3JtYWw7XG5cdFx0dmVjMyB2aWV3RGlyID0gZ2VvbWV0cnlWaWV3RGlyO1xuXHRcdHZlYzMgcG9zaXRpb24gPSBnZW9tZXRyeVBvc2l0aW9uO1xuXHRcdHZlYzMgbGlnaHRQb3MgPSByZWN0QXJlYUxpZ2h0LnBvc2l0aW9uO1xuXHRcdHZlYzMgaGFsZldpZHRoID0gcmVjdEFyZWFMaWdodC5oYWxmV2lkdGg7XG5cdFx0dmVjMyBoYWxmSGVpZ2h0ID0gcmVjdEFyZWFMaWdodC5oYWxmSGVpZ2h0O1xuXHRcdHZlYzMgbGlnaHRDb2xvciA9IHJlY3RBcmVhTGlnaHQuY29sb3I7XG5cdFx0ZmxvYXQgcm91Z2huZXNzID0gbWF0ZXJpYWwucm91Z2huZXNzO1xuXG5cdFx0dmVjMyByZWN0Q29vcmRzWyA0IF07XG5cdFx0cmVjdENvb3Jkc1sgMCBdID0gbGlnaHRQb3MgKyBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0OyAvLyBjb3VudGVyY2xvY2t3aXNlOyBsaWdodCBzaGluZXMgaW4gbG9jYWwgbmVnIHogZGlyZWN0aW9uXG5cdFx0cmVjdENvb3Jkc1sgMSBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0O1xuXHRcdHJlY3RDb29yZHNbIDIgXSA9IGxpZ2h0UG9zIC0gaGFsZldpZHRoICsgaGFsZkhlaWdodDtcblx0XHRyZWN0Q29vcmRzWyAzIF0gPSBsaWdodFBvcyArIGhhbGZXaWR0aCArIGhhbGZIZWlnaHQ7XG5cblx0XHR2ZWMyIHV2ID0gTFRDX1V2KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xuXG5cdFx0dmVjNCB0MSA9IHRleHR1cmUyRCggbHRjXzEsIHV2ICk7XG5cdFx0dmVjNCB0MiA9IHRleHR1cmUyRCggbHRjXzIsIHV2ICk7XG5cblx0XHRtYXQzIG1JbnYgPSBtYXQzKFxuXHRcdFx0dmVjMyggdDEueCwgMCwgdDEueSApLFxuXHRcdFx0dmVjMyggICAgMCwgMSwgICAgMCApLFxuXHRcdFx0dmVjMyggdDEueiwgMCwgdDEudyApXG5cdFx0KTtcblxuXHRcdC8vIExUQyBGcmVzbmVsIEFwcHJveGltYXRpb24gYnkgU3RlcGhlbiBIaWxsXG5cdFx0Ly8gaHR0cDovL2Jsb2cuc2VsZnNoYWRvdy5jb20vcHVibGljYXRpb25zL3MyMDE2LWFkdmFuY2VzL3MyMDE2X2x0Y19mcmVzbmVsLnBkZlxuXHRcdHZlYzMgZnJlc25lbCA9ICggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAqIHQyLnggKyAoIHZlYzMoIDEuMCApIC0gbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciApICogdDIueSApO1xuXG5cdFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gbGlnaHRDb2xvciAqIGZyZXNuZWwgKiBMVENfRXZhbHVhdGUoIG5vcm1hbCwgdmlld0RpciwgcG9zaXRpb24sIG1JbnYsIHJlY3RDb29yZHMgKTtcblxuXHRcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gbGlnaHRDb2xvciAqIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciAqIExUQ19FdmFsdWF0ZSggbm9ybWFsLCB2aWV3RGlyLCBwb3NpdGlvbiwgbWF0MyggMS4wICksIHJlY3RDb29yZHMgKTtcblxuXHR9XG5cbiNlbmRpZlxuXG52b2lkIFJFX0RpcmVjdF9QaHlzaWNhbCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XG5cblx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeU5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcblxuXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xuXG5cdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXG5cblx0XHRmbG9hdCBkb3ROTGNjID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XG5cblx0XHR2ZWMzIGNjSXJyYWRpYW5jZSA9IGRvdE5MY2MgKiBkaXJlY3RMaWdodC5jb2xvcjtcblxuXHRcdGNsZWFyY29hdFNwZWN1bGFyRGlyZWN0ICs9IGNjSXJyYWRpYW5jZSAqIEJSREZfR0dYX0NsZWFyY29hdCggZGlyZWN0TGlnaHQuZGlyZWN0aW9uLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbCApO1xuXG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBVU0VfU0hFRU5cblxuXHRcdHNoZWVuU3BlY3VsYXJEaXJlY3QgKz0gaXJyYWRpYW5jZSAqIEJSREZfU2hlZW4oIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeU5vcm1hbCwgbWF0ZXJpYWwuc2hlZW5Db2xvciwgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgKTtcblxuXHQjZW5kaWZcblxuXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlICogQlJERl9HR1goIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeU5vcm1hbCwgbWF0ZXJpYWwgKTtcblxuXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xufVxuXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcblxuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XG5cbn1cblxudm9pZCBSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIHJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgY2xlYXJjb2F0UmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeU5vcm1hbCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVZpZXdEaXIsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0KSB7XG5cblx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcblxuXHRcdGNsZWFyY29hdFNwZWN1bGFySW5kaXJlY3QgKz0gY2xlYXJjb2F0UmFkaWFuY2UgKiBFbnZpcm9ubWVudEJSREYoIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIG1hdGVyaWFsLmNsZWFyY29hdEYwLCBtYXRlcmlhbC5jbGVhcmNvYXRGOTAsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xuXG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBVU0VfU0hFRU5cblxuXHRcdHNoZWVuU3BlY3VsYXJJbmRpcmVjdCArPSBpcnJhZGlhbmNlICogbWF0ZXJpYWwuc2hlZW5Db2xvciAqIElCTFNoZWVuQlJERiggZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgKTtcblxuXHQjZW5kaWZcblxuXHQvLyBCb3RoIGluZGlyZWN0IHNwZWN1bGFyIGFuZCBpbmRpcmVjdCBkaWZmdXNlIGxpZ2h0IGFjY3VtdWxhdGUgaGVyZVxuXG5cdHZlYzMgc2luZ2xlU2NhdHRlcmluZyA9IHZlYzMoIDAuMCApO1xuXHR2ZWMzIG11bHRpU2NhdHRlcmluZyA9IHZlYzMoIDAuMCApO1xuXHR2ZWMzIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZSA9IGlycmFkaWFuY2UgKiBSRUNJUFJPQ0FMX1BJO1xuXG5cdCNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcblxuXHRcdGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmdJcmlkZXNjZW5jZSggZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJGOTAsIG1hdGVyaWFsLmlyaWRlc2NlbmNlLCBtYXRlcmlhbC5pcmlkZXNjZW5jZUZyZXNuZWwsIG1hdGVyaWFsLnJvdWdobmVzcywgc2luZ2xlU2NhdHRlcmluZywgbXVsdGlTY2F0dGVyaW5nICk7XG5cblx0I2Vsc2VcblxuXHRcdGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmcoIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyRjkwLCBtYXRlcmlhbC5yb3VnaG5lc3MsIHNpbmdsZVNjYXR0ZXJpbmcsIG11bHRpU2NhdHRlcmluZyApO1xuXG5cdCNlbmRpZlxuXG5cdHZlYzMgdG90YWxTY2F0dGVyaW5nID0gc2luZ2xlU2NhdHRlcmluZyArIG11bHRpU2NhdHRlcmluZztcblx0dmVjMyBkaWZmdXNlID0gbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogKCAxLjAgLSBtYXgoIG1heCggdG90YWxTY2F0dGVyaW5nLnIsIHRvdGFsU2NhdHRlcmluZy5nICksIHRvdGFsU2NhdHRlcmluZy5iICkgKTtcblxuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IHJhZGlhbmNlICogc2luZ2xlU2NhdHRlcmluZztcblx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSBtdWx0aVNjYXR0ZXJpbmcgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XG5cblx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGRpZmZ1c2UgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XG5cbn1cblxuI2RlZmluZSBSRV9EaXJlY3RcdFx0XHRcdFJFX0RpcmVjdF9QaHlzaWNhbFxuI2RlZmluZSBSRV9EaXJlY3RfUmVjdEFyZWFcdFx0UkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVx0XHRSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWxcbiNkZWZpbmUgUkVfSW5kaXJlY3RTcGVjdWxhclx0XHRSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsXG5cbi8vIHJlZjogaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZlxuZmxvYXQgY29tcHV0ZVNwZWN1bGFyT2NjbHVzaW9uKCBjb25zdCBpbiBmbG9hdCBkb3ROViwgY29uc3QgaW4gZmxvYXQgYW1iaWVudE9jY2x1c2lvbiwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xuXG5cdHJldHVybiBzYXR1cmF0ZSggcG93KCBkb3ROViArIGFtYmllbnRPY2NsdXNpb24sIGV4cDIoIC0gMTYuMCAqIHJvdWdobmVzcyAtIDEuMCApICkgLSAxLjAgKyBhbWJpZW50T2NjbHVzaW9uICk7XG5cbn1cbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuLyoqXG4gKiBUaGlzIGlzIGEgdGVtcGxhdGUgdGhhdCBjYW4gYmUgdXNlZCB0byBsaWdodCBhIG1hdGVyaWFsLCBpdCB1c2VzIHBsdWdnYWJsZVxuICogUmVuZGVyRXF1YXRpb25zIChSRSlmb3Igc3BlY2lmaWMgbGlnaHRpbmcgc2NlbmFyaW9zLlxuICpcbiAqIEluc3RydWN0aW9ucyBmb3IgdXNlOlxuICogLSBFbnN1cmUgdGhhdCBib3RoIFJFX0RpcmVjdCwgUkVfSW5kaXJlY3REaWZmdXNlIGFuZCBSRV9JbmRpcmVjdFNwZWN1bGFyIGFyZSBkZWZpbmVkXG4gKiAtIENyZWF0ZSBhIG1hdGVyaWFsIHBhcmFtZXRlciB0aGF0IGlzIHRvIGJlIHBhc3NlZCBhcyB0aGUgdGhpcmQgcGFyYW1ldGVyIHRvIHlvdXIgbGlnaHRpbmcgZnVuY3Rpb25zLlxuICpcbiAqIFRPRE86XG4gKiAtIEFkZCBhcmVhIGxpZ2h0IHN1cHBvcnQuXG4gKiAtIEFkZCBzcGhlcmUgbGlnaHQgc3VwcG9ydC5cbiAqIC0gQWRkIGRpZmZ1c2UgbGlnaHQgcHJvYmUgKGlycmFkaWFuY2UgY3ViZW1hcCkgc3VwcG9ydC5cbiAqL1xuXG52ZWMzIGdlb21ldHJ5UG9zaXRpb24gPSAtIHZWaWV3UG9zaXRpb247XG52ZWMzIGdlb21ldHJ5Tm9ybWFsID0gbm9ybWFsO1xudmVjMyBnZW9tZXRyeVZpZXdEaXIgPSAoIGlzT3J0aG9ncmFwaGljICkgPyB2ZWMzKCAwLCAwLCAxICkgOiBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcblxudmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCA9IHZlYzMoIDAuMCApO1xuXG4jaWZkZWYgVVNFX0NMRUFSQ09BVFxuXG5cdGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsID0gY2xlYXJjb2F0Tm9ybWFsO1xuXG4jZW5kaWZcblxuI2lmZGVmIFVTRV9JUklERVNDRU5DRVxuXG5cdGZsb2F0IGRvdE5WaSA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyICkgKTtcblxuXHRpZiAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzID09IDAuMCApIHtcblxuXHRcdG1hdGVyaWFsLmlyaWRlc2NlbmNlID0gMC4wO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRtYXRlcmlhbC5pcmlkZXNjZW5jZSA9IHNhdHVyYXRlKCBtYXRlcmlhbC5pcmlkZXNjZW5jZSApO1xuXG5cdH1cblxuXHRpZiAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlID4gMC4wICkge1xuXG5cdFx0bWF0ZXJpYWwuaXJpZGVzY2VuY2VGcmVzbmVsID0gZXZhbElyaWRlc2NlbmNlKCAxLjAsIG1hdGVyaWFsLmlyaWRlc2NlbmNlSU9SLCBkb3ROVmksIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICk7XG5cblx0XHQvLyBJcmlkZXNjZW5jZSBGMCBhcHByb3hpbWF0aW9uXG5cdFx0bWF0ZXJpYWwuaXJpZGVzY2VuY2VGMCA9IFNjaGxpY2tfdG9fRjAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlRnJlc25lbCwgMS4wLCBkb3ROVmkgKTtcblxuXHR9XG5cbiNlbmRpZlxuXG5JbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0O1xuXG4jaWYgKCBOVU1fUE9JTlRfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXG5cblx0UG9pbnRMaWdodCBwb2ludExpZ2h0O1xuXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxuXHRQb2ludExpZ2h0U2hhZG93IHBvaW50TGlnaHRTaGFkb3c7XG5cdCNlbmRpZlxuXG5cdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcblxuXHRcdHBvaW50TGlnaHQgPSBwb2ludExpZ2h0c1sgaSBdO1xuXG5cdFx0Z2V0UG9pbnRMaWdodEluZm8oIHBvaW50TGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGRpcmVjdExpZ2h0ICk7XG5cblx0XHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIClcblx0XHRwb2ludExpZ2h0U2hhZG93ID0gcG9pbnRMaWdodFNoYWRvd3NbIGkgXTtcblx0XHRkaXJlY3RMaWdodC5jb2xvciAqPSAoIGRpcmVjdExpZ2h0LnZpc2libGUgJiYgcmVjZWl2ZVNoYWRvdyApID8gZ2V0UG9pbnRTaGFkb3coIHBvaW50U2hhZG93TWFwWyBpIF0sIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93TWFwU2l6ZSwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dJbnRlbnNpdHksIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93QmlhcywgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dSYWRpdXMsIHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0sIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93Q2FtZXJhTmVhciwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dDYW1lcmFGYXIgKSA6IDEuMDtcblx0XHQjZW5kaWZcblxuXHRcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcblxuXHR9XG5cdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cbiNlbmRpZlxuXG4jaWYgKCBOVU1fU1BPVF9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcblxuXHRTcG90TGlnaHQgc3BvdExpZ2h0O1xuXHR2ZWM0IHNwb3RDb2xvcjtcblx0dmVjMyBzcG90TGlnaHRDb29yZDtcblx0Ym9vbCBpblNwb3RMaWdodE1hcDtcblxuXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFNwb3RMaWdodFNoYWRvdyBzcG90TGlnaHRTaGFkb3c7XG5cdCNlbmRpZlxuXG5cdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xuXG5cdFx0c3BvdExpZ2h0ID0gc3BvdExpZ2h0c1sgaSBdO1xuXG5cdFx0Z2V0U3BvdExpZ2h0SW5mbyggc3BvdExpZ2h0LCBnZW9tZXRyeVBvc2l0aW9uLCBkaXJlY3RMaWdodCApO1xuXG5cdFx0Ly8gc3BvdCBsaWdodHMgYXJlIG9yZGVyZWQgW3NoYWRvd3Mgd2l0aCBtYXBzLCBzaGFkb3dzIHdpdGhvdXQgbWFwcywgbWFwcyB3aXRob3V0IHNoYWRvd3MsIG5vbmVdXG5cdFx0I2lmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1NfV0lUSF9NQVBTIClcblx0XHQjZGVmaW5lIFNQT1RfTElHSFRfTUFQX0lOREVYIFVOUk9MTEVEX0xPT1BfSU5ERVhcblx0XHQjZWxpZiAoIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIClcblx0XHQjZGVmaW5lIFNQT1RfTElHSFRfTUFQX0lOREVYIE5VTV9TUE9UX0xJR0hUX01BUFNcblx0XHQjZWxzZVxuXHRcdCNkZWZpbmUgU1BPVF9MSUdIVF9NQVBfSU5ERVggKCBVTlJPTExFRF9MT09QX0lOREVYIC0gTlVNX1NQT1RfTElHSFRfU0hBRE9XUyArIE5VTV9TUE9UX0xJR0hUX1NIQURPV1NfV0lUSF9NQVBTIClcblx0XHQjZW5kaWZcblxuXHRcdCNpZiAoIFNQT1RfTElHSFRfTUFQX0lOREVYIDwgTlVNX1NQT1RfTElHSFRfTUFQUyApXG5cdFx0XHRzcG90TGlnaHRDb29yZCA9IHZTcG90TGlnaHRDb29yZFsgaSBdLnh5eiAvIHZTcG90TGlnaHRDb29yZFsgaSBdLnc7XG5cdFx0XHRpblNwb3RMaWdodE1hcCA9IGFsbCggbGVzc1RoYW4oIGFicyggc3BvdExpZ2h0Q29vcmQgKiAyLiAtIDEuICksIHZlYzMoIDEuMCApICkgKTtcblx0XHRcdHNwb3RDb2xvciA9IHRleHR1cmUyRCggc3BvdExpZ2h0TWFwWyBTUE9UX0xJR0hUX01BUF9JTkRFWCBdLCBzcG90TGlnaHRDb29yZC54eSApO1xuXHRcdFx0ZGlyZWN0TGlnaHQuY29sb3IgPSBpblNwb3RMaWdodE1hcCA/IGRpcmVjdExpZ2h0LmNvbG9yICogc3BvdENvbG9yLnJnYiA6IGRpcmVjdExpZ2h0LmNvbG9yO1xuXHRcdCNlbmRpZlxuXG5cdFx0I3VuZGVmIFNQT1RfTElHSFRfTUFQX0lOREVYXG5cblx0XHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgKVxuXHRcdHNwb3RMaWdodFNoYWRvdyA9IHNwb3RMaWdodFNoYWRvd3NbIGkgXTtcblx0XHRkaXJlY3RMaWdodC5jb2xvciAqPSAoIGRpcmVjdExpZ2h0LnZpc2libGUgJiYgcmVjZWl2ZVNoYWRvdyApID8gZ2V0U2hhZG93KCBzcG90U2hhZG93TWFwWyBpIF0sIHNwb3RMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBzcG90TGlnaHRTaGFkb3cuc2hhZG93SW50ZW5zaXR5LCBzcG90TGlnaHRTaGFkb3cuc2hhZG93Qmlhcywgc3BvdExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdlNwb3RMaWdodENvb3JkWyBpIF0gKSA6IDEuMDtcblx0XHQjZW5kaWZcblxuXHRcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcblxuXHR9XG5cdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cbiNlbmRpZlxuXG4jaWYgKCBOVU1fRElSX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxuXG5cdERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodDtcblx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXG5cdERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZGlyZWN0aW9uYWxMaWdodFNoYWRvdztcblx0I2VuZGlmXG5cblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHQgPSBkaXJlY3Rpb25hbExpZ2h0c1sgaSBdO1xuXG5cdFx0Z2V0RGlyZWN0aW9uYWxMaWdodEluZm8oIGRpcmVjdGlvbmFsTGlnaHQsIGRpcmVjdExpZ2h0ICk7XG5cblx0XHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUyApXG5cdFx0ZGlyZWN0aW9uYWxMaWdodFNoYWRvdyA9IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBpIF07XG5cdFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gKCBkaXJlY3RMaWdodC52aXNpYmxlICYmIHJlY2VpdmVTaGFkb3cgKSA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0U2hhZG93LnNoYWRvd0ludGVuc2l0eSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xuXHRcdCNlbmRpZlxuXG5cdFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnlQb3NpdGlvbiwgZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xuXG5cdH1cblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcblxuI2VuZGlmXG5cbiNpZiAoIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdF9SZWN0QXJlYSApXG5cblx0UmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0O1xuXG5cdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1JFQ1RfQVJFQV9MSUdIVFM7IGkgKysgKSB7XG5cblx0XHRyZWN0QXJlYUxpZ2h0ID0gcmVjdEFyZWFMaWdodHNbIGkgXTtcblx0XHRSRV9EaXJlY3RfUmVjdEFyZWEoIHJlY3RBcmVhTGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcblxuXHR9XG5cdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cbiNlbmRpZlxuXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcblxuXHR2ZWMzIGlibElycmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcblxuXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xuXG5cdCNpZiBkZWZpbmVkKCBVU0VfTElHSFRfUFJPQkVTIClcblxuXHRcdGlycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGxpZ2h0UHJvYmUsIGdlb21ldHJ5Tm9ybWFsICk7XG5cblx0I2VuZGlmXG5cblx0I2lmICggTlVNX0hFTUlfTElHSFRTID4gMCApXG5cblx0XHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XG5cdFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xuXG5cdFx0XHRpcnJhZGlhbmNlICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnlOb3JtYWwgKTtcblxuXHRcdH1cblx0XHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxuXG5cdCNlbmRpZlxuXG4jZW5kaWZcblxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxuXG5cdHZlYzMgcmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcblx0dmVjMyBjbGVhcmNvYXRSYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXG5cblx0I2lmZGVmIFVTRV9MSUdIVE1BUFxuXG5cdFx0dmVjNCBsaWdodE1hcFRleGVsID0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdkxpZ2h0TWFwVXYgKTtcblx0XHR2ZWMzIGxpZ2h0TWFwSXJyYWRpYW5jZSA9IGxpZ2h0TWFwVGV4ZWwucmdiICogbGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHRpcnJhZGlhbmNlICs9IGxpZ2h0TWFwSXJyYWRpYW5jZTtcblxuXHQjZW5kaWZcblxuXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFNUQU5EQVJEICkgJiYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXG5cblx0XHRpYmxJcnJhZGlhbmNlICs9IGdldElCTElycmFkaWFuY2UoIGdlb21ldHJ5Tm9ybWFsICk7XG5cblx0I2VuZGlmXG5cbiNlbmRpZlxuXG4jaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxuXG5cdCNpZmRlZiBVU0VfQU5JU09UUk9QWVxuXG5cdFx0cmFkaWFuY2UgKz0gZ2V0SUJMQW5pc290cm9weVJhZGlhbmNlKCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Tm9ybWFsLCBtYXRlcmlhbC5yb3VnaG5lc3MsIG1hdGVyaWFsLmFuaXNvdHJvcHlCLCBtYXRlcmlhbC5hbmlzb3Ryb3B5ICk7XG5cblx0I2Vsc2VcblxuXHRcdHJhZGlhbmNlICs9IGdldElCTFJhZGlhbmNlKCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Tm9ybWFsLCBtYXRlcmlhbC5yb3VnaG5lc3MgKTtcblxuXHQjZW5kaWZcblxuXHQjaWZkZWYgVVNFX0NMRUFSQ09BVFxuXG5cdFx0Y2xlYXJjb2F0UmFkaWFuY2UgKz0gZ2V0SUJMUmFkaWFuY2UoIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xuXG5cdCNlbmRpZlxuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXG5cblx0UkVfSW5kaXJlY3REaWZmdXNlKCBpcnJhZGlhbmNlLCBnZW9tZXRyeVBvc2l0aW9uLCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XG5cbiNlbmRpZlxuXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXG5cblx0UkVfSW5kaXJlY3RTcGVjdWxhciggcmFkaWFuY2UsIGlibElycmFkaWFuY2UsIGNsZWFyY29hdFJhZGlhbmNlLCBnZW9tZXRyeVBvc2l0aW9uLCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGIClcblxuXHQvLyBEb2luZyBhIHN0cmljdCBjb21wYXJpc29uIHdpdGggPT0gMS4wIGNhbiBjYXVzZSBub2lzZSBhcnRpZmFjdHNcblx0Ly8gb24gc29tZSBwbGF0Zm9ybXMuIFNlZSBpc3N1ZSAjMTc2MjMuXG5cdGdsX0ZyYWdEZXB0aCA9IHZJc1BlcnNwZWN0aXZlID09IDAuMCA/IGdsX0ZyYWdDb29yZC56IDogbG9nMiggdkZyYWdEZXB0aCApICogbG9nRGVwdGhCdWZGQyAqIDAuNTtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUYgKVxuXG5cdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcblx0dmFyeWluZyBmbG9hdCB2RnJhZ0RlcHRoO1xuXHR2YXJ5aW5nIGZsb2F0IHZJc1BlcnNwZWN0aXZlO1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxuXG5cdHZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcblx0dmFyeWluZyBmbG9hdCB2SXNQZXJzcGVjdGl2ZTtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcblxuXHR2RnJhZ0RlcHRoID0gMS4wICsgZ2xfUG9zaXRpb24udztcblx0dklzUGVyc3BlY3RpdmUgPSBmbG9hdCggaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApICk7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX01BUFxuXG5cdHZlYzQgc2FtcGxlZERpZmZ1c2VDb2xvciA9IHRleHR1cmUyRCggbWFwLCB2TWFwVXYgKTtcblxuXHQjaWZkZWYgREVDT0RFX1ZJREVPX1RFWFRVUkVcblxuXHRcdC8vIHVzZSBpbmxpbmUgc1JHQiBkZWNvZGUgdW50aWwgYnJvd3NlcnMgcHJvcGVybHkgc3VwcG9ydCBTUkdCOF9BTFBIQTggd2l0aCB2aWRlbyB0ZXh0dXJlcyAoIzI2NTE2KVxuXG5cdFx0c2FtcGxlZERpZmZ1c2VDb2xvciA9IHZlYzQoIG1peCggcG93KCBzYW1wbGVkRGlmZnVzZUNvbG9yLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzMoIDAuMDUyMTMyNzAxNCApLCB2ZWMzKCAyLjQgKSApLCBzYW1wbGVkRGlmZnVzZUNvbG9yLnJnYiAqIDAuMDc3Mzk5MzgwOCwgdmVjMyggbGVzc1RoYW5FcXVhbCggc2FtcGxlZERpZmZ1c2VDb2xvci5yZ2IsIHZlYzMoIDAuMDQwNDUgKSApICkgKSwgc2FtcGxlZERpZmZ1c2VDb2xvci53ICk7XG5cdFxuXHQjZW5kaWZcblxuXHRkaWZmdXNlQ29sb3IgKj0gc2FtcGxlZERpZmZ1c2VDb2xvcjtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxuXG5cdCNpZiBkZWZpbmVkKCBVU0VfUE9JTlRTX1VWIClcblxuXHRcdHZlYzIgdXYgPSB2VXY7XG5cblx0I2Vsc2VcblxuXHRcdHZlYzIgdXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggZ2xfUG9pbnRDb29yZC54LCAxLjAgLSBnbF9Qb2ludENvb3JkLnksIDEgKSApLnh5O1xuXG5cdCNlbmRpZlxuXG4jZW5kaWZcblxuI2lmZGVmIFVTRV9NQVBcblxuXHRkaWZmdXNlQ29sb3IgKj0gdGV4dHVyZTJEKCBtYXAsIHV2ICk7XG5cbiNlbmRpZlxuXG4jaWZkZWYgVVNFX0FMUEhBTUFQXG5cblx0ZGlmZnVzZUNvbG9yLmEgKj0gdGV4dHVyZTJEKCBhbHBoYU1hcCwgdXYgKS5nO1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIGRlZmluZWQoIFVTRV9QT0lOVFNfVVYgKVxuXG5cdHZhcnlpbmcgdmVjMiB2VXY7XG5cbiNlbHNlXG5cblx0I2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxuXG5cdFx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xuXG5cdCNlbmRpZlxuXG4jZW5kaWZcblxuI2lmZGVmIFVTRV9NQVBcblxuXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XG5cbiNlbmRpZlxuXG4jaWZkZWYgVVNFX0FMUEhBTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG5mbG9hdCBtZXRhbG5lc3NGYWN0b3IgPSBtZXRhbG5lc3M7XG5cbiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXG5cblx0dmVjNCB0ZXhlbE1ldGFsbmVzcyA9IHRleHR1cmUyRCggbWV0YWxuZXNzTWFwLCB2TWV0YWxuZXNzTWFwVXYgKTtcblxuXHQvLyByZWFkcyBjaGFubmVsIEIsIGNvbXBhdGlibGUgd2l0aCBhIGNvbWJpbmVkIE9jY2x1c2lvblJvdWdobmVzc01ldGFsbGljIChSR0IpIHRleHR1cmVcblx0bWV0YWxuZXNzRmFjdG9yICo9IHRleGVsTWV0YWxuZXNzLmI7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX01FVEFMTkVTU01BUFxuXG5cdHVuaWZvcm0gc2FtcGxlcjJEIG1ldGFsbmVzc01hcDtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfSU5TVEFOQ0lOR19NT1JQSFxuXG5cdGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgTU9SUEhUQVJHRVRTX0NPVU5UIF07XG5cblx0ZmxvYXQgbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlID0gdGV4ZWxGZXRjaCggbW9ycGhUZXh0dXJlLCBpdmVjMiggMCwgZ2xfSW5zdGFuY2VJRCApLCAwICkucjtcblxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBNT1JQSFRBUkdFVFNfQ09VTlQ7IGkgKysgKSB7XG5cblx0XHRtb3JwaFRhcmdldEluZmx1ZW5jZXNbaV0gPSAgdGV4ZWxGZXRjaCggbW9ycGhUZXh0dXJlLCBpdmVjMiggaSArIDEsIGdsX0luc3RhbmNlSUQgKSwgMCApLnI7XG5cblx0fVxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZiBkZWZpbmVkKCBVU0VfTU9SUEhDT0xPUlMgKVxuXG5cdC8vIG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZSBpcyBzZXQgYmFzZWQgb24gQnVmZmVyR2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgdmFsdWU6XG5cdC8vIFdoZW4gbW9ycGhUYXJnZXRzUmVsYXRpdmUgaXMgZmFsc2UsIHRoaXMgaXMgc2V0IHRvIDEgLSBzdW0oaW5mbHVlbmNlcyk7IHRoaXMgcmVzdWx0cyBpbiBub3JtYWwgPSBzdW0oKHRhcmdldCAtIGJhc2UpICogaW5mbHVlbmNlKVxuXHQvLyBXaGVuIG1vcnBoVGFyZ2V0c1JlbGF0aXZlIGlzIHRydWUsIHRoaXMgaXMgc2V0IHRvIDE7IGFzIGEgcmVzdWx0LCBhbGwgbW9ycGggdGFyZ2V0cyBhcmUgc2ltcGx5IGFkZGVkIHRvIHRoZSBiYXNlIGFmdGVyIHdlaWdodGluZ1xuXHR2Q29sb3IgKj0gbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xuXG5cdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcblxuXHRcdCNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIHZDb2xvciArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDIgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xuXG5cdFx0I2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SIClcblxuXHRcdFx0aWYgKCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSAhPSAwLjAgKSB2Q29sb3IgKz0gZ2V0TW9ycGgoIGdsX1ZlcnRleElELCBpLCAyICkucmdiICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF07XG5cblx0XHQjZW5kaWZcblxuXHR9XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX01PUlBITk9STUFMU1xuXG5cdC8vIG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZSBpcyBzZXQgYmFzZWQgb24gQnVmZmVyR2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgdmFsdWU6XG5cdC8vIFdoZW4gbW9ycGhUYXJnZXRzUmVsYXRpdmUgaXMgZmFsc2UsIHRoaXMgaXMgc2V0IHRvIDEgLSBzdW0oaW5mbHVlbmNlcyk7IHRoaXMgcmVzdWx0cyBpbiBub3JtYWwgPSBzdW0oKHRhcmdldCAtIGJhc2UpICogaW5mbHVlbmNlKVxuXHQvLyBXaGVuIG1vcnBoVGFyZ2V0c1JlbGF0aXZlIGlzIHRydWUsIHRoaXMgaXMgc2V0IHRvIDE7IGFzIGEgcmVzdWx0LCBhbGwgbW9ycGggdGFyZ2V0cyBhcmUgc2ltcGx5IGFkZGVkIHRvIHRoZSBiYXNlIGFmdGVyIHdlaWdodGluZ1xuXHRvYmplY3ROb3JtYWwgKj0gbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xuXG5cdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcblxuXHRcdGlmICggbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gIT0gMC4wICkgb2JqZWN0Tm9ybWFsICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMSApLnh5eiAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xuXG5cdH1cblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXG5cblx0I2lmbmRlZiBVU0VfSU5TVEFOQ0lOR19NT1JQSFxuXG5cdFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XG5cdFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIE1PUlBIVEFSR0VUU19DT1VOVCBdO1xuXG5cdCNlbmRpZlxuXG5cdHVuaWZvcm0gc2FtcGxlcjJEQXJyYXkgbW9ycGhUYXJnZXRzVGV4dHVyZTtcblx0dW5pZm9ybSBpdmVjMiBtb3JwaFRhcmdldHNUZXh0dXJlU2l6ZTtcblxuXHR2ZWM0IGdldE1vcnBoKCBjb25zdCBpbiBpbnQgdmVydGV4SW5kZXgsIGNvbnN0IGluIGludCBtb3JwaFRhcmdldEluZGV4LCBjb25zdCBpbiBpbnQgb2Zmc2V0ICkge1xuXG5cdFx0aW50IHRleGVsSW5kZXggPSB2ZXJ0ZXhJbmRleCAqIE1PUlBIVEFSR0VUU19URVhUVVJFX1NUUklERSArIG9mZnNldDtcblx0XHRpbnQgeSA9IHRleGVsSW5kZXggLyBtb3JwaFRhcmdldHNUZXh0dXJlU2l6ZS54O1xuXHRcdGludCB4ID0gdGV4ZWxJbmRleCAtIHkgKiBtb3JwaFRhcmdldHNUZXh0dXJlU2l6ZS54O1xuXG5cdFx0aXZlYzMgbW9ycGhVViA9IGl2ZWMzKCB4LCB5LCBtb3JwaFRhcmdldEluZGV4ICk7XG5cdFx0cmV0dXJuIHRleGVsRmV0Y2goIG1vcnBoVGFyZ2V0c1RleHR1cmUsIG1vcnBoVVYsIDAgKTtcblxuXHR9XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xuXG5cdC8vIG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZSBpcyBzZXQgYmFzZWQgb24gQnVmZmVyR2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgdmFsdWU6XG5cdC8vIFdoZW4gbW9ycGhUYXJnZXRzUmVsYXRpdmUgaXMgZmFsc2UsIHRoaXMgaXMgc2V0IHRvIDEgLSBzdW0oaW5mbHVlbmNlcyk7IHRoaXMgcmVzdWx0cyBpbiBwb3NpdGlvbiA9IHN1bSgodGFyZ2V0IC0gYmFzZSkgKiBpbmZsdWVuY2UpXG5cdC8vIFdoZW4gbW9ycGhUYXJnZXRzUmVsYXRpdmUgaXMgdHJ1ZSwgdGhpcyBpcyBzZXQgdG8gMTsgYXMgYSByZXN1bHQsIGFsbCBtb3JwaCB0YXJnZXRzIGFyZSBzaW1wbHkgYWRkZWQgdG8gdGhlIGJhc2UgYWZ0ZXIgd2VpZ2h0aW5nXG5cdHRyYW5zZm9ybWVkICo9IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcblxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBNT1JQSFRBUkdFVFNfQ09VTlQ7IGkgKysgKSB7XG5cblx0XHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIHRyYW5zZm9ybWVkICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMCApLnh5eiAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xuXG5cdH1cblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbmZsb2F0IGZhY2VEaXJlY3Rpb24gPSBnbF9Gcm9udEZhY2luZyA/IDEuMCA6IC0gMS4wO1xuXG4jaWZkZWYgRkxBVF9TSEFERURcblxuXHR2ZWMzIGZkeCA9IGRGZHgoIHZWaWV3UG9zaXRpb24gKTtcblx0dmVjMyBmZHkgPSBkRmR5KCB2Vmlld1Bvc2l0aW9uICk7XG5cdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCBjcm9zcyggZmR4LCBmZHkgKSApO1xuXG4jZWxzZVxuXG5cdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCB2Tm9ybWFsICk7XG5cblx0I2lmZGVmIERPVUJMRV9TSURFRFxuXG5cdFx0bm9ybWFsICo9IGZhY2VEaXJlY3Rpb247XG5cblx0I2VuZGlmXG5cbiNlbmRpZlxuXG4jaWYgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKSB8fCBkZWZpbmVkKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9BTklTT1RST1BZIClcblxuXHQjaWZkZWYgVVNFX1RBTkdFTlRcblxuXHRcdG1hdDMgdGJuID0gbWF0Myggbm9ybWFsaXplKCB2VGFuZ2VudCApLCBub3JtYWxpemUoIHZCaXRhbmdlbnQgKSwgbm9ybWFsICk7XG5cblx0I2Vsc2VcblxuXHRcdG1hdDMgdGJuID0gZ2V0VGFuZ2VudEZyYW1lKCAtIHZWaWV3UG9zaXRpb24sIG5vcm1hbCxcblx0XHQjaWYgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApXG5cdFx0XHR2Tm9ybWFsTWFwVXZcblx0XHQjZWxpZiBkZWZpbmVkKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApXG5cdFx0XHR2Q2xlYXJjb2F0Tm9ybWFsTWFwVXZcblx0XHQjZWxzZVxuXHRcdFx0dlV2XG5cdFx0I2VuZGlmXG5cdFx0KTtcblxuXHQjZW5kaWZcblxuXHQjaWYgZGVmaW5lZCggRE9VQkxFX1NJREVEICkgJiYgISBkZWZpbmVkKCBGTEFUX1NIQURFRCApXG5cblx0XHR0Ym5bMF0gKj0gZmFjZURpcmVjdGlvbjtcblx0XHR0Ym5bMV0gKj0gZmFjZURpcmVjdGlvbjtcblxuXHQjZW5kaWZcblxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxuXG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXG5cdFx0bWF0MyB0Ym4yID0gbWF0Myggbm9ybWFsaXplKCB2VGFuZ2VudCApLCBub3JtYWxpemUoIHZCaXRhbmdlbnQgKSwgbm9ybWFsICk7XG5cblx0I2Vsc2VcblxuXHRcdG1hdDMgdGJuMiA9IGdldFRhbmdlbnRGcmFtZSggLSB2Vmlld1Bvc2l0aW9uLCBub3JtYWwsIHZDbGVhcmNvYXROb3JtYWxNYXBVdiApO1xuXG5cdCNlbmRpZlxuXG5cdCNpZiBkZWZpbmVkKCBET1VCTEVfU0lERUQgKSAmJiAhIGRlZmluZWQoIEZMQVRfU0hBREVEIClcblxuXHRcdHRibjJbMF0gKj0gZmFjZURpcmVjdGlvbjtcblx0XHR0Ym4yWzFdICo9IGZhY2VEaXJlY3Rpb247XG5cblx0I2VuZGlmXG5cbiNlbmRpZlxuXG4vLyBub24gcGVydHVyYmVkIG5vcm1hbCBmb3IgY2xlYXJjb2F0IGFtb25nIG90aGVyc1xuXG52ZWMzIG5vblBlcnR1cmJlZE5vcm1hbCA9IG5vcm1hbDtcblxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG5cbiNpZmRlZiBVU0VfTk9STUFMTUFQX09CSkVDVFNQQUNFXG5cblx0bm9ybWFsID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZOb3JtYWxNYXBVdiApLnh5eiAqIDIuMCAtIDEuMDsgLy8gb3ZlcnJpZGVzIGJvdGggZmxhdFNoYWRpbmcgYW5kIGF0dHJpYnV0ZSBub3JtYWxzXG5cblx0I2lmZGVmIEZMSVBfU0lERURcblxuXHRcdG5vcm1hbCA9IC0gbm9ybWFsO1xuXG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBET1VCTEVfU0lERURcblxuXHRcdG5vcm1hbCA9IG5vcm1hbCAqIGZhY2VEaXJlY3Rpb247XG5cblx0I2VuZGlmXG5cblx0bm9ybWFsID0gbm9ybWFsaXplKCBub3JtYWxNYXRyaXggKiBub3JtYWwgKTtcblxuI2VsaWYgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxuXG5cdHZlYzMgbWFwTiA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2Tm9ybWFsTWFwVXYgKS54eXogKiAyLjAgLSAxLjA7XG5cdG1hcE4ueHkgKj0gbm9ybWFsU2NhbGU7XG5cblx0bm9ybWFsID0gbm9ybWFsaXplKCB0Ym4gKiBtYXBOICk7XG5cbiNlbGlmIGRlZmluZWQoIFVTRV9CVU1QTUFQIClcblxuXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsQXJiKCAtIHZWaWV3UG9zaXRpb24sIG5vcm1hbCwgZEhkeHlfZndkKCksIGZhY2VEaXJlY3Rpb24gKTtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZm5kZWYgRkxBVF9TSEFERURcblxuXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcblxuXHQjaWZkZWYgVVNFX1RBTkdFTlRcblxuXHRcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcblx0XHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcblxuXHQjZW5kaWZcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZm5kZWYgRkxBVF9TSEFERURcblxuXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcblxuXHQjaWZkZWYgVVNFX1RBTkdFTlRcblxuXHRcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcblx0XHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcblxuXHQjZW5kaWZcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZm5kZWYgRkxBVF9TSEFERUQgLy8gbm9ybWFsIGlzIGNvbXB1dGVkIHdpdGggZGVyaXZhdGl2ZXMgd2hlbiBGTEFUX1NIQURFRFxuXG5cdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XG5cblx0I2lmZGVmIFVTRV9UQU5HRU5UXG5cblx0XHR2VGFuZ2VudCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWRUYW5nZW50ICk7XG5cdFx0dkJpdGFuZ2VudCA9IG5vcm1hbGl6ZSggY3Jvc3MoIHZOb3JtYWwsIHZUYW5nZW50ICkgKiB0YW5nZW50LncgKTtcblxuXHQjZW5kaWZcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfTk9STUFMTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1xuXHR1bmlmb3JtIHZlYzIgbm9ybWFsU2NhbGU7XG5cbiNlbmRpZlxuXG4jaWZkZWYgVVNFX05PUk1BTE1BUF9PQkpFQ1RTUEFDRVxuXG5cdHVuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7XG5cbiNlbmRpZlxuXG4jaWYgISBkZWZpbmVkICggVVNFX1RBTkdFTlQgKSAmJiAoIGRlZmluZWQgKCBVU0VfTk9STUFMTUFQX1RBTkdFTlRTUEFDRSApIHx8IGRlZmluZWQgKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9BTklTT1RST1BZICkgKVxuXG5cdC8vIE5vcm1hbCBNYXBwaW5nIFdpdGhvdXQgUHJlY29tcHV0ZWQgVGFuZ2VudHNcblx0Ly8gaHR0cDovL3d3dy50aGV0ZW50aHBsYW5ldC5kZS9hcmNoaXZlcy8xMTgwXG5cblx0bWF0MyBnZXRUYW5nZW50RnJhbWUoIHZlYzMgZXllX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgdXYgKSB7XG5cblx0XHR2ZWMzIHEwID0gZEZkeCggZXllX3Bvcy54eXogKTtcblx0XHR2ZWMzIHExID0gZEZkeSggZXllX3Bvcy54eXogKTtcblx0XHR2ZWMyIHN0MCA9IGRGZHgoIHV2LnN0ICk7XG5cdFx0dmVjMiBzdDEgPSBkRmR5KCB1di5zdCApO1xuXG5cdFx0dmVjMyBOID0gc3VyZl9ub3JtOyAvLyBub3JtYWxpemVkXG5cblx0XHR2ZWMzIHExcGVycCA9IGNyb3NzKCBxMSwgTiApO1xuXHRcdHZlYzMgcTBwZXJwID0gY3Jvc3MoIE4sIHEwICk7XG5cblx0XHR2ZWMzIFQgPSBxMXBlcnAgKiBzdDAueCArIHEwcGVycCAqIHN0MS54O1xuXHRcdHZlYzMgQiA9IHExcGVycCAqIHN0MC55ICsgcTBwZXJwICogc3QxLnk7XG5cblx0XHRmbG9hdCBkZXQgPSBtYXgoIGRvdCggVCwgVCApLCBkb3QoIEIsIEIgKSApO1xuXHRcdGZsb2F0IHNjYWxlID0gKCBkZXQgPT0gMC4wICkgPyAwLjAgOiBpbnZlcnNlc3FydCggZGV0ICk7XG5cblx0XHRyZXR1cm4gbWF0MyggVCAqIHNjYWxlLCBCICogc2NhbGUsIE4gKTtcblxuXHR9XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX0NMRUFSQ09BVFxuXG5cdHZlYzMgY2xlYXJjb2F0Tm9ybWFsID0gbm9uUGVydHVyYmVkTm9ybWFsO1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXG5cblx0dmVjMyBjbGVhcmNvYXRNYXBOID0gdGV4dHVyZTJEKCBjbGVhcmNvYXROb3JtYWxNYXAsIHZDbGVhcmNvYXROb3JtYWxNYXBVdiApLnh5eiAqIDIuMCAtIDEuMDtcblx0Y2xlYXJjb2F0TWFwTi54eSAqPSBjbGVhcmNvYXROb3JtYWxTY2FsZTtcblxuXHRjbGVhcmNvYXROb3JtYWwgPSBub3JtYWxpemUoIHRibjIgKiBjbGVhcmNvYXRNYXBOICk7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG5cbiNpZmRlZiBVU0VfQ0xFQVJDT0FUTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgY2xlYXJjb2F0TWFwO1xuXG4jZW5kaWZcblxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgY2xlYXJjb2F0Tm9ybWFsTWFwO1xuXHR1bmlmb3JtIHZlYzIgY2xlYXJjb2F0Tm9ybWFsU2NhbGU7XG5cbiNlbmRpZlxuXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVBcblxuXHR1bmlmb3JtIHNhbXBsZXIyRCBjbGVhcmNvYXRSb3VnaG5lc3NNYXA7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG5cbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VNQVBcblxuXHR1bmlmb3JtIHNhbXBsZXIyRCBpcmlkZXNjZW5jZU1hcDtcblxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgaXJpZGVzY2VuY2VUaGlja25lc3NNYXA7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgT1BBUVVFXG5kaWZmdXNlQ29sb3IuYSA9IDEuMDtcbiNlbmRpZlxuXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxuZGlmZnVzZUNvbG9yLmEgKj0gbWF0ZXJpYWwudHJhbnNtaXNzaW9uQWxwaGE7XG4jZW5kaWZcblxuZ2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxudmVjMyBwYWNrTm9ybWFsVG9SR0IoIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xuXHRyZXR1cm4gbm9ybWFsaXplKCBub3JtYWwgKSAqIDAuNSArIDAuNTtcbn1cblxudmVjMyB1bnBhY2tSR0JUb05vcm1hbCggY29uc3QgaW4gdmVjMyByZ2IgKSB7XG5cdHJldHVybiAyLjAgKiByZ2IueHl6IC0gMS4wO1xufVxuXG5jb25zdCBmbG9hdCBQYWNrVXBzY2FsZSA9IDI1Ni4gLyAyNTUuOyAvLyBmcmFjdGlvbiAtPiAwLi4xIChpbmNsdWRpbmcgMSlcbmNvbnN0IGZsb2F0IFVucGFja0Rvd25zY2FsZSA9IDI1NS4gLyAyNTYuOyAvLyAwLi4xIC0+IGZyYWN0aW9uIChleGNsdWRpbmcgMSlcblxuY29uc3QgdmVjMyBQYWNrRmFjdG9ycyA9IHZlYzMoIDI1Ni4gKiAyNTYuICogMjU2LiwgMjU2LiAqIDI1Ni4sIDI1Ni4gKTtcbmNvbnN0IHZlYzQgVW5wYWNrRmFjdG9ycyA9IFVucGFja0Rvd25zY2FsZSAvIHZlYzQoIFBhY2tGYWN0b3JzLCAxLiApO1xuXG5jb25zdCBmbG9hdCBTaGlmdFJpZ2h0OCA9IDEuIC8gMjU2LjtcblxudmVjNCBwYWNrRGVwdGhUb1JHQkEoIGNvbnN0IGluIGZsb2F0IHYgKSB7XG5cdHZlYzQgciA9IHZlYzQoIGZyYWN0KCB2ICogUGFja0ZhY3RvcnMgKSwgdiApO1xuXHRyLnl6dyAtPSByLnh5eiAqIFNoaWZ0UmlnaHQ4OyAvLyB0aWR5IG92ZXJmbG93XG5cdHJldHVybiByICogUGFja1Vwc2NhbGU7XG59XG5cbmZsb2F0IHVucGFja1JHQkFUb0RlcHRoKCBjb25zdCBpbiB2ZWM0IHYgKSB7XG5cdHJldHVybiBkb3QoIHYsIFVucGFja0ZhY3RvcnMgKTtcbn1cblxudmVjMiBwYWNrRGVwdGhUb1JHKCBpbiBoaWdocCBmbG9hdCB2ICkge1xuXHRyZXR1cm4gcGFja0RlcHRoVG9SR0JBKCB2ICkueXg7XG59XG5cbmZsb2F0IHVucGFja1JHVG9EZXB0aCggY29uc3QgaW4gaGlnaHAgdmVjMiB2ICkge1xuXHRyZXR1cm4gdW5wYWNrUkdCQVRvRGVwdGgoIHZlYzQoIHYueHksIDAuMCwgMC4wICkgKTtcbn1cblxudmVjNCBwYWNrMkhhbGZUb1JHQkEoIHZlYzIgdiApIHtcblx0dmVjNCByID0gdmVjNCggdi54LCBmcmFjdCggdi54ICogMjU1LjAgKSwgdi55LCBmcmFjdCggdi55ICogMjU1LjAgKSApO1xuXHRyZXR1cm4gdmVjNCggci54IC0gci55IC8gMjU1LjAsIHIueSwgci56IC0gci53IC8gMjU1LjAsIHIudyApO1xufVxuXG52ZWMyIHVucGFja1JHQkFUbzJIYWxmKCB2ZWM0IHYgKSB7XG5cdHJldHVybiB2ZWMyKCB2LnggKyAoIHYueSAvIDI1NS4wICksIHYueiArICggdi53IC8gMjU1LjAgKSApO1xufVxuXG4vLyBOT1RFOiB2aWV3WiwgdGhlIHotY29vcmRpbmF0ZSBpbiBjYW1lcmEgc3BhY2UsIGlzIG5lZ2F0aXZlIGZvciBwb2ludHMgaW4gZnJvbnQgb2YgdGhlIGNhbWVyYVxuXG5mbG9hdCB2aWV3WlRvT3J0aG9ncmFwaGljRGVwdGgoIGNvbnN0IGluIGZsb2F0IHZpZXdaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XG5cdC8vIC1uZWFyIG1hcHMgdG8gMDsgLWZhciBtYXBzIHRvIDFcblx0cmV0dXJuICggdmlld1ogKyBuZWFyICkgLyAoIG5lYXIgLSBmYXIgKTtcbn1cblxuZmxvYXQgb3J0aG9ncmFwaGljRGVwdGhUb1ZpZXdaKCBjb25zdCBpbiBmbG9hdCBkZXB0aCwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xuXHQvLyBtYXBzIG9ydGhvZ3JhcGhpYyBkZXB0aCBpbiBbIDAsIDEgXSB0byB2aWV3WlxuXHRyZXR1cm4gZGVwdGggKiAoIG5lYXIgLSBmYXIgKSAtIG5lYXI7XG59XG5cbi8vIE5PVEU6IGh0dHBzOi8vdHdpdHRlci5jb20vZ29ubmF2aXMvc3RhdHVzLzEzNzcxODM3ODY5NDk5NTk2ODJcblxuZmxvYXQgdmlld1pUb1BlcnNwZWN0aXZlRGVwdGgoIGNvbnN0IGluIGZsb2F0IHZpZXdaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XG5cdC8vIC1uZWFyIG1hcHMgdG8gMDsgLWZhciBtYXBzIHRvIDFcblx0cmV0dXJuICggKCBuZWFyICsgdmlld1ogKSAqIGZhciApIC8gKCAoIGZhciAtIG5lYXIgKSAqIHZpZXdaICk7XG59XG5cbmZsb2F0IHBlcnNwZWN0aXZlRGVwdGhUb1ZpZXdaKCBjb25zdCBpbiBmbG9hdCBkZXB0aCwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xuXHQvLyBtYXBzIHBlcnNwZWN0aXZlIGRlcHRoIGluIFsgMCwgMSBdIHRvIHZpZXdaXG5cdHJldHVybiAoIG5lYXIgKiBmYXIgKSAvICggKCBmYXIgLSBuZWFyICkgKiBkZXB0aCAtIGZhciApO1xufVxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgUFJFTVVMVElQTElFRF9BTFBIQVxuXG5cdC8vIEdldCBnZXQgbm9ybWFsIGJsZW5kaW5nIHdpdGggcHJlbXVsdGlwbGVkLCB1c2Ugd2l0aCBDdXN0b21CbGVuZGluZywgT25lRmFjdG9yLCBPbmVNaW51c1NyY0FscGhhRmFjdG9yLCBBZGRFcXVhdGlvbi5cblx0Z2xfRnJhZ0NvbG9yLnJnYiAqPSBnbF9GcmFnQ29sb3IuYTtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbnZlYzQgbXZQb3NpdGlvbiA9IHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcblxuI2lmZGVmIFVTRV9CQVRDSElOR1xuXG5cdG12UG9zaXRpb24gPSBiYXRjaGluZ01hdHJpeCAqIG12UG9zaXRpb247XG5cbiNlbmRpZlxuXG4jaWZkZWYgVVNFX0lOU1RBTkNJTkdcblxuXHRtdlBvc2l0aW9uID0gaW5zdGFuY2VNYXRyaXggKiBtdlBvc2l0aW9uO1xuXG4jZW5kaWZcblxubXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIG12UG9zaXRpb247XG5cbmdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBESVRIRVJJTkdcblxuXHRnbF9GcmFnQ29sb3IucmdiID0gZGl0aGVyaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgRElUSEVSSU5HXG5cblx0Ly8gYmFzZWQgb24gaHR0cHM6Ly93d3cuc2hhZGVydG95LmNvbS92aWV3L01zbEdSOFxuXHR2ZWMzIGRpdGhlcmluZyggdmVjMyBjb2xvciApIHtcblx0XHQvL0NhbGN1bGF0ZSBncmlkIHBvc2l0aW9uXG5cdFx0ZmxvYXQgZ3JpZF9wb3NpdGlvbiA9IHJhbmQoIGdsX0ZyYWdDb29yZC54eSApO1xuXG5cdFx0Ly9TaGlmdCB0aGUgaW5kaXZpZHVhbCBjb2xvcnMgZGlmZmVyZW50bHksIHRodXMgbWFraW5nIGl0IGV2ZW4gaGFyZGVyIHRvIHNlZSB0aGUgZGl0aGVyaW5nIHBhdHRlcm5cblx0XHR2ZWMzIGRpdGhlcl9zaGlmdF9SR0IgPSB2ZWMzKCAwLjI1IC8gMjU1LjAsIC0wLjI1IC8gMjU1LjAsIDAuMjUgLyAyNTUuMCApO1xuXG5cdFx0Ly9tb2RpZnkgc2hpZnQgYWNjb3JkaW5nIHRvIGdyaWQgcG9zaXRpb24uXG5cdFx0ZGl0aGVyX3NoaWZ0X1JHQiA9IG1peCggMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgLTIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIGdyaWRfcG9zaXRpb24gKTtcblxuXHRcdC8vc2hpZnQgdGhlIGNvbG9yIGJ5IGRpdGhlcl9zaGlmdFxuXHRcdHJldHVybiBjb2xvciArIGRpdGhlcl9zaGlmdF9SR0I7XG5cdH1cblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbmZsb2F0IHJvdWdobmVzc0ZhY3RvciA9IHJvdWdobmVzcztcblxuI2lmZGVmIFVTRV9ST1VHSE5FU1NNQVBcblxuXHR2ZWM0IHRleGVsUm91Z2huZXNzID0gdGV4dHVyZTJEKCByb3VnaG5lc3NNYXAsIHZSb3VnaG5lc3NNYXBVdiApO1xuXG5cdC8vIHJlYWRzIGNoYW5uZWwgRywgY29tcGF0aWJsZSB3aXRoIGEgY29tYmluZWQgT2NjbHVzaW9uUm91Z2huZXNzTWV0YWxsaWMgKFJHQikgdGV4dHVyZVxuXHRyb3VnaG5lc3NGYWN0b3IgKj0gdGV4ZWxSb3VnaG5lc3MuZztcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgcm91Z2huZXNzTWFwO1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIE5VTV9TUE9UX0xJR0hUX0NPT1JEUyA+IDBcblxuXHR2YXJ5aW5nIHZlYzQgdlNwb3RMaWdodENvb3JkWyBOVU1fU1BPVF9MSUdIVF9DT09SRFMgXTtcblxuI2VuZGlmXG5cbiNpZiBOVU1fU1BPVF9MSUdIVF9NQVBTID4gMFxuXG5cdHVuaWZvcm0gc2FtcGxlcjJEIHNwb3RMaWdodE1hcFsgTlVNX1NQT1RfTElHSFRfTUFQUyBdO1xuXG4jZW5kaWZcblxuI2lmZGVmIFVTRV9TSEFET1dNQVBcblxuXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxuXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlyZWN0aW9uYWxTaGFkb3dNYXBbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xuXHRcdHZhcnlpbmcgdmVjNCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XG5cblx0XHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodFNoYWRvdyB7XG5cdFx0XHRmbG9hdCBzaGFkb3dJbnRlbnNpdHk7XG5cdFx0XHRmbG9hdCBzaGFkb3dCaWFzO1xuXHRcdFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcblx0XHRcdGZsb2F0IHNoYWRvd1JhZGl1cztcblx0XHRcdHZlYzIgc2hhZG93TWFwU2l6ZTtcblx0XHR9O1xuXG5cdFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcblxuXHQjZW5kaWZcblxuXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcblxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHNwb3RTaGFkb3dNYXBbIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgXTtcblxuXHRcdHN0cnVjdCBTcG90TGlnaHRTaGFkb3cge1xuXHRcdFx0ZmxvYXQgc2hhZG93SW50ZW5zaXR5O1xuXHRcdFx0ZmxvYXQgc2hhZG93Qmlhcztcblx0XHRcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XG5cdFx0XHRmbG9hdCBzaGFkb3dSYWRpdXM7XG5cdFx0XHR2ZWMyIHNoYWRvd01hcFNpemU7XG5cdFx0fTtcblxuXHRcdHVuaWZvcm0gU3BvdExpZ2h0U2hhZG93IHNwb3RMaWdodFNoYWRvd3NbIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgXTtcblxuXHQjZW5kaWZcblxuXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXG5cblx0XHR1bmlmb3JtIHNhbXBsZXIyRCBwb2ludFNoYWRvd01hcFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcblx0XHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XG5cblx0XHRzdHJ1Y3QgUG9pbnRMaWdodFNoYWRvdyB7XG5cdFx0XHRmbG9hdCBzaGFkb3dJbnRlbnNpdHk7XG5cdFx0XHRmbG9hdCBzaGFkb3dCaWFzO1xuXHRcdFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcblx0XHRcdGZsb2F0IHNoYWRvd1JhZGl1cztcblx0XHRcdHZlYzIgc2hhZG93TWFwU2l6ZTtcblx0XHRcdGZsb2F0IHNoYWRvd0NhbWVyYU5lYXI7XG5cdFx0XHRmbG9hdCBzaGFkb3dDYW1lcmFGYXI7XG5cdFx0fTtcblxuXHRcdHVuaWZvcm0gUG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93c1sgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcblxuXHQjZW5kaWZcblxuXHQvKlxuXHQjaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXG5cblx0XHQvLyBUT0RPIChhYmVsbmF0aW9uKTogY3JlYXRlIHVuaWZvcm1zIGZvciBhcmVhIGxpZ2h0IHNoYWRvd3NcblxuXHQjZW5kaWZcblx0Ki9cblxuXHRmbG9hdCB0ZXh0dXJlMkRDb21wYXJlKCBzYW1wbGVyMkQgZGVwdGhzLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICkge1xuXG5cdFx0cmV0dXJuIHN0ZXAoIGNvbXBhcmUsIHVucGFja1JHQkFUb0RlcHRoKCB0ZXh0dXJlMkQoIGRlcHRocywgdXYgKSApICk7XG5cblx0fVxuXG5cdHZlYzIgdGV4dHVyZTJERGlzdHJpYnV0aW9uKCBzYW1wbGVyMkQgc2hhZG93LCB2ZWMyIHV2ICkge1xuXG5cdFx0cmV0dXJuIHVucGFja1JHQkFUbzJIYWxmKCB0ZXh0dXJlMkQoIHNoYWRvdywgdXYgKSApO1xuXG5cdH1cblxuXHRmbG9hdCBWU01TaGFkb3cgKHNhbXBsZXIyRCBzaGFkb3csIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUgKXtcblxuXHRcdGZsb2F0IG9jY2x1c2lvbiA9IDEuMDtcblxuXHRcdHZlYzIgZGlzdHJpYnV0aW9uID0gdGV4dHVyZTJERGlzdHJpYnV0aW9uKCBzaGFkb3csIHV2ICk7XG5cblx0XHRmbG9hdCBoYXJkX3NoYWRvdyA9IHN0ZXAoIGNvbXBhcmUgLCBkaXN0cmlidXRpb24ueCApOyAvLyBIYXJkIFNoYWRvd1xuXG5cdFx0aWYgKGhhcmRfc2hhZG93ICE9IDEuMCApIHtcblxuXHRcdFx0ZmxvYXQgZGlzdGFuY2UgPSBjb21wYXJlIC0gZGlzdHJpYnV0aW9uLnggO1xuXHRcdFx0ZmxvYXQgdmFyaWFuY2UgPSBtYXgoIDAuMDAwMDAsIGRpc3RyaWJ1dGlvbi55ICogZGlzdHJpYnV0aW9uLnkgKTtcblx0XHRcdGZsb2F0IHNvZnRuZXNzX3Byb2JhYmlsaXR5ID0gdmFyaWFuY2UgLyAodmFyaWFuY2UgKyBkaXN0YW5jZSAqIGRpc3RhbmNlICk7IC8vIENoZWJleXNoZXZzIGluZXF1YWxpdHlcblx0XHRcdHNvZnRuZXNzX3Byb2JhYmlsaXR5ID0gY2xhbXAoICggc29mdG5lc3NfcHJvYmFiaWxpdHkgLSAwLjMgKSAvICggMC45NSAtIDAuMyApLCAwLjAsIDEuMCApOyAvLyAwLjMgcmVkdWNlcyBsaWdodCBibGVlZFxuXHRcdFx0b2NjbHVzaW9uID0gY2xhbXAoIG1heCggaGFyZF9zaGFkb3csIHNvZnRuZXNzX3Byb2JhYmlsaXR5ICksIDAuMCwgMS4wICk7XG5cblx0XHR9XG5cdFx0cmV0dXJuIG9jY2x1c2lvbjtcblxuXHR9XG5cblx0ZmxvYXQgZ2V0U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0ludGVuc2l0eSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgc2hhZG93UmFkaXVzLCB2ZWM0IHNoYWRvd0Nvb3JkICkge1xuXG5cdFx0ZmxvYXQgc2hhZG93ID0gMS4wO1xuXG5cdFx0c2hhZG93Q29vcmQueHl6IC89IHNoYWRvd0Nvb3JkLnc7XG5cdFx0c2hhZG93Q29vcmQueiArPSBzaGFkb3dCaWFzO1xuXG5cdFx0Ym9vbCBpbkZydXN0dW0gPSBzaGFkb3dDb29yZC54ID49IDAuMCAmJiBzaGFkb3dDb29yZC54IDw9IDEuMCAmJiBzaGFkb3dDb29yZC55ID49IDAuMCAmJiBzaGFkb3dDb29yZC55IDw9IDEuMDtcblx0XHRib29sIGZydXN0dW1UZXN0ID0gaW5GcnVzdHVtICYmIHNoYWRvd0Nvb3JkLnogPD0gMS4wO1xuXG5cdFx0aWYgKCBmcnVzdHVtVGVzdCApIHtcblxuXHRcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKVxuXG5cdFx0XHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcblxuXHRcdFx0ZmxvYXQgZHgwID0gLSB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcblx0XHRcdGZsb2F0IGR5MCA9IC0gdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XG5cdFx0XHRmbG9hdCBkeDEgPSArIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xuXHRcdFx0ZmxvYXQgZHkxID0gKyB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcblx0XHRcdGZsb2F0IGR4MiA9IGR4MCAvIDIuMDtcblx0XHRcdGZsb2F0IGR5MiA9IGR5MCAvIDIuMDtcblx0XHRcdGZsb2F0IGR4MyA9IGR4MSAvIDIuMDtcblx0XHRcdGZsb2F0IGR5MyA9IGR5MSAvIDIuMDtcblxuXHRcdFx0c2hhZG93ID0gKFxuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIGR5MiApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgZHkzICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXG5cdFx0XHQpICogKCAxLjAgLyAxNy4wICk7XG5cblx0XHQjZWxpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCApXG5cblx0XHRcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaGFkb3dNYXBTaXplO1xuXHRcdFx0ZmxvYXQgZHggPSB0ZXhlbFNpemUueDtcblx0XHRcdGZsb2F0IGR5ID0gdGV4ZWxTaXplLnk7XG5cblx0XHRcdHZlYzIgdXYgPSBzaGFkb3dDb29yZC54eTtcblx0XHRcdHZlYzIgZiA9IGZyYWN0KCB1diAqIHNoYWRvd01hcFNpemUgKyAwLjUgKTtcblx0XHRcdHV2IC09IGYgKiB0ZXhlbFNpemU7XG5cblx0XHRcdHNoYWRvdyA9IChcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIGR4LCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDAuMCwgZHkgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHRleGVsU2l6ZSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0bWl4KCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggLWR4LCAwLjAgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0XHRcdCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMi4wICogZHgsIDAuMCApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRcdFx0IGYueCApICtcblx0XHRcdFx0bWl4KCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggLWR4LCBkeSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRcdFx0IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAyLjAgKiBkeCwgZHkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0XHRcdCBmLnggKSArXG5cdFx0XHRcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDAuMCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0XHQgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDAuMCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0XHRcdCBmLnkgKSArXG5cdFx0XHRcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIGR4LCAtZHkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0XHRcdCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggZHgsIDIuMCAqIGR5ICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0XHQgZi55ICkgK1xuXHRcdFx0XHRtaXgoIG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0XHRcdCAgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCAtZHkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0XHRcdFx0ICBmLnggKSxcblx0XHRcdFx0XHQgbWl4KCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggLWR4LCAyLjAgKiBkeSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRcdFx0XHQgIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAyLjAgKiBkeCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0XHRcdFx0ICBmLnggKSxcblx0XHRcdFx0XHQgZi55IClcblx0XHRcdCkgKiAoIDEuMCAvIDkuMCApO1xuXG5cdFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfVlNNIClcblxuXHRcdFx0c2hhZG93ID0gVlNNU2hhZG93KCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICk7XG5cblx0XHQjZWxzZSAvLyBubyBwZXJjZW50YWdlLWNsb3NlciBmaWx0ZXJpbmc6XG5cblx0XHRcdHNoYWRvdyA9IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKTtcblxuXHRcdCNlbmRpZlxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1peCggMS4wLCBzaGFkb3csIHNoYWRvd0ludGVuc2l0eSApO1xuXG5cdH1cblxuXHQvLyBjdWJlVG9VVigpIG1hcHMgYSAzRCBkaXJlY3Rpb24gdmVjdG9yIHN1aXRhYmxlIGZvciBjdWJlIHRleHR1cmUgbWFwcGluZyB0byBhIDJEXG5cdC8vIHZlY3RvciBzdWl0YWJsZSBmb3IgMkQgdGV4dHVyZSBtYXBwaW5nLiBUaGlzIGNvZGUgdXNlcyB0aGUgZm9sbG93aW5nIGxheW91dCBmb3IgdGhlXG5cdC8vIDJEIHRleHR1cmU6XG5cdC8vXG5cdC8vIHh6WFpcblx0Ly8gIHkgWVxuXHQvL1xuXHQvLyBZIC0gUG9zaXRpdmUgeSBkaXJlY3Rpb25cblx0Ly8geSAtIE5lZ2F0aXZlIHkgZGlyZWN0aW9uXG5cdC8vIFggLSBQb3NpdGl2ZSB4IGRpcmVjdGlvblxuXHQvLyB4IC0gTmVnYXRpdmUgeCBkaXJlY3Rpb25cblx0Ly8gWiAtIFBvc2l0aXZlIHogZGlyZWN0aW9uXG5cdC8vIHogLSBOZWdhdGl2ZSB6IGRpcmVjdGlvblxuXHQvL1xuXHQvLyBTb3VyY2UgYW5kIHRlc3QgYmVkOlxuXHQvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS90c2Nody9kYTEwYzQzYzQ2N2NlOGFmZDBjNFxuXG5cdHZlYzIgY3ViZVRvVVYoIHZlYzMgdiwgZmxvYXQgdGV4ZWxTaXplWSApIHtcblxuXHRcdC8vIE51bWJlciBvZiB0ZXhlbHMgdG8gYXZvaWQgYXQgdGhlIGVkZ2Ugb2YgZWFjaCBzcXVhcmVcblxuXHRcdHZlYzMgYWJzViA9IGFicyggdiApO1xuXG5cdFx0Ly8gSW50ZXJzZWN0IHVuaXQgY3ViZVxuXG5cdFx0ZmxvYXQgc2NhbGVUb0N1YmUgPSAxLjAgLyBtYXgoIGFic1YueCwgbWF4KCBhYnNWLnksIGFic1YueiApICk7XG5cdFx0YWJzViAqPSBzY2FsZVRvQ3ViZTtcblxuXHRcdC8vIEFwcGx5IHNjYWxlIHRvIGF2b2lkIHNlYW1zXG5cblx0XHQvLyB0d28gdGV4ZWxzIGxlc3MgcGVyIHNxdWFyZSAob25lIHRleGVsIHdpbGwgZG8gZm9yIE5FQVJFU1QpXG5cdFx0diAqPSBzY2FsZVRvQ3ViZSAqICggMS4wIC0gMi4wICogdGV4ZWxTaXplWSApO1xuXG5cdFx0Ly8gVW53cmFwXG5cblx0XHQvLyBzcGFjZTogLTEgLi4uIDEgcmFuZ2UgZm9yIGVhY2ggc3F1YXJlXG5cdFx0Ly9cblx0XHQvLyAjWCMjXHRcdGRpbSAgICA6PSAoIDQgLCAyIClcblx0XHQvLyAgIyAjXHRcdGNlbnRlciA6PSAoIDEgLCAxIClcblxuXHRcdHZlYzIgcGxhbmFyID0gdi54eTtcblxuXHRcdGZsb2F0IGFsbW9zdEFUZXhlbCA9IDEuNSAqIHRleGVsU2l6ZVk7XG5cdFx0ZmxvYXQgYWxtb3N0T25lID0gMS4wIC0gYWxtb3N0QVRleGVsO1xuXG5cdFx0aWYgKCBhYnNWLnogPj0gYWxtb3N0T25lICkge1xuXG5cdFx0XHRpZiAoIHYueiA+IDAuMCApXG5cdFx0XHRcdHBsYW5hci54ID0gNC4wIC0gdi54O1xuXG5cdFx0fSBlbHNlIGlmICggYWJzVi54ID49IGFsbW9zdE9uZSApIHtcblxuXHRcdFx0ZmxvYXQgc2lnblggPSBzaWduKCB2LnggKTtcblx0XHRcdHBsYW5hci54ID0gdi56ICogc2lnblggKyAyLjAgKiBzaWduWDtcblxuXHRcdH0gZWxzZSBpZiAoIGFic1YueSA+PSBhbG1vc3RPbmUgKSB7XG5cblx0XHRcdGZsb2F0IHNpZ25ZID0gc2lnbiggdi55ICk7XG5cdFx0XHRwbGFuYXIueCA9IHYueCArIDIuMCAqIHNpZ25ZICsgMi4wO1xuXHRcdFx0cGxhbmFyLnkgPSB2LnogKiBzaWduWSAtIDIuMDtcblxuXHRcdH1cblxuXHRcdC8vIFRyYW5zZm9ybSB0byBVViBzcGFjZVxuXG5cdFx0Ly8gc2NhbGUgOj0gMC41IC8gZGltXG5cdFx0Ly8gdHJhbnNsYXRlIDo9ICggY2VudGVyICsgMC41ICkgLyBkaW1cblx0XHRyZXR1cm4gdmVjMiggMC4xMjUsIDAuMjUgKSAqIHBsYW5hciArIHZlYzIoIDAuMzc1LCAwLjc1ICk7XG5cblx0fVxuXG5cdGZsb2F0IGdldFBvaW50U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0ludGVuc2l0eSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgc2hhZG93UmFkaXVzLCB2ZWM0IHNoYWRvd0Nvb3JkLCBmbG9hdCBzaGFkb3dDYW1lcmFOZWFyLCBmbG9hdCBzaGFkb3dDYW1lcmFGYXIgKSB7XG5cblx0XHRmbG9hdCBzaGFkb3cgPSAxLjA7XG5cblx0XHQvLyBmb3IgcG9pbnQgbGlnaHRzLCB0aGUgdW5pZm9ybSBAdlNoYWRvd0Nvb3JkIGlzIHJlLXB1cnBvc2VkIHRvIGhvbGRcblx0XHQvLyB0aGUgdmVjdG9yIGZyb20gdGhlIGxpZ2h0IHRvIHRoZSB3b3JsZC1zcGFjZSBwb3NpdGlvbiBvZiB0aGUgZnJhZ21lbnQuXG5cdFx0dmVjMyBsaWdodFRvUG9zaXRpb24gPSBzaGFkb3dDb29yZC54eXo7XG5cdFx0XG5cdFx0ZmxvYXQgbGlnaHRUb1Bvc2l0aW9uTGVuZ3RoID0gbGVuZ3RoKCBsaWdodFRvUG9zaXRpb24gKTtcblxuXHRcdGlmICggbGlnaHRUb1Bvc2l0aW9uTGVuZ3RoIC0gc2hhZG93Q2FtZXJhRmFyIDw9IDAuMCAmJiBsaWdodFRvUG9zaXRpb25MZW5ndGggLSBzaGFkb3dDYW1lcmFOZWFyID49IDAuMCApIHtcblxuXHRcdFx0Ly8gZHAgPSBub3JtYWxpemVkIGRpc3RhbmNlIGZyb20gbGlnaHQgdG8gZnJhZ21lbnQgcG9zaXRpb25cblx0XHRcdGZsb2F0IGRwID0gKCBsaWdodFRvUG9zaXRpb25MZW5ndGggLSBzaGFkb3dDYW1lcmFOZWFyICkgLyAoIHNoYWRvd0NhbWVyYUZhciAtIHNoYWRvd0NhbWVyYU5lYXIgKTsgLy8gbmVlZCB0byBjbGFtcD9cblx0XHRcdGRwICs9IHNoYWRvd0JpYXM7XG5cblx0XHRcdC8vIGJkM0QgPSBiYXNlIGRpcmVjdGlvbiAzRFxuXHRcdFx0dmVjMyBiZDNEID0gbm9ybWFsaXplKCBsaWdodFRvUG9zaXRpb24gKTtcblxuXHRcdFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvICggc2hhZG93TWFwU2l6ZSAqIHZlYzIoIDQuMCwgMi4wICkgKTtcblxuXHRcdFx0I2lmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRiApIHx8IGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUICkgfHwgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfVlNNIClcblxuXHRcdFx0XHR2ZWMyIG9mZnNldCA9IHZlYzIoIC0gMSwgMSApICogc2hhZG93UmFkaXVzICogdGV4ZWxTaXplLnk7XG5cblx0XHRcdFx0c2hhZG93ID0gKFxuXHRcdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHl5LCB0ZXhlbFNpemUueSApLCBkcCApICtcblx0XHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl5eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXG5cdFx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xuXHRcdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXl4LCB0ZXhlbFNpemUueSApLCBkcCApICtcblx0XHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNELCB0ZXhlbFNpemUueSApLCBkcCApICtcblx0XHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXG5cdFx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eHksIHRleGVsU2l6ZS55ICksIGRwICkgK1xuXHRcdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh4LCB0ZXhlbFNpemUueSApLCBkcCApICtcblx0XHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eCwgdGV4ZWxTaXplLnkgKSwgZHAgKVxuXHRcdFx0XHQpICogKCAxLjAgLyA5LjAgKTtcblxuXHRcdFx0I2Vsc2UgLy8gbm8gcGVyY2VudGFnZS1jbG9zZXIgZmlsdGVyaW5nXG5cblx0XHRcdFx0c2hhZG93ID0gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKTtcblxuXHRcdFx0I2VuZGlmXG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWl4KCAxLjAsIHNoYWRvdywgc2hhZG93SW50ZW5zaXR5ICk7XG5cblx0fVxuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuXG4jaWYgTlVNX1NQT1RfTElHSFRfQ09PUkRTID4gMFxuXG5cdHVuaWZvcm0gbWF0NCBzcG90TGlnaHRNYXRyaXhbIE5VTV9TUE9UX0xJR0hUX0NPT1JEUyBdO1xuXHR2YXJ5aW5nIHZlYzQgdlNwb3RMaWdodENvb3JkWyBOVU1fU1BPVF9MSUdIVF9DT09SRFMgXTtcblxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfU0hBRE9XTUFQXG5cblx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcblxuXHRcdHVuaWZvcm0gbWF0NCBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XG5cdFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcblxuXHRcdHN0cnVjdCBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IHtcblx0XHRcdGZsb2F0IHNoYWRvd0ludGVuc2l0eTtcblx0XHRcdGZsb2F0IHNoYWRvd0JpYXM7XG5cdFx0XHRmbG9hdCBzaGFkb3dOb3JtYWxCaWFzO1xuXHRcdFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xuXHRcdFx0dmVjMiBzaGFkb3dNYXBTaXplO1xuXHRcdH07XG5cblx0XHR1bmlmb3JtIERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZGlyZWN0aW9uYWxMaWdodFNoYWRvd3NbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xuXG5cdCNlbmRpZlxuXG5cdCNpZiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxuXG5cdFx0c3RydWN0IFNwb3RMaWdodFNoYWRvdyB7XG5cdFx0XHRmbG9hdCBzaGFkb3dJbnRlbnNpdHk7XG5cdFx0XHRmbG9hdCBzaGFkb3dCaWFzO1xuXHRcdFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcblx0XHRcdGZsb2F0IHNoYWRvd1JhZGl1cztcblx0XHRcdHZlYzIgc2hhZG93TWFwU2l6ZTtcblx0XHR9O1xuXG5cdFx0dW5pZm9ybSBTcG90TGlnaHRTaGFkb3cgc3BvdExpZ2h0U2hhZG93c1sgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xuXG5cdCNlbmRpZlxuXG5cdCNpZiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcblxuXHRcdHVuaWZvcm0gbWF0NCBwb2ludFNoYWRvd01hdHJpeFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcblx0XHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XG5cblx0XHRzdHJ1Y3QgUG9pbnRMaWdodFNoYWRvdyB7XG5cdFx0XHRmbG9hdCBzaGFkb3dJbnRlbnNpdHk7XG5cdFx0XHRmbG9hdCBzaGFkb3dCaWFzO1xuXHRcdFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcblx0XHRcdGZsb2F0IHNoYWRvd1JhZGl1cztcblx0XHRcdHZlYzIgc2hhZG93TWFwU2l6ZTtcblx0XHRcdGZsb2F0IHNoYWRvd0NhbWVyYU5lYXI7XG5cdFx0XHRmbG9hdCBzaGFkb3dDYW1lcmFGYXI7XG5cdFx0fTtcblxuXHRcdHVuaWZvcm0gUG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93c1sgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcblxuXHQjZW5kaWZcblxuXHQvKlxuXHQjaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXG5cblx0XHQvLyBUT0RPIChhYmVsbmF0aW9uKTogdW5pZm9ybXMgZm9yIGFyZWEgbGlnaHQgc2hhZG93c1xuXG5cdCNlbmRpZlxuXHQqL1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuXG4jaWYgKCBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgKCBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwIHx8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMCApICkgfHwgKCBOVU1fU1BPVF9MSUdIVF9DT09SRFMgPiAwIClcblxuXHQvLyBPZmZzZXR0aW5nIHRoZSBwb3NpdGlvbiB1c2VkIGZvciBxdWVyeWluZyBvY2NsdXNpb24gYWxvbmcgdGhlIHdvcmxkIG5vcm1hbCBjYW4gYmUgdXNlZCB0byByZWR1Y2Ugc2hhZG93IGFjbmUuXG5cdHZlYzMgc2hhZG93V29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCB0cmFuc2Zvcm1lZE5vcm1hbCwgdmlld01hdHJpeCApO1xuXHR2ZWM0IHNoYWRvd1dvcmxkUG9zaXRpb247XG5cbiNlbmRpZlxuXG4jaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApXG5cblx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcblxuXHRcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0XHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XG5cblx0XHRcdHNoYWRvd1dvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uICsgdmVjNCggc2hhZG93V29ybGROb3JtYWwgKiBkaXJlY3Rpb25hbExpZ2h0U2hhZG93c1sgaSBdLnNoYWRvd05vcm1hbEJpYXMsIDAgKTtcblx0XHRcdHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gPSBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgaSBdICogc2hhZG93V29ybGRQb3NpdGlvbjtcblxuXHRcdH1cblx0XHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxuXG5cdCNlbmRpZlxuXG5cdCNpZiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcblxuXHRcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0XHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcblxuXHRcdFx0c2hhZG93V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24gKyB2ZWM0KCBzaGFkb3dXb3JsZE5vcm1hbCAqIHBvaW50TGlnaHRTaGFkb3dzWyBpIF0uc2hhZG93Tm9ybWFsQmlhcywgMCApO1xuXHRcdFx0dlBvaW50U2hhZG93Q29vcmRbIGkgXSA9IHBvaW50U2hhZG93TWF0cml4WyBpIF0gKiBzaGFkb3dXb3JsZFBvc2l0aW9uO1xuXG5cdFx0fVxuXHRcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cblx0I2VuZGlmXG5cblx0Lypcblx0I2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxuXG5cdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IHVwZGF0ZSB2QXJlYVNoYWRvd0Nvb3JkIHdpdGggYXJlYSBsaWdodCBpbmZvXG5cblx0I2VuZGlmXG5cdCovXG5cbiNlbmRpZlxuXG4vLyBzcG90IGxpZ2h0cyBjYW4gYmUgZXZhbHVhdGVkIHdpdGhvdXQgYWN0aXZlIHNoYWRvdyBtYXBwaW5nICh3aGVuIFNwb3RMaWdodC5tYXAgaXMgdXNlZClcblxuI2lmIE5VTV9TUE9UX0xJR0hUX0NPT1JEUyA+IDBcblxuXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XG5cdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUX0NPT1JEUzsgaSArKyApIHtcblxuXHRcdHNoYWRvd1dvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uO1xuXHRcdCNpZiAoIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiBVTlJPTExFRF9MT09QX0lOREVYIDwgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyApXG5cdFx0XHRzaGFkb3dXb3JsZFBvc2l0aW9uLnh5eiArPSBzaGFkb3dXb3JsZE5vcm1hbCAqIHNwb3RMaWdodFNoYWRvd3NbIGkgXS5zaGFkb3dOb3JtYWxCaWFzO1xuXHRcdCNlbmRpZlxuXHRcdHZTcG90TGlnaHRDb29yZFsgaSBdID0gc3BvdExpZ2h0TWF0cml4WyBpIF0gKiBzaGFkb3dXb3JsZFBvc2l0aW9uO1xuXG5cdH1cblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcblxuI2VuZGlmXG5cblxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG5mbG9hdCBnZXRTaGFkb3dNYXNrKCkge1xuXG5cdGZsb2F0IHNoYWRvdyA9IDEuMDtcblxuXHQjaWZkZWYgVVNFX1NIQURPV01BUFxuXG5cdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXG5cblx0RGlyZWN0aW9uYWxMaWdodFNoYWRvdyBkaXJlY3Rpb25hbExpZ2h0O1xuXG5cdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVF9TSEFET1dTOyBpICsrICkge1xuXG5cdFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBpIF07XG5cdFx0c2hhZG93ICo9IHJlY2VpdmVTaGFkb3cgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dJbnRlbnNpdHksIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93QmlhcywgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dSYWRpdXMsIHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcblxuXHR9XG5cdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cblx0I2VuZGlmXG5cblx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXG5cblx0U3BvdExpZ2h0U2hhZG93IHNwb3RMaWdodDtcblxuXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XG5cdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XG5cblx0XHRzcG90TGlnaHQgPSBzcG90TGlnaHRTaGFkb3dzWyBpIF07XG5cdFx0c2hhZG93ICo9IHJlY2VpdmVTaGFkb3cgPyBnZXRTaGFkb3coIHNwb3RTaGFkb3dNYXBbIGkgXSwgc3BvdExpZ2h0LnNoYWRvd01hcFNpemUsIHNwb3RMaWdodC5zaGFkb3dJbnRlbnNpdHksIHNwb3RMaWdodC5zaGFkb3dCaWFzLCBzcG90TGlnaHQuc2hhZG93UmFkaXVzLCB2U3BvdExpZ2h0Q29vcmRbIGkgXSApIDogMS4wO1xuXG5cdH1cblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcblxuXHQjZW5kaWZcblxuXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXG5cblx0UG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0O1xuXG5cdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XG5cblx0XHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodFNoYWRvd3NbIGkgXTtcblx0XHRzaGFkb3cgKj0gcmVjZWl2ZVNoYWRvdyA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHQuc2hhZG93SW50ZW5zaXR5LCBwb2ludExpZ2h0LnNoYWRvd0JpYXMsIHBvaW50TGlnaHQuc2hhZG93UmFkaXVzLCB2UG9pbnRTaGFkb3dDb29yZFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYU5lYXIsIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhRmFyICkgOiAxLjA7XG5cblx0fVxuXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxuXG5cdCNlbmRpZlxuXG5cdC8qXG5cdCNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcblxuXHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiB1cGRhdGUgc2hhZG93IGZvciBBcmVhIGxpZ2h0XG5cblx0I2VuZGlmXG5cdCovXG5cblx0I2VuZGlmXG5cblx0cmV0dXJuIHNoYWRvdztcblxufVxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX1NLSU5OSU5HXG5cblx0bWF0NCBib25lTWF0WCA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC54ICk7XG5cdG1hdDQgYm9uZU1hdFkgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueSApO1xuXHRtYXQ0IGJvbmVNYXRaID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnogKTtcblx0bWF0NCBib25lTWF0VyA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC53ICk7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX1NLSU5OSU5HXG5cblx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXg7XG5cdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4SW52ZXJzZTtcblxuXHR1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBib25lVGV4dHVyZTtcblxuXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XG5cblx0XHRpbnQgc2l6ZSA9IHRleHR1cmVTaXplKCBib25lVGV4dHVyZSwgMCApLng7XG5cdFx0aW50IGogPSBpbnQoIGkgKSAqIDQ7XG5cdFx0aW50IHggPSBqICUgc2l6ZTtcblx0XHRpbnQgeSA9IGogLyBzaXplO1xuXHRcdHZlYzQgdjEgPSB0ZXhlbEZldGNoKCBib25lVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSwgMCApO1xuXHRcdHZlYzQgdjIgPSB0ZXhlbEZldGNoKCBib25lVGV4dHVyZSwgaXZlYzIoIHggKyAxLCB5ICksIDAgKTtcblx0XHR2ZWM0IHYzID0gdGV4ZWxGZXRjaCggYm9uZVRleHR1cmUsIGl2ZWMyKCB4ICsgMiwgeSApLCAwICk7XG5cdFx0dmVjNCB2NCA9IHRleGVsRmV0Y2goIGJvbmVUZXh0dXJlLCBpdmVjMiggeCArIDMsIHkgKSwgMCApO1xuXG5cdFx0cmV0dXJuIG1hdDQoIHYxLCB2MiwgdjMsIHY0ICk7XG5cblx0fVxuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmZGVmIFVTRV9TS0lOTklOR1xuXG5cdHZlYzQgc2tpblZlcnRleCA9IGJpbmRNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XG5cblx0dmVjNCBza2lubmVkID0gdmVjNCggMC4wICk7XG5cdHNraW5uZWQgKz0gYm9uZU1hdFggKiBza2luVmVydGV4ICogc2tpbldlaWdodC54O1xuXHRza2lubmVkICs9IGJvbmVNYXRZICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueTtcblx0c2tpbm5lZCArPSBib25lTWF0WiAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lno7XG5cdHNraW5uZWQgKz0gYm9uZU1hdFcgKiBza2luVmVydGV4ICogc2tpbldlaWdodC53O1xuXG5cdHRyYW5zZm9ybWVkID0gKCBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5uZWQgKS54eXo7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX1NLSU5OSU5HXG5cblx0bWF0NCBza2luTWF0cml4ID0gbWF0NCggMC4wICk7XG5cdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC54ICogYm9uZU1hdFg7XG5cdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC55ICogYm9uZU1hdFk7XG5cdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC56ICogYm9uZU1hdFo7XG5cdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC53ICogYm9uZU1hdFc7XG5cdHNraW5NYXRyaXggPSBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5NYXRyaXggKiBiaW5kTWF0cml4O1xuXG5cdG9iamVjdE5vcm1hbCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3ROb3JtYWwsIDAuMCApICkueHl6O1xuXG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXG5cdFx0b2JqZWN0VGFuZ2VudCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3RUYW5nZW50LCAwLjAgKSApLnh5ejtcblxuXHQjZW5kaWZcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbmZsb2F0IHNwZWN1bGFyU3RyZW5ndGg7XG5cbiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcblxuXHR2ZWM0IHRleGVsU3BlY3VsYXIgPSB0ZXh0dXJlMkQoIHNwZWN1bGFyTWFwLCB2U3BlY3VsYXJNYXBVdiApO1xuXHRzcGVjdWxhclN0cmVuZ3RoID0gdGV4ZWxTcGVjdWxhci5yO1xuXG4jZWxzZVxuXG5cdHNwZWN1bGFyU3RyZW5ndGggPSAxLjA7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXG5cblx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJNYXA7XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWYgZGVmaW5lZCggVE9ORV9NQVBQSU5HIClcblxuXHRnbF9GcmFnQ29sb3IucmdiID0gdG9uZU1hcHBpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZm5kZWYgc2F0dXJhdGVcbi8vIDxjb21tb24+IG1heSBoYXZlIGRlZmluZWQgc2F0dXJhdGUoKSBhbHJlYWR5XG4jZGVmaW5lIHNhdHVyYXRlKCBhICkgY2xhbXAoIGEsIDAuMCwgMS4wIClcbiNlbmRpZlxuXG51bmlmb3JtIGZsb2F0IHRvbmVNYXBwaW5nRXhwb3N1cmU7XG5cbi8vIGV4cG9zdXJlIG9ubHlcbnZlYzMgTGluZWFyVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XG5cblx0cmV0dXJuIHNhdHVyYXRlKCB0b25lTWFwcGluZ0V4cG9zdXJlICogY29sb3IgKTtcblxufVxuXG4vLyBzb3VyY2U6IGh0dHBzOi8vd3d3LmNzLnV0YWguZWR1L2RvY3MvdGVjaHJlcG9ydHMvMjAwMi9wZGYvVVVDUy0wMi0wMDEucGRmXG52ZWMzIFJlaW5oYXJkVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XG5cblx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcblx0cmV0dXJuIHNhdHVyYXRlKCBjb2xvciAvICggdmVjMyggMS4wICkgKyBjb2xvciApICk7XG5cbn1cblxuLy8gc291cmNlOiBodHRwOi8vZmlsbWljd29ybGRzLmNvbS9ibG9nL2ZpbG1pYy10b25lbWFwcGluZy1vcGVyYXRvcnMvXG52ZWMzIE9wdGltaXplZENpbmVvblRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xuXG5cdC8vIG9wdGltaXplZCBmaWxtaWMgb3BlcmF0b3IgYnkgSmltIEhlamwgYW5kIFJpY2hhcmQgQnVyZ2Vzcy1EYXdzb25cblx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcblx0Y29sb3IgPSBtYXgoIHZlYzMoIDAuMCApLCBjb2xvciAtIDAuMDA0ICk7XG5cdHJldHVybiBwb3coICggY29sb3IgKiAoIDYuMiAqIGNvbG9yICsgMC41ICkgKSAvICggY29sb3IgKiAoIDYuMiAqIGNvbG9yICsgMS43ICkgKyAwLjA2ICksIHZlYzMoIDIuMiApICk7XG5cbn1cblxuLy8gc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vc2VsZnNoYWRvdy9sdGNfY29kZS9ibG9iL21hc3Rlci93ZWJnbC9zaGFkZXJzL2x0Yy9sdGNfYmxpdC5mc1xudmVjMyBSUlRBbmRPRFRGaXQoIHZlYzMgdiApIHtcblxuXHR2ZWMzIGEgPSB2ICogKCB2ICsgMC4wMjQ1Nzg2ICkgLSAwLjAwMDA5MDUzNztcblx0dmVjMyBiID0gdiAqICggMC45ODM3MjkgKiB2ICsgMC40MzI5NTEwICkgKyAwLjIzODA4MTtcblx0cmV0dXJuIGEgLyBiO1xuXG59XG5cbi8vIHRoaXMgaW1wbGVtZW50YXRpb24gb2YgQUNFUyBpcyBtb2RpZmllZCB0byBhY2NvbW1vZGF0ZSBhIGJyaWdodGVyIHZpZXdpbmcgZW52aXJvbm1lbnQuXG4vLyB0aGUgc2NhbGUgZmFjdG9yIG9mIDEvMC42IGlzIHN1YmplY3RpdmUuIHNlZSBkaXNjdXNzaW9uIGluICMxOTYyMS5cblxudmVjMyBBQ0VTRmlsbWljVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XG5cblx0Ly8gc1JHQiA9PiBYWVogPT4gRDY1XzJfRDYwID0+IEFQMSA9PiBSUlRfU0FUXG5cdGNvbnN0IG1hdDMgQUNFU0lucHV0TWF0ID0gbWF0Myhcblx0XHR2ZWMzKCAwLjU5NzE5LCAwLjA3NjAwLCAwLjAyODQwICksIC8vIHRyYW5zcG9zZWQgZnJvbSBzb3VyY2Vcblx0XHR2ZWMzKCAwLjM1NDU4LCAwLjkwODM0LCAwLjEzMzgzICksXG5cdFx0dmVjMyggMC4wNDgyMywgMC4wMTU2NiwgMC44Mzc3NyApXG5cdCk7XG5cblx0Ly8gT0RUX1NBVCA9PiBYWVogPT4gRDYwXzJfRDY1ID0+IHNSR0Jcblx0Y29uc3QgbWF0MyBBQ0VTT3V0cHV0TWF0ID0gbWF0Myhcblx0XHR2ZWMzKCAgMS42MDQ3NSwgLTAuMTAyMDgsIC0wLjAwMzI3ICksIC8vIHRyYW5zcG9zZWQgZnJvbSBzb3VyY2Vcblx0XHR2ZWMzKCAtMC41MzEwOCwgIDEuMTA4MTMsIC0wLjA3Mjc2ICksXG5cdFx0dmVjMyggLTAuMDczNjcsIC0wLjAwNjA1LCAgMS4wNzYwMiApXG5cdCk7XG5cblx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZSAvIDAuNjtcblxuXHRjb2xvciA9IEFDRVNJbnB1dE1hdCAqIGNvbG9yO1xuXG5cdC8vIEFwcGx5IFJSVCBhbmQgT0RUXG5cdGNvbG9yID0gUlJUQW5kT0RURml0KCBjb2xvciApO1xuXG5cdGNvbG9yID0gQUNFU091dHB1dE1hdCAqIGNvbG9yO1xuXG5cdC8vIENsYW1wIHRvIFswLCAxXVxuXHRyZXR1cm4gc2F0dXJhdGUoIGNvbG9yICk7XG5cbn1cblxuLy8gTWF0cmljZXMgZm9yIHJlYyAyMDIwIDw+IHJlYyA3MDkgY29sb3Igc3BhY2UgY29udmVyc2lvblxuLy8gbWF0cml4IHByb3ZpZGVkIGluIHJvdy1tYWpvciBvcmRlciBzbyBpdCBoYXMgYmVlbiB0cmFuc3Bvc2VkXG4vLyBodHRwczovL3d3dy5pdHUuaW50L3B1Yi9SLVJFUC1CVC4yNDA3LTIwMTdcbmNvbnN0IG1hdDMgTElORUFSX1JFQzIwMjBfVE9fTElORUFSX1NSR0IgPSBtYXQzKFxuXHR2ZWMzKCAxLjY2MDUsIC0gMC4xMjQ2LCAtIDAuMDE4MiApLFxuXHR2ZWMzKCAtIDAuNTg3NiwgMS4xMzI5LCAtIDAuMTAwNiApLFxuXHR2ZWMzKCAtIDAuMDcyOCwgLSAwLjAwODMsIDEuMTE4NyApXG4pO1xuXG5jb25zdCBtYXQzIExJTkVBUl9TUkdCX1RPX0xJTkVBUl9SRUMyMDIwID0gbWF0Myhcblx0dmVjMyggMC42Mjc0LCAwLjA2OTEsIDAuMDE2NCApLFxuXHR2ZWMzKCAwLjMyOTMsIDAuOTE5NSwgMC4wODgwICksXG5cdHZlYzMoIDAuMDQzMywgMC4wMTEzLCAwLjg5NTYgKVxuKTtcblxuLy8gaHR0cHM6Ly9pb2xpdGUtZW5naW5lLmNvbS9ibG9nX3Bvc3RzL21pbmltYWxfYWd4X2ltcGxlbWVudGF0aW9uXG4vLyBNZWFuIGVycm9yXjI6IDMuNjcwNTE0MWUtMDZcbnZlYzMgYWd4RGVmYXVsdENvbnRyYXN0QXBwcm94KCB2ZWMzIHggKSB7XG5cblx0dmVjMyB4MiA9IHggKiB4O1xuXHR2ZWMzIHg0ID0geDIgKiB4MjtcblxuXHRyZXR1cm4gKyAxNS41ICogeDQgKiB4MlxuXHRcdC0gNDAuMTQgKiB4NCAqIHhcblx0XHQrIDMxLjk2ICogeDRcblx0XHQtIDYuODY4ICogeDIgKiB4XG5cdFx0KyAwLjQyOTggKiB4MlxuXHRcdCsgMC4xMTkxICogeFxuXHRcdC0gMC4wMDIzMjtcblxufVxuXG4vLyBBZ1ggVG9uZSBNYXBwaW5nIGltcGxlbWVudGF0aW9uIGJhc2VkIG9uIEZpbGFtZW50LCB3aGljaCBpbiB0dXJuIGlzIGJhc2VkXG4vLyBvbiBCbGVuZGVyJ3MgaW1wbGVtZW50YXRpb24gdXNpbmcgcmVjIDIwMjAgcHJpbWFyaWVzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2ZpbGFtZW50L3B1bGwvNzIzNlxuLy8gSW5wdXRzIGFuZCBvdXRwdXRzIGFyZSBlbmNvZGVkIGFzIExpbmVhci1zUkdCLlxuXG52ZWMzIEFnWFRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xuXG5cdC8vIEFnWCBjb25zdGFudHNcblx0Y29uc3QgbWF0MyBBZ1hJbnNldE1hdHJpeCA9IG1hdDMoXG5cdFx0dmVjMyggMC44NTY2MjcxNTMzMTU5ODMsIDAuMTM3MzE4OTcyOTI5ODQ3LCAwLjExMTg5ODIxMjk5OTk1ICksXG5cdFx0dmVjMyggMC4wOTUxMjEyNDA1MzgxNTg4LCAwLjc2MTI0MTk5MDYwMjU5MSwgMC4wNzY3OTk0MTg2MDMxOTAzICksXG5cdFx0dmVjMyggMC4wNDgyNTE2MDYxNDU4NTgzLCAwLjEwMTQzOTAzNjQ2NzU2MiwgMC44MTEzMDIzNjgzOTY4NTkgKVxuXHQpO1xuXG5cdC8vIGV4cGxpY2l0IEFnWE91dHNldE1hdHJpeCBnZW5lcmF0ZWQgZnJvbSBGaWxhbWVudHMgQWdYT3V0c2V0TWF0cml4SW52XG5cdGNvbnN0IG1hdDMgQWdYT3V0c2V0TWF0cml4ID0gbWF0Myhcblx0XHR2ZWMzKCAxLjEyNzEwMDU4MTgxNDQzNjgsIC0gMC4xNDEzMjk3NjM0OTg0MzgzLCAtIDAuMTQxMzI5NzYzNDk4NDM4MjYgKSxcblx0XHR2ZWMzKCAtIDAuMTEwNjA2NjQzMDk2NjAzMjMsIDEuMTU3ODIzNzAyMjE2MjcyLCAtIDAuMTEwNjA2NjQzMDk2NjAyOTQgKSxcblx0XHR2ZWMzKCAtIDAuMDE2NDkzOTM4NzE3ODM0NTczLCAtIDAuMDE2NDkzOTM4NzE3ODM0MjU3LCAxLjI1MTkzNjQwNjU5NTA0MDUgKVxuXHQpO1xuXG5cdC8vIExPRzJfTUlOICAgICAgPSAtMTAuMFxuXHQvLyBMT0cyX01BWCAgICAgID0gICs2LjVcblx0Ly8gTUlERExFX0dSQVkgICA9ICAwLjE4XG5cdGNvbnN0IGZsb2F0IEFneE1pbkV2ID0gLSAxMi40NzM5MzsgIC8vIGxvZzIoIHBvdyggMiwgTE9HMl9NSU4gKSAqIE1JRERMRV9HUkFZIClcblx0Y29uc3QgZmxvYXQgQWd4TWF4RXYgPSA0LjAyNjA2OTsgICAgLy8gbG9nMiggcG93KCAyLCBMT0cyX01BWCApICogTUlERExFX0dSQVkgKVxuXG5cdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XG5cblx0Y29sb3IgPSBMSU5FQVJfU1JHQl9UT19MSU5FQVJfUkVDMjAyMCAqIGNvbG9yO1xuXG5cdGNvbG9yID0gQWdYSW5zZXRNYXRyaXggKiBjb2xvcjtcblxuXHQvLyBMb2cyIGVuY29kaW5nXG5cdGNvbG9yID0gbWF4KCBjb2xvciwgMWUtMTAgKTsgLy8gYXZvaWQgMCBvciBuZWdhdGl2ZSBudW1iZXJzIGZvciBsb2cyXG5cdGNvbG9yID0gbG9nMiggY29sb3IgKTtcblx0Y29sb3IgPSAoIGNvbG9yIC0gQWd4TWluRXYgKSAvICggQWd4TWF4RXYgLSBBZ3hNaW5FdiApO1xuXG5cdGNvbG9yID0gY2xhbXAoIGNvbG9yLCAwLjAsIDEuMCApO1xuXG5cdC8vIEFwcGx5IHNpZ21vaWRcblx0Y29sb3IgPSBhZ3hEZWZhdWx0Q29udHJhc3RBcHByb3goIGNvbG9yICk7XG5cblx0Ly8gQXBwbHkgQWdYIGxvb2tcblx0Ly8gdiA9IGFneExvb2sodiwgbG9vayk7XG5cblx0Y29sb3IgPSBBZ1hPdXRzZXRNYXRyaXggKiBjb2xvcjtcblxuXHQvLyBMaW5lYXJpemVcblx0Y29sb3IgPSBwb3coIG1heCggdmVjMyggMC4wICksIGNvbG9yICksIHZlYzMoIDIuMiApICk7XG5cblx0Y29sb3IgPSBMSU5FQVJfUkVDMjAyMF9UT19MSU5FQVJfU1JHQiAqIGNvbG9yO1xuXG5cdC8vIEdhbXV0IG1hcHBpbmcuIFNpbXBsZSBjbGFtcCBmb3Igbm93LlxuXHRjb2xvciA9IGNsYW1wKCBjb2xvciwgMC4wLCAxLjAgKTtcblxuXHRyZXR1cm4gY29sb3I7XG5cbn1cblxuLy8gaHR0cHM6Ly9tb2RlbHZpZXdlci5kZXYvZXhhbXBsZXMvdG9uZS1tYXBwaW5nXG5cbnZlYzMgTmV1dHJhbFRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xuXG5cdGNvbnN0IGZsb2F0IFN0YXJ0Q29tcHJlc3Npb24gPSAwLjggLSAwLjA0O1xuXHRjb25zdCBmbG9hdCBEZXNhdHVyYXRpb24gPSAwLjE1O1xuXG5cdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XG5cblx0ZmxvYXQgeCA9IG1pbiggY29sb3IuciwgbWluKCBjb2xvci5nLCBjb2xvci5iICkgKTtcblxuXHRmbG9hdCBvZmZzZXQgPSB4IDwgMC4wOCA/IHggLSA2LjI1ICogeCAqIHggOiAwLjA0O1xuXG5cdGNvbG9yIC09IG9mZnNldDtcblxuXHRmbG9hdCBwZWFrID0gbWF4KCBjb2xvci5yLCBtYXgoIGNvbG9yLmcsIGNvbG9yLmIgKSApO1xuXG5cdGlmICggcGVhayA8IFN0YXJ0Q29tcHJlc3Npb24gKSByZXR1cm4gY29sb3I7XG5cblx0ZmxvYXQgZCA9IDEuIC0gU3RhcnRDb21wcmVzc2lvbjtcblxuXHRmbG9hdCBuZXdQZWFrID0gMS4gLSBkICogZCAvICggcGVhayArIGQgLSBTdGFydENvbXByZXNzaW9uICk7XG5cblx0Y29sb3IgKj0gbmV3UGVhayAvIHBlYWs7XG5cblx0ZmxvYXQgZyA9IDEuIC0gMS4gLyAoIERlc2F0dXJhdGlvbiAqICggcGVhayAtIG5ld1BlYWsgKSArIDEuICk7XG5cblx0cmV0dXJuIG1peCggY29sb3IsIHZlYzMoIG5ld1BlYWsgKSwgZyApO1xuXG59XG5cbnZlYzMgQ3VzdG9tVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7IHJldHVybiBjb2xvcjsgfVxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxuXG5cdG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA9IHRyYW5zbWlzc2lvbjtcblx0bWF0ZXJpYWwudHJhbnNtaXNzaW9uQWxwaGEgPSAxLjA7XG5cdG1hdGVyaWFsLnRoaWNrbmVzcyA9IHRoaWNrbmVzcztcblx0bWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZSA9IGF0dGVudWF0aW9uRGlzdGFuY2U7XG5cdG1hdGVyaWFsLmF0dGVudWF0aW9uQ29sb3IgPSBhdHRlbnVhdGlvbkNvbG9yO1xuXG5cdCNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OTUFQXG5cblx0XHRtYXRlcmlhbC50cmFuc21pc3Npb24gKj0gdGV4dHVyZTJEKCB0cmFuc21pc3Npb25NYXAsIHZUcmFuc21pc3Npb25NYXBVdiApLnI7XG5cblx0I2VuZGlmXG5cblx0I2lmZGVmIFVTRV9USElDS05FU1NNQVBcblxuXHRcdG1hdGVyaWFsLnRoaWNrbmVzcyAqPSB0ZXh0dXJlMkQoIHRoaWNrbmVzc01hcCwgdlRoaWNrbmVzc01hcFV2ICkuZztcblxuXHQjZW5kaWZcblxuXHR2ZWMzIHBvcyA9IHZXb3JsZFBvc2l0aW9uO1xuXHR2ZWMzIHYgPSBub3JtYWxpemUoIGNhbWVyYVBvc2l0aW9uIC0gcG9zICk7XG5cdHZlYzMgbiA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xuXG5cdHZlYzQgdHJhbnNtaXR0ZWQgPSBnZXRJQkxWb2x1bWVSZWZyYWN0aW9uKFxuXHRcdG4sIHYsIG1hdGVyaWFsLnJvdWdobmVzcywgbWF0ZXJpYWwuZGlmZnVzZUNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckY5MCxcblx0XHRwb3MsIG1vZGVsTWF0cml4LCB2aWV3TWF0cml4LCBwcm9qZWN0aW9uTWF0cml4LCBtYXRlcmlhbC5kaXNwZXJzaW9uLCBtYXRlcmlhbC5pb3IsIG1hdGVyaWFsLnRoaWNrbmVzcyxcblx0XHRtYXRlcmlhbC5hdHRlbnVhdGlvbkNvbG9yLCBtYXRlcmlhbC5hdHRlbnVhdGlvbkRpc3RhbmNlICk7XG5cblx0bWF0ZXJpYWwudHJhbnNtaXNzaW9uQWxwaGEgPSBtaXgoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbkFscGhhLCB0cmFuc21pdHRlZC5hLCBtYXRlcmlhbC50cmFuc21pc3Npb24gKTtcblxuXHR0b3RhbERpZmZ1c2UgPSBtaXgoIHRvdGFsRGlmZnVzZSwgdHJhbnNtaXR0ZWQucmdiLCBtYXRlcmlhbC50cmFuc21pc3Npb24gKTtcblxuI2VuZGlmXG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXG5cblx0Ly8gVHJhbnNtaXNzaW9uIGNvZGUgaXMgYmFzZWQgb24gZ2xURi1TYW1wbGVyLVZpZXdlclxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYtU2FtcGxlLVZpZXdlclxuXG5cdHVuaWZvcm0gZmxvYXQgdHJhbnNtaXNzaW9uO1xuXHR1bmlmb3JtIGZsb2F0IHRoaWNrbmVzcztcblx0dW5pZm9ybSBmbG9hdCBhdHRlbnVhdGlvbkRpc3RhbmNlO1xuXHR1bmlmb3JtIHZlYzMgYXR0ZW51YXRpb25Db2xvcjtcblxuXHQjaWZkZWYgVVNFX1RSQU5TTUlTU0lPTk1BUFxuXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgdHJhbnNtaXNzaW9uTWFwO1xuXG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBVU0VfVEhJQ0tORVNTTUFQXG5cblx0XHR1bmlmb3JtIHNhbXBsZXIyRCB0aGlja25lc3NNYXA7XG5cblx0I2VuZGlmXG5cblx0dW5pZm9ybSB2ZWMyIHRyYW5zbWlzc2lvblNhbXBsZXJTaXplO1xuXHR1bmlmb3JtIHNhbXBsZXIyRCB0cmFuc21pc3Npb25TYW1wbGVyTWFwO1xuXG5cdHVuaWZvcm0gbWF0NCBtb2RlbE1hdHJpeDtcblx0dW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XG5cblx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xuXG5cdC8vIE1pcHBlZCBCaWN1YmljIFRleHR1cmUgRmlsdGVyaW5nIGJ5IE44XG5cdC8vIGh0dHBzOi8vd3d3LnNoYWRlcnRveS5jb20vdmlldy9EbDJTRFdcblxuXHRmbG9hdCB3MCggZmxvYXQgYSApIHtcblxuXHRcdHJldHVybiAoIDEuMCAvIDYuMCApICogKCBhICogKCBhICogKCAtIGEgKyAzLjAgKSAtIDMuMCApICsgMS4wICk7XG5cblx0fVxuXG5cdGZsb2F0IHcxKCBmbG9hdCBhICkge1xuXG5cdFx0cmV0dXJuICggMS4wIC8gNi4wICkgKiAoIGEgKiAgYSAqICggMy4wICogYSAtIDYuMCApICsgNC4wICk7XG5cblx0fVxuXG5cdGZsb2F0IHcyKCBmbG9hdCBhICl7XG5cblx0XHRyZXR1cm4gKCAxLjAgLyA2LjAgKSAqICggYSAqICggYSAqICggLSAzLjAgKiBhICsgMy4wICkgKyAzLjAgKSArIDEuMCApO1xuXG5cdH1cblxuXHRmbG9hdCB3MyggZmxvYXQgYSApIHtcblxuXHRcdHJldHVybiAoIDEuMCAvIDYuMCApICogKCBhICogYSAqIGEgKTtcblxuXHR9XG5cblx0Ly8gZzAgYW5kIGcxIGFyZSB0aGUgdHdvIGFtcGxpdHVkZSBmdW5jdGlvbnNcblx0ZmxvYXQgZzAoIGZsb2F0IGEgKSB7XG5cblx0XHRyZXR1cm4gdzAoIGEgKSArIHcxKCBhICk7XG5cblx0fVxuXG5cdGZsb2F0IGcxKCBmbG9hdCBhICkge1xuXG5cdFx0cmV0dXJuIHcyKCBhICkgKyB3MyggYSApO1xuXG5cdH1cblxuXHQvLyBoMCBhbmQgaDEgYXJlIHRoZSB0d28gb2Zmc2V0IGZ1bmN0aW9uc1xuXHRmbG9hdCBoMCggZmxvYXQgYSApIHtcblxuXHRcdHJldHVybiAtIDEuMCArIHcxKCBhICkgLyAoIHcwKCBhICkgKyB3MSggYSApICk7XG5cblx0fVxuXG5cdGZsb2F0IGgxKCBmbG9hdCBhICkge1xuXG5cdFx0cmV0dXJuIDEuMCArIHczKCBhICkgLyAoIHcyKCBhICkgKyB3MyggYSApICk7XG5cblx0fVxuXG5cdHZlYzQgYmljdWJpYyggc2FtcGxlcjJEIHRleCwgdmVjMiB1diwgdmVjNCB0ZXhlbFNpemUsIGZsb2F0IGxvZCApIHtcblxuXHRcdHV2ID0gdXYgKiB0ZXhlbFNpemUuencgKyAwLjU7XG5cblx0XHR2ZWMyIGl1diA9IGZsb29yKCB1diApO1xuXHRcdHZlYzIgZnV2ID0gZnJhY3QoIHV2ICk7XG5cblx0XHRmbG9hdCBnMHggPSBnMCggZnV2LnggKTtcblx0XHRmbG9hdCBnMXggPSBnMSggZnV2LnggKTtcblx0XHRmbG9hdCBoMHggPSBoMCggZnV2LnggKTtcblx0XHRmbG9hdCBoMXggPSBoMSggZnV2LnggKTtcblx0XHRmbG9hdCBoMHkgPSBoMCggZnV2LnkgKTtcblx0XHRmbG9hdCBoMXkgPSBoMSggZnV2LnkgKTtcblxuXHRcdHZlYzIgcDAgPSAoIHZlYzIoIGl1di54ICsgaDB4LCBpdXYueSArIGgweSApIC0gMC41ICkgKiB0ZXhlbFNpemUueHk7XG5cdFx0dmVjMiBwMSA9ICggdmVjMiggaXV2LnggKyBoMXgsIGl1di55ICsgaDB5ICkgLSAwLjUgKSAqIHRleGVsU2l6ZS54eTtcblx0XHR2ZWMyIHAyID0gKCB2ZWMyKCBpdXYueCArIGgweCwgaXV2LnkgKyBoMXkgKSAtIDAuNSApICogdGV4ZWxTaXplLnh5O1xuXHRcdHZlYzIgcDMgPSAoIHZlYzIoIGl1di54ICsgaDF4LCBpdXYueSArIGgxeSApIC0gMC41ICkgKiB0ZXhlbFNpemUueHk7XG5cblx0XHRyZXR1cm4gZzAoIGZ1di55ICkgKiAoIGcweCAqIHRleHR1cmVMb2QoIHRleCwgcDAsIGxvZCApICsgZzF4ICogdGV4dHVyZUxvZCggdGV4LCBwMSwgbG9kICkgKSArXG5cdFx0XHRnMSggZnV2LnkgKSAqICggZzB4ICogdGV4dHVyZUxvZCggdGV4LCBwMiwgbG9kICkgKyBnMXggKiB0ZXh0dXJlTG9kKCB0ZXgsIHAzLCBsb2QgKSApO1xuXG5cdH1cblxuXHR2ZWM0IHRleHR1cmVCaWN1YmljKCBzYW1wbGVyMkQgc2FtcGxlciwgdmVjMiB1diwgZmxvYXQgbG9kICkge1xuXG5cdFx0dmVjMiBmTG9kU2l6ZSA9IHZlYzIoIHRleHR1cmVTaXplKCBzYW1wbGVyLCBpbnQoIGxvZCApICkgKTtcblx0XHR2ZWMyIGNMb2RTaXplID0gdmVjMiggdGV4dHVyZVNpemUoIHNhbXBsZXIsIGludCggbG9kICsgMS4wICkgKSApO1xuXHRcdHZlYzIgZkxvZFNpemVJbnYgPSAxLjAgLyBmTG9kU2l6ZTtcblx0XHR2ZWMyIGNMb2RTaXplSW52ID0gMS4wIC8gY0xvZFNpemU7XG5cdFx0dmVjNCBmU2FtcGxlID0gYmljdWJpYyggc2FtcGxlciwgdXYsIHZlYzQoIGZMb2RTaXplSW52LCBmTG9kU2l6ZSApLCBmbG9vciggbG9kICkgKTtcblx0XHR2ZWM0IGNTYW1wbGUgPSBiaWN1YmljKCBzYW1wbGVyLCB1diwgdmVjNCggY0xvZFNpemVJbnYsIGNMb2RTaXplICksIGNlaWwoIGxvZCApICk7XG5cdFx0cmV0dXJuIG1peCggZlNhbXBsZSwgY1NhbXBsZSwgZnJhY3QoIGxvZCApICk7XG5cblx0fVxuXG5cdHZlYzMgZ2V0Vm9sdW1lVHJhbnNtaXNzaW9uUmF5KCBjb25zdCBpbiB2ZWMzIG4sIGNvbnN0IGluIHZlYzMgdiwgY29uc3QgaW4gZmxvYXQgdGhpY2tuZXNzLCBjb25zdCBpbiBmbG9hdCBpb3IsIGNvbnN0IGluIG1hdDQgbW9kZWxNYXRyaXggKSB7XG5cblx0XHQvLyBEaXJlY3Rpb24gb2YgcmVmcmFjdGVkIGxpZ2h0LlxuXHRcdHZlYzMgcmVmcmFjdGlvblZlY3RvciA9IHJlZnJhY3QoIC0gdiwgbm9ybWFsaXplKCBuICksIDEuMCAvIGlvciApO1xuXG5cdFx0Ly8gQ29tcHV0ZSByb3RhdGlvbi1pbmRlcGVuZGFudCBzY2FsaW5nIG9mIHRoZSBtb2RlbCBtYXRyaXguXG5cdFx0dmVjMyBtb2RlbFNjYWxlO1xuXHRcdG1vZGVsU2NhbGUueCA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDAgXS54eXogKSApO1xuXHRcdG1vZGVsU2NhbGUueSA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDEgXS54eXogKSApO1xuXHRcdG1vZGVsU2NhbGUueiA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDIgXS54eXogKSApO1xuXG5cdFx0Ly8gVGhlIHRoaWNrbmVzcyBpcyBzcGVjaWZpZWQgaW4gbG9jYWwgc3BhY2UuXG5cdFx0cmV0dXJuIG5vcm1hbGl6ZSggcmVmcmFjdGlvblZlY3RvciApICogdGhpY2tuZXNzICogbW9kZWxTY2FsZTtcblxuXHR9XG5cblx0ZmxvYXQgYXBwbHlJb3JUb1JvdWdobmVzcyggY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBmbG9hdCBpb3IgKSB7XG5cblx0XHQvLyBTY2FsZSByb3VnaG5lc3Mgd2l0aCBJT1Igc28gdGhhdCBhbiBJT1Igb2YgMS4wIHJlc3VsdHMgaW4gbm8gbWljcm9mYWNldCByZWZyYWN0aW9uIGFuZFxuXHRcdC8vIGFuIElPUiBvZiAxLjUgcmVzdWx0cyBpbiB0aGUgZGVmYXVsdCBhbW91bnQgb2YgbWljcm9mYWNldCByZWZyYWN0aW9uLlxuXHRcdHJldHVybiByb3VnaG5lc3MgKiBjbGFtcCggaW9yICogMi4wIC0gMi4wLCAwLjAsIDEuMCApO1xuXG5cdH1cblxuXHR2ZWM0IGdldFRyYW5zbWlzc2lvblNhbXBsZSggY29uc3QgaW4gdmVjMiBmcmFnQ29vcmQsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgY29uc3QgaW4gZmxvYXQgaW9yICkge1xuXG5cdFx0ZmxvYXQgbG9kID0gbG9nMiggdHJhbnNtaXNzaW9uU2FtcGxlclNpemUueCApICogYXBwbHlJb3JUb1JvdWdobmVzcyggcm91Z2huZXNzLCBpb3IgKTtcblx0XHRyZXR1cm4gdGV4dHVyZUJpY3ViaWMoIHRyYW5zbWlzc2lvblNhbXBsZXJNYXAsIGZyYWdDb29yZC54eSwgbG9kICk7XG5cblx0fVxuXG5cdHZlYzMgdm9sdW1lQXR0ZW51YXRpb24oIGNvbnN0IGluIGZsb2F0IHRyYW5zbWlzc2lvbkRpc3RhbmNlLCBjb25zdCBpbiB2ZWMzIGF0dGVudWF0aW9uQ29sb3IsIGNvbnN0IGluIGZsb2F0IGF0dGVudWF0aW9uRGlzdGFuY2UgKSB7XG5cblx0XHRpZiAoIGlzaW5mKCBhdHRlbnVhdGlvbkRpc3RhbmNlICkgKSB7XG5cblx0XHRcdC8vIEF0dGVudWF0aW9uIGRpc3RhbmNlIGlzICviiJ4sIGkuZS4gdGhlIHRyYW5zbWl0dGVkIGNvbG9yIGlzIG5vdCBhdHRlbnVhdGVkIGF0IGFsbC5cblx0XHRcdHJldHVybiB2ZWMzKCAxLjAgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbXB1dGUgbGlnaHQgYXR0ZW51YXRpb24gdXNpbmcgQmVlcidzIGxhdy5cblx0XHRcdHZlYzMgYXR0ZW51YXRpb25Db2VmZmljaWVudCA9IC1sb2coIGF0dGVudWF0aW9uQ29sb3IgKSAvIGF0dGVudWF0aW9uRGlzdGFuY2U7XG5cdFx0XHR2ZWMzIHRyYW5zbWl0dGFuY2UgPSBleHAoIC0gYXR0ZW51YXRpb25Db2VmZmljaWVudCAqIHRyYW5zbWlzc2lvbkRpc3RhbmNlICk7IC8vIEJlZXIncyBsYXdcblx0XHRcdHJldHVybiB0cmFuc21pdHRhbmNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR2ZWM0IGdldElCTFZvbHVtZVJlZnJhY3Rpb24oIGNvbnN0IGluIHZlYzMgbiwgY29uc3QgaW4gdmVjMyB2LCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIHZlYzMgZGlmZnVzZUNvbG9yLFxuXHRcdGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc3BlY3VsYXJGOTAsIGNvbnN0IGluIHZlYzMgcG9zaXRpb24sIGNvbnN0IGluIG1hdDQgbW9kZWxNYXRyaXgsXG5cdFx0Y29uc3QgaW4gbWF0NCB2aWV3TWF0cml4LCBjb25zdCBpbiBtYXQ0IHByb2pNYXRyaXgsIGNvbnN0IGluIGZsb2F0IGRpc3BlcnNpb24sIGNvbnN0IGluIGZsb2F0IGlvciwgY29uc3QgaW4gZmxvYXQgdGhpY2tuZXNzLFxuXHRcdGNvbnN0IGluIHZlYzMgYXR0ZW51YXRpb25Db2xvciwgY29uc3QgaW4gZmxvYXQgYXR0ZW51YXRpb25EaXN0YW5jZSApIHtcblxuXHRcdHZlYzQgdHJhbnNtaXR0ZWRMaWdodDtcblx0XHR2ZWMzIHRyYW5zbWl0dGFuY2U7XG5cblx0XHQjaWZkZWYgVVNFX0RJU1BFUlNJT05cblxuXHRcdFx0ZmxvYXQgaGFsZlNwcmVhZCA9ICggaW9yIC0gMS4wICkgKiAwLjAyNSAqIGRpc3BlcnNpb247XG5cdFx0XHR2ZWMzIGlvcnMgPSB2ZWMzKCBpb3IgLSBoYWxmU3ByZWFkLCBpb3IsIGlvciArIGhhbGZTcHJlYWQgKTtcblxuXHRcdFx0Zm9yICggaW50IGkgPSAwOyBpIDwgMzsgaSArKyApIHtcblxuXHRcdFx0XHR2ZWMzIHRyYW5zbWlzc2lvblJheSA9IGdldFZvbHVtZVRyYW5zbWlzc2lvblJheSggbiwgdiwgdGhpY2tuZXNzLCBpb3JzWyBpIF0sIG1vZGVsTWF0cml4ICk7XG5cdFx0XHRcdHZlYzMgcmVmcmFjdGVkUmF5RXhpdCA9IHBvc2l0aW9uICsgdHJhbnNtaXNzaW9uUmF5O1xuXHRcdFxuXHRcdFx0XHQvLyBQcm9qZWN0IHJlZnJhY3RlZCB2ZWN0b3Igb24gdGhlIGZyYW1lYnVmZmVyLCB3aGlsZSBtYXBwaW5nIHRvIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGVzLlxuXHRcdFx0XHR2ZWM0IG5kY1BvcyA9IHByb2pNYXRyaXggKiB2aWV3TWF0cml4ICogdmVjNCggcmVmcmFjdGVkUmF5RXhpdCwgMS4wICk7XG5cdFx0XHRcdHZlYzIgcmVmcmFjdGlvbkNvb3JkcyA9IG5kY1Bvcy54eSAvIG5kY1Bvcy53O1xuXHRcdFx0XHRyZWZyYWN0aW9uQ29vcmRzICs9IDEuMDtcblx0XHRcdFx0cmVmcmFjdGlvbkNvb3JkcyAvPSAyLjA7XG5cdFx0XG5cdFx0XHRcdC8vIFNhbXBsZSBmcmFtZWJ1ZmZlciB0byBnZXQgcGl4ZWwgdGhlIHJlZnJhY3RlZCByYXkgaGl0cy5cblx0XHRcdFx0dmVjNCB0cmFuc21pc3Npb25TYW1wbGUgPSBnZXRUcmFuc21pc3Npb25TYW1wbGUoIHJlZnJhY3Rpb25Db29yZHMsIHJvdWdobmVzcywgaW9yc1sgaSBdICk7XG5cdFx0XHRcdHRyYW5zbWl0dGVkTGlnaHRbIGkgXSA9IHRyYW5zbWlzc2lvblNhbXBsZVsgaSBdO1xuXHRcdFx0XHR0cmFuc21pdHRlZExpZ2h0LmEgKz0gdHJhbnNtaXNzaW9uU2FtcGxlLmE7XG5cblx0XHRcdFx0dHJhbnNtaXR0YW5jZVsgaSBdID0gZGlmZnVzZUNvbG9yWyBpIF0gKiB2b2x1bWVBdHRlbnVhdGlvbiggbGVuZ3RoKCB0cmFuc21pc3Npb25SYXkgKSwgYXR0ZW51YXRpb25Db2xvciwgYXR0ZW51YXRpb25EaXN0YW5jZSApWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0dHJhbnNtaXR0ZWRMaWdodC5hIC89IDMuMDtcblx0XHRcblx0XHQjZWxzZVxuXHRcdFxuXHRcdFx0dmVjMyB0cmFuc21pc3Npb25SYXkgPSBnZXRWb2x1bWVUcmFuc21pc3Npb25SYXkoIG4sIHYsIHRoaWNrbmVzcywgaW9yLCBtb2RlbE1hdHJpeCApO1xuXHRcdFx0dmVjMyByZWZyYWN0ZWRSYXlFeGl0ID0gcG9zaXRpb24gKyB0cmFuc21pc3Npb25SYXk7XG5cblx0XHRcdC8vIFByb2plY3QgcmVmcmFjdGVkIHZlY3RvciBvbiB0aGUgZnJhbWVidWZmZXIsIHdoaWxlIG1hcHBpbmcgdG8gbm9ybWFsaXplZCBkZXZpY2UgY29vcmRpbmF0ZXMuXG5cdFx0XHR2ZWM0IG5kY1BvcyA9IHByb2pNYXRyaXggKiB2aWV3TWF0cml4ICogdmVjNCggcmVmcmFjdGVkUmF5RXhpdCwgMS4wICk7XG5cdFx0XHR2ZWMyIHJlZnJhY3Rpb25Db29yZHMgPSBuZGNQb3MueHkgLyBuZGNQb3Mudztcblx0XHRcdHJlZnJhY3Rpb25Db29yZHMgKz0gMS4wO1xuXHRcdFx0cmVmcmFjdGlvbkNvb3JkcyAvPSAyLjA7XG5cblx0XHRcdC8vIFNhbXBsZSBmcmFtZWJ1ZmZlciB0byBnZXQgcGl4ZWwgdGhlIHJlZnJhY3RlZCByYXkgaGl0cy5cblx0XHRcdHRyYW5zbWl0dGVkTGlnaHQgPSBnZXRUcmFuc21pc3Npb25TYW1wbGUoIHJlZnJhY3Rpb25Db29yZHMsIHJvdWdobmVzcywgaW9yICk7XG5cdFx0XHR0cmFuc21pdHRhbmNlID0gZGlmZnVzZUNvbG9yICogdm9sdW1lQXR0ZW51YXRpb24oIGxlbmd0aCggdHJhbnNtaXNzaW9uUmF5ICksIGF0dGVudWF0aW9uQ29sb3IsIGF0dGVudWF0aW9uRGlzdGFuY2UgKTtcblx0XHRcblx0XHQjZW5kaWZcblxuXHRcdHZlYzMgYXR0ZW51YXRlZENvbG9yID0gdHJhbnNtaXR0YW5jZSAqIHRyYW5zbWl0dGVkTGlnaHQucmdiO1xuXG5cdFx0Ly8gR2V0IHRoZSBzcGVjdWxhciBjb21wb25lbnQuXG5cdFx0dmVjMyBGID0gRW52aXJvbm1lbnRCUkRGKCBuLCB2LCBzcGVjdWxhckNvbG9yLCBzcGVjdWxhckY5MCwgcm91Z2huZXNzICk7XG5cblx0XHQvLyBBcyBsZXNzIGxpZ2h0IGlzIHRyYW5zbWl0dGVkLCB0aGUgb3BhY2l0eSBzaG91bGQgYmUgaW5jcmVhc2VkLiBUaGlzIHNpbXBsZSBhcHByb3hpbWF0aW9uIGRvZXMgYSBkZWNlbnQgam9iIFxuXHRcdC8vIG9mIG1vZHVsYXRpbmcgYSBDU1MgYmFja2dyb3VuZCwgYW5kIGhhcyBubyBlZmZlY3Qgd2hlbiB0aGUgYnVmZmVyIGlzIG9wYXF1ZSwgZHVlIHRvIGEgc29saWQgb2JqZWN0IG9yIGNsZWFyIGNvbG9yLlxuXHRcdGZsb2F0IHRyYW5zbWl0dGFuY2VGYWN0b3IgPSAoIHRyYW5zbWl0dGFuY2UuciArIHRyYW5zbWl0dGFuY2UuZyArIHRyYW5zbWl0dGFuY2UuYiApIC8gMy4wO1xuXG5cdFx0cmV0dXJuIHZlYzQoICggMS4wIC0gRiApICogYXR0ZW51YXRlZENvbG9yLCAxLjAgLSAoIDEuMCAtIHRyYW5zbWl0dGVkTGlnaHQuYSApICogdHJhbnNtaXR0YW5jZUZhY3RvciApO1xuXG5cdH1cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IC8qIGdsc2wgKi9gXG4jaWYgZGVmaW5lZCggVVNFX1VWICkgfHwgZGVmaW5lZCggVVNFX0FOSVNPVFJPUFkgKVxuXG5cdHZhcnlpbmcgdmVjMiB2VXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9NQVBcblxuXHR2YXJ5aW5nIHZlYzIgdk1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfQUxQSEFNQVBcblxuXHR2YXJ5aW5nIHZlYzIgdkFscGhhTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9MSUdIVE1BUFxuXG5cdHZhcnlpbmcgdmVjMiB2TGlnaHRNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0FPTUFQXG5cblx0dmFyeWluZyB2ZWMyIHZBb01hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfQlVNUE1BUFxuXG5cdHZhcnlpbmcgdmVjMiB2QnVtcE1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfTk9STUFMTUFQXG5cblx0dmFyeWluZyB2ZWMyIHZOb3JtYWxNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0VNSVNTSVZFTUFQXG5cblx0dmFyeWluZyB2ZWMyIHZFbWlzc2l2ZU1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXG5cblx0dmFyeWluZyB2ZWMyIHZNZXRhbG5lc3NNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxuXG5cdHZhcnlpbmcgdmVjMiB2Um91Z2huZXNzTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9BTklTT1RST1BZTUFQXG5cblx0dmFyeWluZyB2ZWMyIHZBbmlzb3Ryb3B5TWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRNQVBcblxuXHR2YXJ5aW5nIHZlYzIgdkNsZWFyY29hdE1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxuXG5cdHZhcnlpbmcgdmVjMiB2Q2xlYXJjb2F0Tm9ybWFsTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQXG5cblx0dmFyeWluZyB2ZWMyIHZDbGVhcmNvYXRSb3VnaG5lc3NNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFTUFQXG5cblx0dmFyeWluZyB2ZWMyIHZJcmlkZXNjZW5jZU1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQXG5cblx0dmFyeWluZyB2ZWMyIHZJcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfU0hFRU5fQ09MT1JNQVBcblxuXHR2YXJ5aW5nIHZlYzIgdlNoZWVuQ29sb3JNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX1NIRUVOX1JPVUdITkVTU01BUFxuXG5cdHZhcnlpbmcgdmVjMiB2U2hlZW5Sb3VnaG5lc3NNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXG5cblx0dmFyeWluZyB2ZWMyIHZTcGVjdWxhck1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfU1BFQ1VMQVJfQ09MT1JNQVBcblxuXHR2YXJ5aW5nIHZlYzIgdlNwZWN1bGFyQ29sb3JNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxuXG5cdHZhcnlpbmcgdmVjMiB2U3BlY3VsYXJJbnRlbnNpdHlNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTk1BUFxuXG5cdHVuaWZvcm0gbWF0MyB0cmFuc21pc3Npb25NYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2VHJhbnNtaXNzaW9uTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9USElDS05FU1NNQVBcblxuXHR1bmlmb3JtIG1hdDMgdGhpY2tuZXNzTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdlRoaWNrbmVzc01hcFV2O1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIGRlZmluZWQoIFVTRV9VViApIHx8IGRlZmluZWQoIFVTRV9BTklTT1RST1BZIClcblxuXHR2YXJ5aW5nIHZlYzIgdlV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfTUFQXG5cblx0dW5pZm9ybSBtYXQzIG1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0FMUEhBTUFQXG5cblx0dW5pZm9ybSBtYXQzIGFscGhhTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdkFscGhhTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9MSUdIVE1BUFxuXG5cdHVuaWZvcm0gbWF0MyBsaWdodE1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZMaWdodE1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfQU9NQVBcblxuXHR1bmlmb3JtIG1hdDMgYW9NYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2QW9NYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0JVTVBNQVBcblxuXHR1bmlmb3JtIG1hdDMgYnVtcE1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZCdW1wTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9OT1JNQUxNQVBcblxuXHR1bmlmb3JtIG1hdDMgbm9ybWFsTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdk5vcm1hbE1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXG5cblx0dW5pZm9ybSBtYXQzIGRpc3BsYWNlbWVudE1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZEaXNwbGFjZW1lbnRNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0VNSVNTSVZFTUFQXG5cblx0dW5pZm9ybSBtYXQzIGVtaXNzaXZlTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdkVtaXNzaXZlTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcblxuXHR1bmlmb3JtIG1hdDMgbWV0YWxuZXNzTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdk1ldGFsbmVzc01hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXG5cblx0dW5pZm9ybSBtYXQzIHJvdWdobmVzc01hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZSb3VnaG5lc3NNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0FOSVNPVFJPUFlNQVBcblxuXHR1bmlmb3JtIG1hdDMgYW5pc290cm9weU1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZBbmlzb3Ryb3B5TWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRNQVBcblxuXHR1bmlmb3JtIG1hdDMgY2xlYXJjb2F0TWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdkNsZWFyY29hdE1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxuXG5cdHVuaWZvcm0gbWF0MyBjbGVhcmNvYXROb3JtYWxNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2Q2xlYXJjb2F0Tm9ybWFsTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQXG5cblx0dW5pZm9ybSBtYXQzIGNsZWFyY29hdFJvdWdobmVzc01hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZDbGVhcmNvYXRSb3VnaG5lc3NNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX1NIRUVOX0NPTE9STUFQXG5cblx0dW5pZm9ybSBtYXQzIHNoZWVuQ29sb3JNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2U2hlZW5Db2xvck1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfU0hFRU5fUk9VR0hORVNTTUFQXG5cblx0dW5pZm9ybSBtYXQzIHNoZWVuUm91Z2huZXNzTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdlNoZWVuUm91Z2huZXNzTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9JUklERVNDRU5DRU1BUFxuXG5cdHVuaWZvcm0gbWF0MyBpcmlkZXNjZW5jZU1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZJcmlkZXNjZW5jZU1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQXG5cblx0dW5pZm9ybSBtYXQzIGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdklyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxuXG5cdHVuaWZvcm0gbWF0MyBzcGVjdWxhck1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZTcGVjdWxhck1hcFV2O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfU1BFQ1VMQVJfQ09MT1JNQVBcblxuXHR1bmlmb3JtIG1hdDMgc3BlY3VsYXJDb2xvck1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZTcGVjdWxhckNvbG9yTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9TUEVDVUxBUl9JTlRFTlNJVFlNQVBcblxuXHR1bmlmb3JtIG1hdDMgc3BlY3VsYXJJbnRlbnNpdHlNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2U3BlY3VsYXJJbnRlbnNpdHlNYXBVdjtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTk1BUFxuXG5cdHVuaWZvcm0gbWF0MyB0cmFuc21pc3Npb25NYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2VHJhbnNtaXNzaW9uTWFwVXY7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9USElDS05FU1NNQVBcblxuXHR1bmlmb3JtIG1hdDMgdGhpY2tuZXNzTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdlRoaWNrbmVzc01hcFV2O1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIGRlZmluZWQoIFVTRV9VViApIHx8IGRlZmluZWQoIFVTRV9BTklTT1RST1BZIClcblxuXHR2VXYgPSB2ZWMzKCB1diwgMSApLnh5O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfTUFQXG5cblx0dk1hcFV2ID0gKCBtYXBUcmFuc2Zvcm0gKiB2ZWMzKCBNQVBfVVYsIDEgKSApLnh5O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfQUxQSEFNQVBcblxuXHR2QWxwaGFNYXBVdiA9ICggYWxwaGFNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBBTFBIQU1BUF9VViwgMSApICkueHk7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9MSUdIVE1BUFxuXG5cdHZMaWdodE1hcFV2ID0gKCBsaWdodE1hcFRyYW5zZm9ybSAqIHZlYzMoIExJR0hUTUFQX1VWLCAxICkgKS54eTtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0FPTUFQXG5cblx0dkFvTWFwVXYgPSAoIGFvTWFwVHJhbnNmb3JtICogdmVjMyggQU9NQVBfVVYsIDEgKSApLnh5O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfQlVNUE1BUFxuXG5cdHZCdW1wTWFwVXYgPSAoIGJ1bXBNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBCVU1QTUFQX1VWLCAxICkgKS54eTtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX05PUk1BTE1BUFxuXG5cdHZOb3JtYWxNYXBVdiA9ICggbm9ybWFsTWFwVHJhbnNmb3JtICogdmVjMyggTk9STUFMTUFQX1VWLCAxICkgKS54eTtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxuXG5cdHZEaXNwbGFjZW1lbnRNYXBVdiA9ICggZGlzcGxhY2VtZW50TWFwVHJhbnNmb3JtICogdmVjMyggRElTUExBQ0VNRU5UTUFQX1VWLCAxICkgKS54eTtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0VNSVNTSVZFTUFQXG5cblx0dkVtaXNzaXZlTWFwVXYgPSAoIGVtaXNzaXZlTWFwVHJhbnNmb3JtICogdmVjMyggRU1JU1NJVkVNQVBfVVYsIDEgKSApLnh5O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXG5cblx0dk1ldGFsbmVzc01hcFV2ID0gKCBtZXRhbG5lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBNRVRBTE5FU1NNQVBfVVYsIDEgKSApLnh5O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXG5cblx0dlJvdWdobmVzc01hcFV2ID0gKCByb3VnaG5lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBST1VHSE5FU1NNQVBfVVYsIDEgKSApLnh5O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfQU5JU09UUk9QWU1BUFxuXG5cdHZBbmlzb3Ryb3B5TWFwVXYgPSAoIGFuaXNvdHJvcHlNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBBTklTT1RST1BZTUFQX1VWLCAxICkgKS54eTtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0NMRUFSQ09BVE1BUFxuXG5cdHZDbGVhcmNvYXRNYXBVdiA9ICggY2xlYXJjb2F0TWFwVHJhbnNmb3JtICogdmVjMyggQ0xFQVJDT0FUTUFQX1VWLCAxICkgKS54eTtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcblxuXHR2Q2xlYXJjb2F0Tm9ybWFsTWFwVXYgPSAoIGNsZWFyY29hdE5vcm1hbE1hcFRyYW5zZm9ybSAqIHZlYzMoIENMRUFSQ09BVF9OT1JNQUxNQVBfVVYsIDEgKSApLnh5O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUFxuXG5cdHZDbGVhcmNvYXRSb3VnaG5lc3NNYXBVdiA9ICggY2xlYXJjb2F0Um91Z2huZXNzTWFwVHJhbnNmb3JtICogdmVjMyggQ0xFQVJDT0FUX1JPVUdITkVTU01BUF9VViwgMSApICkueHk7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9JUklERVNDRU5DRU1BUFxuXG5cdHZJcmlkZXNjZW5jZU1hcFV2ID0gKCBpcmlkZXNjZW5jZU1hcFRyYW5zZm9ybSAqIHZlYzMoIElSSURFU0NFTkNFTUFQX1VWLCAxICkgKS54eTtcblxuI2VuZGlmXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUFxuXG5cdHZJcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2ID0gKCBpcmlkZXNjZW5jZVRoaWNrbmVzc01hcFRyYW5zZm9ybSAqIHZlYzMoIElSSURFU0NFTkNFX1RISUNLTkVTU01BUF9VViwgMSApICkueHk7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9TSEVFTl9DT0xPUk1BUFxuXG5cdHZTaGVlbkNvbG9yTWFwVXYgPSAoIHNoZWVuQ29sb3JNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTSEVFTl9DT0xPUk1BUF9VViwgMSApICkueHk7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9TSEVFTl9ST1VHSE5FU1NNQVBcblxuXHR2U2hlZW5Sb3VnaG5lc3NNYXBVdiA9ICggc2hlZW5Sb3VnaG5lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTSEVFTl9ST1VHSE5FU1NNQVBfVVYsIDEgKSApLnh5O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcblxuXHR2U3BlY3VsYXJNYXBVdiA9ICggc3BlY3VsYXJNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTUEVDVUxBUk1BUF9VViwgMSApICkueHk7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9TUEVDVUxBUl9DT0xPUk1BUFxuXG5cdHZTcGVjdWxhckNvbG9yTWFwVXYgPSAoIHNwZWN1bGFyQ29sb3JNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTUEVDVUxBUl9DT0xPUk1BUF9VViwgMSApICkueHk7XG5cbiNlbmRpZlxuI2lmZGVmIFVTRV9TUEVDVUxBUl9JTlRFTlNJVFlNQVBcblxuXHR2U3BlY3VsYXJJbnRlbnNpdHlNYXBVdiA9ICggc3BlY3VsYXJJbnRlbnNpdHlNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTUEVDVUxBUl9JTlRFTlNJVFlNQVBfVVYsIDEgKSApLnh5O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OTUFQXG5cblx0dlRyYW5zbWlzc2lvbk1hcFV2ID0gKCB0cmFuc21pc3Npb25NYXBUcmFuc2Zvcm0gKiB2ZWMzKCBUUkFOU01JU1NJT05NQVBfVVYsIDEgKSApLnh5O1xuXG4jZW5kaWZcbiNpZmRlZiBVU0VfVEhJQ0tORVNTTUFQXG5cblx0dlRoaWNrbmVzc01hcFV2ID0gKCB0aGlja25lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBUSElDS05FU1NNQVBfVVYsIDEgKSApLnh5O1xuXG4jZW5kaWZcbmA7XG4iLCJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSB8fCBkZWZpbmVkKCBESVNUQU5DRSApIHx8IGRlZmluZWQgKCBVU0VfU0hBRE9XTUFQICkgfHwgZGVmaW5lZCAoIFVTRV9UUkFOU01JU1NJT04gKSB8fCBOVU1fU1BPVF9MSUdIVF9DT09SRFMgPiAwXG5cblx0dmVjNCB3b3JsZFBvc2l0aW9uID0gdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xuXG5cdCNpZmRlZiBVU0VfQkFUQ0hJTkdcblxuXHRcdHdvcmxkUG9zaXRpb24gPSBiYXRjaGluZ01hdHJpeCAqIHdvcmxkUG9zaXRpb247XG5cblx0I2VuZGlmXG5cblx0I2lmZGVmIFVTRV9JTlNUQU5DSU5HXG5cblx0XHR3b3JsZFBvc2l0aW9uID0gaW5zdGFuY2VNYXRyaXggKiB3b3JsZFBvc2l0aW9uO1xuXG5cdCNlbmRpZlxuXG5cdHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHdvcmxkUG9zaXRpb247XG5cbiNlbmRpZlxuYDtcbiIsImV4cG9ydCBjb25zdCB2ZXJ0ZXggPSAvKiBnbHNsICovYFxudmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcblxuI2luY2x1ZGUgPGNvbW1vbj5cblxudm9pZCBtYWluKCkge1xuXG5cdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XG5cblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXG5cdGdsX1Bvc2l0aW9uLnogPSBnbF9Qb3NpdGlvbi53OyAvLyBzZXQgeiB0byBjYW1lcmEuZmFyXG5cbn1cbmA7XG5cbmV4cG9ydCBjb25zdCBmcmFnbWVudCA9IC8qIGdsc2wgKi9gXG5cbiNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXG5cblx0dW5pZm9ybSBzYW1wbGVyQ3ViZSBlbnZNYXA7XG5cbiNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxuXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcblxuI2VuZGlmXG5cbnVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcbnVuaWZvcm0gZmxvYXQgYmFja2dyb3VuZEJsdXJyaW5lc3M7XG51bmlmb3JtIGZsb2F0IGJhY2tncm91bmRJbnRlbnNpdHk7XG51bmlmb3JtIG1hdDMgYmFja2dyb3VuZFJvdGF0aW9uO1xuXG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xuXG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxuXG52b2lkIG1haW4oKSB7XG5cblx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcblxuXHRcdHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBiYWNrZ3JvdW5kUm90YXRpb24gKiB2ZWMzKCBmbGlwRW52TWFwICogdldvcmxkRGlyZWN0aW9uLngsIHZXb3JsZERpcmVjdGlvbi55eiApICk7XG5cblx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXG5cblx0XHR2ZWM0IHRleENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBiYWNrZ3JvdW5kUm90YXRpb24gKiB2V29ybGREaXJlY3Rpb24sIGJhY2tncm91bmRCbHVycmluZXNzICk7XG5cblx0I2Vsc2VcblxuXHRcdHZlYzQgdGV4Q29sb3IgPSB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKTtcblxuXHQjZW5kaWZcblxuXHR0ZXhDb2xvci5yZ2IgKj0gYmFja2dyb3VuZEludGVuc2l0eTtcblxuXHRnbF9GcmFnQ29sb3IgPSB0ZXhDb2xvcjtcblxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXG59XG5gO1xuIiwiZXhwb3J0IGNvbnN0IHZlcnRleCA9IC8qIGdsc2wgKi9gXG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xuXG4jaW5jbHVkZSA8Y29tbW9uPlxuXG52b2lkIG1haW4oKSB7XG5cblx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcblxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cblx0Z2xfUG9zaXRpb24ueiA9IGdsX1Bvc2l0aW9uLnc7IC8vIHNldCB6IHRvIGNhbWVyYS5mYXJcblxufVxuYDtcblxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogZ2xzbCAqL2BcbnVuaWZvcm0gc2FtcGxlckN1YmUgdEN1YmU7XG51bmlmb3JtIGZsb2F0IHRGbGlwO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuXG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xuXG52b2lkIG1haW4oKSB7XG5cblx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmVDdWJlKCB0Q3ViZSwgdmVjMyggdEZsaXAgKiB2V29ybGREaXJlY3Rpb24ueCwgdldvcmxkRGlyZWN0aW9uLnl6ICkgKTtcblxuXHRnbF9GcmFnQ29sb3IgPSB0ZXhDb2xvcjtcblx0Z2xfRnJhZ0NvbG9yLmEgKj0gb3BhY2l0eTtcblxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXG59XG5gO1xuIiwiZXhwb3J0IGNvbnN0IHZlcnRleCA9IC8qIGdsc2wgKi9gXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG5cbi8vIFRoaXMgaXMgdXNlZCBmb3IgY29tcHV0aW5nIGFuIGVxdWl2YWxlbnQgb2YgZ2xfRnJhZ0Nvb3JkLnogdGhhdCBpcyBhcyBoaWdoIHByZWNpc2lvbiBhcyBwb3NzaWJsZS5cbi8vIFNvbWUgcGxhdGZvcm1zIGNvbXB1dGUgZ2xfRnJhZ0Nvb3JkIGF0IGEgbG93ZXIgcHJlY2lzaW9uIHdoaWNoIG1ha2VzIHRoZSBtYW51YWxseSBjb21wdXRlZCB2YWx1ZSBiZXR0ZXIgZm9yXG4vLyBkZXB0aC1iYXNlZCBwb3N0cHJvY2Vzc2luZyBlZmZlY3RzLiBSZXByb2R1Y2VkIG9uIGlQYWQgd2l0aCBBMTAgcHJvY2Vzc29yIC8gaVBhZE9TIDEzLjMuMS5cbnZhcnlpbmcgdmVjMiB2SGlnaFByZWNpc2lvblpXO1xuXG52b2lkIG1haW4oKSB7XG5cblx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cblxuXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXG5cdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cblxuXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxuXG5cdFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0XHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHRcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cblxuXHQjZW5kaWZcblxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblxuXHR2SGlnaFByZWNpc2lvblpXID0gZ2xfUG9zaXRpb24uenc7XG5cbn1cbmA7XG5cbmV4cG9ydCBjb25zdCBmcmFnbWVudCA9IC8qIGdsc2wgKi9gXG4jaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXG5cblx0dW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuXG4jZW5kaWZcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxuXG52YXJ5aW5nIHZlYzIgdkhpZ2hQcmVjaXNpb25aVztcblxudm9pZCBtYWluKCkge1xuXG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cblx0I2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxuXG5cdFx0ZGlmZnVzZUNvbG9yLmEgPSBvcGFjaXR5O1xuXG5cdCNlbmRpZlxuXG5cdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cblxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XG5cblx0Ly8gSGlnaGVyIHByZWNpc2lvbiBlcXVpdmFsZW50IG9mIGdsX0ZyYWdDb29yZC56LiBUaGlzIGFzc3VtZXMgZGVwdGhSYW5nZSBoYXMgYmVlbiBsZWZ0IHRvIGl0cyBkZWZhdWx0IHZhbHVlcy5cblx0ZmxvYXQgZnJhZ0Nvb3JkWiA9IDAuNSAqIHZIaWdoUHJlY2lzaW9uWldbMF0gLyB2SGlnaFByZWNpc2lvblpXWzFdICsgMC41O1xuXG5cdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcblxuXHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHZlYzMoIDEuMCAtIGZyYWdDb29yZFogKSwgb3BhY2l0eSApO1xuXG5cdCNlbGlmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMVxuXG5cdFx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBmcmFnQ29vcmRaICk7XG5cblx0I2VuZGlmXG5cbn1cbmA7XG4iLCJleHBvcnQgY29uc3QgdmVydGV4ID0gLyogZ2xzbCAqL2BcbiNkZWZpbmUgRElTVEFOQ0VcblxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xuXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG5cbnZvaWQgbWFpbigpIHtcblxuXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxuXG5cdCNpbmNsdWRlIDxiYXRjaGluZ192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cblx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxuXG5cdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXG5cblx0XHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHRcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XG5cdFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxuXG5cdCNlbmRpZlxuXG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXG5cdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XG5cbn1cbmA7XG5cbmV4cG9ydCBjb25zdCBmcmFnbWVudCA9IC8qIGdsc2wgKi9gXG4jZGVmaW5lIERJU1RBTkNFXG5cbnVuaWZvcm0gdmVjMyByZWZlcmVuY2VQb3NpdGlvbjtcbnVuaWZvcm0gZmxvYXQgbmVhckRpc3RhbmNlO1xudW5pZm9ybSBmbG9hdCBmYXJEaXN0YW5jZTtcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cblxudm9pZCBtYWluICgpIHtcblxuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXG5cdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cblxuXHRmbG9hdCBkaXN0ID0gbGVuZ3RoKCB2V29ybGRQb3NpdGlvbiAtIHJlZmVyZW5jZVBvc2l0aW9uICk7XG5cdGRpc3QgPSAoIGRpc3QgLSBuZWFyRGlzdGFuY2UgKSAvICggZmFyRGlzdGFuY2UgLSBuZWFyRGlzdGFuY2UgKTtcblx0ZGlzdCA9IHNhdHVyYXRlKCBkaXN0ICk7IC8vIGNsYW1wIHRvIFsgMCwgMSBdXG5cblx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBkaXN0ICk7XG5cbn1cbmA7XG4iLCJleHBvcnQgY29uc3QgdmVydGV4ID0gLyogZ2xzbCAqL2BcbnZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XG5cbiNpbmNsdWRlIDxjb21tb24+XG5cbnZvaWQgbWFpbigpIHtcblxuXHR2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xuXG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblxufVxuYDtcblxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogZ2xzbCAqL2BcbnVuaWZvcm0gc2FtcGxlcjJEIHRFcXVpcmVjdDtcblxudmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcblxuI2luY2x1ZGUgPGNvbW1vbj5cblxudm9pZCBtYWluKCkge1xuXG5cdHZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGREaXJlY3Rpb24gKTtcblxuXHR2ZWMyIHNhbXBsZVVWID0gZXF1aXJlY3RVdiggZGlyZWN0aW9uICk7XG5cblx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCB0RXF1aXJlY3QsIHNhbXBsZVVWICk7XG5cblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cblxufVxuYDtcbiIsImV4cG9ydCBjb25zdCB2ZXJ0ZXggPSAvKiBnbHNsICovYFxudW5pZm9ybSBmbG9hdCBzY2FsZTtcbmF0dHJpYnV0ZSBmbG9hdCBsaW5lRGlzdGFuY2U7XG5cbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxuXG52b2lkIG1haW4oKSB7XG5cblx0dkxpbmVEaXN0YW5jZSA9IHNjYWxlICogbGluZURpc3RhbmNlO1xuXG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cblxufVxuYDtcblxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogZ2xzbCAqL2BcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuXG51bmlmb3JtIGZsb2F0IGRhc2hTaXplO1xudW5pZm9ybSBmbG9hdCB0b3RhbFNpemU7XG5cbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cblxudm9pZCBtYWluKCkge1xuXG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXG5cdGlmICggbW9kKCB2TGluZURpc3RhbmNlLCB0b3RhbFNpemUgKSA+IGRhc2hTaXplICkge1xuXG5cdFx0ZGlzY2FyZDtcblxuXHR9XG5cblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XG5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cblx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7IC8vIHNpbXBsZSBzaGFkZXJcblxuXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblxufVxuYDtcbiIsImV4cG9ydCBjb25zdCB2ZXJ0ZXggPSAvKiBnbHNsICovYFxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cblxudm9pZCBtYWluKCkge1xuXG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxuXG5cdCNpZiBkZWZpbmVkICggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQgKCBVU0VfU0tJTk5JTkcgKVxuXG5cdFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0XHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHRcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cdFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxuXHRcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cblxuXHQjZW5kaWZcblxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cblxufVxuYDtcblxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogZ2xzbCAqL2BcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuXG4jaWZuZGVmIEZMQVRfU0hBREVEXG5cblx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XG5cbiNlbmRpZlxuXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxuXG52b2lkIG1haW4oKSB7XG5cblx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxuXG5cdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XG5cblx0Ly8gYWNjdW11bGF0aW9uIChiYWtlZCBpbmRpcmVjdCBsaWdodGluZyBvbmx5KVxuXHQjaWZkZWYgVVNFX0xJR0hUTUFQXG5cblx0XHR2ZWM0IGxpZ2h0TWFwVGV4ZWwgPSB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2TGlnaHRNYXBVdiApO1xuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBsaWdodE1hcFRleGVsLnJnYiAqIGxpZ2h0TWFwSW50ZW5zaXR5ICogUkVDSVBST0NBTF9QSTtcblxuXHQjZWxzZVxuXG5cdFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IHZlYzMoIDEuMCApO1xuXG5cdCNlbmRpZlxuXG5cdC8vIG1vZHVsYXRpb25cblx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxuXG5cdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBkaWZmdXNlQ29sb3IucmdiO1xuXG5cdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcblxuXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxuXG5cdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50PlxuXG59XG5gO1xuIiwiZXhwb3J0IGNvbnN0IHZlcnRleCA9IC8qIGdsc2wgKi9gXG4jZGVmaW5lIExBTUJFUlRcblxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG5cbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8YmF0Y2hpbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG5cbnZvaWQgbWFpbigpIHtcblxuXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblxuXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XG5cblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG5cblx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XG5cblx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cblx0I2luY2x1ZGUgPGVudm1hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cblxufVxuYDtcblxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogZ2xzbCAqL2BcbiNkZWZpbmUgTEFNQkVSVFxuXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxic2Rmcz5cbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodHNfbGFtYmVydF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG5cbnZvaWQgbWFpbigpIHtcblxuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblxuXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xuXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xuXG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxuXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XG5cblx0Ly8gYWNjdW11bGF0aW9uXG5cdCNpbmNsdWRlIDxsaWdodHNfbGFtYmVydF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxuXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2VuZD5cblxuXHQvLyBtb2R1bGF0aW9uXG5cdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cblxuXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xuXG5cdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50PlxuXG59XG5gO1xuIiwiZXhwb3J0IGNvbnN0IHZlcnRleCA9IC8qIGdsc2wgKi9gXG4jZGVmaW5lIE1BVENBUFxuXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cblxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cblxudm9pZCBtYWluKCkge1xuXG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxuXG5cdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cblxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cblxuXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcblxufVxuYDtcblxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogZ2xzbCAqL2BcbiNkZWZpbmUgTUFUQ0FQXG5cbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xudW5pZm9ybSBzYW1wbGVyMkQgbWF0Y2FwO1xuXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cblxudm9pZCBtYWluKCkge1xuXG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XG5cdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cblxuXHR2ZWMzIHZpZXdEaXIgPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcblx0dmVjMyB4ID0gbm9ybWFsaXplKCB2ZWMzKCB2aWV3RGlyLnosIDAuMCwgLSB2aWV3RGlyLnggKSApO1xuXHR2ZWMzIHkgPSBjcm9zcyggdmlld0RpciwgeCApO1xuXHR2ZWMyIHV2ID0gdmVjMiggZG90KCB4LCBub3JtYWwgKSwgZG90KCB5LCBub3JtYWwgKSApICogMC40OTUgKyAwLjU7IC8vIDAuNDk1IHRvIHJlbW92ZSBhcnRpZmFjdHMgY2F1c2VkIGJ5IHVuZGVyc2l6ZWQgbWF0Y2FwIGRpc2tzXG5cblx0I2lmZGVmIFVTRV9NQVRDQVBcblxuXHRcdHZlYzQgbWF0Y2FwQ29sb3IgPSB0ZXh0dXJlMkQoIG1hdGNhcCwgdXYgKTtcblxuXHQjZWxzZVxuXG5cdFx0dmVjNCBtYXRjYXBDb2xvciA9IHZlYzQoIHZlYzMoIG1peCggMC4yLCAwLjgsIHV2LnkgKSApLCAxLjAgKTsgLy8gZGVmYXVsdCBpZiBtYXRjYXAgaXMgbWlzc2luZ1xuXG5cdCNlbmRpZlxuXG5cdHZlYzMgb3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2IgKiBtYXRjYXBDb2xvci5yZ2I7XG5cblx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XG5cbn1cbmA7XG4iLCJleHBvcnQgY29uc3QgdmVydGV4ID0gLyogZ2xzbCAqL2BcbiNkZWZpbmUgTk9STUFMXG5cbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxuXG5cdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xuXG4jZW5kaWZcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cblxudm9pZCBtYWluKCkge1xuXG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxiYXRjaGluZ192ZXJ0ZXg+XG5cblx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XG5cblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG5cbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxuXG5cdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xuXG4jZW5kaWZcblxufVxuYDtcblxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogZ2xzbCAqL2BcbiNkZWZpbmUgTk9STUFMXG5cbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcblxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQX1RBTkdFTlRTUEFDRSApXG5cblx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG5cbiNlbmRpZlxuXG4jaW5jbHVkZSA8cGFja2luZz5cbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxuXG52b2lkIG1haW4oKSB7XG5cblx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCAwLjAsIDAuMCwgMC4wLCBvcGFjaXR5ICk7XG5cblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XG5cblx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggcGFja05vcm1hbFRvUkdCKCBub3JtYWwgKSwgZGlmZnVzZUNvbG9yLmEgKTtcblxuXHQjaWZkZWYgT1BBUVVFXG5cblx0XHRnbF9GcmFnQ29sb3IuYSA9IDEuMDtcblxuXHQjZW5kaWZcblxufVxuYDtcbiIsImV4cG9ydCBjb25zdCB2ZXJ0ZXggPSAvKiBnbHNsICovYFxuI2RlZmluZSBQSE9OR1xuXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cblxudm9pZCBtYWluKCkge1xuXG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblxuXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cblxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblxuXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcblxuXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxmb2dfdmVydGV4PlxuXG59XG5gO1xuXG5leHBvcnQgY29uc3QgZnJhZ21lbnQgPSAvKiBnbHNsICovYFxuI2RlZmluZSBQSE9OR1xuXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcbnVuaWZvcm0gdmVjMyBzcGVjdWxhcjtcbnVuaWZvcm0gZmxvYXQgc2hpbmluZXNzO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHBhY2tpbmc+XG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGJzZGZzPlxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG5cbnZvaWQgbWFpbigpIHtcblxuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblxuXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xuXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xuXG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxuXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XG5cblx0Ly8gYWNjdW11bGF0aW9uXG5cdCNpbmNsdWRlIDxsaWdodHNfcGhvbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfbWFwcz5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XG5cblx0Ly8gbW9kdWxhdGlvblxuXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XG5cblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcblxuXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cblxufVxuYDtcbiIsImV4cG9ydCBjb25zdCB2ZXJ0ZXggPSAvKiBnbHNsICovYFxuI2RlZmluZSBTVEFOREFSRFxuXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcblxuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cblxuXHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XG5cbiNlbmRpZlxuXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG5cbnZvaWQgbWFpbigpIHtcblxuXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblxuXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XG5cblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG5cblx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XG5cblx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxmb2dfdmVydGV4PlxuXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxuXG5cdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XG5cbiNlbmRpZlxufVxuYDtcblxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogZ2xzbCAqL2BcbiNkZWZpbmUgU1RBTkRBUkRcblxuI2lmZGVmIFBIWVNJQ0FMXG5cdCNkZWZpbmUgSU9SXG5cdCNkZWZpbmUgVVNFX1NQRUNVTEFSXG4jZW5kaWZcblxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XG51bmlmb3JtIGZsb2F0IHJvdWdobmVzcztcbnVuaWZvcm0gZmxvYXQgbWV0YWxuZXNzO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuXG4jaWZkZWYgSU9SXG5cdHVuaWZvcm0gZmxvYXQgaW9yO1xuI2VuZGlmXG5cbiNpZmRlZiBVU0VfU1BFQ1VMQVJcblx0dW5pZm9ybSBmbG9hdCBzcGVjdWxhckludGVuc2l0eTtcblx0dW5pZm9ybSB2ZWMzIHNwZWN1bGFyQ29sb3I7XG5cblx0I2lmZGVmIFVTRV9TUEVDVUxBUl9DT0xPUk1BUFxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyQ29sb3JNYXA7XG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBVU0VfU1BFQ1VMQVJfSU5URU5TSVRZTUFQXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJJbnRlbnNpdHlNYXA7XG5cdCNlbmRpZlxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfQ0xFQVJDT0FUXG5cdHVuaWZvcm0gZmxvYXQgY2xlYXJjb2F0O1xuXHR1bmlmb3JtIGZsb2F0IGNsZWFyY29hdFJvdWdobmVzcztcbiNlbmRpZlxuXG4jaWZkZWYgVVNFX0RJU1BFUlNJT05cblx0dW5pZm9ybSBmbG9hdCBkaXNwZXJzaW9uO1xuI2VuZGlmXG5cbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0Vcblx0dW5pZm9ybSBmbG9hdCBpcmlkZXNjZW5jZTtcblx0dW5pZm9ybSBmbG9hdCBpcmlkZXNjZW5jZUlPUjtcblx0dW5pZm9ybSBmbG9hdCBpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW07XG5cdHVuaWZvcm0gZmxvYXQgaXJpZGVzY2VuY2VUaGlja25lc3NNYXhpbXVtO1xuI2VuZGlmXG5cbiNpZmRlZiBVU0VfU0hFRU5cblx0dW5pZm9ybSB2ZWMzIHNoZWVuQ29sb3I7XG5cdHVuaWZvcm0gZmxvYXQgc2hlZW5Sb3VnaG5lc3M7XG5cblx0I2lmZGVmIFVTRV9TSEVFTl9DT0xPUk1BUFxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHNoZWVuQ29sb3JNYXA7XG5cdCNlbmRpZlxuXG5cdCNpZmRlZiBVU0VfU0hFRU5fUk9VR0hORVNTTUFQXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgc2hlZW5Sb3VnaG5lc3NNYXA7XG5cdCNlbmRpZlxuI2VuZGlmXG5cbiNpZmRlZiBVU0VfQU5JU09UUk9QWVxuXHR1bmlmb3JtIHZlYzIgYW5pc290cm9weVZlY3RvcjtcblxuXHQjaWZkZWYgVVNFX0FOSVNPVFJPUFlNQVBcblx0XHR1bmlmb3JtIHNhbXBsZXIyRCBhbmlzb3Ryb3B5TWFwO1xuXHQjZW5kaWZcbiNlbmRpZlxuXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGlyaWRlc2NlbmNlX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8ZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8dHJhbnNtaXNzaW9uX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsZWFyY29hdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGlyaWRlc2NlbmNlX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cblxudm9pZCBtYWluKCkge1xuXG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXG5cdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XG5cdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XG5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHJvdWdobmVzc21hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1ldGFsbmVzc21hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxuXHQjaW5jbHVkZSA8Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwcz5cblx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxuXG5cdC8vIGFjY3VtdWxhdGlvblxuXHQjaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2JlZ2luPlxuXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxuXG5cdC8vIG1vZHVsYXRpb25cblx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxuXG5cdHZlYzMgdG90YWxEaWZmdXNlID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcblx0dmVjMyB0b3RhbFNwZWN1bGFyID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyO1xuXG5cdCNpbmNsdWRlIDx0cmFuc21pc3Npb25fZnJhZ21lbnQ+XG5cblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdG90YWxEaWZmdXNlICsgdG90YWxTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcblxuXHQjaWZkZWYgVVNFX1NIRUVOXG5cblx0XHQvLyBTaGVlbiBlbmVyZ3kgY29tcGVuc2F0aW9uIGFwcHJveGltYXRpb24gY2FsY3VsYXRpb24gY2FuIGJlIGZvdW5kIGF0IHRoZSBlbmQgb2Zcblx0XHQvLyBodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzFUMEQxVlN5UjRBbGxxSUpUUUFyYUVJempsYjVoNEZLSC92aWV3P3VzcD1zaGFyaW5nXG5cdFx0ZmxvYXQgc2hlZW5FbmVyZ3lDb21wID0gMS4wIC0gMC4xNTcgKiBtYXgzKCBtYXRlcmlhbC5zaGVlbkNvbG9yICk7XG5cblx0XHRvdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodCAqIHNoZWVuRW5lcmd5Q29tcCArIHNoZWVuU3BlY3VsYXJEaXJlY3QgKyBzaGVlblNwZWN1bGFySW5kaXJlY3Q7XG5cblx0I2VuZGlmXG5cblx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcblxuXHRcdGZsb2F0IGRvdE5WY2MgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyICkgKTtcblxuXHRcdHZlYzMgRmNjID0gRl9TY2hsaWNrKCBtYXRlcmlhbC5jbGVhcmNvYXRGMCwgbWF0ZXJpYWwuY2xlYXJjb2F0RjkwLCBkb3ROVmNjICk7XG5cblx0XHRvdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodCAqICggMS4wIC0gbWF0ZXJpYWwuY2xlYXJjb2F0ICogRmNjICkgKyAoIGNsZWFyY29hdFNwZWN1bGFyRGlyZWN0ICsgY2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCApICogbWF0ZXJpYWwuY2xlYXJjb2F0O1xuXG5cdCNlbmRpZlxuXG5cdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50PlxuXG59XG5gO1xuIiwiZXhwb3J0IGNvbnN0IHZlcnRleCA9IC8qIGdsc2wgKi9gXG4jZGVmaW5lIFRPT05cblxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG5cbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8YmF0Y2hpbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cblxudm9pZCBtYWluKCkge1xuXG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxuXG5cdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cblxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblxuXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcblxuXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XG5cbn1cbmA7XG5cbmV4cG9ydCBjb25zdCBmcmFnbWVudCA9IC8qIGdsc2wgKi9gXG4jZGVmaW5lIFRPT05cblxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG5cbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8cGFja2luZz5cbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGJzZGZzPlxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG5cbnZvaWQgbWFpbigpIHtcblxuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblxuXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xuXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xuXG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XG5cdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cblx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxuXG5cdC8vIGFjY3VtdWxhdGlvblxuXHQjaW5jbHVkZSA8bGlnaHRzX3Rvb25fZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfbWFwcz5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XG5cblx0Ly8gbW9kdWxhdGlvblxuXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XG5cblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcblxuXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cblxufVxuYDtcbiIsImV4cG9ydCBjb25zdCB2ZXJ0ZXggPSAvKiBnbHNsICovYFxudW5pZm9ybSBmbG9hdCBzaXplO1xudW5pZm9ybSBmbG9hdCBzY2FsZTtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxuXG4jaWZkZWYgVVNFX1BPSU5UU19VVlxuXG5cdHZhcnlpbmcgdmVjMiB2VXY7XG5cdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcblxuI2VuZGlmXG5cbnZvaWQgbWFpbigpIHtcblxuXHQjaWZkZWYgVVNFX1BPSU5UU19VVlxuXG5cdFx0dlV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIHV2LCAxICkgKS54eTtcblxuXHQjZW5kaWZcblxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXG5cdGdsX1BvaW50U2l6ZSA9IHNpemU7XG5cblx0I2lmZGVmIFVTRV9TSVpFQVRURU5VQVRJT05cblxuXHRcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9IGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdGlmICggaXNQZXJzcGVjdGl2ZSApIGdsX1BvaW50U2l6ZSAqPSAoIHNjYWxlIC8gLSBtdlBvc2l0aW9uLnogKTtcblxuXHQjZW5kaWZcblxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cblx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XG5cbn1cbmA7XG5cbmV4cG9ydCBjb25zdCBmcmFnbWVudCA9IC8qIGdsc2wgKi9gXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG5cbnZvaWQgbWFpbigpIHtcblxuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblxuXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcblxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxtYXBfcGFydGljbGVfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cblxuXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcblxuXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblxufVxuYDtcbiIsImV4cG9ydCBjb25zdCB2ZXJ0ZXggPSAvKiBnbHNsICovYFxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxuXG52b2lkIG1haW4oKSB7XG5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblxuXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxuXG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cblxuXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XG5cbn1cbmA7XG5cbmV4cG9ydCBjb25zdCBmcmFnbWVudCA9IC8qIGdsc2wgKi9gXG51bmlmb3JtIHZlYzMgY29sb3I7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG5cbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8cGFja2luZz5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxic2Rmcz5cbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cblxudm9pZCBtYWluKCkge1xuXG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblxuXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciwgb3BhY2l0eSAqICggMS4wIC0gZ2V0U2hhZG93TWFzaygpICkgKTtcblxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXG59XG5gO1xuIiwiZXhwb3J0IGNvbnN0IHZlcnRleCA9IC8qIGdsc2wgKi9gXG51bmlmb3JtIGZsb2F0IHJvdGF0aW9uO1xudW5pZm9ybSB2ZWMyIGNlbnRlcjtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxuXG52b2lkIG1haW4oKSB7XG5cblx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cblxuXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKTtcblxuXHR2ZWMyIHNjYWxlO1xuXHRzY2FsZS54ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMCBdLngsIG1vZGVsTWF0cml4WyAwIF0ueSwgbW9kZWxNYXRyaXhbIDAgXS56ICkgKTtcblx0c2NhbGUueSA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDEgXS54LCBtb2RlbE1hdHJpeFsgMSBdLnksIG1vZGVsTWF0cml4WyAxIF0ueiApICk7XG5cblx0I2lmbmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXG5cblx0XHRib29sIGlzUGVyc3BlY3RpdmUgPSBpc1BlcnNwZWN0aXZlTWF0cml4KCBwcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBzY2FsZSAqPSAtIG12UG9zaXRpb24uejtcblxuXHQjZW5kaWZcblxuXHR2ZWMyIGFsaWduZWRQb3NpdGlvbiA9ICggcG9zaXRpb24ueHkgLSAoIGNlbnRlciAtIHZlYzIoIDAuNSApICkgKSAqIHNjYWxlO1xuXG5cdHZlYzIgcm90YXRlZFBvc2l0aW9uO1xuXHRyb3RhdGVkUG9zaXRpb24ueCA9IGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54IC0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XG5cdHJvdGF0ZWRQb3NpdGlvbi55ID0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcblxuXHRtdlBvc2l0aW9uLnh5ICs9IHJvdGF0ZWRQb3NpdGlvbjtcblxuXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xuXG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cblxufVxuYDtcblxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogZ2xzbCAqL2BcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxuXG52b2lkIG1haW4oKSB7XG5cblx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XG5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XG5cblx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XG5cblx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cblxufVxuYDtcbiIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vbWF0aC9Db2xvci5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IE1hdHJpeDMgfSBmcm9tICcuLi8uLi9tYXRoL01hdHJpeDMuanMnO1xuXG4vKipcbiAqIFVuaWZvcm1zIGxpYnJhcnkgZm9yIHNoYXJlZCB3ZWJnbCBzaGFkZXJzXG4gKi9cblxuY29uc3QgVW5pZm9ybXNMaWIgPSB7XG5cblx0Y29tbW9uOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHhmZmZmZmYgKSB9LFxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxuXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblxuXHRcdGFscGhhTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YWxwaGFNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXG5cdFx0YWxwaGFUZXN0OiB7IHZhbHVlOiAwIH1cblxuXHR9LFxuXG5cdHNwZWN1bGFybWFwOiB7XG5cblx0XHRzcGVjdWxhck1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdHNwZWN1bGFyTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfVxuXG5cdH0sXG5cblx0ZW52bWFwOiB7XG5cblx0XHRlbnZNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRlbnZNYXBSb3RhdGlvbjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0ZmxpcEVudk1hcDogeyB2YWx1ZTogLSAxIH0sXG5cdFx0cmVmbGVjdGl2aXR5OiB7IHZhbHVlOiAxLjAgfSwgLy8gYmFzaWMsIGxhbWJlcnQsIHBob25nXG5cdFx0aW9yOiB7IHZhbHVlOiAxLjUgfSwgLy8gcGh5c2ljYWxcblx0XHRyZWZyYWN0aW9uUmF0aW86IHsgdmFsdWU6IDAuOTggfSwgLy8gYmFzaWMsIGxhbWJlcnQsIHBob25nXG5cblx0fSxcblxuXHRhb21hcDoge1xuXG5cdFx0YW9NYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRhb01hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9LFxuXHRcdGFvTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfVxuXG5cdH0sXG5cblx0bGlnaHRtYXA6IHtcblxuXHRcdGxpZ2h0TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bGlnaHRNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSxcblx0XHRsaWdodE1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdGJ1bXBtYXA6IHtcblxuXHRcdGJ1bXBNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRidW1wTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRidW1wU2NhbGU6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bm9ybWFsbWFwOiB7XG5cblx0XHRub3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRub3JtYWxNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdG5vcm1hbFNjYWxlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCAxLCAxICkgfVxuXG5cdH0sXG5cblx0ZGlzcGxhY2VtZW50bWFwOiB7XG5cblx0XHRkaXNwbGFjZW1lbnRNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRkaXNwbGFjZW1lbnRNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdGRpc3BsYWNlbWVudFNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0ZGlzcGxhY2VtZW50QmlhczogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRlbWlzc2l2ZW1hcDoge1xuXG5cdFx0ZW1pc3NpdmVNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRlbWlzc2l2ZU1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdG1ldGFsbmVzc21hcDoge1xuXG5cdFx0bWV0YWxuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bWV0YWxuZXNzTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfVxuXG5cdH0sXG5cblx0cm91Z2huZXNzbWFwOiB7XG5cblx0XHRyb3VnaG5lc3NNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRyb3VnaG5lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9XG5cblx0fSxcblxuXHRncmFkaWVudG1hcDoge1xuXG5cdFx0Z3JhZGllbnRNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0Zm9nOiB7XG5cblx0XHRmb2dEZW5zaXR5OiB7IHZhbHVlOiAwLjAwMDI1IH0sXG5cdFx0Zm9nTmVhcjogeyB2YWx1ZTogMSB9LFxuXHRcdGZvZ0ZhcjogeyB2YWx1ZTogMjAwMCB9LFxuXHRcdGZvZ0NvbG9yOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHhmZmZmZmYgKSB9XG5cblx0fSxcblxuXHRsaWdodHM6IHtcblxuXHRcdGFtYmllbnRMaWdodENvbG9yOiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0bGlnaHRQcm9iZTogeyB2YWx1ZTogW10gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGNvbG9yOiB7fVxuXHRcdH0gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0c2hhZG93SW50ZW5zaXR5OiAxLFxuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dOb3JtYWxCaWFzOiB7fSxcblx0XHRcdHNoYWRvd1JhZGl1czoge30sXG5cdFx0XHRzaGFkb3dNYXBTaXplOiB7fVxuXHRcdH0gfSxcblxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0c3BvdExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdGRpcmVjdGlvbjoge30sXG5cdFx0XHRkaXN0YW5jZToge30sXG5cdFx0XHRjb25lQ29zOiB7fSxcblx0XHRcdHBlbnVtYnJhQ29zOiB7fSxcblx0XHRcdGRlY2F5OiB7fVxuXHRcdH0gfSxcblxuXHRcdHNwb3RMaWdodFNoYWRvd3M6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRzaGFkb3dJbnRlbnNpdHk6IDEsXG5cdFx0XHRzaGFkb3dCaWFzOiB7fSxcblx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9XG5cdFx0fSB9LFxuXG5cdFx0c3BvdExpZ2h0TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdHNwb3RTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0c3BvdExpZ2h0TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0cG9pbnRMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRjb2xvcjoge30sXG5cdFx0XHRwb3NpdGlvbjoge30sXG5cdFx0XHRkZWNheToge30sXG5cdFx0XHRkaXN0YW5jZToge31cblx0XHR9IH0sXG5cblx0XHRwb2ludExpZ2h0U2hhZG93czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdHNoYWRvd0ludGVuc2l0eTogMSxcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93Tm9ybWFsQmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge30sXG5cdFx0XHRzaGFkb3dDYW1lcmFOZWFyOiB7fSxcblx0XHRcdHNoYWRvd0NhbWVyYUZhcjoge31cblx0XHR9IH0sXG5cblx0XHRwb2ludFNoYWRvd01hcDogeyB2YWx1ZTogW10gfSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSxcblxuXHRcdGhlbWlzcGhlcmVMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRkaXJlY3Rpb246IHt9LFxuXHRcdFx0c2t5Q29sb3I6IHt9LFxuXHRcdFx0Z3JvdW5kQ29sb3I6IHt9XG5cdFx0fSB9LFxuXG5cdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IFJlY3RBcmVhTGlnaHQgQlJERiBkYXRhIG5lZWRzIHRvIGJlIG1vdmVkIGZyb20gZXhhbXBsZSB0byBtYWluIHNyY1xuXHRcdHJlY3RBcmVhTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0Y29sb3I6IHt9LFxuXHRcdFx0cG9zaXRpb246IHt9LFxuXHRcdFx0d2lkdGg6IHt9LFxuXHRcdFx0aGVpZ2h0OiB7fVxuXHRcdH0gfSxcblxuXHRcdGx0Y18xOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bHRjXzI6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0cG9pbnRzOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHhmZmZmZmYgKSB9LFxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdHNpemU6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdHNjYWxlOiB7IHZhbHVlOiAxLjAgfSxcblx0XHRtYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRhbHBoYVRlc3Q6IHsgdmFsdWU6IDAgfSxcblx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdHNwcml0ZToge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblx0XHRjZW50ZXI6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoIDAuNSwgMC41ICkgfSxcblx0XHRyb3RhdGlvbjogeyB2YWx1ZTogMC4wIH0sXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRhbHBoYVRlc3Q6IHsgdmFsdWU6IDAgfVxuXG5cdH1cblxufTtcblxuZXhwb3J0IHsgVW5pZm9ybXNMaWIgfTtcbiIsImltcG9ydCB7IFNoYWRlckNodW5rIH0gZnJvbSAnLi9TaGFkZXJDaHVuay5qcyc7XG5pbXBvcnQgeyBtZXJnZVVuaWZvcm1zIH0gZnJvbSAnLi9Vbmlmb3Jtc1V0aWxzLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBVbmlmb3Jtc0xpYiB9IGZyb20gJy4vVW5pZm9ybXNMaWIuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yLmpzJztcbmltcG9ydCB7IE1hdHJpeDMgfSBmcm9tICcuLi8uLi9tYXRoL01hdHJpeDMuanMnO1xuXG5jb25zdCBTaGFkZXJMaWIgPSB7XG5cblx0YmFzaWM6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZ1xuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGJhc2ljX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hiYXNpY19mcmFnXG5cblx0fSxcblxuXHRsYW1iZXJ0OiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMDAgKSB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobGFtYmVydF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobGFtYmVydF9mcmFnXG5cblx0fSxcblxuXHRwaG9uZzoge1xuXG5cdFx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdFx0c3BlY3VsYXI6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAweDExMTExMSApIH0sXG5cdFx0XHRcdHNoaW5pbmVzczogeyB2YWx1ZTogMzAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBob25nX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaG9uZ19mcmFnXG5cblx0fSxcblxuXHRzdGFuZGFyZDoge1xuXG5cdFx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLnJvdWdobmVzc21hcCxcblx0XHRcdFVuaWZvcm1zTGliLm1ldGFsbmVzc21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRcdHJvdWdobmVzczogeyB2YWx1ZTogMS4wIH0sXG5cdFx0XHRcdG1ldGFsbmVzczogeyB2YWx1ZTogMC4wIH0sXG5cdFx0XHRcdGVudk1hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX2ZyYWdcblxuXHR9LFxuXG5cdHRvb246IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ncmFkaWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAweDAwMDAwMCApIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2h0b29uX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2h0b29uX2ZyYWdcblxuXHR9LFxuXG5cdG1hdGNhcDoge1xuXG5cdFx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdHtcblx0XHRcdFx0bWF0Y2FwOiB7IHZhbHVlOiBudWxsIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG1hdGNhcF9mcmFnXG5cblx0fSxcblxuXHRwb2ludHM6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLnBvaW50cyxcblx0XHRcdFVuaWZvcm1zTGliLmZvZ1xuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsucG9pbnRzX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c19mcmFnXG5cblx0fSxcblxuXHRkYXNoZWQ6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdHtcblx0XHRcdFx0c2NhbGU6IHsgdmFsdWU6IDEgfSxcblx0XHRcdFx0ZGFzaFNpemU6IHsgdmFsdWU6IDEgfSxcblx0XHRcdFx0dG90YWxTaXplOiB7IHZhbHVlOiAyIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmxpbmVkYXNoZWRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubGluZWRhc2hlZF9mcmFnXG5cblx0fSxcblxuXHRkZXB0aDoge1xuXG5cdFx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF9mcmFnXG5cblx0fSxcblxuXHRub3JtYWw6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHR7XG5cdFx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobm9ybWFsX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hub3JtYWxfZnJhZ1xuXG5cdH0sXG5cblx0c3ByaXRlOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcHJpdGUsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnNwcml0ZV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5zcHJpdGVfZnJhZ1xuXG5cdH0sXG5cblx0YmFja2dyb3VuZDoge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdHQyRDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0YmFja2dyb3VuZEludGVuc2l0eTogeyB2YWx1ZTogMSB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5iYWNrZ3JvdW5kX2ZyYWdcblxuXHR9LFxuXG5cdGJhY2tncm91bmRDdWJlOiB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0ZW52TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRmbGlwRW52TWFwOiB7IHZhbHVlOiAtIDEgfSxcblx0XHRcdGJhY2tncm91bmRCbHVycmluZXNzOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRiYWNrZ3JvdW5kSW50ZW5zaXR5OiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRiYWNrZ3JvdW5kUm90YXRpb246IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZEN1YmVfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZEN1YmVfZnJhZ1xuXG5cdH0sXG5cblx0Y3ViZToge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHRDdWJlOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHR0RmxpcDogeyB2YWx1ZTogLSAxIH0sXG5cdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmN1YmVfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuY3ViZV9mcmFnXG5cblx0fSxcblxuXHRlcXVpcmVjdDoge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHRFcXVpcmVjdDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmVxdWlyZWN0X3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmVxdWlyZWN0X2ZyYWdcblxuXHR9LFxuXG5cdGRpc3RhbmNlUkdCQToge1xuXG5cdFx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0e1xuXHRcdFx0XHRyZWZlcmVuY2VQb3NpdGlvbjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpIH0sXG5cdFx0XHRcdG5lYXJEaXN0YW5jZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHRmYXJEaXN0YW5jZTogeyB2YWx1ZTogMTAwMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kaXN0YW5jZVJHQkFfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZGlzdGFuY2VSR0JBX2ZyYWdcblxuXHR9LFxuXG5cdHNoYWRvdzoge1xuXG5cdFx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0e1xuXHRcdFx0XHRjb2xvcjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAgKSB9LFxuXHRcdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxuXHRcdFx0fSxcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnNoYWRvd192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5zaGFkb3dfZnJhZ1xuXG5cdH1cblxufTtcblxuU2hhZGVyTGliLnBoeXNpY2FsID0ge1xuXG5cdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRTaGFkZXJMaWIuc3RhbmRhcmQudW5pZm9ybXMsXG5cdFx0e1xuXHRcdFx0Y2xlYXJjb2F0OiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRjbGVhcmNvYXRNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdGNsZWFyY29hdE1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHRjbGVhcmNvYXROb3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdGNsZWFyY29hdE5vcm1hbE1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHRjbGVhcmNvYXROb3JtYWxTY2FsZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMiggMSwgMSApIH0sXG5cdFx0XHRjbGVhcmNvYXRSb3VnaG5lc3M6IHsgdmFsdWU6IDAgfSxcblx0XHRcdGNsZWFyY29hdFJvdWdobmVzc01hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0Y2xlYXJjb2F0Um91Z2huZXNzTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdGRpc3BlcnNpb246IHsgdmFsdWU6IDAgfSxcblx0XHRcdGlyaWRlc2NlbmNlOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRpcmlkZXNjZW5jZU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0aXJpZGVzY2VuY2VNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0aXJpZGVzY2VuY2VJT1I6IHsgdmFsdWU6IDEuMyB9LFxuXHRcdFx0aXJpZGVzY2VuY2VUaGlja25lc3NNaW5pbXVtOiB7IHZhbHVlOiAxMDAgfSxcblx0XHRcdGlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bTogeyB2YWx1ZTogNDAwIH0sXG5cdFx0XHRpcmlkZXNjZW5jZVRoaWNrbmVzc01hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0aXJpZGVzY2VuY2VUaGlja25lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0c2hlZW46IHsgdmFsdWU6IDAgfSxcblx0XHRcdHNoZWVuQ29sb3I6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRzaGVlbkNvbG9yTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRzaGVlbkNvbG9yTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdHNoZWVuUm91Z2huZXNzOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRzaGVlblJvdWdobmVzc01hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0c2hlZW5Sb3VnaG5lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0dHJhbnNtaXNzaW9uOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHR0cmFuc21pc3Npb25NYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHRyYW5zbWlzc2lvbk1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHR0cmFuc21pc3Npb25TYW1wbGVyU2l6ZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpIH0sXG5cdFx0XHR0cmFuc21pc3Npb25TYW1wbGVyTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHR0aGlja25lc3M6IHsgdmFsdWU6IDAgfSxcblx0XHRcdHRoaWNrbmVzc01hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0dGhpY2tuZXNzTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdGF0dGVudWF0aW9uRGlzdGFuY2U6IHsgdmFsdWU6IDAgfSxcblx0XHRcdGF0dGVudWF0aW9uQ29sb3I6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRzcGVjdWxhckNvbG9yOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMSwgMSwgMSApIH0sXG5cdFx0XHRzcGVjdWxhckNvbG9yTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRzcGVjdWxhckNvbG9yTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdHNwZWN1bGFySW50ZW5zaXR5OiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRzcGVjdWxhckludGVuc2l0eU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0c3BlY3VsYXJJbnRlbnNpdHlNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0YW5pc290cm9weVZlY3RvcjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpIH0sXG5cdFx0XHRhbmlzb3Ryb3B5TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRhbmlzb3Ryb3B5TWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHR9XG5cdF0gKSxcblxuXHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF92ZXJ0LFxuXHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX2ZyYWdcblxufTtcblxuXG5leHBvcnQgeyBTaGFkZXJMaWIgfTtcbiIsImltcG9ydCB7IEJhY2tTaWRlLCBGcm9udFNpZGUsIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLCBTUkdCVHJhbnNmZXIgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgQm94R2VvbWV0cnkgfSBmcm9tICcuLi8uLi9nZW9tZXRyaWVzL0JveEdlb21ldHJ5LmpzJztcbmltcG9ydCB7IFBsYW5lR2VvbWV0cnkgfSBmcm9tICcuLi8uLi9nZW9tZXRyaWVzL1BsYW5lR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgU2hhZGVyTWF0ZXJpYWwgfSBmcm9tICcuLi8uLi9tYXRlcmlhbHMvU2hhZGVyTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yLmpzJztcbmltcG9ydCB7IENvbG9yTWFuYWdlbWVudCB9IGZyb20gJy4uLy4uL21hdGgvQ29sb3JNYW5hZ2VtZW50LmpzJztcbmltcG9ydCB7IEV1bGVyIH0gZnJvbSAnLi4vLi4vbWF0aC9FdWxlci5qcyc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi8uLi9vYmplY3RzL01lc2guanMnO1xuaW1wb3J0IHsgU2hhZGVyTGliIH0gZnJvbSAnLi4vc2hhZGVycy9TaGFkZXJMaWIuanMnO1xuaW1wb3J0IHsgY2xvbmVVbmlmb3JtcywgZ2V0VW5saXRVbmlmb3JtQ29sb3JTcGFjZSB9IGZyb20gJy4uL3NoYWRlcnMvVW5pZm9ybXNVdGlscy5qcyc7XG5cbmNvbnN0IF9yZ2IgPSB7IHI6IDAsIGI6IDAsIGc6IDAgfTtcbmNvbnN0IF9lMSA9IC8qQF9fUFVSRV9fKi8gbmV3IEV1bGVyKCk7XG5jb25zdCBfbTEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5cbmZ1bmN0aW9uIFdlYkdMQmFja2dyb3VuZCggcmVuZGVyZXIsIGN1YmVtYXBzLCBjdWJldXZtYXBzLCBzdGF0ZSwgb2JqZWN0cywgYWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRjb25zdCBjbGVhckNvbG9yID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHRsZXQgY2xlYXJBbHBoYSA9IGFscGhhID09PSB0cnVlID8gMCA6IDE7XG5cblx0bGV0IHBsYW5lTWVzaDtcblx0bGV0IGJveE1lc2g7XG5cblx0bGV0IGN1cnJlbnRCYWNrZ3JvdW5kID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IDA7XG5cdGxldCBjdXJyZW50VG9uZW1hcHBpbmcgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIGdldEJhY2tncm91bmQoIHNjZW5lICkge1xuXG5cdFx0bGV0IGJhY2tncm91bmQgPSBzY2VuZS5pc1NjZW5lID09PSB0cnVlID8gc2NlbmUuYmFja2dyb3VuZCA6IG51bGw7XG5cblx0XHRpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGNvbnN0IHVzZVBNUkVNID0gc2NlbmUuYmFja2dyb3VuZEJsdXJyaW5lc3MgPiAwOyAvLyB1c2UgUE1SRU0gaWYgdGhlIHVzZXIgd2FudHMgdG8gYmx1ciB0aGUgYmFja2dyb3VuZFxuXHRcdFx0YmFja2dyb3VuZCA9ICggdXNlUE1SRU0gPyBjdWJldXZtYXBzIDogY3ViZW1hcHMgKS5nZXQoIGJhY2tncm91bmQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBiYWNrZ3JvdW5kO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXIoIHNjZW5lICkge1xuXG5cdFx0bGV0IGZvcmNlQ2xlYXIgPSBmYWxzZTtcblx0XHRjb25zdCBiYWNrZ3JvdW5kID0gZ2V0QmFja2dyb3VuZCggc2NlbmUgKTtcblxuXHRcdGlmICggYmFja2dyb3VuZCA9PT0gbnVsbCApIHtcblxuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc0NvbG9yICkge1xuXG5cdFx0XHRzZXRDbGVhciggYmFja2dyb3VuZCwgMSApO1xuXHRcdFx0Zm9yY2VDbGVhciA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBlbnZpcm9ubWVudEJsZW5kTW9kZSA9IHJlbmRlcmVyLnhyLmdldEVudmlyb25tZW50QmxlbmRNb2RlKCk7XG5cblx0XHRpZiAoIGVudmlyb25tZW50QmxlbmRNb2RlID09PSAnYWRkaXRpdmUnICkge1xuXG5cdFx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCAwLCAwLCAwLCAxLCBwcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGVudmlyb25tZW50QmxlbmRNb2RlID09PSAnYWxwaGEtYmxlbmQnICkge1xuXG5cdFx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCAwLCAwLCAwLCAwLCBwcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVuZGVyZXIuYXV0b0NsZWFyIHx8IGZvcmNlQ2xlYXIgKSB7XG5cblx0XHRcdC8vIGJ1ZmZlcnMgbWlnaHQgbm90IGJlIHdyaXRhYmxlIHdoaWNoIGlzIHJlcXVpcmVkIHRvIGVuc3VyZSBhIGNvcnJlY3QgY2xlYXJcblxuXHRcdFx0c3RhdGUuYnVmZmVycy5kZXB0aC5zZXRUZXN0KCB0cnVlICk7XG5cdFx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldE1hc2soIHRydWUgKTtcblx0XHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0TWFzayggdHJ1ZSApO1xuXG5cdFx0XHRyZW5kZXJlci5jbGVhciggcmVuZGVyZXIuYXV0b0NsZWFyQ29sb3IsIHJlbmRlcmVyLmF1dG9DbGVhckRlcHRoLCByZW5kZXJlci5hdXRvQ2xlYXJTdGVuY2lsICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZFRvUmVuZGVyTGlzdCggcmVuZGVyTGlzdCwgc2NlbmUgKSB7XG5cblx0XHRjb25zdCBiYWNrZ3JvdW5kID0gZ2V0QmFja2dyb3VuZCggc2NlbmUgKTtcblxuXHRcdGlmICggYmFja2dyb3VuZCAmJiAoIGJhY2tncm91bmQuaXNDdWJlVGV4dHVyZSB8fCBiYWNrZ3JvdW5kLm1hcHBpbmcgPT09IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nICkgKSB7XG5cblx0XHRcdGlmICggYm94TWVzaCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGJveE1lc2ggPSBuZXcgTWVzaChcblx0XHRcdFx0XHRuZXcgQm94R2VvbWV0cnkoIDEsIDEsIDEgKSxcblx0XHRcdFx0XHRuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblx0XHRcdFx0XHRcdG5hbWU6ICdCYWNrZ3JvdW5kQ3ViZU1hdGVyaWFsJyxcblx0XHRcdFx0XHRcdHVuaWZvcm1zOiBjbG9uZVVuaWZvcm1zKCBTaGFkZXJMaWIuYmFja2dyb3VuZEN1YmUudW5pZm9ybXMgKSxcblx0XHRcdFx0XHRcdHZlcnRleFNoYWRlcjogU2hhZGVyTGliLmJhY2tncm91bmRDdWJlLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZEN1YmUuZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHRcdFx0XHRzaWRlOiBCYWNrU2lkZSxcblx0XHRcdFx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0XHRcdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdFx0XHRcdGZvZzogZmFsc2Vcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRib3hNZXNoLmdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSggJ25vcm1hbCcgKTtcblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICd1dicgKTtcblxuXHRcdFx0XHRib3hNZXNoLm9uQmVmb3JlUmVuZGVyID0gZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdFx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weVBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIGFkZCBcImVudk1hcFwiIG1hdGVyaWFsIHByb3BlcnR5IHNvIHRoZSByZW5kZXJlciBjYW4gZXZhbHVhdGUgaXQgbGlrZSBmb3IgYnVpbHQtaW4gbWF0ZXJpYWxzXG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggYm94TWVzaC5tYXRlcmlhbCwgJ2Vudk1hcCcsIHtcblxuXHRcdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5lbnZNYXAudmFsdWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdG9iamVjdHMudXBkYXRlKCBib3hNZXNoICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2UxLmNvcHkoIHNjZW5lLmJhY2tncm91bmRSb3RhdGlvbiApO1xuXG5cdFx0XHQvLyBhY2NvbW1vZGF0ZSBsZWZ0LWhhbmRlZCBmcmFtZVxuXHRcdFx0X2UxLnggKj0gLSAxOyBfZTEueSAqPSAtIDE7IF9lMS56ICo9IC0gMTtcblxuXHRcdFx0aWYgKCBiYWNrZ3JvdW5kLmlzQ3ViZVRleHR1cmUgJiYgYmFja2dyb3VuZC5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIGVudmlyb25tZW50IG1hcHMgd2hpY2ggYXJlIG5vdCBjdWJlIHJlbmRlciB0YXJnZXRzIG9yIFBNUkVNcyBmb2xsb3cgYSBkaWZmZXJlbnQgY29udmVudGlvblxuXHRcdFx0XHRfZTEueSAqPSAtIDE7XG5cdFx0XHRcdF9lMS56ICo9IC0gMTtcblxuXHRcdFx0fVxuXG5cdFx0XHRib3hNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLmVudk1hcC52YWx1ZSA9IGJhY2tncm91bmQ7XG5cdFx0XHRib3hNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLmZsaXBFbnZNYXAudmFsdWUgPSAoIGJhY2tncm91bmQuaXNDdWJlVGV4dHVyZSAmJiBiYWNrZ3JvdW5kLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9PT0gZmFsc2UgKSA/IC0gMSA6IDE7XG5cdFx0XHRib3hNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLmJhY2tncm91bmRCbHVycmluZXNzLnZhbHVlID0gc2NlbmUuYmFja2dyb3VuZEJsdXJyaW5lc3M7XG5cdFx0XHRib3hNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLmJhY2tncm91bmRJbnRlbnNpdHkudmFsdWUgPSBzY2VuZS5iYWNrZ3JvdW5kSW50ZW5zaXR5O1xuXHRcdFx0Ym94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5iYWNrZ3JvdW5kUm90YXRpb24udmFsdWUuc2V0RnJvbU1hdHJpeDQoIF9tMS5tYWtlUm90YXRpb25Gcm9tRXVsZXIoIF9lMSApICk7XG5cdFx0XHRib3hNZXNoLm1hdGVyaWFsLnRvbmVNYXBwZWQgPSBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIGJhY2tncm91bmQuY29sb3JTcGFjZSApICE9PSBTUkdCVHJhbnNmZXI7XG5cblx0XHRcdGlmICggY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQgfHxcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uICE9PSBiYWNrZ3JvdW5kLnZlcnNpb24gfHxcblx0XHRcdFx0Y3VycmVudFRvbmVtYXBwaW5nICE9PSByZW5kZXJlci50b25lTWFwcGluZyApIHtcblxuXHRcdFx0XHRib3hNZXNoLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IGJhY2tncm91bmQudmVyc2lvbjtcblx0XHRcdFx0Y3VycmVudFRvbmVtYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0Ym94TWVzaC5sYXllcnMuZW5hYmxlQWxsKCk7XG5cblx0XHRcdC8vIHB1c2ggdG8gdGhlIHByZS1zb3J0ZWQgb3BhcXVlIHJlbmRlciBsaXN0XG5cdFx0XHRyZW5kZXJMaXN0LnVuc2hpZnQoIGJveE1lc2gsIGJveE1lc2guZ2VvbWV0cnksIGJveE1lc2gubWF0ZXJpYWwsIDAsIDAsIG51bGwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGlmICggcGxhbmVNZXNoID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cGxhbmVNZXNoID0gbmV3IE1lc2goXG5cdFx0XHRcdFx0bmV3IFBsYW5lR2VvbWV0cnkoIDIsIDIgKSxcblx0XHRcdFx0XHRuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblx0XHRcdFx0XHRcdG5hbWU6ICdCYWNrZ3JvdW5kTWF0ZXJpYWwnLFxuXHRcdFx0XHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIFNoYWRlckxpYi5iYWNrZ3JvdW5kLnVuaWZvcm1zICksXG5cdFx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZC5mcmFnbWVudFNoYWRlcixcblx0XHRcdFx0XHRcdHNpZGU6IEZyb250U2lkZSxcblx0XHRcdFx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0XHRcdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdFx0XHRcdGZvZzogZmFsc2Vcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRwbGFuZU1lc2guZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAnbm9ybWFsJyApO1xuXG5cdFx0XHRcdC8vIGFkZCBcIm1hcFwiIG1hdGVyaWFsIHByb3BlcnR5IHNvIHRoZSByZW5kZXJlciBjYW4gZXZhbHVhdGUgaXQgbGlrZSBmb3IgYnVpbHQtaW4gbWF0ZXJpYWxzXG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggcGxhbmVNZXNoLm1hdGVyaWFsLCAnbWFwJywge1xuXG5cdFx0XHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLnQyRC52YWx1ZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0b2JqZWN0cy51cGRhdGUoIHBsYW5lTWVzaCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy50MkQudmFsdWUgPSBiYWNrZ3JvdW5kO1xuXHRcdFx0cGxhbmVNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLmJhY2tncm91bmRJbnRlbnNpdHkudmFsdWUgPSBzY2VuZS5iYWNrZ3JvdW5kSW50ZW5zaXR5O1xuXHRcdFx0cGxhbmVNZXNoLm1hdGVyaWFsLnRvbmVNYXBwZWQgPSBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIGJhY2tncm91bmQuY29sb3JTcGFjZSApICE9PSBTUkdCVHJhbnNmZXI7XG5cblx0XHRcdGlmICggYmFja2dyb3VuZC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGJhY2tncm91bmQudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0cGxhbmVNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIGJhY2tncm91bmQubWF0cml4ICk7XG5cblx0XHRcdGlmICggY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQgfHxcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uICE9PSBiYWNrZ3JvdW5kLnZlcnNpb24gfHxcblx0XHRcdFx0Y3VycmVudFRvbmVtYXBwaW5nICE9PSByZW5kZXJlci50b25lTWFwcGluZyApIHtcblxuXHRcdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gYmFja2dyb3VuZC52ZXJzaW9uO1xuXHRcdFx0XHRjdXJyZW50VG9uZW1hcHBpbmcgPSByZW5kZXJlci50b25lTWFwcGluZztcblxuXHRcdFx0fVxuXG5cdFx0XHRwbGFuZU1lc2gubGF5ZXJzLmVuYWJsZUFsbCgpO1xuXG5cdFx0XHQvLyBwdXNoIHRvIHRoZSBwcmUtc29ydGVkIG9wYXF1ZSByZW5kZXIgbGlzdFxuXHRcdFx0cmVuZGVyTGlzdC51bnNoaWZ0KCBwbGFuZU1lc2gsIHBsYW5lTWVzaC5nZW9tZXRyeSwgcGxhbmVNZXNoLm1hdGVyaWFsLCAwLCAwLCBudWxsICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldENsZWFyKCBjb2xvciwgYWxwaGEgKSB7XG5cblx0XHRjb2xvci5nZXRSR0IoIF9yZ2IsIGdldFVubGl0VW5pZm9ybUNvbG9yU3BhY2UoIHJlbmRlcmVyICkgKTtcblxuXHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIF9yZ2IuciwgX3JnYi5nLCBfcmdiLmIsIGFscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldENsZWFyQ29sb3I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGNsZWFyQ29sb3I7XG5cblx0XHR9LFxuXHRcdHNldENsZWFyQ29sb3I6IGZ1bmN0aW9uICggY29sb3IsIGFscGhhID0gMSApIHtcblxuXHRcdFx0Y2xlYXJDb2xvci5zZXQoIGNvbG9yICk7XG5cdFx0XHRjbGVhckFscGhhID0gYWxwaGE7XG5cdFx0XHRzZXRDbGVhciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApO1xuXG5cdFx0fSxcblx0XHRnZXRDbGVhckFscGhhOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjbGVhckFscGhhO1xuXG5cdFx0fSxcblx0XHRzZXRDbGVhckFscGhhOiBmdW5jdGlvbiAoIGFscGhhICkge1xuXG5cdFx0XHRjbGVhckFscGhhID0gYWxwaGE7XG5cdFx0XHRzZXRDbGVhciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApO1xuXG5cdFx0fSxcblx0XHRyZW5kZXI6IHJlbmRlcixcblx0XHRhZGRUb1JlbmRlckxpc3Q6IGFkZFRvUmVuZGVyTGlzdFxuXG5cdH07XG5cbn1cblxuXG5leHBvcnQgeyBXZWJHTEJhY2tncm91bmQgfTtcbiIsImltcG9ydCB7IEludFR5cGUgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuXG5mdW5jdGlvbiBXZWJHTEJpbmRpbmdTdGF0ZXMoIGdsLCBhdHRyaWJ1dGVzICkge1xuXG5cdGNvbnN0IG1heFZlcnRleEF0dHJpYnV0ZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9WRVJURVhfQVRUUklCUyApO1xuXG5cdGNvbnN0IGJpbmRpbmdTdGF0ZXMgPSB7fTtcblxuXHRjb25zdCBkZWZhdWx0U3RhdGUgPSBjcmVhdGVCaW5kaW5nU3RhdGUoIG51bGwgKTtcblx0bGV0IGN1cnJlbnRTdGF0ZSA9IGRlZmF1bHRTdGF0ZTtcblx0bGV0IGZvcmNlVXBkYXRlID0gZmFsc2U7XG5cblx0ZnVuY3Rpb24gc2V0dXAoIG9iamVjdCwgbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5LCBpbmRleCApIHtcblxuXHRcdGxldCB1cGRhdGVCdWZmZXJzID0gZmFsc2U7XG5cblx0XHRjb25zdCBzdGF0ZSA9IGdldEJpbmRpbmdTdGF0ZSggZ2VvbWV0cnksIHByb2dyYW0sIG1hdGVyaWFsICk7XG5cblx0XHRpZiAoIGN1cnJlbnRTdGF0ZSAhPT0gc3RhdGUgKSB7XG5cblx0XHRcdGN1cnJlbnRTdGF0ZSA9IHN0YXRlO1xuXHRcdFx0YmluZFZlcnRleEFycmF5T2JqZWN0KCBjdXJyZW50U3RhdGUub2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHR1cGRhdGVCdWZmZXJzID0gbmVlZHNVcGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIHByb2dyYW0sIGluZGV4ICk7XG5cblx0XHRpZiAoIHVwZGF0ZUJ1ZmZlcnMgKSBzYXZlQ2FjaGUoIG9iamVjdCwgZ2VvbWV0cnksIHByb2dyYW0sIGluZGV4ICk7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggaW5kZXgsIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHVwZGF0ZUJ1ZmZlcnMgfHwgZm9yY2VVcGRhdGUgKSB7XG5cblx0XHRcdGZvcmNlVXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdHNldHVwVmVydGV4QXR0cmlidXRlcyggb2JqZWN0LCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnkgKTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRnbC5iaW5kQnVmZmVyKCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYXR0cmlidXRlcy5nZXQoIGluZGV4ICkuYnVmZmVyICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlVmVydGV4QXJyYXlPYmplY3QoKSB7XG5cblx0XHRyZXR1cm4gZ2wuY3JlYXRlVmVydGV4QXJyYXkoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYmluZFZlcnRleEFycmF5T2JqZWN0KCB2YW8gKSB7XG5cblx0XHRyZXR1cm4gZ2wuYmluZFZlcnRleEFycmF5KCB2YW8gKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGVsZXRlVmVydGV4QXJyYXlPYmplY3QoIHZhbyApIHtcblxuXHRcdHJldHVybiBnbC5kZWxldGVWZXJ0ZXhBcnJheSggdmFvICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldEJpbmRpbmdTdGF0ZSggZ2VvbWV0cnksIHByb2dyYW0sIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3Qgd2lyZWZyYW1lID0gKCBtYXRlcmlhbC53aXJlZnJhbWUgPT09IHRydWUgKTtcblxuXHRcdGxldCBwcm9ncmFtTWFwID0gYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggcHJvZ3JhbU1hcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwcm9ncmFtTWFwID0ge307XG5cdFx0XHRiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeS5pZCBdID0gcHJvZ3JhbU1hcDtcblxuXHRcdH1cblxuXHRcdGxldCBzdGF0ZU1hcCA9IHByb2dyYW1NYXBbIHByb2dyYW0uaWQgXTtcblxuXHRcdGlmICggc3RhdGVNYXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c3RhdGVNYXAgPSB7fTtcblx0XHRcdHByb2dyYW1NYXBbIHByb2dyYW0uaWQgXSA9IHN0YXRlTWFwO1xuXG5cdFx0fVxuXG5cdFx0bGV0IHN0YXRlID0gc3RhdGVNYXBbIHdpcmVmcmFtZSBdO1xuXG5cdFx0aWYgKCBzdGF0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzdGF0ZSA9IGNyZWF0ZUJpbmRpbmdTdGF0ZSggY3JlYXRlVmVydGV4QXJyYXlPYmplY3QoKSApO1xuXHRcdFx0c3RhdGVNYXBbIHdpcmVmcmFtZSBdID0gc3RhdGU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc3RhdGU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmdTdGF0ZSggdmFvICkge1xuXG5cdFx0Y29uc3QgbmV3QXR0cmlidXRlcyA9IFtdO1xuXHRcdGNvbnN0IGVuYWJsZWRBdHRyaWJ1dGVzID0gW107XG5cdFx0Y29uc3QgYXR0cmlidXRlRGl2aXNvcnMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG1heFZlcnRleEF0dHJpYnV0ZXM7IGkgKysgKSB7XG5cblx0XHRcdG5ld0F0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cdFx0XHRlbmFibGVkQXR0cmlidXRlc1sgaSBdID0gMDtcblx0XHRcdGF0dHJpYnV0ZURpdmlzb3JzWyBpIF0gPSAwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0Ly8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgb24gbm9uLVZBTyBzdXBwb3J0IGJyb3dzZXJcblx0XHRcdGdlb21ldHJ5OiBudWxsLFxuXHRcdFx0cHJvZ3JhbTogbnVsbCxcblx0XHRcdHdpcmVmcmFtZTogZmFsc2UsXG5cblx0XHRcdG5ld0F0dHJpYnV0ZXM6IG5ld0F0dHJpYnV0ZXMsXG5cdFx0XHRlbmFibGVkQXR0cmlidXRlczogZW5hYmxlZEF0dHJpYnV0ZXMsXG5cdFx0XHRhdHRyaWJ1dGVEaXZpc29yczogYXR0cmlidXRlRGl2aXNvcnMsXG5cdFx0XHRvYmplY3Q6IHZhbyxcblx0XHRcdGF0dHJpYnV0ZXM6IHt9LFxuXHRcdFx0aW5kZXg6IG51bGxcblxuXHRcdH07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG5lZWRzVXBkYXRlKCBvYmplY3QsIGdlb21ldHJ5LCBwcm9ncmFtLCBpbmRleCApIHtcblxuXHRcdGNvbnN0IGNhY2hlZEF0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUuYXR0cmlidXRlcztcblx0XHRjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0bGV0IGF0dHJpYnV0ZXNOdW0gPSAwO1xuXG5cdFx0Y29uc3QgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gcHJvZ3JhbUF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1BdHRyaWJ1dGUgPSBwcm9ncmFtQXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRpZiAoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gPj0gMCApIHtcblxuXHRcdFx0XHRjb25zdCBjYWNoZWRBdHRyaWJ1dGUgPSBjYWNoZWRBdHRyaWJ1dGVzWyBuYW1lIF07XG5cdFx0XHRcdGxldCBnZW9tZXRyeUF0dHJpYnV0ZSA9IGdlb21ldHJ5QXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGlmICggbmFtZSA9PT0gJ2luc3RhbmNlTWF0cml4JyAmJiBvYmplY3QuaW5zdGFuY2VNYXRyaXggKSBnZW9tZXRyeUF0dHJpYnV0ZSA9IG9iamVjdC5pbnN0YW5jZU1hdHJpeDtcblx0XHRcdFx0XHRpZiAoIG5hbWUgPT09ICdpbnN0YW5jZUNvbG9yJyAmJiBvYmplY3QuaW5zdGFuY2VDb2xvciApIGdlb21ldHJ5QXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlQ29sb3I7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggY2FjaGVkQXR0cmlidXRlID09PSB1bmRlZmluZWQgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdFx0XHRpZiAoIGNhY2hlZEF0dHJpYnV0ZS5hdHRyaWJ1dGUgIT09IGdlb21ldHJ5QXR0cmlidXRlICkgcmV0dXJuIHRydWU7XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZSAmJiBjYWNoZWRBdHRyaWJ1dGUuZGF0YSAhPT0gZ2VvbWV0cnlBdHRyaWJ1dGUuZGF0YSApIHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdGF0dHJpYnV0ZXNOdW0gKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggY3VycmVudFN0YXRlLmF0dHJpYnV0ZXNOdW0gIT09IGF0dHJpYnV0ZXNOdW0gKSByZXR1cm4gdHJ1ZTtcblxuXHRcdGlmICggY3VycmVudFN0YXRlLmluZGV4ICE9PSBpbmRleCApIHJldHVybiB0cnVlO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzYXZlQ2FjaGUoIG9iamVjdCwgZ2VvbWV0cnksIHByb2dyYW0sIGluZGV4ICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB7fTtcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblx0XHRsZXQgYXR0cmlidXRlc051bSA9IDA7XG5cblx0XHRjb25zdCBwcm9ncmFtQXR0cmlidXRlcyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlcygpO1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBwcm9ncmFtQXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgcHJvZ3JhbUF0dHJpYnV0ZSA9IHByb2dyYW1BdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGlmICggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiA+PSAwICkge1xuXG5cdFx0XHRcdGxldCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGlmICggbmFtZSA9PT0gJ2luc3RhbmNlTWF0cml4JyAmJiBvYmplY3QuaW5zdGFuY2VNYXRyaXggKSBhdHRyaWJ1dGUgPSBvYmplY3QuaW5zdGFuY2VNYXRyaXg7XG5cdFx0XHRcdFx0aWYgKCBuYW1lID09PSAnaW5zdGFuY2VDb2xvcicgJiYgb2JqZWN0Lmluc3RhbmNlQ29sb3IgKSBhdHRyaWJ1dGUgPSBvYmplY3QuaW5zdGFuY2VDb2xvcjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgZGF0YSA9IHt9O1xuXHRcdFx0XHRkYXRhLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcblxuXHRcdFx0XHRpZiAoIGF0dHJpYnV0ZSAmJiBhdHRyaWJ1dGUuZGF0YSApIHtcblxuXHRcdFx0XHRcdGRhdGEuZGF0YSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWNoZVsgbmFtZSBdID0gZGF0YTtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzTnVtICsrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjdXJyZW50U3RhdGUuYXR0cmlidXRlcyA9IGNhY2hlO1xuXHRcdGN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVzTnVtID0gYXR0cmlidXRlc051bTtcblxuXHRcdGN1cnJlbnRTdGF0ZS5pbmRleCA9IGluZGV4O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBpbml0QXR0cmlidXRlcygpIHtcblxuXHRcdGNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUubmV3QXR0cmlidXRlcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBuZXdBdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRuZXdBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBlbmFibGVBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIGF0dHJpYnV0ZSwgMCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBhdHRyaWJ1dGUsIG1lc2hQZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRjb25zdCBuZXdBdHRyaWJ1dGVzID0gY3VycmVudFN0YXRlLm5ld0F0dHJpYnV0ZXM7XG5cdFx0Y29uc3QgZW5hYmxlZEF0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUuZW5hYmxlZEF0dHJpYnV0ZXM7XG5cdFx0Y29uc3QgYXR0cmlidXRlRGl2aXNvcnMgPSBjdXJyZW50U3RhdGUuYXR0cmlidXRlRGl2aXNvcnM7XG5cblx0XHRuZXdBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9IDE7XG5cblx0XHRpZiAoIGVuYWJsZWRBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9PT0gMCApIHtcblxuXHRcdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoIGF0dHJpYnV0ZSApO1xuXHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggYXR0cmlidXRlRGl2aXNvcnNbIGF0dHJpYnV0ZSBdICE9PSBtZXNoUGVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJEaXZpc29yKCBhdHRyaWJ1dGUsIG1lc2hQZXJBdHRyaWJ1dGUgKTtcblx0XHRcdGF0dHJpYnV0ZURpdmlzb3JzWyBhdHRyaWJ1dGUgXSA9IG1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCkge1xuXG5cdFx0Y29uc3QgbmV3QXR0cmlidXRlcyA9IGN1cnJlbnRTdGF0ZS5uZXdBdHRyaWJ1dGVzO1xuXHRcdGNvbnN0IGVuYWJsZWRBdHRyaWJ1dGVzID0gY3VycmVudFN0YXRlLmVuYWJsZWRBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGVuYWJsZWRBdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gIT09IG5ld0F0dHJpYnV0ZXNbIGkgXSApIHtcblxuXHRcdFx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoIGkgKTtcblx0XHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdmVydGV4QXR0cmliUG9pbnRlciggaW5kZXgsIHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIHN0cmlkZSwgb2Zmc2V0LCBpbnRlZ2VyICkge1xuXG5cdFx0aWYgKCBpbnRlZ2VyID09PSB0cnVlICkge1xuXG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJJUG9pbnRlciggaW5kZXgsIHNpemUsIHR5cGUsIHN0cmlkZSwgb2Zmc2V0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBpbmRleCwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgc3RyaWRlLCBvZmZzZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzKCBvYmplY3QsIG1hdGVyaWFsLCBwcm9ncmFtLCBnZW9tZXRyeSApIHtcblxuXHRcdGluaXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0Y29uc3QgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IG1hdGVyaWFsLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIHByb2dyYW1BdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBwcm9ncmFtQXR0cmlidXRlID0gcHJvZ3JhbUF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0aWYgKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uID49IDAgKSB7XG5cblx0XHRcdFx0bGV0IGdlb21ldHJ5QXR0cmlidXRlID0gZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBuYW1lID09PSAnaW5zdGFuY2VNYXRyaXgnICYmIG9iamVjdC5pbnN0YW5jZU1hdHJpeCApIGdlb21ldHJ5QXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlTWF0cml4O1xuXHRcdFx0XHRcdGlmICggbmFtZSA9PT0gJ2luc3RhbmNlQ29sb3InICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICkgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBvYmplY3QuaW5zdGFuY2VDb2xvcjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc3Qgbm9ybWFsaXplZCA9IGdlb21ldHJ5QXR0cmlidXRlLm5vcm1hbGl6ZWQ7XG5cdFx0XHRcdFx0Y29uc3Qgc2l6ZSA9IGdlb21ldHJ5QXR0cmlidXRlLml0ZW1TaXplO1xuXG5cdFx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5QXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHQvLyBUT0RPIEF0dHJpYnV0ZSBtYXkgbm90IGJlIGF2YWlsYWJsZSBvbiBjb250ZXh0IHJlc3RvcmVcblxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGNvbnN0IGJ1ZmZlciA9IGF0dHJpYnV0ZS5idWZmZXI7XG5cdFx0XHRcdFx0Y29uc3QgdHlwZSA9IGF0dHJpYnV0ZS50eXBlO1xuXHRcdFx0XHRcdGNvbnN0IGJ5dGVzUGVyRWxlbWVudCA9IGF0dHJpYnV0ZS5ieXRlc1BlckVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBjaGVjayBmb3IgaW50ZWdlciBhdHRyaWJ1dGVzXG5cblx0XHRcdFx0XHRjb25zdCBpbnRlZ2VyID0gKCB0eXBlID09PSBnbC5JTlQgfHwgdHlwZSA9PT0gZ2wuVU5TSUdORURfSU5UIHx8IGdlb21ldHJ5QXR0cmlidXRlLmdwdVR5cGUgPT09IEludFR5cGUgKTtcblxuXHRcdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZGF0YSA9IGdlb21ldHJ5QXR0cmlidXRlLmRhdGE7XG5cdFx0XHRcdFx0XHRjb25zdCBzdHJpZGUgPSBkYXRhLnN0cmlkZTtcblx0XHRcdFx0XHRcdGNvbnN0IG9mZnNldCA9IGdlb21ldHJ5QXR0cmlidXRlLm9mZnNldDtcblxuXHRcdFx0XHRcdFx0aWYgKCBkYXRhLmlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uICsgaSwgZGF0YS5tZXNoUGVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAhPT0gdHJ1ZSAmJiBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPSBkYXRhLm1lc2hQZXJBdHRyaWJ1dGUgKiBkYXRhLmNvdW50O1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGkgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Z2wuYmluZEJ1ZmZlciggZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIgKTtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmVydGV4QXR0cmliUG9pbnRlcihcblx0XHRcdFx0XHRcdFx0XHRwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uICsgaSxcblx0XHRcdFx0XHRcdFx0XHRzaXplIC8gcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemUsXG5cdFx0XHRcdFx0XHRcdFx0dHlwZSxcblx0XHRcdFx0XHRcdFx0XHRub3JtYWxpemVkLFxuXHRcdFx0XHRcdFx0XHRcdHN0cmlkZSAqIGJ5dGVzUGVyRWxlbWVudCxcblx0XHRcdFx0XHRcdFx0XHQoIG9mZnNldCArICggc2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplICkgKiBpICkgKiBieXRlc1BlckVsZW1lbnQsXG5cdFx0XHRcdFx0XHRcdFx0aW50ZWdlclxuXHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlLmlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksIGdlb21ldHJ5QXR0cmlidXRlLm1lc2hQZXJBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICE9PSB0cnVlICYmIGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCA9IGdlb21ldHJ5QXR0cmlidXRlLm1lc2hQZXJBdHRyaWJ1dGUgKiBnZW9tZXRyeUF0dHJpYnV0ZS5jb3VudDtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRlbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdsLmJpbmRCdWZmZXIoIGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZlcnRleEF0dHJpYlBvaW50ZXIoXG5cdFx0XHRcdFx0XHRcdFx0cHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksXG5cdFx0XHRcdFx0XHRcdFx0c2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGUsXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsaXplZCxcblx0XHRcdFx0XHRcdFx0XHRzaXplICogYnl0ZXNQZXJFbGVtZW50LFxuXHRcdFx0XHRcdFx0XHRcdCggc2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplICkgKiBpICogYnl0ZXNQZXJFbGVtZW50LFxuXHRcdFx0XHRcdFx0XHRcdGludGVnZXJcblx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNbIG5hbWUgXTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0c3dpdGNoICggdmFsdWUubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRnbC52ZXJ0ZXhBdHRyaWIyZnYoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24sIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRcdGdsLnZlcnRleEF0dHJpYjNmdiggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRcdFx0Z2wudmVydGV4QXR0cmliNGZ2KCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0Z2wudmVydGV4QXR0cmliMWZ2KCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uLCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRkaXNhYmxlVW51c2VkQXR0cmlidXRlcygpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0cmVzZXQoKTtcblxuXHRcdGZvciAoIGNvbnN0IGdlb21ldHJ5SWQgaW4gYmluZGluZ1N0YXRlcyApIHtcblxuXHRcdFx0Y29uc3QgcHJvZ3JhbU1hcCA9IGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5SWQgXTtcblxuXHRcdFx0Zm9yICggY29uc3QgcHJvZ3JhbUlkIGluIHByb2dyYW1NYXAgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc3RhdGVNYXAgPSBwcm9ncmFtTWFwWyBwcm9ncmFtSWQgXTtcblxuXHRcdFx0XHRmb3IgKCBjb25zdCB3aXJlZnJhbWUgaW4gc3RhdGVNYXAgKSB7XG5cblx0XHRcdFx0XHRkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApO1xuXG5cdFx0XHRcdFx0ZGVsZXRlIHN0YXRlTWFwWyB3aXJlZnJhbWUgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIHByb2dyYW1NYXBbIHByb2dyYW1JZCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VTdGF0ZXNPZkdlb21ldHJ5KCBnZW9tZXRyeSApIHtcblxuXHRcdGlmICggYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnkuaWQgXSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgcHJvZ3JhbU1hcCA9IGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0XHRmb3IgKCBjb25zdCBwcm9ncmFtSWQgaW4gcHJvZ3JhbU1hcCApIHtcblxuXHRcdFx0Y29uc3Qgc3RhdGVNYXAgPSBwcm9ncmFtTWFwWyBwcm9ncmFtSWQgXTtcblxuXHRcdFx0Zm9yICggY29uc3Qgd2lyZWZyYW1lIGluIHN0YXRlTWFwICkge1xuXG5cdFx0XHRcdGRlbGV0ZVZlcnRleEFycmF5T2JqZWN0KCBzdGF0ZU1hcFsgd2lyZWZyYW1lIF0ub2JqZWN0ICk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0YXRlTWFwWyB3aXJlZnJhbWUgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07XG5cblx0XHR9XG5cblx0XHRkZWxldGUgYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVsZWFzZVN0YXRlc09mUHJvZ3JhbSggcHJvZ3JhbSApIHtcblxuXHRcdGZvciAoIGNvbnN0IGdlb21ldHJ5SWQgaW4gYmluZGluZ1N0YXRlcyApIHtcblxuXHRcdFx0Y29uc3QgcHJvZ3JhbU1hcCA9IGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5SWQgXTtcblxuXHRcdFx0aWYgKCBwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF0gPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHRjb25zdCBzdGF0ZU1hcCA9IHByb2dyYW1NYXBbIHByb2dyYW0uaWQgXTtcblxuXHRcdFx0Zm9yICggY29uc3Qgd2lyZWZyYW1lIGluIHN0YXRlTWFwICkge1xuXG5cdFx0XHRcdGRlbGV0ZVZlcnRleEFycmF5T2JqZWN0KCBzdGF0ZU1hcFsgd2lyZWZyYW1lIF0ub2JqZWN0ICk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0YXRlTWFwWyB3aXJlZnJhbWUgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgcHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZXNldCgpIHtcblxuXHRcdHJlc2V0RGVmYXVsdFN0YXRlKCk7XG5cdFx0Zm9yY2VVcGRhdGUgPSB0cnVlO1xuXG5cdFx0aWYgKCBjdXJyZW50U3RhdGUgPT09IGRlZmF1bHRTdGF0ZSApIHJldHVybjtcblxuXHRcdGN1cnJlbnRTdGF0ZSA9IGRlZmF1bHRTdGF0ZTtcblx0XHRiaW5kVmVydGV4QXJyYXlPYmplY3QoIGN1cnJlbnRTdGF0ZS5vYmplY3QgKTtcblxuXHR9XG5cblx0Ly8gZm9yIGJhY2t3YXJkLWNvbXBhdGliaWxpdHlcblxuXHRmdW5jdGlvbiByZXNldERlZmF1bHRTdGF0ZSgpIHtcblxuXHRcdGRlZmF1bHRTdGF0ZS5nZW9tZXRyeSA9IG51bGw7XG5cdFx0ZGVmYXVsdFN0YXRlLnByb2dyYW0gPSBudWxsO1xuXHRcdGRlZmF1bHRTdGF0ZS53aXJlZnJhbWUgPSBmYWxzZTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHNldHVwOiBzZXR1cCxcblx0XHRyZXNldDogcmVzZXQsXG5cdFx0cmVzZXREZWZhdWx0U3RhdGU6IHJlc2V0RGVmYXVsdFN0YXRlLFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2UsXG5cdFx0cmVsZWFzZVN0YXRlc09mR2VvbWV0cnk6IHJlbGVhc2VTdGF0ZXNPZkdlb21ldHJ5LFxuXHRcdHJlbGVhc2VTdGF0ZXNPZlByb2dyYW06IHJlbGVhc2VTdGF0ZXNPZlByb2dyYW0sXG5cblx0XHRpbml0QXR0cmlidXRlczogaW5pdEF0dHJpYnV0ZXMsXG5cdFx0ZW5hYmxlQXR0cmlidXRlOiBlbmFibGVBdHRyaWJ1dGUsXG5cdFx0ZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXM6IGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzXG5cblx0fTtcblxufVxuXG5cbmV4cG9ydCB7IFdlYkdMQmluZGluZ1N0YXRlcyB9O1xuIiwiZnVuY3Rpb24gV2ViR0xCdWZmZXJSZW5kZXJlciggZ2wsIGV4dGVuc2lvbnMsIGluZm8gKSB7XG5cblx0bGV0IG1vZGU7XG5cblx0ZnVuY3Rpb24gc2V0TW9kZSggdmFsdWUgKSB7XG5cblx0XHRtb2RlID0gdmFsdWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlciggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0Z2wuZHJhd0FycmF5cyggbW9kZSwgc3RhcnQsIGNvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIDEgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVySW5zdGFuY2VzKCBzdGFydCwgY291bnQsIHByaW1jb3VudCApIHtcblxuXHRcdGlmICggcHJpbWNvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Z2wuZHJhd0FycmF5c0luc3RhbmNlZCggbW9kZSwgc3RhcnQsIGNvdW50LCBwcmltY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgcHJpbWNvdW50ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck11bHRpRHJhdyggc3RhcnRzLCBjb3VudHMsIGRyYXdDb3VudCApIHtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApO1xuXHRcdGV4dGVuc2lvbi5tdWx0aURyYXdBcnJheXNXRUJHTCggbW9kZSwgc3RhcnRzLCAwLCBjb3VudHMsIDAsIGRyYXdDb3VudCApO1xuXG5cdFx0bGV0IGVsZW1lbnRDb3VudCA9IDA7XG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZHJhd0NvdW50OyBpICsrICkge1xuXG5cdFx0XHRlbGVtZW50Q291bnQgKz0gY291bnRzWyBpIF07XG5cblx0XHR9XG5cblx0XHRpbmZvLnVwZGF0ZSggZWxlbWVudENvdW50LCBtb2RlLCAxICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck11bHRpRHJhd0luc3RhbmNlcyggc3RhcnRzLCBjb3VudHMsIGRyYXdDb3VudCwgcHJpbWNvdW50ICkge1xuXG5cdFx0aWYgKCBkcmF3Q291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHRjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX211bHRpX2RyYXcnICk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbiA9PT0gbnVsbCApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgc3RhcnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRyZW5kZXJJbnN0YW5jZXMoIHN0YXJ0c1sgaSBdLCBjb3VudHNbIGkgXSwgcHJpbWNvdW50WyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZXh0ZW5zaW9uLm11bHRpRHJhd0FycmF5c0luc3RhbmNlZFdFQkdMKCBtb2RlLCBzdGFydHMsIDAsIGNvdW50cywgMCwgcHJpbWNvdW50LCAwLCBkcmF3Q291bnQgKTtcblxuXHRcdFx0bGV0IGVsZW1lbnRDb3VudCA9IDA7XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0ZWxlbWVudENvdW50ICs9IGNvdW50c1sgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByaW1jb3VudC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0aW5mby51cGRhdGUoIGVsZW1lbnRDb3VudCwgbW9kZSwgcHJpbWNvdW50WyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMucmVuZGVyID0gcmVuZGVyO1xuXHR0aGlzLnJlbmRlckluc3RhbmNlcyA9IHJlbmRlckluc3RhbmNlcztcblx0dGhpcy5yZW5kZXJNdWx0aURyYXcgPSByZW5kZXJNdWx0aURyYXc7XG5cdHRoaXMucmVuZGVyTXVsdGlEcmF3SW5zdGFuY2VzID0gcmVuZGVyTXVsdGlEcmF3SW5zdGFuY2VzO1xuXG59XG5cblxuZXhwb3J0IHsgV2ViR0xCdWZmZXJSZW5kZXJlciB9O1xuIiwiaW1wb3J0IHsgRmxvYXRUeXBlLCBIYWxmRmxvYXRUeXBlLCBSR0JBRm9ybWF0LCBVbnNpZ25lZEJ5dGVUeXBlIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcblxuZnVuY3Rpb24gV2ViR0xDYXBhYmlsaXRpZXMoIGdsLCBleHRlbnNpb25zLCBwYXJhbWV0ZXJzLCB1dGlscyApIHtcblxuXHRsZXQgbWF4QW5pc290cm9weTtcblxuXHRmdW5jdGlvbiBnZXRNYXhBbmlzb3Ryb3B5KCkge1xuXG5cdFx0aWYgKCBtYXhBbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSByZXR1cm4gbWF4QW5pc290cm9weTtcblxuXHRcdGlmICggZXh0ZW5zaW9ucy5oYXMoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICkgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApO1xuXG5cdFx0XHRtYXhBbmlzb3Ryb3B5ID0gZ2wuZ2V0UGFyYW1ldGVyKCBleHRlbnNpb24uTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRtYXhBbmlzb3Ryb3B5ID0gMDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXhBbmlzb3Ryb3B5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXh0dXJlRm9ybWF0UmVhZGFibGUoIHRleHR1cmVGb3JtYXQgKSB7XG5cblx0XHRpZiAoIHRleHR1cmVGb3JtYXQgIT09IFJHQkFGb3JtYXQgJiYgdXRpbHMuY29udmVydCggdGV4dHVyZUZvcm1hdCApICE9PSBnbC5nZXRQYXJhbWV0ZXIoIGdsLklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfRk9STUFUICkgKSB7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXh0dXJlVHlwZVJlYWRhYmxlKCB0ZXh0dXJlVHlwZSApIHtcblxuXHRcdGNvbnN0IGhhbGZGbG9hdFN1cHBvcnRlZEJ5RXh0ID0gKCB0ZXh0dXJlVHlwZSA9PT0gSGFsZkZsb2F0VHlwZSApICYmICggZXh0ZW5zaW9ucy5oYXMoICdFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5oYXMoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApICk7XG5cblx0XHRpZiAoIHRleHR1cmVUeXBlICE9PSBVbnNpZ25lZEJ5dGVUeXBlICYmIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVUeXBlICkgIT09IGdsLmdldFBhcmFtZXRlciggZ2wuSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9UWVBFICkgJiYgLy8gRWRnZSBhbmQgQ2hyb21lIE1hYyA8IDUyICgjOTUxMylcblx0XHRcdHRleHR1cmVUeXBlICE9PSBGbG9hdFR5cGUgJiYgISBoYWxmRmxvYXRTdXBwb3J0ZWRCeUV4dCApIHtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldE1heFByZWNpc2lvbiggcHJlY2lzaW9uICkge1xuXG5cdFx0aWYgKCBwcmVjaXNpb24gPT09ICdoaWdocCcgKSB7XG5cblx0XHRcdGlmICggZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCBnbC5WRVJURVhfU0hBREVSLCBnbC5ISUdIX0ZMT0FUICkucHJlY2lzaW9uID4gMCAmJlxuXHRcdFx0XHRnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIGdsLkZSQUdNRU5UX1NIQURFUiwgZ2wuSElHSF9GTE9BVCApLnByZWNpc2lvbiA+IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuICdoaWdocCc7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJlY2lzaW9uID0gJ21lZGl1bXAnO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwcmVjaXNpb24gPT09ICdtZWRpdW1wJyApIHtcblxuXHRcdFx0aWYgKCBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIGdsLlZFUlRFWF9TSEFERVIsIGdsLk1FRElVTV9GTE9BVCApLnByZWNpc2lvbiA+IDAgJiZcblx0XHRcdFx0Z2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCBnbC5GUkFHTUVOVF9TSEFERVIsIGdsLk1FRElVTV9GTE9BVCApLnByZWNpc2lvbiA+IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuICdtZWRpdW1wJztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuICdsb3dwJztcblxuXHR9XG5cblx0bGV0IHByZWNpc2lvbiA9IHBhcmFtZXRlcnMucHJlY2lzaW9uICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZWNpc2lvbiA6ICdoaWdocCc7XG5cdGNvbnN0IG1heFByZWNpc2lvbiA9IGdldE1heFByZWNpc2lvbiggcHJlY2lzaW9uICk7XG5cblx0aWYgKCBtYXhQcmVjaXNpb24gIT09IHByZWNpc2lvbiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6JywgcHJlY2lzaW9uLCAnbm90IHN1cHBvcnRlZCwgdXNpbmcnLCBtYXhQcmVjaXNpb24sICdpbnN0ZWFkLicgKTtcblx0XHRwcmVjaXNpb24gPSBtYXhQcmVjaXNpb247XG5cblx0fVxuXG5cdGNvbnN0IGxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPSBwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPT09IHRydWU7XG5cblx0Y29uc3QgbWF4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTICk7XG5cdGNvbnN0IG1heFZlcnRleFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkVSVEVYX1RFWFRVUkVfSU1BR0VfVU5JVFMgKTtcblx0Y29uc3QgbWF4VGV4dHVyZVNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9URVhUVVJFX1NJWkUgKTtcblx0Y29uc3QgbWF4Q3ViZW1hcFNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9DVUJFX01BUF9URVhUVVJFX1NJWkUgKTtcblxuXHRjb25zdCBtYXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkVSVEVYX0FUVFJJQlMgKTtcblx0Y29uc3QgbWF4VmVydGV4VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTICk7XG5cdGNvbnN0IG1heFZhcnlpbmdzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkFSWUlOR19WRUNUT1JTICk7XG5cdGNvbnN0IG1heEZyYWdtZW50VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9GUkFHTUVOVF9VTklGT1JNX1ZFQ1RPUlMgKTtcblxuXHRjb25zdCB2ZXJ0ZXhUZXh0dXJlcyA9IG1heFZlcnRleFRleHR1cmVzID4gMDtcblxuXHRjb25zdCBtYXhTYW1wbGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfU0FNUExFUyApO1xuXG5cdHJldHVybiB7XG5cblx0XHRpc1dlYkdMMjogdHJ1ZSwgLy8ga2VlcGluZyB0aGlzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXG5cdFx0Z2V0TWF4QW5pc290cm9weTogZ2V0TWF4QW5pc290cm9weSxcblx0XHRnZXRNYXhQcmVjaXNpb246IGdldE1heFByZWNpc2lvbixcblxuXHRcdHRleHR1cmVGb3JtYXRSZWFkYWJsZTogdGV4dHVyZUZvcm1hdFJlYWRhYmxlLFxuXHRcdHRleHR1cmVUeXBlUmVhZGFibGU6IHRleHR1cmVUeXBlUmVhZGFibGUsXG5cblx0XHRwcmVjaXNpb246IHByZWNpc2lvbixcblx0XHRsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxuXG5cdFx0bWF4VGV4dHVyZXM6IG1heFRleHR1cmVzLFxuXHRcdG1heFZlcnRleFRleHR1cmVzOiBtYXhWZXJ0ZXhUZXh0dXJlcyxcblx0XHRtYXhUZXh0dXJlU2l6ZTogbWF4VGV4dHVyZVNpemUsXG5cdFx0bWF4Q3ViZW1hcFNpemU6IG1heEN1YmVtYXBTaXplLFxuXG5cdFx0bWF4QXR0cmlidXRlczogbWF4QXR0cmlidXRlcyxcblx0XHRtYXhWZXJ0ZXhVbmlmb3JtczogbWF4VmVydGV4VW5pZm9ybXMsXG5cdFx0bWF4VmFyeWluZ3M6IG1heFZhcnlpbmdzLFxuXHRcdG1heEZyYWdtZW50VW5pZm9ybXM6IG1heEZyYWdtZW50VW5pZm9ybXMsXG5cblx0XHR2ZXJ0ZXhUZXh0dXJlczogdmVydGV4VGV4dHVyZXMsXG5cblx0XHRtYXhTYW1wbGVzOiBtYXhTYW1wbGVzXG5cblx0fTtcblxufVxuXG5cbmV4cG9ydCB7IFdlYkdMQ2FwYWJpbGl0aWVzIH07XG4iLCJpbXBvcnQgeyBNYXRyaXgzIH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXgzLmpzJztcbmltcG9ydCB7IFBsYW5lIH0gZnJvbSAnLi4vLi4vbWF0aC9QbGFuZS5qcyc7XG5cbmZ1bmN0aW9uIFdlYkdMQ2xpcHBpbmcoIHByb3BlcnRpZXMgKSB7XG5cblx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdGxldCBnbG9iYWxTdGF0ZSA9IG51bGwsXG5cdFx0bnVtR2xvYmFsUGxhbmVzID0gMCxcblx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLFxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSBmYWxzZTtcblxuXHRjb25zdCBwbGFuZSA9IG5ldyBQbGFuZSgpLFxuXHRcdHZpZXdOb3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLFxuXG5cdFx0dW5pZm9ybSA9IHsgdmFsdWU6IG51bGwsIG5lZWRzVXBkYXRlOiBmYWxzZSB9O1xuXG5cdHRoaXMudW5pZm9ybSA9IHVuaWZvcm07XG5cdHRoaXMubnVtUGxhbmVzID0gMDtcblx0dGhpcy5udW1JbnRlcnNlY3Rpb24gPSAwO1xuXG5cdHRoaXMuaW5pdCA9IGZ1bmN0aW9uICggcGxhbmVzLCBlbmFibGVMb2NhbENsaXBwaW5nICkge1xuXG5cdFx0Y29uc3QgZW5hYmxlZCA9XG5cdFx0XHRwbGFuZXMubGVuZ3RoICE9PSAwIHx8XG5cdFx0XHRlbmFibGVMb2NhbENsaXBwaW5nIHx8XG5cdFx0XHQvLyBlbmFibGUgc3RhdGUgb2YgcHJldmlvdXMgZnJhbWUgLSB0aGUgY2xpcHBpbmcgY29kZSBoYXMgdG9cblx0XHRcdC8vIHJ1biBhbm90aGVyIGZyYW1lIGluIG9yZGVyIHRvIHJlc2V0IHRoZSBzdGF0ZTpcblx0XHRcdG51bUdsb2JhbFBsYW5lcyAhPT0gMCB8fFxuXHRcdFx0bG9jYWxDbGlwcGluZ0VuYWJsZWQ7XG5cblx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGVuYWJsZUxvY2FsQ2xpcHBpbmc7XG5cblx0XHRudW1HbG9iYWxQbGFuZXMgPSBwbGFuZXMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIGVuYWJsZWQ7XG5cblx0fTtcblxuXHR0aGlzLmJlZ2luU2hhZG93cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSB0cnVlO1xuXHRcdHByb2plY3RQbGFuZXMoIG51bGwgKTtcblxuXHR9O1xuXG5cdHRoaXMuZW5kU2hhZG93cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSBmYWxzZTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0R2xvYmFsU3RhdGUgPSBmdW5jdGlvbiAoIHBsYW5lcywgY2FtZXJhICkge1xuXG5cdFx0Z2xvYmFsU3RhdGUgPSBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgMCApO1xuXG5cdH07XG5cblx0dGhpcy5zZXRTdGF0ZSA9IGZ1bmN0aW9uICggbWF0ZXJpYWwsIGNhbWVyYSwgdXNlQ2FjaGUgKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcyxcblx0XHRcdGNsaXBJbnRlcnNlY3Rpb24gPSBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uLFxuXHRcdFx0Y2xpcFNoYWRvd3MgPSBtYXRlcmlhbC5jbGlwU2hhZG93cztcblxuXHRcdGNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXG5cdFx0aWYgKCAhIGxvY2FsQ2xpcHBpbmdFbmFibGVkIHx8IHBsYW5lcyA9PT0gbnVsbCB8fCBwbGFuZXMubGVuZ3RoID09PSAwIHx8IHJlbmRlcmluZ1NoYWRvd3MgJiYgISBjbGlwU2hhZG93cyApIHtcblxuXHRcdFx0Ly8gdGhlcmUncyBubyBsb2NhbCBjbGlwcGluZ1xuXG5cdFx0XHRpZiAoIHJlbmRlcmluZ1NoYWRvd3MgKSB7XG5cblx0XHRcdFx0Ly8gdGhlcmUncyBubyBnbG9iYWwgY2xpcHBpbmdcblxuXHRcdFx0XHRwcm9qZWN0UGxhbmVzKCBudWxsICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVzZXRHbG9iYWxTdGF0ZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBuR2xvYmFsID0gcmVuZGVyaW5nU2hhZG93cyA/IDAgOiBudW1HbG9iYWxQbGFuZXMsXG5cdFx0XHRcdGxHbG9iYWwgPSBuR2xvYmFsICogNDtcblxuXHRcdFx0bGV0IGRzdEFycmF5ID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmNsaXBwaW5nU3RhdGUgfHwgbnVsbDtcblxuXHRcdFx0dW5pZm9ybS52YWx1ZSA9IGRzdEFycmF5OyAvLyBlbnN1cmUgdW5pcXVlIHN0YXRlXG5cblx0XHRcdGRzdEFycmF5ID0gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIGxHbG9iYWwsIHVzZUNhY2hlICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbEdsb2JhbDsgKysgaSApIHtcblxuXHRcdFx0XHRkc3RBcnJheVsgaSBdID0gZ2xvYmFsU3RhdGVbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuY2xpcHBpbmdTdGF0ZSA9IGRzdEFycmF5O1xuXHRcdFx0dGhpcy5udW1JbnRlcnNlY3Rpb24gPSBjbGlwSW50ZXJzZWN0aW9uID8gdGhpcy5udW1QbGFuZXMgOiAwO1xuXHRcdFx0dGhpcy5udW1QbGFuZXMgKz0gbkdsb2JhbDtcblxuXHRcdH1cblxuXG5cdH07XG5cblx0ZnVuY3Rpb24gcmVzZXRHbG9iYWxTdGF0ZSgpIHtcblxuXHRcdGlmICggdW5pZm9ybS52YWx1ZSAhPT0gZ2xvYmFsU3RhdGUgKSB7XG5cblx0XHRcdHVuaWZvcm0udmFsdWUgPSBnbG9iYWxTdGF0ZTtcblx0XHRcdHVuaWZvcm0ubmVlZHNVcGRhdGUgPSBudW1HbG9iYWxQbGFuZXMgPiAwO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUubnVtUGxhbmVzID0gbnVtR2xvYmFsUGxhbmVzO1xuXHRcdHNjb3BlLm51bUludGVyc2VjdGlvbiA9IDA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHByb2plY3RQbGFuZXMoIHBsYW5lcywgY2FtZXJhLCBkc3RPZmZzZXQsIHNraXBUcmFuc2Zvcm0gKSB7XG5cblx0XHRjb25zdCBuUGxhbmVzID0gcGxhbmVzICE9PSBudWxsID8gcGxhbmVzLmxlbmd0aCA6IDA7XG5cdFx0bGV0IGRzdEFycmF5ID0gbnVsbDtcblxuXHRcdGlmICggblBsYW5lcyAhPT0gMCApIHtcblxuXHRcdFx0ZHN0QXJyYXkgPSB1bmlmb3JtLnZhbHVlO1xuXG5cdFx0XHRpZiAoIHNraXBUcmFuc2Zvcm0gIT09IHRydWUgfHwgZHN0QXJyYXkgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc3QgZmxhdFNpemUgPSBkc3RPZmZzZXQgKyBuUGxhbmVzICogNCxcblx0XHRcdFx0XHR2aWV3TWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcblxuXHRcdFx0XHR2aWV3Tm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGlmICggZHN0QXJyYXkgPT09IG51bGwgfHwgZHN0QXJyYXkubGVuZ3RoIDwgZmxhdFNpemUgKSB7XG5cblx0XHRcdFx0XHRkc3RBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIGZsYXRTaXplICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaTQgPSBkc3RPZmZzZXQ7IGkgIT09IG5QbGFuZXM7ICsrIGksIGk0ICs9IDQgKSB7XG5cblx0XHRcdFx0XHRwbGFuZS5jb3B5KCBwbGFuZXNbIGkgXSApLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCwgdmlld05vcm1hbE1hdHJpeCApO1xuXG5cdFx0XHRcdFx0cGxhbmUubm9ybWFsLnRvQXJyYXkoIGRzdEFycmF5LCBpNCApO1xuXHRcdFx0XHRcdGRzdEFycmF5WyBpNCArIDMgXSA9IHBsYW5lLmNvbnN0YW50O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7XG5cdFx0XHR1bmlmb3JtLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm51bVBsYW5lcyA9IG5QbGFuZXM7XG5cdFx0c2NvcGUubnVtSW50ZXJzZWN0aW9uID0gMDtcblxuXHRcdHJldHVybiBkc3RBcnJheTtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBXZWJHTENsaXBwaW5nIH07XG4iLCJpbXBvcnQgeyBDdWJlUmVmbGVjdGlvbk1hcHBpbmcsIEN1YmVSZWZyYWN0aW9uTWFwcGluZywgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IFdlYkdMQ3ViZVJlbmRlclRhcmdldCB9IGZyb20gJy4uL1dlYkdMQ3ViZVJlbmRlclRhcmdldC5qcyc7XG5cbmZ1bmN0aW9uIFdlYkdMQ3ViZU1hcHMoIHJlbmRlcmVyICkge1xuXG5cdGxldCBjdWJlbWFwcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gbWFwVGV4dHVyZU1hcHBpbmcoIHRleHR1cmUsIG1hcHBpbmcgKSB7XG5cblx0XHRpZiAoIG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nICkge1xuXG5cdFx0XHR0ZXh0dXJlLm1hcHBpbmcgPSBDdWJlUmVmbGVjdGlvbk1hcHBpbmc7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApIHtcblxuXHRcdFx0dGV4dHVyZS5tYXBwaW5nID0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldCggdGV4dHVyZSApIHtcblxuXHRcdGlmICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc3QgbWFwcGluZyA9IHRleHR1cmUubWFwcGluZztcblxuXHRcdFx0aWYgKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApIHtcblxuXHRcdFx0XHRpZiAoIGN1YmVtYXBzLmhhcyggdGV4dHVyZSApICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgY3ViZW1hcCA9IGN1YmVtYXBzLmdldCggdGV4dHVyZSApLnRleHR1cmU7XG5cdFx0XHRcdFx0cmV0dXJuIG1hcFRleHR1cmVNYXBwaW5nKCBjdWJlbWFwLCB0ZXh0dXJlLm1hcHBpbmcgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc3QgaW1hZ2UgPSB0ZXh0dXJlLmltYWdlO1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZSAmJiBpbWFnZS5oZWlnaHQgPiAwICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0KCBpbWFnZS5oZWlnaHQgKTtcblx0XHRcdFx0XHRcdHJlbmRlclRhcmdldC5mcm9tRXF1aXJlY3Rhbmd1bGFyVGV4dHVyZSggcmVuZGVyZXIsIHRleHR1cmUgKTtcblx0XHRcdFx0XHRcdGN1YmVtYXBzLnNldCggdGV4dHVyZSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0XHRcdHRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiBtYXBUZXh0dXJlTWFwcGluZyggcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHRleHR1cmUubWFwcGluZyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gaW1hZ2Ugbm90IHlldCByZWFkeS4gdHJ5IHRoZSBjb252ZXJzaW9uIG5leHQgZnJhbWVcblxuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25UZXh0dXJlRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0dGV4dHVyZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UgKTtcblxuXHRcdGNvbnN0IGN1YmVtYXAgPSBjdWJlbWFwcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggY3ViZW1hcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjdWJlbWFwcy5kZWxldGUoIHRleHR1cmUgKTtcblx0XHRcdGN1YmVtYXAuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0Y3ViZW1hcHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdldDogZ2V0LFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2Vcblx0fTtcblxufVxuXG5leHBvcnQgeyBXZWJHTEN1YmVNYXBzIH07XG4iLCJpbXBvcnQgeyBDYW1lcmEgfSBmcm9tICcuL0NhbWVyYS5qcyc7XG5cbmNsYXNzIE9ydGhvZ3JhcGhpY0NhbWVyYSBleHRlbmRzIENhbWVyYSB7XG5cblx0Y29uc3RydWN0b3IoIGxlZnQgPSAtIDEsIHJpZ2h0ID0gMSwgdG9wID0gMSwgYm90dG9tID0gLSAxLCBuZWFyID0gMC4xLCBmYXIgPSAyMDAwICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNPcnRob2dyYXBoaWNDYW1lcmEgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ09ydGhvZ3JhcGhpY0NhbWVyYSc7XG5cblx0XHR0aGlzLnpvb20gPSAxO1xuXHRcdHRoaXMudmlldyA9IG51bGw7XG5cblx0XHR0aGlzLmxlZnQgPSBsZWZ0O1xuXHRcdHRoaXMucmlnaHQgPSByaWdodDtcblx0XHR0aGlzLnRvcCA9IHRvcDtcblx0XHR0aGlzLmJvdHRvbSA9IGJvdHRvbTtcblxuXHRcdHRoaXMubmVhciA9IG5lYXI7XG5cdFx0dGhpcy5mYXIgPSBmYXI7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5sZWZ0ID0gc291cmNlLmxlZnQ7XG5cdFx0dGhpcy5yaWdodCA9IHNvdXJjZS5yaWdodDtcblx0XHR0aGlzLnRvcCA9IHNvdXJjZS50b3A7XG5cdFx0dGhpcy5ib3R0b20gPSBzb3VyY2UuYm90dG9tO1xuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xuXHRcdHRoaXMuZmFyID0gc291cmNlLmZhcjtcblxuXHRcdHRoaXMuem9vbSA9IHNvdXJjZS56b29tO1xuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGlmICggdGhpcy52aWV3ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcgPSB7XG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXG5cdFx0XHRcdGZ1bGxXaWR0aDogMSxcblx0XHRcdFx0ZnVsbEhlaWdodDogMSxcblx0XHRcdFx0b2Zmc2V0WDogMCxcblx0XHRcdFx0b2Zmc2V0WTogMCxcblx0XHRcdFx0d2lkdGg6IDEsXG5cdFx0XHRcdGhlaWdodDogMVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlldy5lbmFibGVkID0gdHJ1ZTtcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xuXHRcdHRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WCA9IHg7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xuXHRcdHRoaXMudmlldy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMudmlldy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0Y2xlYXJWaWV3T2Zmc2V0KCkge1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0dXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHtcblxuXHRcdGNvbnN0IGR4ID0gKCB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0ICkgLyAoIDIgKiB0aGlzLnpvb20gKTtcblx0XHRjb25zdCBkeSA9ICggdGhpcy50b3AgLSB0aGlzLmJvdHRvbSApIC8gKCAyICogdGhpcy56b29tICk7XG5cdFx0Y29uc3QgY3ggPSAoIHRoaXMucmlnaHQgKyB0aGlzLmxlZnQgKSAvIDI7XG5cdFx0Y29uc3QgY3kgPSAoIHRoaXMudG9wICsgdGhpcy5ib3R0b20gKSAvIDI7XG5cblx0XHRsZXQgbGVmdCA9IGN4IC0gZHg7XG5cdFx0bGV0IHJpZ2h0ID0gY3ggKyBkeDtcblx0XHRsZXQgdG9wID0gY3kgKyBkeTtcblx0XHRsZXQgYm90dG9tID0gY3kgLSBkeTtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICYmIHRoaXMudmlldy5lbmFibGVkICkge1xuXG5cdFx0XHRjb25zdCBzY2FsZVcgPSAoIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQgKSAvIHRoaXMudmlldy5mdWxsV2lkdGggLyB0aGlzLnpvb207XG5cdFx0XHRjb25zdCBzY2FsZUggPSAoIHRoaXMudG9wIC0gdGhpcy5ib3R0b20gKSAvIHRoaXMudmlldy5mdWxsSGVpZ2h0IC8gdGhpcy56b29tO1xuXG5cdFx0XHRsZWZ0ICs9IHNjYWxlVyAqIHRoaXMudmlldy5vZmZzZXRYO1xuXHRcdFx0cmlnaHQgPSBsZWZ0ICsgc2NhbGVXICogdGhpcy52aWV3LndpZHRoO1xuXHRcdFx0dG9wIC09IHNjYWxlSCAqIHRoaXMudmlldy5vZmZzZXRZO1xuXHRcdFx0Ym90dG9tID0gdG9wIC0gc2NhbGVIICogdGhpcy52aWV3LmhlaWdodDtcblxuXHRcdH1cblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlT3J0aG9ncmFwaGljKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIHRoaXMubmVhciwgdGhpcy5mYXIsIHRoaXMuY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCB0aGlzLnByb2plY3Rpb25NYXRyaXggKS5pbnZlcnQoKTtcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTtcblx0XHRkYXRhLm9iamVjdC5sZWZ0ID0gdGhpcy5sZWZ0O1xuXHRcdGRhdGEub2JqZWN0LnJpZ2h0ID0gdGhpcy5yaWdodDtcblx0XHRkYXRhLm9iamVjdC50b3AgPSB0aGlzLnRvcDtcblx0XHRkYXRhLm9iamVjdC5ib3R0b20gPSB0aGlzLmJvdHRvbTtcblx0XHRkYXRhLm9iamVjdC5uZWFyID0gdGhpcy5uZWFyO1xuXHRcdGRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyO1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSBkYXRhLm9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMudmlldyApO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IE9ydGhvZ3JhcGhpY0NhbWVyYSB9O1xuIiwiaW1wb3J0IHtcblx0Q3ViZVJlZmxlY3Rpb25NYXBwaW5nLFxuXHRDdWJlUmVmcmFjdGlvbk1hcHBpbmcsXG5cdEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLFxuXHRMaW5lYXJGaWx0ZXIsXG5cdE5vVG9uZU1hcHBpbmcsXG5cdE5vQmxlbmRpbmcsXG5cdFJHQkFGb3JtYXQsXG5cdEhhbGZGbG9hdFR5cGUsXG5cdEJhY2tTaWRlLFxuXHRMaW5lYXJTUkdCQ29sb3JTcGFjZVxufSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuXG5pbXBvcnQgeyBCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL29iamVjdHMvTWVzaC5qcyc7XG5pbXBvcnQgeyBPcnRob2dyYXBoaWNDYW1lcmEgfSBmcm9tICcuLi9jYW1lcmFzL09ydGhvZ3JhcGhpY0NhbWVyYS5qcyc7XG5pbXBvcnQgeyBQZXJzcGVjdGl2ZUNhbWVyYSB9IGZyb20gJy4uL2NhbWVyYXMvUGVyc3BlY3RpdmVDYW1lcmEuanMnO1xuaW1wb3J0IHsgU2hhZGVyTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvU2hhZGVyTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xuaW1wb3J0IHsgV2ViR0xSZW5kZXJUYXJnZXQgfSBmcm9tICcuLi9yZW5kZXJlcnMvV2ViR0xSZW5kZXJUYXJnZXQuanMnO1xuaW1wb3J0IHsgTWVzaEJhc2ljTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvTWVzaEJhc2ljTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQm94R2VvbWV0cnkgfSBmcm9tICcuLi9nZW9tZXRyaWVzL0JveEdlb21ldHJ5LmpzJztcblxuY29uc3QgTE9EX01JTiA9IDQ7XG5cbi8vIFRoZSBzdGFuZGFyZCBkZXZpYXRpb25zIChyYWRpYW5zKSBhc3NvY2lhdGVkIHdpdGggdGhlIGV4dHJhIG1pcHMuIFRoZXNlIGFyZVxuLy8gY2hvc2VuIHRvIGFwcHJveGltYXRlIGEgVHJvd2JyaWRnZS1SZWl0eiBkaXN0cmlidXRpb24gZnVuY3Rpb24gdGltZXMgdGhlXG4vLyBnZW9tZXRyaWMgc2hhZG93aW5nIGZ1bmN0aW9uLiBUaGVzZSBzaWdtYSB2YWx1ZXMgc3F1YXJlZCBtdXN0IG1hdGNoIHRoZVxuLy8gdmFyaWFuY2UgI2RlZmluZXMgaW4gY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50Lmdsc2wuanMuXG5jb25zdCBFWFRSQV9MT0RfU0lHTUEgPSBbIDAuMTI1LCAwLjIxNSwgMC4zNSwgMC40NDYsIDAuNTI2LCAwLjU4MiBdO1xuXG4vLyBUaGUgbWF4aW11bSBsZW5ndGggb2YgdGhlIGJsdXIgZm9yIGxvb3AuIFNtYWxsZXIgc2lnbWFzIHdpbGwgdXNlIGZld2VyXG4vLyBzYW1wbGVzIGFuZCBleGl0IGVhcmx5LCBidXQgbm90IHJlY29tcGlsZSB0aGUgc2hhZGVyLlxuY29uc3QgTUFYX1NBTVBMRVMgPSAyMDtcblxuY29uc3QgX2ZsYXRDYW1lcmEgPSAvKkBfX1BVUkVfXyovIG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoKTtcbmNvbnN0IF9jbGVhckNvbG9yID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTtcbmxldCBfb2xkVGFyZ2V0ID0gbnVsbDtcbmxldCBfb2xkQWN0aXZlQ3ViZUZhY2UgPSAwO1xubGV0IF9vbGRBY3RpdmVNaXBtYXBMZXZlbCA9IDA7XG5sZXQgX29sZFhyRW5hYmxlZCA9IGZhbHNlO1xuXG4vLyBHb2xkZW4gUmF0aW9cbmNvbnN0IFBISSA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuY29uc3QgSU5WX1BISSA9IDEgLyBQSEk7XG5cbi8vIFZlcnRpY2VzIG9mIGEgZG9kZWNhaGVkcm9uIChleGNlcHQgdGhlIG9wcG9zaXRlcywgd2hpY2ggcmVwcmVzZW50IHRoZVxuLy8gc2FtZSBheGlzKSwgdXNlZCBhcyBheGlzIGRpcmVjdGlvbnMgZXZlbmx5IHNwcmVhZCBvbiBhIHNwaGVyZS5cbmNvbnN0IF9heGlzRGlyZWN0aW9ucyA9IFtcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLSBQSEksIElOVl9QSEksIDAgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggUEhJLCBJTlZfUEhJLCAwICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIC0gSU5WX1BISSwgMCwgUEhJICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIElOVl9QSEksIDAsIFBISSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCBQSEksIC0gSU5WX1BISSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCBQSEksIElOVl9QSEkgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLSAxLCAxLCAtIDEgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMSwgLSAxICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIC0gMSwgMSwgMSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAxLCAxLCAxICkgXTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGdlbmVyYXRlcyBhIFByZWZpbHRlcmVkLCBNaXBtYXBwZWQgUmFkaWFuY2UgRW52aXJvbm1lbnQgTWFwXG4gKiAoUE1SRU0pIGZyb20gYSBjdWJlTWFwIGVudmlyb25tZW50IHRleHR1cmUuIFRoaXMgYWxsb3dzIGRpZmZlcmVudCBsZXZlbHMgb2ZcbiAqIGJsdXIgdG8gYmUgcXVpY2tseSBhY2Nlc3NlZCBiYXNlZCBvbiBtYXRlcmlhbCByb3VnaG5lc3MuIEl0IGlzIHBhY2tlZCBpbnRvIGFcbiAqIHNwZWNpYWwgQ3ViZVVWIGZvcm1hdCB0aGF0IGFsbG93cyB1cyB0byBwZXJmb3JtIGN1c3RvbSBpbnRlcnBvbGF0aW9uIHNvIHRoYXRcbiAqIHdlIGNhbiBzdXBwb3J0IG5vbmxpbmVhciBmb3JtYXRzIHN1Y2ggYXMgUkdCRS4gVW5saWtlIGEgdHJhZGl0aW9uYWwgbWlwbWFwXG4gKiBjaGFpbiwgaXQgb25seSBnb2VzIGRvd24gdG8gdGhlIExPRF9NSU4gbGV2ZWwgKGFib3ZlKSwgYW5kIHRoZW4gY3JlYXRlcyBleHRyYVxuICogZXZlbiBtb3JlIGZpbHRlcmVkICdtaXBzJyBhdCB0aGUgc2FtZSBMT0RfTUlOIHJlc29sdXRpb24sIGFzc29jaWF0ZWQgd2l0aFxuICogaGlnaGVyIHJvdWdobmVzcyBsZXZlbHMuIEluIHRoaXMgd2F5IHdlIG1haW50YWluIHJlc29sdXRpb24gdG8gc21vb3RobHlcbiAqIGludGVycG9sYXRlIGRpZmZ1c2UgbGlnaHRpbmcgd2hpbGUgbGltaXRpbmcgc2FtcGxpbmcgY29tcHV0YXRpb24uXG4gKlxuICogUGFwZXI6IEZhc3QsIEFjY3VyYXRlIEltYWdlLUJhc2VkIExpZ2h0aW5nXG4gKiBodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzE1eThyX1VwS2xVOVN2VjRJTGIwQzNxQ1BlY1M4cHZMei92aWV3XG4qL1xuXG5jbGFzcyBQTVJFTUdlbmVyYXRvciB7XG5cblx0Y29uc3RydWN0b3IoIHJlbmRlcmVyICkge1xuXG5cdFx0dGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcblx0XHR0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCA9IG51bGw7XG5cblx0XHR0aGlzLl9sb2RNYXggPSAwO1xuXHRcdHRoaXMuX2N1YmVTaXplID0gMDtcblx0XHR0aGlzLl9sb2RQbGFuZXMgPSBbXTtcblx0XHR0aGlzLl9zaXplTG9kcyA9IFtdO1xuXHRcdHRoaXMuX3NpZ21hcyA9IFtdO1xuXG5cdFx0dGhpcy5fYmx1ck1hdGVyaWFsID0gbnVsbDtcblx0XHR0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPSBudWxsO1xuXHRcdHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgPSBudWxsO1xuXG5cdFx0dGhpcy5fY29tcGlsZU1hdGVyaWFsKCB0aGlzLl9ibHVyTWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIFBNUkVNIGZyb20gYSBzdXBwbGllZCBTY2VuZSwgd2hpY2ggY2FuIGJlIGZhc3RlciB0aGFuIHVzaW5nIGFuXG5cdCAqIGltYWdlIGlmIG5ldHdvcmtpbmcgYmFuZHdpZHRoIGlzIGxvdy4gT3B0aW9uYWwgc2lnbWEgc3BlY2lmaWVzIGEgYmx1ciByYWRpdXNcblx0ICogaW4gcmFkaWFucyB0byBiZSBhcHBsaWVkIHRvIHRoZSBzY2VuZSBiZWZvcmUgUE1SRU0gZ2VuZXJhdGlvbi4gT3B0aW9uYWwgbmVhclxuXHQgKiBhbmQgZmFyIHBsYW5lcyBlbnN1cmUgdGhlIHNjZW5lIGlzIHJlbmRlcmVkIGluIGl0cyBlbnRpcmV0eSAodGhlIGN1YmVDYW1lcmFcblx0ICogaXMgcGxhY2VkIGF0IHRoZSBvcmlnaW4pLlxuXHQgKi9cblx0ZnJvbVNjZW5lKCBzY2VuZSwgc2lnbWEgPSAwLCBuZWFyID0gMC4xLCBmYXIgPSAxMDAgKSB7XG5cblx0XHRfb2xkVGFyZ2V0ID0gdGhpcy5fcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0X29sZEFjdGl2ZUN1YmVGYWNlID0gdGhpcy5fcmVuZGVyZXIuZ2V0QWN0aXZlQ3ViZUZhY2UoKTtcblx0XHRfb2xkQWN0aXZlTWlwbWFwTGV2ZWwgPSB0aGlzLl9yZW5kZXJlci5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xuXHRcdF9vbGRYckVuYWJsZWQgPSB0aGlzLl9yZW5kZXJlci54ci5lbmFibGVkO1xuXG5cdFx0dGhpcy5fcmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fc2V0U2l6ZSggMjU2ICk7XG5cblx0XHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSB0aGlzLl9hbGxvY2F0ZVRhcmdldHMoKTtcblx0XHRjdWJlVVZSZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgPSB0cnVlO1xuXG5cdFx0dGhpcy5fc2NlbmVUb0N1YmVVViggc2NlbmUsIG5lYXIsIGZhciwgY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRpZiAoIHNpZ21hID4gMCApIHtcblxuXHRcdFx0dGhpcy5fYmx1ciggY3ViZVVWUmVuZGVyVGFyZ2V0LCAwLCAwLCBzaWdtYSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5fY2xlYW51cCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhbiBlcXVpcmVjdGFuZ3VsYXIgdGV4dHVyZSwgd2hpY2ggY2FuIGJlIGVpdGhlciBMRFJcblx0ICogb3IgSERSLiBUaGUgaWRlYWwgaW5wdXQgaW1hZ2Ugc2l6ZSBpcyAxayAoMTAyNCB4IDUxMiksXG5cdCAqIGFzIHRoaXMgbWF0Y2hlcyBiZXN0IHdpdGggdGhlIDI1NiB4IDI1NiBjdWJlbWFwIG91dHB1dC5cblx0ICogVGhlIHNtYWxsZXN0IHN1cHBvcnRlZCBlcXVpcmVjdGFuZ3VsYXIgaW1hZ2Ugc2l6ZSBpcyA2NCB4IDMyLlxuXHQgKi9cblx0ZnJvbUVxdWlyZWN0YW5ndWxhciggZXF1aXJlY3Rhbmd1bGFyLCByZW5kZXJUYXJnZXQgPSBudWxsICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2Zyb21UZXh0dXJlKCBlcXVpcmVjdGFuZ3VsYXIsIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhbiBjdWJlbWFwIHRleHR1cmUsIHdoaWNoIGNhbiBiZSBlaXRoZXIgTERSXG5cdCAqIG9yIEhEUi4gVGhlIGlkZWFsIGlucHV0IGN1YmUgc2l6ZSBpcyAyNTYgeCAyNTYsXG5cdCAqIGFzIHRoaXMgbWF0Y2hlcyBiZXN0IHdpdGggdGhlIDI1NiB4IDI1NiBjdWJlbWFwIG91dHB1dC5cblx0ICogVGhlIHNtYWxsZXN0IHN1cHBvcnRlZCBjdWJlIHNpemUgaXMgMTYgeCAxNi5cblx0ICovXG5cdGZyb21DdWJlbWFwKCBjdWJlbWFwLCByZW5kZXJUYXJnZXQgPSBudWxsICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2Zyb21UZXh0dXJlKCBjdWJlbWFwLCByZW5kZXJUYXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFByZS1jb21waWxlcyB0aGUgY3ViZW1hcCBzaGFkZXIuIFlvdSBjYW4gZ2V0IGZhc3RlciBzdGFydC11cCBieSBpbnZva2luZyB0aGlzIG1ldGhvZCBkdXJpbmdcblx0ICogeW91ciB0ZXh0dXJlJ3MgbmV0d29yayBmZXRjaCBmb3IgaW5jcmVhc2VkIGNvbmN1cnJlbmN5LlxuXHQgKi9cblx0Y29tcGlsZUN1YmVtYXBTaGFkZXIoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fY3ViZW1hcE1hdGVyaWFsID0gX2dldEN1YmVtYXBNYXRlcmlhbCgpO1xuXHRcdFx0dGhpcy5fY29tcGlsZU1hdGVyaWFsKCB0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFByZS1jb21waWxlcyB0aGUgZXF1aXJlY3Rhbmd1bGFyIHNoYWRlci4gWW91IGNhbiBnZXQgZmFzdGVyIHN0YXJ0LXVwIGJ5IGludm9raW5nIHRoaXMgbWV0aG9kIGR1cmluZ1xuXHQgKiB5b3VyIHRleHR1cmUncyBuZXR3b3JrIGZldGNoIGZvciBpbmNyZWFzZWQgY29uY3VycmVuY3kuXG5cdCAqL1xuXHRjb21waWxlRXF1aXJlY3Rhbmd1bGFyU2hhZGVyKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKTtcblx0XHRcdHRoaXMuX2NvbXBpbGVNYXRlcmlhbCggdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZXMgb2YgdGhlIFBNUkVNR2VuZXJhdG9yJ3MgaW50ZXJuYWwgbWVtb3J5LiBOb3RlIHRoYXQgUE1SRU1HZW5lcmF0b3IgaXMgYSBzdGF0aWMgY2xhc3MsXG5cdCAqIHNvIHlvdSBzaG91bGQgbm90IG5lZWQgbW9yZSB0aGFuIG9uZSBQTVJFTUdlbmVyYXRvciBvYmplY3QuIElmIHlvdSBkbywgY2FsbGluZyBkaXNwb3NlKCkgb25cblx0ICogb25lIG9mIHRoZW0gd2lsbCBjYXVzZSBhbnkgb3RoZXJzIHRvIGFsc28gYmVjb21lIHVudXNhYmxlLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuX2Rpc3Bvc2UoKTtcblxuXHRcdGlmICggdGhpcy5fY3ViZW1hcE1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5fY3ViZW1hcE1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHRpZiAoIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgIT09IG51bGwgKSB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0Ly8gcHJpdmF0ZSBpbnRlcmZhY2VcblxuXHRfc2V0U2l6ZSggY3ViZVNpemUgKSB7XG5cblx0XHR0aGlzLl9sb2RNYXggPSBNYXRoLmZsb29yKCBNYXRoLmxvZzIoIGN1YmVTaXplICkgKTtcblx0XHR0aGlzLl9jdWJlU2l6ZSA9IE1hdGgucG93KCAyLCB0aGlzLl9sb2RNYXggKTtcblxuXHR9XG5cblx0X2Rpc3Bvc2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2JsdXJNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMuX2JsdXJNYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0XHRpZiAoIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0ICE9PSBudWxsICkgdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQuZGlzcG9zZSgpO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5fbG9kUGxhbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5fbG9kUGxhbmVzWyBpIF0uZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfY2xlYW51cCggb3V0cHV0VGFyZ2V0ICkge1xuXG5cdFx0dGhpcy5fcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBfb2xkVGFyZ2V0LCBfb2xkQWN0aXZlQ3ViZUZhY2UsIF9vbGRBY3RpdmVNaXBtYXBMZXZlbCApO1xuXHRcdHRoaXMuX3JlbmRlcmVyLnhyLmVuYWJsZWQgPSBfb2xkWHJFbmFibGVkO1xuXG5cdFx0b3V0cHV0VGFyZ2V0LnNjaXNzb3JUZXN0ID0gZmFsc2U7XG5cdFx0X3NldFZpZXdwb3J0KCBvdXRwdXRUYXJnZXQsIDAsIDAsIG91dHB1dFRhcmdldC53aWR0aCwgb3V0cHV0VGFyZ2V0LmhlaWdodCApO1xuXG5cdH1cblxuXHRfZnJvbVRleHR1cmUoIHRleHR1cmUsIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGlmICggdGV4dHVyZS5tYXBwaW5nID09PSBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgfHwgdGV4dHVyZS5tYXBwaW5nID09PSBDdWJlUmVmcmFjdGlvbk1hcHBpbmcgKSB7XG5cblx0XHRcdHRoaXMuX3NldFNpemUoIHRleHR1cmUuaW1hZ2UubGVuZ3RoID09PSAwID8gMTYgOiAoIHRleHR1cmUuaW1hZ2VbIDAgXS53aWR0aCB8fCB0ZXh0dXJlLmltYWdlWyAwIF0uaW1hZ2Uud2lkdGggKSApO1xuXG5cdFx0fSBlbHNlIHsgLy8gRXF1aXJlY3Rhbmd1bGFyXG5cblx0XHRcdHRoaXMuX3NldFNpemUoIHRleHR1cmUuaW1hZ2Uud2lkdGggLyA0ICk7XG5cblx0XHR9XG5cblx0XHRfb2xkVGFyZ2V0ID0gdGhpcy5fcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0X29sZEFjdGl2ZUN1YmVGYWNlID0gdGhpcy5fcmVuZGVyZXIuZ2V0QWN0aXZlQ3ViZUZhY2UoKTtcblx0XHRfb2xkQWN0aXZlTWlwbWFwTGV2ZWwgPSB0aGlzLl9yZW5kZXJlci5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xuXHRcdF9vbGRYckVuYWJsZWQgPSB0aGlzLl9yZW5kZXJlci54ci5lbmFibGVkO1xuXG5cdFx0dGhpcy5fcmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgY3ViZVVWUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0IHx8IHRoaXMuX2FsbG9jYXRlVGFyZ2V0cygpO1xuXHRcdHRoaXMuX3RleHR1cmVUb0N1YmVVViggdGV4dHVyZSwgY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5fYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5fY2xlYW51cCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG5cdH1cblxuXHRfYWxsb2NhdGVUYXJnZXRzKCkge1xuXG5cdFx0Y29uc3Qgd2lkdGggPSAzICogTWF0aC5tYXgoIHRoaXMuX2N1YmVTaXplLCAxNiAqIDcgKTtcblx0XHRjb25zdCBoZWlnaHQgPSA0ICogdGhpcy5fY3ViZVNpemU7XG5cblx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHRtYWdGaWx0ZXI6IExpbmVhckZpbHRlcixcblx0XHRcdG1pbkZpbHRlcjogTGluZWFyRmlsdGVyLFxuXHRcdFx0Z2VuZXJhdGVNaXBtYXBzOiBmYWxzZSxcblx0XHRcdHR5cGU6IEhhbGZGbG9hdFR5cGUsXG5cdFx0XHRmb3JtYXQ6IFJHQkFGb3JtYXQsXG5cdFx0XHRjb2xvclNwYWNlOiBMaW5lYXJTUkdCQ29sb3JTcGFjZSxcblx0XHRcdGRlcHRoQnVmZmVyOiBmYWxzZVxuXHRcdH07XG5cblx0XHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSBfY3JlYXRlUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBwYXJhbXMgKTtcblxuXHRcdGlmICggdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0LmhlaWdodCAhPT0gaGVpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuX2Rpc3Bvc2UoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCA9IF9jcmVhdGVSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApO1xuXG5cdFx0XHRjb25zdCB7IF9sb2RNYXggfSA9IHRoaXM7XG5cdFx0XHQoIHsgc2l6ZUxvZHM6IHRoaXMuX3NpemVMb2RzLCBsb2RQbGFuZXM6IHRoaXMuX2xvZFBsYW5lcywgc2lnbWFzOiB0aGlzLl9zaWdtYXMgfSA9IF9jcmVhdGVQbGFuZXMoIF9sb2RNYXggKSApO1xuXG5cdFx0XHR0aGlzLl9ibHVyTWF0ZXJpYWwgPSBfZ2V0Qmx1clNoYWRlciggX2xvZE1heCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxuXHR9XG5cblx0X2NvbXBpbGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCB0bXBNZXNoID0gbmV3IE1lc2goIHRoaXMuX2xvZFBsYW5lc1sgMCBdLCBtYXRlcmlhbCApO1xuXHRcdHRoaXMuX3JlbmRlcmVyLmNvbXBpbGUoIHRtcE1lc2gsIF9mbGF0Q2FtZXJhICk7XG5cblx0fVxuXG5cdF9zY2VuZVRvQ3ViZVVWKCBzY2VuZSwgbmVhciwgZmFyLCBjdWJlVVZSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBmb3YgPSA5MDtcblx0XHRjb25zdCBhc3BlY3QgPSAxO1xuXHRcdGNvbnN0IGN1YmVDYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0XHRjb25zdCB1cFNpZ24gPSBbIDEsIC0gMSwgMSwgMSwgMSwgMSBdO1xuXHRcdGNvbnN0IGZvcndhcmRTaWduID0gWyAxLCAxLCAxLCAtIDEsIC0gMSwgLSAxIF07XG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblxuXHRcdGNvbnN0IG9yaWdpbmFsQXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRcdGNvbnN0IHRvbmVNYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIuZ2V0Q2xlYXJDb2xvciggX2NsZWFyQ29sb3IgKTtcblxuXHRcdHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZztcblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGJhY2tncm91bmRNYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgge1xuXHRcdFx0bmFtZTogJ1BNUkVNLkJhY2tncm91bmQnLFxuXHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0fSApO1xuXG5cdFx0Y29uc3QgYmFja2dyb3VuZEJveCA9IG5ldyBNZXNoKCBuZXcgQm94R2VvbWV0cnkoKSwgYmFja2dyb3VuZE1hdGVyaWFsICk7XG5cblx0XHRsZXQgdXNlU29saWRDb2xvciA9IGZhbHNlO1xuXHRcdGNvbnN0IGJhY2tncm91bmQgPSBzY2VuZS5iYWNrZ3JvdW5kO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kICkge1xuXG5cdFx0XHRpZiAoIGJhY2tncm91bmQuaXNDb2xvciApIHtcblxuXHRcdFx0XHRiYWNrZ3JvdW5kTWF0ZXJpYWwuY29sb3IuY29weSggYmFja2dyb3VuZCApO1xuXHRcdFx0XHRzY2VuZS5iYWNrZ3JvdW5kID0gbnVsbDtcblx0XHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGJhY2tncm91bmRNYXRlcmlhbC5jb2xvci5jb3B5KCBfY2xlYXJDb2xvciApO1xuXHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjb2wgPSBpICUgMztcblxuXHRcdFx0aWYgKCBjb2wgPT09IDAgKSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIHVwU2lnblsgaSBdLCAwICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBmb3J3YXJkU2lnblsgaSBdLCAwLCAwICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGNvbCA9PT0gMSApIHtcblxuXHRcdFx0XHRjdWJlQ2FtZXJhLnVwLnNldCggMCwgMCwgdXBTaWduWyBpIF0gKTtcblx0XHRcdFx0Y3ViZUNhbWVyYS5sb29rQXQoIDAsIGZvcndhcmRTaWduWyBpIF0sIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjdWJlQ2FtZXJhLnVwLnNldCggMCwgdXBTaWduWyBpIF0sIDAgKTtcblx0XHRcdFx0Y3ViZUNhbWVyYS5sb29rQXQoIDAsIDAsIGZvcndhcmRTaWduWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzaXplID0gdGhpcy5fY3ViZVNpemU7XG5cblx0XHRcdF9zZXRWaWV3cG9ydCggY3ViZVVWUmVuZGVyVGFyZ2V0LCBjb2wgKiBzaXplLCBpID4gMiA/IHNpemUgOiAwLCBzaXplLCBzaXplICk7XG5cblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGlmICggdXNlU29saWRDb2xvciApIHtcblxuXHRcdFx0XHRyZW5kZXJlci5yZW5kZXIoIGJhY2tncm91bmRCb3gsIGN1YmVDYW1lcmEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjdWJlQ2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHRiYWNrZ3JvdW5kQm94Lmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHRiYWNrZ3JvdW5kQm94Lm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHRcdHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gdG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gb3JpZ2luYWxBdXRvQ2xlYXI7XG5cdFx0c2NlbmUuYmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cblx0fVxuXG5cdF90ZXh0dXJlVG9DdWJlVVYoIHRleHR1cmUsIGN1YmVVVlJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG5cblx0XHRjb25zdCBpc0N1YmVUZXh0dXJlID0gKCB0ZXh0dXJlLm1hcHBpbmcgPT09IEN1YmVSZWZsZWN0aW9uTWFwcGluZyB8fCB0ZXh0dXJlLm1hcHBpbmcgPT09IEN1YmVSZWZyYWN0aW9uTWFwcGluZyApO1xuXG5cdFx0aWYgKCBpc0N1YmVUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPSBfZ2V0Q3ViZW1hcE1hdGVyaWFsKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY3ViZW1hcE1hdGVyaWFsLnVuaWZvcm1zLmZsaXBFbnZNYXAudmFsdWUgPSAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSApID8gLSAxIDogMTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBpc0N1YmVUZXh0dXJlID8gdGhpcy5fY3ViZW1hcE1hdGVyaWFsIDogdGhpcy5fZXF1aXJlY3RNYXRlcmlhbDtcblx0XHRjb25zdCBtZXNoID0gbmV3IE1lc2goIHRoaXMuX2xvZFBsYW5lc1sgMCBdLCBtYXRlcmlhbCApO1xuXG5cdFx0Y29uc3QgdW5pZm9ybXMgPSBtYXRlcmlhbC51bmlmb3JtcztcblxuXHRcdHVuaWZvcm1zWyAnZW52TWFwJyBdLnZhbHVlID0gdGV4dHVyZTtcblxuXHRcdGNvbnN0IHNpemUgPSB0aGlzLl9jdWJlU2l6ZTtcblxuXHRcdF9zZXRWaWV3cG9ydCggY3ViZVVWUmVuZGVyVGFyZ2V0LCAwLCAwLCAzICogc2l6ZSwgMiAqIHNpemUgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBtZXNoLCBfZmxhdENhbWVyYSApO1xuXG5cdH1cblxuXHRfYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblx0XHRjb25zdCBhdXRvQ2xlYXIgPSByZW5kZXJlci5hdXRvQ2xlYXI7XG5cdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG5cdFx0Y29uc3QgbiA9IHRoaXMuX2xvZFBsYW5lcy5sZW5ndGg7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPCBuOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzaWdtYSA9IE1hdGguc3FydCggdGhpcy5fc2lnbWFzWyBpIF0gKiB0aGlzLl9zaWdtYXNbIGkgXSAtIHRoaXMuX3NpZ21hc1sgaSAtIDEgXSAqIHRoaXMuX3NpZ21hc1sgaSAtIDEgXSApO1xuXG5cdFx0XHRjb25zdCBwb2xlQXhpcyA9IF9heGlzRGlyZWN0aW9uc1sgKCBuIC0gaSAtIDEgKSAlIF9heGlzRGlyZWN0aW9ucy5sZW5ndGggXTtcblxuXHRcdFx0dGhpcy5fYmx1ciggY3ViZVVWUmVuZGVyVGFyZ2V0LCBpIC0gMSwgaSwgc2lnbWEsIHBvbGVBeGlzICk7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBhdXRvQ2xlYXI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIGlzIGEgdHdvLXBhc3MgR2F1c3NpYW4gYmx1ciBmb3IgYSBjdWJlbWFwLiBOb3JtYWxseSB0aGlzIGlzIGRvbmVcblx0ICogdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5LCBidXQgdGhpcyBicmVha3MgZG93biBvbiBhIGN1YmUuIEhlcmUgd2UgYXBwbHlcblx0ICogdGhlIGJsdXIgbGF0aXR1ZGluYWxseSAoYXJvdW5kIHRoZSBwb2xlcyksIGFuZCB0aGVuIGxvbmdpdHVkaW5hbGx5ICh0b3dhcmRzXG5cdCAqIHRoZSBwb2xlcykgdG8gYXBwcm94aW1hdGUgdGhlIG9ydGhvZ29uYWxseS1zZXBhcmFibGUgYmx1ci4gSXQgaXMgbGVhc3Rcblx0ICogYWNjdXJhdGUgYXQgdGhlIHBvbGVzLCBidXQgc3RpbGwgZG9lcyBhIGRlY2VudCBqb2IuXG5cdCAqL1xuXHRfYmx1ciggY3ViZVVWUmVuZGVyVGFyZ2V0LCBsb2RJbiwgbG9kT3V0LCBzaWdtYSwgcG9sZUF4aXMgKSB7XG5cblx0XHRjb25zdCBwaW5nUG9uZ1JlbmRlclRhcmdldCA9IHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0O1xuXG5cdFx0dGhpcy5faGFsZkJsdXIoXG5cdFx0XHRjdWJlVVZSZW5kZXJUYXJnZXQsXG5cdFx0XHRwaW5nUG9uZ1JlbmRlclRhcmdldCxcblx0XHRcdGxvZEluLFxuXHRcdFx0bG9kT3V0LFxuXHRcdFx0c2lnbWEsXG5cdFx0XHQnbGF0aXR1ZGluYWwnLFxuXHRcdFx0cG9sZUF4aXMgKTtcblxuXHRcdHRoaXMuX2hhbGZCbHVyKFxuXHRcdFx0cGluZ1BvbmdSZW5kZXJUYXJnZXQsXG5cdFx0XHRjdWJlVVZSZW5kZXJUYXJnZXQsXG5cdFx0XHRsb2RPdXQsXG5cdFx0XHRsb2RPdXQsXG5cdFx0XHRzaWdtYSxcblx0XHRcdCdsb25naXR1ZGluYWwnLFxuXHRcdFx0cG9sZUF4aXMgKTtcblxuXHR9XG5cblx0X2hhbGZCbHVyKCB0YXJnZXRJbiwgdGFyZ2V0T3V0LCBsb2RJbiwgbG9kT3V0LCBzaWdtYVJhZGlhbnMsIGRpcmVjdGlvbiwgcG9sZUF4aXMgKSB7XG5cblx0XHRjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuXHRcdGNvbnN0IGJsdXJNYXRlcmlhbCA9IHRoaXMuX2JsdXJNYXRlcmlhbDtcblxuXHRcdGlmICggZGlyZWN0aW9uICE9PSAnbGF0aXR1ZGluYWwnICYmIGRpcmVjdGlvbiAhPT0gJ2xvbmdpdHVkaW5hbCcgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdCdibHVyIGRpcmVjdGlvbiBtdXN0IGJlIGVpdGhlciBsYXRpdHVkaW5hbCBvciBsb25naXR1ZGluYWwhJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gTnVtYmVyIG9mIHN0YW5kYXJkIGRldmlhdGlvbnMgYXQgd2hpY2ggdG8gY3V0IG9mZiB0aGUgZGlzY3JldGUgYXBwcm94aW1hdGlvbi5cblx0XHRjb25zdCBTVEFOREFSRF9ERVZJQVRJT05TID0gMztcblxuXHRcdGNvbnN0IGJsdXJNZXNoID0gbmV3IE1lc2goIHRoaXMuX2xvZFBsYW5lc1sgbG9kT3V0IF0sIGJsdXJNYXRlcmlhbCApO1xuXHRcdGNvbnN0IGJsdXJVbmlmb3JtcyA9IGJsdXJNYXRlcmlhbC51bmlmb3JtcztcblxuXHRcdGNvbnN0IHBpeGVscyA9IHRoaXMuX3NpemVMb2RzWyBsb2RJbiBdIC0gMTtcblx0XHRjb25zdCByYWRpYW5zUGVyUGl4ZWwgPSBpc0Zpbml0ZSggc2lnbWFSYWRpYW5zICkgPyBNYXRoLlBJIC8gKCAyICogcGl4ZWxzICkgOiAyICogTWF0aC5QSSAvICggMiAqIE1BWF9TQU1QTEVTIC0gMSApO1xuXHRcdGNvbnN0IHNpZ21hUGl4ZWxzID0gc2lnbWFSYWRpYW5zIC8gcmFkaWFuc1BlclBpeGVsO1xuXHRcdGNvbnN0IHNhbXBsZXMgPSBpc0Zpbml0ZSggc2lnbWFSYWRpYW5zICkgPyAxICsgTWF0aC5mbG9vciggU1RBTkRBUkRfREVWSUFUSU9OUyAqIHNpZ21hUGl4ZWxzICkgOiBNQVhfU0FNUExFUztcblxuXHRcdGlmICggc2FtcGxlcyA+IE1BWF9TQU1QTEVTICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oIGBzaWdtYVJhZGlhbnMsICR7XG5cdFx0XHRcdHNpZ21hUmFkaWFuc30sIGlzIHRvbyBsYXJnZSBhbmQgd2lsbCBjbGlwLCBhcyBpdCByZXF1ZXN0ZWQgJHtcblx0XHRcdFx0c2FtcGxlc30gc2FtcGxlcyB3aGVuIHRoZSBtYXhpbXVtIGlzIHNldCB0byAke01BWF9TQU1QTEVTfWAgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHdlaWdodHMgPSBbXTtcblx0XHRsZXQgc3VtID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IE1BWF9TQU1QTEVTOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCB4ID0gaSAvIHNpZ21hUGl4ZWxzO1xuXHRcdFx0Y29uc3Qgd2VpZ2h0ID0gTWF0aC5leHAoIC0geCAqIHggLyAyICk7XG5cdFx0XHR3ZWlnaHRzLnB1c2goIHdlaWdodCApO1xuXG5cdFx0XHRpZiAoIGkgPT09IDAgKSB7XG5cblx0XHRcdFx0c3VtICs9IHdlaWdodDtcblxuXHRcdFx0fSBlbHNlIGlmICggaSA8IHNhbXBsZXMgKSB7XG5cblx0XHRcdFx0c3VtICs9IDIgKiB3ZWlnaHQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHdlaWdodHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR3ZWlnaHRzWyBpIF0gPSB3ZWlnaHRzWyBpIF0gLyBzdW07XG5cblx0XHR9XG5cblx0XHRibHVyVW5pZm9ybXNbICdlbnZNYXAnIF0udmFsdWUgPSB0YXJnZXRJbi50ZXh0dXJlO1xuXHRcdGJsdXJVbmlmb3Jtc1sgJ3NhbXBsZXMnIF0udmFsdWUgPSBzYW1wbGVzO1xuXHRcdGJsdXJVbmlmb3Jtc1sgJ3dlaWdodHMnIF0udmFsdWUgPSB3ZWlnaHRzO1xuXHRcdGJsdXJVbmlmb3Jtc1sgJ2xhdGl0dWRpbmFsJyBdLnZhbHVlID0gZGlyZWN0aW9uID09PSAnbGF0aXR1ZGluYWwnO1xuXG5cdFx0aWYgKCBwb2xlQXhpcyApIHtcblxuXHRcdFx0Ymx1clVuaWZvcm1zWyAncG9sZUF4aXMnIF0udmFsdWUgPSBwb2xlQXhpcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IHsgX2xvZE1heCB9ID0gdGhpcztcblx0XHRibHVyVW5pZm9ybXNbICdkVGhldGEnIF0udmFsdWUgPSByYWRpYW5zUGVyUGl4ZWw7XG5cdFx0Ymx1clVuaWZvcm1zWyAnbWlwSW50JyBdLnZhbHVlID0gX2xvZE1heCAtIGxvZEluO1xuXG5cdFx0Y29uc3Qgb3V0cHV0U2l6ZSA9IHRoaXMuX3NpemVMb2RzWyBsb2RPdXQgXTtcblx0XHRjb25zdCB4ID0gMyAqIG91dHB1dFNpemUgKiAoIGxvZE91dCA+IF9sb2RNYXggLSBMT0RfTUlOID8gbG9kT3V0IC0gX2xvZE1heCArIExPRF9NSU4gOiAwICk7XG5cdFx0Y29uc3QgeSA9IDQgKiAoIHRoaXMuX2N1YmVTaXplIC0gb3V0cHV0U2l6ZSApO1xuXG5cdFx0X3NldFZpZXdwb3J0KCB0YXJnZXRPdXQsIHgsIHksIDMgKiBvdXRwdXRTaXplLCAyICogb3V0cHV0U2l6ZSApO1xuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggdGFyZ2V0T3V0ICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBibHVyTWVzaCwgX2ZsYXRDYW1lcmEgKTtcblxuXHR9XG5cbn1cblxuXG5cbmZ1bmN0aW9uIF9jcmVhdGVQbGFuZXMoIGxvZE1heCApIHtcblxuXHRjb25zdCBsb2RQbGFuZXMgPSBbXTtcblx0Y29uc3Qgc2l6ZUxvZHMgPSBbXTtcblx0Y29uc3Qgc2lnbWFzID0gW107XG5cblx0bGV0IGxvZCA9IGxvZE1heDtcblxuXHRjb25zdCB0b3RhbExvZHMgPSBsb2RNYXggLSBMT0RfTUlOICsgMSArIEVYVFJBX0xPRF9TSUdNQS5sZW5ndGg7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdG90YWxMb2RzOyBpICsrICkge1xuXG5cdFx0Y29uc3Qgc2l6ZUxvZCA9IE1hdGgucG93KCAyLCBsb2QgKTtcblx0XHRzaXplTG9kcy5wdXNoKCBzaXplTG9kICk7XG5cdFx0bGV0IHNpZ21hID0gMS4wIC8gc2l6ZUxvZDtcblxuXHRcdGlmICggaSA+IGxvZE1heCAtIExPRF9NSU4gKSB7XG5cblx0XHRcdHNpZ21hID0gRVhUUkFfTE9EX1NJR01BWyBpIC0gbG9kTWF4ICsgTE9EX01JTiAtIDEgXTtcblxuXHRcdH0gZWxzZSBpZiAoIGkgPT09IDAgKSB7XG5cblx0XHRcdHNpZ21hID0gMDtcblxuXHRcdH1cblxuXHRcdHNpZ21hcy5wdXNoKCBzaWdtYSApO1xuXG5cdFx0Y29uc3QgdGV4ZWxTaXplID0gMS4wIC8gKCBzaXplTG9kIC0gMiApO1xuXHRcdGNvbnN0IG1pbiA9IC0gdGV4ZWxTaXplO1xuXHRcdGNvbnN0IG1heCA9IDEgKyB0ZXhlbFNpemU7XG5cdFx0Y29uc3QgdXYxID0gWyBtaW4sIG1pbiwgbWF4LCBtaW4sIG1heCwgbWF4LCBtaW4sIG1pbiwgbWF4LCBtYXgsIG1pbiwgbWF4IF07XG5cblx0XHRjb25zdCBjdWJlRmFjZXMgPSA2O1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gNjtcblx0XHRjb25zdCBwb3NpdGlvblNpemUgPSAzO1xuXHRcdGNvbnN0IHV2U2l6ZSA9IDI7XG5cdFx0Y29uc3QgZmFjZUluZGV4U2l6ZSA9IDE7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9uU2l6ZSAqIHZlcnRpY2VzICogY3ViZUZhY2VzICk7XG5cdFx0Y29uc3QgdXYgPSBuZXcgRmxvYXQzMkFycmF5KCB1dlNpemUgKiB2ZXJ0aWNlcyAqIGN1YmVGYWNlcyApO1xuXHRcdGNvbnN0IGZhY2VJbmRleCA9IG5ldyBGbG9hdDMyQXJyYXkoIGZhY2VJbmRleFNpemUgKiB2ZXJ0aWNlcyAqIGN1YmVGYWNlcyApO1xuXG5cdFx0Zm9yICggbGV0IGZhY2UgPSAwOyBmYWNlIDwgY3ViZUZhY2VzOyBmYWNlICsrICkge1xuXG5cdFx0XHRjb25zdCB4ID0gKCBmYWNlICUgMyApICogMiAvIDMgLSAxO1xuXHRcdFx0Y29uc3QgeSA9IGZhY2UgPiAyID8gMCA6IC0gMTtcblx0XHRcdGNvbnN0IGNvb3JkaW5hdGVzID0gW1xuXHRcdFx0XHR4LCB5LCAwLFxuXHRcdFx0XHR4ICsgMiAvIDMsIHksIDAsXG5cdFx0XHRcdHggKyAyIC8gMywgeSArIDEsIDAsXG5cdFx0XHRcdHgsIHksIDAsXG5cdFx0XHRcdHggKyAyIC8gMywgeSArIDEsIDAsXG5cdFx0XHRcdHgsIHkgKyAxLCAwXG5cdFx0XHRdO1xuXHRcdFx0cG9zaXRpb24uc2V0KCBjb29yZGluYXRlcywgcG9zaXRpb25TaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cdFx0XHR1di5zZXQoIHV2MSwgdXZTaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cdFx0XHRjb25zdCBmaWxsID0gWyBmYWNlLCBmYWNlLCBmYWNlLCBmYWNlLCBmYWNlLCBmYWNlIF07XG5cdFx0XHRmYWNlSW5kZXguc2V0KCBmaWxsLCBmYWNlSW5kZXhTaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwbGFuZXMgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgcG9zaXRpb25TaXplICkgKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1diwgdXZTaXplICkgKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAnZmFjZUluZGV4JywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggZmFjZUluZGV4LCBmYWNlSW5kZXhTaXplICkgKTtcblx0XHRsb2RQbGFuZXMucHVzaCggcGxhbmVzICk7XG5cblx0XHRpZiAoIGxvZCA+IExPRF9NSU4gKSB7XG5cblx0XHRcdGxvZCAtLTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHsgbG9kUGxhbmVzLCBzaXplTG9kcywgc2lnbWFzIH07XG5cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZVJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgcGFyYW1zICkge1xuXG5cdGNvbnN0IGN1YmVVVlJlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgcGFyYW1zICk7XG5cdGN1YmVVVlJlbmRlclRhcmdldC50ZXh0dXJlLm1hcHBpbmcgPSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZztcblx0Y3ViZVVWUmVuZGVyVGFyZ2V0LnRleHR1cmUubmFtZSA9ICdQTVJFTS5jdWJlVXYnO1xuXHRjdWJlVVZSZW5kZXJUYXJnZXQuc2Npc3NvclRlc3QgPSB0cnVlO1xuXHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG59XG5cbmZ1bmN0aW9uIF9zZXRWaWV3cG9ydCggdGFyZ2V0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdHRhcmdldC52aWV3cG9ydC5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTtcblx0dGFyZ2V0LnNjaXNzb3Iuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cbn1cblxuZnVuY3Rpb24gX2dldEJsdXJTaGFkZXIoIGxvZE1heCwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRjb25zdCB3ZWlnaHRzID0gbmV3IEZsb2F0MzJBcnJheSggTUFYX1NBTVBMRVMgKTtcblx0Y29uc3QgcG9sZUF4aXMgPSBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xuXHRjb25zdCBzaGFkZXJNYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0bmFtZTogJ1NwaGVyaWNhbEdhdXNzaWFuQmx1cicsXG5cblx0XHRkZWZpbmVzOiB7XG5cdFx0XHQnbic6IE1BWF9TQU1QTEVTLFxuXHRcdFx0J0NVQkVVVl9URVhFTF9XSURUSCc6IDEuMCAvIHdpZHRoLFxuXHRcdFx0J0NVQkVVVl9URVhFTF9IRUlHSFQnOiAxLjAgLyBoZWlnaHQsXG5cdFx0XHQnQ1VCRVVWX01BWF9NSVAnOiBgJHtsb2RNYXh9LjBgLFxuXHRcdH0sXG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0J2Vudk1hcCc6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdCdzYW1wbGVzJzogeyB2YWx1ZTogMSB9LFxuXHRcdFx0J3dlaWdodHMnOiB7IHZhbHVlOiB3ZWlnaHRzIH0sXG5cdFx0XHQnbGF0aXR1ZGluYWwnOiB7IHZhbHVlOiBmYWxzZSB9LFxuXHRcdFx0J2RUaGV0YSc6IHsgdmFsdWU6IDAgfSxcblx0XHRcdCdtaXBJbnQnOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHQncG9sZUF4aXMnOiB7IHZhbHVlOiBwb2xlQXhpcyB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogX2dldENvbW1vblZlcnRleFNoYWRlcigpLFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuXG5cdFx0XHR2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcblxuXHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xuXHRcdFx0dW5pZm9ybSBpbnQgc2FtcGxlcztcblx0XHRcdHVuaWZvcm0gZmxvYXQgd2VpZ2h0c1sgbiBdO1xuXHRcdFx0dW5pZm9ybSBib29sIGxhdGl0dWRpbmFsO1xuXHRcdFx0dW5pZm9ybSBmbG9hdCBkVGhldGE7XG5cdFx0XHR1bmlmb3JtIGZsb2F0IG1pcEludDtcblx0XHRcdHVuaWZvcm0gdmVjMyBwb2xlQXhpcztcblxuXHRcdFx0I2RlZmluZSBFTlZNQVBfVFlQRV9DVUJFX1VWXG5cdFx0XHQjaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxuXG5cdFx0XHR2ZWMzIGdldFNhbXBsZSggZmxvYXQgdGhldGEsIHZlYzMgYXhpcyApIHtcblxuXHRcdFx0XHRmbG9hdCBjb3NUaGV0YSA9IGNvcyggdGhldGEgKTtcblx0XHRcdFx0Ly8gUm9kcmlndWVzJyBheGlzLWFuZ2xlIHJvdGF0aW9uXG5cdFx0XHRcdHZlYzMgc2FtcGxlRGlyZWN0aW9uID0gdk91dHB1dERpcmVjdGlvbiAqIGNvc1RoZXRhXG5cdFx0XHRcdFx0KyBjcm9zcyggYXhpcywgdk91dHB1dERpcmVjdGlvbiApICogc2luKCB0aGV0YSApXG5cdFx0XHRcdFx0KyBheGlzICogZG90KCBheGlzLCB2T3V0cHV0RGlyZWN0aW9uICkgKiAoIDEuMCAtIGNvc1RoZXRhICk7XG5cblx0XHRcdFx0cmV0dXJuIGJpbGluZWFyQ3ViZVVWKCBlbnZNYXAsIHNhbXBsZURpcmVjdGlvbiwgbWlwSW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHRcdHZlYzMgYXhpcyA9IGxhdGl0dWRpbmFsID8gcG9sZUF4aXMgOiBjcm9zcyggcG9sZUF4aXMsIHZPdXRwdXREaXJlY3Rpb24gKTtcblxuXHRcdFx0XHRpZiAoIGFsbCggZXF1YWwoIGF4aXMsIHZlYzMoIDAuMCApICkgKSApIHtcblxuXHRcdFx0XHRcdGF4aXMgPSB2ZWMzKCB2T3V0cHV0RGlyZWN0aW9uLnosIDAuMCwgLSB2T3V0cHV0RGlyZWN0aW9uLnggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YXhpcyA9IG5vcm1hbGl6ZSggYXhpcyApO1xuXG5cdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xuXHRcdFx0XHRnbF9GcmFnQ29sb3IucmdiICs9IHdlaWdodHNbIDAgXSAqIGdldFNhbXBsZSggMC4wLCBheGlzICk7XG5cblx0XHRcdFx0Zm9yICggaW50IGkgPSAxOyBpIDwgbjsgaSsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBpID49IHNhbXBsZXMgKSB7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZmxvYXQgdGhldGEgPSBkVGhldGEgKiBmbG9hdCggaSApO1xuXHRcdFx0XHRcdGdsX0ZyYWdDb2xvci5yZ2IgKz0gd2VpZ2h0c1sgaSBdICogZ2V0U2FtcGxlKCAtMS4wICogdGhldGEsIGF4aXMgKTtcblx0XHRcdFx0XHRnbF9GcmFnQ29sb3IucmdiICs9IHdlaWdodHNbIGkgXSAqIGdldFNhbXBsZSggdGhldGEsIGF4aXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHRgLFxuXG5cdFx0YmxlbmRpbmc6IE5vQmxlbmRpbmcsXG5cdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRkZXB0aFdyaXRlOiBmYWxzZVxuXG5cdH0gKTtcblxuXHRyZXR1cm4gc2hhZGVyTWF0ZXJpYWw7XG5cbn1cblxuZnVuY3Rpb24gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKSB7XG5cblx0cmV0dXJuIG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0bmFtZTogJ0VxdWlyZWN0YW5ndWxhclRvQ3ViZVVWJyxcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHQnZW52TWFwJzogeyB2YWx1ZTogbnVsbCB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogX2dldENvbW1vblZlcnRleFNoYWRlcigpLFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuXG5cdFx0XHR2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcblxuXHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xuXG5cdFx0XHQjaW5jbHVkZSA8Y29tbW9uPlxuXG5cdFx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdFx0dmVjMyBvdXRwdXREaXJlY3Rpb24gPSBub3JtYWxpemUoIHZPdXRwdXREaXJlY3Rpb24gKTtcblx0XHRcdFx0dmVjMiB1diA9IGVxdWlyZWN0VXYoIG91dHB1dERpcmVjdGlvbiApO1xuXG5cdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHRleHR1cmUyRCAoIGVudk1hcCwgdXYgKS5yZ2IsIDEuMCApO1xuXG5cdFx0XHR9XG5cdFx0YCxcblxuXHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0ZGVwdGhXcml0ZTogZmFsc2VcblxuXHR9ICk7XG5cbn1cblxuZnVuY3Rpb24gX2dldEN1YmVtYXBNYXRlcmlhbCgpIHtcblxuXHRyZXR1cm4gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cblx0XHRuYW1lOiAnQ3ViZW1hcFRvQ3ViZVVWJyxcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHQnZW52TWFwJzogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0J2ZsaXBFbnZNYXAnOiB7IHZhbHVlOiAtIDEgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IF9nZXRDb21tb25WZXJ0ZXhTaGFkZXIoKSxcblxuXHRcdGZyYWdtZW50U2hhZGVyOiAvKiBnbHNsICovYFxuXG5cdFx0XHRwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGludDtcblxuXHRcdFx0dW5pZm9ybSBmbG9hdCBmbGlwRW52TWFwO1xuXG5cdFx0XHR2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcblxuXHRcdFx0dW5pZm9ybSBzYW1wbGVyQ3ViZSBlbnZNYXA7XG5cblx0XHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0XHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCB2ZWMzKCBmbGlwRW52TWFwICogdk91dHB1dERpcmVjdGlvbi54LCB2T3V0cHV0RGlyZWN0aW9uLnl6ICkgKTtcblxuXHRcdFx0fVxuXHRcdGAsXG5cblx0XHRibGVuZGluZzogTm9CbGVuZGluZyxcblx0XHRkZXB0aFRlc3Q6IGZhbHNlLFxuXHRcdGRlcHRoV3JpdGU6IGZhbHNlXG5cblx0fSApO1xuXG59XG5cbmZ1bmN0aW9uIF9nZXRDb21tb25WZXJ0ZXhTaGFkZXIoKSB7XG5cblx0cmV0dXJuIC8qIGdsc2wgKi9gXG5cblx0XHRwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblx0XHRwcmVjaXNpb24gbWVkaXVtcCBpbnQ7XG5cblx0XHRhdHRyaWJ1dGUgZmxvYXQgZmFjZUluZGV4O1xuXG5cdFx0dmFyeWluZyB2ZWMzIHZPdXRwdXREaXJlY3Rpb247XG5cblx0XHQvLyBSSCBjb29yZGluYXRlIHN5c3RlbTsgUE1SRU0gZmFjZS1pbmRleGluZyBjb252ZW50aW9uXG5cdFx0dmVjMyBnZXREaXJlY3Rpb24oIHZlYzIgdXYsIGZsb2F0IGZhY2UgKSB7XG5cblx0XHRcdHV2ID0gMi4wICogdXYgLSAxLjA7XG5cblx0XHRcdHZlYzMgZGlyZWN0aW9uID0gdmVjMyggdXYsIDEuMCApO1xuXG5cdFx0XHRpZiAoIGZhY2UgPT0gMC4wICkge1xuXG5cdFx0XHRcdGRpcmVjdGlvbiA9IGRpcmVjdGlvbi56eXg7IC8vICggMSwgdiwgdSApIHBvcyB4XG5cblx0XHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gMS4wICkge1xuXG5cdFx0XHRcdGRpcmVjdGlvbiA9IGRpcmVjdGlvbi54enk7XG5cdFx0XHRcdGRpcmVjdGlvbi54eiAqPSAtMS4wOyAvLyAoIC11LCAxLCAtdiApIHBvcyB5XG5cblx0XHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gMi4wICkge1xuXG5cdFx0XHRcdGRpcmVjdGlvbi54ICo9IC0xLjA7IC8vICggLXUsIHYsIDEgKSBwb3MgelxuXG5cdFx0XHR9IGVsc2UgaWYgKCBmYWNlID09IDMuMCApIHtcblxuXHRcdFx0XHRkaXJlY3Rpb24gPSBkaXJlY3Rpb24uenl4O1xuXHRcdFx0XHRkaXJlY3Rpb24ueHogKj0gLTEuMDsgLy8gKCAtMSwgdiwgLXUgKSBuZWcgeFxuXG5cdFx0XHR9IGVsc2UgaWYgKCBmYWNlID09IDQuMCApIHtcblxuXHRcdFx0XHRkaXJlY3Rpb24gPSBkaXJlY3Rpb24ueHp5O1xuXHRcdFx0XHRkaXJlY3Rpb24ueHkgKj0gLTEuMDsgLy8gKCAtdSwgLTEsIHYgKSBuZWcgeVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBmYWNlID09IDUuMCApIHtcblxuXHRcdFx0XHRkaXJlY3Rpb24ueiAqPSAtMS4wOyAvLyAoIHUsIHYsIC0xICkgbmVnIHpcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGlyZWN0aW9uO1xuXG5cdFx0fVxuXG5cdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHR2T3V0cHV0RGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKCB1diwgZmFjZUluZGV4ICk7XG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcblxuXHRcdH1cblx0YDtcblxufVxuXG5leHBvcnQgeyBQTVJFTUdlbmVyYXRvciB9O1xuIiwiaW1wb3J0IHsgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nLCBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBQTVJFTUdlbmVyYXRvciB9IGZyb20gJy4uLy4uL2V4dHJhcy9QTVJFTUdlbmVyYXRvci5qcyc7XG5cbmZ1bmN0aW9uIFdlYkdMQ3ViZVVWTWFwcyggcmVuZGVyZXIgKSB7XG5cblx0bGV0IGN1YmVVVm1hcHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGxldCBwbXJlbUdlbmVyYXRvciA9IG51bGw7XG5cblx0ZnVuY3Rpb24gZ2V0KCB0ZXh0dXJlICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRjb25zdCBtYXBwaW5nID0gdGV4dHVyZS5tYXBwaW5nO1xuXG5cdFx0XHRjb25zdCBpc0VxdWlyZWN0TWFwID0gKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApO1xuXHRcdFx0Y29uc3QgaXNDdWJlTWFwID0gKCBtYXBwaW5nID09PSBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgfHwgbWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICk7XG5cblx0XHRcdC8vIGVxdWlyZWN0L2N1YmUgbWFwIHRvIGN1YmVVViBjb252ZXJzaW9uXG5cblx0XHRcdGlmICggaXNFcXVpcmVjdE1hcCB8fCBpc0N1YmVNYXAgKSB7XG5cblx0XHRcdFx0bGV0IHJlbmRlclRhcmdldCA9IGN1YmVVVm1hcHMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0Y29uc3QgY3VycmVudFBNUkVNVmVyc2lvbiA9IHJlbmRlclRhcmdldCAhPT0gdW5kZWZpbmVkID8gcmVuZGVyVGFyZ2V0LnRleHR1cmUucG1yZW1WZXJzaW9uIDogMDtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlICYmIHRleHR1cmUucG1yZW1WZXJzaW9uICE9PSBjdXJyZW50UE1SRU1WZXJzaW9uICkge1xuXG5cdFx0XHRcdFx0aWYgKCBwbXJlbUdlbmVyYXRvciA9PT0gbnVsbCApIHBtcmVtR2VuZXJhdG9yID0gbmV3IFBNUkVNR2VuZXJhdG9yKCByZW5kZXJlciApO1xuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0ID0gaXNFcXVpcmVjdE1hcCA/IHBtcmVtR2VuZXJhdG9yLmZyb21FcXVpcmVjdGFuZ3VsYXIoIHRleHR1cmUsIHJlbmRlclRhcmdldCApIDogcG1yZW1HZW5lcmF0b3IuZnJvbUN1YmVtYXAoIHRleHR1cmUsIHJlbmRlclRhcmdldCApO1xuXHRcdFx0XHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLnBtcmVtVmVyc2lvbiA9IHRleHR1cmUucG1yZW1WZXJzaW9uO1xuXG5cdFx0XHRcdFx0Y3ViZVVWbWFwcy5zZXQoIHRleHR1cmUsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdFx0XHRcdGlmICggKCBpc0VxdWlyZWN0TWFwICYmIGltYWdlICYmIGltYWdlLmhlaWdodCA+IDAgKSB8fCAoIGlzQ3ViZU1hcCAmJiBpbWFnZSAmJiBpc0N1YmVUZXh0dXJlQ29tcGxldGUoIGltYWdlICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHBtcmVtR2VuZXJhdG9yID09PSBudWxsICkgcG1yZW1HZW5lcmF0b3IgPSBuZXcgUE1SRU1HZW5lcmF0b3IoIHJlbmRlcmVyICk7XG5cblx0XHRcdFx0XHRcdFx0cmVuZGVyVGFyZ2V0ID0gaXNFcXVpcmVjdE1hcCA/IHBtcmVtR2VuZXJhdG9yLmZyb21FcXVpcmVjdGFuZ3VsYXIoIHRleHR1cmUgKSA6IHBtcmVtR2VuZXJhdG9yLmZyb21DdWJlbWFwKCB0ZXh0dXJlICk7XG5cdFx0XHRcdFx0XHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLnBtcmVtVmVyc2lvbiA9IHRleHR1cmUucG1yZW1WZXJzaW9uO1xuXG5cdFx0XHRcdFx0XHRcdGN1YmVVVm1hcHMuc2V0KCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRcdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBpbWFnZSBub3QgeWV0IHJlYWR5LiB0cnkgdGhlIGNvbnZlcnNpb24gbmV4dCBmcmFtZVxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaXNDdWJlVGV4dHVyZUNvbXBsZXRlKCBpbWFnZSApIHtcblxuXHRcdGxldCBjb3VudCA9IDA7XG5cdFx0Y29uc3QgbGVuZ3RoID0gNjtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBpbWFnZVsgaSBdICE9PSB1bmRlZmluZWQgKSBjb3VudCArKztcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb3VudCA9PT0gbGVuZ3RoO1xuXG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVGV4dHVyZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRjb25zdCBjdWJlbWFwVVYgPSBjdWJlVVZtYXBzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCBjdWJlbWFwVVYgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y3ViZVVWbWFwcy5kZWxldGUoIHRleHR1cmUgKTtcblx0XHRcdGN1YmVtYXBVVi5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRjdWJlVVZtYXBzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRcdGlmICggcG1yZW1HZW5lcmF0b3IgIT09IG51bGwgKSB7XG5cblx0XHRcdHBtcmVtR2VuZXJhdG9yLmRpc3Bvc2UoKTtcblx0XHRcdHBtcmVtR2VuZXJhdG9yID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuZXhwb3J0IHsgV2ViR0xDdWJlVVZNYXBzIH07XG4iLCJpbXBvcnQgeyB3YXJuT25jZSB9IGZyb20gJy4uLy4uL3V0aWxzLmpzJztcblxuZnVuY3Rpb24gV2ViR0xFeHRlbnNpb25zKCBnbCApIHtcblxuXHRjb25zdCBleHRlbnNpb25zID0ge307XG5cblx0ZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKCBuYW1lICkge1xuXG5cdFx0aWYgKCBleHRlbnNpb25zWyBuYW1lIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbnNbIG5hbWUgXTtcblxuXHRcdH1cblxuXHRcdGxldCBleHRlbnNpb247XG5cblx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRjYXNlICdXRUJHTF9kZXB0aF90ZXh0dXJlJzpcblx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyc6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Yyc6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnOlxuXHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggbmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uc1sgbmFtZSBdID0gZXh0ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIGV4dGVuc2lvbjtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGhhczogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0XHRyZXR1cm4gZ2V0RXh0ZW5zaW9uKCBuYW1lICkgIT09IG51bGw7XG5cblx0XHR9LFxuXG5cdFx0aW5pdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRnZXRFeHRlbnNpb24oICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfY2xpcF9jdWxsX2Rpc3RhbmNlJyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0JyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfcmVuZGVyX3NoYXJlZF9leHBvbmVudCcgKTtcblxuXHRcdH0sXG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uKCBuYW1lICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uID09PSBudWxsICkge1xuXG5cdFx0XHRcdHdhcm5PbmNlKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogJyArIG5hbWUgKyAnIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXh0ZW5zaW9uO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuXG5leHBvcnQgeyBXZWJHTEV4dGVuc2lvbnMgfTtcbiIsImltcG9ydCB7IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgVWludDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgYXJyYXlOZWVkc1VpbnQzMiB9IGZyb20gJy4uLy4uL3V0aWxzLmpzJztcblxuZnVuY3Rpb24gV2ViR0xHZW9tZXRyaWVzKCBnbCwgYXR0cmlidXRlcywgaW5mbywgYmluZGluZ1N0YXRlcyApIHtcblxuXHRjb25zdCBnZW9tZXRyaWVzID0ge307XG5cdGNvbnN0IHdpcmVmcmFtZUF0dHJpYnV0ZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGZ1bmN0aW9uIG9uR2VvbWV0cnlEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGdlb21ldHJ5LmluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBnZW9tZXRyeS5hdHRyaWJ1dGVzWyBuYW1lIF0gKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBhcnJheVsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25HZW9tZXRyeURpc3Bvc2UgKTtcblxuXHRcdGRlbGV0ZSBnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0Y29uc3QgYXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGF0dHJpYnV0ZSApO1xuXHRcdFx0d2lyZWZyYW1lQXR0cmlidXRlcy5kZWxldGUoIGdlb21ldHJ5ICk7XG5cblx0XHR9XG5cblx0XHRiaW5kaW5nU3RhdGVzLnJlbGVhc2VTdGF0ZXNPZkdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID09PSB0cnVlICkge1xuXG5cdFx0XHRkZWxldGUgZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQ7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcyAtLTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0KCBvYmplY3QsIGdlb21ldHJ5ICkge1xuXG5cdFx0aWYgKCBnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdID09PSB0cnVlICkgcmV0dXJuIGdlb21ldHJ5O1xuXG5cdFx0Z2VvbWV0cnkuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkdlb21ldHJ5RGlzcG9zZSApO1xuXG5cdFx0Z2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXSA9IHRydWU7XG5cblx0XHRpbmZvLm1lbW9yeS5nZW9tZXRyaWVzICsrO1xuXG5cdFx0cmV0dXJuIGdlb21ldHJ5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdC8vIFVwZGF0aW5nIGluZGV4IGJ1ZmZlciBpbiBWQU8gbm93LiBTZWUgV2ViR0xCaW5kaW5nU3RhdGVzLlxuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBnZW9tZXRyeUF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBnZW9tZXRyeUF0dHJpYnV0ZXNbIG5hbWUgXSwgZ2wuQVJSQVlfQlVGRkVSICk7XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCB0YXJnZXRzXG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIG1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggYXJyYXlbIGkgXSwgZ2wuQVJSQVlfQlVGRkVSICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblxuXHRcdGNvbnN0IGdlb21ldHJ5SW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRjb25zdCBnZW9tZXRyeVBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRsZXQgdmVyc2lvbiA9IDA7XG5cblx0XHRpZiAoIGdlb21ldHJ5SW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gZ2VvbWV0cnlJbmRleC5hcnJheTtcblx0XHRcdHZlcnNpb24gPSBnZW9tZXRyeUluZGV4LnZlcnNpb247XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gYXJyYXlbIGkgKyAwIF07XG5cdFx0XHRcdGNvbnN0IGIgPSBhcnJheVsgaSArIDEgXTtcblx0XHRcdFx0Y29uc3QgYyA9IGFycmF5WyBpICsgMiBdO1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgYiwgYywgYywgYSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeVBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gZ2VvbWV0cnlQb3NpdGlvbi5hcnJheTtcblx0XHRcdHZlcnNpb24gPSBnZW9tZXRyeVBvc2l0aW9uLnZlcnNpb247XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9ICggYXJyYXkubGVuZ3RoIC8gMyApIC0gMTsgaSA8IGw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gaSArIDA7XG5cdFx0XHRcdGNvbnN0IGIgPSBpICsgMTtcblx0XHRcdFx0Y29uc3QgYyA9IGkgKyAyO1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgYiwgYywgYywgYSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRjb25zdCBhdHRyaWJ1dGUgPSBuZXcgKCBhcnJheU5lZWRzVWludDMyKCBpbmRpY2VzICkgPyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUgOiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgKSggaW5kaWNlcywgMSApO1xuXHRcdGF0dHJpYnV0ZS52ZXJzaW9uID0gdmVyc2lvbjtcblxuXHRcdC8vIFVwZGF0aW5nIGluZGV4IGJ1ZmZlciBpbiBWQU8gbm93LiBTZWUgV2ViR0xCaW5kaW5nU3RhdGVzXG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgcHJldmlvdXNBdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldCggZ2VvbWV0cnkgKTtcblxuXHRcdGlmICggcHJldmlvdXNBdHRyaWJ1dGUgKSBhdHRyaWJ1dGVzLnJlbW92ZSggcHJldmlvdXNBdHRyaWJ1dGUgKTtcblxuXHRcdC8vXG5cblx0XHR3aXJlZnJhbWVBdHRyaWJ1dGVzLnNldCggZ2VvbWV0cnksIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc3QgY3VycmVudEF0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdFx0aWYgKCBjdXJyZW50QXR0cmlidXRlICkge1xuXG5cdFx0XHRjb25zdCBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cblx0XHRcdGlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyBpZiB0aGUgYXR0cmlidXRlIGlzIG9ic29sZXRlLCBjcmVhdGUgYSBuZXcgb25lXG5cblx0XHRcdFx0aWYgKCBjdXJyZW50QXR0cmlidXRlLnZlcnNpb24gPCBnZW9tZXRyeUluZGV4LnZlcnNpb24gKSB7XG5cblx0XHRcdFx0XHR1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGdldCxcblx0XHR1cGRhdGU6IHVwZGF0ZSxcblxuXHRcdGdldFdpcmVmcmFtZUF0dHJpYnV0ZTogZ2V0V2lyZWZyYW1lQXR0cmlidXRlXG5cblx0fTtcblxufVxuXG5cbmV4cG9ydCB7IFdlYkdMR2VvbWV0cmllcyB9O1xuIiwiZnVuY3Rpb24gV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIoIGdsLCBleHRlbnNpb25zLCBpbmZvICkge1xuXG5cdGxldCBtb2RlO1xuXG5cdGZ1bmN0aW9uIHNldE1vZGUoIHZhbHVlICkge1xuXG5cdFx0bW9kZSA9IHZhbHVlO1xuXG5cdH1cblxuXHRsZXQgdHlwZSwgYnl0ZXNQZXJFbGVtZW50O1xuXG5cdGZ1bmN0aW9uIHNldEluZGV4KCB2YWx1ZSApIHtcblxuXHRcdHR5cGUgPSB2YWx1ZS50eXBlO1xuXHRcdGJ5dGVzUGVyRWxlbWVudCA9IHZhbHVlLmJ5dGVzUGVyRWxlbWVudDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHRnbC5kcmF3RWxlbWVudHMoIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCApO1xuXG5cdFx0aW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCAxICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlckluc3RhbmNlcyggc3RhcnQsIGNvdW50LCBwcmltY291bnQgKSB7XG5cblx0XHRpZiAoIHByaW1jb3VudCA9PT0gMCApIHJldHVybjtcblxuXHRcdGdsLmRyYXdFbGVtZW50c0luc3RhbmNlZCggbW9kZSwgY291bnQsIHR5cGUsIHN0YXJ0ICogYnl0ZXNQZXJFbGVtZW50LCBwcmltY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgcHJpbWNvdW50ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck11bHRpRHJhdyggc3RhcnRzLCBjb3VudHMsIGRyYXdDb3VudCApIHtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApO1xuXHRcdGV4dGVuc2lvbi5tdWx0aURyYXdFbGVtZW50c1dFQkdMKCBtb2RlLCBjb3VudHMsIDAsIHR5cGUsIHN0YXJ0cywgMCwgZHJhd0NvdW50ICk7XG5cblx0XHRsZXQgZWxlbWVudENvdW50ID0gMDtcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdGVsZW1lbnRDb3VudCArPSBjb3VudHNbIGkgXTtcblxuXHRcdH1cblxuXHRcdGluZm8udXBkYXRlKCBlbGVtZW50Q291bnQsIG1vZGUsIDEgKTtcblxuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMoIHN0YXJ0cywgY291bnRzLCBkcmF3Q291bnQsIHByaW1jb3VudCApIHtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHN0YXJ0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0cmVuZGVySW5zdGFuY2VzKCBzdGFydHNbIGkgXSAvIGJ5dGVzUGVyRWxlbWVudCwgY291bnRzWyBpIF0sIHByaW1jb3VudFsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGV4dGVuc2lvbi5tdWx0aURyYXdFbGVtZW50c0luc3RhbmNlZFdFQkdMKCBtb2RlLCBjb3VudHMsIDAsIHR5cGUsIHN0YXJ0cywgMCwgcHJpbWNvdW50LCAwLCBkcmF3Q291bnQgKTtcblxuXHRcdFx0bGV0IGVsZW1lbnRDb3VudCA9IDA7XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0ZWxlbWVudENvdW50ICs9IGNvdW50c1sgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByaW1jb3VudC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0aW5mby51cGRhdGUoIGVsZW1lbnRDb3VudCwgbW9kZSwgcHJpbWNvdW50WyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMuc2V0SW5kZXggPSBzZXRJbmRleDtcblx0dGhpcy5yZW5kZXIgPSByZW5kZXI7XG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xuXHR0aGlzLnJlbmRlck11bHRpRHJhdyA9IHJlbmRlck11bHRpRHJhdztcblx0dGhpcy5yZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMgPSByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXM7XG5cbn1cblxuXG5leHBvcnQgeyBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciB9O1xuIiwiZnVuY3Rpb24gV2ViR0xJbmZvKCBnbCApIHtcblxuXHRjb25zdCBtZW1vcnkgPSB7XG5cdFx0Z2VvbWV0cmllczogMCxcblx0XHR0ZXh0dXJlczogMFxuXHR9O1xuXG5cdGNvbnN0IHJlbmRlciA9IHtcblx0XHRmcmFtZTogMCxcblx0XHRjYWxsczogMCxcblx0XHR0cmlhbmdsZXM6IDAsXG5cdFx0cG9pbnRzOiAwLFxuXHRcdGxpbmVzOiAwXG5cdH07XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBjb3VudCwgbW9kZSwgaW5zdGFuY2VDb3VudCApIHtcblxuXHRcdHJlbmRlci5jYWxscyArKztcblxuXHRcdHN3aXRjaCAoIG1vZGUgKSB7XG5cblx0XHRcdGNhc2UgZ2wuVFJJQU5HTEVTOlxuXHRcdFx0XHRyZW5kZXIudHJpYW5nbGVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC8gMyApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBnbC5MSU5FUzpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC8gMiApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBnbC5MSU5FX1NUUklQOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLSAxICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIGdsLkxJTkVfTE9PUDpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgZ2wuUE9JTlRTOlxuXHRcdFx0XHRyZW5kZXIucG9pbnRzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTEluZm86IFVua25vd24gZHJhdyBtb2RlOicsIG1vZGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXG5cdFx0cmVuZGVyLmNhbGxzID0gMDtcblx0XHRyZW5kZXIudHJpYW5nbGVzID0gMDtcblx0XHRyZW5kZXIucG9pbnRzID0gMDtcblx0XHRyZW5kZXIubGluZXMgPSAwO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdG1lbW9yeTogbWVtb3J5LFxuXHRcdHJlbmRlcjogcmVuZGVyLFxuXHRcdHByb2dyYW1zOiBudWxsLFxuXHRcdGF1dG9SZXNldDogdHJ1ZSxcblx0XHRyZXNldDogcmVzZXQsXG5cdFx0dXBkYXRlOiB1cGRhdGVcblx0fTtcblxufVxuXG5cbmV4cG9ydCB7IFdlYkdMSW5mbyB9O1xuIiwiaW1wb3J0IHsgRmxvYXRUeXBlIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IERhdGFBcnJheVRleHR1cmUgfSBmcm9tICcuLi8uLi90ZXh0dXJlcy9EYXRhQXJyYXlUZXh0dXJlLmpzJztcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjQuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XG5cbmZ1bmN0aW9uIFdlYkdMTW9ycGh0YXJnZXRzKCBnbCwgY2FwYWJpbGl0aWVzLCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBtb3JwaFRleHR1cmVzID0gbmV3IFdlYWtNYXAoKTtcblx0Y29uc3QgbW9ycGggPSBuZXcgVmVjdG9yNCgpO1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgcHJvZ3JhbSApIHtcblxuXHRcdGNvbnN0IG9iamVjdEluZmx1ZW5jZXMgPSBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzO1xuXG5cdFx0Ly8gdGhlIGZvbGxvd2luZyBlbmNvZGVzIG1vcnBoIHRhcmdldHMgaW50byBhbiBhcnJheSBvZiBkYXRhIHRleHR1cmVzLiBFYWNoIGxheWVyIHJlcHJlc2VudHMgYSBzaW5nbGUgbW9ycGggdGFyZ2V0LlxuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7XG5cdFx0Y29uc3QgbW9ycGhUYXJnZXRzQ291bnQgPSAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSA/IG1vcnBoQXR0cmlidXRlLmxlbmd0aCA6IDA7XG5cblx0XHRsZXQgZW50cnkgPSBtb3JwaFRleHR1cmVzLmdldCggZ2VvbWV0cnkgKTtcblxuXHRcdGlmICggZW50cnkgPT09IHVuZGVmaW5lZCB8fCBlbnRyeS5jb3VudCAhPT0gbW9ycGhUYXJnZXRzQ291bnQgKSB7XG5cblx0XHRcdGlmICggZW50cnkgIT09IHVuZGVmaW5lZCApIGVudHJ5LnRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0XHRjb25zdCBoYXNNb3JwaFBvc2l0aW9uID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uICE9PSB1bmRlZmluZWQ7XG5cdFx0XHRjb25zdCBoYXNNb3JwaE5vcm1hbHMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQ7XG5cdFx0XHRjb25zdCBoYXNNb3JwaENvbG9ycyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0XHRjb25zdCBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gfHwgW107XG5cdFx0XHRjb25zdCBtb3JwaE5vcm1hbHMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsIHx8IFtdO1xuXHRcdFx0Y29uc3QgbW9ycGhDb2xvcnMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgfHwgW107XG5cblx0XHRcdGxldCB2ZXJ0ZXhEYXRhQ291bnQgPSAwO1xuXG5cdFx0XHRpZiAoIGhhc01vcnBoUG9zaXRpb24gPT09IHRydWUgKSB2ZXJ0ZXhEYXRhQ291bnQgPSAxO1xuXHRcdFx0aWYgKCBoYXNNb3JwaE5vcm1hbHMgPT09IHRydWUgKSB2ZXJ0ZXhEYXRhQ291bnQgPSAyO1xuXHRcdFx0aWYgKCBoYXNNb3JwaENvbG9ycyA9PT0gdHJ1ZSApIHZlcnRleERhdGFDb3VudCA9IDM7XG5cblx0XHRcdGxldCB3aWR0aCA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uY291bnQgKiB2ZXJ0ZXhEYXRhQ291bnQ7XG5cdFx0XHRsZXQgaGVpZ2h0ID0gMTtcblxuXHRcdFx0aWYgKCB3aWR0aCA+IGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApIHtcblxuXHRcdFx0XHRoZWlnaHQgPSBNYXRoLmNlaWwoIHdpZHRoIC8gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplICk7XG5cdFx0XHRcdHdpZHRoID0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoIHdpZHRoICogaGVpZ2h0ICogNCAqIG1vcnBoVGFyZ2V0c0NvdW50ICk7XG5cblx0XHRcdGNvbnN0IHRleHR1cmUgPSBuZXcgRGF0YUFycmF5VGV4dHVyZSggYnVmZmVyLCB3aWR0aCwgaGVpZ2h0LCBtb3JwaFRhcmdldHNDb3VudCApO1xuXHRcdFx0dGV4dHVyZS50eXBlID0gRmxvYXRUeXBlO1xuXHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdC8vIGZpbGwgYnVmZmVyXG5cblx0XHRcdGNvbnN0IHZlcnRleERhdGFTdHJpZGUgPSB2ZXJ0ZXhEYXRhQ291bnQgKiA0O1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBtb3JwaFRhcmdldHNDb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBtb3JwaFRhcmdldCA9IG1vcnBoVGFyZ2V0c1sgaSBdO1xuXHRcdFx0XHRjb25zdCBtb3JwaE5vcm1hbCA9IG1vcnBoTm9ybWFsc1sgaSBdO1xuXHRcdFx0XHRjb25zdCBtb3JwaENvbG9yID0gbW9ycGhDb2xvcnNbIGkgXTtcblxuXHRcdFx0XHRjb25zdCBvZmZzZXQgPSB3aWR0aCAqIGhlaWdodCAqIDQgKiBpO1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IG1vcnBoVGFyZ2V0LmNvdW50OyBqICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3Qgc3RyaWRlID0gaiAqIHZlcnRleERhdGFTdHJpZGU7XG5cblx0XHRcdFx0XHRpZiAoIGhhc01vcnBoUG9zaXRpb24gPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdG1vcnBoLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoVGFyZ2V0LCBqICk7XG5cblx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMCBdID0gbW9ycGgueDtcblx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMSBdID0gbW9ycGgueTtcblx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMiBdID0gbW9ycGguejtcblx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMyBdID0gMDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaGFzTW9ycGhOb3JtYWxzID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRtb3JwaC5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaE5vcm1hbCwgaiApO1xuXG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDQgXSA9IG1vcnBoLng7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDUgXSA9IG1vcnBoLnk7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDYgXSA9IG1vcnBoLno7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDcgXSA9IDA7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGhhc01vcnBoQ29sb3JzID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRtb3JwaC5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaENvbG9yLCBqICk7XG5cblx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgOCBdID0gbW9ycGgueDtcblx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgOSBdID0gbW9ycGgueTtcblx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMTAgXSA9IG1vcnBoLno7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDExIF0gPSAoIG1vcnBoQ29sb3IuaXRlbVNpemUgPT09IDQgKSA/IG1vcnBoLncgOiAxO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRlbnRyeSA9IHtcblx0XHRcdFx0Y291bnQ6IG1vcnBoVGFyZ2V0c0NvdW50LFxuXHRcdFx0XHR0ZXh0dXJlOiB0ZXh0dXJlLFxuXHRcdFx0XHRzaXplOiBuZXcgVmVjdG9yMiggd2lkdGgsIGhlaWdodCApXG5cdFx0XHR9O1xuXG5cdFx0XHRtb3JwaFRleHR1cmVzLnNldCggZ2VvbWV0cnksIGVudHJ5ICk7XG5cblx0XHRcdGZ1bmN0aW9uIGRpc3Bvc2VUZXh0dXJlKCkge1xuXG5cdFx0XHRcdHRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0XHRcdG1vcnBoVGV4dHVyZXMuZGVsZXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0XHRcdGdlb21ldHJ5LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgZGlzcG9zZVRleHR1cmUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VUZXh0dXJlICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXHRcdGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZSAmJiBvYmplY3QubW9ycGhUZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRwcm9ncmFtLmdldFVuaWZvcm1zKCkuc2V0VmFsdWUoIGdsLCAnbW9ycGhUZXh0dXJlJywgb2JqZWN0Lm1vcnBoVGV4dHVyZSwgdGV4dHVyZXMgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGxldCBtb3JwaEluZmx1ZW5jZXNTdW0gPSAwO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRtb3JwaEluZmx1ZW5jZXNTdW0gKz0gb2JqZWN0SW5mbHVlbmNlc1sgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IG1vcnBoQmFzZUluZmx1ZW5jZSA9IGdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1JlbGF0aXZlID8gMSA6IDEgLSBtb3JwaEluZmx1ZW5jZXNTdW07XG5cblxuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZScsIG1vcnBoQmFzZUluZmx1ZW5jZSApO1xuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsIG9iamVjdEluZmx1ZW5jZXMgKTtcblxuXHRcdH1cblxuXHRcdHByb2dyYW0uZ2V0VW5pZm9ybXMoKS5zZXRWYWx1ZSggZ2wsICdtb3JwaFRhcmdldHNUZXh0dXJlJywgZW50cnkudGV4dHVyZSwgdGV4dHVyZXMgKTtcblx0XHRwcm9ncmFtLmdldFVuaWZvcm1zKCkuc2V0VmFsdWUoIGdsLCAnbW9ycGhUYXJnZXRzVGV4dHVyZVNpemUnLCBlbnRyeS5zaXplICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHR1cGRhdGU6IHVwZGF0ZVxuXG5cdH07XG5cbn1cblxuXG5leHBvcnQgeyBXZWJHTE1vcnBodGFyZ2V0cyB9O1xuIiwiZnVuY3Rpb24gV2ViR0xPYmplY3RzKCBnbCwgZ2VvbWV0cmllcywgYXR0cmlidXRlcywgaW5mbyApIHtcblxuXHRsZXQgdXBkYXRlTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCApIHtcblxuXHRcdGNvbnN0IGZyYW1lID0gaW5mby5yZW5kZXIuZnJhbWU7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblx0XHRjb25zdCBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXMuZ2V0KCBvYmplY3QsIGdlb21ldHJ5ICk7XG5cblx0XHQvLyBVcGRhdGUgb25jZSBwZXIgZnJhbWVcblxuXHRcdGlmICggdXBkYXRlTWFwLmdldCggYnVmZmVyZ2VvbWV0cnkgKSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdGdlb21ldHJpZXMudXBkYXRlKCBidWZmZXJnZW9tZXRyeSApO1xuXG5cdFx0XHR1cGRhdGVNYXAuc2V0KCBidWZmZXJnZW9tZXRyeSwgZnJhbWUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaGFzRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkluc3RhbmNlZE1lc2hEaXNwb3NlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdG9iamVjdC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uSW5zdGFuY2VkTWVzaERpc3Bvc2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHVwZGF0ZU1hcC5nZXQoIG9iamVjdCApICE9PSBmcmFtZSApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggb2JqZWN0Lmluc3RhbmNlTWF0cml4LCBnbC5BUlJBWV9CVUZGRVIgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5pbnN0YW5jZUNvbG9yICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIG9iamVjdC5pbnN0YW5jZUNvbG9yLCBnbC5BUlJBWV9CVUZGRVIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dXBkYXRlTWFwLnNldCggb2JqZWN0LCBmcmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoICkge1xuXG5cdFx0XHRjb25zdCBza2VsZXRvbiA9IG9iamVjdC5za2VsZXRvbjtcblxuXHRcdFx0aWYgKCB1cGRhdGVNYXAuZ2V0KCBza2VsZXRvbiApICE9PSBmcmFtZSApIHtcblxuXHRcdFx0XHRza2VsZXRvbi51cGRhdGUoKTtcblxuXHRcdFx0XHR1cGRhdGVNYXAuc2V0KCBza2VsZXRvbiwgZnJhbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJ1ZmZlcmdlb21ldHJ5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0dXBkYXRlTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25JbnN0YW5jZWRNZXNoRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBpbnN0YW5jZWRNZXNoID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0aW5zdGFuY2VkTWVzaC5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uSW5zdGFuY2VkTWVzaERpc3Bvc2UgKTtcblxuXHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBpbnN0YW5jZWRNZXNoLmluc3RhbmNlTWF0cml4ICk7XG5cblx0XHRpZiAoIGluc3RhbmNlZE1lc2guaW5zdGFuY2VDb2xvciAhPT0gbnVsbCApIGF0dHJpYnV0ZXMucmVtb3ZlKCBpbnN0YW5jZWRNZXNoLmluc3RhbmNlQ29sb3IgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2VcblxuXHR9O1xuXG59XG5cblxuZXhwb3J0IHsgV2ViR0xPYmplY3RzIH07XG4iLCJpbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlLmpzJztcbmltcG9ydCB7IE5lYXJlc3RGaWx0ZXIsIFVuc2lnbmVkSW50VHlwZSwgVW5zaWduZWRJbnQyNDhUeXBlLCBEZXB0aEZvcm1hdCwgRGVwdGhTdGVuY2lsRm9ybWF0IH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuY2xhc3MgRGVwdGhUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0Y29uc3RydWN0b3IoIHdpZHRoLCBoZWlnaHQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGZvcm1hdCA9IERlcHRoRm9ybWF0ICkge1xuXG5cdFx0aWYgKCBmb3JtYXQgIT09IERlcHRoRm9ybWF0ICYmIGZvcm1hdCAhPT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdEZXB0aFRleHR1cmUgZm9ybWF0IG11c3QgYmUgZWl0aGVyIFRIUkVFLkRlcHRoRm9ybWF0IG9yIFRIUkVFLkRlcHRoU3RlbmNpbEZvcm1hdCcgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHlwZSA9PT0gdW5kZWZpbmVkICYmIGZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgKSB0eXBlID0gVW5zaWduZWRJbnRUeXBlO1xuXHRcdGlmICggdHlwZSA9PT0gdW5kZWZpbmVkICYmIGZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkgdHlwZSA9IFVuc2lnbmVkSW50MjQ4VHlwZTtcblxuXHRcdHN1cGVyKCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTtcblxuXHRcdHRoaXMuaXNEZXB0aFRleHR1cmUgPSB0cnVlO1xuXG5cdFx0dGhpcy5pbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1hZ0ZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XG5cblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdHRoaXMuY29tcGFyZUZ1bmN0aW9uID0gbnVsbDtcblxuXHR9XG5cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29tcGFyZUZ1bmN0aW9uID0gc291cmNlLmNvbXBhcmVGdW5jdGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRpZiAoIHRoaXMuY29tcGFyZUZ1bmN0aW9uICE9PSBudWxsICkgZGF0YS5jb21wYXJlRnVuY3Rpb24gPSB0aGlzLmNvbXBhcmVGdW5jdGlvbjtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBEZXB0aFRleHR1cmUgfTtcbiIsIi8qKlxuICogVW5pZm9ybXMgb2YgYSBwcm9ncmFtLlxuICogVGhvc2UgZm9ybSBhIHRyZWUgc3RydWN0dXJlIHdpdGggYSBzcGVjaWFsIHRvcC1sZXZlbCBjb250YWluZXIgZm9yIHRoZSByb290LFxuICogd2hpY2ggeW91IGdldCBieSBjYWxsaW5nICduZXcgV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0gKScuXG4gKlxuICpcbiAqIFByb3BlcnRpZXMgb2YgaW5uZXIgbm9kZXMgaW5jbHVkaW5nIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOlxuICpcbiAqIC5zZXEgLSBhcnJheSBvZiBuZXN0ZWQgdW5pZm9ybXNcbiAqIC5tYXAgLSBuZXN0ZWQgdW5pZm9ybXMgYnkgbmFtZVxuICpcbiAqXG4gKiBNZXRob2RzIG9mIGFsbCBub2RlcyBleGNlcHQgdGhlIHRvcC1sZXZlbCBjb250YWluZXI6XG4gKlxuICogLnNldFZhbHVlKCBnbCwgdmFsdWUsIFt0ZXh0dXJlc10gKVxuICpcbiAqIFx0XHR1cGxvYWRzIGEgdW5pZm9ybSB2YWx1ZShzKVxuICogIFx0dGhlICd0ZXh0dXJlcycgcGFyYW1ldGVyIGlzIG5lZWRlZCBmb3Igc2FtcGxlciB1bmlmb3Jtc1xuICpcbiAqXG4gKiBTdGF0aWMgbWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAodGV4dHVyZXMgZmFjdG9yaXphdGlvbnMpOlxuICpcbiAqIC51cGxvYWQoIGdsLCBzZXEsIHZhbHVlcywgdGV4dHVyZXMgKVxuICpcbiAqIFx0XHRzZXRzIHVuaWZvcm1zIGluICdzZXEnIHRvICd2YWx1ZXNbaWRdLnZhbHVlJ1xuICpcbiAqIC5zZXFXaXRoVmFsdWUoIHNlcSwgdmFsdWVzICkgOiBmaWx0ZXJlZFNlcVxuICpcbiAqIFx0XHRmaWx0ZXJzICdzZXEnIGVudHJpZXMgd2l0aCBjb3JyZXNwb25kaW5nIGVudHJ5IGluIHZhbHVlc1xuICpcbiAqXG4gKiBNZXRob2RzIG9mIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyICh0ZXh0dXJlcyBmYWN0b3JpemF0aW9ucyk6XG4gKlxuICogLnNldFZhbHVlKCBnbCwgbmFtZSwgdmFsdWUsIHRleHR1cmVzIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtIHdpdGggIG5hbWUgJ25hbWUnIHRvICd2YWx1ZSdcbiAqXG4gKiAuc2V0T3B0aW9uYWwoIGdsLCBvYmosIHByb3AgKVxuICpcbiAqIFx0XHRsaWtlIC5zZXQgZm9yIGFuIG9wdGlvbmFsIHByb3BlcnR5IG9mIHRoZSBvYmplY3RcbiAqXG4gKi9cblxuaW1wb3J0IHsgQ3ViZVRleHR1cmUgfSBmcm9tICcuLi8uLi90ZXh0dXJlcy9DdWJlVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vLi4vdGV4dHVyZXMvVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBEYXRhQXJyYXlUZXh0dXJlIH0gZnJvbSAnLi4vLi4vdGV4dHVyZXMvRGF0YUFycmF5VGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBEYXRhM0RUZXh0dXJlIH0gZnJvbSAnLi4vLi4vdGV4dHVyZXMvRGF0YTNEVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBEZXB0aFRleHR1cmUgfSBmcm9tICcuLi8uLi90ZXh0dXJlcy9EZXB0aFRleHR1cmUuanMnO1xuaW1wb3J0IHsgTGVzc0VxdWFsQ29tcGFyZSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IGVtcHR5VGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFRleHR1cmUoKTtcblxuY29uc3QgZW1wdHlTaGFkb3dUZXh0dXJlID0gLypAX19QVVJFX18qLyBuZXcgRGVwdGhUZXh0dXJlKCAxLCAxICk7XG5cbmNvbnN0IGVtcHR5QXJyYXlUZXh0dXJlID0gLypAX19QVVJFX18qLyBuZXcgRGF0YUFycmF5VGV4dHVyZSgpO1xuY29uc3QgZW1wdHkzZFRleHR1cmUgPSAvKkBfX1BVUkVfXyovIG5ldyBEYXRhM0RUZXh0dXJlKCk7XG5jb25zdCBlbXB0eUN1YmVUZXh0dXJlID0gLypAX19QVVJFX18qLyBuZXcgQ3ViZVRleHR1cmUoKTtcblxuLy8gLS0tIFV0aWxpdGllcyAtLS1cblxuLy8gQXJyYXkgQ2FjaGVzIChwcm92aWRlIHR5cGVkIGFycmF5cyBmb3IgdGVtcG9yYXJ5IGJ5IHNpemUpXG5cbmNvbnN0IGFycmF5Q2FjaGVGMzIgPSBbXTtcbmNvbnN0IGFycmF5Q2FjaGVJMzIgPSBbXTtcblxuLy8gRmxvYXQzMkFycmF5IGNhY2hlcyB1c2VkIGZvciB1cGxvYWRpbmcgTWF0cml4IHVuaWZvcm1zXG5cbmNvbnN0IG1hdDRhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDE2ICk7XG5jb25zdCBtYXQzYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCA5ICk7XG5jb25zdCBtYXQyYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCA0ICk7XG5cbi8vIEZsYXR0ZW5pbmcgZm9yIGFycmF5cyBvZiB2ZWN0b3JzIGFuZCBtYXRyaWNlc1xuXG5mdW5jdGlvbiBmbGF0dGVuKCBhcnJheSwgbkJsb2NrcywgYmxvY2tTaXplICkge1xuXG5cdGNvbnN0IGZpcnN0RWxlbSA9IGFycmF5WyAwIF07XG5cblx0aWYgKCBmaXJzdEVsZW0gPD0gMCB8fCBmaXJzdEVsZW0gPiAwICkgcmV0dXJuIGFycmF5O1xuXHQvLyB1bm9wdGltaXplZDogISBpc05hTiggZmlyc3RFbGVtIClcblx0Ly8gc2VlIGh0dHA6Ly9qYWNrc29uZHVuc3Rhbi5jb20vYXJ0aWNsZXMvOTgzXG5cblx0Y29uc3QgbiA9IG5CbG9ja3MgKiBibG9ja1NpemU7XG5cdGxldCByID0gYXJyYXlDYWNoZUYzMlsgbiBdO1xuXG5cdGlmICggciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0ciA9IG5ldyBGbG9hdDMyQXJyYXkoIG4gKTtcblx0XHRhcnJheUNhY2hlRjMyWyBuIF0gPSByO1xuXG5cdH1cblxuXHRpZiAoIG5CbG9ja3MgIT09IDAgKSB7XG5cblx0XHRmaXJzdEVsZW0udG9BcnJheSggciwgMCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxLCBvZmZzZXQgPSAwOyBpICE9PSBuQmxvY2tzOyArKyBpICkge1xuXG5cdFx0XHRvZmZzZXQgKz0gYmxvY2tTaXplO1xuXHRcdFx0YXJyYXlbIGkgXS50b0FycmF5KCByLCBvZmZzZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHI7XG5cbn1cblxuZnVuY3Rpb24gYXJyYXlzRXF1YWwoIGEsIGIgKSB7XG5cblx0aWYgKCBhLmxlbmd0aCAhPT0gYi5sZW5ndGggKSByZXR1cm4gZmFsc2U7XG5cblx0Zm9yICggbGV0IGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0aWYgKCBhWyBpIF0gIT09IGJbIGkgXSApIHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn1cblxuZnVuY3Rpb24gY29weUFycmF5KCBhLCBiICkge1xuXG5cdGZvciAoIGxldCBpID0gMCwgbCA9IGIubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdGFbIGkgXSA9IGJbIGkgXTtcblxuXHR9XG5cbn1cblxuLy8gVGV4dHVyZSB1bml0IGFsbG9jYXRpb25cblxuZnVuY3Rpb24gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKSB7XG5cblx0bGV0IHIgPSBhcnJheUNhY2hlSTMyWyBuIF07XG5cblx0aWYgKCByID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRyID0gbmV3IEludDMyQXJyYXkoIG4gKTtcblx0XHRhcnJheUNhY2hlSTMyWyBuIF0gPSByO1xuXG5cdH1cblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRyWyBpIF0gPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0fVxuXG5cdHJldHVybiByO1xuXG59XG5cbi8vIC0tLSBTZXR0ZXJzIC0tLVxuXG4vLyBOb3RlOiBEZWZpbmluZyB0aGVzZSBtZXRob2RzIGV4dGVybmFsbHksIGJlY2F1c2UgdGhleSBjb21lIGluIGEgYnVuY2hcbi8vIGFuZCB0aGlzIHdheSB0aGVpciBuYW1lcyBtaW5pZnkuXG5cbi8vIFNpbmdsZSBzY2FsYXJcblxuZnVuY3Rpb24gc2V0VmFsdWVWMWYoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gPT09IHYgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTFmKCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjYWNoZVsgMCBdID0gdjtcblxufVxuXG4vLyBTaW5nbGUgZmxvYXQgdmVjdG9yIChmcm9tIGZsYXQgYXJyYXkgb3IgVEhSRUUuVmVjdG9yTilcblxuZnVuY3Rpb24gc2V0VmFsdWVWMmYoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtMmYoIHRoaXMuYWRkciwgdi54LCB2LnkgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtMmZ2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM2YoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTNmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnogKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi56O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSBpZiAoIHYuciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnIgfHwgY2FjaGVbIDEgXSAhPT0gdi5nIHx8IGNhY2hlWyAyIF0gIT09IHYuYiApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTNmKCB0aGlzLmFkZHIsIHYuciwgdi5nLCB2LmIgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYucjtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lmc7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi5iO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjRmKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogfHwgY2FjaGVbIDMgXSAhPT0gdi53ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtNGYoIHRoaXMuYWRkciwgdi54LCB2LnksIHYueiwgdi53ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuejtcblx0XHRcdGNhY2hlWyAzIF0gPSB2Lnc7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtNGZ2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuLy8gU2luZ2xlIG1hdHJpeCAoZnJvbSBmbGF0IGFycmF5IG9yIFRIUkVFLk1hdHJpeE4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlTTIoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xuXG5cdGlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgcmV0dXJuO1xuXG5cdFx0bWF0MmFycmF5LnNldCggZWxlbWVudHMgKTtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgyZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDJhcnJheSApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVNMyggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRjb25zdCBlbGVtZW50cyA9IHYuZWxlbWVudHM7XG5cblx0aWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSByZXR1cm47XG5cblx0XHRtYXQzYXJyYXkuc2V0KCBlbGVtZW50cyApO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0M2FycmF5ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU00KCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IGVsZW1lbnRzID0gdi5lbGVtZW50cztcblxuXHRpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjtcblxuXHRcdG1hdDRhcnJheS5zZXQoIGVsZW1lbnRzICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQ0YXJyYXkgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbi8vIFNpbmdsZSBpbnRlZ2VyIC8gYm9vbGVhblxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYxaSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNhY2hlWyAwIF0gPSB2O1xuXG59XG5cbi8vIFNpbmdsZSBpbnRlZ2VyIC8gYm9vbGVhbiB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5WZWN0b3JOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyaSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0yaSggdGhpcy5hZGRyLCB2LngsIHYueSApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0yaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzaSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtM2koIHRoaXMuYWRkciwgdi54LCB2LnksIHYueiApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtM2l2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiB8fCBjYWNoZVsgMyBdICE9PSB2LncgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm00aSggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56LCB2LncgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi56O1xuXHRcdFx0Y2FjaGVbIDMgXSA9IHYudztcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm00aXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG4vLyBTaW5nbGUgdW5zaWduZWQgaW50ZWdlclxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYxdWkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gPT09IHYgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTF1aSggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y2FjaGVbIDAgXSA9IHY7XG5cbn1cblxuLy8gU2luZ2xlIHVuc2lnbmVkIGludGVnZXIgdmVjdG9yIChmcm9tIGZsYXQgYXJyYXkgb3IgVEhSRUUuVmVjdG9yTilcblxuZnVuY3Rpb24gc2V0VmFsdWVWMnVpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTJ1aSggdGhpcy5hZGRyLCB2LngsIHYueSApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0ydWl2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM3VpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zdWkoIHRoaXMuYWRkciwgdi54LCB2LnksIHYueiApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtM3VpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjR1aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56IHx8IGNhY2hlWyAzIF0gIT09IHYudyApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTR1aSggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56LCB2LncgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi56O1xuXHRcdFx0Y2FjaGVbIDMgXSA9IHYudztcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm00dWl2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuXG4vLyBTaW5nbGUgdGV4dHVyZSAoMkQgLyBDdWJlKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQxKCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRjb25zdCB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdGlmICggY2FjaGVbIDAgXSAhPT0gdW5pdCApIHtcblxuXHRcdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB1bml0ICk7XG5cdFx0Y2FjaGVbIDAgXSA9IHVuaXQ7XG5cblx0fVxuXG5cdGxldCBlbXB0eVRleHR1cmUyRDtcblxuXHRpZiAoIHRoaXMudHlwZSA9PT0gZ2wuU0FNUExFUl8yRF9TSEFET1cgKSB7XG5cblx0XHRlbXB0eVNoYWRvd1RleHR1cmUuY29tcGFyZUZ1bmN0aW9uID0gTGVzc0VxdWFsQ29tcGFyZTsgLy8gIzI4NjcwXG5cdFx0ZW1wdHlUZXh0dXJlMkQgPSBlbXB0eVNoYWRvd1RleHR1cmU7XG5cblx0fSBlbHNlIHtcblxuXHRcdGVtcHR5VGV4dHVyZTJEID0gZW1wdHlUZXh0dXJlO1xuXG5cdH1cblxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHYgfHwgZW1wdHlUZXh0dXJlMkQsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQzRDEoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0dGV4dHVyZXMuc2V0VGV4dHVyZTNEKCB2IHx8IGVtcHR5M2RUZXh0dXJlLCB1bml0ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUNiggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdiB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUMkRBcnJheTEoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIHYgfHwgZW1wdHlBcnJheVRleHR1cmUsIHVuaXQgKTtcblxufVxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciB0aGUgc2luZ3VsYXIgY2FzZVxuXG5mdW5jdGlvbiBnZXRTaW5ndWxhclNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZVYxZjsgLy8gRkxPQVRcblx0XHRjYXNlIDB4OGI1MDogcmV0dXJuIHNldFZhbHVlVjJmOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2Y7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZVY0ZjsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVhOiByZXR1cm4gc2V0VmFsdWVNMjsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlTTM7IC8vIF9NQVQzXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00OyAvLyBfTUFUNFxuXG5cdFx0Y2FzZSAweDE0MDQ6IGNhc2UgMHg4YjU2OiByZXR1cm4gc2V0VmFsdWVWMWk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpOyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlVjRpOyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDE0MDU6IHJldHVybiBzZXRWYWx1ZVYxdWk7IC8vIFVJTlRcblx0XHRjYXNlIDB4OGRjNjogcmV0dXJuIHNldFZhbHVlVjJ1aTsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGRjNzogcmV0dXJuIHNldFZhbHVlVjN1aTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGRjODogcmV0dXJuIHNldFZhbHVlVjR1aTsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVlOiAvLyBTQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkNjY6IC8vIFNBTVBMRVJfRVhURVJOQUxfT0VTXG5cdFx0Y2FzZSAweDhkY2E6IC8vIElOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkZDI6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhiNjI6IC8vIFNBTVBMRVJfMkRfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUMTtcblxuXHRcdGNhc2UgMHg4YjVmOiAvLyBTQU1QTEVSXzNEXG5cdFx0Y2FzZSAweDhkY2I6IC8vIElOVF9TQU1QTEVSXzNEXG5cdFx0Y2FzZSAweDhkZDM6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzNEXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUM0QxO1xuXG5cdFx0Y2FzZSAweDhiNjA6IC8vIFNBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGNjOiAvLyBJTlRfU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkZDQ6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRjNTogLy8gU0FNUExFUl9DVUJFX1NIQURPV1xuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDY7XG5cblx0XHRjYXNlIDB4OGRjMTogLy8gU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGNmOiAvLyBJTlRfU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGQ3OiAvLyBVTlNJR05FRF9JTlRfU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGM0OiAvLyBTQU1QTEVSXzJEX0FSUkFZX1NIQURPV1xuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDJEQXJyYXkxO1xuXG5cdH1cblxufVxuXG5cbi8vIEFycmF5IG9mIHNjYWxhcnNcblxuZnVuY3Rpb24gc2V0VmFsdWVWMWZBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTFmdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdmVjdG9ycyAoZnJvbSBmbGF0IGFycmF5IG9yIGFycmF5IG9mIFRIUkVFLlZlY3Rvck4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJmQXJyYXkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDIgKTtcblxuXHRnbC51bmlmb3JtMmZ2KCB0aGlzLmFkZHIsIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzZkFycmF5KCBnbCwgdiApIHtcblxuXHRjb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAzICk7XG5cblx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGZBcnJheSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgNCApO1xuXG5cdGdsLnVuaWZvcm00ZnYoIHRoaXMuYWRkciwgZGF0YSApO1xuXG59XG5cbi8vIEFycmF5IG9mIG1hdHJpY2VzIChmcm9tIGZsYXQgYXJyYXkgb3IgYXJyYXkgb2YgVEhSRUUuTWF0cml4TilcblxuZnVuY3Rpb24gc2V0VmFsdWVNMkFycmF5KCBnbCwgdiApIHtcblxuXHRjb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA0ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTNBcnJheSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgOSApO1xuXG5cdGdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU00QXJyYXkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDE2ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbi8vIEFycmF5IG9mIGludGVnZXIgLyBib29sZWFuXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjFpQXJyYXkoIGdsLCB2ICkge1xuXG5cdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cbi8vIEFycmF5IG9mIGludGVnZXIgLyBib29sZWFuIHZlY3RvcnMgKGZyb20gZmxhdCBhcnJheSlcblxuZnVuY3Rpb24gc2V0VmFsdWVWMmlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTJpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM2lBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTNpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTRpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdW5zaWduZWQgaW50ZWdlclxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYxdWlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTF1aXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cbi8vIEFycmF5IG9mIHVuc2lnbmVkIGludGVnZXIgdmVjdG9ycyAoZnJvbSBmbGF0IGFycmF5KVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYydWlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTJ1aXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjN1aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtM3VpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNHVpQXJyYXkoIGdsLCB2ICkge1xuXG5cdGdsLnVuaWZvcm00dWl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5cbi8vIEFycmF5IG9mIHRleHR1cmVzICgyRCAvIDNEIC8gQ3ViZSAvIDJEQXJyYXkpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVDFBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRjb25zdCBuID0gdi5sZW5ndGg7XG5cblx0Y29uc3QgdW5pdHMgPSBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApO1xuXG5cdGlmICggISBhcnJheXNFcXVhbCggY2FjaGUsIHVuaXRzICkgKSB7XG5cblx0XHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB1bml0cyApO1xuXG5cdH1cblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHZbIGkgXSB8fCBlbXB0eVRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUM0RBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRjb25zdCBuID0gdi5sZW5ndGg7XG5cblx0Y29uc3QgdW5pdHMgPSBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApO1xuXG5cdGlmICggISBhcnJheXNFcXVhbCggY2FjaGUsIHVuaXRzICkgKSB7XG5cblx0XHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB1bml0cyApO1xuXG5cdH1cblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHZbIGkgXSB8fCBlbXB0eTNkVGV4dHVyZSwgdW5pdHNbIGkgXSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQ2QXJyYXkoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0Y29uc3QgbiA9IHYubGVuZ3RoO1xuXG5cdGNvbnN0IHVuaXRzID0gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKTtcblxuXHRpZiAoICEgYXJyYXlzRXF1YWwoIGNhY2hlLCB1bml0cyApICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdW5pdHMgKTtcblxuXHR9XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dGV4dHVyZXMuc2V0VGV4dHVyZUN1YmUoIHZbIGkgXSB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0c1sgaSBdICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDJEQXJyYXlBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRjb25zdCBuID0gdi5sZW5ndGg7XG5cblx0Y29uc3QgdW5pdHMgPSBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApO1xuXG5cdGlmICggISBhcnJheXNFcXVhbCggY2FjaGUsIHVuaXRzICkgKSB7XG5cblx0XHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB1bml0cyApO1xuXG5cdH1cblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkRBcnJheSggdlsgaSBdIHx8IGVtcHR5QXJyYXlUZXh0dXJlLCB1bml0c1sgaSBdICk7XG5cblx0fVxuXG59XG5cblxuLy8gSGVscGVyIHRvIHBpY2sgdGhlIHJpZ2h0IHNldHRlciBmb3IgYSBwdXJlIChib3R0b20tbGV2ZWwpIGFycmF5XG5cbmZ1bmN0aW9uIGdldFB1cmVBcnJheVNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZVYxZkFycmF5OyAvLyBGTE9BVFxuXHRcdGNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWVWMmZBcnJheTsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGI1MTogcmV0dXJuIHNldFZhbHVlVjNmQXJyYXk7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZVY0ZkFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWE6IHJldHVybiBzZXRWYWx1ZU0yQXJyYXk7IC8vIF9NQVQyXG5cdFx0Y2FzZSAweDhiNWI6IHJldHVybiBzZXRWYWx1ZU0zQXJyYXk7IC8vIF9NQVQzXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00QXJyYXk7IC8vIF9NQVQ0XG5cblx0XHRjYXNlIDB4MTQwNDogY2FzZSAweDhiNTY6IHJldHVybiBzZXRWYWx1ZVYxaUFycmF5OyAvLyBJTlQsIEJPT0xcblx0XHRjYXNlIDB4OGI1MzogY2FzZSAweDhiNTc6IHJldHVybiBzZXRWYWx1ZVYyaUFycmF5OyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpQXJyYXk7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTU6IGNhc2UgMHg4YjU5OiByZXR1cm4gc2V0VmFsdWVWNGlBcnJheTsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHgxNDA1OiByZXR1cm4gc2V0VmFsdWVWMXVpQXJyYXk7IC8vIFVJTlRcblx0XHRjYXNlIDB4OGRjNjogcmV0dXJuIHNldFZhbHVlVjJ1aUFycmF5OyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4ZGM3OiByZXR1cm4gc2V0VmFsdWVWM3VpQXJyYXk7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhkYzg6IHJldHVybiBzZXRWYWx1ZVY0dWlBcnJheTsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVlOiAvLyBTQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkNjY6IC8vIFNBTVBMRVJfRVhURVJOQUxfT0VTXG5cdFx0Y2FzZSAweDhkY2E6IC8vIElOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkZDI6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhiNjI6IC8vIFNBTVBMRVJfMkRfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUMUFycmF5O1xuXG5cdFx0Y2FzZSAweDhiNWY6IC8vIFNBTVBMRVJfM0Rcblx0XHRjYXNlIDB4OGRjYjogLy8gSU5UX1NBTVBMRVJfM0Rcblx0XHRjYXNlIDB4OGRkMzogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfM0Rcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQzREFycmF5O1xuXG5cdFx0Y2FzZSAweDhiNjA6IC8vIFNBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGNjOiAvLyBJTlRfU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkZDQ6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRjNTogLy8gU0FNUExFUl9DVUJFX1NIQURPV1xuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDZBcnJheTtcblxuXHRcdGNhc2UgMHg4ZGMxOiAvLyBTQU1QTEVSXzJEX0FSUkFZXG5cdFx0Y2FzZSAweDhkY2Y6IC8vIElOVF9TQU1QTEVSXzJEX0FSUkFZXG5cdFx0Y2FzZSAweDhkZDc6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZXG5cdFx0Y2FzZSAweDhkYzQ6IC8vIFNBTVBMRVJfMkRfQVJSQVlfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUMkRBcnJheUFycmF5O1xuXG5cdH1cblxufVxuXG4vLyAtLS0gVW5pZm9ybSBDbGFzc2VzIC0tLVxuXG5jbGFzcyBTaW5nbGVVbmlmb3JtIHtcblxuXHRjb25zdHJ1Y3RvciggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSB7XG5cblx0XHR0aGlzLmlkID0gaWQ7XG5cdFx0dGhpcy5hZGRyID0gYWRkcjtcblx0XHR0aGlzLmNhY2hlID0gW107XG5cdFx0dGhpcy50eXBlID0gYWN0aXZlSW5mby50eXBlO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSBnZXRTaW5ndWxhclNldHRlciggYWN0aXZlSW5mby50eXBlICk7XG5cblx0XHQvLyB0aGlzLnBhdGggPSBhY3RpdmVJbmZvLm5hbWU7IC8vIERFQlVHXG5cblx0fVxuXG59XG5cbmNsYXNzIFB1cmVBcnJheVVuaWZvcm0ge1xuXG5cdGNvbnN0cnVjdG9yKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIHtcblxuXHRcdHRoaXMuaWQgPSBpZDtcblx0XHR0aGlzLmFkZHIgPSBhZGRyO1xuXHRcdHRoaXMuY2FjaGUgPSBbXTtcblx0XHR0aGlzLnR5cGUgPSBhY3RpdmVJbmZvLnR5cGU7XG5cdFx0dGhpcy5zaXplID0gYWN0aXZlSW5mby5zaXplO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSBnZXRQdXJlQXJyYXlTZXR0ZXIoIGFjdGl2ZUluZm8udHlwZSApO1xuXG5cdFx0Ly8gdGhpcy5wYXRoID0gYWN0aXZlSW5mby5uYW1lOyAvLyBERUJVR1xuXG5cdH1cblxufVxuXG5jbGFzcyBTdHJ1Y3R1cmVkVW5pZm9ybSB7XG5cblx0Y29uc3RydWN0b3IoIGlkICkge1xuXG5cdFx0dGhpcy5pZCA9IGlkO1xuXG5cdFx0dGhpcy5zZXEgPSBbXTtcblx0XHR0aGlzLm1hcCA9IHt9O1xuXG5cdH1cblxuXHRzZXRWYWx1ZSggZ2wsIHZhbHVlLCB0ZXh0dXJlcyApIHtcblxuXHRcdGNvbnN0IHNlcSA9IHRoaXMuc2VxO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgdSA9IHNlcVsgaSBdO1xuXHRcdFx0dS5zZXRWYWx1ZSggZ2wsIHZhbHVlWyB1LmlkIF0sIHRleHR1cmVzICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIC0tLSBUb3AtbGV2ZWwgLS0tXG5cbi8vIFBhcnNlciAtIGJ1aWxkcyB1cCB0aGUgcHJvcGVydHkgdHJlZSBmcm9tIHRoZSBwYXRoIHN0cmluZ3NcblxuY29uc3QgUmVQYXRoUGFydCA9IC8oXFx3KykoXFxdKT8oXFxbfFxcLik/L2c7XG5cbi8vIGV4dHJhY3RzXG4vLyBcdC0gdGhlIGlkZW50aWZpZXIgKG1lbWJlciBuYW1lIG9yIGFycmF5IGluZGV4KVxuLy8gIC0gZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgcmlnaHQgYnJhY2tldCAoZm91bmQgd2hlbiBhcnJheSBpbmRleClcbi8vICAtIGZvbGxvd2VkIGJ5IGFuIG9wdGlvbmFsIGxlZnQgYnJhY2tldCBvciBkb3QgKHR5cGUgb2Ygc3Vic2NyaXB0KVxuLy9cbi8vIE5vdGU6IFRoZXNlIHBvcnRpb25zIGNhbiBiZSByZWFkIGluIGEgbm9uLW92ZXJsYXBwaW5nIGZhc2hpb24gYW5kXG4vLyBhbGxvdyBzdHJhaWdodGZvcndhcmQgcGFyc2luZyBvZiB0aGUgaGllcmFyY2h5IHRoYXQgV2ViR0wgZW5jb2Rlc1xuLy8gaW4gdGhlIHVuaWZvcm0gbmFtZXMuXG5cbmZ1bmN0aW9uIGFkZFVuaWZvcm0oIGNvbnRhaW5lciwgdW5pZm9ybU9iamVjdCApIHtcblxuXHRjb250YWluZXIuc2VxLnB1c2goIHVuaWZvcm1PYmplY3QgKTtcblx0Y29udGFpbmVyLm1hcFsgdW5pZm9ybU9iamVjdC5pZCBdID0gdW5pZm9ybU9iamVjdDtcblxufVxuXG5mdW5jdGlvbiBwYXJzZVVuaWZvcm0oIGFjdGl2ZUluZm8sIGFkZHIsIGNvbnRhaW5lciApIHtcblxuXHRjb25zdCBwYXRoID0gYWN0aXZlSW5mby5uYW1lLFxuXHRcdHBhdGhMZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuXHQvLyByZXNldCBSZWdFeHAgb2JqZWN0LCBiZWNhdXNlIG9mIHRoZSBlYXJseSBleGl0IG9mIGEgcHJldmlvdXMgcnVuXG5cdFJlUGF0aFBhcnQubGFzdEluZGV4ID0gMDtcblxuXHR3aGlsZSAoIHRydWUgKSB7XG5cblx0XHRjb25zdCBtYXRjaCA9IFJlUGF0aFBhcnQuZXhlYyggcGF0aCApLFxuXHRcdFx0bWF0Y2hFbmQgPSBSZVBhdGhQYXJ0Lmxhc3RJbmRleDtcblxuXHRcdGxldCBpZCA9IG1hdGNoWyAxIF07XG5cdFx0Y29uc3QgaWRJc0luZGV4ID0gbWF0Y2hbIDIgXSA9PT0gJ10nLFxuXHRcdFx0c3Vic2NyaXB0ID0gbWF0Y2hbIDMgXTtcblxuXHRcdGlmICggaWRJc0luZGV4ICkgaWQgPSBpZCB8IDA7IC8vIGNvbnZlcnQgdG8gaW50ZWdlclxuXG5cdFx0aWYgKCBzdWJzY3JpcHQgPT09IHVuZGVmaW5lZCB8fCBzdWJzY3JpcHQgPT09ICdbJyAmJiBtYXRjaEVuZCArIDIgPT09IHBhdGhMZW5ndGggKSB7XG5cblx0XHRcdC8vIGJhcmUgbmFtZSBvciBcInB1cmVcIiBib3R0b20tbGV2ZWwgYXJyYXkgXCJbMF1cIiBzdWZmaXhcblxuXHRcdFx0YWRkVW5pZm9ybSggY29udGFpbmVyLCBzdWJzY3JpcHQgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdG5ldyBTaW5nbGVVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIDpcblx0XHRcdFx0bmV3IFB1cmVBcnJheVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkgKTtcblxuXHRcdFx0YnJlYWs7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBzdGVwIGludG8gaW5uZXIgbm9kZSAvIGNyZWF0ZSBpdCBpbiBjYXNlIGl0IGRvZXNuJ3QgZXhpc3RcblxuXHRcdFx0Y29uc3QgbWFwID0gY29udGFpbmVyLm1hcDtcblx0XHRcdGxldCBuZXh0ID0gbWFwWyBpZCBdO1xuXG5cdFx0XHRpZiAoIG5leHQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRuZXh0ID0gbmV3IFN0cnVjdHVyZWRVbmlmb3JtKCBpZCApO1xuXHRcdFx0XHRhZGRVbmlmb3JtKCBjb250YWluZXIsIG5leHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb250YWluZXIgPSBuZXh0O1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vLyBSb290IENvbnRhaW5lclxuXG5jbGFzcyBXZWJHTFVuaWZvcm1zIHtcblxuXHRjb25zdHJ1Y3RvciggZ2wsIHByb2dyYW0gKSB7XG5cblx0XHR0aGlzLnNlcSA9IFtdO1xuXHRcdHRoaXMubWFwID0ge307XG5cblx0XHRjb25zdCBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgZ2wuQUNUSVZFX1VOSUZPUk1TICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBpbmZvID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybSggcHJvZ3JhbSwgaSApLFxuXHRcdFx0XHRhZGRyID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCBpbmZvLm5hbWUgKTtcblxuXHRcdFx0cGFyc2VVbmlmb3JtKCBpbmZvLCBhZGRyLCB0aGlzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldFZhbHVlKCBnbCwgbmFtZSwgdmFsdWUsIHRleHR1cmVzICkge1xuXG5cdFx0Y29uc3QgdSA9IHRoaXMubWFwWyBuYW1lIF07XG5cblx0XHRpZiAoIHUgIT09IHVuZGVmaW5lZCApIHUuc2V0VmFsdWUoIGdsLCB2YWx1ZSwgdGV4dHVyZXMgKTtcblxuXHR9XG5cblx0c2V0T3B0aW9uYWwoIGdsLCBvYmplY3QsIG5hbWUgKSB7XG5cblx0XHRjb25zdCB2ID0gb2JqZWN0WyBuYW1lIF07XG5cblx0XHRpZiAoIHYgIT09IHVuZGVmaW5lZCApIHRoaXMuc2V0VmFsdWUoIGdsLCBuYW1lLCB2ICk7XG5cblx0fVxuXG5cdHN0YXRpYyB1cGxvYWQoIGdsLCBzZXEsIHZhbHVlcywgdGV4dHVyZXMgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCB1ID0gc2VxWyBpIF0sXG5cdFx0XHRcdHYgPSB2YWx1ZXNbIHUuaWQgXTtcblxuXHRcdFx0aWYgKCB2Lm5lZWRzVXBkYXRlICE9PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBub3RlOiBhbHdheXMgdXBkYXRpbmcgd2hlbiAubmVlZHNVcGRhdGUgaXMgdW5kZWZpbmVkXG5cdFx0XHRcdHUuc2V0VmFsdWUoIGdsLCB2LnZhbHVlLCB0ZXh0dXJlcyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHN0YXRpYyBzZXFXaXRoVmFsdWUoIHNlcSwgdmFsdWVzICkge1xuXG5cdFx0Y29uc3QgciA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgdSA9IHNlcVsgaSBdO1xuXHRcdFx0aWYgKCB1LmlkIGluIHZhbHVlcyApIHIucHVzaCggdSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHI7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFdlYkdMVW5pZm9ybXMgfTtcbiIsImZ1bmN0aW9uIFdlYkdMU2hhZGVyKCBnbCwgdHlwZSwgc3RyaW5nICkge1xuXG5cdGNvbnN0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlciggdHlwZSApO1xuXG5cdGdsLnNoYWRlclNvdXJjZSggc2hhZGVyLCBzdHJpbmcgKTtcblx0Z2wuY29tcGlsZVNoYWRlciggc2hhZGVyICk7XG5cblx0cmV0dXJuIHNoYWRlcjtcblxufVxuXG5leHBvcnQgeyBXZWJHTFNoYWRlciB9O1xuIiwiaW1wb3J0IHsgV2ViR0xVbmlmb3JtcyB9IGZyb20gJy4vV2ViR0xVbmlmb3Jtcy5qcyc7XG5pbXBvcnQgeyBXZWJHTFNoYWRlciB9IGZyb20gJy4vV2ViR0xTaGFkZXIuanMnO1xuaW1wb3J0IHsgU2hhZGVyQ2h1bmsgfSBmcm9tICcuLi9zaGFkZXJzL1NoYWRlckNodW5rLmpzJztcbmltcG9ydCB7IE5vVG9uZU1hcHBpbmcsIEFkZE9wZXJhdGlvbiwgTWl4T3BlcmF0aW9uLCBNdWx0aXBseU9wZXJhdGlvbiwgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLCBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZywgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nLCBQQ0ZTb2Z0U2hhZG93TWFwLCBQQ0ZTaGFkb3dNYXAsIFZTTVNoYWRvd01hcCwgQWdYVG9uZU1hcHBpbmcsIEFDRVNGaWxtaWNUb25lTWFwcGluZywgTmV1dHJhbFRvbmVNYXBwaW5nLCBDaW5lb25Ub25lTWFwcGluZywgQ3VzdG9tVG9uZU1hcHBpbmcsIFJlaW5oYXJkVG9uZU1hcHBpbmcsIExpbmVhclRvbmVNYXBwaW5nLCBHTFNMMywgTGluZWFyU1JHQkNvbG9yU3BhY2UsIFNSR0JDb2xvclNwYWNlLCBMaW5lYXJEaXNwbGF5UDNDb2xvclNwYWNlLCBEaXNwbGF5UDNDb2xvclNwYWNlLCBQM1ByaW1hcmllcywgUmVjNzA5UHJpbWFyaWVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IENvbG9yTWFuYWdlbWVudCB9IGZyb20gJy4uLy4uL21hdGgvQ29sb3JNYW5hZ2VtZW50LmpzJztcblxuLy8gRnJvbSBodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS93ZWJnbC9leHRlbnNpb25zL0tIUl9wYXJhbGxlbF9zaGFkZXJfY29tcGlsZS9cbmNvbnN0IENPTVBMRVRJT05fU1RBVFVTX0tIUiA9IDB4OTFCMTtcblxubGV0IHByb2dyYW1JZENvdW50ID0gMDtcblxuZnVuY3Rpb24gaGFuZGxlU291cmNlKCBzdHJpbmcsIGVycm9yTGluZSApIHtcblxuXHRjb25zdCBsaW5lcyA9IHN0cmluZy5zcGxpdCggJ1xcbicgKTtcblx0Y29uc3QgbGluZXMyID0gW107XG5cblx0Y29uc3QgZnJvbSA9IE1hdGgubWF4KCBlcnJvckxpbmUgLSA2LCAwICk7XG5cdGNvbnN0IHRvID0gTWF0aC5taW4oIGVycm9yTGluZSArIDYsIGxpbmVzLmxlbmd0aCApO1xuXG5cdGZvciAoIGxldCBpID0gZnJvbTsgaSA8IHRvOyBpICsrICkge1xuXG5cdFx0Y29uc3QgbGluZSA9IGkgKyAxO1xuXHRcdGxpbmVzMi5wdXNoKCBgJHtsaW5lID09PSBlcnJvckxpbmUgPyAnPicgOiAnICd9ICR7bGluZX06ICR7bGluZXNbIGkgXX1gICk7XG5cblx0fVxuXG5cdHJldHVybiBsaW5lczIuam9pbiggJ1xcbicgKTtcblxufVxuXG5mdW5jdGlvbiBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGNvbG9yU3BhY2UgKSB7XG5cblx0Y29uc3Qgd29ya2luZ1ByaW1hcmllcyA9IENvbG9yTWFuYWdlbWVudC5nZXRQcmltYXJpZXMoIENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZSApO1xuXHRjb25zdCBlbmNvZGluZ1ByaW1hcmllcyA9IENvbG9yTWFuYWdlbWVudC5nZXRQcmltYXJpZXMoIGNvbG9yU3BhY2UgKTtcblxuXHRsZXQgZ2FtdXRNYXBwaW5nO1xuXG5cdGlmICggd29ya2luZ1ByaW1hcmllcyA9PT0gZW5jb2RpbmdQcmltYXJpZXMgKSB7XG5cblx0XHRnYW11dE1hcHBpbmcgPSAnJztcblxuXHR9IGVsc2UgaWYgKCB3b3JraW5nUHJpbWFyaWVzID09PSBQM1ByaW1hcmllcyAmJiBlbmNvZGluZ1ByaW1hcmllcyA9PT0gUmVjNzA5UHJpbWFyaWVzICkge1xuXG5cdFx0Z2FtdXRNYXBwaW5nID0gJ0xpbmVhckRpc3BsYXlQM1RvTGluZWFyU1JHQic7XG5cblx0fSBlbHNlIGlmICggd29ya2luZ1ByaW1hcmllcyA9PT0gUmVjNzA5UHJpbWFyaWVzICYmIGVuY29kaW5nUHJpbWFyaWVzID09PSBQM1ByaW1hcmllcyApIHtcblxuXHRcdGdhbXV0TWFwcGluZyA9ICdMaW5lYXJTUkdCVG9MaW5lYXJEaXNwbGF5UDMnO1xuXG5cdH1cblxuXHRzd2l0Y2ggKCBjb2xvclNwYWNlICkge1xuXG5cdFx0Y2FzZSBMaW5lYXJTUkdCQ29sb3JTcGFjZTpcblx0XHRjYXNlIExpbmVhckRpc3BsYXlQM0NvbG9yU3BhY2U6XG5cdFx0XHRyZXR1cm4gWyBnYW11dE1hcHBpbmcsICdMaW5lYXJUcmFuc2Zlck9FVEYnIF07XG5cblx0XHRjYXNlIFNSR0JDb2xvclNwYWNlOlxuXHRcdGNhc2UgRGlzcGxheVAzQ29sb3JTcGFjZTpcblx0XHRcdHJldHVybiBbIGdhbXV0TWFwcGluZywgJ3NSR0JUcmFuc2Zlck9FVEYnIF07XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBVbnN1cHBvcnRlZCBjb2xvciBzcGFjZTonLCBjb2xvclNwYWNlICk7XG5cdFx0XHRyZXR1cm4gWyBnYW11dE1hcHBpbmcsICdMaW5lYXJUcmFuc2Zlck9FVEYnIF07XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFNoYWRlckVycm9ycyggZ2wsIHNoYWRlciwgdHlwZSApIHtcblxuXHRjb25zdCBzdGF0dXMgPSBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoIHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMgKTtcblx0Y29uc3QgZXJyb3JzID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggc2hhZGVyICkudHJpbSgpO1xuXG5cdGlmICggc3RhdHVzICYmIGVycm9ycyA9PT0gJycgKSByZXR1cm4gJyc7XG5cblx0Y29uc3QgZXJyb3JNYXRjaGVzID0gL0VSUk9SOiAwOihcXGQrKS8uZXhlYyggZXJyb3JzICk7XG5cdGlmICggZXJyb3JNYXRjaGVzICkge1xuXG5cdFx0Ly8gLS1lbmFibGUtcHJpdmlsZWdlZC13ZWJnbC1leHRlbnNpb25cblx0XHQvLyBjb25zb2xlLmxvZyggJyoqJyArIHR5cGUgKyAnKionLCBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9kZWJ1Z19zaGFkZXJzJyApLmdldFRyYW5zbGF0ZWRTaGFkZXJTb3VyY2UoIHNoYWRlciApICk7XG5cblx0XHRjb25zdCBlcnJvckxpbmUgPSBwYXJzZUludCggZXJyb3JNYXRjaGVzWyAxIF0gKTtcblx0XHRyZXR1cm4gdHlwZS50b1VwcGVyQ2FzZSgpICsgJ1xcblxcbicgKyBlcnJvcnMgKyAnXFxuXFxuJyArIGhhbmRsZVNvdXJjZSggZ2wuZ2V0U2hhZGVyU291cmNlKCBzaGFkZXIgKSwgZXJyb3JMaW5lICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBlcnJvcnM7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFRleGVsRW5jb2RpbmdGdW5jdGlvbiggZnVuY3Rpb25OYW1lLCBjb2xvclNwYWNlICkge1xuXG5cdGNvbnN0IGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGNvbG9yU3BhY2UgKTtcblx0cmV0dXJuIGB2ZWM0ICR7ZnVuY3Rpb25OYW1lfSggdmVjNCB2YWx1ZSApIHsgcmV0dXJuICR7Y29tcG9uZW50c1sgMCBdfSggJHtjb21wb25lbnRzWyAxIF19KCB2YWx1ZSApICk7IH1gO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgdG9uZU1hcHBpbmcgKSB7XG5cblx0bGV0IHRvbmVNYXBwaW5nTmFtZTtcblxuXHRzd2l0Y2ggKCB0b25lTWFwcGluZyApIHtcblxuXHRcdGNhc2UgTGluZWFyVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnTGluZWFyJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBSZWluaGFyZFRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ1JlaW5oYXJkJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDaW5lb25Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdPcHRpbWl6ZWRDaW5lb24nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIEFDRVNGaWxtaWNUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdBQ0VTRmlsbWljJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBBZ1hUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdBZ1gnO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIE5ldXRyYWxUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdOZXV0cmFsJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDdXN0b21Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdDdXN0b20nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBVbnN1cHBvcnRlZCB0b25lTWFwcGluZzonLCB0b25lTWFwcGluZyApO1xuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ0xpbmVhcic7XG5cblx0fVxuXG5cdHJldHVybiAndmVjMyAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjMyBjb2xvciApIHsgcmV0dXJuICcgKyB0b25lTWFwcGluZ05hbWUgKyAnVG9uZU1hcHBpbmcoIGNvbG9yICk7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVmVydGV4RXh0ZW5zaW9ucyggcGFyYW1ldGVycyApIHtcblxuXHRjb25zdCBjaHVua3MgPSBbXG5cdFx0cGFyYW1ldGVycy5leHRlbnNpb25DbGlwQ3VsbERpc3RhbmNlID8gJyNleHRlbnNpb24gR0xfQU5HTEVfY2xpcF9jdWxsX2Rpc3RhbmNlIDogcmVxdWlyZScgOiAnJyxcblx0XHRwYXJhbWV0ZXJzLmV4dGVuc2lvbk11bHRpRHJhdyA/ICcjZXh0ZW5zaW9uIEdMX0FOR0xFX211bHRpX2RyYXcgOiByZXF1aXJlJyA6ICcnLFxuXHRdO1xuXG5cdHJldHVybiBjaHVua3MuZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApIHtcblxuXHRjb25zdCBjaHVua3MgPSBbXTtcblxuXHRmb3IgKCBjb25zdCBuYW1lIGluIGRlZmluZXMgKSB7XG5cblx0XHRjb25zdCB2YWx1ZSA9IGRlZmluZXNbIG5hbWUgXTtcblxuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkgY29udGludWU7XG5cblx0XHRjaHVua3MucHVzaCggJyNkZWZpbmUgJyArIG5hbWUgKyAnICcgKyB2YWx1ZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gY2h1bmtzLmpvaW4oICdcXG4nICk7XG5cbn1cblxuZnVuY3Rpb24gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoIGdsLCBwcm9ncmFtICkge1xuXG5cdGNvbnN0IGF0dHJpYnV0ZXMgPSB7fTtcblxuXHRjb25zdCBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMgKTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBuOyBpICsrICkge1xuXG5cdFx0Y29uc3QgaW5mbyA9IGdsLmdldEFjdGl2ZUF0dHJpYiggcHJvZ3JhbSwgaSApO1xuXHRcdGNvbnN0IG5hbWUgPSBpbmZvLm5hbWU7XG5cblx0XHRsZXQgbG9jYXRpb25TaXplID0gMTtcblx0XHRpZiAoIGluZm8udHlwZSA9PT0gZ2wuRkxPQVRfTUFUMiApIGxvY2F0aW9uU2l6ZSA9IDI7XG5cdFx0aWYgKCBpbmZvLnR5cGUgPT09IGdsLkZMT0FUX01BVDMgKSBsb2NhdGlvblNpemUgPSAzO1xuXHRcdGlmICggaW5mby50eXBlID09PSBnbC5GTE9BVF9NQVQ0ICkgbG9jYXRpb25TaXplID0gNDtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBBQ1RJVkUgVkVSVEVYIEFUVFJJQlVURTonLCBuYW1lLCBpICk7XG5cblx0XHRhdHRyaWJ1dGVzWyBuYW1lIF0gPSB7XG5cdFx0XHR0eXBlOiBpbmZvLnR5cGUsXG5cdFx0XHRsb2NhdGlvbjogZ2wuZ2V0QXR0cmliTG9jYXRpb24oIHByb2dyYW0sIG5hbWUgKSxcblx0XHRcdGxvY2F0aW9uU2l6ZTogbG9jYXRpb25TaXplXG5cdFx0fTtcblxuXHR9XG5cblx0cmV0dXJuIGF0dHJpYnV0ZXM7XG5cbn1cblxuZnVuY3Rpb24gZmlsdGVyRW1wdHlMaW5lKCBzdHJpbmcgKSB7XG5cblx0cmV0dXJuIHN0cmluZyAhPT0gJyc7XG5cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUxpZ2h0TnVtcyggc3RyaW5nLCBwYXJhbWV0ZXJzICkge1xuXG5cdGNvbnN0IG51bVNwb3RMaWdodENvb3JkcyA9IHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93cyArIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0TWFwcyAtIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzO1xuXG5cdHJldHVybiBzdHJpbmdcblx0XHQucmVwbGFjZSggL05VTV9ESVJfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9TUE9UX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRfTUFQUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodE1hcHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRfQ09PUkRTL2csIG51bVNwb3RMaWdodENvb3JkcyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fUkVDVF9BUkVBX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVJlY3RBcmVhTGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9QT0lOVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fSEVNSV9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1IZW1pTGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9ESVJfTElHSFRfU0hBRE9XUy9nLCBwYXJhbWV0ZXJzLm51bURpckxpZ2h0U2hhZG93cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fU1BPVF9MSUdIVF9TSEFET1dTX1dJVEhfTUFQUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fU1BPVF9MSUdIVF9TSEFET1dTL2csIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fUE9JTlRfTElHSFRfU0hBRE9XUy9nLCBwYXJhbWV0ZXJzLm51bVBvaW50TGlnaHRTaGFkb3dzICk7XG5cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCBzdHJpbmcsIHBhcmFtZXRlcnMgKSB7XG5cblx0cmV0dXJuIHN0cmluZ1xuXHRcdC5yZXBsYWNlKCAvTlVNX0NMSVBQSU5HX1BMQU5FUy9nLCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzIClcblx0XHQucmVwbGFjZSggL1VOSU9OX0NMSVBQSU5HX1BMQU5FUy9nLCAoIHBhcmFtZXRlcnMubnVtQ2xpcHBpbmdQbGFuZXMgLSBwYXJhbWV0ZXJzLm51bUNsaXBJbnRlcnNlY3Rpb24gKSApO1xuXG59XG5cbi8vIFJlc29sdmUgSW5jbHVkZXNcblxuY29uc3QgaW5jbHVkZVBhdHRlcm4gPSAvXlsgXFx0XSojaW5jbHVkZSArPChbXFx3XFxkLi9dKyk+L2dtO1xuXG5mdW5jdGlvbiByZXNvbHZlSW5jbHVkZXMoIHN0cmluZyApIHtcblxuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIGluY2x1ZGVQYXR0ZXJuLCBpbmNsdWRlUmVwbGFjZXIgKTtcblxufVxuXG5jb25zdCBzaGFkZXJDaHVua01hcCA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gaW5jbHVkZVJlcGxhY2VyKCBtYXRjaCwgaW5jbHVkZSApIHtcblxuXHRsZXQgc3RyaW5nID0gU2hhZGVyQ2h1bmtbIGluY2x1ZGUgXTtcblxuXHRpZiAoIHN0cmluZyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0Y29uc3QgbmV3SW5jbHVkZSA9IHNoYWRlckNodW5rTWFwLmdldCggaW5jbHVkZSApO1xuXG5cdFx0aWYgKCBuZXdJbmNsdWRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN0cmluZyA9IFNoYWRlckNodW5rWyBuZXdJbmNsdWRlIF07XG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBTaGFkZXIgY2h1bmsgXCIlc1wiIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBcIiVzXCIgaW5zdGVhZC4nLCBpbmNsdWRlLCBuZXdJbmNsdWRlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdDYW4gbm90IHJlc29sdmUgI2luY2x1ZGUgPCcgKyBpbmNsdWRlICsgJz4nICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiByZXNvbHZlSW5jbHVkZXMoIHN0cmluZyApO1xuXG59XG5cbi8vIFVucm9sbCBMb29wc1xuXG5jb25zdCB1bnJvbGxMb29wUGF0dGVybiA9IC8jcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxzK2ZvclxccypcXChcXHMqaW50XFxzK2lcXHMqPVxccyooXFxkKylcXHMqO1xccyppXFxzKjxcXHMqKFxcZCspXFxzKjtcXHMqaVxccypcXCtcXCtcXHMqXFwpXFxzKnsoW1xcc1xcU10rPyl9XFxzKyNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kL2c7XG5cbmZ1bmN0aW9uIHVucm9sbExvb3BzKCBzdHJpbmcgKSB7XG5cblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCB1bnJvbGxMb29wUGF0dGVybiwgbG9vcFJlcGxhY2VyICk7XG5cbn1cblxuZnVuY3Rpb24gbG9vcFJlcGxhY2VyKCBtYXRjaCwgc3RhcnQsIGVuZCwgc25pcHBldCApIHtcblxuXHRsZXQgc3RyaW5nID0gJyc7XG5cblx0Zm9yICggbGV0IGkgPSBwYXJzZUludCggc3RhcnQgKTsgaSA8IHBhcnNlSW50KCBlbmQgKTsgaSArKyApIHtcblxuXHRcdHN0cmluZyArPSBzbmlwcGV0XG5cdFx0XHQucmVwbGFjZSggL1xcW1xccyppXFxzKlxcXS9nLCAnWyAnICsgaSArICcgXScgKVxuXHRcdFx0LnJlcGxhY2UoIC9VTlJPTExFRF9MT09QX0lOREVYL2csIGkgKTtcblxuXHR9XG5cblx0cmV0dXJuIHN0cmluZztcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVByZWNpc2lvbiggcGFyYW1ldGVycyApIHtcblxuXHRsZXQgcHJlY2lzaW9uc3RyaW5nID0gYHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBmbG9hdDtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IGludDtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHNhbXBsZXIyRDtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHNhbXBsZXJDdWJlO1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gc2FtcGxlcjNEO1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gc2FtcGxlcjJEQXJyYXk7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBzYW1wbGVyMkRTaGFkb3c7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBzYW1wbGVyQ3ViZVNoYWRvdztcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHNhbXBsZXIyREFycmF5U2hhZG93O1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gaXNhbXBsZXIyRDtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IGlzYW1wbGVyM0Q7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBpc2FtcGxlckN1YmU7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBpc2FtcGxlcjJEQXJyYXk7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSB1c2FtcGxlcjJEO1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gdXNhbXBsZXIzRDtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHVzYW1wbGVyQ3ViZTtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHVzYW1wbGVyMkRBcnJheTtcblx0YDtcblxuXHRpZiAoIHBhcmFtZXRlcnMucHJlY2lzaW9uID09PSAnaGlnaHAnICkge1xuXG5cdFx0cHJlY2lzaW9uc3RyaW5nICs9ICdcXG4jZGVmaW5lIEhJR0hfUFJFQ0lTSU9OJztcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiA9PT0gJ21lZGl1bXAnICkge1xuXG5cdFx0cHJlY2lzaW9uc3RyaW5nICs9ICdcXG4jZGVmaW5lIE1FRElVTV9QUkVDSVNJT04nO1xuXG5cdH0gZWxzZSBpZiAoIHBhcmFtZXRlcnMucHJlY2lzaW9uID09PSAnbG93cCcgKSB7XG5cblx0XHRwcmVjaXNpb25zdHJpbmcgKz0gJ1xcbiNkZWZpbmUgTE9XX1BSRUNJU0lPTic7XG5cblx0fVxuXG5cdHJldHVybiBwcmVjaXNpb25zdHJpbmc7XG5cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVTaGFkb3dNYXBUeXBlRGVmaW5lKCBwYXJhbWV0ZXJzICkge1xuXG5cdGxldCBzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX0JBU0lDJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSA9PT0gUENGU2hhZG93TWFwICkge1xuXG5cdFx0c2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9QQ0YnO1xuXG5cdH0gZWxzZSBpZiAoIHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSA9PT0gUENGU29mdFNoYWRvd01hcCApIHtcblxuXHRcdHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQnO1xuXG5cdH0gZWxzZSBpZiAoIHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSA9PT0gVlNNU2hhZG93TWFwICkge1xuXG5cdFx0c2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9WU00nO1xuXG5cdH1cblxuXHRyZXR1cm4gc2hhZG93TWFwVHlwZURlZmluZTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVudk1hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKSB7XG5cblx0bGV0IGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRSc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApIHtcblxuXHRcdHN3aXRjaCAoIHBhcmFtZXRlcnMuZW52TWFwTW9kZSApIHtcblxuXHRcdFx0Y2FzZSBDdWJlUmVmbGVjdGlvbk1hcHBpbmc6XG5cdFx0XHRjYXNlIEN1YmVSZWZyYWN0aW9uTWFwcGluZzpcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRV9VVic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZW52TWFwVHlwZURlZmluZTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVudk1hcE1vZGVEZWZpbmUoIHBhcmFtZXRlcnMgKSB7XG5cblx0bGV0IGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGTEVDVElPTic7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApIHtcblxuXHRcdHN3aXRjaCAoIHBhcmFtZXRlcnMuZW52TWFwTW9kZSApIHtcblxuXHRcdFx0Y2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6XG5cblx0XHRcdFx0ZW52TWFwTW9kZURlZmluZSA9ICdFTlZNQVBfTU9ERV9SRUZSQUNUSU9OJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBlbnZNYXBNb2RlRGVmaW5lO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwQmxlbmRpbmdEZWZpbmUoIHBhcmFtZXRlcnMgKSB7XG5cblx0bGV0IGVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19OT05FJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkge1xuXG5cdFx0c3dpdGNoICggcGFyYW1ldGVycy5jb21iaW5lICkge1xuXG5cdFx0XHRjYXNlIE11bHRpcGx5T3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFknO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBNaXhPcGVyYXRpb246XG5cdFx0XHRcdGVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19NSVgnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBBZGRPcGVyYXRpb246XG5cdFx0XHRcdGVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19BREQnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGVudk1hcEJsZW5kaW5nRGVmaW5lO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ3ViZVVWU2l6ZSggcGFyYW1ldGVycyApIHtcblxuXHRjb25zdCBpbWFnZUhlaWdodCA9IHBhcmFtZXRlcnMuZW52TWFwQ3ViZVVWSGVpZ2h0O1xuXG5cdGlmICggaW1hZ2VIZWlnaHQgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcblxuXHRjb25zdCBtYXhNaXAgPSBNYXRoLmxvZzIoIGltYWdlSGVpZ2h0ICkgLSAyO1xuXG5cdGNvbnN0IHRleGVsSGVpZ2h0ID0gMS4wIC8gaW1hZ2VIZWlnaHQ7XG5cblx0Y29uc3QgdGV4ZWxXaWR0aCA9IDEuMCAvICggMyAqIE1hdGgubWF4KCBNYXRoLnBvdyggMiwgbWF4TWlwICksIDcgKiAxNiApICk7XG5cblx0cmV0dXJuIHsgdGV4ZWxXaWR0aCwgdGV4ZWxIZWlnaHQsIG1heE1pcCB9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUHJvZ3JhbSggcmVuZGVyZXIsIGNhY2hlS2V5LCBwYXJhbWV0ZXJzLCBiaW5kaW5nU3RhdGVzICkge1xuXG5cdC8vIFRPRE8gU2VuZCB0aGlzIGV2ZW50IHRvIFRocmVlLmpzIERldlRvb2xzXG5cdC8vIGNvbnNvbGUubG9nKCAnV2ViR0xQcm9ncmFtJywgY2FjaGVLZXkgKTtcblxuXHRjb25zdCBnbCA9IHJlbmRlcmVyLmdldENvbnRleHQoKTtcblxuXHRjb25zdCBkZWZpbmVzID0gcGFyYW1ldGVycy5kZWZpbmVzO1xuXG5cdGxldCB2ZXJ0ZXhTaGFkZXIgPSBwYXJhbWV0ZXJzLnZlcnRleFNoYWRlcjtcblx0bGV0IGZyYWdtZW50U2hhZGVyID0gcGFyYW1ldGVycy5mcmFnbWVudFNoYWRlcjtcblxuXHRjb25zdCBzaGFkb3dNYXBUeXBlRGVmaW5lID0gZ2VuZXJhdGVTaGFkb3dNYXBUeXBlRGVmaW5lKCBwYXJhbWV0ZXJzICk7XG5cdGNvbnN0IGVudk1hcFR5cGVEZWZpbmUgPSBnZW5lcmF0ZUVudk1hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKTtcblx0Y29uc3QgZW52TWFwTW9kZURlZmluZSA9IGdlbmVyYXRlRW52TWFwTW9kZURlZmluZSggcGFyYW1ldGVycyApO1xuXHRjb25zdCBlbnZNYXBCbGVuZGluZ0RlZmluZSA9IGdlbmVyYXRlRW52TWFwQmxlbmRpbmdEZWZpbmUoIHBhcmFtZXRlcnMgKTtcblx0Y29uc3QgZW52TWFwQ3ViZVVWU2l6ZSA9IGdlbmVyYXRlQ3ViZVVWU2l6ZSggcGFyYW1ldGVycyApO1xuXG5cdGNvbnN0IGN1c3RvbVZlcnRleEV4dGVuc2lvbnMgPSBnZW5lcmF0ZVZlcnRleEV4dGVuc2lvbnMoIHBhcmFtZXRlcnMgKTtcblxuXHRjb25zdCBjdXN0b21EZWZpbmVzID0gZ2VuZXJhdGVEZWZpbmVzKCBkZWZpbmVzICk7XG5cblx0Y29uc3QgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcblxuXHRsZXQgcHJlZml4VmVydGV4LCBwcmVmaXhGcmFnbWVudDtcblx0bGV0IHZlcnNpb25TdHJpbmcgPSBwYXJhbWV0ZXJzLmdsc2xWZXJzaW9uID8gJyN2ZXJzaW9uICcgKyBwYXJhbWV0ZXJzLmdsc2xWZXJzaW9uICsgJ1xcbicgOiAnJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuaXNSYXdTaGFkZXJNYXRlcmlhbCApIHtcblxuXHRcdHByZWZpeFZlcnRleCA9IFtcblxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX1RZUEUgJyArIHBhcmFtZXRlcnMuc2hhZGVyVHlwZSxcblx0XHRcdCcjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBwYXJhbWV0ZXJzLnNoYWRlck5hbWUsXG5cblx0XHRcdGN1c3RvbURlZmluZXNcblxuXHRcdF0uZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG5cdFx0aWYgKCBwcmVmaXhWZXJ0ZXgubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0cHJlZml4VmVydGV4ICs9ICdcXG4nO1xuXG5cdFx0fVxuXG5cdFx0cHJlZml4RnJhZ21lbnQgPSBbXG5cblx0XHRcdCcjZGVmaW5lIFNIQURFUl9UWVBFICcgKyBwYXJhbWV0ZXJzLnNoYWRlclR5cGUsXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfTkFNRSAnICsgcGFyYW1ldGVycy5zaGFkZXJOYW1lLFxuXG5cdFx0XHRjdXN0b21EZWZpbmVzXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdGlmICggcHJlZml4RnJhZ21lbnQubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0cHJlZml4RnJhZ21lbnQgKz0gJ1xcbic7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdHByZWZpeFZlcnRleCA9IFtcblxuXHRcdFx0Z2VuZXJhdGVQcmVjaXNpb24oIHBhcmFtZXRlcnMgKSxcblxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX1RZUEUgJyArIHBhcmFtZXRlcnMuc2hhZGVyVHlwZSxcblx0XHRcdCcjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBwYXJhbWV0ZXJzLnNoYWRlck5hbWUsXG5cblx0XHRcdGN1c3RvbURlZmluZXMsXG5cblx0XHRcdHBhcmFtZXRlcnMuZXh0ZW5zaW9uQ2xpcEN1bGxEaXN0YW5jZSA/ICcjZGVmaW5lIFVTRV9DTElQX0RJU1RBTkNFJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5iYXRjaGluZyA/ICcjZGVmaW5lIFVTRV9CQVRDSElORycgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYmF0Y2hpbmdDb2xvciA/ICcjZGVmaW5lIFVTRV9CQVRDSElOR19DT0xPUicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuaW5zdGFuY2luZyA/ICcjZGVmaW5lIFVTRV9JTlNUQU5DSU5HJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5pbnN0YW5jaW5nQ29sb3IgPyAnI2RlZmluZSBVU0VfSU5TVEFOQ0lOR19DT0xPUicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuaW5zdGFuY2luZ01vcnBoID8gJyNkZWZpbmUgVVNFX0lOU1RBTkNJTkdfTU9SUEgnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nRXhwMiA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcCA/ICcjZGVmaW5lIFVTRV9BT01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYnVtcE1hcCA/ICcjZGVmaW5lIFVTRV9CVU1QTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXBPYmplY3RTcGFjZSA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVBfT0JKRUNUU1BBQ0UnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcFRhbmdlbnRTcGFjZSA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVBfVEFOR0VOVFNQQUNFJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXAgPyAnI2RlZmluZSBVU0VfRElTUExBQ0VNRU5UTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbWlzc2l2ZU1hcCA/ICcjZGVmaW5lIFVTRV9FTUlTU0lWRU1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5hbmlzb3Ryb3B5ID8gJyNkZWZpbmUgVVNFX0FOSVNPVFJPUFknIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFuaXNvdHJvcHlNYXAgPyAnI2RlZmluZSBVU0VfQU5JU09UUk9QWU1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuaXJpZGVzY2VuY2VNYXAgPyAnI2RlZmluZSBVU0VfSVJJREVTQ0VOQ0VNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwID8gJyNkZWZpbmUgVVNFX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhck1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJDb2xvck1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUl9DT0xPUk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJfSU5URU5TSVRZTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYUhhc2ggPyAnI2RlZmluZSBVU0VfQUxQSEFIQVNIJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbiA/ICcjZGVmaW5lIFVTRV9UUkFOU01JU1NJT04nIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbk1hcCA/ICcjZGVmaW5lIFVTRV9UUkFOU01JU1NJT05NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnRoaWNrbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9USElDS05FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2hlZW5Db2xvck1hcCA/ICcjZGVmaW5lIFVTRV9TSEVFTl9DT0xPUk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hlZW5Sb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfU0hFRU5fUk9VR0hORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHQvL1xuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcFV2ID8gJyNkZWZpbmUgTUFQX1VWICcgKyBwYXJhbWV0ZXJzLm1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwVXYgPyAnI2RlZmluZSBBTFBIQU1BUF9VViAnICsgcGFyYW1ldGVycy5hbHBoYU1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwVXYgPyAnI2RlZmluZSBMSUdIVE1BUF9VViAnICsgcGFyYW1ldGVycy5saWdodE1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFvTWFwVXYgPyAnI2RlZmluZSBBT01BUF9VViAnICsgcGFyYW1ldGVycy5hb01hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwVXYgPyAnI2RlZmluZSBFTUlTU0lWRU1BUF9VViAnICsgcGFyYW1ldGVycy5lbWlzc2l2ZU1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXBVdiA/ICcjZGVmaW5lIEJVTVBNQVBfVVYgJyArIHBhcmFtZXRlcnMuYnVtcE1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcFV2ID8gJyNkZWZpbmUgTk9STUFMTUFQX1VWICcgKyBwYXJhbWV0ZXJzLm5vcm1hbE1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmRpc3BsYWNlbWVudE1hcFV2ID8gJyNkZWZpbmUgRElTUExBQ0VNRU5UTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmRpc3BsYWNlbWVudE1hcFV2IDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubWV0YWxuZXNzTWFwVXYgPyAnI2RlZmluZSBNRVRBTE5FU1NNQVBfVVYgJyArIHBhcmFtZXRlcnMubWV0YWxuZXNzTWFwVXYgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMucm91Z2huZXNzTWFwVXYgPyAnI2RlZmluZSBST1VHSE5FU1NNQVBfVVYgJyArIHBhcmFtZXRlcnMucm91Z2huZXNzTWFwVXYgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5hbmlzb3Ryb3B5TWFwVXYgPyAnI2RlZmluZSBBTklTT1RST1BZTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmFuaXNvdHJvcHlNYXBVdiA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdE1hcFV2ID8gJyNkZWZpbmUgQ0xFQVJDT0FUTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmNsZWFyY29hdE1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdE5vcm1hbE1hcFV2ID8gJyNkZWZpbmUgQ0xFQVJDT0FUX05PUk1BTE1BUF9VViAnICsgcGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRSb3VnaG5lc3NNYXBVdiA/ICcjZGVmaW5lIENMRUFSQ09BVF9ST1VHSE5FU1NNQVBfVVYgJyArIHBhcmFtZXRlcnMuY2xlYXJjb2F0Um91Z2huZXNzTWFwVXYgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5pcmlkZXNjZW5jZU1hcFV2ID8gJyNkZWZpbmUgSVJJREVTQ0VOQ0VNQVBfVVYgJyArIHBhcmFtZXRlcnMuaXJpZGVzY2VuY2VNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2ID8gJyNkZWZpbmUgSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXYgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwVXYgPyAnI2RlZmluZSBTSEVFTl9DT0xPUk1BUF9VViAnICsgcGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwVXYgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hlZW5Sb3VnaG5lc3NNYXBVdiA/ICcjZGVmaW5lIFNIRUVOX1JPVUdITkVTU01BUF9VViAnICsgcGFyYW1ldGVycy5zaGVlblJvdWdobmVzc01hcFV2IDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXBVdiA/ICcjZGVmaW5lIFNQRUNVTEFSTUFQX1VWICcgKyBwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwVXYgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJDb2xvck1hcFV2ID8gJyNkZWZpbmUgU1BFQ1VMQVJfQ09MT1JNQVBfVVYgJyArIHBhcmFtZXRlcnMuc3BlY3VsYXJDb2xvck1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFySW50ZW5zaXR5TWFwVXYgPyAnI2RlZmluZSBTUEVDVUxBUl9JTlRFTlNJVFlNQVBfVVYgJyArIHBhcmFtZXRlcnMuc3BlY3VsYXJJbnRlbnNpdHlNYXBVdiA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbk1hcFV2ID8gJyNkZWZpbmUgVFJBTlNNSVNTSU9OTUFQX1VWICcgKyBwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbk1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnRoaWNrbmVzc01hcFV2ID8gJyNkZWZpbmUgVEhJQ0tORVNTTUFQX1VWICcgKyBwYXJhbWV0ZXJzLnRoaWNrbmVzc01hcFV2IDogJycsXG5cblx0XHRcdC8vXG5cblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgJiYgcGFyYW1ldGVycy5mbGF0U2hhZGluZyA9PT0gZmFsc2UgPyAnI2RlZmluZSBVU0VfVEFOR0VOVCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4Q29sb3JzID8gJyNkZWZpbmUgVVNFX0NPTE9SJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhBbHBoYXMgPyAnI2RlZmluZSBVU0VfQ09MT1JfQUxQSEEnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2MXMgPyAnI2RlZmluZSBVU0VfVVYxJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdjJzID8gJyNkZWZpbmUgVVNFX1VWMicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VXYzcyA/ICcjZGVmaW5lIFVTRV9VVjMnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucG9pbnRzVXZzID8gJyNkZWZpbmUgVVNFX1BPSU5UU19VVicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5mbGF0U2hhZGluZyA/ICcjZGVmaW5lIEZMQVRfU0hBREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNraW5uaW5nID8gJyNkZWZpbmUgVVNFX1NLSU5OSU5HJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyA/ICcjZGVmaW5lIFVTRV9NT1JQSFRBUkdFVFMnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1vcnBoTm9ybWFscyAmJiBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nID09PSBmYWxzZSA/ICcjZGVmaW5lIFVTRV9NT1JQSE5PUk1BTFMnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubW9ycGhDb2xvcnMgKSA/ICcjZGVmaW5lIFVTRV9NT1JQSENPTE9SUycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5tb3JwaFRhcmdldHNDb3VudCA+IDAgKSA/ICcjZGVmaW5lIE1PUlBIVEFSR0VUU19URVhUVVJFX1NUUklERSAnICsgcGFyYW1ldGVycy5tb3JwaFRleHR1cmVTdHJpZGUgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5tb3JwaFRhcmdldHNDb3VudCA+IDAgKSA/ICcjZGVmaW5lIE1PUlBIVEFSR0VUU19DT1VOVCAnICsgcGFyYW1ldGVycy5tb3JwaFRhcmdldHNDb3VudCA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kb3VibGVTaWRlZCA/ICcjZGVmaW5lIERPVUJMRV9TSURFRCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZmxpcFNpZGVkID8gJyNkZWZpbmUgRkxJUF9TSURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2l6ZUF0dGVudWF0aW9uID8gJyNkZWZpbmUgVVNFX1NJWkVBVFRFTlVBVElPTicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5udW1MaWdodFByb2JlcyA+IDAgPyAnI2RlZmluZSBVU0VfTElHSFRfUFJPQkVTJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUYnIDogJycsXG5cblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgdmlld01hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247Jyxcblx0XHRcdCd1bmlmb3JtIGJvb2wgaXNPcnRob2dyYXBoaWM7JyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfSU5TVEFOQ0lORycsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSBtYXQ0IGluc3RhbmNlTWF0cml4OycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnI2lmZGVmIFVTRV9JTlNUQU5DSU5HX0NPTE9SJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgaW5zdGFuY2VDb2xvcjsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfSU5TVEFOQ0lOR19NT1JQSCcsXG5cblx0XHRcdCdcdHVuaWZvcm0gc2FtcGxlcjJEIG1vcnBoVGV4dHVyZTsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzMgbm9ybWFsOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzIgdXY7JyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfVVYxJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzIgdXYxOycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnI2lmZGVmIFVTRV9VVjInLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMiB1djI7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWZkZWYgVVNFX1VWMycsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMyIHV2MzsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfVEFOR0VOVCcsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHRhbmdlbnQ7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWYgZGVmaW5lZCggVVNFX0NPTE9SX0FMUEhBICknLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBjb2xvcjsnLFxuXG5cdFx0XHQnI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SICknLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfU0tJTk5JTkcnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBza2luSW5kZXg7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHNraW5XZWlnaHQ7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCdcXG4nXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRnZW5lcmF0ZVByZWNpc2lvbiggcGFyYW1ldGVycyApLFxuXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfVFlQRSAnICsgcGFyYW1ldGVycy5zaGFkZXJUeXBlLFxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHBhcmFtZXRlcnMuc2hhZGVyTmFtZSxcblxuXHRcdFx0Y3VzdG9tRGVmaW5lcyxcblxuXHRcdFx0cGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2cgPyAnI2RlZmluZSBVU0VfRk9HJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAyID8gJyNkZWZpbmUgRk9HX0VYUDInIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFUb0NvdmVyYWdlID8gJyNkZWZpbmUgQUxQSEFfVE9fQ09WRVJBR0UnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1hdGNhcCA/ICcjZGVmaW5lIFVTRV9NQVRDQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBUeXBlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBCbGVuZGluZ0RlZmluZSA6ICcnLFxuXHRcdFx0ZW52TWFwQ3ViZVVWU2l6ZSA/ICcjZGVmaW5lIENVQkVVVl9URVhFTF9XSURUSCAnICsgZW52TWFwQ3ViZVVWU2l6ZS50ZXhlbFdpZHRoIDogJycsXG5cdFx0XHRlbnZNYXBDdWJlVVZTaXplID8gJyNkZWZpbmUgQ1VCRVVWX1RFWEVMX0hFSUdIVCAnICsgZW52TWFwQ3ViZVVWU2l6ZS50ZXhlbEhlaWdodCA6ICcnLFxuXHRcdFx0ZW52TWFwQ3ViZVVWU2l6ZSA/ICcjZGVmaW5lIENVQkVVVl9NQVhfTUlQICcgKyBlbnZNYXBDdWJlVVZTaXplLm1heE1pcCArICcuMCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubGlnaHRNYXAgPyAnI2RlZmluZSBVU0VfTElHSFRNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFvTWFwID8gJyNkZWZpbmUgVVNFX0FPTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5idW1wTWFwID8gJyNkZWZpbmUgVVNFX0JVTVBNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcE9iamVjdFNwYWNlID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUF9PQkpFQ1RTUEFDRScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwVGFuZ2VudFNwYWNlID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID8gJyNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmFuaXNvdHJvcHkgPyAnI2RlZmluZSBVU0VfQU5JU09UUk9QWScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYW5pc290cm9weU1hcCA/ICcjZGVmaW5lIFVTRV9BTklTT1RST1BZTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdE1hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdFJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kaXNwZXJzaW9uID8gJyNkZWZpbmUgVVNFX0RJU1BFUlNJT04nIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuaXJpZGVzY2VuY2UgPyAnI2RlZmluZSBVU0VfSVJJREVTQ0VOQ0UnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlTWFwID8gJyNkZWZpbmUgVVNFX0lSSURFU0NFTkNFTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9JUklERVNDRU5DRV9USElDS05FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJfQ09MT1JNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFySW50ZW5zaXR5TWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5yb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfUk9VR0hORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tZXRhbG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfTUVUQUxORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYVRlc3QgPyAnI2RlZmluZSBVU0VfQUxQSEFURVNUJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYUhhc2ggPyAnI2RlZmluZSBVU0VfQUxQSEFIQVNIJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuID8gJyNkZWZpbmUgVVNFX1NIRUVOJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwID8gJyNkZWZpbmUgVVNFX1NIRUVOX0NPTE9STUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGVlblJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9TSEVFTl9ST1VHSE5FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uID8gJyNkZWZpbmUgVVNFX1RSQU5TTUlTU0lPTicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uTWFwID8gJyNkZWZpbmUgVVNFX1RSQU5TTUlTU0lPTk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudGhpY2tuZXNzTWFwID8gJyNkZWZpbmUgVVNFX1RISUNLTkVTU01BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhUYW5nZW50cyAmJiBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nID09PSBmYWxzZSA/ICcjZGVmaW5lIFVTRV9UQU5HRU5UJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgfHwgcGFyYW1ldGVycy5pbnN0YW5jaW5nQ29sb3IgfHwgcGFyYW1ldGVycy5iYXRjaGluZ0NvbG9yID8gJyNkZWZpbmUgVVNFX0NPTE9SJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhBbHBoYXMgPyAnI2RlZmluZSBVU0VfQ09MT1JfQUxQSEEnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2MXMgPyAnI2RlZmluZSBVU0VfVVYxJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdjJzID8gJyNkZWZpbmUgVVNFX1VWMicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VXYzcyA/ICcjZGVmaW5lIFVTRV9VVjMnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucG9pbnRzVXZzID8gJyNkZWZpbmUgVVNFX1BPSU5UU19VVicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5ncmFkaWVudE1hcCA/ICcjZGVmaW5lIFVTRV9HUkFESUVOVE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5mbGF0U2hhZGluZyA/ICcjZGVmaW5lIEZMQVRfU0hBREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmRvdWJsZVNpZGVkID8gJyNkZWZpbmUgRE9VQkxFX1NJREVEJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5mbGlwU2lkZWQgPyAnI2RlZmluZSBGTElQX1NJREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSBVU0VfU0hBRE9XTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgJyArIHNoYWRvd01hcFR5cGVEZWZpbmUgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5wcmVtdWx0aXBsaWVkQWxwaGEgPyAnI2RlZmluZSBQUkVNVUxUSVBMSUVEX0FMUEhBJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm51bUxpZ2h0UHJvYmVzID4gMCA/ICcjZGVmaW5lIFVTRV9MSUdIVF9QUk9CRVMnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZGVjb2RlVmlkZW9UZXh0dXJlID8gJyNkZWZpbmUgREVDT0RFX1ZJREVPX1RFWFRVUkUnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRicgOiAnJyxcblxuXHRcdFx0J3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uOycsXG5cdFx0XHQndW5pZm9ybSBib29sIGlzT3J0aG9ncmFwaGljOycsXG5cblx0XHRcdCggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gJyNkZWZpbmUgVE9ORV9NQVBQSU5HJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyBTaGFkZXJDaHVua1sgJ3RvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQnIF0gOiAnJywgLy8gdGhpcyBjb2RlIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBpdCBpcyB1c2VkIGJ5IHRoZSB0b25lTWFwcGluZygpIGZ1bmN0aW9uIGRlZmluZWQgYmVsb3dcblx0XHRcdCggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gZ2V0VG9uZU1hcHBpbmdGdW5jdGlvbiggJ3RvbmVNYXBwaW5nJywgcGFyYW1ldGVycy50b25lTWFwcGluZyApIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZGl0aGVyaW5nID8gJyNkZWZpbmUgRElUSEVSSU5HJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5vcGFxdWUgPyAnI2RlZmluZSBPUEFRVUUnIDogJycsXG5cblx0XHRcdFNoYWRlckNodW5rWyAnY29sb3JzcGFjZV9wYXJzX2ZyYWdtZW50JyBdLCAvLyB0aGlzIGNvZGUgaXMgcmVxdWlyZWQgaGVyZSBiZWNhdXNlIGl0IGlzIHVzZWQgYnkgdGhlIHZhcmlvdXMgZW5jb2RpbmcvZGVjb2RpbmcgZnVuY3Rpb24gZGVmaW5lZCBiZWxvd1xuXHRcdFx0Z2V0VGV4ZWxFbmNvZGluZ0Z1bmN0aW9uKCAnbGluZWFyVG9PdXRwdXRUZXhlbCcsIHBhcmFtZXRlcnMub3V0cHV0Q29sb3JTcGFjZSApLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnVzZURlcHRoUGFja2luZyA/ICcjZGVmaW5lIERFUFRIX1BBQ0tJTkcgJyArIHBhcmFtZXRlcnMuZGVwdGhQYWNraW5nIDogJycsXG5cblx0XHRcdCdcXG4nXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHR9XG5cblx0dmVydGV4U2hhZGVyID0gcmVzb2x2ZUluY2x1ZGVzKCB2ZXJ0ZXhTaGFkZXIgKTtcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cdHZlcnRleFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cblx0ZnJhZ21lbnRTaGFkZXIgPSByZXNvbHZlSW5jbHVkZXMoIGZyYWdtZW50U2hhZGVyICk7XG5cdGZyYWdtZW50U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblx0ZnJhZ21lbnRTaGFkZXIgPSByZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMoIGZyYWdtZW50U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cblx0dmVydGV4U2hhZGVyID0gdW5yb2xsTG9vcHMoIHZlcnRleFNoYWRlciApO1xuXHRmcmFnbWVudFNoYWRlciA9IHVucm9sbExvb3BzKCBmcmFnbWVudFNoYWRlciApO1xuXG5cdGlmICggcGFyYW1ldGVycy5pc1Jhd1NoYWRlck1hdGVyaWFsICE9PSB0cnVlICkge1xuXG5cdFx0Ly8gR0xTTCAzLjAgY29udmVyc2lvbiBmb3IgYnVpbHQtaW4gbWF0ZXJpYWxzIGFuZCBTaGFkZXJNYXRlcmlhbFxuXG5cdFx0dmVyc2lvblN0cmluZyA9ICcjdmVyc2lvbiAzMDAgZXNcXG4nO1xuXG5cdFx0cHJlZml4VmVydGV4ID0gW1xuXHRcdFx0Y3VzdG9tVmVydGV4RXh0ZW5zaW9ucyxcblx0XHRcdCcjZGVmaW5lIGF0dHJpYnV0ZSBpbicsXG5cdFx0XHQnI2RlZmluZSB2YXJ5aW5nIG91dCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkQgdGV4dHVyZSdcblx0XHRdLmpvaW4oICdcXG4nICkgKyAnXFxuJyArIHByZWZpeFZlcnRleDtcblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXHRcdFx0JyNkZWZpbmUgdmFyeWluZyBpbicsXG5cdFx0XHQoIHBhcmFtZXRlcnMuZ2xzbFZlcnNpb24gPT09IEdMU0wzICkgPyAnJyA6ICdsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgaGlnaHAgdmVjNCBwY19mcmFnQ29sb3I7Jyxcblx0XHRcdCggcGFyYW1ldGVycy5nbHNsVmVyc2lvbiA9PT0gR0xTTDMgKSA/ICcnIDogJyNkZWZpbmUgZ2xfRnJhZ0NvbG9yIHBjX2ZyYWdDb2xvcicsXG5cdFx0XHQnI2RlZmluZSBnbF9GcmFnRGVwdGhFWFQgZ2xfRnJhZ0RlcHRoJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlIHRleHR1cmUnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEUHJvaiB0ZXh0dXJlUHJvaicsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRMb2RFWFQgdGV4dHVyZUxvZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qTG9kRVhUIHRleHR1cmVQcm9qTG9kJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlTG9kRVhUIHRleHR1cmVMb2QnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJER3JhZEVYVCB0ZXh0dXJlR3JhZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qR3JhZEVYVCB0ZXh0dXJlUHJvakdyYWQnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZUN1YmVHcmFkRVhUIHRleHR1cmVHcmFkJ1xuXHRcdF0uam9pbiggJ1xcbicgKSArICdcXG4nICsgcHJlZml4RnJhZ21lbnQ7XG5cblx0fVxuXG5cdGNvbnN0IHZlcnRleEdsc2wgPSB2ZXJzaW9uU3RyaW5nICsgcHJlZml4VmVydGV4ICsgdmVydGV4U2hhZGVyO1xuXHRjb25zdCBmcmFnbWVudEdsc2wgPSB2ZXJzaW9uU3RyaW5nICsgcHJlZml4RnJhZ21lbnQgKyBmcmFnbWVudFNoYWRlcjtcblxuXHQvLyBjb25zb2xlLmxvZyggJypWRVJURVgqJywgdmVydGV4R2xzbCApO1xuXHQvLyBjb25zb2xlLmxvZyggJypGUkFHTUVOVConLCBmcmFnbWVudEdsc2wgKTtcblxuXHRjb25zdCBnbFZlcnRleFNoYWRlciA9IFdlYkdMU2hhZGVyKCBnbCwgZ2wuVkVSVEVYX1NIQURFUiwgdmVydGV4R2xzbCApO1xuXHRjb25zdCBnbEZyYWdtZW50U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIGZyYWdtZW50R2xzbCApO1xuXG5cdGdsLmF0dGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIgKTtcblx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0Ly8gRm9yY2UgYSBwYXJ0aWN1bGFyIGF0dHJpYnV0ZSB0byBpbmRleCAwLlxuXG5cdGlmICggcGFyYW1ldGVycy5pbmRleDBBdHRyaWJ1dGVOYW1lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsIHBhcmFtZXRlcnMuaW5kZXgwQXR0cmlidXRlTmFtZSApO1xuXG5cdH0gZWxzZSBpZiAoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzID09PSB0cnVlICkge1xuXG5cdFx0Ly8gcHJvZ3JhbXMgd2l0aCBtb3JwaFRhcmdldHMgZGlzcGxhY2UgcG9zaXRpb24gb3V0IG9mIGF0dHJpYnV0ZSAwXG5cdFx0Z2wuYmluZEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCAwLCAncG9zaXRpb24nICk7XG5cblx0fVxuXG5cdGdsLmxpbmtQcm9ncmFtKCBwcm9ncmFtICk7XG5cblx0ZnVuY3Rpb24gb25GaXJzdFVzZSggc2VsZiApIHtcblxuXHRcdC8vIGNoZWNrIGZvciBsaW5rIGVycm9yc1xuXHRcdGlmICggcmVuZGVyZXIuZGVidWcuY2hlY2tTaGFkZXJFcnJvcnMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1Mb2cgPSBnbC5nZXRQcm9ncmFtSW5mb0xvZyggcHJvZ3JhbSApLnRyaW0oKTtcblx0XHRcdGNvbnN0IHZlcnRleExvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coIGdsVmVydGV4U2hhZGVyICkudHJpbSgpO1xuXHRcdFx0Y29uc3QgZnJhZ21lbnRMb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKCBnbEZyYWdtZW50U2hhZGVyICkudHJpbSgpO1xuXG5cdFx0XHRsZXQgcnVubmFibGUgPSB0cnVlO1xuXHRcdFx0bGV0IGhhdmVEaWFnbm9zdGljcyA9IHRydWU7XG5cblx0XHRcdGlmICggZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0cnVubmFibGUgPSBmYWxzZTtcblxuXHRcdFx0XHRpZiAoIHR5cGVvZiByZW5kZXJlci5kZWJ1Zy5vblNoYWRlckVycm9yID09PSAnZnVuY3Rpb24nICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyZXIuZGVidWcub25TaGFkZXJFcnJvciggZ2wsIHByb2dyYW0sIGdsVmVydGV4U2hhZGVyLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGRlZmF1bHQgZXJyb3IgcmVwb3J0aW5nXG5cblx0XHRcdFx0XHRjb25zdCB2ZXJ0ZXhFcnJvcnMgPSBnZXRTaGFkZXJFcnJvcnMoIGdsLCBnbFZlcnRleFNoYWRlciwgJ3ZlcnRleCcgKTtcblx0XHRcdFx0XHRjb25zdCBmcmFnbWVudEVycm9ycyA9IGdldFNoYWRlckVycm9ycyggZ2wsIGdsRnJhZ21lbnRTaGFkZXIsICdmcmFnbWVudCcgKTtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdFx0XHQnVEhSRUUuV2ViR0xQcm9ncmFtOiBTaGFkZXIgRXJyb3IgJyArIGdsLmdldEVycm9yKCkgKyAnIC0gJyArXG5cdFx0XHRcdFx0XHQnVkFMSURBVEVfU1RBVFVTICcgKyBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCBnbC5WQUxJREFURV9TVEFUVVMgKSArICdcXG5cXG4nICtcblx0XHRcdFx0XHRcdCdNYXRlcmlhbCBOYW1lOiAnICsgc2VsZi5uYW1lICsgJ1xcbicgK1xuXHRcdFx0XHRcdFx0J01hdGVyaWFsIFR5cGU6ICcgKyBzZWxmLnR5cGUgKyAnXFxuXFxuJyArXG5cdFx0XHRcdFx0XHQnUHJvZ3JhbSBJbmZvIExvZzogJyArIHByb2dyYW1Mb2cgKyAnXFxuJyArXG5cdFx0XHRcdFx0XHR2ZXJ0ZXhFcnJvcnMgKyAnXFxuJyArXG5cdFx0XHRcdFx0XHRmcmFnbWVudEVycm9yc1xuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBwcm9ncmFtTG9nICE9PSAnJyApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFByb2dyYW06IFByb2dyYW0gSW5mbyBMb2c6JywgcHJvZ3JhbUxvZyApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB2ZXJ0ZXhMb2cgPT09ICcnIHx8IGZyYWdtZW50TG9nID09PSAnJyApIHtcblxuXHRcdFx0XHRoYXZlRGlhZ25vc3RpY3MgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhdmVEaWFnbm9zdGljcyApIHtcblxuXHRcdFx0XHRzZWxmLmRpYWdub3N0aWNzID0ge1xuXG5cdFx0XHRcdFx0cnVubmFibGU6IHJ1bm5hYmxlLFxuXG5cdFx0XHRcdFx0cHJvZ3JhbUxvZzogcHJvZ3JhbUxvZyxcblxuXHRcdFx0XHRcdHZlcnRleFNoYWRlcjoge1xuXG5cdFx0XHRcdFx0XHRsb2c6IHZlcnRleExvZyxcblx0XHRcdFx0XHRcdHByZWZpeDogcHJlZml4VmVydGV4XG5cblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHtcblxuXHRcdFx0XHRcdFx0bG9nOiBmcmFnbWVudExvZyxcblx0XHRcdFx0XHRcdHByZWZpeDogcHJlZml4RnJhZ21lbnRcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBDbGVhbiB1cFxuXG5cdFx0Ly8gQ3Jhc2hlcyBpbiBpT1M5IGFuZCBpT1MxMC4gIzE4NDAyXG5cdFx0Ly8gZ2wuZGV0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbFZlcnRleFNoYWRlciApO1xuXHRcdC8vIGdsLmRldGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xGcmFnbWVudFNoYWRlciApO1xuXG5cdFx0Z2wuZGVsZXRlU2hhZGVyKCBnbFZlcnRleFNoYWRlciApO1xuXHRcdGdsLmRlbGV0ZVNoYWRlciggZ2xGcmFnbWVudFNoYWRlciApO1xuXG5cdFx0Y2FjaGVkVW5pZm9ybXMgPSBuZXcgV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0gKTtcblx0XHRjYWNoZWRBdHRyaWJ1dGVzID0gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoIGdsLCBwcm9ncmFtICk7XG5cblx0fVxuXG5cdC8vIHNldCB1cCBjYWNoaW5nIGZvciB1bmlmb3JtIGxvY2F0aW9uc1xuXG5cdGxldCBjYWNoZWRVbmlmb3JtcztcblxuXHR0aGlzLmdldFVuaWZvcm1zID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCBjYWNoZWRVbmlmb3JtcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBQb3B1bGF0ZXMgY2FjaGVkVW5pZm9ybXMgYW5kIGNhY2hlZEF0dHJpYnV0ZXNcblx0XHRcdG9uRmlyc3RVc2UoIHRoaXMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjYWNoZWRVbmlmb3JtcztcblxuXHR9O1xuXG5cdC8vIHNldCB1cCBjYWNoaW5nIGZvciBhdHRyaWJ1dGUgbG9jYXRpb25zXG5cblx0bGV0IGNhY2hlZEF0dHJpYnV0ZXM7XG5cblx0dGhpcy5nZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCBjYWNoZWRBdHRyaWJ1dGVzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFBvcHVsYXRlcyBjYWNoZWRBdHRyaWJ1dGVzIGFuZCBjYWNoZWRVbmlmb3Jtc1xuXHRcdFx0b25GaXJzdFVzZSggdGhpcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlZEF0dHJpYnV0ZXM7XG5cblx0fTtcblxuXHQvLyBpbmRpY2F0ZSB3aGVuIHRoZSBwcm9ncmFtIGlzIHJlYWR5IHRvIGJlIHVzZWQuIGlmIHRoZSBLSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGUgZXh0ZW5zaW9uIGlzbid0IHN1cHBvcnRlZCxcblx0Ly8gZmxhZyB0aGUgcHJvZ3JhbSBhcyByZWFkeSBpbW1lZGlhdGVseS4gSXQgbWF5IGNhdXNlIGEgc3RhbGwgd2hlbiBpdCdzIGZpcnN0IHVzZWQuXG5cblx0bGV0IHByb2dyYW1SZWFkeSA9ICggcGFyYW1ldGVycy5yZW5kZXJlckV4dGVuc2lvblBhcmFsbGVsU2hhZGVyQ29tcGlsZSA9PT0gZmFsc2UgKTtcblxuXHR0aGlzLmlzUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHByb2dyYW1SZWFkeSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHByb2dyYW1SZWFkeSA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIENPTVBMRVRJT05fU1RBVFVTX0tIUiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb2dyYW1SZWFkeTtcblxuXHR9O1xuXG5cdC8vIGZyZWUgcmVzb3VyY2VcblxuXHR0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRiaW5kaW5nU3RhdGVzLnJlbGVhc2VTdGF0ZXNPZlByb2dyYW0oIHRoaXMgKTtcblxuXHRcdGdsLmRlbGV0ZVByb2dyYW0oIHByb2dyYW0gKTtcblx0XHR0aGlzLnByb2dyYW0gPSB1bmRlZmluZWQ7XG5cblx0fTtcblxuXHQvL1xuXG5cdHRoaXMudHlwZSA9IHBhcmFtZXRlcnMuc2hhZGVyVHlwZTtcblx0dGhpcy5uYW1lID0gcGFyYW1ldGVycy5zaGFkZXJOYW1lO1xuXHR0aGlzLmlkID0gcHJvZ3JhbUlkQ291bnQgKys7XG5cdHRoaXMuY2FjaGVLZXkgPSBjYWNoZUtleTtcblx0dGhpcy51c2VkVGltZXMgPSAxO1xuXHR0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuXHR0aGlzLnZlcnRleFNoYWRlciA9IGdsVmVydGV4U2hhZGVyO1xuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gZ2xGcmFnbWVudFNoYWRlcjtcblxuXHRyZXR1cm4gdGhpcztcblxufVxuXG5leHBvcnQgeyBXZWJHTFByb2dyYW0gfTtcbiIsImxldCBfaWQgPSAwO1xuXG5jbGFzcyBXZWJHTFNoYWRlckNhY2hlIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuc2hhZGVyQ2FjaGUgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5tYXRlcmlhbENhY2hlID0gbmV3IE1hcCgpO1xuXG5cdH1cblxuXHR1cGRhdGUoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgdmVydGV4U2hhZGVyID0gbWF0ZXJpYWwudmVydGV4U2hhZGVyO1xuXHRcdGNvbnN0IGZyYWdtZW50U2hhZGVyID0gbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXI7XG5cblx0XHRjb25zdCB2ZXJ0ZXhTaGFkZXJTdGFnZSA9IHRoaXMuX2dldFNoYWRlclN0YWdlKCB2ZXJ0ZXhTaGFkZXIgKTtcblx0XHRjb25zdCBmcmFnbWVudFNoYWRlclN0YWdlID0gdGhpcy5fZ2V0U2hhZGVyU3RhZ2UoIGZyYWdtZW50U2hhZGVyICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbFNoYWRlcnMgPSB0aGlzLl9nZXRTaGFkZXJDYWNoZUZvck1hdGVyaWFsKCBtYXRlcmlhbCApO1xuXG5cdFx0aWYgKCBtYXRlcmlhbFNoYWRlcnMuaGFzKCB2ZXJ0ZXhTaGFkZXJTdGFnZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0bWF0ZXJpYWxTaGFkZXJzLmFkZCggdmVydGV4U2hhZGVyU3RhZ2UgKTtcblx0XHRcdHZlcnRleFNoYWRlclN0YWdlLnVzZWRUaW1lcyArKztcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWxTaGFkZXJzLmhhcyggZnJhZ21lbnRTaGFkZXJTdGFnZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0bWF0ZXJpYWxTaGFkZXJzLmFkZCggZnJhZ21lbnRTaGFkZXJTdGFnZSApO1xuXHRcdFx0ZnJhZ21lbnRTaGFkZXJTdGFnZS51c2VkVGltZXMgKys7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmVtb3ZlKCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnN0IG1hdGVyaWFsU2hhZGVycyA9IHRoaXMubWF0ZXJpYWxDYWNoZS5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRmb3IgKCBjb25zdCBzaGFkZXJTdGFnZSBvZiBtYXRlcmlhbFNoYWRlcnMgKSB7XG5cblx0XHRcdHNoYWRlclN0YWdlLnVzZWRUaW1lcyAtLTtcblxuXHRcdFx0aWYgKCBzaGFkZXJTdGFnZS51c2VkVGltZXMgPT09IDAgKSB0aGlzLnNoYWRlckNhY2hlLmRlbGV0ZSggc2hhZGVyU3RhZ2UuY29kZSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5tYXRlcmlhbENhY2hlLmRlbGV0ZSggbWF0ZXJpYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRWZXJ0ZXhTaGFkZXJJRCggbWF0ZXJpYWwgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZ2V0U2hhZGVyU3RhZ2UoIG1hdGVyaWFsLnZlcnRleFNoYWRlciApLmlkO1xuXG5cdH1cblxuXHRnZXRGcmFnbWVudFNoYWRlcklEKCBtYXRlcmlhbCApIHtcblxuXHRcdHJldHVybiB0aGlzLl9nZXRTaGFkZXJTdGFnZSggbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXIgKS5pZDtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuc2hhZGVyQ2FjaGUuY2xlYXIoKTtcblx0XHR0aGlzLm1hdGVyaWFsQ2FjaGUuY2xlYXIoKTtcblxuXHR9XG5cblx0X2dldFNoYWRlckNhY2hlRm9yTWF0ZXJpYWwoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB0aGlzLm1hdGVyaWFsQ2FjaGU7XG5cdFx0bGV0IHNldCA9IGNhY2hlLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdGlmICggc2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNldCA9IG5ldyBTZXQoKTtcblx0XHRcdGNhY2hlLnNldCggbWF0ZXJpYWwsIHNldCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNldDtcblxuXHR9XG5cblx0X2dldFNoYWRlclN0YWdlKCBjb2RlICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB0aGlzLnNoYWRlckNhY2hlO1xuXHRcdGxldCBzdGFnZSA9IGNhY2hlLmdldCggY29kZSApO1xuXG5cdFx0aWYgKCBzdGFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzdGFnZSA9IG5ldyBXZWJHTFNoYWRlclN0YWdlKCBjb2RlICk7XG5cdFx0XHRjYWNoZS5zZXQoIGNvZGUsIHN0YWdlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc3RhZ2U7XG5cblx0fVxuXG59XG5cbmNsYXNzIFdlYkdMU2hhZGVyU3RhZ2Uge1xuXG5cdGNvbnN0cnVjdG9yKCBjb2RlICkge1xuXG5cdFx0dGhpcy5pZCA9IF9pZCArKztcblxuXHRcdHRoaXMuY29kZSA9IGNvZGU7XG5cdFx0dGhpcy51c2VkVGltZXMgPSAwO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBXZWJHTFNoYWRlckNhY2hlIH07XG4iLCJpbXBvcnQgeyBCYWNrU2lkZSwgRG91YmxlU2lkZSwgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcsIE9iamVjdFNwYWNlTm9ybWFsTWFwLCBUYW5nZW50U3BhY2VOb3JtYWxNYXAsIE5vVG9uZU1hcHBpbmcsIE5vcm1hbEJsZW5kaW5nLCBMaW5lYXJTUkdCQ29sb3JTcGFjZSwgU1JHQlRyYW5zZmVyIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IExheWVycyB9IGZyb20gJy4uLy4uL2NvcmUvTGF5ZXJzLmpzJztcbmltcG9ydCB7IFdlYkdMUHJvZ3JhbSB9IGZyb20gJy4vV2ViR0xQcm9ncmFtLmpzJztcbmltcG9ydCB7IFdlYkdMU2hhZGVyQ2FjaGUgfSBmcm9tICcuL1dlYkdMU2hhZGVyQ2FjaGUuanMnO1xuaW1wb3J0IHsgU2hhZGVyTGliIH0gZnJvbSAnLi4vc2hhZGVycy9TaGFkZXJMaWIuanMnO1xuaW1wb3J0IHsgVW5pZm9ybXNVdGlscyB9IGZyb20gJy4uL3NoYWRlcnMvVW5pZm9ybXNVdGlscy5qcyc7XG5pbXBvcnQgeyBDb2xvck1hbmFnZW1lbnQgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yTWFuYWdlbWVudC5qcyc7XG5cbmZ1bmN0aW9uIFdlYkdMUHJvZ3JhbXMoIHJlbmRlcmVyLCBjdWJlbWFwcywgY3ViZXV2bWFwcywgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzLCBiaW5kaW5nU3RhdGVzLCBjbGlwcGluZyApIHtcblxuXHRjb25zdCBfcHJvZ3JhbUxheWVycyA9IG5ldyBMYXllcnMoKTtcblx0Y29uc3QgX2N1c3RvbVNoYWRlcnMgPSBuZXcgV2ViR0xTaGFkZXJDYWNoZSgpO1xuXHRjb25zdCBfYWN0aXZlQ2hhbm5lbHMgPSBuZXcgU2V0KCk7XG5cdGNvbnN0IHByb2dyYW1zID0gW107XG5cblx0Y29uc3QgbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9IGNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyO1xuXHRjb25zdCBTVVBQT1JUU19WRVJURVhfVEVYVFVSRVMgPSBjYXBhYmlsaXRpZXMudmVydGV4VGV4dHVyZXM7XG5cblx0bGV0IHByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5wcmVjaXNpb247XG5cblx0Y29uc3Qgc2hhZGVySURzID0ge1xuXHRcdE1lc2hEZXB0aE1hdGVyaWFsOiAnZGVwdGgnLFxuXHRcdE1lc2hEaXN0YW5jZU1hdGVyaWFsOiAnZGlzdGFuY2VSR0JBJyxcblx0XHRNZXNoTm9ybWFsTWF0ZXJpYWw6ICdub3JtYWwnLFxuXHRcdE1lc2hCYXNpY01hdGVyaWFsOiAnYmFzaWMnLFxuXHRcdE1lc2hMYW1iZXJ0TWF0ZXJpYWw6ICdsYW1iZXJ0Jyxcblx0XHRNZXNoUGhvbmdNYXRlcmlhbDogJ3Bob25nJyxcblx0XHRNZXNoVG9vbk1hdGVyaWFsOiAndG9vbicsXG5cdFx0TWVzaFN0YW5kYXJkTWF0ZXJpYWw6ICdwaHlzaWNhbCcsXG5cdFx0TWVzaFBoeXNpY2FsTWF0ZXJpYWw6ICdwaHlzaWNhbCcsXG5cdFx0TWVzaE1hdGNhcE1hdGVyaWFsOiAnbWF0Y2FwJyxcblx0XHRMaW5lQmFzaWNNYXRlcmlhbDogJ2Jhc2ljJyxcblx0XHRMaW5lRGFzaGVkTWF0ZXJpYWw6ICdkYXNoZWQnLFxuXHRcdFBvaW50c01hdGVyaWFsOiAncG9pbnRzJyxcblx0XHRTaGFkb3dNYXRlcmlhbDogJ3NoYWRvdycsXG5cdFx0U3ByaXRlTWF0ZXJpYWw6ICdzcHJpdGUnXG5cdH07XG5cblx0ZnVuY3Rpb24gZ2V0Q2hhbm5lbCggdmFsdWUgKSB7XG5cblx0XHRfYWN0aXZlQ2hhbm5lbHMuYWRkKCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gMCApIHJldHVybiAndXYnO1xuXG5cdFx0cmV0dXJuIGB1diR7IHZhbHVlIH1gO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQYXJhbWV0ZXJzKCBtYXRlcmlhbCwgbGlnaHRzLCBzaGFkb3dzLCBzY2VuZSwgb2JqZWN0ICkge1xuXG5cdFx0Y29uc3QgZm9nID0gc2NlbmUuZm9nO1xuXHRcdGNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXHRcdGNvbnN0IGVudmlyb25tZW50ID0gbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IHNjZW5lLmVudmlyb25tZW50IDogbnVsbDtcblxuXHRcdGNvbnN0IGVudk1hcCA9ICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IGN1YmV1dm1hcHMgOiBjdWJlbWFwcyApLmdldCggbWF0ZXJpYWwuZW52TWFwIHx8IGVudmlyb25tZW50ICk7XG5cdFx0Y29uc3QgZW52TWFwQ3ViZVVWSGVpZ2h0ID0gKCAhISBlbnZNYXAgKSAmJiAoIGVudk1hcC5tYXBwaW5nID09PSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyApID8gZW52TWFwLmltYWdlLmhlaWdodCA6IG51bGw7XG5cblx0XHRjb25zdCBzaGFkZXJJRCA9IHNoYWRlcklEc1sgbWF0ZXJpYWwudHlwZSBdO1xuXG5cdFx0Ly8gaGV1cmlzdGljcyB0byBjcmVhdGUgc2hhZGVyIHBhcmFtZXRlcnMgYWNjb3JkaW5nIHRvIGxpZ2h0cyBpbiB0aGUgc2NlbmVcblx0XHQvLyAobm90IHRvIGJsb3cgb3ZlciBtYXhMaWdodHMgYnVkZ2V0KVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5wcmVjaXNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5nZXRNYXhQcmVjaXNpb24oIG1hdGVyaWFsLnByZWNpc2lvbiApO1xuXG5cdFx0XHRpZiAoIHByZWNpc2lvbiAhPT0gbWF0ZXJpYWwucHJlY2lzaW9uICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbS5nZXRQYXJhbWV0ZXJzOicsIG1hdGVyaWFsLnByZWNpc2lvbiwgJ25vdCBzdXBwb3J0ZWQsIHVzaW5nJywgcHJlY2lzaW9uLCAnaW5zdGVhZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5jb2xvcjtcblx0XHRjb25zdCBtb3JwaFRhcmdldHNDb3VudCA9ICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApID8gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoIDogMDtcblxuXHRcdGxldCBtb3JwaFRleHR1cmVTdHJpZGUgPSAwO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCApIG1vcnBoVGV4dHVyZVN0cmlkZSA9IDE7XG5cdFx0aWYgKCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQgKSBtb3JwaFRleHR1cmVTdHJpZGUgPSAyO1xuXHRcdGlmICggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yICE9PSB1bmRlZmluZWQgKSBtb3JwaFRleHR1cmVTdHJpZGUgPSAzO1xuXG5cdFx0Ly9cblxuXHRcdGxldCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyO1xuXHRcdGxldCBjdXN0b21WZXJ0ZXhTaGFkZXJJRCwgY3VzdG9tRnJhZ21lbnRTaGFkZXJJRDtcblxuXHRcdGlmICggc2hhZGVySUQgKSB7XG5cblx0XHRcdGNvbnN0IHNoYWRlciA9IFNoYWRlckxpYlsgc2hhZGVySUQgXTtcblxuXHRcdFx0dmVydGV4U2hhZGVyID0gc2hhZGVyLnZlcnRleFNoYWRlcjtcblx0XHRcdGZyYWdtZW50U2hhZGVyID0gc2hhZGVyLmZyYWdtZW50U2hhZGVyO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmVydGV4U2hhZGVyID0gbWF0ZXJpYWwudmVydGV4U2hhZGVyO1xuXHRcdFx0ZnJhZ21lbnRTaGFkZXIgPSBtYXRlcmlhbC5mcmFnbWVudFNoYWRlcjtcblxuXHRcdFx0X2N1c3RvbVNoYWRlcnMudXBkYXRlKCBtYXRlcmlhbCApO1xuXG5cdFx0XHRjdXN0b21WZXJ0ZXhTaGFkZXJJRCA9IF9jdXN0b21TaGFkZXJzLmdldFZlcnRleFNoYWRlcklEKCBtYXRlcmlhbCApO1xuXHRcdFx0Y3VzdG9tRnJhZ21lbnRTaGFkZXJJRCA9IF9jdXN0b21TaGFkZXJzLmdldEZyYWdtZW50U2hhZGVySUQoIG1hdGVyaWFsICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHRjb25zdCBJU19JTlNUQU5DRURNRVNIID0gb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZTtcblx0XHRjb25zdCBJU19CQVRDSEVETUVTSCA9IG9iamVjdC5pc0JhdGNoZWRNZXNoID09PSB0cnVlO1xuXG5cdFx0Y29uc3QgSEFTX01BUCA9ICEhIG1hdGVyaWFsLm1hcDtcblx0XHRjb25zdCBIQVNfTUFUQ0FQID0gISEgbWF0ZXJpYWwubWF0Y2FwO1xuXHRcdGNvbnN0IEhBU19FTlZNQVAgPSAhISBlbnZNYXA7XG5cdFx0Y29uc3QgSEFTX0FPTUFQID0gISEgbWF0ZXJpYWwuYW9NYXA7XG5cdFx0Y29uc3QgSEFTX0xJR0hUTUFQID0gISEgbWF0ZXJpYWwubGlnaHRNYXA7XG5cdFx0Y29uc3QgSEFTX0JVTVBNQVAgPSAhISBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdGNvbnN0IEhBU19OT1JNQUxNQVAgPSAhISBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cdFx0Y29uc3QgSEFTX0RJU1BMQUNFTUVOVE1BUCA9ICEhIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRjb25zdCBIQVNfRU1JU1NJVkVNQVAgPSAhISBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdGNvbnN0IEhBU19NRVRBTE5FU1NNQVAgPSAhISBtYXRlcmlhbC5tZXRhbG5lc3NNYXA7XG5cdFx0Y29uc3QgSEFTX1JPVUdITkVTU01BUCA9ICEhIG1hdGVyaWFsLnJvdWdobmVzc01hcDtcblxuXHRcdGNvbnN0IEhBU19BTklTT1RST1BZID0gbWF0ZXJpYWwuYW5pc290cm9weSA+IDA7XG5cdFx0Y29uc3QgSEFTX0NMRUFSQ09BVCA9IG1hdGVyaWFsLmNsZWFyY29hdCA+IDA7XG5cdFx0Y29uc3QgSEFTX0RJU1BFUlNJT04gPSBtYXRlcmlhbC5kaXNwZXJzaW9uID4gMDtcblx0XHRjb25zdCBIQVNfSVJJREVTQ0VOQ0UgPSBtYXRlcmlhbC5pcmlkZXNjZW5jZSA+IDA7XG5cdFx0Y29uc3QgSEFTX1NIRUVOID0gbWF0ZXJpYWwuc2hlZW4gPiAwO1xuXHRcdGNvbnN0IEhBU19UUkFOU01JU1NJT04gPSBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwO1xuXG5cdFx0Y29uc3QgSEFTX0FOSVNPVFJPUFlNQVAgPSBIQVNfQU5JU09UUk9QWSAmJiAhISBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwO1xuXG5cdFx0Y29uc3QgSEFTX0NMRUFSQ09BVE1BUCA9IEhBU19DTEVBUkNPQVQgJiYgISEgbWF0ZXJpYWwuY2xlYXJjb2F0TWFwO1xuXHRcdGNvbnN0IEhBU19DTEVBUkNPQVRfTk9STUFMTUFQID0gSEFTX0NMRUFSQ09BVCAmJiAhISBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXA7XG5cdFx0Y29uc3QgSEFTX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVAgPSBIQVNfQ0xFQVJDT0FUICYmICEhIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzc01hcDtcblxuXHRcdGNvbnN0IEhBU19JUklERVNDRU5DRU1BUCA9IEhBU19JUklERVNDRU5DRSAmJiAhISBtYXRlcmlhbC5pcmlkZXNjZW5jZU1hcDtcblx0XHRjb25zdCBIQVNfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQID0gSEFTX0lSSURFU0NFTkNFICYmICEhIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwO1xuXG5cdFx0Y29uc3QgSEFTX1NIRUVOX0NPTE9STUFQID0gSEFTX1NIRUVOICYmICEhIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXA7XG5cdFx0Y29uc3QgSEFTX1NIRUVOX1JPVUdITkVTU01BUCA9IEhBU19TSEVFTiAmJiAhISBtYXRlcmlhbC5zaGVlblJvdWdobmVzc01hcDtcblxuXHRcdGNvbnN0IEhBU19TUEVDVUxBUk1BUCA9ICEhIG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuXHRcdGNvbnN0IEhBU19TUEVDVUxBUl9DT0xPUk1BUCA9ICEhIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXA7XG5cdFx0Y29uc3QgSEFTX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCA9ICEhIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwO1xuXG5cdFx0Y29uc3QgSEFTX1RSQU5TTUlTU0lPTk1BUCA9IEhBU19UUkFOU01JU1NJT04gJiYgISEgbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwO1xuXHRcdGNvbnN0IEhBU19USElDS05FU1NNQVAgPSBIQVNfVFJBTlNNSVNTSU9OICYmICEhIG1hdGVyaWFsLnRoaWNrbmVzc01hcDtcblxuXHRcdGNvbnN0IEhBU19HUkFESUVOVE1BUCA9ICEhIG1hdGVyaWFsLmdyYWRpZW50TWFwO1xuXG5cdFx0Y29uc3QgSEFTX0FMUEhBTUFQID0gISEgbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHRjb25zdCBIQVNfQUxQSEFURVNUID0gbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMDtcblxuXHRcdGNvbnN0IEhBU19BTFBIQUhBU0ggPSAhISBtYXRlcmlhbC5hbHBoYUhhc2g7XG5cblx0XHRjb25zdCBIQVNfRVhURU5TSU9OUyA9ICEhIG1hdGVyaWFsLmV4dGVuc2lvbnM7XG5cblx0XHRsZXQgdG9uZU1hcHBpbmcgPSBOb1RvbmVNYXBwaW5nO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC50b25lTWFwcGVkICkge1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHRvbmVNYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IHBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdHNoYWRlcklEOiBzaGFkZXJJRCxcblx0XHRcdHNoYWRlclR5cGU6IG1hdGVyaWFsLnR5cGUsXG5cdFx0XHRzaGFkZXJOYW1lOiBtYXRlcmlhbC5uYW1lLFxuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IHZlcnRleFNoYWRlcixcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBmcmFnbWVudFNoYWRlcixcblx0XHRcdGRlZmluZXM6IG1hdGVyaWFsLmRlZmluZXMsXG5cblx0XHRcdGN1c3RvbVZlcnRleFNoYWRlcklEOiBjdXN0b21WZXJ0ZXhTaGFkZXJJRCxcblx0XHRcdGN1c3RvbUZyYWdtZW50U2hhZGVySUQ6IGN1c3RvbUZyYWdtZW50U2hhZGVySUQsXG5cblx0XHRcdGlzUmF3U2hhZGVyTWF0ZXJpYWw6IG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgPT09IHRydWUsXG5cdFx0XHRnbHNsVmVyc2lvbjogbWF0ZXJpYWwuZ2xzbFZlcnNpb24sXG5cblx0XHRcdHByZWNpc2lvbjogcHJlY2lzaW9uLFxuXG5cdFx0XHRiYXRjaGluZzogSVNfQkFUQ0hFRE1FU0gsXG5cdFx0XHRiYXRjaGluZ0NvbG9yOiBJU19CQVRDSEVETUVTSCAmJiBvYmplY3QuX2NvbG9yc1RleHR1cmUgIT09IG51bGwsXG5cdFx0XHRpbnN0YW5jaW5nOiBJU19JTlNUQU5DRURNRVNILFxuXHRcdFx0aW5zdGFuY2luZ0NvbG9yOiBJU19JTlNUQU5DRURNRVNIICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICE9PSBudWxsLFxuXHRcdFx0aW5zdGFuY2luZ01vcnBoOiBJU19JTlNUQU5DRURNRVNIICYmIG9iamVjdC5tb3JwaFRleHR1cmUgIT09IG51bGwsXG5cblx0XHRcdHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6IFNVUFBPUlRTX1ZFUlRFWF9URVhUVVJFUyxcblx0XHRcdG91dHB1dENvbG9yU3BhY2U6ICggY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCApID8gcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSA6ICggY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlID8gY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlLmNvbG9yU3BhY2UgOiBMaW5lYXJTUkdCQ29sb3JTcGFjZSApLFxuXHRcdFx0YWxwaGFUb0NvdmVyYWdlOiAhISBtYXRlcmlhbC5hbHBoYVRvQ292ZXJhZ2UsXG5cblx0XHRcdG1hcDogSEFTX01BUCxcblx0XHRcdG1hdGNhcDogSEFTX01BVENBUCxcblx0XHRcdGVudk1hcDogSEFTX0VOVk1BUCxcblx0XHRcdGVudk1hcE1vZGU6IEhBU19FTlZNQVAgJiYgZW52TWFwLm1hcHBpbmcsXG5cdFx0XHRlbnZNYXBDdWJlVVZIZWlnaHQ6IGVudk1hcEN1YmVVVkhlaWdodCxcblx0XHRcdGFvTWFwOiBIQVNfQU9NQVAsXG5cdFx0XHRsaWdodE1hcDogSEFTX0xJR0hUTUFQLFxuXHRcdFx0YnVtcE1hcDogSEFTX0JVTVBNQVAsXG5cdFx0XHRub3JtYWxNYXA6IEhBU19OT1JNQUxNQVAsXG5cdFx0XHRkaXNwbGFjZW1lbnRNYXA6IFNVUFBPUlRTX1ZFUlRFWF9URVhUVVJFUyAmJiBIQVNfRElTUExBQ0VNRU5UTUFQLFxuXHRcdFx0ZW1pc3NpdmVNYXA6IEhBU19FTUlTU0lWRU1BUCxcblxuXHRcdFx0bm9ybWFsTWFwT2JqZWN0U3BhY2U6IEhBU19OT1JNQUxNQVAgJiYgbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9PT0gT2JqZWN0U3BhY2VOb3JtYWxNYXAsXG5cdFx0XHRub3JtYWxNYXBUYW5nZW50U3BhY2U6IEhBU19OT1JNQUxNQVAgJiYgbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9PT0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuXG5cdFx0XHRtZXRhbG5lc3NNYXA6IEhBU19NRVRBTE5FU1NNQVAsXG5cdFx0XHRyb3VnaG5lc3NNYXA6IEhBU19ST1VHSE5FU1NNQVAsXG5cblx0XHRcdGFuaXNvdHJvcHk6IEhBU19BTklTT1RST1BZLFxuXHRcdFx0YW5pc290cm9weU1hcDogSEFTX0FOSVNPVFJPUFlNQVAsXG5cblx0XHRcdGNsZWFyY29hdDogSEFTX0NMRUFSQ09BVCxcblx0XHRcdGNsZWFyY29hdE1hcDogSEFTX0NMRUFSQ09BVE1BUCxcblx0XHRcdGNsZWFyY29hdE5vcm1hbE1hcDogSEFTX0NMRUFSQ09BVF9OT1JNQUxNQVAsXG5cdFx0XHRjbGVhcmNvYXRSb3VnaG5lc3NNYXA6IEhBU19DTEVBUkNPQVRfUk9VR0hORVNTTUFQLFxuXG5cdFx0XHRkaXNwZXJzaW9uOiBIQVNfRElTUEVSU0lPTixcblxuXHRcdFx0aXJpZGVzY2VuY2U6IEhBU19JUklERVNDRU5DRSxcblx0XHRcdGlyaWRlc2NlbmNlTWFwOiBIQVNfSVJJREVTQ0VOQ0VNQVAsXG5cdFx0XHRpcmlkZXNjZW5jZVRoaWNrbmVzc01hcDogSEFTX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUCxcblxuXHRcdFx0c2hlZW46IEhBU19TSEVFTixcblx0XHRcdHNoZWVuQ29sb3JNYXA6IEhBU19TSEVFTl9DT0xPUk1BUCxcblx0XHRcdHNoZWVuUm91Z2huZXNzTWFwOiBIQVNfU0hFRU5fUk9VR0hORVNTTUFQLFxuXG5cdFx0XHRzcGVjdWxhck1hcDogSEFTX1NQRUNVTEFSTUFQLFxuXHRcdFx0c3BlY3VsYXJDb2xvck1hcDogSEFTX1NQRUNVTEFSX0NPTE9STUFQLFxuXHRcdFx0c3BlY3VsYXJJbnRlbnNpdHlNYXA6IEhBU19TUEVDVUxBUl9JTlRFTlNJVFlNQVAsXG5cblx0XHRcdHRyYW5zbWlzc2lvbjogSEFTX1RSQU5TTUlTU0lPTixcblx0XHRcdHRyYW5zbWlzc2lvbk1hcDogSEFTX1RSQU5TTUlTU0lPTk1BUCxcblx0XHRcdHRoaWNrbmVzc01hcDogSEFTX1RISUNLTkVTU01BUCxcblxuXHRcdFx0Z3JhZGllbnRNYXA6IEhBU19HUkFESUVOVE1BUCxcblxuXHRcdFx0b3BhcXVlOiBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gZmFsc2UgJiYgbWF0ZXJpYWwuYmxlbmRpbmcgPT09IE5vcm1hbEJsZW5kaW5nICYmIG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZSA9PT0gZmFsc2UsXG5cblx0XHRcdGFscGhhTWFwOiBIQVNfQUxQSEFNQVAsXG5cdFx0XHRhbHBoYVRlc3Q6IEhBU19BTFBIQVRFU1QsXG5cdFx0XHRhbHBoYUhhc2g6IEhBU19BTFBIQUhBU0gsXG5cblx0XHRcdGNvbWJpbmU6IG1hdGVyaWFsLmNvbWJpbmUsXG5cblx0XHRcdC8vXG5cblx0XHRcdG1hcFV2OiBIQVNfTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLm1hcC5jaGFubmVsICksXG5cdFx0XHRhb01hcFV2OiBIQVNfQU9NQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuYW9NYXAuY2hhbm5lbCApLFxuXHRcdFx0bGlnaHRNYXBVdjogSEFTX0xJR0hUTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmxpZ2h0TWFwLmNoYW5uZWwgKSxcblx0XHRcdGJ1bXBNYXBVdjogSEFTX0JVTVBNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuYnVtcE1hcC5jaGFubmVsICksXG5cdFx0XHRub3JtYWxNYXBVdjogSEFTX05PUk1BTE1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5ub3JtYWxNYXAuY2hhbm5lbCApLFxuXHRcdFx0ZGlzcGxhY2VtZW50TWFwVXY6IEhBU19ESVNQTEFDRU1FTlRNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLmNoYW5uZWwgKSxcblx0XHRcdGVtaXNzaXZlTWFwVXY6IEhBU19FTUlTU0lWRU1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcC5jaGFubmVsICksXG5cblx0XHRcdG1ldGFsbmVzc01hcFV2OiBIQVNfTUVUQUxORVNTTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLm1ldGFsbmVzc01hcC5jaGFubmVsICksXG5cdFx0XHRyb3VnaG5lc3NNYXBVdjogSEFTX1JPVUdITkVTU01BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5yb3VnaG5lc3NNYXAuY2hhbm5lbCApLFxuXG5cdFx0XHRhbmlzb3Ryb3B5TWFwVXY6IEhBU19BTklTT1RST1BZTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmFuaXNvdHJvcHlNYXAuY2hhbm5lbCApLFxuXG5cdFx0XHRjbGVhcmNvYXRNYXBVdjogSEFTX0NMRUFSQ09BVE1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5jbGVhcmNvYXRNYXAuY2hhbm5lbCApLFxuXHRcdFx0Y2xlYXJjb2F0Tm9ybWFsTWFwVXY6IEhBU19DTEVBUkNPQVRfTk9STUFMTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcC5jaGFubmVsICksXG5cdFx0XHRjbGVhcmNvYXRSb3VnaG5lc3NNYXBVdjogSEFTX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwLmNoYW5uZWwgKSxcblxuXHRcdFx0aXJpZGVzY2VuY2VNYXBVdjogSEFTX0lSSURFU0NFTkNFTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwLmNoYW5uZWwgKSxcblx0XHRcdGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXY6IEhBU19JUklERVNDRU5DRV9USElDS05FU1NNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAuY2hhbm5lbCApLFxuXG5cdFx0XHRzaGVlbkNvbG9yTWFwVXY6IEhBU19TSEVFTl9DT0xPUk1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5zaGVlbkNvbG9yTWFwLmNoYW5uZWwgKSxcblx0XHRcdHNoZWVuUm91Z2huZXNzTWFwVXY6IEhBU19TSEVFTl9ST1VHSE5FU1NNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXAuY2hhbm5lbCApLFxuXG5cdFx0XHRzcGVjdWxhck1hcFV2OiBIQVNfU1BFQ1VMQVJNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuc3BlY3VsYXJNYXAuY2hhbm5lbCApLFxuXHRcdFx0c3BlY3VsYXJDb2xvck1hcFV2OiBIQVNfU1BFQ1VMQVJfQ09MT1JNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvck1hcC5jaGFubmVsICksXG5cdFx0XHRzcGVjdWxhckludGVuc2l0eU1hcFV2OiBIQVNfU1BFQ1VMQVJfSU5URU5TSVRZTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwLmNoYW5uZWwgKSxcblxuXHRcdFx0dHJhbnNtaXNzaW9uTWFwVXY6IEhBU19UUkFOU01JU1NJT05NQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwLmNoYW5uZWwgKSxcblx0XHRcdHRoaWNrbmVzc01hcFV2OiBIQVNfVEhJQ0tORVNTTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLnRoaWNrbmVzc01hcC5jaGFubmVsICksXG5cblx0XHRcdGFscGhhTWFwVXY6IEhBU19BTFBIQU1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5hbHBoYU1hcC5jaGFubmVsICksXG5cblx0XHRcdC8vXG5cblx0XHRcdHZlcnRleFRhbmdlbnRzOiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQgJiYgKCBIQVNfTk9STUFMTUFQIHx8IEhBU19BTklTT1RST1BZICksXG5cdFx0XHR2ZXJ0ZXhDb2xvcnM6IG1hdGVyaWFsLnZlcnRleENvbG9ycyxcblx0XHRcdHZlcnRleEFscGhhczogbWF0ZXJpYWwudmVydGV4Q29sb3JzID09PSB0cnVlICYmICEhIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5pdGVtU2l6ZSA9PT0gNCxcblxuXHRcdFx0cG9pbnRzVXZzOiBvYmplY3QuaXNQb2ludHMgPT09IHRydWUgJiYgISEgZ2VvbWV0cnkuYXR0cmlidXRlcy51diAmJiAoIEhBU19NQVAgfHwgSEFTX0FMUEhBTUFQICksXG5cblx0XHRcdGZvZzogISEgZm9nLFxuXHRcdFx0dXNlRm9nOiBtYXRlcmlhbC5mb2cgPT09IHRydWUsXG5cdFx0XHRmb2dFeHAyOiAoICEhIGZvZyAmJiBmb2cuaXNGb2dFeHAyICksXG5cblx0XHRcdGZsYXRTaGFkaW5nOiBtYXRlcmlhbC5mbGF0U2hhZGluZyA9PT0gdHJ1ZSxcblxuXHRcdFx0c2l6ZUF0dGVudWF0aW9uOiBtYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPT09IHRydWUsXG5cdFx0XHRsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxuXG5cdFx0XHRza2lubmluZzogb2JqZWN0LmlzU2tpbm5lZE1lc2ggPT09IHRydWUsXG5cblx0XHRcdG1vcnBoVGFyZ2V0czogZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uICE9PSB1bmRlZmluZWQsXG5cdFx0XHRtb3JwaE5vcm1hbHM6IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZCxcblx0XHRcdG1vcnBoQ29sb3JzOiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCxcblx0XHRcdG1vcnBoVGFyZ2V0c0NvdW50OiBtb3JwaFRhcmdldHNDb3VudCxcblx0XHRcdG1vcnBoVGV4dHVyZVN0cmlkZTogbW9ycGhUZXh0dXJlU3RyaWRlLFxuXG5cdFx0XHRudW1EaXJMaWdodHM6IGxpZ2h0cy5kaXJlY3Rpb25hbC5sZW5ndGgsXG5cdFx0XHRudW1Qb2ludExpZ2h0czogbGlnaHRzLnBvaW50Lmxlbmd0aCxcblx0XHRcdG51bVNwb3RMaWdodHM6IGxpZ2h0cy5zcG90Lmxlbmd0aCxcblx0XHRcdG51bVNwb3RMaWdodE1hcHM6IGxpZ2h0cy5zcG90TGlnaHRNYXAubGVuZ3RoLFxuXHRcdFx0bnVtUmVjdEFyZWFMaWdodHM6IGxpZ2h0cy5yZWN0QXJlYS5sZW5ndGgsXG5cdFx0XHRudW1IZW1pTGlnaHRzOiBsaWdodHMuaGVtaS5sZW5ndGgsXG5cblx0XHRcdG51bURpckxpZ2h0U2hhZG93czogbGlnaHRzLmRpcmVjdGlvbmFsU2hhZG93TWFwLmxlbmd0aCxcblx0XHRcdG51bVBvaW50TGlnaHRTaGFkb3dzOiBsaWdodHMucG9pbnRTaGFkb3dNYXAubGVuZ3RoLFxuXHRcdFx0bnVtU3BvdExpZ2h0U2hhZG93czogbGlnaHRzLnNwb3RTaGFkb3dNYXAubGVuZ3RoLFxuXHRcdFx0bnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzOiBsaWdodHMubnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzLFxuXG5cdFx0XHRudW1MaWdodFByb2JlczogbGlnaHRzLm51bUxpZ2h0UHJvYmVzLFxuXG5cdFx0XHRudW1DbGlwcGluZ1BsYW5lczogY2xpcHBpbmcubnVtUGxhbmVzLFxuXHRcdFx0bnVtQ2xpcEludGVyc2VjdGlvbjogY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uLFxuXG5cdFx0XHRkaXRoZXJpbmc6IG1hdGVyaWFsLmRpdGhlcmluZyxcblxuXHRcdFx0c2hhZG93TWFwRW5hYmxlZDogcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgJiYgc2hhZG93cy5sZW5ndGggPiAwLFxuXHRcdFx0c2hhZG93TWFwVHlwZTogcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUsXG5cblx0XHRcdHRvbmVNYXBwaW5nOiB0b25lTWFwcGluZyxcblxuXHRcdFx0ZGVjb2RlVmlkZW9UZXh0dXJlOiBIQVNfTUFQICYmICggbWF0ZXJpYWwubWFwLmlzVmlkZW9UZXh0dXJlID09PSB0cnVlICkgJiYgKCBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIG1hdGVyaWFsLm1hcC5jb2xvclNwYWNlICkgPT09IFNSR0JUcmFuc2ZlciApLFxuXG5cdFx0XHRwcmVtdWx0aXBsaWVkQWxwaGE6IG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYSxcblxuXHRcdFx0ZG91YmxlU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUsXG5cdFx0XHRmbGlwU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlLFxuXG5cdFx0XHR1c2VEZXB0aFBhY2tpbmc6IG1hdGVyaWFsLmRlcHRoUGFja2luZyA+PSAwLFxuXHRcdFx0ZGVwdGhQYWNraW5nOiBtYXRlcmlhbC5kZXB0aFBhY2tpbmcgfHwgMCxcblxuXHRcdFx0aW5kZXgwQXR0cmlidXRlTmFtZTogbWF0ZXJpYWwuaW5kZXgwQXR0cmlidXRlTmFtZSxcblxuXHRcdFx0ZXh0ZW5zaW9uQ2xpcEN1bGxEaXN0YW5jZTogSEFTX0VYVEVOU0lPTlMgJiYgbWF0ZXJpYWwuZXh0ZW5zaW9ucy5jbGlwQ3VsbERpc3RhbmNlID09PSB0cnVlICYmIGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfY2xpcF9jdWxsX2Rpc3RhbmNlJyApLFxuXHRcdFx0ZXh0ZW5zaW9uTXVsdGlEcmF3OiAoIEhBU19FWFRFTlNJT05TICYmIG1hdGVyaWFsLmV4dGVuc2lvbnMubXVsdGlEcmF3ID09PSB0cnVlIHx8IElTX0JBVENIRURNRVNIICkgJiYgZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aV9kcmF3JyApLFxuXG5cdFx0XHRyZW5kZXJlckV4dGVuc2lvblBhcmFsbGVsU2hhZGVyQ29tcGlsZTogZXh0ZW5zaW9ucy5oYXMoICdLSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGUnICksXG5cblx0XHRcdGN1c3RvbVByb2dyYW1DYWNoZUtleTogbWF0ZXJpYWwuY3VzdG9tUHJvZ3JhbUNhY2hlS2V5KClcblxuXHRcdH07XG5cblx0XHQvLyB0aGUgdXNhZ2Ugb2YgZ2V0Q2hhbm5lbCgpIGRldGVybWluZXMgdGhlIGFjdGl2ZSB0ZXh0dXJlIGNoYW5uZWxzIGZvciB0aGlzIHNoYWRlclxuXG5cdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdjFzID0gX2FjdGl2ZUNoYW5uZWxzLmhhcyggMSApO1xuXHRcdHBhcmFtZXRlcnMudmVydGV4VXYycyA9IF9hY3RpdmVDaGFubmVscy5oYXMoIDIgKTtcblx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2M3MgPSBfYWN0aXZlQ2hhbm5lbHMuaGFzKCAzICk7XG5cblx0XHRfYWN0aXZlQ2hhbm5lbHMuY2xlYXIoKTtcblxuXHRcdHJldHVybiBwYXJhbWV0ZXJzO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQcm9ncmFtQ2FjaGVLZXkoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICkge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoYWRlcklEICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbVZlcnRleFNoYWRlcklEICk7XG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbUZyYWdtZW50U2hhZGVySUQgKTtcblxuXHRcdH1cblxuXHRcdGlmICggcGFyYW1ldGVycy5kZWZpbmVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gcGFyYW1ldGVycy5kZWZpbmVzICkge1xuXG5cdFx0XHRcdGFycmF5LnB1c2goIG5hbWUgKTtcblx0XHRcdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5kZWZpbmVzWyBuYW1lIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmlzUmF3U2hhZGVyTWF0ZXJpYWwgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnZXRQcm9ncmFtQ2FjaGVLZXlQYXJhbWV0ZXJzKCBhcnJheSwgcGFyYW1ldGVycyApO1xuXHRcdFx0Z2V0UHJvZ3JhbUNhY2hlS2V5Qm9vbGVhbnMoIGFycmF5LCBwYXJhbWV0ZXJzICk7XG5cdFx0XHRhcnJheS5wdXNoKCByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlICk7XG5cblx0XHR9XG5cblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbVByb2dyYW1DYWNoZUtleSApO1xuXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbUNhY2hlS2V5UGFyYW1ldGVycyggYXJyYXksIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMub3V0cHV0Q29sb3JTcGFjZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZW52TWFwTW9kZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZW52TWFwQ3ViZVVWSGVpZ2h0ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5tYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYWxwaGFNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubGlnaHRNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYW9NYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYnVtcE1hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5ub3JtYWxNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5yb3VnaG5lc3NNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYW5pc290cm9weU1hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5jbGVhcmNvYXRNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmNsZWFyY29hdFJvdWdobmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5pcmlkZXNjZW5jZU1hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuc3BlY3VsYXJJbnRlbnNpdHlNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnRoaWNrbmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5jb21iaW5lICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5mb2dFeHAyICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5zaXplQXR0ZW51YXRpb24gKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0c0NvdW50ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5tb3JwaEF0dHJpYnV0ZUNvdW50ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1EaXJMaWdodHMgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bVBvaW50TGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1TcG90TGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1TcG90TGlnaHRNYXBzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1IZW1pTGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1SZWN0QXJlYUxpZ2h0cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRTaGFkb3dzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0U2hhZG93cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1MaWdodFByb2JlcyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5kZXB0aFBhY2tpbmcgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbUNhY2hlS2V5Qm9vbGVhbnMoIGFycmF5LCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0X3Byb2dyYW1MYXllcnMuZGlzYWJsZUFsbCgpO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAwICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmluc3RhbmNpbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmluc3RhbmNpbmdDb2xvciApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuaW5zdGFuY2luZ01vcnBoIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tYXRjYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA0ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubm9ybWFsTWFwT2JqZWN0U3BhY2UgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA2ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm5vcm1hbE1hcFRhbmdlbnRTcGFjZSApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuY2xlYXJjb2F0IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5pcmlkZXNjZW5jZSApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDkgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYWxwaGFUZXN0IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4Q29sb3JzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTEgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4QWxwaGFzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4VXYxcyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEzICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnZlcnRleFV2MnMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNCApO1xuXHRcdGlmICggcGFyYW1ldGVycy52ZXJ0ZXhVdjNzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5hbmlzb3Ryb3B5IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYWxwaGFIYXNoIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTggKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYmF0Y2hpbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxOSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5kaXNwZXJzaW9uIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYmF0Y2hpbmdDb2xvciApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIxICk7XG5cblx0XHRhcnJheS5wdXNoKCBfcHJvZ3JhbUxheWVycy5tYXNrICk7XG5cdFx0X3Byb2dyYW1MYXllcnMuZGlzYWJsZUFsbCgpO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmZvZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudXNlRm9nIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5mbGF0U2hhZGluZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDMgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuc2tpbm5pbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA0ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubW9ycGhOb3JtYWxzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tb3JwaENvbG9ycyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5kb3VibGVTaWRlZCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEwICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmZsaXBTaWRlZCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDExICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnVzZURlcHRoUGFja2luZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEyICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmRpdGhlcmluZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEzICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbiApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDE0ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoZWVuIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMub3BhcXVlIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTYgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMucG9pbnRzVXZzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZGVjb2RlVmlkZW9UZXh0dXJlIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTggKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYWxwaGFUb0NvdmVyYWdlIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTkgKTtcblxuXHRcdGFycmF5LnB1c2goIF9wcm9ncmFtTGF5ZXJzLm1hc2sgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VW5pZm9ybXMoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3Qgc2hhZGVySUQgPSBzaGFkZXJJRHNbIG1hdGVyaWFsLnR5cGUgXTtcblx0XHRsZXQgdW5pZm9ybXM7XG5cblx0XHRpZiAoIHNoYWRlcklEICkge1xuXG5cdFx0XHRjb25zdCBzaGFkZXIgPSBTaGFkZXJMaWJbIHNoYWRlcklEIF07XG5cdFx0XHR1bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMuY2xvbmUoIHNoYWRlci51bmlmb3JtcyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dW5pZm9ybXMgPSBtYXRlcmlhbC51bmlmb3JtcztcblxuXHRcdH1cblxuXHRcdHJldHVybiB1bmlmb3JtcztcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWNxdWlyZVByb2dyYW0oIHBhcmFtZXRlcnMsIGNhY2hlS2V5ICkge1xuXG5cdFx0bGV0IHByb2dyYW07XG5cblx0XHQvLyBDaGVjayBpZiBjb2RlIGhhcyBiZWVuIGFscmVhZHkgY29tcGlsZWRcblx0XHRmb3IgKCBsZXQgcCA9IDAsIHBsID0gcHJvZ3JhbXMubGVuZ3RoOyBwIDwgcGw7IHAgKysgKSB7XG5cblx0XHRcdGNvbnN0IHByZWV4aXN0aW5nUHJvZ3JhbSA9IHByb2dyYW1zWyBwIF07XG5cblx0XHRcdGlmICggcHJlZXhpc3RpbmdQcm9ncmFtLmNhY2hlS2V5ID09PSBjYWNoZUtleSApIHtcblxuXHRcdFx0XHRwcm9ncmFtID0gcHJlZXhpc3RpbmdQcm9ncmFtO1xuXHRcdFx0XHQrKyBwcm9ncmFtLnVzZWRUaW1lcztcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwcm9ncmFtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHByb2dyYW0gPSBuZXcgV2ViR0xQcm9ncmFtKCByZW5kZXJlciwgY2FjaGVLZXksIHBhcmFtZXRlcnMsIGJpbmRpbmdTdGF0ZXMgKTtcblx0XHRcdHByb2dyYW1zLnB1c2goIHByb2dyYW0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwcm9ncmFtO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWxlYXNlUHJvZ3JhbSggcHJvZ3JhbSApIHtcblxuXHRcdGlmICggLS0gcHJvZ3JhbS51c2VkVGltZXMgPT09IDAgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBmcm9tIHVub3JkZXJlZCBzZXRcblx0XHRcdGNvbnN0IGkgPSBwcm9ncmFtcy5pbmRleE9mKCBwcm9ncmFtICk7XG5cdFx0XHRwcm9ncmFtc1sgaSBdID0gcHJvZ3JhbXNbIHByb2dyYW1zLmxlbmd0aCAtIDEgXTtcblx0XHRcdHByb2dyYW1zLnBvcCgpO1xuXG5cdFx0XHQvLyBGcmVlIFdlYkdMIHJlc291cmNlc1xuXHRcdFx0cHJvZ3JhbS5kZXN0cm95KCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VTaGFkZXJDYWNoZSggbWF0ZXJpYWwgKSB7XG5cblx0XHRfY3VzdG9tU2hhZGVycy5yZW1vdmUoIG1hdGVyaWFsICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRfY3VzdG9tU2hhZGVycy5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0UGFyYW1ldGVyczogZ2V0UGFyYW1ldGVycyxcblx0XHRnZXRQcm9ncmFtQ2FjaGVLZXk6IGdldFByb2dyYW1DYWNoZUtleSxcblx0XHRnZXRVbmlmb3JtczogZ2V0VW5pZm9ybXMsXG5cdFx0YWNxdWlyZVByb2dyYW06IGFjcXVpcmVQcm9ncmFtLFxuXHRcdHJlbGVhc2VQcm9ncmFtOiByZWxlYXNlUHJvZ3JhbSxcblx0XHRyZWxlYXNlU2hhZGVyQ2FjaGU6IHJlbGVhc2VTaGFkZXJDYWNoZSxcblx0XHQvLyBFeHBvc2VkIGZvciByZXNvdXJjZSBtb25pdG9yaW5nICYgZXJyb3IgZmVlZGJhY2sgdmlhIHJlbmRlcmVyLmluZm86XG5cdFx0cHJvZ3JhbXM6IHByb2dyYW1zLFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2Vcblx0fTtcblxufVxuXG5leHBvcnQgeyBXZWJHTFByb2dyYW1zIH07XG4iLCJmdW5jdGlvbiBXZWJHTFByb3BlcnRpZXMoKSB7XG5cblx0bGV0IHByb3BlcnRpZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGZ1bmN0aW9uIGdldCggb2JqZWN0ICkge1xuXG5cdFx0bGV0IG1hcCA9IHByb3BlcnRpZXMuZ2V0KCBvYmplY3QgKTtcblxuXHRcdGlmICggbWFwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG1hcCA9IHt9O1xuXHRcdFx0cHJvcGVydGllcy5zZXQoIG9iamVjdCwgbWFwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWFwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW1vdmUoIG9iamVjdCApIHtcblxuXHRcdHByb3BlcnRpZXMuZGVsZXRlKCBvYmplY3QgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QsIGtleSwgdmFsdWUgKSB7XG5cblx0XHRwcm9wZXJ0aWVzLmdldCggb2JqZWN0IClbIGtleSBdID0gdmFsdWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRwcm9wZXJ0aWVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRyZW1vdmU6IHJlbW92ZSxcblx0XHR1cGRhdGU6IHVwZGF0ZSxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuXG5leHBvcnQgeyBXZWJHTFByb3BlcnRpZXMgfTtcbiIsImZ1bmN0aW9uIHBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5ncm91cE9yZGVyICE9PSBiLmdyb3VwT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5ncm91cE9yZGVyIC0gYi5ncm91cE9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS5tYXRlcmlhbC5pZCAhPT0gYi5tYXRlcmlhbC5pZCApIHtcblxuXHRcdHJldHVybiBhLm1hdGVyaWFsLmlkIC0gYi5tYXRlcmlhbC5pZDtcblxuXHR9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHtcblxuXHRcdHJldHVybiBhLnogLSBiLno7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBhLmlkIC0gYi5pZDtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5ncm91cE9yZGVyICE9PSBiLmdyb3VwT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5ncm91cE9yZGVyIC0gYi5ncm91cE9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYi56IC0gYS56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJMaXN0KCkge1xuXG5cdGNvbnN0IHJlbmRlckl0ZW1zID0gW107XG5cdGxldCByZW5kZXJJdGVtc0luZGV4ID0gMDtcblxuXHRjb25zdCBvcGFxdWUgPSBbXTtcblx0Y29uc3QgdHJhbnNtaXNzaXZlID0gW107XG5cdGNvbnN0IHRyYW5zcGFyZW50ID0gW107XG5cblx0ZnVuY3Rpb24gaW5pdCgpIHtcblxuXHRcdHJlbmRlckl0ZW1zSW5kZXggPSAwO1xuXG5cdFx0b3BhcXVlLmxlbmd0aCA9IDA7XG5cdFx0dHJhbnNtaXNzaXZlLmxlbmd0aCA9IDA7XG5cdFx0dHJhbnNwYXJlbnQubGVuZ3RoID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHtcblxuXHRcdGxldCByZW5kZXJJdGVtID0gcmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXTtcblxuXHRcdGlmICggcmVuZGVySXRlbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZW5kZXJJdGVtID0ge1xuXHRcdFx0XHRpZDogb2JqZWN0LmlkLFxuXHRcdFx0XHRvYmplY3Q6IG9iamVjdCxcblx0XHRcdFx0Z2VvbWV0cnk6IGdlb21ldHJ5LFxuXHRcdFx0XHRtYXRlcmlhbDogbWF0ZXJpYWwsXG5cdFx0XHRcdGdyb3VwT3JkZXI6IGdyb3VwT3JkZXIsXG5cdFx0XHRcdHJlbmRlck9yZGVyOiBvYmplY3QucmVuZGVyT3JkZXIsXG5cdFx0XHRcdHo6IHosXG5cdFx0XHRcdGdyb3VwOiBncm91cFxuXHRcdFx0fTtcblxuXHRcdFx0cmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXSA9IHJlbmRlckl0ZW07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJJdGVtLmlkID0gb2JqZWN0LmlkO1xuXHRcdFx0cmVuZGVySXRlbS5vYmplY3QgPSBvYmplY3Q7XG5cdFx0XHRyZW5kZXJJdGVtLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cdFx0XHRyZW5kZXJJdGVtLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwT3JkZXIgPSBncm91cE9yZGVyO1xuXHRcdFx0cmVuZGVySXRlbS5yZW5kZXJPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcblx0XHRcdHJlbmRlckl0ZW0ueiA9IHo7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gZ3JvdXA7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJJdGVtc0luZGV4ICsrO1xuXG5cdFx0cmV0dXJuIHJlbmRlckl0ZW07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHtcblxuXHRcdGNvbnN0IHJlbmRlckl0ZW0gPSBnZXROZXh0UmVuZGVySXRlbSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIHosIGdyb3VwICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAuMCApIHtcblxuXHRcdFx0dHJhbnNtaXNzaXZlLnB1c2goIHJlbmRlckl0ZW0gKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICkge1xuXG5cdFx0XHR0cmFuc3BhcmVudC5wdXNoKCByZW5kZXJJdGVtICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRvcGFxdWUucHVzaCggcmVuZGVySXRlbSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1bnNoaWZ0KCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7XG5cblx0XHRjb25zdCByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwLjAgKSB7XG5cblx0XHRcdHRyYW5zbWlzc2l2ZS51bnNoaWZ0KCByZW5kZXJJdGVtICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dHJhbnNwYXJlbnQudW5zaGlmdCggcmVuZGVySXRlbSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0b3BhcXVlLnVuc2hpZnQoIHJlbmRlckl0ZW0gKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc29ydCggY3VzdG9tT3BhcXVlU29ydCwgY3VzdG9tVHJhbnNwYXJlbnRTb3J0ICkge1xuXG5cdFx0aWYgKCBvcGFxdWUubGVuZ3RoID4gMSApIG9wYXF1ZS5zb3J0KCBjdXN0b21PcGFxdWVTb3J0IHx8IHBhaW50ZXJTb3J0U3RhYmxlICk7XG5cdFx0aWYgKCB0cmFuc21pc3NpdmUubGVuZ3RoID4gMSApIHRyYW5zbWlzc2l2ZS5zb3J0KCBjdXN0b21UcmFuc3BhcmVudFNvcnQgfHwgcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlICk7XG5cdFx0aWYgKCB0cmFuc3BhcmVudC5sZW5ndGggPiAxICkgdHJhbnNwYXJlbnQuc29ydCggY3VzdG9tVHJhbnNwYXJlbnRTb3J0IHx8IHJldmVyc2VQYWludGVyU29ydFN0YWJsZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBmaW5pc2goKSB7XG5cblx0XHQvLyBDbGVhciByZWZlcmVuY2VzIGZyb20gaW5hY3RpdmUgcmVuZGVySXRlbXMgaW4gdGhlIGxpc3RcblxuXHRcdGZvciAoIGxldCBpID0gcmVuZGVySXRlbXNJbmRleCwgaWwgPSByZW5kZXJJdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcmVuZGVySXRlbSA9IHJlbmRlckl0ZW1zWyBpIF07XG5cblx0XHRcdGlmICggcmVuZGVySXRlbS5pZCA9PT0gbnVsbCApIGJyZWFrO1xuXG5cdFx0XHRyZW5kZXJJdGVtLmlkID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0ub2JqZWN0ID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0uZ2VvbWV0cnkgPSBudWxsO1xuXHRcdFx0cmVuZGVySXRlbS5tYXRlcmlhbCA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdG9wYXF1ZTogb3BhcXVlLFxuXHRcdHRyYW5zbWlzc2l2ZTogdHJhbnNtaXNzaXZlLFxuXHRcdHRyYW5zcGFyZW50OiB0cmFuc3BhcmVudCxcblxuXHRcdGluaXQ6IGluaXQsXG5cdFx0cHVzaDogcHVzaCxcblx0XHR1bnNoaWZ0OiB1bnNoaWZ0LFxuXHRcdGZpbmlzaDogZmluaXNoLFxuXG5cdFx0c29ydDogc29ydFxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyTGlzdHMoKSB7XG5cblx0bGV0IGxpc3RzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCByZW5kZXJDYWxsRGVwdGggKSB7XG5cblx0XHRjb25zdCBsaXN0QXJyYXkgPSBsaXN0cy5nZXQoIHNjZW5lICk7XG5cdFx0bGV0IGxpc3Q7XG5cblx0XHRpZiAoIGxpc3RBcnJheSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsaXN0ID0gbmV3IFdlYkdMUmVuZGVyTGlzdCgpO1xuXHRcdFx0bGlzdHMuc2V0KCBzY2VuZSwgWyBsaXN0IF0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggcmVuZGVyQ2FsbERlcHRoID49IGxpc3RBcnJheS5sZW5ndGggKSB7XG5cblx0XHRcdFx0bGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTtcblx0XHRcdFx0bGlzdEFycmF5LnB1c2goIGxpc3QgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRsaXN0ID0gbGlzdEFycmF5WyByZW5kZXJDYWxsRGVwdGggXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxpc3Q7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRsaXN0cyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cblxuZXhwb3J0IHsgV2ViR0xSZW5kZXJMaXN0cywgV2ViR0xSZW5kZXJMaXN0IH07XG4iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uL21hdGgvQ29sb3IuanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uLy4uL21hdGgvTWF0cml4NC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgVW5pZm9ybXNMaWIgfSBmcm9tICcuLi9zaGFkZXJzL1VuaWZvcm1zTGliLmpzJztcblxuZnVuY3Rpb24gVW5pZm9ybXNDYWNoZSgpIHtcblxuXHRjb25zdCBsaWdodHMgPSB7fTtcblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoIGxpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIGxpZ2h0c1sgbGlnaHQuaWQgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBsaWdodHNbIGxpZ2h0LmlkIF07XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IHVuaWZvcm1zO1xuXG5cdFx0XHRzd2l0Y2ggKCBsaWdodC50eXBlICkge1xuXG5cdFx0XHRcdGNhc2UgJ0RpcmVjdGlvbmFsTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdTcG90TGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0cG9zaXRpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogMCxcblx0XHRcdFx0XHRcdGNvbmVDb3M6IDAsXG5cdFx0XHRcdFx0XHRwZW51bWJyYUNvczogMCxcblx0XHRcdFx0XHRcdGRlY2F5OiAwXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQb2ludExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IDAsXG5cdFx0XHRcdFx0XHRkZWNheTogMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnSGVtaXNwaGVyZUxpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdHNreUNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdGdyb3VuZENvbG9yOiBuZXcgQ29sb3IoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUmVjdEFyZWFMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGhhbGZXaWR0aDogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGhhbGZIZWlnaHQ6IG5ldyBWZWN0b3IzKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxpZ2h0c1sgbGlnaHQuaWQgXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRyZXR1cm4gdW5pZm9ybXM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBTaGFkb3dVbmlmb3Jtc0NhY2hlKCkge1xuXG5cdGNvbnN0IGxpZ2h0cyA9IHt9O1xuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbGlnaHQgKSB7XG5cblx0XHRcdGlmICggbGlnaHRzWyBsaWdodC5pZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGxpZ2h0c1sgbGlnaHQuaWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgdW5pZm9ybXM7XG5cblx0XHRcdHN3aXRjaCAoIGxpZ2h0LnR5cGUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRzaGFkb3dJbnRlbnNpdHk6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93Tm9ybWFsQmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd1JhZGl1czogMSxcblx0XHRcdFx0XHRcdHNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1Nwb3RMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRzaGFkb3dJbnRlbnNpdHk6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93Tm9ybWFsQmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd1JhZGl1czogMSxcblx0XHRcdFx0XHRcdHNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1BvaW50TGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0c2hhZG93SW50ZW5zaXR5OiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpLFxuXHRcdFx0XHRcdFx0c2hhZG93Q2FtZXJhTmVhcjogMSxcblx0XHRcdFx0XHRcdHNoYWRvd0NhbWVyYUZhcjogMTAwMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IHNldCBSZWN0QXJlYUxpZ2h0IHNoYWRvdyB1bmlmb3Jtc1xuXG5cdFx0XHR9XG5cblx0XHRcdGxpZ2h0c1sgbGlnaHQuaWQgXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRyZXR1cm4gdW5pZm9ybXM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG5cblxubGV0IG5leHRWZXJzaW9uID0gMDtcblxuZnVuY3Rpb24gc2hhZG93Q2FzdGluZ0FuZFRleHR1cmluZ0xpZ2h0c0ZpcnN0KCBsaWdodEEsIGxpZ2h0QiApIHtcblxuXHRyZXR1cm4gKCBsaWdodEIuY2FzdFNoYWRvdyA/IDIgOiAwICkgLSAoIGxpZ2h0QS5jYXN0U2hhZG93ID8gMiA6IDAgKSArICggbGlnaHRCLm1hcCA/IDEgOiAwICkgLSAoIGxpZ2h0QS5tYXAgPyAxIDogMCApO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMTGlnaHRzKCBleHRlbnNpb25zICkge1xuXG5cdGNvbnN0IGNhY2hlID0gbmV3IFVuaWZvcm1zQ2FjaGUoKTtcblxuXHRjb25zdCBzaGFkb3dDYWNoZSA9IFNoYWRvd1VuaWZvcm1zQ2FjaGUoKTtcblxuXHRjb25zdCBzdGF0ZSA9IHtcblxuXHRcdHZlcnNpb246IDAsXG5cblx0XHRoYXNoOiB7XG5cdFx0XHRkaXJlY3Rpb25hbExlbmd0aDogLSAxLFxuXHRcdFx0cG9pbnRMZW5ndGg6IC0gMSxcblx0XHRcdHNwb3RMZW5ndGg6IC0gMSxcblx0XHRcdHJlY3RBcmVhTGVuZ3RoOiAtIDEsXG5cdFx0XHRoZW1pTGVuZ3RoOiAtIDEsXG5cblx0XHRcdG51bURpcmVjdGlvbmFsU2hhZG93czogLSAxLFxuXHRcdFx0bnVtUG9pbnRTaGFkb3dzOiAtIDEsXG5cdFx0XHRudW1TcG90U2hhZG93czogLSAxLFxuXHRcdFx0bnVtU3BvdE1hcHM6IC0gMSxcblxuXHRcdFx0bnVtTGlnaHRQcm9iZXM6IC0gMVxuXHRcdH0sXG5cblx0XHRhbWJpZW50OiBbIDAsIDAsIDAgXSxcblx0XHRwcm9iZTogW10sXG5cdFx0ZGlyZWN0aW9uYWw6IFtdLFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93OiBbXSxcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hcDogW10sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6IFtdLFxuXHRcdHNwb3Q6IFtdLFxuXHRcdHNwb3RMaWdodE1hcDogW10sXG5cdFx0c3BvdFNoYWRvdzogW10sXG5cdFx0c3BvdFNoYWRvd01hcDogW10sXG5cdFx0c3BvdExpZ2h0TWF0cml4OiBbXSxcblx0XHRyZWN0QXJlYTogW10sXG5cdFx0cmVjdEFyZWFMVEMxOiBudWxsLFxuXHRcdHJlY3RBcmVhTFRDMjogbnVsbCxcblx0XHRwb2ludDogW10sXG5cdFx0cG9pbnRTaGFkb3c6IFtdLFxuXHRcdHBvaW50U2hhZG93TWFwOiBbXSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogW10sXG5cdFx0aGVtaTogW10sXG5cdFx0bnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzOiAwLFxuXHRcdG51bUxpZ2h0UHJvYmVzOiAwXG5cblx0fTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkgc3RhdGUucHJvYmUucHVzaCggbmV3IFZlY3RvcjMoKSApO1xuXG5cdGNvbnN0IHZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXHRjb25zdCBtYXRyaXg0ID0gbmV3IE1hdHJpeDQoKTtcblx0Y29uc3QgbWF0cml4NDIgPSBuZXcgTWF0cml4NCgpO1xuXG5cdGZ1bmN0aW9uIHNldHVwKCBsaWdodHMgKSB7XG5cblx0XHRsZXQgciA9IDAsIGcgPSAwLCBiID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSBzdGF0ZS5wcm9iZVsgaSBdLnNldCggMCwgMCwgMCApO1xuXG5cdFx0bGV0IGRpcmVjdGlvbmFsTGVuZ3RoID0gMDtcblx0XHRsZXQgcG9pbnRMZW5ndGggPSAwO1xuXHRcdGxldCBzcG90TGVuZ3RoID0gMDtcblx0XHRsZXQgcmVjdEFyZWFMZW5ndGggPSAwO1xuXHRcdGxldCBoZW1pTGVuZ3RoID0gMDtcblxuXHRcdGxldCBudW1EaXJlY3Rpb25hbFNoYWRvd3MgPSAwO1xuXHRcdGxldCBudW1Qb2ludFNoYWRvd3MgPSAwO1xuXHRcdGxldCBudW1TcG90U2hhZG93cyA9IDA7XG5cdFx0bGV0IG51bVNwb3RNYXBzID0gMDtcblx0XHRsZXQgbnVtU3BvdFNoYWRvd3NXaXRoTWFwcyA9IDA7XG5cblx0XHRsZXQgbnVtTGlnaHRQcm9iZXMgPSAwO1xuXG5cdFx0Ly8gb3JkZXJpbmcgOiBbc2hhZG93IGNhc3RpbmcgKyBtYXAgdGV4dHVyaW5nLCBtYXAgdGV4dHVyaW5nLCBzaGFkb3cgY2FzdGluZywgbm9uZSBdXG5cdFx0bGlnaHRzLnNvcnQoIHNoYWRvd0Nhc3RpbmdBbmRUZXh0dXJpbmdMaWdodHNGaXJzdCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGxpZ2h0ID0gbGlnaHRzWyBpIF07XG5cblx0XHRcdGNvbnN0IGNvbG9yID0gbGlnaHQuY29sb3I7XG5cdFx0XHRjb25zdCBpbnRlbnNpdHkgPSBsaWdodC5pbnRlbnNpdHk7XG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXG5cdFx0XHRjb25zdCBzaGFkb3dNYXAgPSAoIGxpZ2h0LnNoYWRvdyAmJiBsaWdodC5zaGFkb3cubWFwICkgPyBsaWdodC5zaGFkb3cubWFwLnRleHR1cmUgOiBudWxsO1xuXG5cdFx0XHRpZiAoIGxpZ2h0LmlzQW1iaWVudExpZ2h0ICkge1xuXG5cdFx0XHRcdHIgKz0gY29sb3IuciAqIGludGVuc2l0eTtcblx0XHRcdFx0ZyArPSBjb2xvci5nICogaW50ZW5zaXR5O1xuXHRcdFx0XHRiICs9IGNvbG9yLmIgKiBpbnRlbnNpdHk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzTGlnaHRQcm9iZSApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCA5OyBqICsrICkge1xuXG5cdFx0XHRcdFx0c3RhdGUucHJvYmVbIGogXS5hZGRTY2FsZWRWZWN0b3IoIGxpZ2h0LnNoLmNvZWZmaWNpZW50c1sgaiBdLCBpbnRlbnNpdHkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bnVtTGlnaHRQcm9iZXMgKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzRGlyZWN0aW9uYWxMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3dVbmlmb3JtcyA9IHNoYWRvd0NhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0ludGVuc2l0eSA9IHNoYWRvdy5pbnRlbnNpdHk7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd05vcm1hbEJpYXMgPSBzaGFkb3cubm9ybWFsQmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblxuXHRcdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93WyBkaXJlY3Rpb25hbExlbmd0aCBdID0gc2hhZG93VW5pZm9ybXM7XG5cdFx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xuXG5cdFx0XHRcdFx0bnVtRGlyZWN0aW9uYWxTaGFkb3dzICsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29uZUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wZW51bWJyYUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSAqICggMSAtIGxpZ2h0LnBlbnVtYnJhICkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGVjYXkgPSBsaWdodC5kZWNheTtcblxuXHRcdFx0XHRzdGF0ZS5zcG90WyBzcG90TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRjb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5tYXAgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5zcG90TGlnaHRNYXBbIG51bVNwb3RNYXBzIF0gPSBsaWdodC5tYXA7XG5cdFx0XHRcdFx0bnVtU3BvdE1hcHMgKys7XG5cblx0XHRcdFx0XHQvLyBtYWtlIHN1cmUgdGhlIGxpZ2h0TWF0cml4IGlzIHVwIHRvIGRhdGVcblx0XHRcdFx0XHQvLyBUT0RPIDogZG8gaXQgaWYgcmVxdWlyZWQgb25seVxuXHRcdFx0XHRcdHNoYWRvdy51cGRhdGVNYXRyaWNlcyggbGlnaHQgKTtcblxuXHRcdFx0XHRcdGlmICggbGlnaHQuY2FzdFNoYWRvdyApIG51bVNwb3RTaGFkb3dzV2l0aE1hcHMgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLnNwb3RMaWdodE1hdHJpeFsgc3BvdExlbmd0aCBdID0gc2hhZG93Lm1hdHJpeDtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3dVbmlmb3JtcyA9IHNoYWRvd0NhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0ludGVuc2l0eSA9IHNoYWRvdy5pbnRlbnNpdHk7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd05vcm1hbEJpYXMgPSBzaGFkb3cubm9ybWFsQmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblxuXHRcdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dbIHNwb3RMZW5ndGggXSA9IHNoYWRvd1VuaWZvcm1zO1xuXHRcdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXBbIHNwb3RMZW5ndGggXSA9IHNoYWRvd01hcDtcblxuXHRcdFx0XHRcdG51bVNwb3RTaGFkb3dzICsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcG90TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1JlY3RBcmVhTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuaGFsZldpZHRoLnNldCggbGlnaHQud2lkdGggKiAwLjUsIDAuMCwgMC4wICk7XG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZIZWlnaHQuc2V0KCAwLjAsIGxpZ2h0LmhlaWdodCAqIDAuNSwgMC4wICk7XG5cblx0XHRcdFx0c3RhdGUucmVjdEFyZWFbIHJlY3RBcmVhTGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRyZWN0QXJlYUxlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGxpZ2h0LmludGVuc2l0eSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXHRcdFx0XHR1bmlmb3Jtcy5kZWNheSA9IGxpZ2h0LmRlY2F5O1xuXG5cdFx0XHRcdGlmICggbGlnaHQuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdGNvbnN0IHNoYWRvd1VuaWZvcm1zID0gc2hhZG93Q2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93SW50ZW5zaXR5ID0gc2hhZG93LmludGVuc2l0eTtcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93Tm9ybWFsQmlhcyA9IHNoYWRvdy5ub3JtYWxCaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0NhbWVyYU5lYXIgPSBzaGFkb3cuY2FtZXJhLm5lYXI7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93Q2FtZXJhRmFyID0gc2hhZG93LmNhbWVyYS5mYXI7XG5cblx0XHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd1sgcG9pbnRMZW5ndGggXSA9IHNoYWRvd1VuaWZvcm1zO1xuXHRcdFx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWFwWyBwb2ludExlbmd0aCBdID0gc2hhZG93TWFwO1xuXHRcdFx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWF0cml4WyBwb2ludExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDtcblxuXHRcdFx0XHRcdG51bVBvaW50U2hhZG93cyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUucG9pbnRbIHBvaW50TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRwb2ludExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNIZW1pc3BoZXJlTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2t5Q29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmdyb3VuZENvbG9yLmNvcHkoIGxpZ2h0Lmdyb3VuZENvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXG5cdFx0XHRcdHN0YXRlLmhlbWlbIGhlbWlMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGhlbWlMZW5ndGggKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcmVjdEFyZWFMZW5ndGggPiAwICkge1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHN0YXRlLnJlY3RBcmVhTFRDMSA9IFVuaWZvcm1zTGliLkxUQ19GTE9BVF8xO1xuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzIgPSBVbmlmb3Jtc0xpYi5MVENfRkxPQVRfMjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzEgPSBVbmlmb3Jtc0xpYi5MVENfSEFMRl8xO1xuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzIgPSBVbmlmb3Jtc0xpYi5MVENfSEFMRl8yO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hbWJpZW50WyAwIF0gPSByO1xuXHRcdHN0YXRlLmFtYmllbnRbIDEgXSA9IGc7XG5cdFx0c3RhdGUuYW1iaWVudFsgMiBdID0gYjtcblxuXHRcdGNvbnN0IGhhc2ggPSBzdGF0ZS5oYXNoO1xuXG5cdFx0aWYgKCBoYXNoLmRpcmVjdGlvbmFsTGVuZ3RoICE9PSBkaXJlY3Rpb25hbExlbmd0aCB8fFxuXHRcdFx0aGFzaC5wb2ludExlbmd0aCAhPT0gcG9pbnRMZW5ndGggfHxcblx0XHRcdGhhc2guc3BvdExlbmd0aCAhPT0gc3BvdExlbmd0aCB8fFxuXHRcdFx0aGFzaC5yZWN0QXJlYUxlbmd0aCAhPT0gcmVjdEFyZWFMZW5ndGggfHxcblx0XHRcdGhhc2guaGVtaUxlbmd0aCAhPT0gaGVtaUxlbmd0aCB8fFxuXHRcdFx0aGFzaC5udW1EaXJlY3Rpb25hbFNoYWRvd3MgIT09IG51bURpcmVjdGlvbmFsU2hhZG93cyB8fFxuXHRcdFx0aGFzaC5udW1Qb2ludFNoYWRvd3MgIT09IG51bVBvaW50U2hhZG93cyB8fFxuXHRcdFx0aGFzaC5udW1TcG90U2hhZG93cyAhPT0gbnVtU3BvdFNoYWRvd3MgfHxcblx0XHRcdGhhc2gubnVtU3BvdE1hcHMgIT09IG51bVNwb3RNYXBzIHx8XG5cdFx0XHRoYXNoLm51bUxpZ2h0UHJvYmVzICE9PSBudW1MaWdodFByb2JlcyApIHtcblxuXHRcdFx0c3RhdGUuZGlyZWN0aW9uYWwubGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0XHRzdGF0ZS5zcG90Lmxlbmd0aCA9IHNwb3RMZW5ndGg7XG5cdFx0XHRzdGF0ZS5yZWN0QXJlYS5sZW5ndGggPSByZWN0QXJlYUxlbmd0aDtcblx0XHRcdHN0YXRlLnBvaW50Lmxlbmd0aCA9IHBvaW50TGVuZ3RoO1xuXHRcdFx0c3RhdGUuaGVtaS5sZW5ndGggPSBoZW1pTGVuZ3RoO1xuXG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvdy5sZW5ndGggPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcC5sZW5ndGggPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvdy5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcC5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5zcG90U2hhZG93Lmxlbmd0aCA9IG51bVNwb3RTaGFkb3dzO1xuXHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hcC5sZW5ndGggPSBudW1TcG90U2hhZG93cztcblx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93cztcblx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bVBvaW50U2hhZG93cztcblx0XHRcdHN0YXRlLnNwb3RMaWdodE1hdHJpeC5sZW5ndGggPSBudW1TcG90U2hhZG93cyArIG51bVNwb3RNYXBzIC0gbnVtU3BvdFNoYWRvd3NXaXRoTWFwcztcblx0XHRcdHN0YXRlLnNwb3RMaWdodE1hcC5sZW5ndGggPSBudW1TcG90TWFwcztcblx0XHRcdHN0YXRlLm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcyA9IG51bVNwb3RTaGFkb3dzV2l0aE1hcHM7XG5cdFx0XHRzdGF0ZS5udW1MaWdodFByb2JlcyA9IG51bUxpZ2h0UHJvYmVzO1xuXG5cdFx0XHRoYXNoLmRpcmVjdGlvbmFsTGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0XHRoYXNoLnBvaW50TGVuZ3RoID0gcG9pbnRMZW5ndGg7XG5cdFx0XHRoYXNoLnNwb3RMZW5ndGggPSBzcG90TGVuZ3RoO1xuXHRcdFx0aGFzaC5yZWN0QXJlYUxlbmd0aCA9IHJlY3RBcmVhTGVuZ3RoO1xuXHRcdFx0aGFzaC5oZW1pTGVuZ3RoID0gaGVtaUxlbmd0aDtcblxuXHRcdFx0aGFzaC5udW1EaXJlY3Rpb25hbFNoYWRvd3MgPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRoYXNoLm51bVBvaW50U2hhZG93cyA9IG51bVBvaW50U2hhZG93cztcblx0XHRcdGhhc2gubnVtU3BvdFNoYWRvd3MgPSBudW1TcG90U2hhZG93cztcblx0XHRcdGhhc2gubnVtU3BvdE1hcHMgPSBudW1TcG90TWFwcztcblxuXHRcdFx0aGFzaC5udW1MaWdodFByb2JlcyA9IG51bUxpZ2h0UHJvYmVzO1xuXG5cdFx0XHRzdGF0ZS52ZXJzaW9uID0gbmV4dFZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwVmlldyggbGlnaHRzLCBjYW1lcmEgKSB7XG5cblx0XHRsZXQgZGlyZWN0aW9uYWxMZW5ndGggPSAwO1xuXHRcdGxldCBwb2ludExlbmd0aCA9IDA7XG5cdFx0bGV0IHNwb3RMZW5ndGggPSAwO1xuXHRcdGxldCByZWN0QXJlYUxlbmd0aCA9IDA7XG5cdFx0bGV0IGhlbWlMZW5ndGggPSAwO1xuXG5cdFx0Y29uc3Qgdmlld01hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBsaWdodHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgbGlnaHQgPSBsaWdodHNbIGkgXTtcblxuXHRcdFx0aWYgKCBsaWdodC5pc0RpcmVjdGlvbmFsTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zdWIoIHZlY3RvcjMgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IHN0YXRlLnNwb3RbIHNwb3RMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnN1YiggdmVjdG9yMyApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0c3BvdExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNSZWN0QXJlYUxpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gc3RhdGUucmVjdEFyZWFbIHJlY3RBcmVhTGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHQvLyBleHRyYWN0IGxvY2FsIHJvdGF0aW9uIG9mIGxpZ2h0IHRvIGRlcml2ZSB3aWR0aC9oZWlnaHQgaGFsZiB2ZWN0b3JzXG5cdFx0XHRcdG1hdHJpeDQyLmlkZW50aXR5KCk7XG5cdFx0XHRcdG1hdHJpeDQuY29weSggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0bWF0cml4NC5wcmVtdWx0aXBseSggdmlld01hdHJpeCApO1xuXHRcdFx0XHRtYXRyaXg0Mi5leHRyYWN0Um90YXRpb24oIG1hdHJpeDQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguc2V0KCBsaWdodC53aWR0aCAqIDAuNSwgMC4wLCAwLjAgKTtcblx0XHRcdFx0dW5pZm9ybXMuaGFsZkhlaWdodC5zZXQoIDAuMCwgbGlnaHQuaGVpZ2h0ICogMC41LCAwLjAgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguYXBwbHlNYXRyaXg0KCBtYXRyaXg0MiApO1xuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmSGVpZ2h0LmFwcGx5TWF0cml4NCggbWF0cml4NDIgKTtcblxuXHRcdFx0XHRyZWN0QXJlYUxlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gc3RhdGUucG9pbnRbIHBvaW50TGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHRwb2ludExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNIZW1pc3BoZXJlTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5oZW1pWyBoZW1pTGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGhlbWlMZW5ndGggKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzZXR1cDogc2V0dXAsXG5cdFx0c2V0dXBWaWV3OiBzZXR1cFZpZXcsXG5cdFx0c3RhdGU6IHN0YXRlXG5cdH07XG5cbn1cblxuXG5leHBvcnQgeyBXZWJHTExpZ2h0cyB9O1xuIiwiaW1wb3J0IHsgV2ViR0xMaWdodHMgfSBmcm9tICcuL1dlYkdMTGlnaHRzLmpzJztcblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJTdGF0ZSggZXh0ZW5zaW9ucyApIHtcblxuXHRjb25zdCBsaWdodHMgPSBuZXcgV2ViR0xMaWdodHMoIGV4dGVuc2lvbnMgKTtcblxuXHRjb25zdCBsaWdodHNBcnJheSA9IFtdO1xuXHRjb25zdCBzaGFkb3dzQXJyYXkgPSBbXTtcblxuXHRmdW5jdGlvbiBpbml0KCBjYW1lcmEgKSB7XG5cblx0XHRzdGF0ZS5jYW1lcmEgPSBjYW1lcmE7XG5cblx0XHRsaWdodHNBcnJheS5sZW5ndGggPSAwO1xuXHRcdHNoYWRvd3NBcnJheS5sZW5ndGggPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoTGlnaHQoIGxpZ2h0ICkge1xuXG5cdFx0bGlnaHRzQXJyYXkucHVzaCggbGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaFNoYWRvdyggc2hhZG93TGlnaHQgKSB7XG5cblx0XHRzaGFkb3dzQXJyYXkucHVzaCggc2hhZG93TGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBMaWdodHMoKSB7XG5cblx0XHRsaWdodHMuc2V0dXAoIGxpZ2h0c0FycmF5ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwTGlnaHRzVmlldyggY2FtZXJhICkge1xuXG5cdFx0bGlnaHRzLnNldHVwVmlldyggbGlnaHRzQXJyYXksIGNhbWVyYSApO1xuXG5cdH1cblxuXHRjb25zdCBzdGF0ZSA9IHtcblx0XHRsaWdodHNBcnJheTogbGlnaHRzQXJyYXksXG5cdFx0c2hhZG93c0FycmF5OiBzaGFkb3dzQXJyYXksXG5cblx0XHRjYW1lcmE6IG51bGwsXG5cblx0XHRsaWdodHM6IGxpZ2h0cyxcblxuXHRcdHRyYW5zbWlzc2lvblJlbmRlclRhcmdldDoge31cblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXQsXG5cdFx0c3RhdGU6IHN0YXRlLFxuXHRcdHNldHVwTGlnaHRzOiBzZXR1cExpZ2h0cyxcblx0XHRzZXR1cExpZ2h0c1ZpZXc6IHNldHVwTGlnaHRzVmlldyxcblxuXHRcdHB1c2hMaWdodDogcHVzaExpZ2h0LFxuXHRcdHB1c2hTaGFkb3c6IHB1c2hTaGFkb3dcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFJlbmRlclN0YXRlcyggZXh0ZW5zaW9ucyApIHtcblxuXHRsZXQgcmVuZGVyU3RhdGVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCByZW5kZXJDYWxsRGVwdGggPSAwICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyU3RhdGVBcnJheSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lICk7XG5cdFx0bGV0IHJlbmRlclN0YXRlO1xuXG5cdFx0aWYgKCByZW5kZXJTdGF0ZUFycmF5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoIGV4dGVuc2lvbnMgKTtcblx0XHRcdHJlbmRlclN0YXRlcy5zZXQoIHNjZW5lLCBbIHJlbmRlclN0YXRlIF0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggcmVuZGVyQ2FsbERlcHRoID49IHJlbmRlclN0YXRlQXJyYXkubGVuZ3RoICkge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoIGV4dGVuc2lvbnMgKTtcblx0XHRcdFx0cmVuZGVyU3RhdGVBcnJheS5wdXNoKCByZW5kZXJTdGF0ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVBcnJheVsgcmVuZGVyQ2FsbERlcHRoIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiByZW5kZXJTdGF0ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHJlbmRlclN0YXRlcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cblxuZXhwb3J0IHsgV2ViR0xSZW5kZXJTdGF0ZXMgfTtcbiIsImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBCYXNpY0RlcHRoUGFja2luZyB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbmNsYXNzIE1lc2hEZXB0aE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNNZXNoRGVwdGhNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaERlcHRoTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5kZXB0aFBhY2tpbmcgPSBCYXNpY0RlcHRoUGFja2luZztcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5kZXB0aFBhY2tpbmcgPSBzb3VyY2UuZGVwdGhQYWNraW5nO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBNZXNoRGVwdGhNYXRlcmlhbCB9O1xuIiwiaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsLmpzJztcblxuY2xhc3MgTWVzaERpc3RhbmNlTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc01lc2hEaXN0YW5jZU1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoRGlzdGFuY2VNYXRlcmlhbCc7XG5cblx0XHR0aGlzLm1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgTWVzaERpc3RhbmNlTWF0ZXJpYWwgfTtcbiIsImltcG9ydCB7IEZyb250U2lkZSwgQmFja1NpZGUsIERvdWJsZVNpZGUsIE5lYXJlc3RGaWx0ZXIsIFBDRlNoYWRvd01hcCwgVlNNU2hhZG93TWFwLCBSR0JBRGVwdGhQYWNraW5nLCBOb0JsZW5kaW5nIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IFdlYkdMUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi4vV2ViR0xSZW5kZXJUYXJnZXQuanMnO1xuaW1wb3J0IHsgTWVzaERlcHRoTWF0ZXJpYWwgfSBmcm9tICcuLi8uLi9tYXRlcmlhbHMvTWVzaERlcHRoTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgTWVzaERpc3RhbmNlTWF0ZXJpYWwgfSBmcm9tICcuLi8uLi9tYXRlcmlhbHMvTWVzaERpc3RhbmNlTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgU2hhZGVyTWF0ZXJpYWwgfSBmcm9tICcuLi8uLi9tYXRlcmlhbHMvU2hhZGVyTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi8uLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi8uLi9vYmplY3RzL01lc2guanMnO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yNC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IEZydXN0dW0gfSBmcm9tICcuLi8uLi9tYXRoL0ZydXN0dW0uanMnO1xuXG5pbXBvcnQgKiBhcyB2c20gZnJvbSAnLi4vc2hhZGVycy9TaGFkZXJMaWIvdnNtLmdsc2wuanMnO1xuXG5mdW5jdGlvbiBXZWJHTFNoYWRvd01hcCggcmVuZGVyZXIsIG9iamVjdHMsIGNhcGFiaWxpdGllcyApIHtcblxuXHRsZXQgX2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpO1xuXG5cdGNvbnN0IF9zaGFkb3dNYXBTaXplID0gbmV3IFZlY3RvcjIoKSxcblx0XHRfdmlld3BvcnRTaXplID0gbmV3IFZlY3RvcjIoKSxcblxuXHRcdF92aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCksXG5cblx0XHRfZGVwdGhNYXRlcmlhbCA9IG5ldyBNZXNoRGVwdGhNYXRlcmlhbCggeyBkZXB0aFBhY2tpbmc6IFJHQkFEZXB0aFBhY2tpbmcgfSApLFxuXHRcdF9kaXN0YW5jZU1hdGVyaWFsID0gbmV3IE1lc2hEaXN0YW5jZU1hdGVyaWFsKCksXG5cblx0XHRfbWF0ZXJpYWxDYWNoZSA9IHt9LFxuXG5cdFx0X21heFRleHR1cmVTaXplID0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplO1xuXG5cdGNvbnN0IHNoYWRvd1NpZGUgPSB7IFsgRnJvbnRTaWRlIF06IEJhY2tTaWRlLCBbIEJhY2tTaWRlIF06IEZyb250U2lkZSwgWyBEb3VibGVTaWRlIF06IERvdWJsZVNpZGUgfTtcblxuXHRjb25zdCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsID0gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0ZGVmaW5lczoge1xuXHRcdFx0VlNNX1NBTVBMRVM6IDhcblx0XHR9LFxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRzaGFkb3dfcGFzczogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0cmVzb2x1dGlvbjogeyB2YWx1ZTogbmV3IFZlY3RvcjIoKSB9LFxuXHRcdFx0cmFkaXVzOiB7IHZhbHVlOiA0LjAgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IHZzbS52ZXJ0ZXgsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IHZzbS5mcmFnbWVudFxuXG5cdH0gKTtcblxuXHRjb25zdCBzaGFkb3dNYXRlcmlhbEhvcml6b250YWwgPSBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmNsb25lKCk7XG5cdHNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbC5kZWZpbmVzLkhPUklaT05UQUxfUEFTUyA9IDE7XG5cblx0Y29uc3QgZnVsbFNjcmVlblRyaSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRmdWxsU2NyZWVuVHJpLnNldEF0dHJpYnV0ZShcblx0XHQncG9zaXRpb24nLFxuXHRcdG5ldyBCdWZmZXJBdHRyaWJ1dGUoXG5cdFx0XHRuZXcgRmxvYXQzMkFycmF5KCBbIC0gMSwgLSAxLCAwLjUsIDMsIC0gMSwgMC41LCAtIDEsIDMsIDAuNSBdICksXG5cdFx0XHQzXG5cdFx0KVxuXHQpO1xuXG5cdGNvbnN0IGZ1bGxTY3JlZW5NZXNoID0gbmV3IE1lc2goIGZ1bGxTY3JlZW5UcmksIHNoYWRvd01hdGVyaWFsVmVydGljYWwgKTtcblxuXHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTtcblx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMudHlwZSA9IFBDRlNoYWRvd01hcDtcblx0bGV0IF9wcmV2aW91c1R5cGUgPSB0aGlzLnR5cGU7XG5cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIGxpZ2h0cywgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cdFx0aWYgKCBzY29wZS5hdXRvVXBkYXRlID09PSBmYWxzZSAmJiBzY29wZS5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRpZiAoIGxpZ2h0cy5sZW5ndGggPT09IDAgKSByZXR1cm47XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0Y29uc3QgYWN0aXZlQ3ViZUZhY2UgPSByZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpO1xuXHRcdGNvbnN0IGFjdGl2ZU1pcG1hcExldmVsID0gcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTtcblxuXHRcdGNvbnN0IF9zdGF0ZSA9IHJlbmRlcmVyLnN0YXRlO1xuXG5cdFx0Ly8gU2V0IEdMIHN0YXRlIGZvciBkZXB0aCBtYXAuXG5cdFx0X3N0YXRlLnNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICk7XG5cdFx0X3N0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIDEsIDEsIDEsIDEgKTtcblx0XHRfc3RhdGUuYnVmZmVycy5kZXB0aC5zZXRUZXN0KCB0cnVlICk7XG5cdFx0X3N0YXRlLnNldFNjaXNzb3JUZXN0KCBmYWxzZSApO1xuXG5cdFx0Ly8gY2hlY2sgZm9yIHNoYWRvdyBtYXAgdHlwZSBjaGFuZ2VzXG5cblx0XHRjb25zdCB0b1ZTTSA9ICggX3ByZXZpb3VzVHlwZSAhPT0gVlNNU2hhZG93TWFwICYmIHRoaXMudHlwZSA9PT0gVlNNU2hhZG93TWFwICk7XG5cdFx0Y29uc3QgZnJvbVZTTSA9ICggX3ByZXZpb3VzVHlwZSA9PT0gVlNNU2hhZG93TWFwICYmIHRoaXMudHlwZSAhPT0gVlNNU2hhZG93TWFwICk7XG5cblx0XHQvLyByZW5kZXIgZGVwdGggbWFwXG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBsaWdodCA9IGxpZ2h0c1sgaSBdO1xuXHRcdFx0Y29uc3Qgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRpZiAoIHNoYWRvdyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMU2hhZG93TWFwOicsIGxpZ2h0LCAnaGFzIG5vIHNoYWRvdy4nICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2hhZG93LmF1dG9VcGRhdGUgPT09IGZhbHNlICYmIHNoYWRvdy5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UgKSBjb250aW51ZTtcblxuXHRcdFx0X3NoYWRvd01hcFNpemUuY29weSggc2hhZG93Lm1hcFNpemUgKTtcblxuXHRcdFx0Y29uc3Qgc2hhZG93RnJhbWVFeHRlbnRzID0gc2hhZG93LmdldEZyYW1lRXh0ZW50cygpO1xuXG5cdFx0XHRfc2hhZG93TWFwU2l6ZS5tdWx0aXBseSggc2hhZG93RnJhbWVFeHRlbnRzICk7XG5cblx0XHRcdF92aWV3cG9ydFNpemUuY29weSggc2hhZG93Lm1hcFNpemUgKTtcblxuXHRcdFx0aWYgKCBfc2hhZG93TWFwU2l6ZS54ID4gX21heFRleHR1cmVTaXplIHx8IF9zaGFkb3dNYXBTaXplLnkgPiBfbWF4VGV4dHVyZVNpemUgKSB7XG5cblx0XHRcdFx0aWYgKCBfc2hhZG93TWFwU2l6ZS54ID4gX21heFRleHR1cmVTaXplICkge1xuXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS54ID0gTWF0aC5mbG9vciggX21heFRleHR1cmVTaXplIC8gc2hhZG93RnJhbWVFeHRlbnRzLnggKTtcblx0XHRcdFx0XHRfc2hhZG93TWFwU2l6ZS54ID0gX3ZpZXdwb3J0U2l6ZS54ICogc2hhZG93RnJhbWVFeHRlbnRzLng7XG5cdFx0XHRcdFx0c2hhZG93Lm1hcFNpemUueCA9IF92aWV3cG9ydFNpemUueDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBfc2hhZG93TWFwU2l6ZS55ID4gX21heFRleHR1cmVTaXplICkge1xuXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS55ID0gTWF0aC5mbG9vciggX21heFRleHR1cmVTaXplIC8gc2hhZG93RnJhbWVFeHRlbnRzLnkgKTtcblx0XHRcdFx0XHRfc2hhZG93TWFwU2l6ZS55ID0gX3ZpZXdwb3J0U2l6ZS55ICogc2hhZG93RnJhbWVFeHRlbnRzLnk7XG5cdFx0XHRcdFx0c2hhZG93Lm1hcFNpemUueSA9IF92aWV3cG9ydFNpemUueTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzaGFkb3cubWFwID09PSBudWxsIHx8IHRvVlNNID09PSB0cnVlIHx8IGZyb21WU00gPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Y29uc3QgcGFycyA9ICggdGhpcy50eXBlICE9PSBWU01TaGFkb3dNYXAgKSA/IHsgbWluRmlsdGVyOiBOZWFyZXN0RmlsdGVyLCBtYWdGaWx0ZXI6IE5lYXJlc3RGaWx0ZXIgfSA6IHt9O1xuXG5cdFx0XHRcdGlmICggc2hhZG93Lm1hcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHNoYWRvdy5tYXAuZGlzcG9zZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzaGFkb3cubWFwID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCBfc2hhZG93TWFwU2l6ZS54LCBfc2hhZG93TWFwU2l6ZS55LCBwYXJzICk7XG5cdFx0XHRcdHNoYWRvdy5tYXAudGV4dHVyZS5uYW1lID0gbGlnaHQubmFtZSArICcuc2hhZG93TWFwJztcblxuXHRcdFx0XHRzaGFkb3cuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXAgKTtcblx0XHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cblx0XHRcdGNvbnN0IHZpZXdwb3J0Q291bnQgPSBzaGFkb3cuZ2V0Vmlld3BvcnRDb3VudCgpO1xuXG5cdFx0XHRmb3IgKCBsZXQgdnAgPSAwOyB2cCA8IHZpZXdwb3J0Q291bnQ7IHZwICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHZpZXdwb3J0ID0gc2hhZG93LmdldFZpZXdwb3J0KCB2cCApO1xuXG5cdFx0XHRcdF92aWV3cG9ydC5zZXQoXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS54ICogdmlld3BvcnQueCxcblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnkgKiB2aWV3cG9ydC55LFxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueCAqIHZpZXdwb3J0LnosXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS55ICogdmlld3BvcnQud1xuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdF9zdGF0ZS52aWV3cG9ydCggX3ZpZXdwb3J0ICk7XG5cblx0XHRcdFx0c2hhZG93LnVwZGF0ZU1hdHJpY2VzKCBsaWdodCwgdnAgKTtcblxuXHRcdFx0XHRfZnJ1c3R1bSA9IHNoYWRvdy5nZXRGcnVzdHVtKCk7XG5cblx0XHRcdFx0cmVuZGVyT2JqZWN0KCBzY2VuZSwgY2FtZXJhLCBzaGFkb3cuY2FtZXJhLCBsaWdodCwgdGhpcy50eXBlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZG8gYmx1ciBwYXNzIGZvciBWU01cblxuXHRcdFx0aWYgKCBzaGFkb3cuaXNQb2ludExpZ2h0U2hhZG93ICE9PSB0cnVlICYmIHRoaXMudHlwZSA9PT0gVlNNU2hhZG93TWFwICkge1xuXG5cdFx0XHRcdFZTTVBhc3MoIHNoYWRvdywgY2FtZXJhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c2hhZG93Lm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRfcHJldmlvdXNUeXBlID0gdGhpcy50eXBlO1xuXG5cdFx0c2NvcGUubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCwgYWN0aXZlQ3ViZUZhY2UsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cblx0fTtcblxuXHRmdW5jdGlvbiBWU01QYXNzKCBzaGFkb3csIGNhbWVyYSApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0cy51cGRhdGUoIGZ1bGxTY3JlZW5NZXNoICk7XG5cblx0XHRpZiAoIHNoYWRvd01hdGVyaWFsVmVydGljYWwuZGVmaW5lcy5WU01fU0FNUExFUyAhPT0gc2hhZG93LmJsdXJTYW1wbGVzICkge1xuXG5cdFx0XHRzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmRlZmluZXMuVlNNX1NBTVBMRVMgPSBzaGFkb3cuYmx1clNhbXBsZXM7XG5cdFx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwuZGVmaW5lcy5WU01fU0FNUExFUyA9IHNoYWRvdy5ibHVyU2FtcGxlcztcblxuXHRcdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzaGFkb3cubWFwUGFzcyA9PT0gbnVsbCApIHtcblxuXHRcdFx0c2hhZG93Lm1hcFBhc3MgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIF9zaGFkb3dNYXBTaXplLngsIF9zaGFkb3dNYXBTaXplLnkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHZlcnRpY2FsIHBhc3NcblxuXHRcdHNoYWRvd01hdGVyaWFsVmVydGljYWwudW5pZm9ybXMuc2hhZG93X3Bhc3MudmFsdWUgPSBzaGFkb3cubWFwLnRleHR1cmU7XG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yZXNvbHV0aW9uLnZhbHVlID0gc2hhZG93Lm1hcFNpemU7XG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yYWRpdXMudmFsdWUgPSBzaGFkb3cucmFkaXVzO1xuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcFBhc3MgKTtcblx0XHRyZW5kZXJlci5jbGVhcigpO1xuXHRcdHJlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCwgZnVsbFNjcmVlbk1lc2gsIG51bGwgKTtcblxuXHRcdC8vIGhvcml6b250YWwgcGFzc1xuXG5cdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLnVuaWZvcm1zLnNoYWRvd19wYXNzLnZhbHVlID0gc2hhZG93Lm1hcFBhc3MudGV4dHVyZTtcblx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZSA9IHNoYWRvdy5tYXBTaXplO1xuXHRcdHNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbC51bmlmb3Jtcy5yYWRpdXMudmFsdWUgPSBzaGFkb3cucmFkaXVzO1xuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcCApO1xuXHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0cmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBzaGFkb3dNYXRlcmlhbEhvcml6b250YWwsIGZ1bGxTY3JlZW5NZXNoLCBudWxsICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgbWF0ZXJpYWwsIGxpZ2h0LCB0eXBlICkge1xuXG5cdFx0bGV0IHJlc3VsdCA9IG51bGw7XG5cblx0XHRjb25zdCBjdXN0b21NYXRlcmlhbCA9ICggbGlnaHQuaXNQb2ludExpZ2h0ID09PSB0cnVlICkgPyBvYmplY3QuY3VzdG9tRGlzdGFuY2VNYXRlcmlhbCA6IG9iamVjdC5jdXN0b21EZXB0aE1hdGVyaWFsO1xuXG5cdFx0aWYgKCBjdXN0b21NYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXN1bHQgPSBjdXN0b21NYXRlcmlhbDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlc3VsdCA9ICggbGlnaHQuaXNQb2ludExpZ2h0ID09PSB0cnVlICkgPyBfZGlzdGFuY2VNYXRlcmlhbCA6IF9kZXB0aE1hdGVyaWFsO1xuXG5cdFx0XHRpZiAoICggcmVuZGVyZXIubG9jYWxDbGlwcGluZ0VuYWJsZWQgJiYgbWF0ZXJpYWwuY2xpcFNoYWRvd3MgPT09IHRydWUgJiYgQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXMgKSAmJiBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcy5sZW5ndGggIT09IDAgKSB8fFxuXHRcdFx0XHQoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCAmJiBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSAhPT0gMCApIHx8XG5cdFx0XHRcdCggbWF0ZXJpYWwuYWxwaGFNYXAgJiYgbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMCApIHx8XG5cdFx0XHRcdCggbWF0ZXJpYWwubWFwICYmIG1hdGVyaWFsLmFscGhhVGVzdCA+IDAgKSApIHtcblxuXHRcdFx0XHQvLyBpbiB0aGlzIGNhc2Ugd2UgbmVlZCBhIHVuaXF1ZSBtYXRlcmlhbCBpbnN0YW5jZSByZWZsZWN0aW5nIHRoZVxuXHRcdFx0XHQvLyBhcHByb3ByaWF0ZSBzdGF0ZVxuXG5cdFx0XHRcdGNvbnN0IGtleUEgPSByZXN1bHQudXVpZCwga2V5QiA9IG1hdGVyaWFsLnV1aWQ7XG5cblx0XHRcdFx0bGV0IG1hdGVyaWFsc0ZvclZhcmlhbnQgPSBfbWF0ZXJpYWxDYWNoZVsga2V5QSBdO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWxzRm9yVmFyaWFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzRm9yVmFyaWFudCA9IHt9O1xuXHRcdFx0XHRcdF9tYXRlcmlhbENhY2hlWyBrZXlBIF0gPSBtYXRlcmlhbHNGb3JWYXJpYW50O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgY2FjaGVkTWF0ZXJpYWwgPSBtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF07XG5cblx0XHRcdFx0aWYgKCBjYWNoZWRNYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y2FjaGVkTWF0ZXJpYWwgPSByZXN1bHQuY2xvbmUoKTtcblx0XHRcdFx0XHRtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF0gPSBjYWNoZWRNYXRlcmlhbDtcblx0XHRcdFx0XHRtYXRlcmlhbC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uTWF0ZXJpYWxEaXNwb3NlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCA9IGNhY2hlZE1hdGVyaWFsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXN1bHQudmlzaWJsZSA9IG1hdGVyaWFsLnZpc2libGU7XG5cdFx0cmVzdWx0LndpcmVmcmFtZSA9IG1hdGVyaWFsLndpcmVmcmFtZTtcblxuXHRcdGlmICggdHlwZSA9PT0gVlNNU2hhZG93TWFwICkge1xuXG5cdFx0XHRyZXN1bHQuc2lkZSA9ICggbWF0ZXJpYWwuc2hhZG93U2lkZSAhPT0gbnVsbCApID8gbWF0ZXJpYWwuc2hhZG93U2lkZSA6IG1hdGVyaWFsLnNpZGU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXN1bHQuc2lkZSA9ICggbWF0ZXJpYWwuc2hhZG93U2lkZSAhPT0gbnVsbCApID8gbWF0ZXJpYWwuc2hhZG93U2lkZSA6IHNoYWRvd1NpZGVbIG1hdGVyaWFsLnNpZGUgXTtcblxuXHRcdH1cblxuXHRcdHJlc3VsdC5hbHBoYU1hcCA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXHRcdHJlc3VsdC5hbHBoYVRlc3QgPSBtYXRlcmlhbC5hbHBoYVRlc3Q7XG5cdFx0cmVzdWx0Lm1hcCA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdHJlc3VsdC5jbGlwU2hhZG93cyA9IG1hdGVyaWFsLmNsaXBTaGFkb3dzO1xuXHRcdHJlc3VsdC5jbGlwcGluZ1BsYW5lcyA9IG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzO1xuXHRcdHJlc3VsdC5jbGlwSW50ZXJzZWN0aW9uID0gbWF0ZXJpYWwuY2xpcEludGVyc2VjdGlvbjtcblxuXHRcdHJlc3VsdC5kaXNwbGFjZW1lbnRNYXAgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0cmVzdWx0LmRpc3BsYWNlbWVudFNjYWxlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0cmVzdWx0LmRpc3BsYWNlbWVudEJpYXMgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0cmVzdWx0LndpcmVmcmFtZUxpbmV3aWR0aCA9IG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRyZXN1bHQubGluZXdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoO1xuXG5cdFx0aWYgKCBsaWdodC5pc1BvaW50TGlnaHQgPT09IHRydWUgJiYgcmVzdWx0LmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHJlbmRlcmVyLnByb3BlcnRpZXMuZ2V0KCByZXN1bHQgKTtcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5saWdodCA9IGxpZ2h0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBsaWdodCwgdHlwZSApIHtcblxuXHRcdGlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgdmlzaWJsZSA9IG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApO1xuXG5cdFx0aWYgKCB2aXNpYmxlICYmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cyApICkge1xuXG5cdFx0XHRpZiAoICggb2JqZWN0LmNhc3RTaGFkb3cgfHwgKCBvYmplY3QucmVjZWl2ZVNoYWRvdyAmJiB0eXBlID09PSBWU01TaGFkb3dNYXAgKSApICYmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzT2JqZWN0KCBvYmplY3QgKSApICkge1xuXG5cdFx0XHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggc2hhZG93Q2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7XG5cdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0XHRcdGZvciAoIGxldCBrID0gMCwga2wgPSBncm91cHMubGVuZ3RoOyBrIDwga2w7IGsgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBrIF07XG5cdFx0XHRcdFx0XHRjb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0aWYgKCBncm91cE1hdGVyaWFsICYmIGdyb3VwTWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBncm91cE1hdGVyaWFsLCBsaWdodCwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdG9iamVjdC5vbkJlZm9yZVNoYWRvdyggcmVuZGVyZXIsIG9iamVjdCwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHRcdHJlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggc2hhZG93Q2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHRcdG9iamVjdC5vbkFmdGVyU2hhZG93KCByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgZGVwdGhNYXRlcmlhbCA9IGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgbWF0ZXJpYWwsIGxpZ2h0LCB0eXBlICk7XG5cblx0XHRcdFx0XHRvYmplY3Qub25CZWZvcmVTaGFkb3coIHJlbmRlcmVyLCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgbnVsbCApO1xuXG5cdFx0XHRcdFx0cmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIG51bGwgKTtcblxuXHRcdFx0XHRcdG9iamVjdC5vbkFmdGVyU2hhZG93KCByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG51bGwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0cmVuZGVyT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgbGlnaHQsIHR5cGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gb25NYXRlcmlhbERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBldmVudC50YXJnZXQ7XG5cblx0XHRtYXRlcmlhbC5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uTWF0ZXJpYWxEaXNwb3NlICk7XG5cblx0XHQvLyBtYWtlIHN1cmUgdG8gcmVtb3ZlIHRoZSB1bmlxdWUgZGlzdGFuY2UvZGVwdGggbWF0ZXJpYWxzIHVzZWQgZm9yIHNoYWRvdyBtYXAgcmVuZGVyaW5nXG5cblx0XHRmb3IgKCBjb25zdCBpZCBpbiBfbWF0ZXJpYWxDYWNoZSApIHtcblxuXHRcdFx0Y29uc3QgY2FjaGUgPSBfbWF0ZXJpYWxDYWNoZVsgaWQgXTtcblxuXHRcdFx0Y29uc3QgdXVpZCA9IGV2ZW50LnRhcmdldC51dWlkO1xuXG5cdFx0XHRpZiAoIHV1aWQgaW4gY2FjaGUgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2hhZG93TWF0ZXJpYWwgPSBjYWNoZVsgdXVpZCBdO1xuXHRcdFx0XHRzaGFkb3dNYXRlcmlhbC5kaXNwb3NlKCk7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsgdXVpZCBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgV2ViR0xTaGFkb3dNYXAgfTtcbiIsImV4cG9ydCBjb25zdCB2ZXJ0ZXggPSAvKiBnbHNsICovYFxudm9pZCBtYWluKCkge1xuXG5cdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24sIDEuMCApO1xuXG59XG5gO1xuXG5leHBvcnQgY29uc3QgZnJhZ21lbnQgPSAvKiBnbHNsICovYFxudW5pZm9ybSBzYW1wbGVyMkQgc2hhZG93X3Bhc3M7XG51bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjtcbnVuaWZvcm0gZmxvYXQgcmFkaXVzO1xuXG4jaW5jbHVkZSA8cGFja2luZz5cblxudm9pZCBtYWluKCkge1xuXG5cdGNvbnN0IGZsb2F0IHNhbXBsZXMgPSBmbG9hdCggVlNNX1NBTVBMRVMgKTtcblxuXHRmbG9hdCBtZWFuID0gMC4wO1xuXHRmbG9hdCBzcXVhcmVkX21lYW4gPSAwLjA7XG5cblx0ZmxvYXQgdXZTdHJpZGUgPSBzYW1wbGVzIDw9IDEuMCA/IDAuMCA6IDIuMCAvICggc2FtcGxlcyAtIDEuMCApO1xuXHRmbG9hdCB1dlN0YXJ0ID0gc2FtcGxlcyA8PSAxLjAgPyAwLjAgOiAtIDEuMDtcblx0Zm9yICggZmxvYXQgaSA9IDAuMDsgaSA8IHNhbXBsZXM7IGkgKysgKSB7XG5cblx0XHRmbG9hdCB1dk9mZnNldCA9IHV2U3RhcnQgKyBpICogdXZTdHJpZGU7XG5cblx0XHQjaWZkZWYgSE9SSVpPTlRBTF9QQVNTXG5cblx0XHRcdHZlYzIgZGlzdHJpYnV0aW9uID0gdW5wYWNrUkdCQVRvMkhhbGYoIHRleHR1cmUyRCggc2hhZG93X3Bhc3MsICggZ2xfRnJhZ0Nvb3JkLnh5ICsgdmVjMiggdXZPZmZzZXQsIDAuMCApICogcmFkaXVzICkgLyByZXNvbHV0aW9uICkgKTtcblx0XHRcdG1lYW4gKz0gZGlzdHJpYnV0aW9uLng7XG5cdFx0XHRzcXVhcmVkX21lYW4gKz0gZGlzdHJpYnV0aW9uLnkgKiBkaXN0cmlidXRpb24ueSArIGRpc3RyaWJ1dGlvbi54ICogZGlzdHJpYnV0aW9uLng7XG5cblx0XHQjZWxzZVxuXG5cdFx0XHRmbG9hdCBkZXB0aCA9IHVucGFja1JHQkFUb0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd19wYXNzLCAoIGdsX0ZyYWdDb29yZC54eSArIHZlYzIoIDAuMCwgdXZPZmZzZXQgKSAqIHJhZGl1cyApIC8gcmVzb2x1dGlvbiApICk7XG5cdFx0XHRtZWFuICs9IGRlcHRoO1xuXHRcdFx0c3F1YXJlZF9tZWFuICs9IGRlcHRoICogZGVwdGg7XG5cblx0XHQjZW5kaWZcblxuXHR9XG5cblx0bWVhbiA9IG1lYW4gLyBzYW1wbGVzO1xuXHRzcXVhcmVkX21lYW4gPSBzcXVhcmVkX21lYW4gLyBzYW1wbGVzO1xuXG5cdGZsb2F0IHN0ZF9kZXYgPSBzcXJ0KCBzcXVhcmVkX21lYW4gLSBtZWFuICogbWVhbiApO1xuXG5cdGdsX0ZyYWdDb2xvciA9IHBhY2sySGFsZlRvUkdCQSggdmVjMiggbWVhbiwgc3RkX2RldiApICk7XG5cbn1cbmA7XG4iLCJpbXBvcnQgeyBOb3RFcXVhbERlcHRoLCBHcmVhdGVyRGVwdGgsIEdyZWF0ZXJFcXVhbERlcHRoLCBFcXVhbERlcHRoLCBMZXNzRXF1YWxEZXB0aCwgTGVzc0RlcHRoLCBBbHdheXNEZXB0aCwgTmV2ZXJEZXB0aCwgQ3VsbEZhY2VGcm9udCwgQ3VsbEZhY2VCYWNrLCBDdWxsRmFjZU5vbmUsIERvdWJsZVNpZGUsIEJhY2tTaWRlLCBDdXN0b21CbGVuZGluZywgTXVsdGlwbHlCbGVuZGluZywgU3VidHJhY3RpdmVCbGVuZGluZywgQWRkaXRpdmVCbGVuZGluZywgTm9CbGVuZGluZywgTm9ybWFsQmxlbmRpbmcsIEFkZEVxdWF0aW9uLCBTdWJ0cmFjdEVxdWF0aW9uLCBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiwgTWluRXF1YXRpb24sIE1heEVxdWF0aW9uLCBaZXJvRmFjdG9yLCBPbmVGYWN0b3IsIFNyY0NvbG9yRmFjdG9yLCBTcmNBbHBoYUZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciwgRHN0Q29sb3JGYWN0b3IsIERzdEFscGhhRmFjdG9yLCBPbmVNaW51c1NyY0NvbG9yRmFjdG9yLCBPbmVNaW51c1NyY0FscGhhRmFjdG9yLCBPbmVNaW51c0RzdENvbG9yRmFjdG9yLCBPbmVNaW51c0RzdEFscGhhRmFjdG9yLCBDb25zdGFudENvbG9yRmFjdG9yLCBPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3IsIENvbnN0YW50QWxwaGFGYWN0b3IsIE9uZU1pbnVzQ29uc3RhbnRBbHBoYUZhY3RvciB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uL21hdGgvQ29sb3IuanMnO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yNC5qcyc7XG5cbmZ1bmN0aW9uIFdlYkdMU3RhdGUoIGdsICkge1xuXG5cdGZ1bmN0aW9uIENvbG9yQnVmZmVyKCkge1xuXG5cdFx0bGV0IGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgY29sb3IgPSBuZXcgVmVjdG9yNCgpO1xuXHRcdGxldCBjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcblx0XHRjb25zdCBjdXJyZW50Q29sb3JDbGVhciA9IG5ldyBWZWN0b3I0KCAwLCAwLCAwLCAwICk7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIGNvbG9yTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRDb2xvck1hc2sgIT09IGNvbG9yTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLmNvbG9yTWFzayggY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudENvbG9yTWFzayA9IGNvbG9yTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIHIsIGcsIGIsIGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdFx0XHRpZiAoIHByZW11bHRpcGxpZWRBbHBoYSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHIgKj0gYTsgZyAqPSBhOyBiICo9IGE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbG9yLnNldCggciwgZywgYiwgYSApO1xuXG5cdFx0XHRcdGlmICggY3VycmVudENvbG9yQ2xlYXIuZXF1YWxzKCBjb2xvciApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyQ29sb3IoIHIsIGcsIGIsIGEgKTtcblx0XHRcdFx0XHRjdXJyZW50Q29sb3JDbGVhci5jb3B5KCBjb2xvciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudENvbG9yQ2xlYXIuc2V0KCAtIDEsIDAsIDAsIDAgKTsgLy8gc2V0IHRvIGludmFsaWQgc3RhdGVcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gRGVwdGhCdWZmZXIoKSB7XG5cblx0XHRsZXQgbG9ja2VkID0gZmFsc2U7XG5cblx0XHRsZXQgY3VycmVudERlcHRoTWFzayA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnREZXB0aEZ1bmMgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50RGVwdGhDbGVhciA9IG51bGw7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZXRUZXN0OiBmdW5jdGlvbiAoIGRlcHRoVGVzdCApIHtcblxuXHRcdFx0XHRpZiAoIGRlcHRoVGVzdCApIHtcblxuXHRcdFx0XHRcdGVuYWJsZSggZ2wuREVQVEhfVEVTVCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRkaXNhYmxlKCBnbC5ERVBUSF9URVNUICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIGRlcHRoTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnREZXB0aE1hc2sgIT09IGRlcHRoTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLmRlcHRoTWFzayggZGVwdGhNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudERlcHRoTWFzayA9IGRlcHRoTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldEZ1bmM6IGZ1bmN0aW9uICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoRnVuYyAhPT0gZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0c3dpdGNoICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5ldmVyRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5ORVZFUiApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBBbHdheXNEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkFMV0FZUyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBMZXNzRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5MRVNTICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIExlc3NFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuTEVRVUFMICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5FUVVBTCApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBHcmVhdGVyRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkdFUVVBTCApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBHcmVhdGVyRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5HUkVBVEVSICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5vdEVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5OT1RFUVVBTCApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkxFUVVBTCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3VycmVudERlcHRoRnVuYyA9IGRlcHRoRnVuYztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIGRlcHRoICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoQ2xlYXIgIT09IGRlcHRoICkge1xuXG5cdFx0XHRcdFx0Z2wuY2xlYXJEZXB0aCggZGVwdGggKTtcblx0XHRcdFx0XHRjdXJyZW50RGVwdGhDbGVhciA9IGRlcHRoO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50RGVwdGhNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudERlcHRoRnVuYyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnREZXB0aENsZWFyID0gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gU3RlbmNpbEJ1ZmZlcigpIHtcblxuXHRcdGxldCBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdGxldCBjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0VGVzdDogZnVuY3Rpb24gKCBzdGVuY2lsVGVzdCApIHtcblxuXHRcdFx0XHRpZiAoICEgbG9ja2VkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBzdGVuY2lsVGVzdCApIHtcblxuXHRcdFx0XHRcdFx0ZW5hYmxlKCBnbC5TVEVOQ0lMX1RFU1QgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGRpc2FibGUoIGdsLlNURU5DSUxfVEVTVCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBzdGVuY2lsTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsTWFzayAhPT0gc3RlbmNpbE1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsTWFzayggc3RlbmNpbE1hc2sgKTtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbE1hc2sgPSBzdGVuY2lsTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldEZ1bmM6IGZ1bmN0aW9uICggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxGdW5jICE9PSBzdGVuY2lsRnVuYyB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsUmVmICE9PSBzdGVuY2lsUmVmIHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxGdW5jTWFzayAhPT0gc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsRnVuYyggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICk7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmMgPSBzdGVuY2lsRnVuYztcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiA9IHN0ZW5jaWxSZWY7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IHN0ZW5jaWxNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0T3A6IGZ1bmN0aW9uICggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxGYWlsICE9PSBzdGVuY2lsRmFpbCB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsWkZhaWwgIT09IHN0ZW5jaWxaRmFpbCB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsWlBhc3MgIT09IHN0ZW5jaWxaUGFzcyApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxPcCggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICk7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZhaWwgPSBzdGVuY2lsRmFpbDtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gc3RlbmNpbFpGYWlsO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBzdGVuY2lsWlBhc3M7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCBzdGVuY2lsICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxDbGVhciAhPT0gc3RlbmNpbCApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyU3RlbmNpbCggc3RlbmNpbCApO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBzdGVuY2lsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHQvL1xuXG5cdGNvbnN0IGNvbG9yQnVmZmVyID0gbmV3IENvbG9yQnVmZmVyKCk7XG5cdGNvbnN0IGRlcHRoQnVmZmVyID0gbmV3IERlcHRoQnVmZmVyKCk7XG5cdGNvbnN0IHN0ZW5jaWxCdWZmZXIgPSBuZXcgU3RlbmNpbEJ1ZmZlcigpO1xuXG5cdGNvbnN0IHVib0JpbmRpbmdzID0gbmV3IFdlYWtNYXAoKTtcblx0Y29uc3QgdWJvUHJvZ3JhbU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0bGV0IGVuYWJsZWRDYXBhYmlsaXRpZXMgPSB7fTtcblxuXHRsZXQgY3VycmVudEJvdW5kRnJhbWVidWZmZXJzID0ge307XG5cdGxldCBjdXJyZW50RHJhd2J1ZmZlcnMgPSBuZXcgV2Vha01hcCgpO1xuXHRsZXQgZGVmYXVsdERyYXdidWZmZXJzID0gW107XG5cblx0bGV0IGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuXHRsZXQgY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlO1xuXHRsZXQgY3VycmVudEJsZW5kaW5nID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHRsZXQgY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmRDb2xvciA9IG5ldyBDb2xvciggMCwgMCwgMCApO1xuXHRsZXQgY3VycmVudEJsZW5kQWxwaGEgPSAwO1xuXHRsZXQgY3VycmVudFByZW11bHRpcGxlZEFscGhhID0gZmFsc2U7XG5cblx0bGV0IGN1cnJlbnRGbGlwU2lkZWQgPSBudWxsO1xuXHRsZXQgY3VycmVudEN1bGxGYWNlID0gbnVsbDtcblxuXHRsZXQgY3VycmVudExpbmVXaWR0aCA9IG51bGw7XG5cblx0bGV0IGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gbnVsbDtcblx0bGV0IGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgPSBudWxsO1xuXG5cdGNvbnN0IG1heFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyApO1xuXG5cdGxldCBsaW5lV2lkdGhBdmFpbGFibGUgPSBmYWxzZTtcblx0bGV0IHZlcnNpb24gPSAwO1xuXHRjb25zdCBnbFZlcnNpb24gPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLlZFUlNJT04gKTtcblxuXHRpZiAoIGdsVmVyc2lvbi5pbmRleE9mKCAnV2ViR0wnICkgIT09IC0gMSApIHtcblxuXHRcdHZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXldlYkdMIChcXGQpLy5leGVjKCBnbFZlcnNpb24gKVsgMSBdICk7XG5cdFx0bGluZVdpZHRoQXZhaWxhYmxlID0gKCB2ZXJzaW9uID49IDEuMCApO1xuXG5cdH0gZWxzZSBpZiAoIGdsVmVyc2lvbi5pbmRleE9mKCAnT3BlbkdMIEVTJyApICE9PSAtIDEgKSB7XG5cblx0XHR2ZXJzaW9uID0gcGFyc2VGbG9hdCggL15PcGVuR0wgRVMgKFxcZCkvLmV4ZWMoIGdsVmVyc2lvbiApWyAxIF0gKTtcblx0XHRsaW5lV2lkdGhBdmFpbGFibGUgPSAoIHZlcnNpb24gPj0gMi4wICk7XG5cblx0fVxuXG5cdGxldCBjdXJyZW50VGV4dHVyZVNsb3QgPSBudWxsO1xuXHRsZXQgY3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHRjb25zdCBzY2lzc29yUGFyYW0gPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLlNDSVNTT1JfQk9YICk7XG5cdGNvbnN0IHZpZXdwb3J0UGFyYW0gPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLlZJRVdQT1JUICk7XG5cblx0Y29uc3QgY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpLmZyb21BcnJheSggc2Npc3NvclBhcmFtICk7XG5cdGNvbnN0IGN1cnJlbnRWaWV3cG9ydCA9IG5ldyBWZWN0b3I0KCkuZnJvbUFycmF5KCB2aWV3cG9ydFBhcmFtICk7XG5cblx0ZnVuY3Rpb24gY3JlYXRlVGV4dHVyZSggdHlwZSwgdGFyZ2V0LCBjb3VudCwgZGltZW5zaW9ucyApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheSggNCApOyAvLyA0IGlzIHJlcXVpcmVkIHRvIG1hdGNoIGRlZmF1bHQgdW5wYWNrIGFsaWdubWVudCBvZiA0LlxuXHRcdGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRnbC5iaW5kVGV4dHVyZSggdHlwZSwgdGV4dHVyZSApO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCApO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gZ2wuVEVYVFVSRV8zRCB8fCB0eXBlID09PSBnbC5URVhUVVJFXzJEX0FSUkFZICkge1xuXG5cdFx0XHRcdGdsLnRleEltYWdlM0QoIHRhcmdldCwgMCwgZ2wuUkdCQSwgMSwgMSwgZGltZW5zaW9ucywgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgZGF0YSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGdsLnRleEltYWdlMkQoIHRhcmdldCArIGksIDAsIGdsLlJHQkEsIDEsIDEsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG5cdGNvbnN0IGVtcHR5VGV4dHVyZXMgPSB7fTtcblx0ZW1wdHlUZXh0dXJlc1sgZ2wuVEVYVFVSRV8yRCBdID0gY3JlYXRlVGV4dHVyZSggZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV8yRCwgMSApO1xuXHRlbXB0eVRleHR1cmVzWyBnbC5URVhUVVJFX0NVQkVfTUFQIF0gPSBjcmVhdGVUZXh0dXJlKCBnbC5URVhUVVJFX0NVQkVfTUFQLCBnbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1gsIDYgKTtcblx0ZW1wdHlUZXh0dXJlc1sgZ2wuVEVYVFVSRV8yRF9BUlJBWSBdID0gY3JlYXRlVGV4dHVyZSggZ2wuVEVYVFVSRV8yRF9BUlJBWSwgZ2wuVEVYVFVSRV8yRF9BUlJBWSwgMSwgMSApO1xuXHRlbXB0eVRleHR1cmVzWyBnbC5URVhUVVJFXzNEIF0gPSBjcmVhdGVUZXh0dXJlKCBnbC5URVhUVVJFXzNELCBnbC5URVhUVVJFXzNELCAxLCAxICk7XG5cblx0Ly8gaW5pdFxuXG5cdGNvbG9yQnVmZmVyLnNldENsZWFyKCAwLCAwLCAwLCAxICk7XG5cdGRlcHRoQnVmZmVyLnNldENsZWFyKCAxICk7XG5cdHN0ZW5jaWxCdWZmZXIuc2V0Q2xlYXIoIDAgKTtcblxuXHRlbmFibGUoIGdsLkRFUFRIX1RFU1QgKTtcblx0ZGVwdGhCdWZmZXIuc2V0RnVuYyggTGVzc0VxdWFsRGVwdGggKTtcblxuXHRzZXRGbGlwU2lkZWQoIGZhbHNlICk7XG5cdHNldEN1bGxGYWNlKCBDdWxsRmFjZUJhY2sgKTtcblx0ZW5hYmxlKCBnbC5DVUxMX0ZBQ0UgKTtcblxuXHRzZXRCbGVuZGluZyggTm9CbGVuZGluZyApO1xuXG5cdC8vXG5cblx0ZnVuY3Rpb24gZW5hYmxlKCBpZCApIHtcblxuXHRcdGlmICggZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0Z2wuZW5hYmxlKCBpZCApO1xuXHRcdFx0ZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc2FibGUoIGlkICkge1xuXG5cdFx0aWYgKCBlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdICE9PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wuZGlzYWJsZSggaWQgKTtcblx0XHRcdGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gPSBmYWxzZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gYmluZEZyYW1lYnVmZmVyKCB0YXJnZXQsIGZyYW1lYnVmZmVyICkge1xuXG5cdFx0aWYgKCBjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnNbIHRhcmdldCBdICE9PSBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0Z2wuYmluZEZyYW1lYnVmZmVyKCB0YXJnZXQsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgdGFyZ2V0IF0gPSBmcmFtZWJ1ZmZlcjtcblxuXHRcdFx0Ly8gZ2wuRFJBV19GUkFNRUJVRkZFUiBpcyBlcXVpdmFsZW50IHRvIGdsLkZSQU1FQlVGRkVSXG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSBnbC5EUkFXX0ZSQU1FQlVGRkVSICkge1xuXG5cdFx0XHRcdGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgZ2wuRlJBTUVCVUZGRVIgXSA9IGZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSBnbC5GUkFNRUJVRkZFUiApIHtcblxuXHRcdFx0XHRjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnNbIGdsLkRSQVdfRlJBTUVCVUZGRVIgXSA9IGZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkcmF3QnVmZmVycyggcmVuZGVyVGFyZ2V0LCBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdGxldCBkcmF3QnVmZmVycyA9IGRlZmF1bHREcmF3YnVmZmVycztcblxuXHRcdGxldCBuZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGRyYXdCdWZmZXJzID0gY3VycmVudERyYXdidWZmZXJzLmdldCggZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0aWYgKCBkcmF3QnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRyYXdCdWZmZXJzID0gW107XG5cdFx0XHRcdGN1cnJlbnREcmF3YnVmZmVycy5zZXQoIGZyYW1lYnVmZmVyLCBkcmF3QnVmZmVycyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmVzO1xuXG5cdFx0XHRpZiAoIGRyYXdCdWZmZXJzLmxlbmd0aCAhPT0gdGV4dHVyZXMubGVuZ3RoIHx8IGRyYXdCdWZmZXJzWyAwIF0gIT09IGdsLkNPTE9SX0FUVEFDSE1FTlQwICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGRyYXdCdWZmZXJzWyBpIF0gPSBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRyYXdCdWZmZXJzLmxlbmd0aCA9IHRleHR1cmVzLmxlbmd0aDtcblxuXHRcdFx0XHRuZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggZHJhd0J1ZmZlcnNbIDAgXSAhPT0gZ2wuQkFDSyApIHtcblxuXHRcdFx0XHRkcmF3QnVmZmVyc1sgMCBdID0gZ2wuQkFDSztcblxuXHRcdFx0XHRuZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdGdsLmRyYXdCdWZmZXJzKCBkcmF3QnVmZmVycyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1c2VQcm9ncmFtKCBwcm9ncmFtICkge1xuXG5cdFx0aWYgKCBjdXJyZW50UHJvZ3JhbSAhPT0gcHJvZ3JhbSApIHtcblxuXHRcdFx0Z2wudXNlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXG5cdFx0XHRjdXJyZW50UHJvZ3JhbSA9IHByb2dyYW07XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRjb25zdCBlcXVhdGlvblRvR0wgPSB7XG5cdFx0WyBBZGRFcXVhdGlvbiBdOiBnbC5GVU5DX0FERCxcblx0XHRbIFN1YnRyYWN0RXF1YXRpb24gXTogZ2wuRlVOQ19TVUJUUkFDVCxcblx0XHRbIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uIF06IGdsLkZVTkNfUkVWRVJTRV9TVUJUUkFDVFxuXHR9O1xuXG5cdGVxdWF0aW9uVG9HTFsgTWluRXF1YXRpb24gXSA9IGdsLk1JTjtcblx0ZXF1YXRpb25Ub0dMWyBNYXhFcXVhdGlvbiBdID0gZ2wuTUFYO1xuXG5cdGNvbnN0IGZhY3RvclRvR0wgPSB7XG5cdFx0WyBaZXJvRmFjdG9yIF06IGdsLlpFUk8sXG5cdFx0WyBPbmVGYWN0b3IgXTogZ2wuT05FLFxuXHRcdFsgU3JjQ29sb3JGYWN0b3IgXTogZ2wuU1JDX0NPTE9SLFxuXHRcdFsgU3JjQWxwaGFGYWN0b3IgXTogZ2wuU1JDX0FMUEhBLFxuXHRcdFsgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciBdOiBnbC5TUkNfQUxQSEFfU0FUVVJBVEUsXG5cdFx0WyBEc3RDb2xvckZhY3RvciBdOiBnbC5EU1RfQ09MT1IsXG5cdFx0WyBEc3RBbHBoYUZhY3RvciBdOiBnbC5EU1RfQUxQSEEsXG5cdFx0WyBPbmVNaW51c1NyY0NvbG9yRmFjdG9yIF06IGdsLk9ORV9NSU5VU19TUkNfQ09MT1IsXG5cdFx0WyBPbmVNaW51c1NyY0FscGhhRmFjdG9yIF06IGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsXG5cdFx0WyBPbmVNaW51c0RzdENvbG9yRmFjdG9yIF06IGdsLk9ORV9NSU5VU19EU1RfQ09MT1IsXG5cdFx0WyBPbmVNaW51c0RzdEFscGhhRmFjdG9yIF06IGdsLk9ORV9NSU5VU19EU1RfQUxQSEEsXG5cdFx0WyBDb25zdGFudENvbG9yRmFjdG9yIF06IGdsLkNPTlNUQU5UX0NPTE9SLFxuXHRcdFsgT25lTWludXNDb25zdGFudENvbG9yRmFjdG9yIF06IGdsLk9ORV9NSU5VU19DT05TVEFOVF9DT0xPUixcblx0XHRbIENvbnN0YW50QWxwaGFGYWN0b3IgXTogZ2wuQ09OU1RBTlRfQUxQSEEsXG5cdFx0WyBPbmVNaW51c0NvbnN0YW50QWxwaGFGYWN0b3IgXTogZ2wuT05FX01JTlVTX0NPTlNUQU5UX0FMUEhBXG5cdH07XG5cblx0ZnVuY3Rpb24gc2V0QmxlbmRpbmcoIGJsZW5kaW5nLCBibGVuZEVxdWF0aW9uLCBibGVuZFNyYywgYmxlbmREc3QsIGJsZW5kRXF1YXRpb25BbHBoYSwgYmxlbmRTcmNBbHBoYSwgYmxlbmREc3RBbHBoYSwgYmxlbmRDb2xvciwgYmxlbmRBbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0aWYgKCBibGVuZGluZyA9PT0gTm9CbGVuZGluZyApIHtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmxlbmRpbmdFbmFibGVkID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGRpc2FibGUoIGdsLkJMRU5EICk7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRlbmFibGUoIGdsLkJMRU5EICk7XG5cdFx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggYmxlbmRpbmcgIT09IEN1c3RvbUJsZW5kaW5nICkge1xuXG5cdFx0XHRpZiAoIGJsZW5kaW5nICE9PSBjdXJyZW50QmxlbmRpbmcgfHwgcHJlbXVsdGlwbGllZEFscGhhICE9PSBjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50QmxlbmRFcXVhdGlvbiAhPT0gQWRkRXF1YXRpb24gfHwgY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSAhPT0gQWRkRXF1YXRpb24gKSB7XG5cblx0XHRcdFx0XHRnbC5ibGVuZEVxdWF0aW9uKCBnbC5GVU5DX0FERCApO1xuXG5cdFx0XHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjtcblx0XHRcdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gQWRkRXF1YXRpb247XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0XHRcdFx0c3dpdGNoICggYmxlbmRpbmcgKSB7XG5cblx0XHRcdFx0XHRcdGNhc2UgTm9ybWFsQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIGdsLk9ORSwgZ2wuT05FICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5aRVJPLCBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SLCBnbC5aRVJPLCBnbC5PTkUgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTXVsdGlwbHlCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIGdsLlpFUk8sIGdsLlNSQ19DT0xPUiwgZ2wuWkVSTywgZ2wuU1JDX0FMUEhBICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTogSW52YWxpZCBibGVuZGluZzogJywgYmxlbmRpbmcgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN3aXRjaCAoIGJsZW5kaW5nICkge1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5vcm1hbEJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBLCBnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgQWRkaXRpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCBnbC5TUkNfQUxQSEEsIGdsLk9ORSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBTdWJ0cmFjdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZ2wuWkVSTywgZ2wuT05FX01JTlVTX1NSQ19DT0xPUiwgZ2wuWkVSTywgZ2wuT05FICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIE11bHRpcGx5QmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggZ2wuWkVSTywgZ2wuU1JDX0NPTE9SICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTogSW52YWxpZCBibGVuZGluZzogJywgYmxlbmRpbmcgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZERzdCA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50QmxlbmRDb2xvci5zZXQoIDAsIDAsIDAgKTtcblx0XHRcdFx0Y3VycmVudEJsZW5kQWxwaGEgPSAwO1xuXG5cdFx0XHRcdGN1cnJlbnRCbGVuZGluZyA9IGJsZW5kaW5nO1xuXHRcdFx0XHRjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBwcmVtdWx0aXBsaWVkQWxwaGE7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY3VzdG9tIGJsZW5kaW5nXG5cblx0XHRibGVuZEVxdWF0aW9uQWxwaGEgPSBibGVuZEVxdWF0aW9uQWxwaGEgfHwgYmxlbmRFcXVhdGlvbjtcblx0XHRibGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYSB8fCBibGVuZFNyYztcblx0XHRibGVuZERzdEFscGhhID0gYmxlbmREc3RBbHBoYSB8fCBibGVuZERzdDtcblxuXHRcdGlmICggYmxlbmRFcXVhdGlvbiAhPT0gY3VycmVudEJsZW5kRXF1YXRpb24gfHwgYmxlbmRFcXVhdGlvbkFscGhhICE9PSBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICkge1xuXG5cdFx0XHRnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoIGVxdWF0aW9uVG9HTFsgYmxlbmRFcXVhdGlvbiBdLCBlcXVhdGlvblRvR0xbIGJsZW5kRXF1YXRpb25BbHBoYSBdICk7XG5cblx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gYmxlbmRFcXVhdGlvbjtcblx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBibGVuZEVxdWF0aW9uQWxwaGE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJsZW5kU3JjICE9PSBjdXJyZW50QmxlbmRTcmMgfHwgYmxlbmREc3QgIT09IGN1cnJlbnRCbGVuZERzdCB8fCBibGVuZFNyY0FscGhhICE9PSBjdXJyZW50QmxlbmRTcmNBbHBoYSB8fCBibGVuZERzdEFscGhhICE9PSBjdXJyZW50QmxlbmREc3RBbHBoYSApIHtcblxuXHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIGZhY3RvclRvR0xbIGJsZW5kU3JjIF0sIGZhY3RvclRvR0xbIGJsZW5kRHN0IF0sIGZhY3RvclRvR0xbIGJsZW5kU3JjQWxwaGEgXSwgZmFjdG9yVG9HTFsgYmxlbmREc3RBbHBoYSBdICk7XG5cblx0XHRcdGN1cnJlbnRCbGVuZFNyYyA9IGJsZW5kU3JjO1xuXHRcdFx0Y3VycmVudEJsZW5kRHN0ID0gYmxlbmREc3Q7XG5cdFx0XHRjdXJyZW50QmxlbmRTcmNBbHBoYSA9IGJsZW5kU3JjQWxwaGE7XG5cdFx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IGJsZW5kRHN0QWxwaGE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJsZW5kQ29sb3IuZXF1YWxzKCBjdXJyZW50QmxlbmRDb2xvciApID09PSBmYWxzZSB8fCBibGVuZEFscGhhICE9PSBjdXJyZW50QmxlbmRBbHBoYSApIHtcblxuXHRcdFx0Z2wuYmxlbmRDb2xvciggYmxlbmRDb2xvci5yLCBibGVuZENvbG9yLmcsIGJsZW5kQ29sb3IuYiwgYmxlbmRBbHBoYSApO1xuXG5cdFx0XHRjdXJyZW50QmxlbmRDb2xvci5jb3B5KCBibGVuZENvbG9yICk7XG5cdFx0XHRjdXJyZW50QmxlbmRBbHBoYSA9IGJsZW5kQWxwaGE7XG5cblx0XHR9XG5cblx0XHRjdXJyZW50QmxlbmRpbmcgPSBibGVuZGluZztcblx0XHRjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBmYWxzZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVyApIHtcblxuXHRcdG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGVcblx0XHRcdD8gZGlzYWJsZSggZ2wuQ1VMTF9GQUNFIClcblx0XHRcdDogZW5hYmxlKCBnbC5DVUxMX0ZBQ0UgKTtcblxuXHRcdGxldCBmbGlwU2lkZWQgPSAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICk7XG5cdFx0aWYgKCBmcm9udEZhY2VDVyApIGZsaXBTaWRlZCA9ICEgZmxpcFNpZGVkO1xuXG5cdFx0c2V0RmxpcFNpZGVkKCBmbGlwU2lkZWQgKTtcblxuXHRcdCggbWF0ZXJpYWwuYmxlbmRpbmcgPT09IE5vcm1hbEJsZW5kaW5nICYmIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSBmYWxzZSApXG5cdFx0XHQ/IHNldEJsZW5kaW5nKCBOb0JsZW5kaW5nIClcblx0XHRcdDogc2V0QmxlbmRpbmcoIG1hdGVyaWFsLmJsZW5kaW5nLCBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uLCBtYXRlcmlhbC5ibGVuZFNyYywgbWF0ZXJpYWwuYmxlbmREc3QsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb25BbHBoYSwgbWF0ZXJpYWwuYmxlbmRTcmNBbHBoYSwgbWF0ZXJpYWwuYmxlbmREc3RBbHBoYSwgbWF0ZXJpYWwuYmxlbmRDb2xvciwgbWF0ZXJpYWwuYmxlbmRBbHBoYSwgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhICk7XG5cblx0XHRkZXB0aEJ1ZmZlci5zZXRGdW5jKCBtYXRlcmlhbC5kZXB0aEZ1bmMgKTtcblx0XHRkZXB0aEJ1ZmZlci5zZXRUZXN0KCBtYXRlcmlhbC5kZXB0aFRlc3QgKTtcblx0XHRkZXB0aEJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5kZXB0aFdyaXRlICk7XG5cdFx0Y29sb3JCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuY29sb3JXcml0ZSApO1xuXG5cdFx0Y29uc3Qgc3RlbmNpbFdyaXRlID0gbWF0ZXJpYWwuc3RlbmNpbFdyaXRlO1xuXHRcdHN0ZW5jaWxCdWZmZXIuc2V0VGVzdCggc3RlbmNpbFdyaXRlICk7XG5cdFx0aWYgKCBzdGVuY2lsV3JpdGUgKSB7XG5cblx0XHRcdHN0ZW5jaWxCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzayApO1xuXHRcdFx0c3RlbmNpbEJ1ZmZlci5zZXRGdW5jKCBtYXRlcmlhbC5zdGVuY2lsRnVuYywgbWF0ZXJpYWwuc3RlbmNpbFJlZiwgbWF0ZXJpYWwuc3RlbmNpbEZ1bmNNYXNrICk7XG5cdFx0XHRzdGVuY2lsQnVmZmVyLnNldE9wKCBtYXRlcmlhbC5zdGVuY2lsRmFpbCwgbWF0ZXJpYWwuc3RlbmNpbFpGYWlsLCBtYXRlcmlhbC5zdGVuY2lsWlBhc3MgKTtcblxuXHRcdH1cblxuXHRcdHNldFBvbHlnb25PZmZzZXQoIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyApO1xuXG5cdFx0bWF0ZXJpYWwuYWxwaGFUb0NvdmVyYWdlID09PSB0cnVlXG5cdFx0XHQ/IGVuYWJsZSggZ2wuU0FNUExFX0FMUEhBX1RPX0NPVkVSQUdFIClcblx0XHRcdDogZGlzYWJsZSggZ2wuU0FNUExFX0FMUEhBX1RPX0NPVkVSQUdFICk7XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gc2V0RmxpcFNpZGVkKCBmbGlwU2lkZWQgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRGbGlwU2lkZWQgIT09IGZsaXBTaWRlZCApIHtcblxuXHRcdFx0aWYgKCBmbGlwU2lkZWQgKSB7XG5cblx0XHRcdFx0Z2wuZnJvbnRGYWNlKCBnbC5DVyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGdsLmZyb250RmFjZSggZ2wuQ0NXICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y3VycmVudEZsaXBTaWRlZCA9IGZsaXBTaWRlZDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0Q3VsbEZhY2UoIGN1bGxGYWNlICkge1xuXG5cdFx0aWYgKCBjdWxsRmFjZSAhPT0gQ3VsbEZhY2VOb25lICkge1xuXG5cdFx0XHRlbmFibGUoIGdsLkNVTExfRkFDRSApO1xuXG5cdFx0XHRpZiAoIGN1bGxGYWNlICE9PSBjdXJyZW50Q3VsbEZhY2UgKSB7XG5cblx0XHRcdFx0aWYgKCBjdWxsRmFjZSA9PT0gQ3VsbEZhY2VCYWNrICkge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIGdsLkJBQ0sgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBjdWxsRmFjZSA9PT0gQ3VsbEZhY2VGcm9udCApIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCBnbC5GUk9OVCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRnbC5jdWxsRmFjZSggZ2wuRlJPTlRfQU5EX0JBQ0sgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIGdsLkNVTExfRkFDRSApO1xuXG5cdFx0fVxuXG5cdFx0Y3VycmVudEN1bGxGYWNlID0gY3VsbEZhY2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldExpbmVXaWR0aCggd2lkdGggKSB7XG5cblx0XHRpZiAoIHdpZHRoICE9PSBjdXJyZW50TGluZVdpZHRoICkge1xuXG5cdFx0XHRpZiAoIGxpbmVXaWR0aEF2YWlsYWJsZSApIGdsLmxpbmVXaWR0aCggd2lkdGggKTtcblxuXHRcdFx0Y3VycmVudExpbmVXaWR0aCA9IHdpZHRoO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRQb2x5Z29uT2Zmc2V0KCBwb2x5Z29uT2Zmc2V0LCBmYWN0b3IsIHVuaXRzICkge1xuXG5cdFx0aWYgKCBwb2x5Z29uT2Zmc2V0ICkge1xuXG5cdFx0XHRlbmFibGUoIGdsLlBPTFlHT05fT0ZGU0VUX0ZJTEwgKTtcblxuXHRcdFx0aWYgKCBjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciAhPT0gZmFjdG9yIHx8IGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgIT09IHVuaXRzICkge1xuXG5cdFx0XHRcdGdsLnBvbHlnb25PZmZzZXQoIGZhY3RvciwgdW5pdHMgKTtcblxuXHRcdFx0XHRjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IGZhY3Rvcjtcblx0XHRcdFx0Y3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IHVuaXRzO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkaXNhYmxlKCBnbC5QT0xZR09OX09GRlNFVF9GSUxMICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFNjaXNzb3JUZXN0KCBzY2lzc29yVGVzdCApIHtcblxuXHRcdGlmICggc2Npc3NvclRlc3QgKSB7XG5cblx0XHRcdGVuYWJsZSggZ2wuU0NJU1NPUl9URVNUICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkaXNhYmxlKCBnbC5TQ0lTU09SX1RFU1QgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gdGV4dHVyZVxuXG5cdGZ1bmN0aW9uIGFjdGl2ZVRleHR1cmUoIHdlYmdsU2xvdCApIHtcblxuXHRcdGlmICggd2ViZ2xTbG90ID09PSB1bmRlZmluZWQgKSB3ZWJnbFNsb3QgPSBnbC5URVhUVVJFMCArIG1heFRleHR1cmVzIC0gMTtcblxuXHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ICE9PSB3ZWJnbFNsb3QgKSB7XG5cblx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoIHdlYmdsU2xvdCApO1xuXHRcdFx0Y3VycmVudFRleHR1cmVTbG90ID0gd2ViZ2xTbG90O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBiaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUsIHdlYmdsU2xvdCApIHtcblxuXHRcdGlmICggd2ViZ2xTbG90ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHdlYmdsU2xvdCA9IGdsLlRFWFRVUkUwICsgbWF4VGV4dHVyZXMgLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHdlYmdsU2xvdCA9IGN1cnJlbnRUZXh0dXJlU2xvdDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0bGV0IGJvdW5kVGV4dHVyZSA9IGN1cnJlbnRCb3VuZFRleHR1cmVzWyB3ZWJnbFNsb3QgXTtcblxuXHRcdGlmICggYm91bmRUZXh0dXJlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJvdW5kVGV4dHVyZSA9IHsgdHlwZTogdW5kZWZpbmVkLCB0ZXh0dXJlOiB1bmRlZmluZWQgfTtcblx0XHRcdGN1cnJlbnRCb3VuZFRleHR1cmVzWyB3ZWJnbFNsb3QgXSA9IGJvdW5kVGV4dHVyZTtcblxuXHRcdH1cblxuXHRcdGlmICggYm91bmRUZXh0dXJlLnR5cGUgIT09IHdlYmdsVHlwZSB8fCBib3VuZFRleHR1cmUudGV4dHVyZSAhPT0gd2ViZ2xUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRUZXh0dXJlU2xvdCAhPT0gd2ViZ2xTbG90ICkge1xuXG5cdFx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoIHdlYmdsU2xvdCApO1xuXHRcdFx0XHRjdXJyZW50VGV4dHVyZVNsb3QgPSB3ZWJnbFNsb3Q7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2wuYmluZFRleHR1cmUoIHdlYmdsVHlwZSwgd2ViZ2xUZXh0dXJlIHx8IGVtcHR5VGV4dHVyZXNbIHdlYmdsVHlwZSBdICk7XG5cblx0XHRcdGJvdW5kVGV4dHVyZS50eXBlID0gd2ViZ2xUeXBlO1xuXHRcdFx0Ym91bmRUZXh0dXJlLnRleHR1cmUgPSB3ZWJnbFRleHR1cmU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVuYmluZFRleHR1cmUoKSB7XG5cblx0XHRjb25zdCBib3VuZFRleHR1cmUgPSBjdXJyZW50Qm91bmRUZXh0dXJlc1sgY3VycmVudFRleHR1cmVTbG90IF07XG5cblx0XHRpZiAoIGJvdW5kVGV4dHVyZSAhPT0gdW5kZWZpbmVkICYmIGJvdW5kVGV4dHVyZS50eXBlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGdsLmJpbmRUZXh0dXJlKCBib3VuZFRleHR1cmUudHlwZSwgbnVsbCApO1xuXG5cdFx0XHRib3VuZFRleHR1cmUudHlwZSA9IHVuZGVmaW5lZDtcblx0XHRcdGJvdW5kVGV4dHVyZS50ZXh0dXJlID0gdW5kZWZpbmVkO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb21wcmVzc2VkVGV4SW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLmNvbXByZXNzZWRUZXhJbWFnZTJELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvbXByZXNzZWRUZXhJbWFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wuY29tcHJlc3NlZFRleEltYWdlM0QuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3ViSW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleFN1YkltYWdlMkQuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3ViSW1hZ2UzRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleFN1YkltYWdlM0QuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY29tcHJlc3NlZFRleFN1YkltYWdlMkQoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLmNvbXByZXNzZWRUZXhTdWJJbWFnZTNELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleFN0b3JhZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleFN0b3JhZ2UyRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhTdG9yYWdlM0QoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC50ZXhTdG9yYWdlM0QuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4SW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleEltYWdlMkQuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4SW1hZ2UzRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleEltYWdlM0QuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzY2lzc29yKCBzY2lzc29yICkge1xuXG5cdFx0aWYgKCBjdXJyZW50U2Npc3Nvci5lcXVhbHMoIHNjaXNzb3IgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGdsLnNjaXNzb3IoIHNjaXNzb3IueCwgc2Npc3Nvci55LCBzY2lzc29yLnosIHNjaXNzb3IudyApO1xuXHRcdFx0Y3VycmVudFNjaXNzb3IuY29weSggc2Npc3NvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB2aWV3cG9ydCggdmlld3BvcnQgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRWaWV3cG9ydC5lcXVhbHMoIHZpZXdwb3J0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC52aWV3cG9ydCggdmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQueiwgdmlld3BvcnQudyApO1xuXHRcdFx0Y3VycmVudFZpZXdwb3J0LmNvcHkoIHZpZXdwb3J0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVVCT01hcHBpbmcoIHVuaWZvcm1zR3JvdXAsIHByb2dyYW0gKSB7XG5cblx0XHRsZXQgbWFwcGluZyA9IHVib1Byb2dyYW1NYXAuZ2V0KCBwcm9ncmFtICk7XG5cblx0XHRpZiAoIG1hcHBpbmcgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bWFwcGluZyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0XHRcdHVib1Byb2dyYW1NYXAuc2V0KCBwcm9ncmFtLCBtYXBwaW5nICk7XG5cblx0XHR9XG5cblx0XHRsZXQgYmxvY2tJbmRleCA9IG1hcHBpbmcuZ2V0KCB1bmlmb3Jtc0dyb3VwICk7XG5cblx0XHRpZiAoIGJsb2NrSW5kZXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YmxvY2tJbmRleCA9IGdsLmdldFVuaWZvcm1CbG9ja0luZGV4KCBwcm9ncmFtLCB1bmlmb3Jtc0dyb3VwLm5hbWUgKTtcblxuXHRcdFx0bWFwcGluZy5zZXQoIHVuaWZvcm1zR3JvdXAsIGJsb2NrSW5kZXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdW5pZm9ybUJsb2NrQmluZGluZyggdW5pZm9ybXNHcm91cCwgcHJvZ3JhbSApIHtcblxuXHRcdGNvbnN0IG1hcHBpbmcgPSB1Ym9Qcm9ncmFtTWFwLmdldCggcHJvZ3JhbSApO1xuXHRcdGNvbnN0IGJsb2NrSW5kZXggPSBtYXBwaW5nLmdldCggdW5pZm9ybXNHcm91cCApO1xuXG5cdFx0aWYgKCB1Ym9CaW5kaW5ncy5nZXQoIHByb2dyYW0gKSAhPT0gYmxvY2tJbmRleCApIHtcblxuXHRcdFx0Ly8gYmluZCBzaGFkZXIgc3BlY2lmaWMgYmxvY2sgaW5kZXggdG8gZ2xvYmFsIGJsb2NrIHBvaW50XG5cdFx0XHRnbC51bmlmb3JtQmxvY2tCaW5kaW5nKCBwcm9ncmFtLCBibG9ja0luZGV4LCB1bmlmb3Jtc0dyb3VwLl9fYmluZGluZ1BvaW50SW5kZXggKTtcblxuXHRcdFx0dWJvQmluZGluZ3Muc2V0KCBwcm9ncmFtLCBibG9ja0luZGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gcmVzZXQoKSB7XG5cblx0XHQvLyByZXNldCBzdGF0ZVxuXG5cdFx0Z2wuZGlzYWJsZSggZ2wuQkxFTkQgKTtcblx0XHRnbC5kaXNhYmxlKCBnbC5DVUxMX0ZBQ0UgKTtcblx0XHRnbC5kaXNhYmxlKCBnbC5ERVBUSF9URVNUICk7XG5cdFx0Z2wuZGlzYWJsZSggZ2wuUE9MWUdPTl9PRkZTRVRfRklMTCApO1xuXHRcdGdsLmRpc2FibGUoIGdsLlNDSVNTT1JfVEVTVCApO1xuXHRcdGdsLmRpc2FibGUoIGdsLlNURU5DSUxfVEVTVCApO1xuXHRcdGdsLmRpc2FibGUoIGdsLlNBTVBMRV9BTFBIQV9UT19DT1ZFUkFHRSApO1xuXG5cdFx0Z2wuYmxlbmRFcXVhdGlvbiggZ2wuRlVOQ19BREQgKTtcblx0XHRnbC5ibGVuZEZ1bmMoIGdsLk9ORSwgZ2wuWkVSTyApO1xuXHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5PTkUsIGdsLlpFUk8sIGdsLk9ORSwgZ2wuWkVSTyApO1xuXHRcdGdsLmJsZW5kQ29sb3IoIDAsIDAsIDAsIDAgKTtcblxuXHRcdGdsLmNvbG9yTWFzayggdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSApO1xuXHRcdGdsLmNsZWFyQ29sb3IoIDAsIDAsIDAsIDAgKTtcblxuXHRcdGdsLmRlcHRoTWFzayggdHJ1ZSApO1xuXHRcdGdsLmRlcHRoRnVuYyggZ2wuTEVTUyApO1xuXHRcdGdsLmNsZWFyRGVwdGgoIDEgKTtcblxuXHRcdGdsLnN0ZW5jaWxNYXNrKCAweGZmZmZmZmZmICk7XG5cdFx0Z2wuc3RlbmNpbEZ1bmMoIGdsLkFMV0FZUywgMCwgMHhmZmZmZmZmZiApO1xuXHRcdGdsLnN0ZW5jaWxPcCggZ2wuS0VFUCwgZ2wuS0VFUCwgZ2wuS0VFUCApO1xuXHRcdGdsLmNsZWFyU3RlbmNpbCggMCApO1xuXG5cdFx0Z2wuY3VsbEZhY2UoIGdsLkJBQ0sgKTtcblx0XHRnbC5mcm9udEZhY2UoIGdsLkNDVyApO1xuXG5cdFx0Z2wucG9seWdvbk9mZnNldCggMCwgMCApO1xuXG5cdFx0Z2wuYWN0aXZlVGV4dHVyZSggZ2wuVEVYVFVSRTAgKTtcblxuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlciggZ2wuRlJBTUVCVUZGRVIsIG51bGwgKTtcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoIGdsLkRSQVdfRlJBTUVCVUZGRVIsIG51bGwgKTtcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoIGdsLlJFQURfRlJBTUVCVUZGRVIsIG51bGwgKTtcblxuXHRcdGdsLnVzZVByb2dyYW0oIG51bGwgKTtcblxuXHRcdGdsLmxpbmVXaWR0aCggMSApO1xuXG5cdFx0Z2wuc2Npc3NvciggMCwgMCwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0ICk7XG5cdFx0Z2wudmlld3BvcnQoIDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCApO1xuXG5cdFx0Ly8gcmVzZXQgaW50ZXJuYWxzXG5cblx0XHRlbmFibGVkQ2FwYWJpbGl0aWVzID0ge307XG5cblx0XHRjdXJyZW50VGV4dHVyZVNsb3QgPSBudWxsO1xuXHRcdGN1cnJlbnRCb3VuZFRleHR1cmVzID0ge307XG5cblx0XHRjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnMgPSB7fTtcblx0XHRjdXJyZW50RHJhd2J1ZmZlcnMgPSBuZXcgV2Vha01hcCgpO1xuXHRcdGRlZmF1bHREcmF3YnVmZmVycyA9IFtdO1xuXG5cdFx0Y3VycmVudFByb2dyYW0gPSBudWxsO1xuXG5cdFx0Y3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlO1xuXHRcdGN1cnJlbnRCbGVuZGluZyA9IG51bGw7XG5cdFx0Y3VycmVudEJsZW5kRXF1YXRpb24gPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XG5cdFx0Y3VycmVudEJsZW5kRHN0ID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdFx0Y3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZENvbG9yID0gbmV3IENvbG9yKCAwLCAwLCAwICk7XG5cdFx0Y3VycmVudEJsZW5kQWxwaGEgPSAwO1xuXHRcdGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IGZhbHNlO1xuXG5cdFx0Y3VycmVudEZsaXBTaWRlZCA9IG51bGw7XG5cdFx0Y3VycmVudEN1bGxGYWNlID0gbnVsbDtcblxuXHRcdGN1cnJlbnRMaW5lV2lkdGggPSBudWxsO1xuXG5cdFx0Y3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IgPSBudWxsO1xuXHRcdGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgPSBudWxsO1xuXG5cdFx0Y3VycmVudFNjaXNzb3Iuc2V0KCAwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQgKTtcblx0XHRjdXJyZW50Vmlld3BvcnQuc2V0KCAwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQgKTtcblxuXHRcdGNvbG9yQnVmZmVyLnJlc2V0KCk7XG5cdFx0ZGVwdGhCdWZmZXIucmVzZXQoKTtcblx0XHRzdGVuY2lsQnVmZmVyLnJlc2V0KCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRidWZmZXJzOiB7XG5cdFx0XHRjb2xvcjogY29sb3JCdWZmZXIsXG5cdFx0XHRkZXB0aDogZGVwdGhCdWZmZXIsXG5cdFx0XHRzdGVuY2lsOiBzdGVuY2lsQnVmZmVyXG5cdFx0fSxcblxuXHRcdGVuYWJsZTogZW5hYmxlLFxuXHRcdGRpc2FibGU6IGRpc2FibGUsXG5cblx0XHRiaW5kRnJhbWVidWZmZXI6IGJpbmRGcmFtZWJ1ZmZlcixcblx0XHRkcmF3QnVmZmVyczogZHJhd0J1ZmZlcnMsXG5cblx0XHR1c2VQcm9ncmFtOiB1c2VQcm9ncmFtLFxuXG5cdFx0c2V0QmxlbmRpbmc6IHNldEJsZW5kaW5nLFxuXHRcdHNldE1hdGVyaWFsOiBzZXRNYXRlcmlhbCxcblxuXHRcdHNldEZsaXBTaWRlZDogc2V0RmxpcFNpZGVkLFxuXHRcdHNldEN1bGxGYWNlOiBzZXRDdWxsRmFjZSxcblxuXHRcdHNldExpbmVXaWR0aDogc2V0TGluZVdpZHRoLFxuXHRcdHNldFBvbHlnb25PZmZzZXQ6IHNldFBvbHlnb25PZmZzZXQsXG5cblx0XHRzZXRTY2lzc29yVGVzdDogc2V0U2Npc3NvclRlc3QsXG5cblx0XHRhY3RpdmVUZXh0dXJlOiBhY3RpdmVUZXh0dXJlLFxuXHRcdGJpbmRUZXh0dXJlOiBiaW5kVGV4dHVyZSxcblx0XHR1bmJpbmRUZXh0dXJlOiB1bmJpbmRUZXh0dXJlLFxuXHRcdGNvbXByZXNzZWRUZXhJbWFnZTJEOiBjb21wcmVzc2VkVGV4SW1hZ2UyRCxcblx0XHRjb21wcmVzc2VkVGV4SW1hZ2UzRDogY29tcHJlc3NlZFRleEltYWdlM0QsXG5cdFx0dGV4SW1hZ2UyRDogdGV4SW1hZ2UyRCxcblx0XHR0ZXhJbWFnZTNEOiB0ZXhJbWFnZTNELFxuXG5cdFx0dXBkYXRlVUJPTWFwcGluZzogdXBkYXRlVUJPTWFwcGluZyxcblx0XHR1bmlmb3JtQmxvY2tCaW5kaW5nOiB1bmlmb3JtQmxvY2tCaW5kaW5nLFxuXG5cdFx0dGV4U3RvcmFnZTJEOiB0ZXhTdG9yYWdlMkQsXG5cdFx0dGV4U3RvcmFnZTNEOiB0ZXhTdG9yYWdlM0QsXG5cdFx0dGV4U3ViSW1hZ2UyRDogdGV4U3ViSW1hZ2UyRCxcblx0XHR0ZXhTdWJJbWFnZTNEOiB0ZXhTdWJJbWFnZTNELFxuXHRcdGNvbXByZXNzZWRUZXhTdWJJbWFnZTJEOiBjb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCxcblx0XHRjb21wcmVzc2VkVGV4U3ViSW1hZ2UzRDogY29tcHJlc3NlZFRleFN1YkltYWdlM0QsXG5cblx0XHRzY2lzc29yOiBzY2lzc29yLFxuXHRcdHZpZXdwb3J0OiB2aWV3cG9ydCxcblxuXHRcdHJlc2V0OiByZXNldFxuXG5cdH07XG5cbn1cblxuZXhwb3J0IHsgV2ViR0xTdGF0ZSB9O1xuIiwiaW1wb3J0IHsgQWxwaGFGb3JtYXQsIEx1bWluYW5jZUZvcm1hdCwgTHVtaW5hbmNlQWxwaGFGb3JtYXQsIFJlZEZvcm1hdCwgUmVkSW50ZWdlckZvcm1hdCwgUkdGb3JtYXQsIFJHSW50ZWdlckZvcm1hdCwgUkdCRm9ybWF0LCBSR0JBRm9ybWF0LCBSR0JBSW50ZWdlckZvcm1hdCwgUkdCX1MzVENfRFhUMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDNfRm9ybWF0LCBSR0JBX1MzVENfRFhUNV9Gb3JtYXQsIFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0LCBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQsIFJHQl9FVEMxX0Zvcm1hdCwgUkdCX0VUQzJfRm9ybWF0LCBSR0JBX0VUQzJfRUFDX0Zvcm1hdCwgUkdCQV9BU1RDXzR4NF9Gb3JtYXQsIFJHQkFfQVNUQ181eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg1X0Zvcm1hdCwgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg1X0Zvcm1hdCwgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQsIFJHQkFfQVNUQ184eDhfRm9ybWF0LCBSR0JBX0FTVENfMTB4NV9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDhfRm9ybWF0LCBSR0JBX0FTVENfMTB4MTBfRm9ybWF0LCBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0LCBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0LCBSR0JBX0JQVENfRm9ybWF0LCBSR0JfQlBUQ19TSUdORURfRm9ybWF0LCBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQsIFJFRF9SR1RDMV9Gb3JtYXQsIFNJR05FRF9SRURfUkdUQzFfRm9ybWF0LCBSRURfR1JFRU5fUkdUQzJfRm9ybWF0LCBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCwgVW5zaWduZWRCeXRlVHlwZSwgQnl0ZVR5cGUsIFVuc2lnbmVkU2hvcnRUeXBlLCBTaG9ydFR5cGUsIEhhbGZGbG9hdFR5cGUsIFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSwgVW5zaWduZWRTaG9ydDU1NTFUeXBlLCBVbnNpZ25lZEludFR5cGUsIEludFR5cGUsIEZsb2F0VHlwZSwgVW5zaWduZWRJbnQ1OTk5VHlwZSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbmZ1bmN0aW9uIGNvbnRhaW4oIHRleHR1cmUsIGFzcGVjdCApIHtcblxuXHRjb25zdCBpbWFnZUFzcGVjdCA9ICggdGV4dHVyZS5pbWFnZSAmJiB0ZXh0dXJlLmltYWdlLndpZHRoICkgPyB0ZXh0dXJlLmltYWdlLndpZHRoIC8gdGV4dHVyZS5pbWFnZS5oZWlnaHQgOiAxO1xuXG5cdGlmICggaW1hZ2VBc3BlY3QgPiBhc3BlY3QgKSB7XG5cblx0XHR0ZXh0dXJlLnJlcGVhdC54ID0gMTtcblx0XHR0ZXh0dXJlLnJlcGVhdC55ID0gaW1hZ2VBc3BlY3QgLyBhc3BlY3Q7XG5cblx0XHR0ZXh0dXJlLm9mZnNldC54ID0gMDtcblx0XHR0ZXh0dXJlLm9mZnNldC55ID0gKCAxIC0gdGV4dHVyZS5yZXBlYXQueSApIC8gMjtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGV4dHVyZS5yZXBlYXQueCA9IGFzcGVjdCAvIGltYWdlQXNwZWN0O1xuXHRcdHRleHR1cmUucmVwZWF0LnkgPSAxO1xuXG5cdFx0dGV4dHVyZS5vZmZzZXQueCA9ICggMSAtIHRleHR1cmUucmVwZWF0LnggKSAvIDI7XG5cdFx0dGV4dHVyZS5vZmZzZXQueSA9IDA7XG5cblx0fVxuXG5cdHJldHVybiB0ZXh0dXJlO1xuXG59XG5cbmZ1bmN0aW9uIGNvdmVyKCB0ZXh0dXJlLCBhc3BlY3QgKSB7XG5cblx0Y29uc3QgaW1hZ2VBc3BlY3QgPSAoIHRleHR1cmUuaW1hZ2UgJiYgdGV4dHVyZS5pbWFnZS53aWR0aCApID8gdGV4dHVyZS5pbWFnZS53aWR0aCAvIHRleHR1cmUuaW1hZ2UuaGVpZ2h0IDogMTtcblxuXHRpZiAoIGltYWdlQXNwZWN0ID4gYXNwZWN0ICkge1xuXG5cdFx0dGV4dHVyZS5yZXBlYXQueCA9IGFzcGVjdCAvIGltYWdlQXNwZWN0O1xuXHRcdHRleHR1cmUucmVwZWF0LnkgPSAxO1xuXG5cdFx0dGV4dHVyZS5vZmZzZXQueCA9ICggMSAtIHRleHR1cmUucmVwZWF0LnggKSAvIDI7XG5cdFx0dGV4dHVyZS5vZmZzZXQueSA9IDA7XG5cblx0fSBlbHNlIHtcblxuXHRcdHRleHR1cmUucmVwZWF0LnggPSAxO1xuXHRcdHRleHR1cmUucmVwZWF0LnkgPSBpbWFnZUFzcGVjdCAvIGFzcGVjdDtcblxuXHRcdHRleHR1cmUub2Zmc2V0LnggPSAwO1xuXHRcdHRleHR1cmUub2Zmc2V0LnkgPSAoIDEgLSB0ZXh0dXJlLnJlcGVhdC55ICkgLyAyO1xuXG5cdH1cblxuXHRyZXR1cm4gdGV4dHVyZTtcblxufVxuXG5mdW5jdGlvbiBmaWxsKCB0ZXh0dXJlICkge1xuXG5cdHRleHR1cmUucmVwZWF0LnggPSAxO1xuXHR0ZXh0dXJlLnJlcGVhdC55ID0gMTtcblxuXHR0ZXh0dXJlLm9mZnNldC54ID0gMDtcblx0dGV4dHVyZS5vZmZzZXQueSA9IDA7XG5cblx0cmV0dXJuIHRleHR1cmU7XG5cbn1cblxuXG5cbi8qKlxuICogR2l2ZW4gdGhlIHdpZHRoLCBoZWlnaHQsIGZvcm1hdCwgYW5kIHR5cGUgb2YgYSB0ZXh0dXJlLiBEZXRlcm1pbmVzIGhvdyBtYW55XG4gKiBieXRlcyBtdXN0IGJlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSB0ZXh0dXJlLlxuICovXG5mdW5jdGlvbiBnZXRCeXRlTGVuZ3RoKCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUgKSB7XG5cblx0Y29uc3QgdHlwZUJ5dGVMZW5ndGggPSBnZXRUZXh0dXJlVHlwZUJ5dGVMZW5ndGgoIHR5cGUgKTtcblxuXHRzd2l0Y2ggKCBmb3JtYXQgKSB7XG5cblx0XHQvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL09wZW5HTC1SZWZwYWdlcy9lczMuMC9odG1sL2dsVGV4SW1hZ2UyRC54aHRtbFxuXHRcdGNhc2UgQWxwaGFGb3JtYXQ6XG5cdFx0XHRyZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG5cdFx0Y2FzZSBMdW1pbmFuY2VGb3JtYXQ6XG5cdFx0XHRyZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG5cdFx0Y2FzZSBMdW1pbmFuY2VBbHBoYUZvcm1hdDpcblx0XHRcdHJldHVybiB3aWR0aCAqIGhlaWdodCAqIDI7XG5cdFx0Y2FzZSBSZWRGb3JtYXQ6XG5cdFx0XHRyZXR1cm4gKCAoIHdpZHRoICogaGVpZ2h0ICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoO1xuXHRcdGNhc2UgUmVkSW50ZWdlckZvcm1hdDpcblx0XHRcdHJldHVybiAoICggd2lkdGggKiBoZWlnaHQgKSAvIHR5cGVCeXRlTGVuZ3RoLmNvbXBvbmVudHMgKSAqIHR5cGVCeXRlTGVuZ3RoLmJ5dGVMZW5ndGg7XG5cdFx0Y2FzZSBSR0Zvcm1hdDpcblx0XHRcdHJldHVybiAoICggd2lkdGggKiBoZWlnaHQgKiAyICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoO1xuXHRcdGNhc2UgUkdJbnRlZ2VyRm9ybWF0OlxuXHRcdFx0cmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCAqIDIgKSAvIHR5cGVCeXRlTGVuZ3RoLmNvbXBvbmVudHMgKSAqIHR5cGVCeXRlTGVuZ3RoLmJ5dGVMZW5ndGg7XG5cdFx0Y2FzZSBSR0JGb3JtYXQ6XG5cdFx0XHRyZXR1cm4gKCAoIHdpZHRoICogaGVpZ2h0ICogMyApIC8gdHlwZUJ5dGVMZW5ndGguY29tcG9uZW50cyApICogdHlwZUJ5dGVMZW5ndGguYnl0ZUxlbmd0aDtcblx0XHRjYXNlIFJHQkFGb3JtYXQ6XG5cdFx0XHRyZXR1cm4gKCAoIHdpZHRoICogaGVpZ2h0ICogNCApIC8gdHlwZUJ5dGVMZW5ndGguY29tcG9uZW50cyApICogdHlwZUJ5dGVMZW5ndGguYnl0ZUxlbmd0aDtcblx0XHRjYXNlIFJHQkFJbnRlZ2VyRm9ybWF0OlxuXHRcdFx0cmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCAqIDQgKSAvIHR5cGVCeXRlTGVuZ3RoLmNvbXBvbmVudHMgKSAqIHR5cGVCeXRlTGVuZ3RoLmJ5dGVMZW5ndGg7XG5cblx0XHQvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNfc3JnYi9cblx0XHRjYXNlIFJHQl9TM1RDX0RYVDFfRm9ybWF0OlxuXHRcdGNhc2UgUkdCQV9TM1RDX0RYVDFfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAzICkgLyA0ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDMgKSAvIDQgKSAqIDg7XG5cdFx0Y2FzZSBSR0JBX1MzVENfRFhUM19Gb3JtYXQ6XG5cdFx0Y2FzZSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDMgKSAvIDQgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMyApIC8gNCApICogMTY7XG5cblx0XHQvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjL1xuXHRcdGNhc2UgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQ6XG5cdFx0Y2FzZSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gKCBNYXRoLm1heCggd2lkdGgsIDE2ICkgKiBNYXRoLm1heCggaGVpZ2h0LCA4ICkgKSAvIDQ7XG5cdFx0Y2FzZSBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdDpcblx0XHRjYXNlIFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdDpcblx0XHRcdHJldHVybiAoIE1hdGgubWF4KCB3aWR0aCwgOCApICogTWF0aC5tYXgoIGhlaWdodCwgOCApICkgLyAyO1xuXG5cdFx0Ly8gaHR0cHM6Ly9yZWdpc3RyeS5raHJvbm9zLm9yZy93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMvXG5cdFx0Y2FzZSBSR0JfRVRDMV9Gb3JtYXQ6XG5cdFx0Y2FzZSBSR0JfRVRDMl9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDMgKSAvIDQgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMyApIC8gNCApICogODtcblx0XHRjYXNlIFJHQkFfRVRDMl9FQUNfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAzICkgLyA0ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDMgKSAvIDQgKSAqIDE2O1xuXG5cdFx0Ly8gaHR0cHM6Ly9yZWdpc3RyeS5raHJvbm9zLm9yZy93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjL1xuXHRcdGNhc2UgUkdCQV9BU1RDXzR4NF9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDMgKSAvIDQgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMyApIC8gNCApICogMTY7XG5cdFx0Y2FzZSBSR0JBX0FTVENfNXg0X0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgNCApIC8gNSApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyAzICkgLyA0ICkgKiAxNjtcblx0XHRjYXNlIFJHQkFfQVNUQ181eDVfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA0ICkgLyA1ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDQgKSAvIDUgKSAqIDE2O1xuXHRcdGNhc2UgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDUgKSAvIDYgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNCApIC8gNSApICogMTY7XG5cdFx0Y2FzZSBSR0JBX0FTVENfNng2X0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgNSApIC8gNiApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA1ICkgLyA2ICkgKiAxNjtcblx0XHRjYXNlIFJHQkFfQVNUQ184eDVfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA3ICkgLyA4ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDQgKSAvIDUgKSAqIDE2O1xuXHRcdGNhc2UgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDcgKSAvIDggKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNSApIC8gNiApICogMTY7XG5cdFx0Y2FzZSBSR0JBX0FTVENfOHg4X0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgNyApIC8gOCApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA3ICkgLyA4ICkgKiAxNjtcblx0XHRjYXNlIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgOSApIC8gMTAgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNCApIC8gNSApICogMTY7XG5cdFx0Y2FzZSBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDkgKSAvIDEwICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDUgKSAvIDYgKSAqIDE2O1xuXHRcdGNhc2UgUkdCQV9BU1RDXzEweDhfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA5ICkgLyAxMCApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA3ICkgLyA4ICkgKiAxNjtcblx0XHRjYXNlIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDkgKSAvIDEwICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDkgKSAvIDEwICkgKiAxNjtcblx0XHRjYXNlIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDExICkgLyAxMiApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA5ICkgLyAxMCApICogMTY7XG5cdFx0Y2FzZSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAxMSApIC8gMTIgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMTEgKSAvIDEyICkgKiAxNjtcblxuXHRcdC8vIGh0dHBzOi8vcmVnaXN0cnkua2hyb25vcy5vcmcvd2ViZ2wvZXh0ZW5zaW9ucy9FWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9icHRjL1xuXHRcdGNhc2UgUkdCQV9CUFRDX0Zvcm1hdDpcblx0XHRjYXNlIFJHQl9CUFRDX1NJR05FRF9Gb3JtYXQ6XG5cdFx0Y2FzZSBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5jZWlsKCB3aWR0aCAvIDQgKSAqIE1hdGguY2VpbCggaGVpZ2h0IC8gNCApICogMTY7XG5cblx0XHQvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL3dlYmdsL2V4dGVuc2lvbnMvRVhUX3RleHR1cmVfY29tcHJlc3Npb25fcmd0Yy9cblx0XHRjYXNlIFJFRF9SR1RDMV9Gb3JtYXQ6XG5cdFx0Y2FzZSBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmNlaWwoIHdpZHRoIC8gNCApICogTWF0aC5jZWlsKCBoZWlnaHQgLyA0ICkgKiA4O1xuXHRcdGNhc2UgUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdDpcblx0XHRjYXNlIFNJR05FRF9SRURfR1JFRU5fUkdUQzJfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguY2VpbCggd2lkdGggLyA0ICkgKiBNYXRoLmNlaWwoIGhlaWdodCAvIDQgKSAqIDE2O1xuXG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0YFVuYWJsZSB0byBkZXRlcm1pbmUgdGV4dHVyZSBieXRlIGxlbmd0aCBmb3IgJHtmb3JtYXR9IGZvcm1hdC5gLFxuXHQpO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRleHR1cmVUeXBlQnl0ZUxlbmd0aCggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSBVbnNpZ25lZEJ5dGVUeXBlOlxuXHRcdGNhc2UgQnl0ZVR5cGU6XG5cdFx0XHRyZXR1cm4geyBieXRlTGVuZ3RoOiAxLCBjb21wb25lbnRzOiAxIH07XG5cdFx0Y2FzZSBVbnNpZ25lZFNob3J0VHlwZTpcblx0XHRjYXNlIFNob3J0VHlwZTpcblx0XHRjYXNlIEhhbGZGbG9hdFR5cGU6XG5cdFx0XHRyZXR1cm4geyBieXRlTGVuZ3RoOiAyLCBjb21wb25lbnRzOiAxIH07XG5cdFx0Y2FzZSBVbnNpZ25lZFNob3J0NDQ0NFR5cGU6XG5cdFx0Y2FzZSBVbnNpZ25lZFNob3J0NTU1MVR5cGU6XG5cdFx0XHRyZXR1cm4geyBieXRlTGVuZ3RoOiAyLCBjb21wb25lbnRzOiA0IH07XG5cdFx0Y2FzZSBVbnNpZ25lZEludFR5cGU6XG5cdFx0Y2FzZSBJbnRUeXBlOlxuXHRcdGNhc2UgRmxvYXRUeXBlOlxuXHRcdFx0cmV0dXJuIHsgYnl0ZUxlbmd0aDogNCwgY29tcG9uZW50czogMSB9O1xuXHRcdGNhc2UgVW5zaWduZWRJbnQ1OTk5VHlwZTpcblx0XHRcdHJldHVybiB7IGJ5dGVMZW5ndGg6IDQsIGNvbXBvbmVudHM6IDMgfTtcblxuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKCBgVW5rbm93biB0ZXh0dXJlIHR5cGUgJHt0eXBlfS5gICk7XG5cbn1cblxuY29uc3QgVGV4dHVyZVV0aWxzID0ge1xuXHRjb250YWluLFxuXHRjb3Zlcixcblx0ZmlsbCxcblx0Z2V0Qnl0ZUxlbmd0aFxufTtcblxuZXhwb3J0IHsgY29udGFpbiwgY292ZXIsIGZpbGwsIGdldEJ5dGVMZW5ndGgsIFRleHR1cmVVdGlscyB9O1xuIiwiaW1wb3J0IHsgTGluZWFyRmlsdGVyLCBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLCBSR0JBRm9ybWF0LCBEZXB0aEZvcm1hdCwgRGVwdGhTdGVuY2lsRm9ybWF0LCBVbnNpZ25lZEludFR5cGUsIEZsb2F0VHlwZSwgTWlycm9yZWRSZXBlYXRXcmFwcGluZywgQ2xhbXBUb0VkZ2VXcmFwcGluZywgUmVwZWF0V3JhcHBpbmcsIFVuc2lnbmVkQnl0ZVR5cGUsIE5vQ29sb3JTcGFjZSwgTGluZWFyU1JHQkNvbG9yU3BhY2UsIE5ldmVyQ29tcGFyZSwgQWx3YXlzQ29tcGFyZSwgTGVzc0NvbXBhcmUsIExlc3NFcXVhbENvbXBhcmUsIEVxdWFsQ29tcGFyZSwgR3JlYXRlckVxdWFsQ29tcGFyZSwgR3JlYXRlckNvbXBhcmUsIE5vdEVxdWFsQ29tcGFyZSwgU1JHQlRyYW5zZmVyLCBMaW5lYXJUcmFuc2ZlciwgVW5zaWduZWRTaG9ydFR5cGUsIFVuc2lnbmVkSW50MjQ4VHlwZSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50TlMgfSBmcm9tICcuLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgeyBDb2xvck1hbmFnZW1lbnQgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yTWFuYWdlbWVudC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IGdldEJ5dGVMZW5ndGggfSBmcm9tICcuLi8uLi9leHRyYXMvVGV4dHVyZVV0aWxzLmpzJztcblxuZnVuY3Rpb24gV2ViR0xUZXh0dXJlcyggX2dsLCBleHRlbnNpb25zLCBzdGF0ZSwgcHJvcGVydGllcywgY2FwYWJpbGl0aWVzLCB1dGlscywgaW5mbyApIHtcblxuXHRjb25zdCBtdWx0aXNhbXBsZWRSVFRFeHQgPSBleHRlbnNpb25zLmhhcyggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKSA/IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApIDogbnVsbDtcblx0Y29uc3Qgc3VwcG9ydHNJbnZhbGlkYXRlRnJhbWVidWZmZXIgPSB0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyA/IGZhbHNlIDogL09jdWx1c0Jyb3dzZXIvZy50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICk7XG5cblx0Y29uc3QgX2ltYWdlRGltZW5zaW9ucyA9IG5ldyBWZWN0b3IyKCk7XG5cdGNvbnN0IF92aWRlb1RleHR1cmVzID0gbmV3IFdlYWtNYXAoKTtcblx0bGV0IF9jYW52YXM7XG5cblx0Y29uc3QgX3NvdXJjZXMgPSBuZXcgV2Vha01hcCgpOyAvLyBtYXBzIFdlYmdsVGV4dHVyZSBvYmplY3RzIHRvIGluc3RhbmNlcyBvZiBTb3VyY2VcblxuXHQvLyBjb3Jkb3ZhIGlPUyAoYXMgb2YgNS4wKSBzdGlsbCB1c2VzIFVJV2ViVmlldywgd2hpY2ggcHJvdmlkZXMgT2Zmc2NyZWVuQ2FudmFzLFxuXHQvLyBhbHNvIE9mZnNjcmVlbkNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIiksIGJ1dCBub3QgT2Zmc2NyZWVuQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKSFcblx0Ly8gU29tZSBpbXBsZW1lbnRhdGlvbnMgbWF5IG9ubHkgaW1wbGVtZW50IE9mZnNjcmVlbkNhbnZhcyBwYXJ0aWFsbHkgKGUuZy4gbGFja2luZyAyZCkuXG5cblx0bGV0IHVzZU9mZnNjcmVlbkNhbnZhcyA9IGZhbHNlO1xuXG5cdHRyeSB7XG5cblx0XHR1c2VPZmZzY3JlZW5DYW52YXMgPSB0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSAndW5kZWZpbmVkJ1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBhdC9jb21wYXRcblx0XHRcdCYmICggbmV3IE9mZnNjcmVlbkNhbnZhcyggMSwgMSApLmdldENvbnRleHQoICcyZCcgKSApICE9PSBudWxsO1xuXG5cdH0gY2F0Y2ggKCBlcnIgKSB7XG5cblx0XHQvLyBJZ25vcmUgYW55IGVycm9yc1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVDYW52YXMoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHQvLyBVc2UgT2Zmc2NyZWVuQ2FudmFzIHdoZW4gYXZhaWxhYmxlLiBTcGVjaWFsbHkgbmVlZGVkIGluIHdlYiB3b3JrZXJzXG5cblx0XHRyZXR1cm4gdXNlT2Zmc2NyZWVuQ2FudmFzID9cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wYXQvY29tcGF0XG5cdFx0XHRuZXcgT2Zmc2NyZWVuQ2FudmFzKCB3aWR0aCwgaGVpZ2h0ICkgOiBjcmVhdGVFbGVtZW50TlMoICdjYW52YXMnICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlc2l6ZUltYWdlKCBpbWFnZSwgbmVlZHNOZXdDYW52YXMsIG1heFNpemUgKSB7XG5cblx0XHRsZXQgc2NhbGUgPSAxO1xuXG5cdFx0Y29uc3QgZGltZW5zaW9ucyA9IGdldERpbWVuc2lvbnMoIGltYWdlICk7XG5cblx0XHQvLyBoYW5kbGUgY2FzZSBpZiB0ZXh0dXJlIGV4Y2VlZHMgbWF4IHNpemVcblxuXHRcdGlmICggZGltZW5zaW9ucy53aWR0aCA+IG1heFNpemUgfHwgZGltZW5zaW9ucy5oZWlnaHQgPiBtYXhTaXplICkge1xuXG5cdFx0XHRzY2FsZSA9IG1heFNpemUgLyBNYXRoLm1heCggZGltZW5zaW9ucy53aWR0aCwgZGltZW5zaW9ucy5oZWlnaHQgKTtcblxuXHRcdH1cblxuXHRcdC8vIG9ubHkgcGVyZm9ybSByZXNpemUgaWYgbmVjZXNzYXJ5XG5cblx0XHRpZiAoIHNjYWxlIDwgMSApIHtcblxuXHRcdFx0Ly8gb25seSBwZXJmb3JtIHJlc2l6ZSBmb3IgY2VydGFpbiBpbWFnZSB0eXBlc1xuXG5cdFx0XHRpZiAoICggdHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHx8XG5cdFx0XHRcdCggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50ICkgfHxcblx0XHRcdFx0KCB0eXBlb2YgSW1hZ2VCaXRtYXAgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VCaXRtYXAgKSB8fFxuXHRcdFx0XHQoIHR5cGVvZiBWaWRlb0ZyYW1lICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIFZpZGVvRnJhbWUgKSApIHtcblxuXHRcdFx0XHRjb25zdCB3aWR0aCA9IE1hdGguZmxvb3IoIHNjYWxlICogZGltZW5zaW9ucy53aWR0aCApO1xuXHRcdFx0XHRjb25zdCBoZWlnaHQgPSBNYXRoLmZsb29yKCBzY2FsZSAqIGRpbWVuc2lvbnMuaGVpZ2h0ICk7XG5cblx0XHRcdFx0aWYgKCBfY2FudmFzID09PSB1bmRlZmluZWQgKSBfY2FudmFzID0gY3JlYXRlQ2FudmFzKCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdFx0Ly8gY3ViZSB0ZXh0dXJlcyBjYW4ndCByZXVzZSB0aGUgc2FtZSBjYW52YXNcblxuXHRcdFx0XHRjb25zdCBjYW52YXMgPSBuZWVkc05ld0NhbnZhcyA/IGNyZWF0ZUNhbnZhcyggd2lkdGgsIGhlaWdodCApIDogX2NhbnZhcztcblxuXHRcdFx0XHRjYW52YXMud2lkdGggPSB3aWR0aDtcblx0XHRcdFx0Y2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuXHRcdFx0XHRjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcblx0XHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoIGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBoYXMgYmVlbiByZXNpemVkIGZyb20gKCcgKyBkaW1lbnNpb25zLndpZHRoICsgJ3gnICsgZGltZW5zaW9ucy5oZWlnaHQgKyAnKSB0byAoJyArIHdpZHRoICsgJ3gnICsgaGVpZ2h0ICsgJykuJyApO1xuXG5cdFx0XHRcdHJldHVybiBjYW52YXM7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCAnZGF0YScgaW4gaW1hZ2UgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBJbWFnZSBpbiBEYXRhVGV4dHVyZSBpcyB0b28gYmlnICgnICsgZGltZW5zaW9ucy53aWR0aCArICd4JyArIGRpbWVuc2lvbnMuaGVpZ2h0ICsgJykuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlICkge1xuXG5cdFx0cmV0dXJuIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBOZWFyZXN0RmlsdGVyICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBMaW5lYXJGaWx0ZXI7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlTWlwbWFwKCB0YXJnZXQgKSB7XG5cblx0XHRfZ2wuZ2VuZXJhdGVNaXBtYXAoIHRhcmdldCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRJbnRlcm5hbEZvcm1hdCggaW50ZXJuYWxGb3JtYXROYW1lLCBnbEZvcm1hdCwgZ2xUeXBlLCBjb2xvclNwYWNlLCBmb3JjZUxpbmVhclRyYW5zZmVyID0gZmFsc2UgKSB7XG5cblx0XHRpZiAoIGludGVybmFsRm9ybWF0TmFtZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBfZ2xbIGludGVybmFsRm9ybWF0TmFtZSBdICE9PSB1bmRlZmluZWQgKSByZXR1cm4gX2dsWyBpbnRlcm5hbEZvcm1hdE5hbWUgXTtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byB1c2Ugbm9uLWV4aXN0aW5nIFdlYkdMIGludGVybmFsIGZvcm1hdCBcXCcnICsgaW50ZXJuYWxGb3JtYXROYW1lICsgJ1xcJycgKTtcblxuXHRcdH1cblxuXHRcdGxldCBpbnRlcm5hbEZvcm1hdCA9IGdsRm9ybWF0O1xuXG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gX2dsLlJFRCApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlIzMkY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkhBTEZfRkxPQVQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SMTZGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjg7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkVEX0lOVEVHRVIgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfQllURSApIGludGVybmFsRm9ybWF0ID0gX2dsLlI4VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX1NIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjE2VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0lOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlIzMlVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjhJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5TSE9SVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlIxNkk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLklOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlIzMkk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkcgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuRkxPQVQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzMyRjtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuSEFMRl9GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHMTZGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkc4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gX2dsLlJHX0lOVEVHRVIgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfQllURSApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHOFVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9TSE9SVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHMTZVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkczMlVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkc4STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzE2STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkczMkk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkdCICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0lOVF81XzlfOV85X1JFViApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjlfRTU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkdCQSApIHtcblxuXHRcdFx0Y29uc3QgdHJhbnNmZXIgPSBmb3JjZUxpbmVhclRyYW5zZmVyID8gTGluZWFyVHJhbnNmZXIgOiBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIGNvbG9yU3BhY2UgKTtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkEzMkY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkhBTEZfRkxPQVQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0JBMTZGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IF9nbC5TUkdCOF9BTFBIQTggOiBfZ2wuUkdCQTg7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX1NIT1JUXzRfNF80XzQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0JBNDtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfU0hPUlRfNV81XzVfMSApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjVfQTE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGludGVybmFsRm9ybWF0ID09PSBfZ2wuUjE2RiB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gX2dsLlIzMkYgfHxcblx0XHRcdGludGVybmFsRm9ybWF0ID09PSBfZ2wuUkcxNkYgfHwgaW50ZXJuYWxGb3JtYXQgPT09IF9nbC5SRzMyRiB8fFxuXHRcdFx0aW50ZXJuYWxGb3JtYXQgPT09IF9nbC5SR0JBMTZGIHx8IGludGVybmFsRm9ybWF0ID09PSBfZ2wuUkdCQTMyRiApIHtcblxuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGludGVybmFsRm9ybWF0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRJbnRlcm5hbERlcHRoRm9ybWF0KCB1c2VTdGVuY2lsLCBkZXB0aFR5cGUgKSB7XG5cblx0XHRsZXQgZ2xJbnRlcm5hbEZvcm1hdDtcblx0XHRpZiAoIHVzZVN0ZW5jaWwgKSB7XG5cblx0XHRcdGlmICggZGVwdGhUeXBlID09PSBudWxsIHx8IGRlcHRoVHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlIHx8IGRlcHRoVHlwZSA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkge1xuXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBfZ2wuREVQVEgyNF9TVEVOQ0lMODtcblxuXHRcdFx0fSBlbHNlIGlmICggZGVwdGhUeXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSDMyRl9TVEVOQ0lMODtcblxuXHRcdFx0fSBlbHNlIGlmICggZGVwdGhUeXBlID09PSBVbnNpZ25lZFNob3J0VHlwZSApIHtcblxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIMjRfU1RFTkNJTDg7XG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ0RlcHRoVGV4dHVyZTogMTYgYml0IGRlcHRoIGF0dGFjaG1lbnQgaXMgbm90IHN1cHBvcnRlZCB3aXRoIHN0ZW5jaWwuIFVzaW5nIDI0LWJpdCBhdHRhY2htZW50LicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBkZXB0aFR5cGUgPT09IG51bGwgfHwgZGVwdGhUeXBlID09PSBVbnNpZ25lZEludFR5cGUgfHwgZGVwdGhUeXBlID09PSBVbnNpZ25lZEludDI0OFR5cGUgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSF9DT01QT05FTlQyNDtcblxuXHRcdFx0fSBlbHNlIGlmICggZGVwdGhUeXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSF9DT01QT05FTlQzMkY7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGRlcHRoVHlwZSA9PT0gVW5zaWduZWRTaG9ydFR5cGUgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSF9DT01QT05FTlQxNjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGdsSW50ZXJuYWxGb3JtYXQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldE1pcExldmVscyggdGV4dHVyZSwgaW1hZ2UgKSB7XG5cblx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApID09PSB0cnVlIHx8ICggdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICkgKSB7XG5cblx0XHRcdHJldHVybiBNYXRoLmxvZzIoIE1hdGgubWF4KCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICkgKSArIDE7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLm1pcG1hcHMgIT09IHVuZGVmaW5lZCAmJiB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Ly8gdXNlci1kZWZpbmVkIG1pcG1hcHNcblxuXHRcdFx0cmV0dXJuIHRleHR1cmUubWlwbWFwcy5sZW5ndGg7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgJiYgQXJyYXkuaXNBcnJheSggdGV4dHVyZS5pbWFnZSApICkge1xuXG5cdFx0XHRyZXR1cm4gaW1hZ2UubWlwbWFwcy5sZW5ndGg7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyB0ZXh0dXJlIHdpdGhvdXQgbWlwbWFwcyAob25seSBiYXNlIGxldmVsKVxuXG5cdFx0XHRyZXR1cm4gMTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBvblRleHR1cmVEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSBldmVudC50YXJnZXQ7XG5cblx0XHR0ZXh0dXJlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApIHtcblxuXHRcdFx0X3ZpZGVvVGV4dHVyZXMuZGVsZXRlKCB0ZXh0dXJlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSBldmVudC50YXJnZXQ7XG5cblx0XHRyZW5kZXJUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblJlbmRlclRhcmdldERpc3Bvc2UgKTtcblxuXHRcdGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVUZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Ly8gY2hlY2sgaWYgaXQncyBuZWNlc3NhcnkgdG8gcmVtb3ZlIHRoZSBXZWJHTFRleHR1cmUgb2JqZWN0XG5cblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblx0XHRjb25zdCB3ZWJnbFRleHR1cmVzID0gX3NvdXJjZXMuZ2V0KCBzb3VyY2UgKTtcblxuXHRcdGlmICggd2ViZ2xUZXh0dXJlcyApIHtcblxuXHRcdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlID0gd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSBdO1xuXHRcdFx0d2ViZ2xUZXh0dXJlLnVzZWRUaW1lcyAtLTtcblxuXHRcdFx0Ly8gdGhlIFdlYkdMVGV4dHVyZSBvYmplY3QgaXMgbm90IHVzZWQgYW55bW9yZSwgcmVtb3ZlIGl0XG5cblx0XHRcdGlmICggd2ViZ2xUZXh0dXJlLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0XHRkZWxldGVUZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVtb3ZlIHRoZSB3ZWFrIG1hcCBlbnRyeSBpZiBubyBXZWJHTFRleHR1cmUgdXNlcyB0aGUgc291cmNlIGFueW1vcmVcblxuXHRcdFx0aWYgKCBPYmplY3Qua2V5cyggd2ViZ2xUZXh0dXJlcyApLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHRfc291cmNlcy5kZWxldGUoIHNvdXJjZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggdGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkZWxldGVUZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXHRcdF9nbC5kZWxldGVUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0Y29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG5cdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlcyA9IF9zb3VyY2VzLmdldCggc291cmNlICk7XG5cdFx0ZGVsZXRlIHdlYmdsVGV4dHVyZXNbIHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgXTtcblxuXHRcdGluZm8ubWVtb3J5LnRleHR1cmVzIC0tO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGxldmVsID0gMDsgbGV2ZWwgPCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdLmxlbmd0aDsgbGV2ZWwgKysgKSBfZ2wuZGVsZXRlRnJhbWVidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF1bIGxldmVsIF0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKSApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLmxlbmd0aDsgbGV2ZWwgKysgKSBfZ2wuZGVsZXRlRnJhbWVidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBsZXZlbCBdICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApO1xuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApIF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlci5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGF0dGFjaG1lbnRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmVzWyBpIF0gKTtcblxuXHRcdFx0aWYgKCBhdHRhY2htZW50UHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApIHtcblxuXHRcdFx0XHRfZ2wuZGVsZXRlVGV4dHVyZSggYXR0YWNobWVudFByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyAtLTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggdGV4dHVyZXNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGxldCB0ZXh0dXJlVW5pdHMgPSAwO1xuXG5cdGZ1bmN0aW9uIHJlc2V0VGV4dHVyZVVuaXRzKCkge1xuXG5cdFx0dGV4dHVyZVVuaXRzID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWxsb2NhdGVUZXh0dXJlVW5pdCgpIHtcblxuXHRcdGNvbnN0IHRleHR1cmVVbml0ID0gdGV4dHVyZVVuaXRzO1xuXG5cdFx0aWYgKCB0ZXh0dXJlVW5pdCA+PSBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZXMgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMVGV4dHVyZXM6IFRyeWluZyB0byB1c2UgJyArIHRleHR1cmVVbml0ICsgJyB0ZXh0dXJlIHVuaXRzIHdoaWxlIHRoaXMgR1BVIHN1cHBvcnRzIG9ubHkgJyArIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlcyApO1xuXG5cdFx0fVxuXG5cdFx0dGV4dHVyZVVuaXRzICs9IDE7XG5cblx0XHRyZXR1cm4gdGV4dHVyZVVuaXQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFRleHR1cmVDYWNoZUtleSggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLndyYXBTICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS53cmFwVCApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUud3JhcFIgfHwgMCApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUubWFnRmlsdGVyICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5taW5GaWx0ZXIgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmFuaXNvdHJvcHkgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmludGVybmFsRm9ybWF0ICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5mb3JtYXQgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLnR5cGUgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuZmxpcFkgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlMkQoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgKSB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICYmIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdGNvbnN0IGltYWdlID0gdGV4dHVyZS5pbWFnZTtcblxuXHRcdFx0aWYgKCBpbWFnZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBubyBpbWFnZSBkYXRhIGZvdW5kLicgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaW1hZ2UuY29tcGxldGUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIGluY29tcGxldGUnICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfMkQsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUyREFycmF5KCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgX2dsLlRFWFRVUkUwICsgc2xvdCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlM0QoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfM0QsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmVDdWJlKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRDdWJlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIF9nbC5URVhUVVJFMCArIHNsb3QgKTtcblxuXHR9XG5cblx0Y29uc3Qgd3JhcHBpbmdUb0dMID0ge1xuXHRcdFsgUmVwZWF0V3JhcHBpbmcgXTogX2dsLlJFUEVBVCxcblx0XHRbIENsYW1wVG9FZGdlV3JhcHBpbmcgXTogX2dsLkNMQU1QX1RPX0VER0UsXG5cdFx0WyBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIF06IF9nbC5NSVJST1JFRF9SRVBFQVRcblx0fTtcblxuXHRjb25zdCBmaWx0ZXJUb0dMID0ge1xuXHRcdFsgTmVhcmVzdEZpbHRlciBdOiBfZ2wuTkVBUkVTVCxcblx0XHRbIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIF06IF9nbC5ORUFSRVNUX01JUE1BUF9ORUFSRVNULFxuXHRcdFsgTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciBdOiBfZ2wuTkVBUkVTVF9NSVBNQVBfTElORUFSLFxuXG5cdFx0WyBMaW5lYXJGaWx0ZXIgXTogX2dsLkxJTkVBUixcblx0XHRbIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgXTogX2dsLkxJTkVBUl9NSVBNQVBfTkVBUkVTVCxcblx0XHRbIExpbmVhck1pcG1hcExpbmVhckZpbHRlciBdOiBfZ2wuTElORUFSX01JUE1BUF9MSU5FQVJcblx0fTtcblxuXHRjb25zdCBjb21wYXJlVG9HTCA9IHtcblx0XHRbIE5ldmVyQ29tcGFyZSBdOiBfZ2wuTkVWRVIsXG5cdFx0WyBBbHdheXNDb21wYXJlIF06IF9nbC5BTFdBWVMsXG5cdFx0WyBMZXNzQ29tcGFyZSBdOiBfZ2wuTEVTUyxcblx0XHRbIExlc3NFcXVhbENvbXBhcmUgXTogX2dsLkxFUVVBTCxcblx0XHRbIEVxdWFsQ29tcGFyZSBdOiBfZ2wuRVFVQUwsXG5cdFx0WyBHcmVhdGVyRXF1YWxDb21wYXJlIF06IF9nbC5HRVFVQUwsXG5cdFx0WyBHcmVhdGVyQ29tcGFyZSBdOiBfZ2wuR1JFQVRFUixcblx0XHRbIE5vdEVxdWFsQ29tcGFyZSBdOiBfZ2wuTk9URVFVQUxcblx0fTtcblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gRmxvYXRUeXBlICYmIGV4dGVuc2lvbnMuaGFzKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApID09PSBmYWxzZSAmJlxuXHRcdFx0KCB0ZXh0dXJlLm1hZ0ZpbHRlciA9PT0gTGluZWFyRmlsdGVyIHx8IHRleHR1cmUubWFnRmlsdGVyID09PSBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyIHx8IHRleHR1cmUubWFnRmlsdGVyID09PSBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyIHx8IHRleHR1cmUubWFnRmlsdGVyID09PSBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgfHxcblx0XHRcdHRleHR1cmUubWluRmlsdGVyID09PSBMaW5lYXJGaWx0ZXIgfHwgdGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgfHwgdGV4dHVyZS5taW5GaWx0ZXIgPT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgfHwgdGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlciApICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVbmFibGUgdG8gdXNlIGxpbmVhciBmaWx0ZXJpbmcgd2l0aCBmbG9hdGluZyBwb2ludCB0ZXh0dXJlcy4gT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2UuJyApO1xuXG5cdFx0fVxuXG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9XUkFQX1MsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwUyBdICk7XG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9XUkFQX1QsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwVCBdICk7XG5cblx0XHRpZiAoIHRleHR1cmVUeXBlID09PSBfZ2wuVEVYVFVSRV8zRCB8fCB0ZXh0dXJlVHlwZSA9PT0gX2dsLlRFWFRVUkVfMkRfQVJSQVkgKSB7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfV1JBUF9SLCB3cmFwcGluZ1RvR0xbIHRleHR1cmUud3JhcFIgXSApO1xuXG5cdFx0fVxuXG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1hZ0ZpbHRlciBdICk7XG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1pbkZpbHRlciBdICk7XG5cblx0XHRpZiAoIHRleHR1cmUuY29tcGFyZUZ1bmN0aW9uICkge1xuXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIF9nbC5URVhUVVJFX0NPTVBBUkVfTU9ERSwgX2dsLkNPTVBBUkVfUkVGX1RPX1RFWFRVUkUgKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfQ09NUEFSRV9GVU5DLCBjb21wYXJlVG9HTFsgdGV4dHVyZS5jb21wYXJlRnVuY3Rpb24gXSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBleHRlbnNpb25zLmhhcyggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm1hZ0ZpbHRlciA9PT0gTmVhcmVzdEZpbHRlciApIHJldHVybjtcblx0XHRcdGlmICggdGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlciApIHJldHVybjtcblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgJiYgZXh0ZW5zaW9ucy5oYXMoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICkgPT09IGZhbHNlICkgcmV0dXJuOyAvLyB2ZXJpZnkgZXh0ZW5zaW9uXG5cblx0XHRcdGlmICggdGV4dHVyZS5hbmlzb3Ryb3B5ID4gMSB8fCBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fY3VycmVudEFuaXNvdHJvcHkgKSB7XG5cblx0XHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cdFx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJmKCB0ZXh0dXJlVHlwZSwgZXh0ZW5zaW9uLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBNYXRoLm1pbiggdGV4dHVyZS5hbmlzb3Ryb3B5LCBjYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpICkgKTtcblx0XHRcdFx0cHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX2N1cnJlbnRBbmlzb3Ryb3B5ID0gdGV4dHVyZS5hbmlzb3Ryb3B5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSApIHtcblxuXHRcdGxldCBmb3JjZVVwbG9hZCA9IGZhbHNlO1xuXG5cdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9IHRydWU7XG5cblx0XHRcdHRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHR9XG5cblx0XHQvLyBjcmVhdGUgU291cmNlIDwtPiBXZWJHTFRleHR1cmVzIG1hcHBpbmcgaWYgbmVjZXNzYXJ5XG5cblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblx0XHRsZXQgd2ViZ2xUZXh0dXJlcyA9IF9zb3VyY2VzLmdldCggc291cmNlICk7XG5cblx0XHRpZiAoIHdlYmdsVGV4dHVyZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0d2ViZ2xUZXh0dXJlcyA9IHt9O1xuXHRcdFx0X3NvdXJjZXMuc2V0KCBzb3VyY2UsIHdlYmdsVGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBXZWJHTFRleHR1cmUgb2JqZWN0IGZvciB0aGUgZ2l2ZW4gdGV4dHVyZSBwYXJhbWV0ZXJzXG5cblx0XHRjb25zdCB0ZXh0dXJlQ2FjaGVLZXkgPSBnZXRUZXh0dXJlQ2FjaGVLZXkoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZUNhY2hlS2V5ICE9PSB0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5ICkge1xuXG5cdFx0XHQvLyBpZiBub3QsIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBXZWJHTFRleHR1cmVcblxuXHRcdFx0aWYgKCB3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlQ2FjaGVLZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIGNyZWF0ZSBuZXcgZW50cnlcblxuXHRcdFx0XHR3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlQ2FjaGVLZXkgXSA9IHtcblx0XHRcdFx0XHR0ZXh0dXJlOiBfZ2wuY3JlYXRlVGV4dHVyZSgpLFxuXHRcdFx0XHRcdHVzZWRUaW1lczogMFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGluZm8ubWVtb3J5LnRleHR1cmVzICsrO1xuXG5cdFx0XHRcdC8vIHdoZW4gYSBuZXcgaW5zdGFuY2Ugb2YgV2ViR0xUZXh0dXJlIHdhcyBjcmVhdGVkLCBhIHRleHR1cmUgdXBsb2FkIGlzIHJlcXVpcmVkXG5cdFx0XHRcdC8vIGV2ZW4gaWYgdGhlIGltYWdlIGNvbnRlbnRzIGFyZSBpZGVudGljYWxcblxuXHRcdFx0XHRmb3JjZVVwbG9hZCA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0d2ViZ2xUZXh0dXJlc1sgdGV4dHVyZUNhY2hlS2V5IF0udXNlZFRpbWVzICsrO1xuXG5cdFx0XHQvLyBldmVyeSB0aW1lIHRoZSB0ZXh0dXJlIGNhY2hlIGtleSBjaGFuZ2VzLCBpdCdzIG5lY2Vzc2FyeSB0byBjaGVjayBpZiBhbiBpbnN0YW5jZSBvZlxuXHRcdFx0Ly8gV2ViR0xUZXh0dXJlIGNhbiBiZSBkZWxldGVkIGluIG9yZGVyIHRvIGF2b2lkIGEgbWVtb3J5IGxlYWsuXG5cblx0XHRcdGNvbnN0IHdlYmdsVGV4dHVyZSA9IHdlYmdsVGV4dHVyZXNbIHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgXTtcblxuXHRcdFx0aWYgKCB3ZWJnbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5IF0udXNlZFRpbWVzIC0tO1xuXG5cdFx0XHRcdGlmICggd2ViZ2xUZXh0dXJlLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0XHRcdGRlbGV0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gc3RvcmUgcmVmZXJlbmNlcyB0byBjYWNoZSBrZXkgYW5kIFdlYkdMVGV4dHVyZSBvYmplY3RcblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSA9IHRleHR1cmVDYWNoZUtleTtcblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZUNhY2hlS2V5IF0udGV4dHVyZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmb3JjZVVwbG9hZDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRsZXQgdGV4dHVyZVR5cGUgPSBfZ2wuVEVYVFVSRV8yRDtcblxuXHRcdGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgfHwgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB0ZXh0dXJlVHlwZSA9IF9nbC5URVhUVVJFXzJEX0FSUkFZO1xuXHRcdGlmICggdGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB0ZXh0dXJlVHlwZSA9IF9nbC5URVhUVVJFXzNEO1xuXG5cdFx0Y29uc3QgZm9yY2VVcGxvYWQgPSBpbml0VGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUgKTtcblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblxuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIF9nbC5URVhUVVJFMCArIHNsb3QgKTtcblxuXHRcdGNvbnN0IHNvdXJjZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggc291cmNlICk7XG5cblx0XHRpZiAoIHNvdXJjZS52ZXJzaW9uICE9PSBzb3VyY2VQcm9wZXJ0aWVzLl9fdmVyc2lvbiB8fCBmb3JjZVVwbG9hZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggX2dsLlRFWFRVUkUwICsgc2xvdCApO1xuXG5cdFx0XHRjb25zdCB3b3JraW5nUHJpbWFyaWVzID0gQ29sb3JNYW5hZ2VtZW50LmdldFByaW1hcmllcyggQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICk7XG5cdFx0XHRjb25zdCB0ZXh0dXJlUHJpbWFyaWVzID0gdGV4dHVyZS5jb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgPyBudWxsIDogQ29sb3JNYW5hZ2VtZW50LmdldFByaW1hcmllcyggdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cdFx0XHRjb25zdCB1bnBhY2tDb252ZXJzaW9uID0gdGV4dHVyZS5jb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgfHwgd29ya2luZ1ByaW1hcmllcyA9PT0gdGV4dHVyZVByaW1hcmllcyA/IF9nbC5OT05FIDogX2dsLkJST1dTRVJfREVGQVVMVF9XRUJHTDtcblxuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdGV4dHVyZS5mbGlwWSApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19BTElHTk1FTlQsIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfQ09MT1JTUEFDRV9DT05WRVJTSU9OX1dFQkdMLCB1bnBhY2tDb252ZXJzaW9uICk7XG5cblx0XHRcdGxldCBpbWFnZSA9IHJlc2l6ZUltYWdlKCB0ZXh0dXJlLmltYWdlLCBmYWxzZSwgY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplICk7XG5cdFx0XHRpbWFnZSA9IHZlcmlmeUNvbG9yU3BhY2UoIHRleHR1cmUsIGltYWdlICk7XG5cblx0XHRcdGNvbnN0IGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQsIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXG5cdFx0XHRjb25zdCBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblx0XHRcdGxldCBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIHRleHR1cmUuY29sb3JTcGFjZSwgdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApO1xuXG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUgKTtcblxuXHRcdFx0bGV0IG1pcG1hcDtcblx0XHRcdGNvbnN0IG1pcG1hcHMgPSB0ZXh0dXJlLm1pcG1hcHM7XG5cblx0XHRcdGNvbnN0IHVzZVRleFN0b3JhZ2UgPSAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgIT09IHRydWUgKTtcblx0XHRcdGNvbnN0IGFsbG9jYXRlTWVtb3J5ID0gKCBzb3VyY2VQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9PT0gdW5kZWZpbmVkICkgfHwgKCBmb3JjZVVwbG9hZCA9PT0gdHJ1ZSApO1xuXHRcdFx0Y29uc3QgZGF0YVJlYWR5ID0gc291cmNlLmRhdGFSZWFkeTtcblx0XHRcdGNvbnN0IGxldmVscyA9IGdldE1pcExldmVscyggdGV4dHVyZSwgaW1hZ2UgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbERlcHRoRm9ybWF0KCB0ZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0LCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHQvL1xuXG5cdFx0XHRcdGlmICggYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfMkQsIDEsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBudWxsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0Ly8gdXNlIG1hbnVhbGx5IGNyZWF0ZWQgbWlwbWFwcyBpZiBhdmFpbGFibGVcblx0XHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXG5cdFx0XHRcdC8vIHNldCAwIGxldmVsIG1pcG1hcCBhbmQgdGhlbiB1c2UgR0wgdG8gZ2VuZXJhdGUgb3RoZXIgbWlwbWFwIGxldmVsc1xuXG5cdFx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcHNbIDAgXS53aWR0aCwgbWlwbWFwc1sgMCBdLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBzWyAwIF0ud2lkdGgsIG1pcG1hcHNbIDAgXS5oZWlnaHQsIGltYWdlLmRlcHRoICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbWlwbWFwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ2xGb3JtYXQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdGV4dHVyZS5sYXllclVwZGF0ZXMuc2l6ZSA+IDAgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBsYXllckJ5dGVMZW5ndGggPSBnZXRCeXRlTGVuZ3RoKCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZvciAoIGNvbnN0IGxheWVySW5kZXggb2YgdGV4dHVyZS5sYXllclVwZGF0ZXMgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGxheWVyRGF0YSA9IG1pcG1hcC5kYXRhLnN1YmFycmF5KFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsYXllckluZGV4ICogbGF5ZXJCeXRlTGVuZ3RoIC8gbWlwbWFwLmRhdGEuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbGF5ZXJJbmRleCArIDEgKSAqIGxheWVyQnl0ZUxlbmd0aCAvIG1pcG1hcC5kYXRhLkJZVEVTX1BFUl9FTEVNRU5UXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCBpLCAwLCAwLCBsYXllckluZGV4LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDEsIGdsRm9ybWF0LCBsYXllckRhdGEsIDAsIDAgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRleHR1cmUuY2xlYXJMYXllclVwZGF0ZXMoKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCBpLCAwLCAwLCAwLCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgbWlwbWFwLmRhdGEsIDAsIDAgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgbWlwbWFwLmRhdGEsIDAsIDAgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnVwbG9hZFRleHR1cmUoKScgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCBpLCAwLCAwLCAwLCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcHNbIDAgXS53aWR0aCwgbWlwbWFwc1sgMCBdLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCQUZvcm1hdCApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdsRm9ybWF0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpJyApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdGlmICggYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRleHR1cmUubGF5ZXJVcGRhdGVzLnNpemUgPiAwICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGxheWVyQnl0ZUxlbmd0aCA9IGdldEJ5dGVMZW5ndGgoIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb25zdCBsYXllckluZGV4IG9mIHRleHR1cmUubGF5ZXJVcGRhdGVzICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgbGF5ZXJEYXRhID0gaW1hZ2UuZGF0YS5zdWJhcnJheShcblx0XHRcdFx0XHRcdFx0XHRcdGxheWVySW5kZXggKiBsYXllckJ5dGVMZW5ndGggLyBpbWFnZS5kYXRhLkJZVEVTX1BFUl9FTEVNRU5ULFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBsYXllckluZGV4ICsgMSApICogbGF5ZXJCeXRlTGVuZ3RoIC8gaW1hZ2UuZGF0YS5CWVRFU19QRVJfRUxFTUVOVFxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIDAsIDAsIDAsIGxheWVySW5kZXgsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDEsIGdsRm9ybWF0LCBnbFR5cGUsIGxheWVyRGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR0ZXh0dXJlLmNsZWFyTGF5ZXJVcGRhdGVzKCk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIDAsIDAsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlM0QoIF9nbC5URVhUVVJFXzNELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UzRCggX2dsLlRFWFRVUkVfM0QsIDAsIDAsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlM0QoIF9nbC5URVhUVVJFXzNELCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSApIHtcblxuXHRcdFx0XHRpZiAoIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGxldCB3aWR0aCA9IGltYWdlLndpZHRoLCBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGxldmVsczsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0XHRcdFx0XHRcdHdpZHRoID4+PSAxO1xuXHRcdFx0XHRcdFx0XHRoZWlnaHQgPj49IDE7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gcmVndWxhciBUZXh0dXJlIChpbWFnZSwgdmlkZW8sIGNhbnZhcylcblxuXHRcdFx0XHQvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZVxuXHRcdFx0XHQvLyBpZiB0aGVyZSBhcmUgbm8gbWFudWFsIG1pcG1hcHNcblx0XHRcdFx0Ly8gc2V0IDAgbGV2ZWwgbWlwbWFwIGFuZCB0aGVuIHVzZSBHTCB0byBnZW5lcmF0ZSBvdGhlciBtaXBtYXAgbGV2ZWxzXG5cblx0XHRcdFx0aWYgKCBtaXBtYXBzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGRpbWVuc2lvbnMgPSBnZXREaW1lbnNpb25zKCBtaXBtYXBzWyAwIF0gKTtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcCApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyggaW1hZ2UgKTtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGRpbWVuc2lvbnMud2lkdGgsIGRpbWVuc2lvbnMuaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCB0ZXh0dXJlVHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNvdXJjZVByb3BlcnRpZXMuX192ZXJzaW9uID0gc291cmNlLnZlcnNpb247XG5cblx0XHRcdGlmICggdGV4dHVyZS5vblVwZGF0ZSApIHRleHR1cmUub25VcGRhdGUoIHRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBsb2FkQ3ViZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmltYWdlLmxlbmd0aCAhPT0gNiApIHJldHVybjtcblxuXHRcdGNvbnN0IGZvcmNlVXBsb2FkID0gaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICk7XG5cdFx0Y29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG5cblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cblx0XHRjb25zdCBzb3VyY2VQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHNvdXJjZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UudmVyc2lvbiAhPT0gc291cmNlUHJvcGVydGllcy5fX3ZlcnNpb24gfHwgZm9yY2VVcGxvYWQgPT09IHRydWUgKSB7XG5cblx0XHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIF9nbC5URVhUVVJFMCArIHNsb3QgKTtcblxuXHRcdFx0Y29uc3Qgd29ya2luZ1ByaW1hcmllcyA9IENvbG9yTWFuYWdlbWVudC5nZXRQcmltYXJpZXMoIENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZSApO1xuXHRcdFx0Y29uc3QgdGV4dHVyZVByaW1hcmllcyA9IHRleHR1cmUuY29sb3JTcGFjZSA9PT0gTm9Db2xvclNwYWNlID8gbnVsbCA6IENvbG9yTWFuYWdlbWVudC5nZXRQcmltYXJpZXMoIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXHRcdFx0Y29uc3QgdW5wYWNrQ29udmVyc2lvbiA9IHRleHR1cmUuY29sb3JTcGFjZSA9PT0gTm9Db2xvclNwYWNlIHx8IHdvcmtpbmdQcmltYXJpZXMgPT09IHRleHR1cmVQcmltYXJpZXMgPyBfZ2wuTk9ORSA6IF9nbC5CUk9XU0VSX0RFRkFVTFRfV0VCR0w7XG5cblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRleHR1cmUuZmxpcFkgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfQUxJR05NRU5ULCB0ZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCwgdW5wYWNrQ29udmVyc2lvbiApO1xuXG5cdFx0XHRjb25zdCBpc0NvbXByZXNzZWQgPSAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSB8fCB0ZXh0dXJlLmltYWdlWyAwIF0uaXNDb21wcmVzc2VkVGV4dHVyZSApO1xuXHRcdFx0Y29uc3QgaXNEYXRhVGV4dHVyZSA9ICggdGV4dHVyZS5pbWFnZVsgMCBdICYmIHRleHR1cmUuaW1hZ2VbIDAgXS5pc0RhdGFUZXh0dXJlICk7XG5cblx0XHRcdGNvbnN0IGN1YmVJbWFnZSA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggISBpc0NvbXByZXNzZWQgJiYgISBpc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0Y3ViZUltYWdlWyBpIF0gPSByZXNpemVJbWFnZSggdGV4dHVyZS5pbWFnZVsgaSBdLCB0cnVlLCBjYXBhYmlsaXRpZXMubWF4Q3ViZW1hcFNpemUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y3ViZUltYWdlWyBpIF0gPSBpc0RhdGFUZXh0dXJlID8gdGV4dHVyZS5pbWFnZVsgaSBdLmltYWdlIDogdGV4dHVyZS5pbWFnZVsgaSBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdWJlSW1hZ2VbIGkgXSA9IHZlcmlmeUNvbG9yU3BhY2UoIHRleHR1cmUsIGN1YmVJbWFnZVsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgaW1hZ2UgPSBjdWJlSW1hZ2VbIDAgXSxcblx0XHRcdFx0Z2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5jb2xvclNwYWNlICksXG5cdFx0XHRcdGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApLFxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXG5cdFx0XHRjb25zdCB1c2VUZXhTdG9yYWdlID0gKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICE9PSB0cnVlICk7XG5cdFx0XHRjb25zdCBhbGxvY2F0ZU1lbW9yeSA9ICggc291cmNlUHJvcGVydGllcy5fX3ZlcnNpb24gPT09IHVuZGVmaW5lZCApIHx8ICggZm9yY2VVcGxvYWQgPT09IHRydWUgKTtcblx0XHRcdGNvbnN0IGRhdGFSZWFkeSA9IHNvdXJjZS5kYXRhUmVhZHk7XG5cdFx0XHRsZXQgbGV2ZWxzID0gZ2V0TWlwTGV2ZWxzKCB0ZXh0dXJlLCBpbWFnZSApO1xuXG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHRleHR1cmUgKTtcblxuXHRcdFx0bGV0IG1pcG1hcHM7XG5cblx0XHRcdGlmICggaXNDb21wcmVzc2VkICkge1xuXG5cdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwcyA9IGN1YmVJbWFnZVsgaSBdLm1pcG1hcHM7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBtaXBtYXBzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgbWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ2xGb3JtYXQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgaiwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBnbEZvcm1hdCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC5zZXRUZXh0dXJlQ3ViZSgpJyApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGosIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGosIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bWlwbWFwcyA9IHRleHR1cmUubWlwbWFwcztcblxuXHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHQvLyBUT0RPOiBVbmlmb3JtbHkgaGFuZGxlIG1pcG1hcCBkZWZpbml0aW9uc1xuXHRcdFx0XHRcdC8vIE5vcm1hbCB0ZXh0dXJlcyBhbmQgY29tcHJlc3NlZCBjdWJlIHRleHR1cmVzIGRlZmluZSBiYXNlIGxldmVsICsgbWlwcyB3aXRoIHRoZWlyIG1pcG1hcCBhcnJheVxuXHRcdFx0XHRcdC8vIFVuY29tcHJlc3NlZCBjdWJlIHRleHR1cmVzIHVzZSB0aGVpciBtaXBtYXAgYXJyYXkgb25seSBmb3IgbWlwcyAobm8gYmFzZSBsZXZlbClcblxuXHRcdFx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICkgbGV2ZWxzICsrO1xuXG5cdFx0XHRcdFx0Y29uc3QgZGltZW5zaW9ucyA9IGdldERpbWVuc2lvbnMoIGN1YmVJbWFnZVsgMCBdICk7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGRpbWVuc2lvbnMud2lkdGgsIGRpbWVuc2lvbnMuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCAwLCAwLCAwLCBjdWJlSW1hZ2VbIGkgXS53aWR0aCwgY3ViZUltYWdlWyBpIF0uaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCAwLCBnbEludGVybmFsRm9ybWF0LCBjdWJlSW1hZ2VbIGkgXS53aWR0aCwgY3ViZUltYWdlWyBpIF0uaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgbWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBtaXBtYXBJbWFnZSA9IG1pcG1hcC5pbWFnZVsgaSBdLmltYWdlO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgaiArIDEsIDAsIDAsIG1pcG1hcEltYWdlLndpZHRoLCBtaXBtYXBJbWFnZS5oZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcEltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGogKyAxLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBJbWFnZS53aWR0aCwgbWlwbWFwSW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXBJbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgMCwgMCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgbWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgaiArIDEsIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5pbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqICsgMSwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmltYWdlWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSApIHtcblxuXHRcdFx0XHQvLyBXZSBhc3N1bWUgaW1hZ2VzIGZvciBjdWJlIG1hcCBoYXZlIHRoZSBzYW1lIHNpemUuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNvdXJjZVByb3BlcnRpZXMuX192ZXJzaW9uID0gc291cmNlLnZlcnNpb247XG5cblx0XHRcdGlmICggdGV4dHVyZS5vblVwZGF0ZSApIHRleHR1cmUub25VcGRhdGUoIHRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHR9XG5cblx0Ly8gUmVuZGVyIHRhcmdldHNcblxuXHQvLyBTZXR1cCBzdG9yYWdlIGZvciB0YXJnZXQgdGV4dHVyZSBhbmQgYmluZCBpdCB0byBjb3JyZWN0IGZyYW1lYnVmZmVyXG5cdGZ1bmN0aW9uIHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCB0ZXh0dXJlLCBhdHRhY2htZW50LCB0ZXh0dXJlVGFyZ2V0LCBsZXZlbCApIHtcblxuXHRcdGNvbnN0IGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQsIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXHRcdGNvbnN0IGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApO1xuXHRcdGNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdGlmICggISByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9faGFzRXh0ZXJuYWxUZXh0dXJlcyApIHtcblxuXHRcdFx0Y29uc3Qgd2lkdGggPSBNYXRoLm1heCggMSwgcmVuZGVyVGFyZ2V0LndpZHRoID4+IGxldmVsICk7XG5cdFx0XHRjb25zdCBoZWlnaHQgPSBNYXRoLm1heCggMSwgcmVuZGVyVGFyZ2V0LmhlaWdodCA+PiBsZXZlbCApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmVUYXJnZXQgPT09IF9nbC5URVhUVVJFXzNEIHx8IHRleHR1cmVUYXJnZXQgPT09IF9nbC5URVhUVVJFXzJEX0FSUkFZICkge1xuXG5cdFx0XHRcdHN0YXRlLnRleEltYWdlM0QoIHRleHR1cmVUYXJnZXQsIGxldmVsLCBnbEludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCByZW5kZXJUYXJnZXQuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCB0ZXh0dXJlVGFyZ2V0LCBsZXZlbCwgZ2xJbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTtcblxuXHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LmZyYW1lYnVmZmVyVGV4dHVyZTJETXVsdGlzYW1wbGVFWFQoIF9nbC5GUkFNRUJVRkZFUiwgYXR0YWNobWVudCwgdGV4dHVyZVRhcmdldCwgcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSwgMCwgZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmVUYXJnZXQgPT09IF9nbC5URVhUVVJFXzJEIHx8ICggdGV4dHVyZVRhcmdldCA+PSBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICYmIHRleHR1cmVUYXJnZXQgPD0gX2dsLlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWiApICkgeyAvLyBzZWUgIzI0NzUzXG5cblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkZSQU1FQlVGRkVSLCBhdHRhY2htZW50LCB0ZXh0dXJlVGFyZ2V0LCBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlLCBsZXZlbCApO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gU2V0dXAgc3RvcmFnZSBmb3IgaW50ZXJuYWwgZGVwdGgvc3RlbmNpbCBidWZmZXJzIGFuZCBiaW5kIHRvIGNvcnJlY3QgZnJhbWVidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJidWZmZXIsIHJlbmRlclRhcmdldCwgaXNNdWx0aXNhbXBsZSApIHtcblxuXHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkge1xuXG5cdFx0XHQvLyByZXRyaWV2ZSB0aGUgZGVwdGggYXR0YWNobWVudCB0eXBlc1xuXHRcdFx0Y29uc3QgZGVwdGhUZXh0dXJlID0gcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZTtcblx0XHRcdGNvbnN0IGRlcHRoVHlwZSA9IGRlcHRoVGV4dHVyZSAmJiBkZXB0aFRleHR1cmUuaXNEZXB0aFRleHR1cmUgPyBkZXB0aFRleHR1cmUudHlwZSA6IG51bGw7XG5cdFx0XHRjb25zdCBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxEZXB0aEZvcm1hdCggcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIsIGRlcHRoVHlwZSApO1xuXHRcdFx0Y29uc3QgZ2xBdHRhY2htZW50VHlwZSA9IHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyID8gX2dsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCA6IF9nbC5ERVBUSF9BVFRBQ0hNRU5UO1xuXG5cdFx0XHQvLyBzZXQgdXAgdGhlIGF0dGFjaG1lbnRcblx0XHRcdGNvbnN0IHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdGNvbnN0IGlzVXNlTXVsdGlzYW1wbGVkUlRUID0gdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdGlmICggaXNVc2VNdWx0aXNhbXBsZWRSVFQgKSB7XG5cblx0XHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZUVYVCggX2dsLlJFTkRFUkJVRkZFUiwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGlzTXVsdGlzYW1wbGUgKSB7XG5cblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggX2dsLlJFTkRFUkJVRkZFUiwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoIF9nbC5SRU5ERVJCVUZGRVIsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBnbEF0dGFjaG1lbnRUeXBlLCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmVzO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZSA9IHRleHR1cmVzWyBpIF07XG5cblx0XHRcdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cdFx0XHRcdGNvbnN0IGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApO1xuXHRcdFx0XHRjb25zdCBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXHRcdFx0XHRjb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0aWYgKCBpc011bHRpc2FtcGxlICYmIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggX2dsLlJFTkRFUkJVRkZFUiwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRcdG11bHRpc2FtcGxlZFJUVEV4dC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGVFWFQoIF9nbC5SRU5ERVJCVUZGRVIsIHNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggX2dsLlJFTkRFUkJVRkZFUiwgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggX2dsLlJFTkRFUkJVRkZFUiwgbnVsbCApO1xuXG5cdH1cblxuXHQvLyBTZXR1cCByZXNvdXJjZXMgZm9yIGEgRGVwdGggVGV4dHVyZSBmb3IgYSBGQk8gKG5lZWRzIGFuIGV4dGVuc2lvbilcblx0ZnVuY3Rpb24gc2V0dXBEZXB0aFRleHR1cmUoIGZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBpc0N1YmUgPSAoIHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgKTtcblx0XHRpZiAoIGlzQ3ViZSApIHRocm93IG5ldyBFcnJvciggJ0RlcHRoIFRleHR1cmUgd2l0aCBjdWJlIHJlbmRlciB0YXJnZXRzIGlzIG5vdCBzdXBwb3J0ZWQnICk7XG5cblx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTtcblxuXHRcdGlmICggISAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgJiYgcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuRGVwdGhUZXh0dXJlJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBsb2FkIGFuIGVtcHR5IGRlcHRoIHRleHR1cmUgd2l0aCBmcmFtZWJ1ZmZlciBzaXplXG5cdFx0aWYgKCAhIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmUgfHxcblx0XHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCAhPT0gcmVuZGVyVGFyZ2V0LndpZHRoIHx8XG5cdFx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ICE9PSByZW5kZXJUYXJnZXQuaGVpZ2h0ICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgPSByZW5kZXJUYXJnZXQuaGVpZ2h0O1xuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRzZXRUZXh0dXJlMkQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdGNvbnN0IHdlYmdsRGVwdGhUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZTtcblx0XHRjb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aEZvcm1hdCApIHtcblxuXHRcdFx0aWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRcdG11bHRpc2FtcGxlZFJUVEV4dC5mcmFtZWJ1ZmZlclRleHR1cmUyRE11bHRpc2FtcGxlRVhUKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5ERVBUSF9BVFRBQ0hNRU5ULCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xEZXB0aFRleHR1cmUsIDAsIHNhbXBsZXMgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkRFUFRIX0FUVEFDSE1FTlQsIF9nbC5URVhUVVJFXzJELCB3ZWJnbERlcHRoVGV4dHVyZSwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkge1xuXG5cdFx0XHRpZiAoIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LmZyYW1lYnVmZmVyVGV4dHVyZTJETXVsdGlzYW1wbGVFWFQoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCwgX2dsLlRFWFRVUkVfMkQsIHdlYmdsRGVwdGhUZXh0dXJlLCAwLCBzYW1wbGVzICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsIF9nbC5URVhUVVJFXzJELCB3ZWJnbERlcHRoVGV4dHVyZSwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdVbmtub3duIGRlcHRoVGV4dHVyZSBmb3JtYXQnICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIFNldHVwIEdMIHJlc291cmNlcyBmb3IgYSBub24tdGV4dHVyZSBkZXB0aCBidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHRjb25zdCBpc0N1YmUgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCA9PT0gdHJ1ZSApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICYmICEgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2F1dG9BbGxvY2F0ZURlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRpZiAoIGlzQ3ViZSApIHRocm93IG5ldyBFcnJvciggJ3RhcmdldC5kZXB0aFRleHR1cmUgbm90IHN1cHBvcnRlZCBpbiBDdWJlIHJlbmRlciB0YXJnZXRzJyApO1xuXG5cdFx0XHRzZXR1cERlcHRoVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gKTtcblx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXHRcdFx0XHRcdHNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXJbIGkgXSwgcmVuZGVyVGFyZ2V0LCBmYWxzZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdHNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIsIHJlbmRlclRhcmdldCwgZmFsc2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gcmViaW5kIGZyYW1lYnVmZmVyIHdpdGggZXh0ZXJuYWwgdGV4dHVyZXNcblx0ZnVuY3Rpb24gcmViaW5kVGV4dHVyZXMoIHJlbmRlclRhcmdldCwgY29sb3JUZXh0dXJlLCBkZXB0aFRleHR1cmUgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0aWYgKCBjb2xvclRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIHJlbmRlclRhcmdldC50ZXh0dXJlLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5URVhUVVJFXzJELCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGRlcHRoVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzZXR1cERlcHRoUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gU2V0IHVwIEdMIHJlc291cmNlcyBmb3IgdGhlIHJlbmRlciB0YXJnZXRcblx0ZnVuY3Rpb24gc2V0dXBSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25SZW5kZXJUYXJnZXREaXNwb3NlICk7XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlcztcblxuXHRcdGNvbnN0IGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ID09PSB0cnVlICk7XG5cdFx0Y29uc3QgaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgPSAoIHRleHR1cmVzLmxlbmd0aCA+IDEgKTtcblxuXHRcdGlmICggISBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyArKztcblxuXHRcdH1cblxuXHRcdC8vIFNldHVwIGZyYW1lYnVmZmVyXG5cblx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUubWlwbWFwcyAmJiB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBsZXZlbCA9IDA7IGxldmVsIDwgdGV4dHVyZS5taXBtYXBzLmxlbmd0aDsgbGV2ZWwgKysgKSB7XG5cblx0XHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF1bIGxldmVsIF0gPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm1pcG1hcHMgJiYgdGV4dHVyZS5taXBtYXBzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHRleHR1cmUubWlwbWFwcy5sZW5ndGg7IGxldmVsICsrICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGxldmVsIF0gPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGF0dGFjaG1lbnRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmVzWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggYXR0YWNobWVudFByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0YXR0YWNobWVudFByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG5cdFx0XHRcdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyArKztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAoIHJlbmRlclRhcmdldC5zYW1wbGVzID4gMCApICYmIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyID0gW107XG5cblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdGV4dHVyZSA9IHRleHR1cmVzWyBpIF07XG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXJbIGkgXSA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblxuXHRcdFx0XHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdFx0XHRjb25zdCBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLmNvbG9yU3BhY2UgKTtcblx0XHRcdFx0XHRjb25zdCBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblx0XHRcdFx0XHRjb25zdCBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIHRleHR1cmUuY29sb3JTcGFjZSwgcmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPT09IHRydWUgKTtcblx0XHRcdFx0XHRjb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggX2dsLlJFTkRFUkJVRkZFUiwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSwgX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXJbIGkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggX2dsLlJFTkRFUkJVRkZFUiwgbnVsbCApO1xuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCB0cnVlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBudWxsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFNldHVwIGNvbG9yIGJ1ZmZlclxuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCwgdGV4dHVyZSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZS5taXBtYXBzICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGxldmVsID0gMDsgbGV2ZWwgPCB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoOyBsZXZlbCArKyApIHtcblxuXHRcdFx0XHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF1bIGxldmVsIF0sIHJlbmRlclRhcmdldCwgdGV4dHVyZSwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgbGV2ZWwgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0sIHJlbmRlclRhcmdldCwgdGV4dHVyZSwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHRcdH0gZWxzZSBpZiAoIGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0YWNobWVudCA9IHRleHR1cmVzWyBpIF07XG5cdFx0XHRcdGNvbnN0IGF0dGFjaG1lbnRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIGF0dGFjaG1lbnQgKTtcblxuXHRcdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfMkQsIGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCBfZ2wuVEVYVFVSRV8yRCwgYXR0YWNobWVudCApO1xuXHRcdFx0XHRzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCwgYXR0YWNobWVudCwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSwgX2dsLlRFWFRVUkVfMkQsIDAgKTtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggYXR0YWNobWVudCApICkge1xuXG5cdFx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIF9nbC5URVhUVVJFXzJEICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGxldCBnbFRleHR1cmVUeXBlID0gX2dsLlRFWFRVUkVfMkQ7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0wzRFJlbmRlclRhcmdldCB8fCByZW5kZXJUYXJnZXQuaXNXZWJHTEFycmF5UmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdGdsVGV4dHVyZVR5cGUgPSByZW5kZXJUYXJnZXQuaXNXZWJHTDNEUmVuZGVyVGFyZ2V0ID8gX2dsLlRFWFRVUkVfM0QgOiBfZ2wuVEVYVFVSRV8yRF9BUlJBWTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggZ2xUZXh0dXJlVHlwZSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCBnbFRleHR1cmVUeXBlLCB0ZXh0dXJlICk7XG5cblx0XHRcdGlmICggdGV4dHVyZS5taXBtYXBzICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBsZXZlbCA9IDA7IGxldmVsIDwgdGV4dHVyZS5taXBtYXBzLmxlbmd0aDsgbGV2ZWwgKysgKSB7XG5cblx0XHRcdFx0XHRzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGxldmVsIF0sIHJlbmRlclRhcmdldCwgdGV4dHVyZSwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbFRleHR1cmVUeXBlLCBsZXZlbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCwgdGV4dHVyZSwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbFRleHR1cmVUeXBlLCAwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggZ2xUZXh0dXJlVHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIFNldHVwIGRlcHRoIGFuZCBzdGVuY2lsIGJ1ZmZlcnNcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRzZXR1cERlcHRoUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdGV4dHVyZSA9IHRleHR1cmVzWyBpIF07XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGFyZ2V0ID0gcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ID8gX2dsLlRFWFRVUkVfQ1VCRV9NQVAgOiBfZ2wuVEVYVFVSRV8yRDtcblx0XHRcdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZTtcblxuXHRcdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggdGFyZ2V0LCB3ZWJnbFRleHR1cmUgKTtcblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIHRhcmdldCApO1xuXHRcdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Y29uc3QgaW52YWxpZGF0aW9uQXJyYXlSZWFkID0gW107XG5cdGNvbnN0IGludmFsaWRhdGlvbkFycmF5RHJhdyA9IFtdO1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5zYW1wbGVzID4gMCApIHtcblxuXHRcdFx0aWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlcztcblx0XHRcdFx0Y29uc3Qgd2lkdGggPSByZW5kZXJUYXJnZXQud2lkdGg7XG5cdFx0XHRcdGNvbnN0IGhlaWdodCA9IHJlbmRlclRhcmdldC5oZWlnaHQ7XG5cdFx0XHRcdGxldCBtYXNrID0gX2dsLkNPTE9SX0JVRkZFUl9CSVQ7XG5cdFx0XHRcdGNvbnN0IGRlcHRoU3R5bGUgPSByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciA/IF9nbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQgOiBfZ2wuREVQVEhfQVRUQUNITUVOVDtcblx0XHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdFx0Y29uc3QgaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgPSAoIHRleHR1cmVzLmxlbmd0aCA+IDEgKTtcblxuXHRcdFx0XHQvLyBJZiBNUlQgd2UgbmVlZCB0byByZW1vdmUgRkJPIGF0dGFjaG1lbnRzXG5cdFx0XHRcdGlmICggaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIF9nbC5SRU5ERVJCVUZGRVIsIG51bGwgKTtcblxuXHRcdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLCBfZ2wuVEVYVFVSRV8yRCwgbnVsbCwgMCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LnJlc29sdmVEZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSBtYXNrIHw9IF9nbC5ERVBUSF9CVUZGRVJfQklUO1xuXG5cdFx0XHRcdFx0XHQvLyByZXNvbHZpbmcgc3RlbmNpbCBpcyBzbG93IHdpdGggYSBEM0QgYmFja2VuZC4gZGlzYWJsZSBpdCBmb3IgYWxsIHRyYW5zbWlzc2lvbiByZW5kZXIgdGFyZ2V0cyAoc2VlICMyNzc5OSlcblxuXHRcdFx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciAmJiByZW5kZXJUYXJnZXQucmVzb2x2ZVN0ZW5jaWxCdWZmZXIgKSBtYXNrIHw9IF9nbC5TVEVOQ0lMX0JVRkZFUl9CSVQ7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmVzWyBpIF0gKS5fX3dlYmdsVGV4dHVyZTtcblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfMkQsIHdlYmdsVGV4dHVyZSwgMCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0X2dsLmJsaXRGcmFtZWJ1ZmZlciggMCwgMCwgd2lkdGgsIGhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCwgbWFzaywgX2dsLk5FQVJFU1QgKTtcblxuXHRcdFx0XHRcdGlmICggc3VwcG9ydHNJbnZhbGlkYXRlRnJhbWVidWZmZXIgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdGludmFsaWRhdGlvbkFycmF5UmVhZC5sZW5ndGggPSAwO1xuXHRcdFx0XHRcdFx0aW52YWxpZGF0aW9uQXJyYXlEcmF3Lmxlbmd0aCA9IDA7XG5cblx0XHRcdFx0XHRcdGludmFsaWRhdGlvbkFycmF5UmVhZC5wdXNoKCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpICk7XG5cblx0XHRcdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICYmIHJlbmRlclRhcmdldC5yZXNvbHZlRGVwdGhCdWZmZXIgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdGludmFsaWRhdGlvbkFycmF5UmVhZC5wdXNoKCBkZXB0aFN0eWxlICk7XG5cdFx0XHRcdFx0XHRcdGludmFsaWRhdGlvbkFycmF5RHJhdy5wdXNoKCBkZXB0aFN0eWxlICk7XG5cblx0XHRcdFx0XHRcdFx0X2dsLmludmFsaWRhdGVGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIGludmFsaWRhdGlvbkFycmF5RHJhdyApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdF9nbC5pbnZhbGlkYXRlRnJhbWVidWZmZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBpbnZhbGlkYXRpb25BcnJheVJlYWQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgbnVsbCApO1xuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBudWxsICk7XG5cblx0XHRcdFx0Ly8gSWYgTVJUIHNpbmNlIHByZS1ibGl0IHdlIHJlbW92ZWQgdGhlIEZCTyB3ZSBuZWVkIHRvIHJlY29uc3RydWN0IHRoZSBhdHRhY2htZW50c1xuXHRcdFx0XHRpZiAoIGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHdlYmdsVGV4dHVyZSA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlc1sgaSBdICkuX193ZWJnbFRleHR1cmU7XG5cblx0XHRcdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSwgX2dsLlRFWFRVUkVfMkQsIHdlYmdsVGV4dHVyZSwgMCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICYmIHJlbmRlclRhcmdldC5yZXNvbHZlRGVwdGhCdWZmZXIgPT09IGZhbHNlICYmIHN1cHBvcnRzSW52YWxpZGF0ZUZyYW1lYnVmZmVyICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgZGVwdGhTdHlsZSA9IHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyID8gX2dsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCA6IF9nbC5ERVBUSF9BVFRBQ0hNRU5UO1xuXG5cdFx0XHRcdFx0X2dsLmludmFsaWRhdGVGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIFsgZGVwdGhTdHlsZSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHJldHVybiBNYXRoLm1pbiggY2FwYWJpbGl0aWVzLm1heFNhbXBsZXMsIHJlbmRlclRhcmdldC5zYW1wbGVzICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJldHVybiByZW5kZXJUYXJnZXQuc2FtcGxlcyA+IDAgJiYgZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICkgPT09IHRydWUgJiYgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3VzZVJlbmRlclRvVGV4dHVyZSAhPT0gZmFsc2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVZpZGVvVGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IGZyYW1lID0gaW5mby5yZW5kZXIuZnJhbWU7XG5cblx0XHQvLyBDaGVjayB0aGUgbGFzdCBmcmFtZSB3ZSB1cGRhdGVkIHRoZSBWaWRlb1RleHR1cmVcblxuXHRcdGlmICggX3ZpZGVvVGV4dHVyZXMuZ2V0KCB0ZXh0dXJlICkgIT09IGZyYW1lICkge1xuXG5cdFx0XHRfdmlkZW9UZXh0dXJlcy5zZXQoIHRleHR1cmUsIGZyYW1lICk7XG5cdFx0XHR0ZXh0dXJlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB2ZXJpZnlDb2xvclNwYWNlKCB0ZXh0dXJlLCBpbWFnZSApIHtcblxuXHRcdGNvbnN0IGNvbG9yU3BhY2UgPSB0ZXh0dXJlLmNvbG9yU3BhY2U7XG5cdFx0Y29uc3QgZm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7XG5cdFx0Y29uc3QgdHlwZSA9IHRleHR1cmUudHlwZTtcblxuXHRcdGlmICggdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlID09PSB0cnVlIHx8IHRleHR1cmUuaXNWaWRlb1RleHR1cmUgPT09IHRydWUgKSByZXR1cm4gaW1hZ2U7XG5cblx0XHRpZiAoIGNvbG9yU3BhY2UgIT09IExpbmVhclNSR0JDb2xvclNwYWNlICYmIGNvbG9yU3BhY2UgIT09IE5vQ29sb3JTcGFjZSApIHtcblxuXHRcdFx0Ly8gc1JHQlxuXG5cdFx0XHRpZiAoIENvbG9yTWFuYWdlbWVudC5nZXRUcmFuc2ZlciggY29sb3JTcGFjZSApID09PSBTUkdCVHJhbnNmZXIgKSB7XG5cblx0XHRcdFx0Ly8gaW4gV2ViR0wgMiB1bmNvbXByZXNzZWQgdGV4dHVyZXMgY2FuIG9ubHkgYmUgc1JHQiBlbmNvZGVkIGlmIHRoZXkgaGF2ZSB0aGUgUkdCQTggZm9ybWF0XG5cblx0XHRcdFx0aWYgKCBmb3JtYXQgIT09IFJHQkFGb3JtYXQgfHwgdHlwZSAhPT0gVW5zaWduZWRCeXRlVHlwZSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMVGV4dHVyZXM6IHNSR0IgZW5jb2RlZCB0ZXh0dXJlcyBoYXZlIHRvIHVzZSBSR0JBRm9ybWF0IGFuZCBVbnNpZ25lZEJ5dGVUeXBlLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMVGV4dHVyZXM6IFVuc3VwcG9ydGVkIHRleHR1cmUgY29sb3Igc3BhY2U6JywgY29sb3JTcGFjZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldERpbWVuc2lvbnMoIGltYWdlICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgSFRNTEltYWdlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkge1xuXG5cdFx0XHQvLyBpZiBpbnRyaW5zaWMgZGF0YSBhcmUgbm90IGF2YWlsYWJsZSwgZmFsbGJhY2sgdG8gd2lkdGgvaGVpZ2h0XG5cblx0XHRcdF9pbWFnZURpbWVuc2lvbnMud2lkdGggPSBpbWFnZS5uYXR1cmFsV2lkdGggfHwgaW1hZ2Uud2lkdGg7XG5cdFx0XHRfaW1hZ2VEaW1lbnNpb25zLmhlaWdodCA9IGltYWdlLm5hdHVyYWxIZWlnaHQgfHwgaW1hZ2UuaGVpZ2h0O1xuXG5cdFx0fSBlbHNlIGlmICggdHlwZW9mIFZpZGVvRnJhbWUgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgVmlkZW9GcmFtZSApIHtcblxuXHRcdFx0X2ltYWdlRGltZW5zaW9ucy53aWR0aCA9IGltYWdlLmRpc3BsYXlXaWR0aDtcblx0XHRcdF9pbWFnZURpbWVuc2lvbnMuaGVpZ2h0ID0gaW1hZ2UuZGlzcGxheUhlaWdodDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9pbWFnZURpbWVuc2lvbnMud2lkdGggPSBpbWFnZS53aWR0aDtcblx0XHRcdF9pbWFnZURpbWVuc2lvbnMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIF9pbWFnZURpbWVuc2lvbnM7XG5cblx0fVxuXG5cdC8vXG5cblx0dGhpcy5hbGxvY2F0ZVRleHR1cmVVbml0ID0gYWxsb2NhdGVUZXh0dXJlVW5pdDtcblx0dGhpcy5yZXNldFRleHR1cmVVbml0cyA9IHJlc2V0VGV4dHVyZVVuaXRzO1xuXG5cdHRoaXMuc2V0VGV4dHVyZTJEID0gc2V0VGV4dHVyZTJEO1xuXHR0aGlzLnNldFRleHR1cmUyREFycmF5ID0gc2V0VGV4dHVyZTJEQXJyYXk7XG5cdHRoaXMuc2V0VGV4dHVyZTNEID0gc2V0VGV4dHVyZTNEO1xuXHR0aGlzLnNldFRleHR1cmVDdWJlID0gc2V0VGV4dHVyZUN1YmU7XG5cdHRoaXMucmViaW5kVGV4dHVyZXMgPSByZWJpbmRUZXh0dXJlcztcblx0dGhpcy5zZXR1cFJlbmRlclRhcmdldCA9IHNldHVwUmVuZGVyVGFyZ2V0O1xuXHR0aGlzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCA9IHVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcDtcblx0dGhpcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCA9IHVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0O1xuXHR0aGlzLnNldHVwRGVwdGhSZW5kZXJidWZmZXIgPSBzZXR1cERlcHRoUmVuZGVyYnVmZmVyO1xuXHR0aGlzLnNldHVwRnJhbWVCdWZmZXJUZXh0dXJlID0gc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmU7XG5cdHRoaXMudXNlTXVsdGlzYW1wbGVkUlRUID0gdXNlTXVsdGlzYW1wbGVkUlRUO1xuXG59XG5cbmV4cG9ydCB7IFdlYkdMVGV4dHVyZXMgfTtcbiIsImltcG9ydCB7IFJHQkFfQVNUQ180eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDVfRm9ybWF0LCBSR0JBX0FTVENfNng2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4NV9Gb3JtYXQsIFJHQkFfQVNUQ184eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg4X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDVfRm9ybWF0LCBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCwgUkdCX0VUQzFfRm9ybWF0LCBSR0JfRVRDMl9Gb3JtYXQsIFJHQkFfRVRDMl9FQUNfRm9ybWF0LCBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCwgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JBX1MzVENfRFhUNV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDFfRm9ybWF0LCBSR0JfUzNUQ19EWFQxX0Zvcm1hdCwgRGVwdGhGb3JtYXQsIERlcHRoU3RlbmNpbEZvcm1hdCwgTHVtaW5hbmNlQWxwaGFGb3JtYXQsIEx1bWluYW5jZUZvcm1hdCwgUmVkRm9ybWF0LCBSR0JBRm9ybWF0LCBBbHBoYUZvcm1hdCwgUmVkSW50ZWdlckZvcm1hdCwgUkdGb3JtYXQsIFJHSW50ZWdlckZvcm1hdCwgUkdCQUludGVnZXJGb3JtYXQsIEhhbGZGbG9hdFR5cGUsIEZsb2F0VHlwZSwgVW5zaWduZWRJbnRUeXBlLCBJbnRUeXBlLCBVbnNpZ25lZFNob3J0VHlwZSwgU2hvcnRUeXBlLCBCeXRlVHlwZSwgVW5zaWduZWRJbnQyNDhUeXBlLCBVbnNpZ25lZFNob3J0NTU1MVR5cGUsIFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSwgVW5zaWduZWRCeXRlVHlwZSwgUkdCQV9CUFRDX0Zvcm1hdCwgUkdCX0JQVENfU0lHTkVEX0Zvcm1hdCwgUkdCX0JQVENfVU5TSUdORURfRm9ybWF0LCBSRURfUkdUQzFfRm9ybWF0LCBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdCwgUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCwgU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQsIE5vQ29sb3JTcGFjZSwgU1JHQlRyYW5zZmVyLCBVbnNpZ25lZEludDU5OTlUeXBlLCBSR0JGb3JtYXQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgQ29sb3JNYW5hZ2VtZW50IH0gZnJvbSAnLi4vLi4vbWF0aC9Db2xvck1hbmFnZW1lbnQuanMnO1xuXG5mdW5jdGlvbiBXZWJHTFV0aWxzKCBnbCwgZXh0ZW5zaW9ucyApIHtcblxuXHRmdW5jdGlvbiBjb252ZXJ0KCBwLCBjb2xvclNwYWNlID0gTm9Db2xvclNwYWNlICkge1xuXG5cdFx0bGV0IGV4dGVuc2lvbjtcblxuXHRcdGNvbnN0IHRyYW5zZmVyID0gQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBjb2xvclNwYWNlICk7XG5cblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkQnl0ZVR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVF80XzRfNF80O1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDU1NTFUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX1NIT1JUXzVfNV81XzE7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEludDU5OTlUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX0lOVF81XzlfOV85X1JFVjtcblxuXHRcdGlmICggcCA9PT0gQnl0ZVR5cGUgKSByZXR1cm4gZ2wuQllURTtcblx0XHRpZiAoIHAgPT09IFNob3J0VHlwZSApIHJldHVybiBnbC5TSE9SVDtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnRUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX1NIT1JUO1xuXHRcdGlmICggcCA9PT0gSW50VHlwZSApIHJldHVybiBnbC5JTlQ7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEludFR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfSU5UO1xuXHRcdGlmICggcCA9PT0gRmxvYXRUeXBlICkgcmV0dXJuIGdsLkZMT0FUO1xuXHRcdGlmICggcCA9PT0gSGFsZkZsb2F0VHlwZSApIHJldHVybiBnbC5IQUxGX0ZMT0FUO1xuXG5cdFx0aWYgKCBwID09PSBBbHBoYUZvcm1hdCApIHJldHVybiBnbC5BTFBIQTtcblx0XHRpZiAoIHAgPT09IFJHQkZvcm1hdCApIHJldHVybiBnbC5SR0I7XG5cdFx0aWYgKCBwID09PSBSR0JBRm9ybWF0ICkgcmV0dXJuIGdsLlJHQkE7XG5cdFx0aWYgKCBwID09PSBMdW1pbmFuY2VGb3JtYXQgKSByZXR1cm4gZ2wuTFVNSU5BTkNFO1xuXHRcdGlmICggcCA9PT0gTHVtaW5hbmNlQWxwaGFGb3JtYXQgKSByZXR1cm4gZ2wuTFVNSU5BTkNFX0FMUEhBO1xuXHRcdGlmICggcCA9PT0gRGVwdGhGb3JtYXQgKSByZXR1cm4gZ2wuREVQVEhfQ09NUE9ORU5UO1xuXHRcdGlmICggcCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkgcmV0dXJuIGdsLkRFUFRIX1NURU5DSUw7XG5cblx0XHQvLyBXZWJHTDIgZm9ybWF0cy5cblxuXHRcdGlmICggcCA9PT0gUmVkRm9ybWF0ICkgcmV0dXJuIGdsLlJFRDtcblx0XHRpZiAoIHAgPT09IFJlZEludGVnZXJGb3JtYXQgKSByZXR1cm4gZ2wuUkVEX0lOVEVHRVI7XG5cdFx0aWYgKCBwID09PSBSR0Zvcm1hdCApIHJldHVybiBnbC5SRztcblx0XHRpZiAoIHAgPT09IFJHSW50ZWdlckZvcm1hdCApIHJldHVybiBnbC5SR19JTlRFR0VSO1xuXHRcdGlmICggcCA9PT0gUkdCQUludGVnZXJGb3JtYXQgKSByZXR1cm4gZ2wuUkdCQV9JTlRFR0VSO1xuXG5cdFx0Ly8gUzNUQ1xuXG5cdFx0aWYgKCBwID09PSBSR0JfUzNUQ19EWFQxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDNfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHtcblxuXHRcdFx0aWYgKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkge1xuXG5cdFx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNfc3JnYicgKTtcblxuXHRcdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9TM1RDX0RYVDFfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUM19FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDVfRVhUO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKTtcblxuXHRcdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDNfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQ7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gUFZSVENcblxuXHRcdGlmICggcCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1BWUlRDXzRCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRztcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBFVENcblxuXHRcdGlmICggcCA9PT0gUkdCX0VUQzFfRm9ybWF0IHx8IHAgPT09IFJHQl9FVEMyX0Zvcm1hdCB8fCBwID09PSBSR0JBX0VUQzJfRUFDX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9FVEMxX0Zvcm1hdCB8fCBwID09PSBSR0JfRVRDMl9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9FVEMyIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCOF9FVEMyO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfRVRDMl9FQUNfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQThfRVRDMl9FQUM7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIEFTVENcblxuXHRcdGlmICggcCA9PT0gUkdCQV9BU1RDXzR4NF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzV4NF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzV4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ182eDVfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ182eDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ184eDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfOHg2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg4X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ180eDRfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNHg0X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ180eDRfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ181eDRfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg0X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ181eDRfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ181eDVfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ181eDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ182eDVfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNng1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ182eDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ182eDZfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNng2X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ182eDZfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ184eDVfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ184eDZfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg2X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDZfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ184eDhfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg4X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDhfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDVfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDZfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDZfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDhfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDhfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHgxMF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4MTBfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJ4MTBfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJ4MTJfS0hSO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBCUFRDXG5cblx0XHRpZiAoIHAgPT09IFJHQkFfQlBUQ19Gb3JtYXQgfHwgcCA9PT0gUkdCX0JQVENfU0lHTkVEX0Zvcm1hdCB8fCBwID09PSBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3RleHR1cmVfY29tcHJlc3Npb25fYnB0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0JQVENfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9CUFRDX1VOT1JNX0VYVCA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQlBUQ19VTk9STV9FWFQ7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCX0JQVENfU0lHTkVEX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfQlBUQ19TSUdORURfRkxPQVRfRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9CUFRDX1VOU0lHTkVEX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfQlBUQ19VTlNJR05FRF9GTE9BVF9FWFQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFJHVENcblxuXHRcdGlmICggcCA9PT0gUkVEX1JHVEMxX0Zvcm1hdCB8fCBwID09PSBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdCB8fCBwID09PSBSRURfR1JFRU5fUkdUQzJfRm9ybWF0IHx8IHAgPT09IFNJR05FRF9SRURfR1JFRU5fUkdUQzJfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2NvbXByZXNzaW9uX3JndGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9CUFRDX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SRURfUkdUQzFfRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFNJR05FRF9SRURfUkdUQzFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NJR05FRF9SRURfUkdUQzFfRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJFRF9HUkVFTl9SR1RDMl9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkVEX0dSRUVOX1JHVEMyX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TSUdORURfUkVEX0dSRUVOX1JHVEMyX0VYVDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggcCA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX0lOVF8yNF84O1xuXG5cdFx0Ly8gaWYgXCJwXCIgY2FuJ3QgYmUgcmVzb2x2ZWQsIGFzc3VtZSB0aGUgdXNlciBkZWZpbmVzIGEgV2ViR0wgY29uc3RhbnQgYXMgYSBzdHJpbmcgKGZhbGxiYWNrL3dvcmthcm91bmQgZm9yIHBhY2tlZCBSR0IgZm9ybWF0cylcblxuXHRcdHJldHVybiAoIGdsWyBwIF0gIT09IHVuZGVmaW5lZCApID8gZ2xbIHAgXSA6IG51bGw7XG5cblx0fVxuXG5cdHJldHVybiB7IGNvbnZlcnQ6IGNvbnZlcnQgfTtcblxufVxuXG5cbmV4cG9ydCB7IFdlYkdMVXRpbHMgfTtcbiIsImltcG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhIH0gZnJvbSAnLi9QZXJzcGVjdGl2ZUNhbWVyYS5qcyc7XG5cbmNsYXNzIEFycmF5Q2FtZXJhIGV4dGVuZHMgUGVyc3BlY3RpdmVDYW1lcmEge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSA9IFtdICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNBcnJheUNhbWVyYSA9IHRydWU7XG5cblx0XHR0aGlzLmNhbWVyYXMgPSBhcnJheTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQXJyYXlDYW1lcmEgfTtcbiIsImltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XG5cbmNsYXNzIEdyb3VwIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNHcm91cCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnR3JvdXAnO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBHcm91cCB9O1xuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBHcm91cCB9IGZyb20gJy4uLy4uL29iamVjdHMvR3JvdXAuanMnO1xuXG5jb25zdCBfbW92ZUV2ZW50ID0geyB0eXBlOiAnbW92ZScgfTtcblxuY2xhc3MgV2ViWFJDb250cm9sbGVyIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuX3RhcmdldFJheSA9IG51bGw7XG5cdFx0dGhpcy5fZ3JpcCA9IG51bGw7XG5cdFx0dGhpcy5faGFuZCA9IG51bGw7XG5cblx0fVxuXG5cdGdldEhhbmRTcGFjZSgpIHtcblxuXHRcdGlmICggdGhpcy5faGFuZCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5faGFuZCA9IG5ldyBHcm91cCgpO1xuXHRcdFx0dGhpcy5faGFuZC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdFx0XHR0aGlzLl9oYW5kLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdFx0dGhpcy5faGFuZC5qb2ludHMgPSB7fTtcblx0XHRcdHRoaXMuX2hhbmQuaW5wdXRTdGF0ZSA9IHsgcGluY2hpbmc6IGZhbHNlIH07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5faGFuZDtcblxuXHR9XG5cblx0Z2V0VGFyZ2V0UmF5U3BhY2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuX3RhcmdldFJheSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5ID0gbmV3IEdyb3VwKCk7XG5cdFx0XHR0aGlzLl90YXJnZXRSYXkubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LnZpc2libGUgPSBmYWxzZTtcblx0XHRcdHRoaXMuX3RhcmdldFJheS5oYXNMaW5lYXJWZWxvY2l0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LmxpbmVhclZlbG9jaXR5ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHRoaXMuX3RhcmdldFJheS5oYXNBbmd1bGFyVmVsb2NpdHkgPSBmYWxzZTtcblx0XHRcdHRoaXMuX3RhcmdldFJheS5hbmd1bGFyVmVsb2NpdHkgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX3RhcmdldFJheTtcblxuXHR9XG5cblx0Z2V0R3JpcFNwYWNlKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9ncmlwID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9ncmlwID0gbmV3IEdyb3VwKCk7XG5cdFx0XHR0aGlzLl9ncmlwLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHRcdHRoaXMuX2dyaXAudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fZ3JpcC5oYXNMaW5lYXJWZWxvY2l0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fZ3JpcC5saW5lYXJWZWxvY2l0eSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR0aGlzLl9ncmlwLmhhc0FuZ3VsYXJWZWxvY2l0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fZ3JpcC5hbmd1bGFyVmVsb2NpdHkgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2dyaXA7XG5cblx0fVxuXG5cdGRpc3BhdGNoRXZlbnQoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLl90YXJnZXRSYXkgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX3RhcmdldFJheS5kaXNwYXRjaEV2ZW50KCBldmVudCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9ncmlwICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9ncmlwLmRpc3BhdGNoRXZlbnQoIGV2ZW50ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX2hhbmQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2hhbmQuZGlzcGF0Y2hFdmVudCggZXZlbnQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb25uZWN0KCBpbnB1dFNvdXJjZSApIHtcblxuXHRcdGlmICggaW5wdXRTb3VyY2UgJiYgaW5wdXRTb3VyY2UuaGFuZCApIHtcblxuXHRcdFx0Y29uc3QgaGFuZCA9IHRoaXMuX2hhbmQ7XG5cblx0XHRcdGlmICggaGFuZCApIHtcblxuXHRcdFx0XHRmb3IgKCBjb25zdCBpbnB1dGpvaW50IG9mIGlucHV0U291cmNlLmhhbmQudmFsdWVzKCkgKSB7XG5cblx0XHRcdFx0XHQvLyBJbml0aWFsaXplIGhhbmQgd2l0aCBqb2ludHMgd2hlbiBjb25uZWN0ZWRcblx0XHRcdFx0XHR0aGlzLl9nZXRIYW5kSm9pbnQoIGhhbmQsIGlucHV0am9pbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnY29ubmVjdGVkJywgZGF0YTogaW5wdXRTb3VyY2UgfSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpc2Nvbm5lY3QoIGlucHV0U291cmNlICkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNjb25uZWN0ZWQnLCBkYXRhOiBpbnB1dFNvdXJjZSB9ICk7XG5cblx0XHRpZiAoIHRoaXMuX3RhcmdldFJheSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fZ3JpcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fZ3JpcC52aXNpYmxlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX2hhbmQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2hhbmQudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVwZGF0ZSggaW5wdXRTb3VyY2UsIGZyYW1lLCByZWZlcmVuY2VTcGFjZSApIHtcblxuXHRcdGxldCBpbnB1dFBvc2UgPSBudWxsO1xuXHRcdGxldCBncmlwUG9zZSA9IG51bGw7XG5cdFx0bGV0IGhhbmRQb3NlID0gbnVsbDtcblxuXHRcdGNvbnN0IHRhcmdldFJheSA9IHRoaXMuX3RhcmdldFJheTtcblx0XHRjb25zdCBncmlwID0gdGhpcy5fZ3JpcDtcblx0XHRjb25zdCBoYW5kID0gdGhpcy5faGFuZDtcblxuXHRcdGlmICggaW5wdXRTb3VyY2UgJiYgZnJhbWUuc2Vzc2lvbi52aXNpYmlsaXR5U3RhdGUgIT09ICd2aXNpYmxlLWJsdXJyZWQnICkge1xuXG5cdFx0XHRpZiAoIGhhbmQgJiYgaW5wdXRTb3VyY2UuaGFuZCApIHtcblxuXHRcdFx0XHRoYW5kUG9zZSA9IHRydWU7XG5cblx0XHRcdFx0Zm9yICggY29uc3QgaW5wdXRqb2ludCBvZiBpbnB1dFNvdXJjZS5oYW5kLnZhbHVlcygpICkge1xuXG5cdFx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBqb2ludHMgZ3JvdXBzIHdpdGggdGhlIFhSSm9pbnQgcG9zZXNcblx0XHRcdFx0XHRjb25zdCBqb2ludFBvc2UgPSBmcmFtZS5nZXRKb2ludFBvc2UoIGlucHV0am9pbnQsIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHRcdFx0XHQvLyBUaGUgdHJhbnNmb3JtIG9mIHRoaXMgam9pbnQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIGpvaW50IHBvc2Ugb24gZWFjaCBmcmFtZVxuXHRcdFx0XHRcdGNvbnN0IGpvaW50ID0gdGhpcy5fZ2V0SGFuZEpvaW50KCBoYW5kLCBpbnB1dGpvaW50ICk7XG5cblx0XHRcdFx0XHRpZiAoIGpvaW50UG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0am9pbnQubWF0cml4LmZyb21BcnJheSggam9pbnRQb3NlLnRyYW5zZm9ybS5tYXRyaXggKTtcblx0XHRcdFx0XHRcdGpvaW50Lm1hdHJpeC5kZWNvbXBvc2UoIGpvaW50LnBvc2l0aW9uLCBqb2ludC5yb3RhdGlvbiwgam9pbnQuc2NhbGUgKTtcblx0XHRcdFx0XHRcdGpvaW50Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0am9pbnQuam9pbnRSYWRpdXMgPSBqb2ludFBvc2UucmFkaXVzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0am9pbnQudmlzaWJsZSA9IGpvaW50UG9zZSAhPT0gbnVsbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3VzdG9tIGV2ZW50c1xuXG5cdFx0XHRcdC8vIENoZWNrIHBpbmNoelxuXHRcdFx0XHRjb25zdCBpbmRleFRpcCA9IGhhbmQuam9pbnRzWyAnaW5kZXgtZmluZ2VyLXRpcCcgXTtcblx0XHRcdFx0Y29uc3QgdGh1bWJUaXAgPSBoYW5kLmpvaW50c1sgJ3RodW1iLXRpcCcgXTtcblx0XHRcdFx0Y29uc3QgZGlzdGFuY2UgPSBpbmRleFRpcC5wb3NpdGlvbi5kaXN0YW5jZVRvKCB0aHVtYlRpcC5wb3NpdGlvbiApO1xuXG5cdFx0XHRcdGNvbnN0IGRpc3RhbmNlVG9QaW5jaCA9IDAuMDI7XG5cdFx0XHRcdGNvbnN0IHRocmVzaG9sZCA9IDAuMDA1O1xuXG5cdFx0XHRcdGlmICggaGFuZC5pbnB1dFN0YXRlLnBpbmNoaW5nICYmIGRpc3RhbmNlID4gZGlzdGFuY2VUb1BpbmNoICsgdGhyZXNob2xkICkge1xuXG5cdFx0XHRcdFx0aGFuZC5pbnB1dFN0YXRlLnBpbmNoaW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAncGluY2hlbmQnLFxuXHRcdFx0XHRcdFx0aGFuZGVkbmVzczogaW5wdXRTb3VyY2UuaGFuZGVkbmVzcyxcblx0XHRcdFx0XHRcdHRhcmdldDogdGhpc1xuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCAhIGhhbmQuaW5wdXRTdGF0ZS5waW5jaGluZyAmJiBkaXN0YW5jZSA8PSBkaXN0YW5jZVRvUGluY2ggLSB0aHJlc2hvbGQgKSB7XG5cblx0XHRcdFx0XHRoYW5kLmlucHV0U3RhdGUucGluY2hpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ3BpbmNoc3RhcnQnLFxuXHRcdFx0XHRcdFx0aGFuZGVkbmVzczogaW5wdXRTb3VyY2UuaGFuZGVkbmVzcyxcblx0XHRcdFx0XHRcdHRhcmdldDogdGhpc1xuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBncmlwICE9PSBudWxsICYmIGlucHV0U291cmNlLmdyaXBTcGFjZSApIHtcblxuXHRcdFx0XHRcdGdyaXBQb3NlID0gZnJhbWUuZ2V0UG9zZSggaW5wdXRTb3VyY2UuZ3JpcFNwYWNlLCByZWZlcmVuY2VTcGFjZSApO1xuXG5cdFx0XHRcdFx0aWYgKCBncmlwUG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0Z3JpcC5tYXRyaXguZnJvbUFycmF5KCBncmlwUG9zZS50cmFuc2Zvcm0ubWF0cml4ICk7XG5cdFx0XHRcdFx0XHRncmlwLm1hdHJpeC5kZWNvbXBvc2UoIGdyaXAucG9zaXRpb24sIGdyaXAucm90YXRpb24sIGdyaXAuc2NhbGUgKTtcblx0XHRcdFx0XHRcdGdyaXAubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdGlmICggZ3JpcFBvc2UubGluZWFyVmVsb2NpdHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z3JpcC5oYXNMaW5lYXJWZWxvY2l0eSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGdyaXAubGluZWFyVmVsb2NpdHkuY29weSggZ3JpcFBvc2UubGluZWFyVmVsb2NpdHkgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRncmlwLmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCBncmlwUG9zZS5hbmd1bGFyVmVsb2NpdHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z3JpcC5oYXNBbmd1bGFyVmVsb2NpdHkgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRncmlwLmFuZ3VsYXJWZWxvY2l0eS5jb3B5KCBncmlwUG9zZS5hbmd1bGFyVmVsb2NpdHkgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRncmlwLmhhc0FuZ3VsYXJWZWxvY2l0eSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGFyZ2V0UmF5ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlucHV0UG9zZSA9IGZyYW1lLmdldFBvc2UoIGlucHV0U291cmNlLnRhcmdldFJheVNwYWNlLCByZWZlcmVuY2VTcGFjZSApO1xuXG5cdFx0XHRcdC8vIFNvbWUgcnVudGltZXMgKG5hbWVseSBWaXZlIENvc21vcyB3aXRoIFZpdmUgT3BlblhSIFJ1bnRpbWUpIGhhdmUgb25seSBncmlwIHNwYWNlIGFuZCByYXkgc3BhY2UgaXMgZXF1YWwgdG8gaXRcblx0XHRcdFx0aWYgKCBpbnB1dFBvc2UgPT09IG51bGwgJiYgZ3JpcFBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpbnB1dFBvc2UgPSBncmlwUG9zZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBpbnB1dFBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR0YXJnZXRSYXkubWF0cml4LmZyb21BcnJheSggaW5wdXRQb3NlLnRyYW5zZm9ybS5tYXRyaXggKTtcblx0XHRcdFx0XHR0YXJnZXRSYXkubWF0cml4LmRlY29tcG9zZSggdGFyZ2V0UmF5LnBvc2l0aW9uLCB0YXJnZXRSYXkucm90YXRpb24sIHRhcmdldFJheS5zY2FsZSApO1xuXHRcdFx0XHRcdHRhcmdldFJheS5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggaW5wdXRQb3NlLmxpbmVhclZlbG9jaXR5ICkge1xuXG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkuaGFzTGluZWFyVmVsb2NpdHkgPSB0cnVlO1xuXHRcdFx0XHRcdFx0dGFyZ2V0UmF5LmxpbmVhclZlbG9jaXR5LmNvcHkoIGlucHV0UG9zZS5saW5lYXJWZWxvY2l0eSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dGFyZ2V0UmF5Lmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGlucHV0UG9zZS5hbmd1bGFyVmVsb2NpdHkgKSB7XG5cblx0XHRcdFx0XHRcdHRhcmdldFJheS5oYXNBbmd1bGFyVmVsb2NpdHkgPSB0cnVlO1xuXHRcdFx0XHRcdFx0dGFyZ2V0UmF5LmFuZ3VsYXJWZWxvY2l0eS5jb3B5KCBpbnB1dFBvc2UuYW5ndWxhclZlbG9jaXR5ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkuaGFzQW5ndWxhclZlbG9jaXR5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9tb3ZlRXZlbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0YXJnZXRSYXkgIT09IG51bGwgKSB7XG5cblx0XHRcdHRhcmdldFJheS52aXNpYmxlID0gKCBpbnB1dFBvc2UgIT09IG51bGwgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ3JpcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0Z3JpcC52aXNpYmxlID0gKCBncmlwUG9zZSAhPT0gbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBoYW5kICE9PSBudWxsICkge1xuXG5cdFx0XHRoYW5kLnZpc2libGUgPSAoIGhhbmRQb3NlICE9PSBudWxsICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Ly8gcHJpdmF0ZSBtZXRob2RcblxuXHRfZ2V0SGFuZEpvaW50KCBoYW5kLCBpbnB1dGpvaW50ICkge1xuXG5cdFx0aWYgKCBoYW5kLmpvaW50c1sgaW5wdXRqb2ludC5qb2ludE5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBqb2ludCA9IG5ldyBHcm91cCgpO1xuXHRcdFx0am9pbnQubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0am9pbnQudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0aGFuZC5qb2ludHNbIGlucHV0am9pbnQuam9pbnROYW1lIF0gPSBqb2ludDtcblxuXHRcdFx0aGFuZC5hZGQoIGpvaW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZC5qb2ludHNbIGlucHV0am9pbnQuam9pbnROYW1lIF07XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgV2ViWFJDb250cm9sbGVyIH07XG4iLCJpbXBvcnQgeyBQbGFuZUdlb21ldHJ5IH0gZnJvbSAnLi4vLi4vZ2VvbWV0cmllcy9QbGFuZUdlb21ldHJ5LmpzJztcbmltcG9ydCB7IFNoYWRlck1hdGVyaWFsIH0gZnJvbSAnLi4vLi4vbWF0ZXJpYWxzL1NoYWRlck1hdGVyaWFsLmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi8uLi9vYmplY3RzL01lc2guanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uL3RleHR1cmVzL1RleHR1cmUuanMnO1xuXG5jb25zdCBfb2NjbHVzaW9uX3ZlcnRleCA9IGBcbnZvaWQgbWFpbigpIHtcblxuXHRnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcblxufWA7XG5cbmNvbnN0IF9vY2NsdXNpb25fZnJhZ21lbnQgPSBgXG51bmlmb3JtIHNhbXBsZXIyREFycmF5IGRlcHRoQ29sb3I7XG51bmlmb3JtIGZsb2F0IGRlcHRoV2lkdGg7XG51bmlmb3JtIGZsb2F0IGRlcHRoSGVpZ2h0O1xuXG52b2lkIG1haW4oKSB7XG5cblx0dmVjMiBjb29yZCA9IHZlYzIoIGdsX0ZyYWdDb29yZC54IC8gZGVwdGhXaWR0aCwgZ2xfRnJhZ0Nvb3JkLnkgLyBkZXB0aEhlaWdodCApO1xuXG5cdGlmICggY29vcmQueCA+PSAxLjAgKSB7XG5cblx0XHRnbF9GcmFnRGVwdGggPSB0ZXh0dXJlKCBkZXB0aENvbG9yLCB2ZWMzKCBjb29yZC54IC0gMS4wLCBjb29yZC55LCAxICkgKS5yO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRnbF9GcmFnRGVwdGggPSB0ZXh0dXJlKCBkZXB0aENvbG9yLCB2ZWMzKCBjb29yZC54LCBjb29yZC55LCAwICkgKS5yO1xuXG5cdH1cblxufWA7XG5cbmNsYXNzIFdlYlhSRGVwdGhTZW5zaW5nIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMudGV4dHVyZSA9IG51bGw7XG5cdFx0dGhpcy5tZXNoID0gbnVsbDtcblxuXHRcdHRoaXMuZGVwdGhOZWFyID0gMDtcblx0XHR0aGlzLmRlcHRoRmFyID0gMDtcblxuXHR9XG5cblx0aW5pdCggcmVuZGVyZXIsIGRlcHRoRGF0YSwgcmVuZGVyU3RhdGUgKSB7XG5cblx0XHRpZiAoIHRoaXMudGV4dHVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG5cblx0XHRcdGNvbnN0IHRleFByb3BzID0gcmVuZGVyZXIucHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblx0XHRcdHRleFByb3BzLl9fd2ViZ2xUZXh0dXJlID0gZGVwdGhEYXRhLnRleHR1cmU7XG5cblx0XHRcdGlmICggKCBkZXB0aERhdGEuZGVwdGhOZWFyICE9IHJlbmRlclN0YXRlLmRlcHRoTmVhciApIHx8ICggZGVwdGhEYXRhLmRlcHRoRmFyICE9IHJlbmRlclN0YXRlLmRlcHRoRmFyICkgKSB7XG5cblx0XHRcdFx0dGhpcy5kZXB0aE5lYXIgPSBkZXB0aERhdGEuZGVwdGhOZWFyO1xuXHRcdFx0XHR0aGlzLmRlcHRoRmFyID0gZGVwdGhEYXRhLmRlcHRoRmFyO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMudGV4dHVyZSA9IHRleHR1cmU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGdldE1lc2goIGNhbWVyYVhSICkge1xuXG5cdFx0aWYgKCB0aGlzLnRleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggdGhpcy5tZXNoID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHZpZXdwb3J0ID0gY2FtZXJhWFIuY2FtZXJhc1sgMCBdLnZpZXdwb3J0O1xuXHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0XHRcdHZlcnRleFNoYWRlcjogX29jY2x1c2lvbl92ZXJ0ZXgsXG5cdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IF9vY2NsdXNpb25fZnJhZ21lbnQsXG5cdFx0XHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0XHRcdGRlcHRoQ29sb3I6IHsgdmFsdWU6IHRoaXMudGV4dHVyZSB9LFxuXHRcdFx0XHRcdFx0ZGVwdGhXaWR0aDogeyB2YWx1ZTogdmlld3BvcnQueiB9LFxuXHRcdFx0XHRcdFx0ZGVwdGhIZWlnaHQ6IHsgdmFsdWU6IHZpZXdwb3J0LncgfVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdHRoaXMubWVzaCA9IG5ldyBNZXNoKCBuZXcgUGxhbmVHZW9tZXRyeSggMjAsIDIwICksIG1hdGVyaWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm1lc2g7XG5cblx0fVxuXG5cdHJlc2V0KCkge1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gbnVsbDtcblx0XHR0aGlzLm1lc2ggPSBudWxsO1xuXG5cdH1cblxuXHRnZXREZXB0aFRleHR1cmUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBXZWJYUkRlcHRoU2Vuc2luZyB9O1xuIiwiaW1wb3J0IHsgQXJyYXlDYW1lcmEgfSBmcm9tICcuLi8uLi9jYW1lcmFzL0FycmF5Q2FtZXJhLmpzJztcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJy4uLy4uL2NvcmUvRXZlbnREaXNwYXRjaGVyLmpzJztcbmltcG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhIH0gZnJvbSAnLi4vLi4vY2FtZXJhcy9QZXJzcGVjdGl2ZUNhbWVyYS5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yNC5qcyc7XG5pbXBvcnQgeyBSQUQyREVHIH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgV2ViR0xBbmltYXRpb24gfSBmcm9tICcuLi93ZWJnbC9XZWJHTEFuaW1hdGlvbi5qcyc7XG5pbXBvcnQgeyBXZWJHTFJlbmRlclRhcmdldCB9IGZyb20gJy4uL1dlYkdMUmVuZGVyVGFyZ2V0LmpzJztcbmltcG9ydCB7IFdlYlhSQ29udHJvbGxlciB9IGZyb20gJy4vV2ViWFJDb250cm9sbGVyLmpzJztcbmltcG9ydCB7IERlcHRoVGV4dHVyZSB9IGZyb20gJy4uLy4uL3RleHR1cmVzL0RlcHRoVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBEZXB0aEZvcm1hdCwgRGVwdGhTdGVuY2lsRm9ybWF0LCBSR0JBRm9ybWF0LCBVbnNpZ25lZEJ5dGVUeXBlLCBVbnNpZ25lZEludFR5cGUsIFVuc2lnbmVkSW50MjQ4VHlwZSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBXZWJYUkRlcHRoU2Vuc2luZyB9IGZyb20gJy4vV2ViWFJEZXB0aFNlbnNpbmcuanMnO1xuXG5jbGFzcyBXZWJYUk1hbmFnZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdGNvbnN0cnVjdG9yKCByZW5kZXJlciwgZ2wgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0bGV0IHNlc3Npb24gPSBudWxsO1xuXG5cdFx0bGV0IGZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSAxLjA7XG5cblx0XHRsZXQgcmVmZXJlbmNlU3BhY2UgPSBudWxsO1xuXHRcdGxldCByZWZlcmVuY2VTcGFjZVR5cGUgPSAnbG9jYWwtZmxvb3InO1xuXHRcdC8vIFNldCBkZWZhdWx0IGZvdmVhdGlvbiB0byBtYXhpbXVtLlxuXHRcdGxldCBmb3ZlYXRpb24gPSAxLjA7XG5cdFx0bGV0IGN1c3RvbVJlZmVyZW5jZVNwYWNlID0gbnVsbDtcblxuXHRcdGxldCBwb3NlID0gbnVsbDtcblx0XHRsZXQgZ2xCaW5kaW5nID0gbnVsbDtcblx0XHRsZXQgZ2xQcm9qTGF5ZXIgPSBudWxsO1xuXHRcdGxldCBnbEJhc2VMYXllciA9IG51bGw7XG5cdFx0bGV0IHhyRnJhbWUgPSBudWxsO1xuXG5cdFx0Y29uc3QgZGVwdGhTZW5zaW5nID0gbmV3IFdlYlhSRGVwdGhTZW5zaW5nKCk7XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7XG5cblx0XHRsZXQgaW5pdGlhbFJlbmRlclRhcmdldCA9IG51bGw7XG5cdFx0bGV0IG5ld1JlbmRlclRhcmdldCA9IG51bGw7XG5cblx0XHRjb25zdCBjb250cm9sbGVycyA9IFtdO1xuXHRcdGNvbnN0IGNvbnRyb2xsZXJJbnB1dFNvdXJjZXMgPSBbXTtcblxuXHRcdGNvbnN0IGN1cnJlbnRTaXplID0gbmV3IFZlY3RvcjIoKTtcblx0XHRsZXQgY3VycmVudFBpeGVsUmF0aW8gPSBudWxsO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGNhbWVyYUwgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0XHRjYW1lcmFMLmxheWVycy5lbmFibGUoIDEgKTtcblx0XHRjYW1lcmFMLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdGNvbnN0IGNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0XHRjYW1lcmFSLmxheWVycy5lbmFibGUoIDIgKTtcblx0XHRjYW1lcmFSLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdGNvbnN0IGNhbWVyYXMgPSBbIGNhbWVyYUwsIGNhbWVyYVIgXTtcblxuXHRcdGNvbnN0IGNhbWVyYVhSID0gbmV3IEFycmF5Q2FtZXJhKCk7XG5cdFx0Y2FtZXJhWFIubGF5ZXJzLmVuYWJsZSggMSApO1xuXHRcdGNhbWVyYVhSLmxheWVycy5lbmFibGUoIDIgKTtcblxuXHRcdGxldCBfY3VycmVudERlcHRoTmVhciA9IG51bGw7XG5cdFx0bGV0IF9jdXJyZW50RGVwdGhGYXIgPSBudWxsO1xuXG5cdFx0Ly9cblxuXHRcdHRoaXMuY2FtZXJhQXV0b1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR0aGlzLmlzUHJlc2VudGluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5nZXRDb250cm9sbGVyID0gZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdFx0bGV0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaW5kZXggXTtcblxuXHRcdFx0aWYgKCBjb250cm9sbGVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29udHJvbGxlciA9IG5ldyBXZWJYUkNvbnRyb2xsZXIoKTtcblx0XHRcdFx0Y29udHJvbGxlcnNbIGluZGV4IF0gPSBjb250cm9sbGVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjb250cm9sbGVyLmdldFRhcmdldFJheVNwYWNlKCk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRDb250cm9sbGVyR3JpcCA9IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRcdGxldCBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGluZGV4IF07XG5cblx0XHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIgPSBuZXcgV2ViWFJDb250cm9sbGVyKCk7XG5cdFx0XHRcdGNvbnRyb2xsZXJzWyBpbmRleCBdID0gY29udHJvbGxlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY29udHJvbGxlci5nZXRHcmlwU3BhY2UoKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldEhhbmQgPSBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0XHRsZXQgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpbmRleCBdO1xuXG5cdFx0XHRpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb250cm9sbGVyID0gbmV3IFdlYlhSQ29udHJvbGxlcigpO1xuXHRcdFx0XHRjb250cm9sbGVyc1sgaW5kZXggXSA9IGNvbnRyb2xsZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNvbnRyb2xsZXIuZ2V0SGFuZFNwYWNlKCk7XG5cblx0XHR9O1xuXG5cdFx0Ly9cblxuXHRcdGZ1bmN0aW9uIG9uU2Vzc2lvbkV2ZW50KCBldmVudCApIHtcblxuXHRcdFx0Y29uc3QgY29udHJvbGxlckluZGV4ID0gY29udHJvbGxlcklucHV0U291cmNlcy5pbmRleE9mKCBldmVudC5pbnB1dFNvdXJjZSApO1xuXG5cdFx0XHRpZiAoIGNvbnRyb2xsZXJJbmRleCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGNvbnRyb2xsZXJJbmRleCBdO1xuXG5cdFx0XHRpZiAoIGNvbnRyb2xsZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb250cm9sbGVyLnVwZGF0ZSggZXZlbnQuaW5wdXRTb3VyY2UsIGV2ZW50LmZyYW1lLCBjdXN0b21SZWZlcmVuY2VTcGFjZSB8fCByZWZlcmVuY2VTcGFjZSApO1xuXHRcdFx0XHRjb250cm9sbGVyLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogZXZlbnQudHlwZSwgZGF0YTogZXZlbnQuaW5wdXRTb3VyY2UgfSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvblNlc3Npb25FbmQoKSB7XG5cblx0XHRcdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NlbGVjdCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzZWxlY3RzdGFydCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzZWxlY3RlbmQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZScsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzcXVlZXplc3RhcnQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZWVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlbmQnLCBvblNlc3Npb25FbmQgKTtcblx0XHRcdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2lucHV0c291cmNlc2NoYW5nZScsIG9uSW5wdXRTb3VyY2VzQ2hhbmdlICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbnB1dFNvdXJjZSA9IGNvbnRyb2xsZXJJbnB1dFNvdXJjZXNbIGkgXTtcblxuXHRcdFx0XHRpZiAoIGlucHV0U291cmNlID09PSBudWxsICkgY29udGludWU7XG5cblx0XHRcdFx0Y29udHJvbGxlcklucHV0U291cmNlc1sgaSBdID0gbnVsbDtcblxuXHRcdFx0XHRjb250cm9sbGVyc1sgaSBdLmRpc2Nvbm5lY3QoIGlucHV0U291cmNlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2N1cnJlbnREZXB0aE5lYXIgPSBudWxsO1xuXHRcdFx0X2N1cnJlbnREZXB0aEZhciA9IG51bGw7XG5cblx0XHRcdGRlcHRoU2Vuc2luZy5yZXNldCgpO1xuXG5cdFx0XHQvLyByZXN0b3JlIGZyYW1lYnVmZmVyL3JlbmRlcmluZyBzdGF0ZVxuXG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGluaXRpYWxSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0Z2xCYXNlTGF5ZXIgPSBudWxsO1xuXHRcdFx0Z2xQcm9qTGF5ZXIgPSBudWxsO1xuXHRcdFx0Z2xCaW5kaW5nID0gbnVsbDtcblx0XHRcdHNlc3Npb24gPSBudWxsO1xuXHRcdFx0bmV3UmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdFx0Ly9cblxuXHRcdFx0YW5pbWF0aW9uLnN0b3AoKTtcblxuXHRcdFx0c2NvcGUuaXNQcmVzZW50aW5nID0gZmFsc2U7XG5cblx0XHRcdHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oIGN1cnJlbnRQaXhlbFJhdGlvICk7XG5cdFx0XHRyZW5kZXJlci5zZXRTaXplKCBjdXJyZW50U2l6ZS53aWR0aCwgY3VycmVudFNpemUuaGVpZ2h0LCBmYWxzZSApO1xuXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZXNzaW9uZW5kJyB9ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gdmFsdWU7XG5cblx0XHRcdGlmICggc2NvcGUuaXNQcmVzZW50aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYlhSTWFuYWdlcjogQ2Fubm90IGNoYW5nZSBmcmFtZWJ1ZmZlciBzY2FsZSB3aGlsZSBwcmVzZW50aW5nLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMuc2V0UmVmZXJlbmNlU3BhY2VUeXBlID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0cmVmZXJlbmNlU3BhY2VUeXBlID0gdmFsdWU7XG5cblx0XHRcdGlmICggc2NvcGUuaXNQcmVzZW50aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYlhSTWFuYWdlcjogQ2Fubm90IGNoYW5nZSByZWZlcmVuY2Ugc3BhY2UgdHlwZSB3aGlsZSBwcmVzZW50aW5nLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0UmVmZXJlbmNlU3BhY2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjdXN0b21SZWZlcmVuY2VTcGFjZSB8fCByZWZlcmVuY2VTcGFjZTtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldFJlZmVyZW5jZVNwYWNlID0gZnVuY3Rpb24gKCBzcGFjZSApIHtcblxuXHRcdFx0Y3VzdG9tUmVmZXJlbmNlU3BhY2UgPSBzcGFjZTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldEJhc2VMYXllciA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGdsUHJvakxheWVyICE9PSBudWxsID8gZ2xQcm9qTGF5ZXIgOiBnbEJhc2VMYXllcjtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldEJpbmRpbmcgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBnbEJpbmRpbmc7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRGcmFtZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHhyRnJhbWU7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gc2Vzc2lvbjtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldFNlc3Npb24gPSBhc3luYyBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRzZXNzaW9uID0gdmFsdWU7XG5cblx0XHRcdGlmICggc2Vzc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpbml0aWFsUmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0c3RhcnQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3RlbmQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzcXVlZXplJywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZXN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZWVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ2VuZCcsIG9uU2Vzc2lvbkVuZCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dHNvdXJjZXNjaGFuZ2UnLCBvbklucHV0U291cmNlc0NoYW5nZSApO1xuXG5cdFx0XHRcdGlmICggYXR0cmlidXRlcy54ckNvbXBhdGlibGUgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRhd2FpdCBnbC5tYWtlWFJDb21wYXRpYmxlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN1cnJlbnRQaXhlbFJhdGlvID0gcmVuZGVyZXIuZ2V0UGl4ZWxSYXRpbygpO1xuXHRcdFx0XHRyZW5kZXJlci5nZXRTaXplKCBjdXJyZW50U2l6ZSApO1xuXG5cdFx0XHRcdGlmICggc2Vzc2lvbi5yZW5kZXJTdGF0ZS5sYXllcnMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGxheWVySW5pdCA9IHtcblx0XHRcdFx0XHRcdGFudGlhbGlhczogYXR0cmlidXRlcy5hbnRpYWxpYXMsXG5cdFx0XHRcdFx0XHRhbHBoYTogdHJ1ZSxcblx0XHRcdFx0XHRcdGRlcHRoOiBhdHRyaWJ1dGVzLmRlcHRoLFxuXHRcdFx0XHRcdFx0c3RlbmNpbDogYXR0cmlidXRlcy5zdGVuY2lsLFxuXHRcdFx0XHRcdFx0ZnJhbWVidWZmZXJTY2FsZUZhY3RvcjogZnJhbWVidWZmZXJTY2FsZUZhY3RvclxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRnbEJhc2VMYXllciA9IG5ldyBYUldlYkdMTGF5ZXIoIHNlc3Npb24sIGdsLCBsYXllckluaXQgKTtcblxuXHRcdFx0XHRcdHNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoIHsgYmFzZUxheWVyOiBnbEJhc2VMYXllciB9ICk7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5zZXRQaXhlbFJhdGlvKCAxICk7XG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0U2l6ZSggZ2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJXaWR0aCwgZ2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJIZWlnaHQsIGZhbHNlICk7XG5cblx0XHRcdFx0XHRuZXdSZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoXG5cdFx0XHRcdFx0XHRnbEJhc2VMYXllci5mcmFtZWJ1ZmZlcldpZHRoLFxuXHRcdFx0XHRcdFx0Z2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJIZWlnaHQsXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGZvcm1hdDogUkdCQUZvcm1hdCxcblx0XHRcdFx0XHRcdFx0dHlwZTogVW5zaWduZWRCeXRlVHlwZSxcblx0XHRcdFx0XHRcdFx0Y29sb3JTcGFjZTogcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSxcblx0XHRcdFx0XHRcdFx0c3RlbmNpbEJ1ZmZlcjogYXR0cmlidXRlcy5zdGVuY2lsXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0bGV0IGRlcHRoRm9ybWF0ID0gbnVsbDtcblx0XHRcdFx0XHRsZXQgZGVwdGhUeXBlID0gbnVsbDtcblx0XHRcdFx0XHRsZXQgZ2xEZXB0aEZvcm1hdCA9IG51bGw7XG5cblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZXMuZGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdGdsRGVwdGhGb3JtYXQgPSBhdHRyaWJ1dGVzLnN0ZW5jaWwgPyBnbC5ERVBUSDI0X1NURU5DSUw4IDogZ2wuREVQVEhfQ09NUE9ORU5UMjQ7XG5cdFx0XHRcdFx0XHRkZXB0aEZvcm1hdCA9IGF0dHJpYnV0ZXMuc3RlbmNpbCA/IERlcHRoU3RlbmNpbEZvcm1hdCA6IERlcHRoRm9ybWF0O1xuXHRcdFx0XHRcdFx0ZGVwdGhUeXBlID0gYXR0cmlidXRlcy5zdGVuY2lsID8gVW5zaWduZWRJbnQyNDhUeXBlIDogVW5zaWduZWRJbnRUeXBlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc3QgcHJvamVjdGlvbmxheWVySW5pdCA9IHtcblx0XHRcdFx0XHRcdGNvbG9yRm9ybWF0OiBnbC5SR0JBOCxcblx0XHRcdFx0XHRcdGRlcHRoRm9ybWF0OiBnbERlcHRoRm9ybWF0LFxuXHRcdFx0XHRcdFx0c2NhbGVGYWN0b3I6IGZyYW1lYnVmZmVyU2NhbGVGYWN0b3Jcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Z2xCaW5kaW5nID0gbmV3IFhSV2ViR0xCaW5kaW5nKCBzZXNzaW9uLCBnbCApO1xuXG5cdFx0XHRcdFx0Z2xQcm9qTGF5ZXIgPSBnbEJpbmRpbmcuY3JlYXRlUHJvamVjdGlvbkxheWVyKCBwcm9qZWN0aW9ubGF5ZXJJbml0ICk7XG5cblx0XHRcdFx0XHRzZXNzaW9uLnVwZGF0ZVJlbmRlclN0YXRlKCB7IGxheWVyczogWyBnbFByb2pMYXllciBdIH0gKTtcblxuXHRcdFx0XHRcdHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oIDEgKTtcblx0XHRcdFx0XHRyZW5kZXJlci5zZXRTaXplKCBnbFByb2pMYXllci50ZXh0dXJlV2lkdGgsIGdsUHJvakxheWVyLnRleHR1cmVIZWlnaHQsIGZhbHNlICk7XG5cblx0XHRcdFx0XHRuZXdSZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoXG5cdFx0XHRcdFx0XHRnbFByb2pMYXllci50ZXh0dXJlV2lkdGgsXG5cdFx0XHRcdFx0XHRnbFByb2pMYXllci50ZXh0dXJlSGVpZ2h0LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRmb3JtYXQ6IFJHQkFGb3JtYXQsXG5cdFx0XHRcdFx0XHRcdHR5cGU6IFVuc2lnbmVkQnl0ZVR5cGUsXG5cdFx0XHRcdFx0XHRcdGRlcHRoVGV4dHVyZTogbmV3IERlcHRoVGV4dHVyZSggZ2xQcm9qTGF5ZXIudGV4dHVyZVdpZHRoLCBnbFByb2pMYXllci50ZXh0dXJlSGVpZ2h0LCBkZXB0aFR5cGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGRlcHRoRm9ybWF0ICksXG5cdFx0XHRcdFx0XHRcdHN0ZW5jaWxCdWZmZXI6IGF0dHJpYnV0ZXMuc3RlbmNpbCxcblx0XHRcdFx0XHRcdFx0Y29sb3JTcGFjZTogcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSxcblx0XHRcdFx0XHRcdFx0c2FtcGxlczogYXR0cmlidXRlcy5hbnRpYWxpYXMgPyA0IDogMCxcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZURlcHRoQnVmZmVyOiAoIGdsUHJvakxheWVyLmlnbm9yZURlcHRoVmFsdWVzID09PSBmYWxzZSApXG5cdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG5ld1JlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID0gdHJ1ZTsgLy8gVE9ETyBSZW1vdmUgdGhpcyB3aGVuIHBvc3NpYmxlLCBzZWUgIzIzMjc4XG5cblx0XHRcdFx0dGhpcy5zZXRGb3ZlYXRpb24oIGZvdmVhdGlvbiApO1xuXG5cdFx0XHRcdGN1c3RvbVJlZmVyZW5jZVNwYWNlID0gbnVsbDtcblx0XHRcdFx0cmVmZXJlbmNlU3BhY2UgPSBhd2FpdCBzZXNzaW9uLnJlcXVlc3RSZWZlcmVuY2VTcGFjZSggcmVmZXJlbmNlU3BhY2VUeXBlICk7XG5cblx0XHRcdFx0YW5pbWF0aW9uLnNldENvbnRleHQoIHNlc3Npb24gKTtcblx0XHRcdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0XHRcdFx0c2NvcGUuaXNQcmVzZW50aW5nID0gdHJ1ZTtcblxuXHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZXNzaW9uc3RhcnQnIH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0RW52aXJvbm1lbnRCbGVuZE1vZGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggc2Vzc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRyZXR1cm4gc2Vzc2lvbi5lbnZpcm9ubWVudEJsZW5kTW9kZTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0RGVwdGhUZXh0dXJlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gZGVwdGhTZW5zaW5nLmdldERlcHRoVGV4dHVyZSgpO1xuXG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIG9uSW5wdXRTb3VyY2VzQ2hhbmdlKCBldmVudCApIHtcblxuXHRcdFx0Ly8gTm90aWZ5IGRpc2Nvbm5lY3RlZFxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBldmVudC5yZW1vdmVkLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbnB1dFNvdXJjZSA9IGV2ZW50LnJlbW92ZWRbIGkgXTtcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBjb250cm9sbGVySW5wdXRTb3VyY2VzLmluZGV4T2YoIGlucHV0U291cmNlICk7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA+PSAwICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlcklucHV0U291cmNlc1sgaW5kZXggXSA9IG51bGw7XG5cdFx0XHRcdFx0Y29udHJvbGxlcnNbIGluZGV4IF0uZGlzY29ubmVjdCggaW5wdXRTb3VyY2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTm90aWZ5IGNvbm5lY3RlZFxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBldmVudC5hZGRlZC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSBldmVudC5hZGRlZFsgaSBdO1xuXG5cdFx0XHRcdGxldCBjb250cm9sbGVySW5kZXggPSBjb250cm9sbGVySW5wdXRTb3VyY2VzLmluZGV4T2YoIGlucHV0U291cmNlICk7XG5cblx0XHRcdFx0aWYgKCBjb250cm9sbGVySW5kZXggPT09IC0gMSApIHtcblxuXHRcdFx0XHRcdC8vIEFzc2lnbiBpbnB1dCBzb3VyY2UgYSBjb250cm9sbGVyIHRoYXQgY3VycmVudGx5IGhhcyBubyBpbnB1dCBzb3VyY2VcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBpID49IGNvbnRyb2xsZXJJbnB1dFNvdXJjZXMubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXJJbnB1dFNvdXJjZXMucHVzaCggaW5wdXRTb3VyY2UgKTtcblx0XHRcdFx0XHRcdFx0Y29udHJvbGxlckluZGV4ID0gaTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRyb2xsZXJJbnB1dFNvdXJjZXNbIGkgXSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0XHRjb250cm9sbGVySW5wdXRTb3VyY2VzWyBpIF0gPSBpbnB1dFNvdXJjZTtcblx0XHRcdFx0XHRcdFx0Y29udHJvbGxlckluZGV4ID0gaTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIElmIGFsbCBjb250cm9sbGVycyBkbyBjdXJyZW50bHkgcmVjZWl2ZSBpbnB1dCB3ZSBpZ25vcmUgbmV3IG9uZXNcblxuXHRcdFx0XHRcdGlmICggY29udHJvbGxlckluZGV4ID09PSAtIDEgKSBicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBjb250cm9sbGVySW5kZXggXTtcblxuXHRcdFx0XHRpZiAoIGNvbnRyb2xsZXIgKSB7XG5cblx0XHRcdFx0XHRjb250cm9sbGVyLmNvbm5lY3QoIGlucHV0U291cmNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgY2FtZXJhTFBvcyA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgY2FtZXJhUlBvcyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvKipcblx0XHQgKiBBc3N1bWVzIDIgY2FtZXJhcyB0aGF0IGFyZSBwYXJhbGxlbCBhbmQgc2hhcmUgYW4gWC1heGlzLCBhbmQgdGhhdFxuXHRcdCAqIHRoZSBjYW1lcmFzJyBwcm9qZWN0aW9uIGFuZCB3b3JsZCBtYXRyaWNlcyBoYXZlIGFscmVhZHkgYmVlbiBzZXQuXG5cdFx0ICogQW5kIHRoYXQgbmVhciBhbmQgZmFyIHBsYW5lcyBhcmUgaWRlbnRpY2FsIGZvciBib3RoIGNhbWVyYXMuXG5cdFx0ICogVmlzdWFsaXphdGlvbiBvZiB0aGlzIHRlY2huaXF1ZTogaHR0cHM6Ly9jb21wdXRlcmdyYXBoaWNzLnN0YWNrZXhjaGFuZ2UuY29tL2EvNDc2NVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYSwgY2FtZXJhTCwgY2FtZXJhUiApIHtcblxuXHRcdFx0Y2FtZXJhTFBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYUwubWF0cml4V29ybGQgKTtcblx0XHRcdGNhbWVyYVJQb3Muc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmFSLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdGNvbnN0IGlwZCA9IGNhbWVyYUxQb3MuZGlzdGFuY2VUbyggY2FtZXJhUlBvcyApO1xuXG5cdFx0XHRjb25zdCBwcm9qTCA9IGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cztcblx0XHRcdGNvbnN0IHByb2pSID0gY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzO1xuXG5cdFx0XHQvLyBWUiBzeXN0ZW1zIHdpbGwgaGF2ZSBpZGVudGljYWwgZmFyIGFuZCBuZWFyIHBsYW5lcywgYW5kXG5cdFx0XHQvLyBtb3N0IGxpa2VseSBpZGVudGljYWwgdG9wIGFuZCBib3R0b20gZnJ1c3R1bSBleHRlbnRzLlxuXHRcdFx0Ly8gVXNlIHRoZSBsZWZ0IGNhbWVyYSBmb3IgdGhlc2UgdmFsdWVzLlxuXHRcdFx0Y29uc3QgbmVhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSAtIDEgKTtcblx0XHRcdGNvbnN0IGZhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSArIDEgKTtcblx0XHRcdGNvbnN0IHRvcEZvdiA9ICggcHJvakxbIDkgXSArIDEgKSAvIHByb2pMWyA1IF07XG5cdFx0XHRjb25zdCBib3R0b21Gb3YgPSAoIHByb2pMWyA5IF0gLSAxICkgLyBwcm9qTFsgNSBdO1xuXG5cdFx0XHRjb25zdCBsZWZ0Rm92ID0gKCBwcm9qTFsgOCBdIC0gMSApIC8gcHJvakxbIDAgXTtcblx0XHRcdGNvbnN0IHJpZ2h0Rm92ID0gKCBwcm9qUlsgOCBdICsgMSApIC8gcHJvalJbIDAgXTtcblx0XHRcdGNvbnN0IGxlZnQgPSBuZWFyICogbGVmdEZvdjtcblx0XHRcdGNvbnN0IHJpZ2h0ID0gbmVhciAqIHJpZ2h0Rm92O1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgdGhlIG5ldyBjYW1lcmEncyBwb3NpdGlvbiBvZmZzZXQgZnJvbSB0aGVcblx0XHRcdC8vIGxlZnQgY2FtZXJhLiB4T2Zmc2V0IHNob3VsZCBiZSByb3VnaGx5IGhhbGYgYGlwZGAuXG5cdFx0XHRjb25zdCB6T2Zmc2V0ID0gaXBkIC8gKCAtIGxlZnRGb3YgKyByaWdodEZvdiApO1xuXHRcdFx0Y29uc3QgeE9mZnNldCA9IHpPZmZzZXQgKiAtIGxlZnRGb3Y7XG5cblx0XHRcdC8vIFRPRE86IEJldHRlciB3YXkgdG8gYXBwbHkgdGhpcyBvZmZzZXQ/XG5cdFx0XHRjYW1lcmFMLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggY2FtZXJhLnBvc2l0aW9uLCBjYW1lcmEucXVhdGVybmlvbiwgY2FtZXJhLnNjYWxlICk7XG5cdFx0XHRjYW1lcmEudHJhbnNsYXRlWCggeE9mZnNldCApO1xuXHRcdFx0Y2FtZXJhLnRyYW5zbGF0ZVooIHpPZmZzZXQgKTtcblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5jb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0XHRcdC8vIEZpbmQgdGhlIHVuaW9uIG9mIHRoZSBmcnVzdHVtIHZhbHVlcyBvZiB0aGUgY2FtZXJhcyBhbmQgc2NhbGVcblx0XHRcdC8vIHRoZSB2YWx1ZXMgc28gdGhhdCB0aGUgbmVhciBwbGFuZSdzIHBvc2l0aW9uIGRvZXMgbm90IGNoYW5nZSBpbiB3b3JsZCBzcGFjZSxcblx0XHRcdC8vIGFsdGhvdWdoIG11c3Qgbm93IGJlIHJlbGF0aXZlIHRvIHRoZSBuZXcgdW5pb24gY2FtZXJhLlxuXHRcdFx0Y29uc3QgbmVhcjIgPSBuZWFyICsgek9mZnNldDtcblx0XHRcdGNvbnN0IGZhcjIgPSBmYXIgKyB6T2Zmc2V0O1xuXHRcdFx0Y29uc3QgbGVmdDIgPSBsZWZ0IC0geE9mZnNldDtcblx0XHRcdGNvbnN0IHJpZ2h0MiA9IHJpZ2h0ICsgKCBpcGQgLSB4T2Zmc2V0ICk7XG5cdFx0XHRjb25zdCB0b3AyID0gdG9wRm92ICogZmFyIC8gZmFyMiAqIG5lYXIyO1xuXHRcdFx0Y29uc3QgYm90dG9tMiA9IGJvdHRvbUZvdiAqIGZhciAvIGZhcjIgKiBuZWFyMjtcblxuXHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0MiwgcmlnaHQyLCB0b3AyLCBib3R0b20yLCBuZWFyMiwgZmFyMiApO1xuXHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICkuaW52ZXJ0KCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiB1cGRhdGVDYW1lcmEoIGNhbWVyYSwgcGFyZW50ICkge1xuXG5cdFx0XHRpZiAoIHBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjYW1lcmEubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCBwYXJlbnQubWF0cml4V29ybGQsIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVDYW1lcmEgPSBmdW5jdGlvbiAoIGNhbWVyYSApIHtcblxuXHRcdFx0aWYgKCBzZXNzaW9uID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0XHRpZiAoIGRlcHRoU2Vuc2luZy50ZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNhbWVyYS5uZWFyID0gZGVwdGhTZW5zaW5nLmRlcHRoTmVhcjtcblx0XHRcdFx0Y2FtZXJhLmZhciA9IGRlcHRoU2Vuc2luZy5kZXB0aEZhcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjYW1lcmFYUi5uZWFyID0gY2FtZXJhUi5uZWFyID0gY2FtZXJhTC5uZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0XHRjYW1lcmFYUi5mYXIgPSBjYW1lcmFSLmZhciA9IGNhbWVyYUwuZmFyID0gY2FtZXJhLmZhcjtcblxuXHRcdFx0aWYgKCBfY3VycmVudERlcHRoTmVhciAhPT0gY2FtZXJhWFIubmVhciB8fCBfY3VycmVudERlcHRoRmFyICE9PSBjYW1lcmFYUi5mYXIgKSB7XG5cblx0XHRcdFx0Ly8gTm90ZSB0aGF0IHRoZSBuZXcgcmVuZGVyU3RhdGUgd29uJ3QgYXBwbHkgdW50aWwgdGhlIG5leHQgZnJhbWUuIFNlZSAjMTgzMjBcblxuXHRcdFx0XHRzZXNzaW9uLnVwZGF0ZVJlbmRlclN0YXRlKCB7XG5cdFx0XHRcdFx0ZGVwdGhOZWFyOiBjYW1lcmFYUi5uZWFyLFxuXHRcdFx0XHRcdGRlcHRoRmFyOiBjYW1lcmFYUi5mYXJcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdF9jdXJyZW50RGVwdGhOZWFyID0gY2FtZXJhWFIubmVhcjtcblx0XHRcdFx0X2N1cnJlbnREZXB0aEZhciA9IGNhbWVyYVhSLmZhcjtcblxuXHRcdFx0XHRjYW1lcmFMLm5lYXIgPSBfY3VycmVudERlcHRoTmVhcjtcblx0XHRcdFx0Y2FtZXJhTC5mYXIgPSBfY3VycmVudERlcHRoRmFyO1xuXHRcdFx0XHRjYW1lcmFSLm5lYXIgPSBfY3VycmVudERlcHRoTmVhcjtcblx0XHRcdFx0Y2FtZXJhUi5mYXIgPSBfY3VycmVudERlcHRoRmFyO1xuXG5cdFx0XHRcdGNhbWVyYUwudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXHRcdFx0XHRjYW1lcmFSLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRcdFx0Y2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBwYXJlbnQgPSBjYW1lcmEucGFyZW50O1xuXHRcdFx0Y29uc3QgY2FtZXJhcyA9IGNhbWVyYVhSLmNhbWVyYXM7XG5cblx0XHRcdHVwZGF0ZUNhbWVyYSggY2FtZXJhWFIsIHBhcmVudCApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjYW1lcmFzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR1cGRhdGVDYW1lcmEoIGNhbWVyYXNbIGkgXSwgcGFyZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gdXBkYXRlIHByb2plY3Rpb24gbWF0cml4IGZvciBwcm9wZXIgdmlldyBmcnVzdHVtIGN1bGxpbmdcblxuXHRcdFx0aWYgKCBjYW1lcmFzLmxlbmd0aCA9PT0gMiApIHtcblxuXHRcdFx0XHRzZXRQcm9qZWN0aW9uRnJvbVVuaW9uKCBjYW1lcmFYUiwgY2FtZXJhTCwgY2FtZXJhUiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIGFzc3VtZSBzaW5nbGUgY2FtZXJhIHNldHVwIChBUilcblxuXHRcdFx0XHRjYW1lcmFYUi5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHVwZGF0ZSB1c2VyIGNhbWVyYSBhbmQgaXRzIGNoaWxkcmVuXG5cblx0XHRcdHVwZGF0ZVVzZXJDYW1lcmEoIGNhbWVyYSwgY2FtZXJhWFIsIHBhcmVudCApO1xuXG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHVwZGF0ZVVzZXJDYW1lcmEoIGNhbWVyYSwgY2FtZXJhWFIsIHBhcmVudCApIHtcblxuXHRcdFx0aWYgKCBwYXJlbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5jb3B5KCBjYW1lcmFYUi5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNhbWVyYS5tYXRyaXguY29weSggcGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdGNhbWVyYS5tYXRyaXguaW52ZXJ0KCk7XG5cdFx0XHRcdGNhbWVyYS5tYXRyaXgubXVsdGlwbHkoIGNhbWVyYVhSLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FtZXJhLm1hdHJpeC5kZWNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRcdFx0Y2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIGNhbWVyYVhSLnByb2plY3Rpb25NYXRyaXggKTtcblx0XHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCBjYW1lcmFYUi5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0XHRpZiAoIGNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xuXG5cdFx0XHRcdGNhbWVyYS5mb3YgPSBSQUQyREVHICogMiAqIE1hdGguYXRhbiggMSAvIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA1IF0gKTtcblx0XHRcdFx0Y2FtZXJhLnpvb20gPSAxO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmdldENhbWVyYSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGNhbWVyYVhSO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0Rm92ZWF0aW9uID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoIGdsUHJvakxheWVyID09PSBudWxsICYmIGdsQmFzZUxheWVyID09PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZvdmVhdGlvbjtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldEZvdmVhdGlvbiA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdC8vIDAgPSBubyBmb3ZlYXRpb24gPSBmdWxsIHJlc29sdXRpb25cblx0XHRcdC8vIDEgPSBtYXhpbXVtIGZvdmVhdGlvbiA9IHRoZSBlZGdlcyByZW5kZXIgYXQgbG93ZXIgcmVzb2x1dGlvblxuXG5cdFx0XHRmb3ZlYXRpb24gPSB2YWx1ZTtcblxuXHRcdFx0aWYgKCBnbFByb2pMYXllciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRnbFByb2pMYXllci5maXhlZEZvdmVhdGlvbiA9IHZhbHVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZ2xCYXNlTGF5ZXIgIT09IG51bGwgJiYgZ2xCYXNlTGF5ZXIuZml4ZWRGb3ZlYXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRnbEJhc2VMYXllci5maXhlZEZvdmVhdGlvbiA9IHZhbHVlO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5oYXNEZXB0aFNlbnNpbmcgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBkZXB0aFNlbnNpbmcudGV4dHVyZSAhPT0gbnVsbDtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldERlcHRoU2Vuc2luZ01lc2ggPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBkZXB0aFNlbnNpbmcuZ2V0TWVzaCggY2FtZXJhWFIgKTtcblxuXHRcdH07XG5cblx0XHQvLyBBbmltYXRpb24gTG9vcFxuXG5cdFx0bGV0IG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IG51bGw7XG5cblx0XHRmdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKCB0aW1lLCBmcmFtZSApIHtcblxuXHRcdFx0cG9zZSA9IGZyYW1lLmdldFZpZXdlclBvc2UoIGN1c3RvbVJlZmVyZW5jZVNwYWNlIHx8IHJlZmVyZW5jZVNwYWNlICk7XG5cdFx0XHR4ckZyYW1lID0gZnJhbWU7XG5cblx0XHRcdGlmICggcG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCB2aWV3cyA9IHBvc2Uudmlld3M7XG5cblx0XHRcdFx0aWYgKCBnbEJhc2VMYXllciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldEZyYW1lYnVmZmVyKCBuZXdSZW5kZXJUYXJnZXQsIGdsQmFzZUxheWVyLmZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBuZXdSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IGNhbWVyYVhSTmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyBjaGVjayBpZiBpdCdzIG5lY2Vzc2FyeSB0byByZWJ1aWxkIGNhbWVyYVhSJ3MgY2FtZXJhIGxpc3RcblxuXHRcdFx0XHRpZiAoIHZpZXdzLmxlbmd0aCAhPT0gY2FtZXJhWFIuY2FtZXJhcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHRjYW1lcmFYUi5jYW1lcmFzLmxlbmd0aCA9IDA7XG5cdFx0XHRcdFx0Y2FtZXJhWFJOZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHZpZXdzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZpZXcgPSB2aWV3c1sgaSBdO1xuXG5cdFx0XHRcdFx0bGV0IHZpZXdwb3J0ID0gbnVsbDtcblxuXHRcdFx0XHRcdGlmICggZ2xCYXNlTGF5ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdHZpZXdwb3J0ID0gZ2xCYXNlTGF5ZXIuZ2V0Vmlld3BvcnQoIHZpZXcgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGdsU3ViSW1hZ2UgPSBnbEJpbmRpbmcuZ2V0Vmlld1N1YkltYWdlKCBnbFByb2pMYXllciwgdmlldyApO1xuXHRcdFx0XHRcdFx0dmlld3BvcnQgPSBnbFN1YkltYWdlLnZpZXdwb3J0O1xuXG5cdFx0XHRcdFx0XHQvLyBGb3Igc2lkZS1ieS1zaWRlIHByb2plY3Rpb24sIHdlIG9ubHkgcHJvZHVjZSBhIHNpbmdsZSB0ZXh0dXJlIGZvciBib3RoIGV5ZXMuXG5cdFx0XHRcdFx0XHRpZiAoIGkgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0VGV4dHVyZXMoXG5cdFx0XHRcdFx0XHRcdFx0bmV3UmVuZGVyVGFyZ2V0LFxuXHRcdFx0XHRcdFx0XHRcdGdsU3ViSW1hZ2UuY29sb3JUZXh0dXJlLFxuXHRcdFx0XHRcdFx0XHRcdGdsUHJvakxheWVyLmlnbm9yZURlcHRoVmFsdWVzID8gdW5kZWZpbmVkIDogZ2xTdWJJbWFnZS5kZXB0aFN0ZW5jaWxUZXh0dXJlICk7XG5cblx0XHRcdFx0XHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBuZXdSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bGV0IGNhbWVyYSA9IGNhbWVyYXNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggY2FtZXJhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdFx0XHRcdFx0Y2FtZXJhLmxheWVycy5lbmFibGUoIGkgKTtcblx0XHRcdFx0XHRcdGNhbWVyYS52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cdFx0XHRcdFx0XHRjYW1lcmFzWyBpIF0gPSBjYW1lcmE7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjYW1lcmEubWF0cml4LmZyb21BcnJheSggdmlldy50cmFuc2Zvcm0ubWF0cml4ICk7XG5cdFx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5kZWNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRcdFx0XHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheSggdmlldy5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0XHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICkuaW52ZXJ0KCk7XG5cdFx0XHRcdFx0Y2FtZXJhLnZpZXdwb3J0LnNldCggdmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQud2lkdGgsIHZpZXdwb3J0LmhlaWdodCApO1xuXG5cdFx0XHRcdFx0aWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHRjYW1lcmFYUi5tYXRyaXguY29weSggY2FtZXJhLm1hdHJpeCApO1xuXHRcdFx0XHRcdFx0Y2FtZXJhWFIubWF0cml4LmRlY29tcG9zZSggY2FtZXJhWFIucG9zaXRpb24sIGNhbWVyYVhSLnF1YXRlcm5pb24sIGNhbWVyYVhSLnNjYWxlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGNhbWVyYVhSTmVlZHNVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdGNhbWVyYVhSLmNhbWVyYXMucHVzaCggY2FtZXJhICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vXG5cblx0XHRcdFx0Y29uc3QgZW5hYmxlZEZlYXR1cmVzID0gc2Vzc2lvbi5lbmFibGVkRmVhdHVyZXM7XG5cblx0XHRcdFx0aWYgKCBlbmFibGVkRmVhdHVyZXMgJiYgZW5hYmxlZEZlYXR1cmVzLmluY2x1ZGVzKCAnZGVwdGgtc2Vuc2luZycgKSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGRlcHRoRGF0YSA9IGdsQmluZGluZy5nZXREZXB0aEluZm9ybWF0aW9uKCB2aWV3c1sgMCBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGRlcHRoRGF0YSAmJiBkZXB0aERhdGEuaXNWYWxpZCAmJiBkZXB0aERhdGEudGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdFx0ZGVwdGhTZW5zaW5nLmluaXQoIHJlbmRlcmVyLCBkZXB0aERhdGEsIHNlc3Npb24ucmVuZGVyU3RhdGUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGlucHV0U291cmNlID0gY29udHJvbGxlcklucHV0U291cmNlc1sgaSBdO1xuXHRcdFx0XHRjb25zdCBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGkgXTtcblxuXHRcdFx0XHRpZiAoIGlucHV0U291cmNlICE9PSBudWxsICYmIGNvbnRyb2xsZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnRyb2xsZXIudXBkYXRlKCBpbnB1dFNvdXJjZSwgZnJhbWUsIGN1c3RvbVJlZmVyZW5jZVNwYWNlIHx8IHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lLCBmcmFtZSApO1xuXG5cdFx0XHRpZiAoIGZyYW1lLmRldGVjdGVkUGxhbmVzICkge1xuXG5cdFx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3BsYW5lc2RldGVjdGVkJywgZGF0YTogZnJhbWUgfSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHhyRnJhbWUgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYW5pbWF0aW9uID0gbmV3IFdlYkdMQW5pbWF0aW9uKCk7XG5cblx0XHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcCggb25BbmltYXRpb25GcmFtZSApO1xuXG5cdFx0dGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdFx0b25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge307XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFdlYlhSTWFuYWdlciB9O1xuIiwiaW1wb3J0IHsgQmFja1NpZGUgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgZ2V0VW5saXRVbmlmb3JtQ29sb3JTcGFjZSB9IGZyb20gJy4uL3NoYWRlcnMvVW5pZm9ybXNVdGlscy5qcyc7XG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uLy4uL21hdGgvRXVsZXIuanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uLy4uL21hdGgvTWF0cml4NC5qcyc7XG5cbmNvbnN0IF9lMSA9IC8qQF9fUFVSRV9fKi8gbmV3IEV1bGVyKCk7XG5jb25zdCBfbTEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5cbmZ1bmN0aW9uIFdlYkdMTWF0ZXJpYWxzKCByZW5kZXJlciwgcHJvcGVydGllcyApIHtcblxuXHRmdW5jdGlvbiByZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWFwLCB1bmlmb3JtICkge1xuXG5cdFx0aWYgKCBtYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0bWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0fVxuXG5cdFx0dW5pZm9ybS52YWx1ZS5jb3B5KCBtYXAubWF0cml4ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hGb2dVbmlmb3JtcyggdW5pZm9ybXMsIGZvZyApIHtcblxuXHRcdGZvZy5jb2xvci5nZXRSR0IoIHVuaWZvcm1zLmZvZ0NvbG9yLnZhbHVlLCBnZXRVbmxpdFVuaWZvcm1Db2xvclNwYWNlKCByZW5kZXJlciApICk7XG5cblx0XHRpZiAoIGZvZy5pc0ZvZyApIHtcblxuXHRcdFx0dW5pZm9ybXMuZm9nTmVhci52YWx1ZSA9IGZvZy5uZWFyO1xuXHRcdFx0dW5pZm9ybXMuZm9nRmFyLnZhbHVlID0gZm9nLmZhcjtcblxuXHRcdH0gZWxzZSBpZiAoIGZvZy5pc0ZvZ0V4cDIgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmZvZ0RlbnNpdHkudmFsdWUgPSBmb2cuZGVuc2l0eTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaE1hdGVyaWFsVW5pZm9ybXMoIHVuaWZvcm1zLCBtYXRlcmlhbCwgcGl4ZWxSYXRpbywgaGVpZ2h0LCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaEJhc2ljTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNUb29uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNQaG9uZyggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0cmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwoIHVuaWZvcm1zLCBtYXRlcmlhbCwgdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaE1hdGNhcE1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0cmVmcmVzaFVuaWZvcm1zTWF0Y2FwKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaERlcHRoTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hEaXN0YW5jZU1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0cmVmcmVzaFVuaWZvcm1zRGlzdGFuY2UoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc0xpbmVCYXNpY01hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNMaW5lKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc0xpbmVEYXNoZWRNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNEYXNoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNQb2ludHNNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zUG9pbnRzKCB1bmlmb3JtcywgbWF0ZXJpYWwsIHBpeGVsUmF0aW8sIGhlaWdodCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNTcHJpdGVNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zU3ByaXRlcyggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1NoYWRvd01hdGVyaWFsICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5jb2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0XHRtYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTsgLy8gIzE1NTgxXG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmNvbG9yICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVtaXNzaXZlICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5lbWlzc2l2ZSApLm11bHRpcGx5U2NhbGFyKCBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLm1hcCwgdW5pZm9ybXMubWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuYWxwaGFNYXAsIHVuaWZvcm1zLmFscGhhTWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuYnVtcE1hcCwgdW5pZm9ybXMuYnVtcE1hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgPSBtYXRlcmlhbC5idW1wU2NhbGU7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLm5vcm1hbE1hcCwgdW5pZm9ybXMubm9ybWFsTWFwVHJhbnNmb3JtICk7XG5cblx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAsIHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuZW1pc3NpdmVNYXAsIHVuaWZvcm1zLmVtaXNzaXZlTWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5zcGVjdWxhck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuc3BlY3VsYXJNYXAsIHVuaWZvcm1zLnNwZWN1bGFyTWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhVGVzdCA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhVGVzdC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhVGVzdDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXG5cdFx0Y29uc3QgZW52TWFwID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudk1hcDtcblx0XHRjb25zdCBlbnZNYXBSb3RhdGlvbiA9IG1hdGVyaWFsUHJvcGVydGllcy5lbnZNYXBSb3RhdGlvbjtcblxuXHRcdGlmICggZW52TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBlbnZNYXA7XG5cblx0XHRcdF9lMS5jb3B5KCBlbnZNYXBSb3RhdGlvbiApO1xuXG5cdFx0XHQvLyBhY2NvbW1vZGF0ZSBsZWZ0LWhhbmRlZCBmcmFtZVxuXHRcdFx0X2UxLnggKj0gLSAxOyBfZTEueSAqPSAtIDE7IF9lMS56ICo9IC0gMTtcblxuXHRcdFx0aWYgKCBlbnZNYXAuaXNDdWJlVGV4dHVyZSAmJiBlbnZNYXAuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBlbnZpcm9ubWVudCBtYXBzIHdoaWNoIGFyZSBub3QgY3ViZSByZW5kZXIgdGFyZ2V0cyBvciBQTVJFTXMgZm9sbG93IGEgZGlmZmVyZW50IGNvbnZlbnRpb25cblx0XHRcdFx0X2UxLnkgKj0gLSAxO1xuXHRcdFx0XHRfZTEueiAqPSAtIDE7XG5cblx0XHRcdH1cblxuXHRcdFx0dW5pZm9ybXMuZW52TWFwUm90YXRpb24udmFsdWUuc2V0RnJvbU1hdHJpeDQoIF9tMS5tYWtlUm90YXRpb25Gcm9tRXVsZXIoIF9lMSApICk7XG5cblx0XHRcdHVuaWZvcm1zLmZsaXBFbnZNYXAudmFsdWUgPSAoIGVudk1hcC5pc0N1YmVUZXh0dXJlICYmIGVudk1hcC5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkgPyAtIDEgOiAxO1xuXG5cdFx0XHR1bmlmb3Jtcy5yZWZsZWN0aXZpdHkudmFsdWUgPSBtYXRlcmlhbC5yZWZsZWN0aXZpdHk7XG5cdFx0XHR1bmlmb3Jtcy5pb3IudmFsdWUgPSBtYXRlcmlhbC5pb3I7XG5cdFx0XHR1bmlmb3Jtcy5yZWZyYWN0aW9uUmF0aW8udmFsdWUgPSBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW87XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmxpZ2h0TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5saWdodE1hcC52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwO1xuXHRcdFx0dW5pZm9ybXMubGlnaHRNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmxpZ2h0TWFwLCB1bmlmb3Jtcy5saWdodE1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hb01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYW9NYXAudmFsdWUgPSBtYXRlcmlhbC5hb01hcDtcblx0XHRcdHVuaWZvcm1zLmFvTWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hb01hcCwgdW5pZm9ybXMuYW9NYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTGluZSggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLm1hcCwgdW5pZm9ybXMubWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0Rhc2goIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLmRhc2hTaXplLnZhbHVlID0gbWF0ZXJpYWwuZGFzaFNpemU7XG5cdFx0dW5pZm9ybXMudG90YWxTaXplLnZhbHVlID0gbWF0ZXJpYWwuZGFzaFNpemUgKyBtYXRlcmlhbC5nYXBTaXplO1xuXHRcdHVuaWZvcm1zLnNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuc2NhbGU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1BvaW50cyggdW5pZm9ybXMsIG1hdGVyaWFsLCBwaXhlbFJhdGlvLCBoZWlnaHQgKSB7XG5cblx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cdFx0dW5pZm9ybXMuc2l6ZS52YWx1ZSA9IG1hdGVyaWFsLnNpemUgKiBwaXhlbFJhdGlvO1xuXHRcdHVuaWZvcm1zLnNjYWxlLnZhbHVlID0gaGVpZ2h0ICogMC41O1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLm1hcCwgdW5pZm9ybXMudXZUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhTWFwLnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hbHBoYU1hcCwgdW5pZm9ybXMuYWxwaGFNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFUZXN0LnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFUZXN0O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNTcHJpdGVzKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cdFx0dW5pZm9ybXMucm90YXRpb24udmFsdWUgPSBtYXRlcmlhbC5yb3RhdGlvbjtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5tYXAsIHVuaWZvcm1zLm1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmFscGhhTWFwLCB1bmlmb3Jtcy5hbHBoYU1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYVRlc3QudmFsdWUgPSBtYXRlcmlhbC5hbHBoYVRlc3Q7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Bob25nKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5zcGVjdWxhci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zcGVjdWxhciApO1xuXHRcdHVuaWZvcm1zLnNoaW5pbmVzcy52YWx1ZSA9IE1hdGgubWF4KCBtYXRlcmlhbC5zaGluaW5lc3MsIDFlLTQgKTsgLy8gdG8gcHJldmVudCBwb3coIDAuMCwgMC4wIClcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zVG9vbiggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5ncmFkaWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZ3JhZGllbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5ncmFkaWVudE1hcDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLm1ldGFsbmVzcy52YWx1ZSA9IG1hdGVyaWFsLm1ldGFsbmVzcztcblxuXHRcdGlmICggbWF0ZXJpYWwubWV0YWxuZXNzTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tZXRhbG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5tZXRhbG5lc3NNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5tZXRhbG5lc3NNYXAsIHVuaWZvcm1zLm1ldGFsbmVzc01hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0dW5pZm9ybXMucm91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwucm91Z2huZXNzO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnJvdWdobmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLnJvdWdobmVzc01hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnJvdWdobmVzc01hcCwgdW5pZm9ybXMucm91Z2huZXNzTWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVudk1hcCApIHtcblxuXHRcdFx0Ly91bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXA7IC8vIHBhcnQgb2YgdW5pZm9ybXMgY29tbW9uXG5cblx0XHRcdHVuaWZvcm1zLmVudk1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwoIHVuaWZvcm1zLCBtYXRlcmlhbCwgdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dW5pZm9ybXMuaW9yLnZhbHVlID0gbWF0ZXJpYWwuaW9yOyAvLyBhbHNvIHBhcnQgb2YgdW5pZm9ybXMgY29tbW9uXG5cblx0XHRpZiAoIG1hdGVyaWFsLnNoZWVuID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuc2hlZW5Db2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zaGVlbkNvbG9yICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLnNoZWVuICk7XG5cblx0XHRcdHVuaWZvcm1zLnNoZWVuUm91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3M7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuc2hlZW5Db2xvck1hcCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5zaGVlbkNvbG9yTWFwLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Db2xvck1hcDtcblxuXHRcdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuc2hlZW5Db2xvck1hcCwgdW5pZm9ybXMuc2hlZW5Db2xvck1hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2hlZW5Sb3VnaG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5zaGVlblJvdWdobmVzc01hcDtcblxuXHRcdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXAsIHVuaWZvcm1zLnNoZWVuUm91Z2huZXNzTWFwVHJhbnNmb3JtICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuY2xlYXJjb2F0ID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0LnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0O1xuXHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Um91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmNsZWFyY29hdE1hcCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jbGVhcmNvYXRNYXAudmFsdWUgPSBtYXRlcmlhbC5jbGVhcmNvYXRNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmNsZWFyY29hdE1hcCwgdW5pZm9ybXMuY2xlYXJjb2F0TWFwVHJhbnNmb3JtICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwO1xuXG5cdFx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAsIHVuaWZvcm1zLmNsZWFyY29hdFJvdWdobmVzc01hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdE5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcDtcblxuXHRcdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwLCB1bmlmb3Jtcy5jbGVhcmNvYXROb3JtYWxNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jbGVhcmNvYXROb3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxTY2FsZSApO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB7XG5cblx0XHRcdFx0XHR1bmlmb3Jtcy5jbGVhcmNvYXROb3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGVyc2lvbiA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BlcnNpb24udmFsdWUgPSBtYXRlcmlhbC5kaXNwZXJzaW9uO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5pcmlkZXNjZW5jZSA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmlyaWRlc2NlbmNlLnZhbHVlID0gbWF0ZXJpYWwuaXJpZGVzY2VuY2U7XG5cdFx0XHR1bmlmb3Jtcy5pcmlkZXNjZW5jZUlPUi52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlSU9SO1xuXHRcdFx0dW5pZm9ybXMuaXJpZGVzY2VuY2VUaGlja25lc3NNaW5pbXVtLnZhbHVlID0gbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZVsgMCBdO1xuXHRcdFx0dW5pZm9ybXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXhpbXVtLnZhbHVlID0gbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZVsgMSBdO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLmlyaWRlc2NlbmNlTWFwLnZhbHVlID0gbWF0ZXJpYWwuaXJpZGVzY2VuY2VNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwLCB1bmlmb3Jtcy5pcmlkZXNjZW5jZU1hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcDtcblxuXHRcdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAsIHVuaWZvcm1zLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVHJhbnNmb3JtICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwudHJhbnNtaXNzaW9uID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMudHJhbnNtaXNzaW9uLnZhbHVlID0gbWF0ZXJpYWwudHJhbnNtaXNzaW9uO1xuXHRcdFx0dW5pZm9ybXMudHJhbnNtaXNzaW9uU2FtcGxlck1hcC52YWx1ZSA9IHRyYW5zbWlzc2lvblJlbmRlclRhcmdldC50ZXh0dXJlO1xuXHRcdFx0dW5pZm9ybXMudHJhbnNtaXNzaW9uU2FtcGxlclNpemUudmFsdWUuc2V0KCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQud2lkdGgsIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC50cmFuc21pc3Npb25NYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMudHJhbnNtaXNzaW9uTWFwLnZhbHVlID0gbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwO1xuXG5cdFx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC50cmFuc21pc3Npb25NYXAsIHVuaWZvcm1zLnRyYW5zbWlzc2lvbk1hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLnRoaWNrbmVzcy52YWx1ZSA9IG1hdGVyaWFsLnRoaWNrbmVzcztcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC50aGlja25lc3NNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMudGhpY2tuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwudGhpY2tuZXNzTWFwO1xuXG5cdFx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC50aGlja25lc3NNYXAsIHVuaWZvcm1zLnRoaWNrbmVzc01hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLmF0dGVudWF0aW9uRGlzdGFuY2UudmFsdWUgPSBtYXRlcmlhbC5hdHRlbnVhdGlvbkRpc3RhbmNlO1xuXHRcdFx0dW5pZm9ybXMuYXR0ZW51YXRpb25Db2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5hdHRlbnVhdGlvbkNvbG9yICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFuaXNvdHJvcHkgPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbmlzb3Ryb3B5VmVjdG9yLnZhbHVlLnNldCggbWF0ZXJpYWwuYW5pc290cm9weSAqIE1hdGguY29zKCBtYXRlcmlhbC5hbmlzb3Ryb3B5Um90YXRpb24gKSwgbWF0ZXJpYWwuYW5pc290cm9weSAqIE1hdGguc2luKCBtYXRlcmlhbC5hbmlzb3Ryb3B5Um90YXRpb24gKSApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmFuaXNvdHJvcHlNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuYW5pc290cm9weU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFuaXNvdHJvcHlNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmFuaXNvdHJvcHlNYXAsIHVuaWZvcm1zLmFuaXNvdHJvcHlNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dW5pZm9ybXMuc3BlY3VsYXJJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eTtcblx0XHR1bmlmb3Jtcy5zcGVjdWxhckNvbG9yLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKTtcblxuXHRcdGlmICggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvck1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuc3BlY3VsYXJDb2xvck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwLCB1bmlmb3Jtcy5zcGVjdWxhckNvbG9yTWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5zcGVjdWxhckludGVuc2l0eU1hcC52YWx1ZSA9IG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAsIHVuaWZvcm1zLnNwZWN1bGFySW50ZW5zaXR5TWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc01hdGNhcCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXRjYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm1hdGNhcC52YWx1ZSA9IG1hdGVyaWFsLm1hdGNhcDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRGlzdGFuY2UoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnN0IGxpZ2h0ID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICkubGlnaHQ7XG5cblx0XHR1bmlmb3Jtcy5yZWZlcmVuY2VQb3NpdGlvbi52YWx1ZS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0dW5pZm9ybXMubmVhckRpc3RhbmNlLnZhbHVlID0gbGlnaHQuc2hhZG93LmNhbWVyYS5uZWFyO1xuXHRcdHVuaWZvcm1zLmZhckRpc3RhbmNlLnZhbHVlID0gbGlnaHQuc2hhZG93LmNhbWVyYS5mYXI7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0cmVmcmVzaEZvZ1VuaWZvcm1zOiByZWZyZXNoRm9nVW5pZm9ybXMsXG5cdFx0cmVmcmVzaE1hdGVyaWFsVW5pZm9ybXM6IHJlZnJlc2hNYXRlcmlhbFVuaWZvcm1zXG5cdH07XG5cbn1cblxuZXhwb3J0IHsgV2ViR0xNYXRlcmlhbHMgfTtcbiIsImZ1bmN0aW9uIFdlYkdMVW5pZm9ybXNHcm91cHMoIGdsLCBpbmZvLCBjYXBhYmlsaXRpZXMsIHN0YXRlICkge1xuXG5cdGxldCBidWZmZXJzID0ge307XG5cdGxldCB1cGRhdGVMaXN0ID0ge307XG5cdGxldCBhbGxvY2F0ZWRCaW5kaW5nUG9pbnRzID0gW107XG5cblx0Y29uc3QgbWF4QmluZGluZ1BvaW50cyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTICk7IC8vIGJpbmRpbmcgcG9pbnRzIGFyZSBnbG9iYWwgd2hlcmVhcyBibG9jayBpbmRpY2VzIGFyZSBwZXIgc2hhZGVyIHByb2dyYW1cblxuXHRmdW5jdGlvbiBiaW5kKCB1bmlmb3Jtc0dyb3VwLCBwcm9ncmFtICkge1xuXG5cdFx0Y29uc3Qgd2ViZ2xQcm9ncmFtID0gcHJvZ3JhbS5wcm9ncmFtO1xuXHRcdHN0YXRlLnVuaWZvcm1CbG9ja0JpbmRpbmcoIHVuaWZvcm1zR3JvdXAsIHdlYmdsUHJvZ3JhbSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIHVuaWZvcm1zR3JvdXAsIHByb2dyYW0gKSB7XG5cblx0XHRsZXQgYnVmZmVyID0gYnVmZmVyc1sgdW5pZm9ybXNHcm91cC5pZCBdO1xuXG5cdFx0aWYgKCBidWZmZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJlcGFyZVVuaWZvcm1zR3JvdXAoIHVuaWZvcm1zR3JvdXAgKTtcblxuXHRcdFx0YnVmZmVyID0gY3JlYXRlQnVmZmVyKCB1bmlmb3Jtc0dyb3VwICk7XG5cdFx0XHRidWZmZXJzWyB1bmlmb3Jtc0dyb3VwLmlkIF0gPSBidWZmZXI7XG5cblx0XHRcdHVuaWZvcm1zR3JvdXAuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblVuaWZvcm1zR3JvdXBzRGlzcG9zZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZW5zdXJlIHRvIHVwZGF0ZSB0aGUgYmluZGluZyBwb2ludHMvYmxvY2sgaW5kaWNlcyBtYXBwaW5nIGZvciB0aGlzIHByb2dyYW1cblxuXHRcdGNvbnN0IHdlYmdsUHJvZ3JhbSA9IHByb2dyYW0ucHJvZ3JhbTtcblx0XHRzdGF0ZS51cGRhdGVVQk9NYXBwaW5nKCB1bmlmb3Jtc0dyb3VwLCB3ZWJnbFByb2dyYW0gKTtcblxuXHRcdC8vIHVwZGF0ZSBVQk8gb25jZSBwZXIgZnJhbWVcblxuXHRcdGNvbnN0IGZyYW1lID0gaW5mby5yZW5kZXIuZnJhbWU7XG5cblx0XHRpZiAoIHVwZGF0ZUxpc3RbIHVuaWZvcm1zR3JvdXAuaWQgXSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdHVwZGF0ZUJ1ZmZlckRhdGEoIHVuaWZvcm1zR3JvdXAgKTtcblxuXHRcdFx0dXBkYXRlTGlzdFsgdW5pZm9ybXNHcm91cC5pZCBdID0gZnJhbWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciggdW5pZm9ybXNHcm91cCApIHtcblxuXHRcdC8vIHRoZSBzZXR1cCBvZiBhbiBVQk8gaXMgaW5kZXBlbmRlbnQgb2YgYSBwYXJ0aWN1bGFyIHNoYWRlciBwcm9ncmFtIGJ1dCBnbG9iYWxcblxuXHRcdGNvbnN0IGJpbmRpbmdQb2ludEluZGV4ID0gYWxsb2NhdGVCaW5kaW5nUG9pbnRJbmRleCgpO1xuXHRcdHVuaWZvcm1zR3JvdXAuX19iaW5kaW5nUG9pbnRJbmRleCA9IGJpbmRpbmdQb2ludEluZGV4O1xuXG5cdFx0Y29uc3QgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0Y29uc3Qgc2l6ZSA9IHVuaWZvcm1zR3JvdXAuX19zaXplO1xuXHRcdGNvbnN0IHVzYWdlID0gdW5pZm9ybXNHcm91cC51c2FnZTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLlVOSUZPUk1fQlVGRkVSLCBidWZmZXIgKTtcblx0XHRnbC5idWZmZXJEYXRhKCBnbC5VTklGT1JNX0JVRkZFUiwgc2l6ZSwgdXNhZ2UgKTtcblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgbnVsbCApO1xuXHRcdGdsLmJpbmRCdWZmZXJCYXNlKCBnbC5VTklGT1JNX0JVRkZFUiwgYmluZGluZ1BvaW50SW5kZXgsIGJ1ZmZlciApO1xuXG5cdFx0cmV0dXJuIGJ1ZmZlcjtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWxsb2NhdGVCaW5kaW5nUG9pbnRJbmRleCgpIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG1heEJpbmRpbmdQb2ludHM7IGkgKysgKSB7XG5cblx0XHRcdGlmICggYWxsb2NhdGVkQmluZGluZ1BvaW50cy5pbmRleE9mKCBpICkgPT09IC0gMSApIHtcblxuXHRcdFx0XHRhbGxvY2F0ZWRCaW5kaW5nUG9pbnRzLnB1c2goIGkgKTtcblx0XHRcdFx0cmV0dXJuIGk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBNYXhpbXVtIG51bWJlciBvZiBzaW11bHRhbmVvdXNseSB1c2FibGUgdW5pZm9ybXMgZ3JvdXBzIHJlYWNoZWQuJyApO1xuXG5cdFx0cmV0dXJuIDA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZUJ1ZmZlckRhdGEoIHVuaWZvcm1zR3JvdXAgKSB7XG5cblx0XHRjb25zdCBidWZmZXIgPSBidWZmZXJzWyB1bmlmb3Jtc0dyb3VwLmlkIF07XG5cdFx0Y29uc3QgdW5pZm9ybXMgPSB1bmlmb3Jtc0dyb3VwLnVuaWZvcm1zO1xuXHRcdGNvbnN0IGNhY2hlID0gdW5pZm9ybXNHcm91cC5fX2NhY2hlO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggZ2wuVU5JRk9STV9CVUZGRVIsIGJ1ZmZlciApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHVuaWZvcm1zLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCB1bmlmb3JtQXJyYXkgPSBBcnJheS5pc0FycmF5KCB1bmlmb3Jtc1sgaSBdICkgPyB1bmlmb3Jtc1sgaSBdIDogWyB1bmlmb3Jtc1sgaSBdIF07XG5cblx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSB1bmlmb3JtQXJyYXkubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybSA9IHVuaWZvcm1BcnJheVsgaiBdO1xuXG5cdFx0XHRcdGlmICggaGFzVW5pZm9ybUNoYW5nZWQoIHVuaWZvcm0sIGksIGosIGNhY2hlICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBvZmZzZXQgPSB1bmlmb3JtLl9fb2Zmc2V0O1xuXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWVzID0gQXJyYXkuaXNBcnJheSggdW5pZm9ybS52YWx1ZSApID8gdW5pZm9ybS52YWx1ZSA6IFsgdW5pZm9ybS52YWx1ZSBdO1xuXG5cdFx0XHRcdFx0bGV0IGFycmF5T2Zmc2V0ID0gMDtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBrID0gMDsgayA8IHZhbHVlcy5sZW5ndGg7IGsgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHZhbHVlID0gdmFsdWVzWyBrIF07XG5cblx0XHRcdFx0XHRcdGNvbnN0IGluZm8gPSBnZXRVbmlmb3JtU2l6ZSggdmFsdWUgKTtcblxuXHRcdFx0XHRcdFx0Ly8gVE9ETyBhZGQgaW50ZWdlciBhbmQgc3RydWN0IHN1cHBvcnRcblx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyApIHtcblxuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgMCBdID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGdsLlVOSUZPUk1fQlVGRkVSLCBvZmZzZXQgKyBhcnJheU9mZnNldCwgdW5pZm9ybS5fX2RhdGEgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdmFsdWUuaXNNYXRyaXgzICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIG1hbnVhbGx5IGNvbnZlcnRpbmcgM3gzIHRvIDN4NFxuXG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyAwIF0gPSB2YWx1ZS5lbGVtZW50c1sgMCBdO1xuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgMSBdID0gdmFsdWUuZWxlbWVudHNbIDEgXTtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDIgXSA9IHZhbHVlLmVsZW1lbnRzWyAyIF07XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyAzIF0gPSAwO1xuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgNCBdID0gdmFsdWUuZWxlbWVudHNbIDMgXTtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDUgXSA9IHZhbHVlLmVsZW1lbnRzWyA0IF07XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyA2IF0gPSB2YWx1ZS5lbGVtZW50c1sgNSBdO1xuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgNyBdID0gMDtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDggXSA9IHZhbHVlLmVsZW1lbnRzWyA2IF07XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyA5IF0gPSB2YWx1ZS5lbGVtZW50c1sgNyBdO1xuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgMTAgXSA9IHZhbHVlLmVsZW1lbnRzWyA4IF07XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyAxMSBdID0gMDtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHR2YWx1ZS50b0FycmF5KCB1bmlmb3JtLl9fZGF0YSwgYXJyYXlPZmZzZXQgKTtcblxuXHRcdFx0XHRcdFx0XHRhcnJheU9mZnNldCArPSBpbmZvLnN0b3JhZ2UgLyBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGdsLlVOSUZPUk1fQlVGRkVSLCBvZmZzZXQsIHVuaWZvcm0uX19kYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgbnVsbCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYXNVbmlmb3JtQ2hhbmdlZCggdW5pZm9ybSwgaW5kZXgsIGluZGV4QXJyYXksIGNhY2hlICkge1xuXG5cdFx0Y29uc3QgdmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xuXHRcdGNvbnN0IGluZGV4U3RyaW5nID0gaW5kZXggKyAnXycgKyBpbmRleEFycmF5O1xuXG5cdFx0aWYgKCBjYWNoZVsgaW5kZXhTdHJpbmcgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBjYWNoZSBlbnRyeSBkb2VzIG5vdCBleGlzdCBzbyBmYXJcblxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nICkge1xuXG5cdFx0XHRcdGNhY2hlWyBpbmRleFN0cmluZyBdID0gdmFsdWU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y2FjaGVbIGluZGV4U3RyaW5nIF0gPSB2YWx1ZS5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgY2FjaGVkT2JqZWN0ID0gY2FjaGVbIGluZGV4U3RyaW5nIF07XG5cblx0XHRcdC8vIGNvbXBhcmUgY3VycmVudCB2YWx1ZSB3aXRoIGNhY2hlZCBlbnRyeVxuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgKSB7XG5cblx0XHRcdFx0aWYgKCBjYWNoZWRPYmplY3QgIT09IHZhbHVlICkge1xuXG5cdFx0XHRcdFx0Y2FjaGVbIGluZGV4U3RyaW5nIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBjYWNoZWRPYmplY3QuZXF1YWxzKCB2YWx1ZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGNhY2hlZE9iamVjdC5jb3B5KCB2YWx1ZSApO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwcmVwYXJlVW5pZm9ybXNHcm91cCggdW5pZm9ybXNHcm91cCApIHtcblxuXHRcdC8vIGRldGVybWluZSB0b3RhbCBidWZmZXIgc2l6ZSBhY2NvcmRpbmcgdG8gdGhlIFNURDE0MCBsYXlvdXRcblx0XHQvLyBIaW50OiBTVEQxNDAgaXMgdGhlIG9ubHkgc3VwcG9ydGVkIGxheW91dCBpbiBXZWJHTCAyXG5cblx0XHRjb25zdCB1bmlmb3JtcyA9IHVuaWZvcm1zR3JvdXAudW5pZm9ybXM7XG5cblx0XHRsZXQgb2Zmc2V0ID0gMDsgLy8gZ2xvYmFsIGJ1ZmZlciBvZmZzZXQgaW4gYnl0ZXNcblx0XHRjb25zdCBjaHVua1NpemUgPSAxNjsgLy8gc2l6ZSBvZiBhIGNodW5rIGluIGJ5dGVzXG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB1bmlmb3Jtcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCB1bmlmb3JtQXJyYXkgPSBBcnJheS5pc0FycmF5KCB1bmlmb3Jtc1sgaSBdICkgPyB1bmlmb3Jtc1sgaSBdIDogWyB1bmlmb3Jtc1sgaSBdIF07XG5cblx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSB1bmlmb3JtQXJyYXkubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybSA9IHVuaWZvcm1BcnJheVsgaiBdO1xuXG5cdFx0XHRcdGNvbnN0IHZhbHVlcyA9IEFycmF5LmlzQXJyYXkoIHVuaWZvcm0udmFsdWUgKSA/IHVuaWZvcm0udmFsdWUgOiBbIHVuaWZvcm0udmFsdWUgXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgayA9IDAsIGtsID0gdmFsdWVzLmxlbmd0aDsgayA8IGtsOyBrICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSB2YWx1ZXNbIGsgXTtcblxuXHRcdFx0XHRcdGNvbnN0IGluZm8gPSBnZXRVbmlmb3JtU2l6ZSggdmFsdWUgKTtcblxuXHRcdFx0XHRcdC8vIENhbGN1bGF0ZSB0aGUgY2h1bmsgb2Zmc2V0XG5cdFx0XHRcdFx0Y29uc3QgY2h1bmtPZmZzZXRVbmlmb3JtID0gb2Zmc2V0ICUgY2h1bmtTaXplO1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZm9yIGNodW5rIG92ZXJmbG93XG5cdFx0XHRcdFx0aWYgKCBjaHVua09mZnNldFVuaWZvcm0gIT09IDAgJiYgKCBjaHVua1NpemUgLSBjaHVua09mZnNldFVuaWZvcm0gKSA8IGluZm8uYm91bmRhcnkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEFkZCBwYWRkaW5nIGFuZCBhZGp1c3Qgb2Zmc2V0XG5cdFx0XHRcdFx0XHRvZmZzZXQgKz0gKCBjaHVua1NpemUgLSBjaHVua09mZnNldFVuaWZvcm0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHRoZSBmb2xsb3dpbmcgdHdvIHByb3BlcnRpZXMgd2lsbCBiZSB1c2VkIGZvciBwYXJ0aWFsIGJ1ZmZlciB1cGRhdGVzXG5cblx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoIGluZm8uc3RvcmFnZSAvIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCApO1xuXHRcdFx0XHRcdHVuaWZvcm0uX19vZmZzZXQgPSBvZmZzZXQ7XG5cblxuXHRcdFx0XHRcdC8vIFVwZGF0ZSB0aGUgZ2xvYmFsIG9mZnNldFxuXHRcdFx0XHRcdG9mZnNldCArPSBpbmZvLnN0b3JhZ2U7XG5cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGVuc3VyZSBjb3JyZWN0IGZpbmFsIHBhZGRpbmdcblxuXHRcdGNvbnN0IGNodW5rT2Zmc2V0ID0gb2Zmc2V0ICUgY2h1bmtTaXplO1xuXG5cdFx0aWYgKCBjaHVua09mZnNldCA+IDAgKSBvZmZzZXQgKz0gKCBjaHVua1NpemUgLSBjaHVua09mZnNldCApO1xuXG5cdFx0Ly9cblxuXHRcdHVuaWZvcm1zR3JvdXAuX19zaXplID0gb2Zmc2V0O1xuXHRcdHVuaWZvcm1zR3JvdXAuX19jYWNoZSA9IHt9O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFVuaWZvcm1TaXplKCB2YWx1ZSApIHtcblxuXHRcdGNvbnN0IGluZm8gPSB7XG5cdFx0XHRib3VuZGFyeTogMCwgLy8gYnl0ZXNcblx0XHRcdHN0b3JhZ2U6IDAgLy8gYnl0ZXNcblx0XHR9O1xuXG5cdFx0Ly8gZGV0ZXJtaW5lIHNpemVzIGFjY29yZGluZyB0byBTVEQxNDBcblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyApIHtcblxuXHRcdFx0Ly8gZmxvYXQvaW50L2Jvb2xcblxuXHRcdFx0aW5mby5ib3VuZGFyeSA9IDQ7XG5cdFx0XHRpbmZvLnN0b3JhZ2UgPSA0O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUuaXNWZWN0b3IyICkge1xuXG5cdFx0XHQvLyB2ZWMyXG5cblx0XHRcdGluZm8uYm91bmRhcnkgPSA4O1xuXHRcdFx0aW5mby5zdG9yYWdlID0gODtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzVmVjdG9yMyB8fCB2YWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHQvLyB2ZWMzXG5cblx0XHRcdGluZm8uYm91bmRhcnkgPSAxNjtcblx0XHRcdGluZm8uc3RvcmFnZSA9IDEyOyAvLyBldmlsOiB2ZWMzIG11c3Qgc3RhcnQgb24gYSAxNi1ieXRlIGJvdW5kYXJ5IGJ1dCBpdCBvbmx5IGNvbnN1bWVzIDEyIGJ5dGVzXG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc1ZlY3RvcjQgKSB7XG5cblx0XHRcdC8vIHZlYzRcblxuXHRcdFx0aW5mby5ib3VuZGFyeSA9IDE2O1xuXHRcdFx0aW5mby5zdG9yYWdlID0gMTY7XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc01hdHJpeDMgKSB7XG5cblx0XHRcdC8vIG1hdDMgKGluIFNURDE0MCBhIDN4MyBtYXRyaXggaXMgcmVwcmVzZW50ZWQgYXMgM3g0KVxuXG5cdFx0XHRpbmZvLmJvdW5kYXJ5ID0gNDg7XG5cdFx0XHRpbmZvLnN0b3JhZ2UgPSA0ODtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzTWF0cml4NCApIHtcblxuXHRcdFx0Ly8gbWF0NFxuXG5cdFx0XHRpbmZvLmJvdW5kYXJ5ID0gNjQ7XG5cdFx0XHRpbmZvLnN0b3JhZ2UgPSA2NDtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBzYW1wbGVycyBjYW4gbm90IGJlIHBhcnQgb2YgYW4gdW5pZm9ybXMgZ3JvdXAuJyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVW5zdXBwb3J0ZWQgdW5pZm9ybSB2YWx1ZSB0eXBlLicsIHZhbHVlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW5mbztcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Vbmlmb3Jtc0dyb3Vwc0Rpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdW5pZm9ybXNHcm91cCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHVuaWZvcm1zR3JvdXAucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblVuaWZvcm1zR3JvdXBzRGlzcG9zZSApO1xuXG5cdFx0Y29uc3QgaW5kZXggPSBhbGxvY2F0ZWRCaW5kaW5nUG9pbnRzLmluZGV4T2YoIHVuaWZvcm1zR3JvdXAuX19iaW5kaW5nUG9pbnRJbmRleCApO1xuXHRcdGFsbG9jYXRlZEJpbmRpbmdQb2ludHMuc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0Z2wuZGVsZXRlQnVmZmVyKCBidWZmZXJzWyB1bmlmb3Jtc0dyb3VwLmlkIF0gKTtcblxuXHRcdGRlbGV0ZSBidWZmZXJzWyB1bmlmb3Jtc0dyb3VwLmlkIF07XG5cdFx0ZGVsZXRlIHVwZGF0ZUxpc3RbIHVuaWZvcm1zR3JvdXAuaWQgXTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdGZvciAoIGNvbnN0IGlkIGluIGJ1ZmZlcnMgKSB7XG5cblx0XHRcdGdsLmRlbGV0ZUJ1ZmZlciggYnVmZmVyc1sgaWQgXSApO1xuXG5cdFx0fVxuXG5cdFx0YWxsb2NhdGVkQmluZGluZ1BvaW50cyA9IFtdO1xuXHRcdGJ1ZmZlcnMgPSB7fTtcblx0XHR1cGRhdGVMaXN0ID0ge307XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRiaW5kOiBiaW5kLFxuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXG5cdH07XG5cbn1cblxuXG5leHBvcnQgeyBXZWJHTFVuaWZvcm1zR3JvdXBzIH07XG4iLCJpbXBvcnQge1xuXHRSRVZJU0lPTixcblx0QmFja1NpZGUsXG5cdEZyb250U2lkZSxcblx0RG91YmxlU2lkZSxcblx0SGFsZkZsb2F0VHlwZSxcblx0VW5zaWduZWRCeXRlVHlwZSxcblx0Tm9Ub25lTWFwcGluZyxcblx0TGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLFxuXHRTUkdCQ29sb3JTcGFjZSxcblx0TGluZWFyU1JHQkNvbG9yU3BhY2UsXG5cdFJHQkFJbnRlZ2VyRm9ybWF0LFxuXHRSR0ludGVnZXJGb3JtYXQsXG5cdFJlZEludGVnZXJGb3JtYXQsXG5cdFVuc2lnbmVkSW50VHlwZSxcblx0VW5zaWduZWRTaG9ydFR5cGUsXG5cdFVuc2lnbmVkSW50MjQ4VHlwZSxcblx0VW5zaWduZWRTaG9ydDQ0NDRUeXBlLFxuXHRVbnNpZ25lZFNob3J0NTU1MVR5cGUsXG5cdFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSxcblx0RGlzcGxheVAzQ29sb3JTcGFjZSxcblx0TGluZWFyRGlzcGxheVAzQ29sb3JTcGFjZVxufSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcbmltcG9ydCB7IEZydXN0dW0gfSBmcm9tICcuLi9tYXRoL0ZydXN0dW0uanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjQuanMnO1xuaW1wb3J0IHsgV2ViR0xBbmltYXRpb24gfSBmcm9tICcuL3dlYmdsL1dlYkdMQW5pbWF0aW9uLmpzJztcbmltcG9ydCB7IFdlYkdMQXR0cmlidXRlcyB9IGZyb20gJy4vd2ViZ2wvV2ViR0xBdHRyaWJ1dGVzLmpzJztcbmltcG9ydCB7IFdlYkdMQmFja2dyb3VuZCB9IGZyb20gJy4vd2ViZ2wvV2ViR0xCYWNrZ3JvdW5kLmpzJztcbmltcG9ydCB7IFdlYkdMQmluZGluZ1N0YXRlcyB9IGZyb20gJy4vd2ViZ2wvV2ViR0xCaW5kaW5nU3RhdGVzLmpzJztcbmltcG9ydCB7IFdlYkdMQnVmZmVyUmVuZGVyZXIgfSBmcm9tICcuL3dlYmdsL1dlYkdMQnVmZmVyUmVuZGVyZXIuanMnO1xuaW1wb3J0IHsgV2ViR0xDYXBhYmlsaXRpZXMgfSBmcm9tICcuL3dlYmdsL1dlYkdMQ2FwYWJpbGl0aWVzLmpzJztcbmltcG9ydCB7IFdlYkdMQ2xpcHBpbmcgfSBmcm9tICcuL3dlYmdsL1dlYkdMQ2xpcHBpbmcuanMnO1xuaW1wb3J0IHsgV2ViR0xDdWJlTWFwcyB9IGZyb20gJy4vd2ViZ2wvV2ViR0xDdWJlTWFwcy5qcyc7XG5pbXBvcnQgeyBXZWJHTEN1YmVVVk1hcHMgfSBmcm9tICcuL3dlYmdsL1dlYkdMQ3ViZVVWTWFwcy5qcyc7XG5pbXBvcnQgeyBXZWJHTEV4dGVuc2lvbnMgfSBmcm9tICcuL3dlYmdsL1dlYkdMRXh0ZW5zaW9ucy5qcyc7XG5pbXBvcnQgeyBXZWJHTEdlb21ldHJpZXMgfSBmcm9tICcuL3dlYmdsL1dlYkdMR2VvbWV0cmllcy5qcyc7XG5pbXBvcnQgeyBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciB9IGZyb20gJy4vd2ViZ2wvV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIuanMnO1xuaW1wb3J0IHsgV2ViR0xJbmZvIH0gZnJvbSAnLi93ZWJnbC9XZWJHTEluZm8uanMnO1xuaW1wb3J0IHsgV2ViR0xNb3JwaHRhcmdldHMgfSBmcm9tICcuL3dlYmdsL1dlYkdMTW9ycGh0YXJnZXRzLmpzJztcbmltcG9ydCB7IFdlYkdMT2JqZWN0cyB9IGZyb20gJy4vd2ViZ2wvV2ViR0xPYmplY3RzLmpzJztcbmltcG9ydCB7IFdlYkdMUHJvZ3JhbXMgfSBmcm9tICcuL3dlYmdsL1dlYkdMUHJvZ3JhbXMuanMnO1xuaW1wb3J0IHsgV2ViR0xQcm9wZXJ0aWVzIH0gZnJvbSAnLi93ZWJnbC9XZWJHTFByb3BlcnRpZXMuanMnO1xuaW1wb3J0IHsgV2ViR0xSZW5kZXJMaXN0cyB9IGZyb20gJy4vd2ViZ2wvV2ViR0xSZW5kZXJMaXN0cy5qcyc7XG5pbXBvcnQgeyBXZWJHTFJlbmRlclN0YXRlcyB9IGZyb20gJy4vd2ViZ2wvV2ViR0xSZW5kZXJTdGF0ZXMuanMnO1xuaW1wb3J0IHsgV2ViR0xSZW5kZXJUYXJnZXQgfSBmcm9tICcuL1dlYkdMUmVuZGVyVGFyZ2V0LmpzJztcbmltcG9ydCB7IFdlYkdMU2hhZG93TWFwIH0gZnJvbSAnLi93ZWJnbC9XZWJHTFNoYWRvd01hcC5qcyc7XG5pbXBvcnQgeyBXZWJHTFN0YXRlIH0gZnJvbSAnLi93ZWJnbC9XZWJHTFN0YXRlLmpzJztcbmltcG9ydCB7IFdlYkdMVGV4dHVyZXMgfSBmcm9tICcuL3dlYmdsL1dlYkdMVGV4dHVyZXMuanMnO1xuaW1wb3J0IHsgV2ViR0xVbmlmb3JtcyB9IGZyb20gJy4vd2ViZ2wvV2ViR0xVbmlmb3Jtcy5qcyc7XG5pbXBvcnQgeyBXZWJHTFV0aWxzIH0gZnJvbSAnLi93ZWJnbC9XZWJHTFV0aWxzLmpzJztcbmltcG9ydCB7IFdlYlhSTWFuYWdlciB9IGZyb20gJy4vd2VieHIvV2ViWFJNYW5hZ2VyLmpzJztcbmltcG9ydCB7IFdlYkdMTWF0ZXJpYWxzIH0gZnJvbSAnLi93ZWJnbC9XZWJHTE1hdGVyaWFscy5qcyc7XG5pbXBvcnQgeyBXZWJHTFVuaWZvcm1zR3JvdXBzIH0gZnJvbSAnLi93ZWJnbC9XZWJHTFVuaWZvcm1zR3JvdXBzLmpzJztcbmltcG9ydCB7IGNyZWF0ZUNhbnZhc0VsZW1lbnQsIHByb2JlQXN5bmMgfSBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgeyBDb2xvck1hbmFnZW1lbnQgfSBmcm9tICcuLi9tYXRoL0NvbG9yTWFuYWdlbWVudC5qcyc7XG5cbmNsYXNzIFdlYkdMUmVuZGVyZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzID0ge30gKSB7XG5cblx0XHRjb25zdCB7XG5cdFx0XHRjYW52YXMgPSBjcmVhdGVDYW52YXNFbGVtZW50KCksXG5cdFx0XHRjb250ZXh0ID0gbnVsbCxcblx0XHRcdGRlcHRoID0gdHJ1ZSxcblx0XHRcdHN0ZW5jaWwgPSBmYWxzZSxcblx0XHRcdGFscGhhID0gZmFsc2UsXG5cdFx0XHRhbnRpYWxpYXMgPSBmYWxzZSxcblx0XHRcdHByZW11bHRpcGxpZWRBbHBoYSA9IHRydWUsXG5cdFx0XHRwcmVzZXJ2ZURyYXdpbmdCdWZmZXIgPSBmYWxzZSxcblx0XHRcdHBvd2VyUHJlZmVyZW5jZSA9ICdkZWZhdWx0Jyxcblx0XHRcdGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgPSBmYWxzZSxcblx0XHR9ID0gcGFyYW1ldGVycztcblxuXHRcdHRoaXMuaXNXZWJHTFJlbmRlcmVyID0gdHJ1ZTtcblxuXHRcdGxldCBfYWxwaGE7XG5cblx0XHRpZiAoIGNvbnRleHQgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIFdlYkdMUmVuZGVyaW5nQ29udGV4dCAhPT0gJ3VuZGVmaW5lZCcgJiYgY29udGV4dCBpbnN0YW5jZW9mIFdlYkdMUmVuZGVyaW5nQ29udGV4dCApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBXZWJHTCAxIGlzIG5vdCBzdXBwb3J0ZWQgc2luY2UgcjE2My4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2FscGhhID0gY29udGV4dC5nZXRDb250ZXh0QXR0cmlidXRlcygpLmFscGhhO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2FscGhhID0gYWxwaGE7XG5cblx0XHR9XG5cblx0XHRjb25zdCB1aW50Q2xlYXJDb2xvciA9IG5ldyBVaW50MzJBcnJheSggNCApO1xuXHRcdGNvbnN0IGludENsZWFyQ29sb3IgPSBuZXcgSW50MzJBcnJheSggNCApO1xuXG5cdFx0bGV0IGN1cnJlbnRSZW5kZXJMaXN0ID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFJlbmRlclN0YXRlID0gbnVsbDtcblxuXHRcdC8vIHJlbmRlcigpIGNhbiBiZSBjYWxsZWQgZnJvbSB3aXRoaW4gYSBjYWxsYmFjayB0cmlnZ2VyZWQgYnkgYW5vdGhlciByZW5kZXIuXG5cdFx0Ly8gV2UgdHJhY2sgdGhpcyBzbyB0aGF0IHRoZSBuZXN0ZWQgcmVuZGVyIGNhbGwgZ2V0cyBpdHMgbGlzdCBhbmQgc3RhdGUgaXNvbGF0ZWQgZnJvbSB0aGUgcGFyZW50IHJlbmRlciBjYWxsLlxuXG5cdFx0Y29uc3QgcmVuZGVyTGlzdFN0YWNrID0gW107XG5cdFx0Y29uc3QgcmVuZGVyU3RhdGVTdGFjayA9IFtdO1xuXG5cdFx0Ly8gcHVibGljIHByb3BlcnRpZXNcblxuXHRcdHRoaXMuZG9tRWxlbWVudCA9IGNhbnZhcztcblxuXHRcdC8vIERlYnVnIGNvbmZpZ3VyYXRpb24gY29udGFpbmVyXG5cdFx0dGhpcy5kZWJ1ZyA9IHtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBFbmFibGVzIGVycm9yIGNoZWNraW5nIGFuZCByZXBvcnRpbmcgd2hlbiBzaGFkZXIgcHJvZ3JhbXMgYXJlIGJlaW5nIGNvbXBpbGVkXG5cdFx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHRcdCAqL1xuXHRcdFx0Y2hlY2tTaGFkZXJFcnJvcnM6IHRydWUsXG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGxiYWNrIGZvciBjdXN0b20gZXJyb3IgcmVwb3J0aW5nLlxuXHRcdFx0ICogQHR5cGUgez9GdW5jdGlvbn1cblx0XHRcdCAqL1xuXHRcdFx0b25TaGFkZXJFcnJvcjogbnVsbFxuXHRcdH07XG5cblx0XHQvLyBjbGVhcmluZ1xuXG5cdFx0dGhpcy5hdXRvQ2xlYXIgPSB0cnVlO1xuXHRcdHRoaXMuYXV0b0NsZWFyQ29sb3IgPSB0cnVlO1xuXHRcdHRoaXMuYXV0b0NsZWFyRGVwdGggPSB0cnVlO1xuXHRcdHRoaXMuYXV0b0NsZWFyU3RlbmNpbCA9IHRydWU7XG5cblx0XHQvLyBzY2VuZSBncmFwaFxuXG5cdFx0dGhpcy5zb3J0T2JqZWN0cyA9IHRydWU7XG5cblx0XHQvLyB1c2VyLWRlZmluZWQgY2xpcHBpbmdcblxuXHRcdHRoaXMuY2xpcHBpbmdQbGFuZXMgPSBbXTtcblx0XHR0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2U7XG5cblx0XHQvLyBwaHlzaWNhbGx5IGJhc2VkIHNoYWRpbmdcblxuXHRcdHRoaXMuX291dHB1dENvbG9yU3BhY2UgPSBTUkdCQ29sb3JTcGFjZTtcblxuXHRcdC8vIHRvbmUgbWFwcGluZ1xuXG5cdFx0dGhpcy50b25lTWFwcGluZyA9IE5vVG9uZU1hcHBpbmc7XG5cdFx0dGhpcy50b25lTWFwcGluZ0V4cG9zdXJlID0gMS4wO1xuXG5cdFx0Ly8gaW50ZXJuYWwgcHJvcGVydGllc1xuXG5cdFx0Y29uc3QgX3RoaXMgPSB0aGlzO1xuXG5cdFx0bGV0IF9pc0NvbnRleHRMb3N0ID0gZmFsc2U7XG5cblx0XHQvLyBpbnRlcm5hbCBzdGF0ZSBjYWNoZVxuXG5cdFx0bGV0IF9jdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSAwO1xuXHRcdGxldCBfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gMDtcblx0XHRsZXQgX2N1cnJlbnRSZW5kZXJUYXJnZXQgPSBudWxsO1xuXHRcdGxldCBfY3VycmVudE1hdGVyaWFsSWQgPSAtIDE7XG5cblx0XHRsZXQgX2N1cnJlbnRDYW1lcmEgPSBudWxsO1xuXG5cdFx0Y29uc3QgX2N1cnJlbnRWaWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cdFx0Y29uc3QgX2N1cnJlbnRTY2lzc29yID0gbmV3IFZlY3RvcjQoKTtcblx0XHRsZXQgX2N1cnJlbnRTY2lzc29yVGVzdCA9IG51bGw7XG5cblx0XHRjb25zdCBfY3VycmVudENsZWFyQ29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdFx0bGV0IF9jdXJyZW50Q2xlYXJBbHBoYSA9IDA7XG5cblx0XHQvL1xuXG5cdFx0bGV0IF93aWR0aCA9IGNhbnZhcy53aWR0aDtcblx0XHRsZXQgX2hlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG5cblx0XHRsZXQgX3BpeGVsUmF0aW8gPSAxO1xuXHRcdGxldCBfb3BhcXVlU29ydCA9IG51bGw7XG5cdFx0bGV0IF90cmFuc3BhcmVudFNvcnQgPSBudWxsO1xuXG5cdFx0Y29uc3QgX3ZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApO1xuXHRcdGNvbnN0IF9zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApO1xuXHRcdGxldCBfc2Npc3NvclRlc3QgPSBmYWxzZTtcblxuXHRcdC8vIGZydXN0dW1cblxuXHRcdGNvbnN0IF9mcnVzdHVtID0gbmV3IEZydXN0dW0oKTtcblxuXHRcdC8vIGNsaXBwaW5nXG5cblx0XHRsZXQgX2NsaXBwaW5nRW5hYmxlZCA9IGZhbHNlO1xuXHRcdGxldCBfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuXHRcdC8vIGNhbWVyYSBtYXRyaWNlcyBjYWNoZVxuXG5cdFx0Y29uc3QgX3Byb2pTY3JlZW5NYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0Y29uc3QgX3ZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Y29uc3QgX3ZlY3RvcjQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0Y29uc3QgX2VtcHR5U2NlbmUgPSB7IGJhY2tncm91bmQ6IG51bGwsIGZvZzogbnVsbCwgZW52aXJvbm1lbnQ6IG51bGwsIG92ZXJyaWRlTWF0ZXJpYWw6IG51bGwsIGlzU2NlbmU6IHRydWUgfTtcblxuXHRcdGxldCBfcmVuZGVyQmFja2dyb3VuZCA9IGZhbHNlO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpIHtcblxuXHRcdFx0cmV0dXJuIF9jdXJyZW50UmVuZGVyVGFyZ2V0ID09PSBudWxsID8gX3BpeGVsUmF0aW8gOiAxO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5pdGlhbGl6ZVxuXG5cdFx0bGV0IF9nbCA9IGNvbnRleHQ7XG5cblx0XHRmdW5jdGlvbiBnZXRDb250ZXh0KCBjb250ZXh0TmFtZSwgY29udGV4dEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHJldHVybiBjYW52YXMuZ2V0Q29udGV4dCggY29udGV4dE5hbWUsIGNvbnRleHRBdHRyaWJ1dGVzICk7XG5cblx0XHR9XG5cblx0XHR0cnkge1xuXG5cdFx0XHRjb25zdCBjb250ZXh0QXR0cmlidXRlcyA9IHtcblx0XHRcdFx0YWxwaGE6IHRydWUsXG5cdFx0XHRcdGRlcHRoLFxuXHRcdFx0XHRzdGVuY2lsLFxuXHRcdFx0XHRhbnRpYWxpYXMsXG5cdFx0XHRcdHByZW11bHRpcGxpZWRBbHBoYSxcblx0XHRcdFx0cHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuXHRcdFx0XHRwb3dlclByZWZlcmVuY2UsXG5cdFx0XHRcdGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQsXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBPZmZzY3JlZW5DYW52YXMgZG9lcyBub3QgaGF2ZSBzZXRBdHRyaWJ1dGUsIHNlZSAjMjI4MTFcblx0XHRcdGlmICggJ3NldEF0dHJpYnV0ZScgaW4gY2FudmFzICkgY2FudmFzLnNldEF0dHJpYnV0ZSggJ2RhdGEtZW5naW5lJywgYHRocmVlLmpzIHIke1JFVklTSU9OfWAgKTtcblxuXHRcdFx0Ly8gZXZlbnQgbGlzdGVuZXJzIG11c3QgYmUgcmVnaXN0ZXJlZCBiZWZvcmUgV2ViR0wgY29udGV4dCBpcyBjcmVhdGVkLCBzZWUgIzEyNzUzXG5cdFx0XHRjYW52YXMuYWRkRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApO1xuXHRcdFx0Y2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIG9uQ29udGV4dFJlc3RvcmUsIGZhbHNlICk7XG5cdFx0XHRjYW52YXMuYWRkRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGNyZWF0aW9uZXJyb3InLCBvbkNvbnRleHRDcmVhdGlvbkVycm9yLCBmYWxzZSApO1xuXG5cdFx0XHRpZiAoIF9nbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBjb250ZXh0TmFtZSA9ICd3ZWJnbDInO1xuXG5cdFx0XHRcdF9nbCA9IGdldENvbnRleHQoIGNvbnRleHROYW1lLCBjb250ZXh0QXR0cmlidXRlcyApO1xuXG5cdFx0XHRcdGlmICggX2dsID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0aWYgKCBnZXRDb250ZXh0KCBjb250ZXh0TmFtZSApICkge1xuXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0IHdpdGggeW91ciBzZWxlY3RlZCBhdHRyaWJ1dGVzLicgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQuJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogJyArIGVycm9yLm1lc3NhZ2UgKTtcblx0XHRcdHRocm93IGVycm9yO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcywgc3RhdGUsIGluZm87XG5cdFx0bGV0IHByb3BlcnRpZXMsIHRleHR1cmVzLCBjdWJlbWFwcywgY3ViZXV2bWFwcywgYXR0cmlidXRlcywgZ2VvbWV0cmllcywgb2JqZWN0cztcblx0XHRsZXQgcHJvZ3JhbUNhY2hlLCBtYXRlcmlhbHMsIHJlbmRlckxpc3RzLCByZW5kZXJTdGF0ZXMsIGNsaXBwaW5nLCBzaGFkb3dNYXA7XG5cblx0XHRsZXQgYmFja2dyb3VuZCwgbW9ycGh0YXJnZXRzLCBidWZmZXJSZW5kZXJlciwgaW5kZXhlZEJ1ZmZlclJlbmRlcmVyO1xuXG5cdFx0bGV0IHV0aWxzLCBiaW5kaW5nU3RhdGVzLCB1bmlmb3Jtc0dyb3VwcztcblxuXHRcdGZ1bmN0aW9uIGluaXRHTENvbnRleHQoKSB7XG5cblx0XHRcdGV4dGVuc2lvbnMgPSBuZXcgV2ViR0xFeHRlbnNpb25zKCBfZ2wgKTtcblx0XHRcdGV4dGVuc2lvbnMuaW5pdCgpO1xuXG5cdFx0XHR1dGlscyA9IG5ldyBXZWJHTFV0aWxzKCBfZ2wsIGV4dGVuc2lvbnMgKTtcblxuXHRcdFx0Y2FwYWJpbGl0aWVzID0gbmV3IFdlYkdMQ2FwYWJpbGl0aWVzKCBfZ2wsIGV4dGVuc2lvbnMsIHBhcmFtZXRlcnMsIHV0aWxzICk7XG5cblx0XHRcdHN0YXRlID0gbmV3IFdlYkdMU3RhdGUoIF9nbCApO1xuXG5cdFx0XHRpbmZvID0gbmV3IFdlYkdMSW5mbyggX2dsICk7XG5cdFx0XHRwcm9wZXJ0aWVzID0gbmV3IFdlYkdMUHJvcGVydGllcygpO1xuXHRcdFx0dGV4dHVyZXMgPSBuZXcgV2ViR0xUZXh0dXJlcyggX2dsLCBleHRlbnNpb25zLCBzdGF0ZSwgcHJvcGVydGllcywgY2FwYWJpbGl0aWVzLCB1dGlscywgaW5mbyApO1xuXHRcdFx0Y3ViZW1hcHMgPSBuZXcgV2ViR0xDdWJlTWFwcyggX3RoaXMgKTtcblx0XHRcdGN1YmV1dm1hcHMgPSBuZXcgV2ViR0xDdWJlVVZNYXBzKCBfdGhpcyApO1xuXHRcdFx0YXR0cmlidXRlcyA9IG5ldyBXZWJHTEF0dHJpYnV0ZXMoIF9nbCApO1xuXHRcdFx0YmluZGluZ1N0YXRlcyA9IG5ldyBXZWJHTEJpbmRpbmdTdGF0ZXMoIF9nbCwgYXR0cmlidXRlcyApO1xuXHRcdFx0Z2VvbWV0cmllcyA9IG5ldyBXZWJHTEdlb21ldHJpZXMoIF9nbCwgYXR0cmlidXRlcywgaW5mbywgYmluZGluZ1N0YXRlcyApO1xuXHRcdFx0b2JqZWN0cyA9IG5ldyBXZWJHTE9iamVjdHMoIF9nbCwgZ2VvbWV0cmllcywgYXR0cmlidXRlcywgaW5mbyApO1xuXHRcdFx0bW9ycGh0YXJnZXRzID0gbmV3IFdlYkdMTW9ycGh0YXJnZXRzKCBfZ2wsIGNhcGFiaWxpdGllcywgdGV4dHVyZXMgKTtcblx0XHRcdGNsaXBwaW5nID0gbmV3IFdlYkdMQ2xpcHBpbmcoIHByb3BlcnRpZXMgKTtcblx0XHRcdHByb2dyYW1DYWNoZSA9IG5ldyBXZWJHTFByb2dyYW1zKCBfdGhpcywgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcywgYmluZGluZ1N0YXRlcywgY2xpcHBpbmcgKTtcblx0XHRcdG1hdGVyaWFscyA9IG5ldyBXZWJHTE1hdGVyaWFscyggX3RoaXMsIHByb3BlcnRpZXMgKTtcblx0XHRcdHJlbmRlckxpc3RzID0gbmV3IFdlYkdMUmVuZGVyTGlzdHMoKTtcblx0XHRcdHJlbmRlclN0YXRlcyA9IG5ldyBXZWJHTFJlbmRlclN0YXRlcyggZXh0ZW5zaW9ucyApO1xuXHRcdFx0YmFja2dyb3VuZCA9IG5ldyBXZWJHTEJhY2tncm91bmQoIF90aGlzLCBjdWJlbWFwcywgY3ViZXV2bWFwcywgc3RhdGUsIG9iamVjdHMsIF9hbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICk7XG5cdFx0XHRzaGFkb3dNYXAgPSBuZXcgV2ViR0xTaGFkb3dNYXAoIF90aGlzLCBvYmplY3RzLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRcdHVuaWZvcm1zR3JvdXBzID0gbmV3IFdlYkdMVW5pZm9ybXNHcm91cHMoIF9nbCwgaW5mbywgY2FwYWJpbGl0aWVzLCBzdGF0ZSApO1xuXG5cdFx0XHRidWZmZXJSZW5kZXJlciA9IG5ldyBXZWJHTEJ1ZmZlclJlbmRlcmVyKCBfZ2wsIGV4dGVuc2lvbnMsIGluZm8gKTtcblx0XHRcdGluZGV4ZWRCdWZmZXJSZW5kZXJlciA9IG5ldyBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciggX2dsLCBleHRlbnNpb25zLCBpbmZvICk7XG5cblx0XHRcdGluZm8ucHJvZ3JhbXMgPSBwcm9ncmFtQ2FjaGUucHJvZ3JhbXM7XG5cblx0XHRcdF90aGlzLmNhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllcztcblx0XHRcdF90aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuXHRcdFx0X3RoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG5cdFx0XHRfdGhpcy5yZW5kZXJMaXN0cyA9IHJlbmRlckxpc3RzO1xuXHRcdFx0X3RoaXMuc2hhZG93TWFwID0gc2hhZG93TWFwO1xuXHRcdFx0X3RoaXMuc3RhdGUgPSBzdGF0ZTtcblx0XHRcdF90aGlzLmluZm8gPSBpbmZvO1xuXG5cdFx0fVxuXG5cdFx0aW5pdEdMQ29udGV4dCgpO1xuXG5cdFx0Ly8geHJcblxuXHRcdGNvbnN0IHhyID0gbmV3IFdlYlhSTWFuYWdlciggX3RoaXMsIF9nbCApO1xuXG5cdFx0dGhpcy54ciA9IHhyO1xuXG5cdFx0Ly8gQVBJXG5cblx0XHR0aGlzLmdldENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBfZ2w7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRDb250ZXh0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIF9nbC5nZXRDb250ZXh0QXR0cmlidXRlcygpO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZm9yY2VDb250ZXh0TG9zcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9sb3NlX2NvbnRleHQnICk7XG5cdFx0XHRpZiAoIGV4dGVuc2lvbiApIGV4dGVuc2lvbi5sb3NlQ29udGV4dCgpO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZm9yY2VDb250ZXh0UmVzdG9yZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9sb3NlX2NvbnRleHQnICk7XG5cdFx0XHRpZiAoIGV4dGVuc2lvbiApIGV4dGVuc2lvbi5yZXN0b3JlQ29udGV4dCgpO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIF9waXhlbFJhdGlvO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuc2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0X3BpeGVsUmF0aW8gPSB2YWx1ZTtcblxuXHRcdFx0dGhpcy5zZXRTaXplKCBfd2lkdGgsIF9oZWlnaHQsIGZhbHNlICk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuc2V0KCBfd2lkdGgsIF9oZWlnaHQgKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQsIHVwZGF0ZVN0eWxlID0gdHJ1ZSApIHtcblxuXHRcdFx0aWYgKCB4ci5pc1ByZXNlbnRpbmcgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ2FuXFwndCBjaGFuZ2Ugc2l6ZSB3aGlsZSBWUiBkZXZpY2UgaXMgcHJlc2VudGluZy4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRfd2lkdGggPSB3aWR0aDtcblx0XHRcdF9oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRcdGNhbnZhcy53aWR0aCA9IE1hdGguZmxvb3IoIHdpZHRoICogX3BpeGVsUmF0aW8gKTtcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKCBoZWlnaHQgKiBfcGl4ZWxSYXRpbyApO1xuXG5cdFx0XHRpZiAoIHVwZGF0ZVN0eWxlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4Jztcblx0XHRcdFx0Y2FudmFzLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zZXRWaWV3cG9ydCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0RHJhd2luZ0J1ZmZlclNpemUgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5zZXQoIF93aWR0aCAqIF9waXhlbFJhdGlvLCBfaGVpZ2h0ICogX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuc2V0RHJhd2luZ0J1ZmZlclNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQsIHBpeGVsUmF0aW8gKSB7XG5cblx0XHRcdF93aWR0aCA9IHdpZHRoO1xuXHRcdFx0X2hlaWdodCA9IGhlaWdodDtcblxuXHRcdFx0X3BpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuXG5cdFx0XHRjYW52YXMud2lkdGggPSBNYXRoLmZsb29yKCB3aWR0aCAqIHBpeGVsUmF0aW8gKTtcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKCBoZWlnaHQgKiBwaXhlbFJhdGlvICk7XG5cblx0XHRcdHRoaXMuc2V0Vmlld3BvcnQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldEN1cnJlbnRWaWV3cG9ydCA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIF9jdXJyZW50Vmlld3BvcnQgKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggX3ZpZXdwb3J0ICk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5zZXRWaWV3cG9ydCA9IGZ1bmN0aW9uICggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdFx0aWYgKCB4LmlzVmVjdG9yNCApIHtcblxuXHRcdFx0XHRfdmlld3BvcnQuc2V0KCB4LngsIHgueSwgeC56LCB4LncgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfdmlld3BvcnQuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggX3ZpZXdwb3J0ICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkucm91bmQoKSApO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0U2Npc3NvciA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIF9zY2lzc29yICk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5zZXRTY2lzc29yID0gZnVuY3Rpb24gKCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIHguaXNWZWN0b3I0ICkge1xuXG5cdFx0XHRcdF9zY2lzc29yLnNldCggeC54LCB4LnksIHgueiwgeC53ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X3NjaXNzb3Iuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUuc2Npc3NvciggX2N1cnJlbnRTY2lzc29yLmNvcHkoIF9zY2lzc29yICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkucm91bmQoKSApO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0U2Npc3NvclRlc3QgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBfc2Npc3NvclRlc3Q7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5zZXRTY2lzc29yVGVzdCA9IGZ1bmN0aW9uICggYm9vbGVhbiApIHtcblxuXHRcdFx0c3RhdGUuc2V0U2Npc3NvclRlc3QoIF9zY2lzc29yVGVzdCA9IGJvb2xlYW4gKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldE9wYXF1ZVNvcnQgPSBmdW5jdGlvbiAoIG1ldGhvZCApIHtcblxuXHRcdFx0X29wYXF1ZVNvcnQgPSBtZXRob2Q7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5zZXRUcmFuc3BhcmVudFNvcnQgPSBmdW5jdGlvbiAoIG1ldGhvZCApIHtcblxuXHRcdFx0X3RyYW5zcGFyZW50U29ydCA9IG1ldGhvZDtcblxuXHRcdH07XG5cblx0XHQvLyBDbGVhcmluZ1xuXG5cdFx0dGhpcy5nZXRDbGVhckNvbG9yID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYmFja2dyb3VuZC5nZXRDbGVhckNvbG9yKCkgKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGJhY2tncm91bmQuc2V0Q2xlYXJDb2xvci5hcHBseSggYmFja2dyb3VuZCwgYXJndW1lbnRzICk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRDbGVhckFscGhhID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gYmFja2dyb3VuZC5nZXRDbGVhckFscGhhKCk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5zZXRDbGVhckFscGhhID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRiYWNrZ3JvdW5kLnNldENsZWFyQWxwaGEuYXBwbHkoIGJhY2tncm91bmQsIGFyZ3VtZW50cyApO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuY2xlYXIgPSBmdW5jdGlvbiAoIGNvbG9yID0gdHJ1ZSwgZGVwdGggPSB0cnVlLCBzdGVuY2lsID0gdHJ1ZSApIHtcblxuXHRcdFx0bGV0IGJpdHMgPSAwO1xuXG5cdFx0XHRpZiAoIGNvbG9yICkge1xuXG5cdFx0XHRcdC8vIGNoZWNrIGlmIHdlJ3JlIHRyeWluZyB0byBjbGVhciBhbiBpbnRlZ2VyIHRhcmdldFxuXHRcdFx0XHRsZXQgaXNJbnRlZ2VyRm9ybWF0ID0gZmFsc2U7XG5cdFx0XHRcdGlmICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB0YXJnZXRGb3JtYXQgPSBfY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlLmZvcm1hdDtcblx0XHRcdFx0XHRpc0ludGVnZXJGb3JtYXQgPSB0YXJnZXRGb3JtYXQgPT09IFJHQkFJbnRlZ2VyRm9ybWF0IHx8XG5cdFx0XHRcdFx0XHR0YXJnZXRGb3JtYXQgPT09IFJHSW50ZWdlckZvcm1hdCB8fFxuXHRcdFx0XHRcdFx0dGFyZ2V0Rm9ybWF0ID09PSBSZWRJbnRlZ2VyRm9ybWF0O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyB1c2UgdGhlIGFwcHJvcHJpYXRlIGNsZWFyIGZ1bmN0aW9ucyB0byBjbGVhciB0aGUgdGFyZ2V0IGlmIGl0J3MgYSBzaWduZWRcblx0XHRcdFx0Ly8gb3IgdW5zaWduZWQgaW50ZWdlciB0YXJnZXRcblx0XHRcdFx0aWYgKCBpc0ludGVnZXJGb3JtYXQgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB0YXJnZXRUeXBlID0gX2N1cnJlbnRSZW5kZXJUYXJnZXQudGV4dHVyZS50eXBlO1xuXHRcdFx0XHRcdGNvbnN0IGlzVW5zaWduZWRUeXBlID0gdGFyZ2V0VHlwZSA9PT0gVW5zaWduZWRCeXRlVHlwZSB8fFxuXHRcdFx0XHRcdFx0dGFyZ2V0VHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlIHx8XG5cdFx0XHRcdFx0XHR0YXJnZXRUeXBlID09PSBVbnNpZ25lZFNob3J0VHlwZSB8fFxuXHRcdFx0XHRcdFx0dGFyZ2V0VHlwZSA9PT0gVW5zaWduZWRJbnQyNDhUeXBlIHx8XG5cdFx0XHRcdFx0XHR0YXJnZXRUeXBlID09PSBVbnNpZ25lZFNob3J0NDQ0NFR5cGUgfHxcblx0XHRcdFx0XHRcdHRhcmdldFR5cGUgPT09IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZTtcblxuXHRcdFx0XHRcdGNvbnN0IGNsZWFyQ29sb3IgPSBiYWNrZ3JvdW5kLmdldENsZWFyQ29sb3IoKTtcblx0XHRcdFx0XHRjb25zdCBhID0gYmFja2dyb3VuZC5nZXRDbGVhckFscGhhKCk7XG5cdFx0XHRcdFx0Y29uc3QgciA9IGNsZWFyQ29sb3Iucjtcblx0XHRcdFx0XHRjb25zdCBnID0gY2xlYXJDb2xvci5nO1xuXHRcdFx0XHRcdGNvbnN0IGIgPSBjbGVhckNvbG9yLmI7XG5cblx0XHRcdFx0XHRpZiAoIGlzVW5zaWduZWRUeXBlICkge1xuXG5cdFx0XHRcdFx0XHR1aW50Q2xlYXJDb2xvclsgMCBdID0gcjtcblx0XHRcdFx0XHRcdHVpbnRDbGVhckNvbG9yWyAxIF0gPSBnO1xuXHRcdFx0XHRcdFx0dWludENsZWFyQ29sb3JbIDIgXSA9IGI7XG5cdFx0XHRcdFx0XHR1aW50Q2xlYXJDb2xvclsgMyBdID0gYTtcblx0XHRcdFx0XHRcdF9nbC5jbGVhckJ1ZmZlcnVpdiggX2dsLkNPTE9SLCAwLCB1aW50Q2xlYXJDb2xvciApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aW50Q2xlYXJDb2xvclsgMCBdID0gcjtcblx0XHRcdFx0XHRcdGludENsZWFyQ29sb3JbIDEgXSA9IGc7XG5cdFx0XHRcdFx0XHRpbnRDbGVhckNvbG9yWyAyIF0gPSBiO1xuXHRcdFx0XHRcdFx0aW50Q2xlYXJDb2xvclsgMyBdID0gYTtcblx0XHRcdFx0XHRcdF9nbC5jbGVhckJ1ZmZlcml2KCBfZ2wuQ09MT1IsIDAsIGludENsZWFyQ29sb3IgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Yml0cyB8PSBfZ2wuQ09MT1JfQlVGRkVSX0JJVDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBkZXB0aCApIGJpdHMgfD0gX2dsLkRFUFRIX0JVRkZFUl9CSVQ7XG5cdFx0XHRpZiAoIHN0ZW5jaWwgKSB7XG5cblx0XHRcdFx0Yml0cyB8PSBfZ2wuU1RFTkNJTF9CVUZGRVJfQklUO1xuXHRcdFx0XHR0aGlzLnN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRNYXNrKCAweGZmZmZmZmZmICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2dsLmNsZWFyKCBiaXRzICk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5jbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR0aGlzLmNsZWFyKCB0cnVlLCBmYWxzZSwgZmFsc2UgKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmNsZWFyRGVwdGggPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHRoaXMuY2xlYXIoIGZhbHNlLCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuY2xlYXJTdGVuY2lsID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR0aGlzLmNsZWFyKCBmYWxzZSwgZmFsc2UsIHRydWUgKTtcblxuXHRcdH07XG5cblx0XHQvL1xuXG5cdFx0dGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApO1xuXHRcdFx0Y2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIG9uQ29udGV4dFJlc3RvcmUsIGZhbHNlICk7XG5cdFx0XHRjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGNyZWF0aW9uZXJyb3InLCBvbkNvbnRleHRDcmVhdGlvbkVycm9yLCBmYWxzZSApO1xuXG5cdFx0XHRyZW5kZXJMaXN0cy5kaXNwb3NlKCk7XG5cdFx0XHRyZW5kZXJTdGF0ZXMuZGlzcG9zZSgpO1xuXHRcdFx0cHJvcGVydGllcy5kaXNwb3NlKCk7XG5cdFx0XHRjdWJlbWFwcy5kaXNwb3NlKCk7XG5cdFx0XHRjdWJldXZtYXBzLmRpc3Bvc2UoKTtcblx0XHRcdG9iamVjdHMuZGlzcG9zZSgpO1xuXHRcdFx0YmluZGluZ1N0YXRlcy5kaXNwb3NlKCk7XG5cdFx0XHR1bmlmb3Jtc0dyb3Vwcy5kaXNwb3NlKCk7XG5cdFx0XHRwcm9ncmFtQ2FjaGUuZGlzcG9zZSgpO1xuXG5cdFx0XHR4ci5kaXNwb3NlKCk7XG5cblx0XHRcdHhyLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzZXNzaW9uc3RhcnQnLCBvblhSU2Vzc2lvblN0YXJ0ICk7XG5cdFx0XHR4ci5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Vzc2lvbmVuZCcsIG9uWFJTZXNzaW9uRW5kICk7XG5cblx0XHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0XHR9O1xuXG5cdFx0Ly8gRXZlbnRzXG5cblx0XHRmdW5jdGlvbiBvbkNvbnRleHRMb3N0KCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Y29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IExvc3QuJyApO1xuXG5cdFx0XHRfaXNDb250ZXh0TG9zdCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbkNvbnRleHRSZXN0b3JlKCAvKiBldmVudCAqLyApIHtcblxuXHRcdFx0Y29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IFJlc3RvcmVkLicgKTtcblxuXHRcdFx0X2lzQ29udGV4dExvc3QgPSBmYWxzZTtcblxuXHRcdFx0Y29uc3QgaW5mb0F1dG9SZXNldCA9IGluZm8uYXV0b1Jlc2V0O1xuXHRcdFx0Y29uc3Qgc2hhZG93TWFwRW5hYmxlZCA9IHNoYWRvd01hcC5lbmFibGVkO1xuXHRcdFx0Y29uc3Qgc2hhZG93TWFwQXV0b1VwZGF0ZSA9IHNoYWRvd01hcC5hdXRvVXBkYXRlO1xuXHRcdFx0Y29uc3Qgc2hhZG93TWFwTmVlZHNVcGRhdGUgPSBzaGFkb3dNYXAubmVlZHNVcGRhdGU7XG5cdFx0XHRjb25zdCBzaGFkb3dNYXBUeXBlID0gc2hhZG93TWFwLnR5cGU7XG5cblx0XHRcdGluaXRHTENvbnRleHQoKTtcblxuXHRcdFx0aW5mby5hdXRvUmVzZXQgPSBpbmZvQXV0b1Jlc2V0O1xuXHRcdFx0c2hhZG93TWFwLmVuYWJsZWQgPSBzaGFkb3dNYXBFbmFibGVkO1xuXHRcdFx0c2hhZG93TWFwLmF1dG9VcGRhdGUgPSBzaGFkb3dNYXBBdXRvVXBkYXRlO1xuXHRcdFx0c2hhZG93TWFwLm5lZWRzVXBkYXRlID0gc2hhZG93TWFwTmVlZHNVcGRhdGU7XG5cdFx0XHRzaGFkb3dNYXAudHlwZSA9IHNoYWRvd01hcFR5cGU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbkNvbnRleHRDcmVhdGlvbkVycm9yKCBldmVudCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEEgV2ViR0wgY29udGV4dCBjb3VsZCBub3QgYmUgY3JlYXRlZC4gUmVhc29uOiAnLCBldmVudC5zdGF0dXNNZXNzYWdlICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbk1hdGVyaWFsRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRcdGNvbnN0IG1hdGVyaWFsID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0XHRtYXRlcmlhbC5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uTWF0ZXJpYWxEaXNwb3NlICk7XG5cblx0XHRcdGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKTtcblxuXHRcdH1cblxuXHRcdC8vIEJ1ZmZlciBkZWFsbG9jYXRpb25cblxuXHRcdGZ1bmN0aW9uIGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2VzKCBtYXRlcmlhbCApO1xuXG5cdFx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggbWF0ZXJpYWwgKTtcblxuXHRcdH1cblxuXG5cdFx0ZnVuY3Rpb24gcmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZXMoIG1hdGVyaWFsICkge1xuXG5cdFx0XHRjb25zdCBwcm9ncmFtcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLnByb2dyYW1zO1xuXG5cdFx0XHRpZiAoIHByb2dyYW1zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cHJvZ3JhbXMuZm9yRWFjaCggZnVuY3Rpb24gKCBwcm9ncmFtICkge1xuXG5cdFx0XHRcdFx0cHJvZ3JhbUNhY2hlLnJlbGVhc2VQcm9ncmFtKCBwcm9ncmFtICk7XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdHByb2dyYW1DYWNoZS5yZWxlYXNlU2hhZGVyQ2FjaGUoIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBCdWZmZXIgcmVuZGVyaW5nXG5cblx0XHR0aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCA9IGZ1bmN0aW9uICggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICkge1xuXG5cdFx0XHRpZiAoIHNjZW5lID09PSBudWxsICkgc2NlbmUgPSBfZW1wdHlTY2VuZTsgLy8gcmVuZGVyQnVmZmVyRGlyZWN0IHNlY29uZCBwYXJhbWV0ZXIgdXNlZCB0byBiZSBmb2cgKGNvdWxkIGJlIG51bGwpXG5cblx0XHRcdGNvbnN0IGZyb250RmFjZUNXID0gKCBvYmplY3QuaXNNZXNoICYmIG9iamVjdC5tYXRyaXhXb3JsZC5kZXRlcm1pbmFudCgpIDwgMCApO1xuXG5cdFx0XHRjb25zdCBwcm9ncmFtID0gc2V0UHJvZ3JhbSggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QgKTtcblxuXHRcdFx0c3RhdGUuc2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVyApO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRsZXQgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdGxldCByYW5nZUZhY3RvciA9IDE7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGluZGV4ID0gZ2VvbWV0cmllcy5nZXRXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0XHRcdHJhbmdlRmFjdG9yID0gMjtcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRjb25zdCBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRcdGxldCBkcmF3U3RhcnQgPSBkcmF3UmFuZ2Uuc3RhcnQgKiByYW5nZUZhY3Rvcjtcblx0XHRcdGxldCBkcmF3RW5kID0gKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSAqIHJhbmdlRmFjdG9yO1xuXG5cdFx0XHRpZiAoIGdyb3VwICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGRyYXdTdGFydCA9IE1hdGgubWF4KCBkcmF3U3RhcnQsIGdyb3VwLnN0YXJ0ICogcmFuZ2VGYWN0b3IgKTtcblx0XHRcdFx0ZHJhd0VuZCA9IE1hdGgubWluKCBkcmF3RW5kLCAoIGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQgKSAqIHJhbmdlRmFjdG9yICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRkcmF3U3RhcnQgPSBNYXRoLm1heCggZHJhd1N0YXJ0LCAwICk7XG5cdFx0XHRcdGRyYXdFbmQgPSBNYXRoLm1pbiggZHJhd0VuZCwgaW5kZXguY291bnQgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCAmJiBwb3NpdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRkcmF3U3RhcnQgPSBNYXRoLm1heCggZHJhd1N0YXJ0LCAwICk7XG5cdFx0XHRcdGRyYXdFbmQgPSBNYXRoLm1pbiggZHJhd0VuZCwgcG9zaXRpb24uY291bnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBkcmF3Q291bnQgPSBkcmF3RW5kIC0gZHJhd1N0YXJ0O1xuXG5cdFx0XHRpZiAoIGRyYXdDb3VudCA8IDAgfHwgZHJhd0NvdW50ID09PSBJbmZpbml0eSApIHJldHVybjtcblxuXHRcdFx0Ly9cblxuXHRcdFx0YmluZGluZ1N0YXRlcy5zZXR1cCggb2JqZWN0LCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnksIGluZGV4ICk7XG5cblx0XHRcdGxldCBhdHRyaWJ1dGU7XG5cdFx0XHRsZXQgcmVuZGVyZXIgPSBidWZmZXJSZW5kZXJlcjtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldCggaW5kZXggKTtcblxuXHRcdFx0XHRyZW5kZXJlciA9IGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcblx0XHRcdFx0cmVuZGVyZXIuc2V0SW5kZXgoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdGlmICggb2JqZWN0LmlzTWVzaCApIHtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHN0YXRlLnNldExpbmVXaWR0aCggbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoICogZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpICk7XG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLkxJTkVTICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5UUklBTkdMRVMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0xpbmUgKSB7XG5cblx0XHRcdFx0bGV0IGxpbmVXaWR0aCA9IG1hdGVyaWFsLmxpbmV3aWR0aDtcblxuXHRcdFx0XHRpZiAoIGxpbmVXaWR0aCA9PT0gdW5kZWZpbmVkICkgbGluZVdpZHRoID0gMTsgLy8gTm90IHVzaW5nIExpbmUqTWF0ZXJpYWxcblxuXHRcdFx0XHRzdGF0ZS5zZXRMaW5lV2lkdGgoIGxpbmVXaWR0aCAqIGdldFRhcmdldFBpeGVsUmF0aW8oKSApO1xuXG5cdFx0XHRcdGlmICggb2JqZWN0LmlzTGluZVNlZ21lbnRzICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLkxJTkVTICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTGluZUxvb3AgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCBfZ2wuTElORV9MT09QICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5MSU5FX1NUUklQICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNQb2ludHMgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLlBPSU5UUyApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNTcHJpdGUgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLlRSSUFOR0xFUyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb2JqZWN0LmlzQmF0Y2hlZE1lc2ggKSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuX211bHRpRHJhd0luc3RhbmNlcyAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHJlbmRlcmVyLnJlbmRlck11bHRpRHJhd0luc3RhbmNlcyggb2JqZWN0Ll9tdWx0aURyYXdTdGFydHMsIG9iamVjdC5fbXVsdGlEcmF3Q291bnRzLCBvYmplY3QuX211bHRpRHJhd0NvdW50LCBvYmplY3QuX211bHRpRHJhd0luc3RhbmNlcyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoICEgZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBzdGFydHMgPSBvYmplY3QuX211bHRpRHJhd1N0YXJ0cztcblx0XHRcdFx0XHRcdGNvbnN0IGNvdW50cyA9IG9iamVjdC5fbXVsdGlEcmF3Q291bnRzO1xuXHRcdFx0XHRcdFx0Y29uc3QgZHJhd0NvdW50ID0gb2JqZWN0Ll9tdWx0aURyYXdDb3VudDtcblx0XHRcdFx0XHRcdGNvbnN0IGJ5dGVzUGVyRWxlbWVudCA9IGluZGV4ID8gYXR0cmlidXRlcy5nZXQoIGluZGV4ICkuYnl0ZXNQZXJFbGVtZW50IDogMTtcblx0XHRcdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICkuY3VycmVudFByb2dyYW0uZ2V0VW5pZm9ybXMoKTtcblx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRyYXdDb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR1bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnX2dsX0RyYXdJRCcsIGkgKTtcblx0XHRcdFx0XHRcdFx0cmVuZGVyZXIucmVuZGVyKCBzdGFydHNbIGkgXSAvIGJ5dGVzUGVyRWxlbWVudCwgY291bnRzWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0cmVuZGVyZXIucmVuZGVyTXVsdGlEcmF3KCBvYmplY3QuX211bHRpRHJhd1N0YXJ0cywgb2JqZWN0Ll9tdWx0aURyYXdDb3VudHMsIG9iamVjdC5fbXVsdGlEcmF3Q291bnQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIucmVuZGVySW5zdGFuY2VzKCBkcmF3U3RhcnQsIGRyYXdDb3VudCwgb2JqZWN0LmNvdW50ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0Y29uc3QgbWF4SW5zdGFuY2VDb3VudCA9IGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50ICE9PSB1bmRlZmluZWQgPyBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCA6IEluZmluaXR5O1xuXHRcdFx0XHRjb25zdCBpbnN0YW5jZUNvdW50ID0gTWF0aC5taW4oIGdlb21ldHJ5Lmluc3RhbmNlQ291bnQsIG1heEluc3RhbmNlQ291bnQgKTtcblxuXHRcdFx0XHRyZW5kZXJlci5yZW5kZXJJbnN0YW5jZXMoIGRyYXdTdGFydCwgZHJhd0NvdW50LCBpbnN0YW5jZUNvdW50ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVuZGVyZXIucmVuZGVyKCBkcmF3U3RhcnQsIGRyYXdDb3VudCApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0Ly8gQ29tcGlsZVxuXG5cdFx0ZnVuY3Rpb24gcHJlcGFyZU1hdGVyaWFsKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSAmJiBtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlICYmIG1hdGVyaWFsLmZvcmNlU2luZ2xlUGFzcyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwuc2lkZSA9IEJhY2tTaWRlO1xuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRcdGdldFByb2dyYW0oIG1hdGVyaWFsLCBzY2VuZSwgb2JqZWN0ICk7XG5cblx0XHRcdFx0bWF0ZXJpYWwuc2lkZSA9IEZyb250U2lkZTtcblx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRnZXRQcm9ncmFtKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBEb3VibGVTaWRlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGdldFByb2dyYW0oIG1hdGVyaWFsLCBzY2VuZSwgb2JqZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuY29tcGlsZSA9IGZ1bmN0aW9uICggc2NlbmUsIGNhbWVyYSwgdGFyZ2V0U2NlbmUgPSBudWxsICkge1xuXG5cdFx0XHRpZiAoIHRhcmdldFNjZW5lID09PSBudWxsICkgdGFyZ2V0U2NlbmUgPSBzY2VuZTtcblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggdGFyZ2V0U2NlbmUgKTtcblx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5pbml0KCBjYW1lcmEgKTtcblxuXHRcdFx0cmVuZGVyU3RhdGVTdGFjay5wdXNoKCBjdXJyZW50UmVuZGVyU3RhdGUgKTtcblxuXHRcdFx0Ly8gZ2F0aGVyIGxpZ2h0cyBmcm9tIGJvdGggdGhlIHRhcmdldCBzY2VuZSBhbmQgdGhlIG5ldyBvYmplY3QgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBzY2VuZS5cblxuXHRcdFx0dGFyZ2V0U2NlbmUudHJhdmVyc2VWaXNpYmxlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5pc0xpZ2h0ICYmIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hMaWdodCggb2JqZWN0ICk7XG5cblx0XHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyggb2JqZWN0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdGlmICggc2NlbmUgIT09IHRhcmdldFNjZW5lICkge1xuXG5cdFx0XHRcdHNjZW5lLnRyYXZlcnNlVmlzaWJsZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG9iamVjdC5pc0xpZ2h0ICYmIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBvYmplY3QuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyggb2JqZWN0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCk7XG5cblx0XHRcdC8vIE9ubHkgaW5pdGlhbGl6ZSBtYXRlcmlhbHMgaW4gdGhlIG5ldyBzY2VuZSwgbm90IHRoZSB0YXJnZXRTY2VuZS5cblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxzID0gbmV3IFNldCgpO1xuXG5cdFx0XHRzY2VuZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbWF0ZXJpYWwubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsMiA9IG1hdGVyaWFsWyBpIF07XG5cblx0XHRcdFx0XHRcdFx0cHJlcGFyZU1hdGVyaWFsKCBtYXRlcmlhbDIsIHRhcmdldFNjZW5lLCBvYmplY3QgKTtcblx0XHRcdFx0XHRcdFx0bWF0ZXJpYWxzLmFkZCggbWF0ZXJpYWwyICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHByZXBhcmVNYXRlcmlhbCggbWF0ZXJpYWwsIHRhcmdldFNjZW5lLCBvYmplY3QgKTtcblx0XHRcdFx0XHRcdG1hdGVyaWFscy5hZGQoIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHJlbmRlclN0YXRlU3RhY2sucG9wKCk7XG5cdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSBudWxsO1xuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWxzO1xuXG5cdFx0fTtcblxuXHRcdC8vIGNvbXBpbGVBc3luY1xuXG5cdFx0dGhpcy5jb21waWxlQXN5bmMgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEsIHRhcmdldFNjZW5lID0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxzID0gdGhpcy5jb21waWxlKCBzY2VuZSwgY2FtZXJhLCB0YXJnZXRTY2VuZSApO1xuXG5cdFx0XHQvLyBXYWl0IGZvciBhbGwgdGhlIG1hdGVyaWFscyBpbiB0aGUgbmV3IG9iamVjdCB0byBpbmRpY2F0ZSB0aGF0IHRoZXkncmVcblx0XHRcdC8vIHJlYWR5IHRvIGJlIHVzZWQgYmVmb3JlIHJlc29sdmluZyB0aGUgcHJvbWlzZS5cblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKCAoIHJlc29sdmUgKSA9PiB7XG5cblx0XHRcdFx0ZnVuY3Rpb24gY2hlY2tNYXRlcmlhbHNSZWFkeSgpIHtcblxuXHRcdFx0XHRcdG1hdGVyaWFscy5mb3JFYWNoKCBmdW5jdGlvbiAoIG1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblx0XHRcdFx0XHRcdGNvbnN0IHByb2dyYW0gPSBtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW07XG5cblx0XHRcdFx0XHRcdGlmICggcHJvZ3JhbS5pc1JlYWR5KCkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gcmVtb3ZlIGFueSBwcm9ncmFtcyB0aGF0IHJlcG9ydCB0aGV5J3JlIHJlYWR5IHRvIHVzZSBmcm9tIHRoZSBsaXN0XG5cdFx0XHRcdFx0XHRcdG1hdGVyaWFscy5kZWxldGUoIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdC8vIG9uY2UgdGhlIGxpc3Qgb2YgY29tcGlsaW5nIG1hdGVyaWFscyBpcyBlbXB0eSwgY2FsbCB0aGUgY2FsbGJhY2tcblxuXHRcdFx0XHRcdGlmICggbWF0ZXJpYWxzLnNpemUgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdHJlc29sdmUoIHNjZW5lICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBpZiBzb21lIG1hdGVyaWFscyBhcmUgc3RpbGwgbm90IHJlYWR5LCB3YWl0IGEgYml0IGFuZCBjaGVjayBhZ2FpblxuXG5cdFx0XHRcdFx0c2V0VGltZW91dCggY2hlY2tNYXRlcmlhbHNSZWFkeSwgMTAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBleHRlbnNpb25zLmdldCggJ0tIUl9wYXJhbGxlbF9zaGFkZXJfY29tcGlsZScgKSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGNhbiBjaGVjayB0aGUgY29tcGlsYXRpb24gc3RhdHVzIG9mIHRoZSBtYXRlcmlhbHMgd2l0aG91dFxuXHRcdFx0XHRcdC8vIGJsb2NraW5nIHRoZW4gZG8gc28gcmlnaHQgYXdheS5cblxuXHRcdFx0XHRcdGNoZWNrTWF0ZXJpYWxzUmVhZHkoKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHN0YXJ0IGJ5IHdhaXRpbmcgYSBiaXQgdG8gZ2l2ZSB0aGUgbWF0ZXJpYWxzIHdlIGp1c3Rcblx0XHRcdFx0XHQvLyBpbml0aWFsaXplZCBhIGNoYW5jZSB0byBmaW5pc2guXG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KCBjaGVja01hdGVyaWFsc1JlYWR5LCAxMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0fTtcblxuXHRcdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0XHRsZXQgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDtcblxuXHRcdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUgKSB7XG5cblx0XHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvblhSU2Vzc2lvblN0YXJ0KCkge1xuXG5cdFx0XHRhbmltYXRpb24uc3RvcCgpO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25YUlNlc3Npb25FbmQoKSB7XG5cblx0XHRcdGFuaW1hdGlvbi5zdGFydCgpO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYW5pbWF0aW9uID0gbmV3IFdlYkdMQW5pbWF0aW9uKCk7XG5cdFx0YW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICkgYW5pbWF0aW9uLnNldENvbnRleHQoIHNlbGYgKTtcblxuXHRcdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRcdG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdFx0eHIuc2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKTtcblxuXHRcdFx0KCBjYWxsYmFjayA9PT0gbnVsbCApID8gYW5pbWF0aW9uLnN0b3AoKSA6IGFuaW1hdGlvbi5zdGFydCgpO1xuXG5cdFx0fTtcblxuXHRcdHhyLmFkZEV2ZW50TGlzdGVuZXIoICdzZXNzaW9uc3RhcnQnLCBvblhSU2Vzc2lvblN0YXJ0ICk7XG5cdFx0eHIuYWRkRXZlbnRMaXN0ZW5lciggJ3Nlc3Npb25lbmQnLCBvblhSU2Vzc2lvbkVuZCApO1xuXG5cdFx0Ly8gUmVuZGVyaW5nXG5cblx0XHR0aGlzLnJlbmRlciA9IGZ1bmN0aW9uICggc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdFx0aWYgKCBjYW1lcmEgIT09IHVuZGVmaW5lZCAmJiBjYW1lcmEuaXNDYW1lcmEgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVuZGVyOiBjYW1lcmEgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkNhbWVyYS4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIF9pc0NvbnRleHRMb3N0ID09PSB0cnVlICkgcmV0dXJuO1xuXG5cdFx0XHQvLyB1cGRhdGUgc2NlbmUgZ3JhcGhcblxuXHRcdFx0aWYgKCBzY2VuZS5tYXRyaXhXb3JsZEF1dG9VcGRhdGUgPT09IHRydWUgKSBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0XHQvLyB1cGRhdGUgY2FtZXJhIG1hdHJpY2VzIGFuZCBmcnVzdHVtXG5cblx0XHRcdGlmICggY2FtZXJhLnBhcmVudCA9PT0gbnVsbCAmJiBjYW1lcmEubWF0cml4V29ybGRBdXRvVXBkYXRlID09PSB0cnVlICkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRcdGlmICggeHIuZW5hYmxlZCA9PT0gdHJ1ZSAmJiB4ci5pc1ByZXNlbnRpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0aWYgKCB4ci5jYW1lcmFBdXRvVXBkYXRlID09PSB0cnVlICkgeHIudXBkYXRlQ2FtZXJhKCBjYW1lcmEgKTtcblxuXHRcdFx0XHRjYW1lcmEgPSB4ci5nZXRDYW1lcmEoKTsgLy8gdXNlIFhSIGNhbWVyYSBmb3IgcmVuZGVyaW5nXG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblx0XHRcdGlmICggc2NlbmUuaXNTY2VuZSA9PT0gdHJ1ZSApIHNjZW5lLm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUsIHJlbmRlclN0YXRlU3RhY2subGVuZ3RoICk7XG5cdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUuaW5pdCggY2FtZXJhICk7XG5cblx0XHRcdHJlbmRlclN0YXRlU3RhY2sucHVzaCggY3VycmVudFJlbmRlclN0YXRlICk7XG5cblx0XHRcdF9wcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0XHRfZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0X2xvY2FsQ2xpcHBpbmdFbmFibGVkID0gdGhpcy5sb2NhbENsaXBwaW5nRW5hYmxlZDtcblx0XHRcdF9jbGlwcGluZ0VuYWJsZWQgPSBjbGlwcGluZy5pbml0KCB0aGlzLmNsaXBwaW5nUGxhbmVzLCBfbG9jYWxDbGlwcGluZ0VuYWJsZWQgKTtcblxuXHRcdFx0Y3VycmVudFJlbmRlckxpc3QgPSByZW5kZXJMaXN0cy5nZXQoIHNjZW5lLCByZW5kZXJMaXN0U3RhY2subGVuZ3RoICk7XG5cdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5pbml0KCk7XG5cblx0XHRcdHJlbmRlckxpc3RTdGFjay5wdXNoKCBjdXJyZW50UmVuZGVyTGlzdCApO1xuXG5cdFx0XHRpZiAoIHhyLmVuYWJsZWQgPT09IHRydWUgJiYgeHIuaXNQcmVzZW50aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnN0IGRlcHRoU2Vuc2luZ01lc2ggPSBfdGhpcy54ci5nZXREZXB0aFNlbnNpbmdNZXNoKCk7XG5cblx0XHRcdFx0aWYgKCBkZXB0aFNlbnNpbmdNZXNoICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0cHJvamVjdE9iamVjdCggZGVwdGhTZW5zaW5nTWVzaCwgY2FtZXJhLCAtIEluZmluaXR5LCBfdGhpcy5zb3J0T2JqZWN0cyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRwcm9qZWN0T2JqZWN0KCBzY2VuZSwgY2FtZXJhLCAwLCBfdGhpcy5zb3J0T2JqZWN0cyApO1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5maW5pc2goKTtcblxuXHRcdFx0aWYgKCBfdGhpcy5zb3J0T2JqZWN0cyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5zb3J0KCBfb3BhcXVlU29ydCwgX3RyYW5zcGFyZW50U29ydCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9yZW5kZXJCYWNrZ3JvdW5kID0geHIuZW5hYmxlZCA9PT0gZmFsc2UgfHwgeHIuaXNQcmVzZW50aW5nID09PSBmYWxzZSB8fCB4ci5oYXNEZXB0aFNlbnNpbmcoKSA9PT0gZmFsc2U7XG5cdFx0XHRpZiAoIF9yZW5kZXJCYWNrZ3JvdW5kICkge1xuXG5cdFx0XHRcdGJhY2tncm91bmQuYWRkVG9SZW5kZXJMaXN0KCBjdXJyZW50UmVuZGVyTGlzdCwgc2NlbmUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHR0aGlzLmluZm8ucmVuZGVyLmZyYW1lICsrO1xuXG5cdFx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgKSBjbGlwcGluZy5iZWdpblNoYWRvd3MoKTtcblxuXHRcdFx0Y29uc3Qgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTtcblxuXHRcdFx0c2hhZG93TWFwLnJlbmRlciggc2hhZG93c0FycmF5LCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIGNsaXBwaW5nLmVuZFNoYWRvd3MoKTtcblxuXHRcdFx0Ly9cblxuXHRcdFx0aWYgKCB0aGlzLmluZm8uYXV0b1Jlc2V0ID09PSB0cnVlICkgdGhpcy5pbmZvLnJlc2V0KCk7XG5cblx0XHRcdC8vIHJlbmRlciBzY2VuZVxuXG5cdFx0XHRjb25zdCBvcGFxdWVPYmplY3RzID0gY3VycmVudFJlbmRlckxpc3Qub3BhcXVlO1xuXHRcdFx0Y29uc3QgdHJhbnNtaXNzaXZlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0LnRyYW5zbWlzc2l2ZTtcblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCk7XG5cblx0XHRcdGlmICggY2FtZXJhLmlzQXJyYXlDYW1lcmEgKSB7XG5cblx0XHRcdFx0Y29uc3QgY2FtZXJhcyA9IGNhbWVyYS5jYW1lcmFzO1xuXG5cdFx0XHRcdGlmICggdHJhbnNtaXNzaXZlT2JqZWN0cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2FtZXJhcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBjYW1lcmEyID0gY2FtZXJhc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRyZW5kZXJUcmFuc21pc3Npb25QYXNzKCBvcGFxdWVPYmplY3RzLCB0cmFuc21pc3NpdmVPYmplY3RzLCBzY2VuZSwgY2FtZXJhMiApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIF9yZW5kZXJCYWNrZ3JvdW5kICkgYmFja2dyb3VuZC5yZW5kZXIoIHNjZW5lICk7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2FtZXJhcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgY2FtZXJhMiA9IGNhbWVyYXNbIGkgXTtcblxuXHRcdFx0XHRcdHJlbmRlclNjZW5lKCBjdXJyZW50UmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYTIsIGNhbWVyYTIudmlld3BvcnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJUcmFuc21pc3Npb25QYXNzKCBvcGFxdWVPYmplY3RzLCB0cmFuc21pc3NpdmVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdFx0aWYgKCBfcmVuZGVyQmFja2dyb3VuZCApIGJhY2tncm91bmQucmVuZGVyKCBzY2VuZSApO1xuXG5cdFx0XHRcdHJlbmRlclNjZW5lKCBjdXJyZW50UmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdGlmICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gcmVzb2x2ZSBtdWx0aXNhbXBsZSByZW5kZXJidWZmZXJzIHRvIGEgc2luZ2xlLXNhbXBsZSB0ZXh0dXJlIGlmIG5lY2Vzc2FyeVxuXG5cdFx0XHRcdHRleHR1cmVzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCBfY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdC8vIEdlbmVyYXRlIG1pcG1hcCBpZiB3ZSdyZSB1c2luZyBhbnkga2luZCBvZiBtaXBtYXAgZmlsdGVyaW5nXG5cblx0XHRcdFx0dGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCBfY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdGlmICggc2NlbmUuaXNTY2VuZSA9PT0gdHJ1ZSApIHNjZW5lLm9uQWZ0ZXJSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdC8vIF9nbC5maW5pc2goKTtcblxuXHRcdFx0YmluZGluZ1N0YXRlcy5yZXNldERlZmF1bHRTdGF0ZSgpO1xuXHRcdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gLSAxO1xuXHRcdFx0X2N1cnJlbnRDYW1lcmEgPSBudWxsO1xuXG5cdFx0XHRyZW5kZXJTdGF0ZVN0YWNrLnBvcCgpO1xuXG5cdFx0XHRpZiAoIHJlbmRlclN0YXRlU3RhY2subGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZVN0YWNrWyByZW5kZXJTdGF0ZVN0YWNrLmxlbmd0aCAtIDEgXTtcblxuXHRcdFx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgKSBjbGlwcGluZy5zZXRHbG9iYWxTdGF0ZSggX3RoaXMuY2xpcHBpbmdQbGFuZXMsIGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5jYW1lcmEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJlbmRlckxpc3RTdGFjay5wb3AoKTtcblxuXHRcdFx0aWYgKCByZW5kZXJMaXN0U3RhY2subGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IHJlbmRlckxpc3RTdGFja1sgcmVuZGVyTGlzdFN0YWNrLmxlbmd0aCAtIDEgXTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBwcm9qZWN0T2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRjb25zdCB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICk7XG5cblx0XHRcdGlmICggdmlzaWJsZSApIHtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5pc0dyb3VwICkge1xuXG5cdFx0XHRcdFx0Z3JvdXBPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMT0QgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG9iamVjdC5hdXRvVXBkYXRlID09PSB0cnVlICkgb2JqZWN0LnVwZGF0ZSggY2FtZXJhICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTGlnaHQgKSB7XG5cblx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoU2hhZG93KCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNTcHJpdGUgKSB7XG5cblx0XHRcdFx0XHRpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c1Nwcml0ZSggb2JqZWN0ICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRcdFx0X3ZlY3RvcjQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QubWF0cml4V29ybGQgKVxuXHRcdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7XG5cdFx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yNC56LCBudWxsICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc0xpbmUgfHwgb2JqZWN0LmlzUG9pbnRzICkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIG9iamVjdC5mcnVzdHVtQ3VsbGVkIHx8IF9mcnVzdHVtLmludGVyc2VjdHNPYmplY3QoIG9iamVjdCApICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNvcnRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggb2JqZWN0LmJvdW5kaW5nU3BoZXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIG9iamVjdC5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIG9iamVjdC5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblx0XHRcdFx0XHRcdFx0XHRfdmVjdG9yNC5jb3B5KCBvYmplY3QuYm91bmRpbmdTcGhlcmUuY2VudGVyICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblx0XHRcdFx0XHRcdFx0XHRfdmVjdG9yNC5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jZW50ZXIgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0X3ZlY3RvcjRcblx0XHRcdFx0XHRcdFx0XHQuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKVxuXHRcdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBncm91cE1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yNC56LCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjQueiwgbnVsbCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHByb2plY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcmVuZGVyU2NlbmUoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhLCB2aWV3cG9ydCApIHtcblxuXHRcdFx0Y29uc3Qgb3BhcXVlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0Lm9wYXF1ZTtcblx0XHRcdGNvbnN0IHRyYW5zbWlzc2l2ZU9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC50cmFuc21pc3NpdmU7XG5cdFx0XHRjb25zdCB0cmFuc3BhcmVudE9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC50cmFuc3BhcmVudDtcblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzVmlldyggY2FtZXJhICk7XG5cblx0XHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIGNsaXBwaW5nLnNldEdsb2JhbFN0YXRlKCBfdGhpcy5jbGlwcGluZ1BsYW5lcywgY2FtZXJhICk7XG5cblx0XHRcdGlmICggdmlld3BvcnQgKSBzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCB2aWV3cG9ydCApICk7XG5cblx0XHRcdGlmICggb3BhcXVlT2JqZWN0cy5sZW5ndGggPiAwICkgcmVuZGVyT2JqZWN0cyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXHRcdFx0aWYgKCB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJPYmplY3RzKCB0cmFuc21pc3NpdmVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0XHRpZiAoIHRyYW5zcGFyZW50T2JqZWN0cy5sZW5ndGggPiAwICkgcmVuZGVyT2JqZWN0cyggdHJhbnNwYXJlbnRPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdC8vIEVuc3VyZSBkZXB0aCBidWZmZXIgd3JpdGluZyBpcyBlbmFibGVkIHNvIGl0IGNhbiBiZSBjbGVhcmVkIG9uIG5leHQgcmVuZGVyXG5cblx0XHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApO1xuXHRcdFx0c3RhdGUuYnVmZmVycy5kZXB0aC5zZXRNYXNrKCB0cnVlICk7XG5cdFx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldE1hc2soIHRydWUgKTtcblxuXHRcdFx0c3RhdGUuc2V0UG9seWdvbk9mZnNldCggZmFsc2UgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlbmRlclRyYW5zbWlzc2lvblBhc3MoIG9wYXF1ZU9iamVjdHMsIHRyYW5zbWlzc2l2ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRcdGNvbnN0IG92ZXJyaWRlTWF0ZXJpYWwgPSBzY2VuZS5pc1NjZW5lID09PSB0cnVlID8gc2NlbmUub3ZlcnJpZGVNYXRlcmlhbCA6IG51bGw7XG5cblx0XHRcdGlmICggb3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUudHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0WyBjYW1lcmEuaWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS50cmFuc21pc3Npb25SZW5kZXJUYXJnZXRbIGNhbWVyYS5pZCBdID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCAxLCAxLCB7XG5cdFx0XHRcdFx0Z2VuZXJhdGVNaXBtYXBzOiB0cnVlLFxuXHRcdFx0XHRcdHR5cGU6ICggZXh0ZW5zaW9ucy5oYXMoICdFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5oYXMoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApICkgPyBIYWxmRmxvYXRUeXBlIDogVW5zaWduZWRCeXRlVHlwZSxcblx0XHRcdFx0XHRtaW5GaWx0ZXI6IExpbmVhck1pcG1hcExpbmVhckZpbHRlcixcblx0XHRcdFx0XHRzYW1wbGVzOiA0LFxuXHRcdFx0XHRcdHN0ZW5jaWxCdWZmZXI6IHN0ZW5jaWwsXG5cdFx0XHRcdFx0cmVzb2x2ZURlcHRoQnVmZmVyOiBmYWxzZSxcblx0XHRcdFx0XHRyZXNvbHZlU3RlbmNpbEJ1ZmZlcjogZmFsc2UsXG5cdFx0XHRcdFx0Y29sb3JTcGFjZTogQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlLFxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gZGVidWdcblxuXHRcdFx0XHQvKlxuXHRcdFx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBQbGFuZUdlb21ldHJ5KCk7XG5cdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IG1hcDogX3RyYW5zbWlzc2lvblJlbmRlclRhcmdldC50ZXh0dXJlIH0gKTtcblxuXHRcdFx0XHRjb25zdCBtZXNoID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHRcdFx0XHRzY2VuZS5hZGQoIG1lc2ggKTtcblx0XHRcdFx0Ki9cblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUudHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0WyBjYW1lcmEuaWQgXTtcblxuXHRcdFx0Y29uc3QgYWN0aXZlVmlld3BvcnQgPSBjYW1lcmEudmlld3BvcnQgfHwgX2N1cnJlbnRWaWV3cG9ydDtcblx0XHRcdHRyYW5zbWlzc2lvblJlbmRlclRhcmdldC5zZXRTaXplKCBhY3RpdmVWaWV3cG9ydC56LCBhY3RpdmVWaWV3cG9ydC53ICk7XG5cblx0XHRcdC8vXG5cblx0XHRcdGNvbnN0IGN1cnJlbnRSZW5kZXJUYXJnZXQgPSBfdGhpcy5nZXRSZW5kZXJUYXJnZXQoKTtcblx0XHRcdF90aGlzLnNldFJlbmRlclRhcmdldCggdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdF90aGlzLmdldENsZWFyQ29sb3IoIF9jdXJyZW50Q2xlYXJDb2xvciApO1xuXHRcdFx0X2N1cnJlbnRDbGVhckFscGhhID0gX3RoaXMuZ2V0Q2xlYXJBbHBoYSgpO1xuXHRcdFx0aWYgKCBfY3VycmVudENsZWFyQWxwaGEgPCAxICkgX3RoaXMuc2V0Q2xlYXJDb2xvciggMHhmZmZmZmYsIDAuNSApO1xuXG5cdFx0XHRpZiAoIF9yZW5kZXJCYWNrZ3JvdW5kICkge1xuXG5cdFx0XHRcdGJhY2tncm91bmQucmVuZGVyKCBzY2VuZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF90aGlzLmNsZWFyKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgdGhlIGZlYXR1cmVzIHdoaWNoIGNhbiBhZmZlY3QgdGhlIGZyYWcgY29sb3IgZm9yIG9wYXF1ZSBvYmplY3RzIHBhc3MuXG5cdFx0XHQvLyBPdGhlcndpc2UgdGhleSBhcmUgYXBwbGllZCB0d2ljZSBpbiBvcGFxdWUgb2JqZWN0cyBwYXNzIGFuZCB0cmFuc21pc3Npb24gb2JqZWN0cyBwYXNzLlxuXHRcdFx0Y29uc3QgY3VycmVudFRvbmVNYXBwaW5nID0gX3RoaXMudG9uZU1hcHBpbmc7XG5cdFx0XHRfdGhpcy50b25lTWFwcGluZyA9IE5vVG9uZU1hcHBpbmc7XG5cblx0XHRcdC8vIFJlbW92ZSB2aWV3cG9ydCBmcm9tIGNhbWVyYSB0byBhdm9pZCBuZXN0ZWQgcmVuZGVyIGNhbGxzIHJlc2V0dGluZyB2aWV3cG9ydCB0byBpdCAoZS5nIFJlZmxlY3RvcikuXG5cdFx0XHQvLyBUcmFuc21pc3Npb24gcmVuZGVyIHBhc3MgcmVxdWlyZXMgdmlld3BvcnQgdG8gbWF0Y2ggdGhlIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldC5cblx0XHRcdGNvbnN0IGN1cnJlbnRDYW1lcmFWaWV3cG9ydCA9IGNhbWVyYS52aWV3cG9ydDtcblx0XHRcdGlmICggY2FtZXJhLnZpZXdwb3J0ICE9PSB1bmRlZmluZWQgKSBjYW1lcmEudmlld3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0c1ZpZXcoIGNhbWVyYSApO1xuXG5cdFx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgKSBjbGlwcGluZy5zZXRHbG9iYWxTdGF0ZSggX3RoaXMuY2xpcHBpbmdQbGFuZXMsIGNhbWVyYSApO1xuXG5cdFx0XHRyZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdHRleHR1cmVzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTtcblx0XHRcdHRleHR1cmVzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCggdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICkgPT09IGZhbHNlICkgeyAvLyBzZWUgIzI4MTMxXG5cblx0XHRcdFx0bGV0IHJlbmRlclRhcmdldE5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdHJhbnNtaXNzaXZlT2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgcmVuZGVySXRlbSA9IHRyYW5zbWlzc2l2ZU9iamVjdHNbIGkgXTtcblxuXHRcdFx0XHRcdGNvbnN0IG9iamVjdCA9IHJlbmRlckl0ZW0ub2JqZWN0O1xuXHRcdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTtcblx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IHJlbmRlckl0ZW0ubWF0ZXJpYWw7XG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXAgPSByZW5kZXJJdGVtLmdyb3VwO1xuXG5cdFx0XHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlICYmIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBjdXJyZW50U2lkZSA9IG1hdGVyaWFsLnNpZGU7XG5cblx0XHRcdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBCYWNrU2lkZTtcblx0XHRcdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0cmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwuc2lkZSA9IGN1cnJlbnRTaWRlO1xuXHRcdFx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRyZW5kZXJUYXJnZXROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0TmVlZHNVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRcdFx0dGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0X3RoaXMuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdF90aGlzLnNldENsZWFyQ29sb3IoIF9jdXJyZW50Q2xlYXJDb2xvciwgX2N1cnJlbnRDbGVhckFscGhhICk7XG5cblx0XHRcdGlmICggY3VycmVudENhbWVyYVZpZXdwb3J0ICE9PSB1bmRlZmluZWQgKSBjYW1lcmEudmlld3BvcnQgPSBjdXJyZW50Q2FtZXJhVmlld3BvcnQ7XG5cblx0XHRcdF90aGlzLnRvbmVNYXBwaW5nID0gY3VycmVudFRvbmVNYXBwaW5nO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0cyggcmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdFx0Y29uc3Qgb3ZlcnJpZGVNYXRlcmlhbCA9IHNjZW5lLmlzU2NlbmUgPT09IHRydWUgPyBzY2VuZS5vdmVycmlkZU1hdGVyaWFsIDogbnVsbDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcmVuZGVyTGlzdC5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHJlbmRlckl0ZW0gPSByZW5kZXJMaXN0WyBpIF07XG5cblx0XHRcdFx0Y29uc3Qgb2JqZWN0ID0gcmVuZGVySXRlbS5vYmplY3Q7XG5cdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTtcblx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwgPSBvdmVycmlkZU1hdGVyaWFsID09PSBudWxsID8gcmVuZGVySXRlbS5tYXRlcmlhbCA6IG92ZXJyaWRlTWF0ZXJpYWw7XG5cdFx0XHRcdGNvbnN0IGdyb3VwID0gcmVuZGVySXRlbS5ncm91cDtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICkge1xuXG5cdFx0XHRvYmplY3Qub25CZWZvcmVSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRvYmplY3Qubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICYmIG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUgJiYgbWF0ZXJpYWwuZm9yY2VTaW5nbGVQYXNzID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5zaWRlID0gQmFja1NpZGU7XG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0X3RoaXMucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIHNjZW5lLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXAgKTtcblxuXHRcdFx0XHRtYXRlcmlhbC5zaWRlID0gRnJvbnRTaWRlO1xuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRcdF90aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHRcdFx0bWF0ZXJpYWwuc2lkZSA9IERvdWJsZVNpZGU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X3RoaXMucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIHNjZW5lLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRvYmplY3Qub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldFByb2dyYW0oIG1hdGVyaWFsLCBzY2VuZSwgb2JqZWN0ICkge1xuXG5cdFx0XHRpZiAoIHNjZW5lLmlzU2NlbmUgIT09IHRydWUgKSBzY2VuZSA9IF9lbXB0eVNjZW5lOyAvLyBzY2VuZSBjb3VsZCBiZSBhIE1lc2gsIExpbmUsIFBvaW50cywgLi4uXG5cblx0XHRcdGNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXG5cdFx0XHRjb25zdCBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xuXHRcdFx0Y29uc3Qgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTtcblxuXHRcdFx0Y29uc3QgbGlnaHRzU3RhdGVWZXJzaW9uID0gbGlnaHRzLnN0YXRlLnZlcnNpb247XG5cblx0XHRcdGNvbnN0IHBhcmFtZXRlcnMgPSBwcm9ncmFtQ2FjaGUuZ2V0UGFyYW1ldGVycyggbWF0ZXJpYWwsIGxpZ2h0cy5zdGF0ZSwgc2hhZG93c0FycmF5LCBzY2VuZSwgb2JqZWN0ICk7XG5cdFx0XHRjb25zdCBwcm9ncmFtQ2FjaGVLZXkgPSBwcm9ncmFtQ2FjaGUuZ2V0UHJvZ3JhbUNhY2hlS2V5KCBwYXJhbWV0ZXJzICk7XG5cblx0XHRcdGxldCBwcm9ncmFtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtcztcblxuXHRcdFx0Ly8gYWx3YXlzIHVwZGF0ZSBlbnZpcm9ubWVudCBhbmQgZm9nIC0gY2hhbmdpbmcgdGhlc2UgdHJpZ2dlciBhbiBnZXRQcm9ncmFtIGNhbGwsIGJ1dCBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHByb2dyYW0gZG9lc24ndCBjaGFuZ2VcblxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmVudmlyb25tZW50ID0gbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IHNjZW5lLmVudmlyb25tZW50IDogbnVsbDtcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5mb2cgPSBzY2VuZS5mb2c7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuZW52TWFwID0gKCBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID8gY3ViZXV2bWFwcyA6IGN1YmVtYXBzICkuZ2V0KCBtYXRlcmlhbC5lbnZNYXAgfHwgbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudmlyb25tZW50ICk7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuZW52TWFwUm90YXRpb24gPSAoIG1hdGVyaWFsUHJvcGVydGllcy5lbnZpcm9ubWVudCAhPT0gbnVsbCAmJiBtYXRlcmlhbC5lbnZNYXAgPT09IG51bGwgKSA/IHNjZW5lLmVudmlyb25tZW50Um90YXRpb24gOiBtYXRlcmlhbC5lbnZNYXBSb3RhdGlvbjtcblxuXHRcdFx0aWYgKCBwcm9ncmFtcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIG5ldyBtYXRlcmlhbFxuXG5cdFx0XHRcdG1hdGVyaWFsLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTtcblxuXHRcdFx0XHRwcm9ncmFtcyA9IG5ldyBNYXAoKTtcblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW1zID0gcHJvZ3JhbXM7XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IHByb2dyYW0gPSBwcm9ncmFtcy5nZXQoIHByb2dyYW1DYWNoZUtleSApO1xuXG5cdFx0XHRpZiAoIHByb2dyYW0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBlYXJseSBvdXQgaWYgcHJvZ3JhbSBhbmQgbGlnaHQgc3RhdGUgaXMgaWRlbnRpY2FsXG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW0gPT09IHByb2dyYW0gJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiA9PT0gbGlnaHRzU3RhdGVWZXJzaW9uICkge1xuXG5cdFx0XHRcdFx0dXBkYXRlQ29tbW9uTWF0ZXJpYWxQcm9wZXJ0aWVzKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHByb2dyYW07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHBhcmFtZXRlcnMudW5pZm9ybXMgPSBwcm9ncmFtQ2FjaGUuZ2V0VW5pZm9ybXMoIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0bWF0ZXJpYWwub25CZWZvcmVDb21waWxlKCBwYXJhbWV0ZXJzLCBfdGhpcyApO1xuXG5cdFx0XHRcdHByb2dyYW0gPSBwcm9ncmFtQ2FjaGUuYWNxdWlyZVByb2dyYW0oIHBhcmFtZXRlcnMsIHByb2dyYW1DYWNoZUtleSApO1xuXHRcdFx0XHRwcm9ncmFtcy5zZXQoIHByb2dyYW1DYWNoZUtleSwgcHJvZ3JhbSApO1xuXG5cdFx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcyA9IHBhcmFtZXRlcnMudW5pZm9ybXM7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXM7XG5cblx0XHRcdGlmICggKCAhIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgISBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsICkgfHwgbWF0ZXJpYWwuY2xpcHBpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuY2xpcHBpbmdQbGFuZXMgPSBjbGlwcGluZy51bmlmb3JtO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZUNvbW1vbk1hdGVyaWFsUHJvcGVydGllcyggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKTtcblxuXHRcdFx0Ly8gc3RvcmUgdGhlIGxpZ2h0IHNldHVwIGl0IHdhcyBjcmVhdGVkIGZvclxuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgPSBtYXRlcmlhbE5lZWRzTGlnaHRzKCBtYXRlcmlhbCApO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiA9IGxpZ2h0c1N0YXRlVmVyc2lvbjtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgKSB7XG5cblx0XHRcdFx0Ly8gd2lyZSB1cCB0aGUgbWF0ZXJpYWwgdG8gdGhpcyByZW5kZXJlcidzIGxpZ2h0aW5nIHN0YXRlXG5cblx0XHRcdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IudmFsdWUgPSBsaWdodHMuc3RhdGUuYW1iaWVudDtcblx0XHRcdFx0dW5pZm9ybXMubGlnaHRQcm9iZS52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wcm9iZTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWw7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93O1xuXHRcdFx0XHR1bmlmb3Jtcy5zcG90TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3Q7XG5cdFx0XHRcdHVuaWZvcm1zLnNwb3RMaWdodFNoYWRvd3MudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdFNoYWRvdztcblx0XHRcdFx0dW5pZm9ybXMucmVjdEFyZWFMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUucmVjdEFyZWE7XG5cdFx0XHRcdHVuaWZvcm1zLmx0Y18xLnZhbHVlID0gbGlnaHRzLnN0YXRlLnJlY3RBcmVhTFRDMTtcblx0XHRcdFx0dW5pZm9ybXMubHRjXzIudmFsdWUgPSBsaWdodHMuc3RhdGUucmVjdEFyZWFMVEMyO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludDtcblx0XHRcdFx0dW5pZm9ybXMucG9pbnRMaWdodFNoYWRvd3MudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3c7XG5cdFx0XHRcdHVuaWZvcm1zLmhlbWlzcGhlcmVMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuaGVtaTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcDtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg7XG5cdFx0XHRcdHVuaWZvcm1zLnNwb3RTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdFNoYWRvd01hcDtcblx0XHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3RMaWdodE1hdHJpeDtcblx0XHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3RMaWdodE1hcDtcblx0XHRcdFx0dW5pZm9ybXMucG9pbnRTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3dNYXA7XG5cdFx0XHRcdHVuaWZvcm1zLnBvaW50U2hhZG93TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50U2hhZG93TWF0cml4O1xuXHRcdFx0XHQvLyBUT0RPIChhYmVsbmF0aW9uKTogYWRkIGFyZWEgbGlnaHRzIHNoYWRvdyBpbmZvIHRvIHVuaWZvcm1zXG5cblx0XHRcdH1cblxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmN1cnJlbnRQcm9ncmFtID0gcHJvZ3JhbTtcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QgPSBudWxsO1xuXG5cdFx0XHRyZXR1cm4gcHJvZ3JhbTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldFVuaWZvcm1MaXN0KCBtYXRlcmlhbFByb3BlcnRpZXMgKSB7XG5cblx0XHRcdGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBwcm9nVW5pZm9ybXMgPSBtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW0uZ2V0VW5pZm9ybXMoKTtcblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCA9IFdlYkdMVW5pZm9ybXMuc2VxV2l0aFZhbHVlKCBwcm9nVW5pZm9ybXMuc2VxLCBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdDtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHVwZGF0ZUNvbW1vbk1hdGVyaWFsUHJvcGVydGllcyggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRcdGNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMub3V0cHV0Q29sb3JTcGFjZSA9IHBhcmFtZXRlcnMub3V0cHV0Q29sb3JTcGFjZTtcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5iYXRjaGluZyA9IHBhcmFtZXRlcnMuYmF0Y2hpbmc7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuYmF0Y2hpbmdDb2xvciA9IHBhcmFtZXRlcnMuYmF0Y2hpbmdDb2xvcjtcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nID0gcGFyYW1ldGVycy5pbnN0YW5jaW5nO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmluc3RhbmNpbmdDb2xvciA9IHBhcmFtZXRlcnMuaW5zdGFuY2luZ0NvbG9yO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmluc3RhbmNpbmdNb3JwaCA9IHBhcmFtZXRlcnMuaW5zdGFuY2luZ01vcnBoO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnNraW5uaW5nID0gcGFyYW1ldGVycy5za2lubmluZztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaFRhcmdldHMgPSBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaE5vcm1hbHMgPSBwYXJhbWV0ZXJzLm1vcnBoTm9ybWFscztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaENvbG9ycyA9IHBhcmFtZXRlcnMubW9ycGhDb2xvcnM7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubW9ycGhUYXJnZXRzQ291bnQgPSBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0c0NvdW50O1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzID0gcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5udW1JbnRlcnNlY3Rpb24gPSBwYXJhbWV0ZXJzLm51bUNsaXBJbnRlcnNlY3Rpb247XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMudmVydGV4QWxwaGFzID0gcGFyYW1ldGVycy52ZXJ0ZXhBbHBoYXM7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMudmVydGV4VGFuZ2VudHMgPSBwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnRvbmVNYXBwaW5nID0gcGFyYW1ldGVycy50b25lTWFwcGluZztcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNldFByb2dyYW0oIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0ICkge1xuXG5cdFx0XHRpZiAoIHNjZW5lLmlzU2NlbmUgIT09IHRydWUgKSBzY2VuZSA9IF9lbXB0eVNjZW5lOyAvLyBzY2VuZSBjb3VsZCBiZSBhIE1lc2gsIExpbmUsIFBvaW50cywgLi4uXG5cblx0XHRcdHRleHR1cmVzLnJlc2V0VGV4dHVyZVVuaXRzKCk7XG5cblx0XHRcdGNvbnN0IGZvZyA9IHNjZW5lLmZvZztcblx0XHRcdGNvbnN0IGVudmlyb25tZW50ID0gbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IHNjZW5lLmVudmlyb25tZW50IDogbnVsbDtcblx0XHRcdGNvbnN0IGNvbG9yU3BhY2UgPSAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ID09PSBudWxsICkgPyBfdGhpcy5vdXRwdXRDb2xvclNwYWNlIDogKCBfY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlID8gX2N1cnJlbnRSZW5kZXJUYXJnZXQudGV4dHVyZS5jb2xvclNwYWNlIDogTGluZWFyU1JHQkNvbG9yU3BhY2UgKTtcblx0XHRcdGNvbnN0IGVudk1hcCA9ICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IGN1YmV1dm1hcHMgOiBjdWJlbWFwcyApLmdldCggbWF0ZXJpYWwuZW52TWFwIHx8IGVudmlyb25tZW50ICk7XG5cdFx0XHRjb25zdCB2ZXJ0ZXhBbHBoYXMgPSBtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPT09IHRydWUgJiYgISEgZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvciAmJiBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLml0ZW1TaXplID09PSA0O1xuXHRcdFx0Y29uc3QgdmVydGV4VGFuZ2VudHMgPSAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQgJiYgKCAhISBtYXRlcmlhbC5ub3JtYWxNYXAgfHwgbWF0ZXJpYWwuYW5pc290cm9weSA+IDAgKTtcblx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0cyA9ICEhIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdGNvbnN0IG1vcnBoTm9ybWFscyA9ICEhIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWw7XG5cdFx0XHRjb25zdCBtb3JwaENvbG9ycyA9ICEhIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5jb2xvcjtcblxuXHRcdFx0bGV0IHRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZztcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC50b25lTWFwcGVkICkge1xuXG5cdFx0XHRcdGlmICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgX2N1cnJlbnRSZW5kZXJUYXJnZXQuaXNYUlJlbmRlclRhcmdldCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHRvbmVNYXBwaW5nID0gX3RoaXMudG9uZU1hcHBpbmc7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yO1xuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzQ291bnQgPSAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSA/IG1vcnBoQXR0cmlidXRlLmxlbmd0aCA6IDA7XG5cblx0XHRcdGNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXHRcdFx0Y29uc3QgbGlnaHRzID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLmxpZ2h0cztcblxuXHRcdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGlmICggX2xvY2FsQ2xpcHBpbmdFbmFibGVkID09PSB0cnVlIHx8IGNhbWVyYSAhPT0gX2N1cnJlbnRDYW1lcmEgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB1c2VDYWNoZSA9XG5cdFx0XHRcdFx0XHRjYW1lcmEgPT09IF9jdXJyZW50Q2FtZXJhICYmXG5cdFx0XHRcdFx0XHRtYXRlcmlhbC5pZCA9PT0gX2N1cnJlbnRNYXRlcmlhbElkO1xuXG5cdFx0XHRcdFx0Ly8gd2UgbWlnaHQgd2FudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gd2l0aCBzb21lIENsaXBwaW5nR3JvdXBcblx0XHRcdFx0XHQvLyBvYmplY3QgaW5zdGVhZCBvZiB0aGUgbWF0ZXJpYWwsIG9uY2UgaXQgYmVjb21lcyBmZWFzaWJsZVxuXHRcdFx0XHRcdC8vICgjODQ2NSwgIzgzNzkpXG5cdFx0XHRcdFx0Y2xpcHBpbmcuc2V0U3RhdGUoIG1hdGVyaWFsLCBjYW1lcmEsIHVzZUNhY2hlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdGxldCBuZWVkc1Byb2dyYW1DaGFuZ2UgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC52ZXJzaW9uID09PSBtYXRlcmlhbFByb3BlcnRpZXMuX192ZXJzaW9uICkge1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzICYmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiAhPT0gbGlnaHRzLnN0YXRlLnZlcnNpb24gKSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm91dHB1dENvbG9yU3BhY2UgIT09IGNvbG9yU3BhY2UgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5iYXRjaGluZyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoICEgb2JqZWN0LmlzQmF0Y2hlZE1lc2ggJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmJhdGNoaW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNCYXRjaGVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuYmF0Y2hpbmdDb2xvciA9PT0gdHJ1ZSAmJiBvYmplY3QuY29sb3JUZXh0dXJlID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNCYXRjaGVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuYmF0Y2hpbmdDb2xvciA9PT0gZmFsc2UgJiYgb2JqZWN0LmNvbG9yVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoICEgb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLnNraW5uaW5nID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggISBvYmplY3QuaXNTa2lubmVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuc2tpbm5pbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmluc3RhbmNpbmdDb2xvciA9PT0gdHJ1ZSAmJiBvYmplY3QuaW5zdGFuY2VDb2xvciA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZ0NvbG9yID09PSBmYWxzZSAmJiBvYmplY3QuaW5zdGFuY2VDb2xvciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZ01vcnBoID09PSB0cnVlICYmIG9iamVjdC5tb3JwaFRleHR1cmUgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmluc3RhbmNpbmdNb3JwaCA9PT0gZmFsc2UgJiYgb2JqZWN0Lm1vcnBoVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudk1hcCAhPT0gZW52TWFwICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5mb2cgPT09IHRydWUgJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmZvZyAhPT0gZm9nICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgIT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHRcdCggbWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzICE9PSBjbGlwcGluZy5udW1QbGFuZXMgfHxcblx0XHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uICE9PSBjbGlwcGluZy5udW1JbnRlcnNlY3Rpb24gKSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLnZlcnRleEFscGhhcyAhPT0gdmVydGV4QWxwaGFzICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudmVydGV4VGFuZ2VudHMgIT09IHZlcnRleFRhbmdlbnRzICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubW9ycGhUYXJnZXRzICE9PSBtb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaE5vcm1hbHMgIT09IG1vcnBoTm9ybWFscyApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoQ29sb3JzICE9PSBtb3JwaENvbG9ycyApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLnRvbmVNYXBwaW5nICE9PSB0b25lTWFwcGluZyApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoVGFyZ2V0c0NvdW50ICE9PSBtb3JwaFRhcmdldHNDb3VudCApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cdFx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5fX3ZlcnNpb24gPSBtYXRlcmlhbC52ZXJzaW9uO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdGxldCBwcm9ncmFtID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmN1cnJlbnRQcm9ncmFtO1xuXG5cdFx0XHRpZiAoIG5lZWRzUHJvZ3JhbUNoYW5nZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRwcm9ncmFtID0gZ2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgcmVmcmVzaFByb2dyYW0gPSBmYWxzZTtcblx0XHRcdGxldCByZWZyZXNoTWF0ZXJpYWwgPSBmYWxzZTtcblx0XHRcdGxldCByZWZyZXNoTGlnaHRzID0gZmFsc2U7XG5cblx0XHRcdGNvbnN0IHBfdW5pZm9ybXMgPSBwcm9ncmFtLmdldFVuaWZvcm1zKCksXG5cdFx0XHRcdG1fdW5pZm9ybXMgPSBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXM7XG5cblx0XHRcdGlmICggc3RhdGUudXNlUHJvZ3JhbSggcHJvZ3JhbS5wcm9ncmFtICkgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFByb2dyYW0gPSB0cnVlO1xuXHRcdFx0XHRyZWZyZXNoTWF0ZXJpYWwgPSB0cnVlO1xuXHRcdFx0XHRyZWZyZXNoTGlnaHRzID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlkICE9PSBfY3VycmVudE1hdGVyaWFsSWQgKSB7XG5cblx0XHRcdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gbWF0ZXJpYWwuaWQ7XG5cblx0XHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHJlZnJlc2hQcm9ncmFtIHx8IF9jdXJyZW50Q2FtZXJhICE9PSBjYW1lcmEgKSB7XG5cblx0XHRcdFx0Ly8gY29tbW9uIGNhbWVyYSB1bmlmb3Jtc1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3Byb2plY3Rpb25NYXRyaXgnLCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICd2aWV3TWF0cml4JywgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0XHRcdGNvbnN0IHVDYW1Qb3MgPSBwX3VuaWZvcm1zLm1hcC5jYW1lcmFQb3NpdGlvbjtcblxuXHRcdFx0XHRpZiAoIHVDYW1Qb3MgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHVDYW1Qb3Muc2V0VmFsdWUoIF9nbCwgX3ZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbG9nRGVwdGhCdWZGQycsXG5cdFx0XHRcdFx0XHQyLjAgLyAoIE1hdGgubG9nKCBjYW1lcmEuZmFyICsgMS4wICkgLyBNYXRoLkxOMiApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGNvbnNpZGVyIG1vdmluZyBpc09ydGhvZ3JhcGhpYyB0byBVbmlmb3JtTGliIGFuZCBXZWJHTE1hdGVyaWFscywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvcHVsbC8yNjQ2NyNpc3N1ZWNvbW1lbnQtMTY0NTE4NTA2N1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCB8fFxuXHRcdFx0XHRcdG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCB8fFxuXHRcdFx0XHRcdG1hdGVyaWFsLmlzTWVzaEJhc2ljTWF0ZXJpYWwgfHxcblx0XHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XG5cdFx0XHRcdFx0bWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2lzT3J0aG9ncmFwaGljJywgY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhID09PSB0cnVlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSApIHtcblxuXHRcdFx0XHRcdF9jdXJyZW50Q2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0XHRcdFx0Ly8gbGlnaHRpbmcgdW5pZm9ybXMgZGVwZW5kIG9uIHRoZSBjYW1lcmEgc28gZW5mb3JjZSBhbiB1cGRhdGVcblx0XHRcdFx0XHQvLyBub3csIGluIGNhc2UgdGhpcyBtYXRlcmlhbCBzdXBwb3J0cyBsaWdodHMgLSBvciBsYXRlciwgd2hlblxuXHRcdFx0XHRcdC8vIHRoZSBuZXh0IG1hdGVyaWFsIHRoYXQgZG9lcyBnZXRzIGFjdGl2YXRlZDpcblxuXHRcdFx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XHRcdC8vIHNldCB0byB0cnVlIG9uIG1hdGVyaWFsIGNoYW5nZVxuXHRcdFx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1x0XHQvLyByZW1haW5zIHNldCB1bnRpbCB1cGRhdGUgZG9uZVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBza2lubmluZyBhbmQgbW9ycGggdGFyZ2V0IHVuaWZvcm1zIG11c3QgYmUgc2V0IGV2ZW4gaWYgbWF0ZXJpYWwgZGlkbid0IGNoYW5nZVxuXHRcdFx0Ly8gYXV0by1zZXR0aW5nIG9mIHRleHR1cmUgdW5pdCBmb3IgYm9uZSBhbmQgbW9ycGggdGV4dHVyZSBtdXN0IGdvIGJlZm9yZSBvdGhlciB0ZXh0dXJlc1xuXHRcdFx0Ly8gb3RoZXJ3aXNlIHRleHR1cmVzIHVzZWQgZm9yIHNraW5uaW5nIGFuZCBtb3JwaGluZyBjYW4gdGFrZSBvdmVyIHRleHR1cmUgdW5pdHMgcmVzZXJ2ZWQgZm9yIG90aGVyIG1hdGVyaWFsIHRleHR1cmVzXG5cblx0XHRcdGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBvYmplY3QsICdiaW5kTWF0cml4JyApO1xuXHRcdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIG9iamVjdCwgJ2JpbmRNYXRyaXhJbnZlcnNlJyApO1xuXG5cdFx0XHRcdGNvbnN0IHNrZWxldG9uID0gb2JqZWN0LnNrZWxldG9uO1xuXG5cdFx0XHRcdGlmICggc2tlbGV0b24gKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNrZWxldG9uLmJvbmVUZXh0dXJlID09PSBudWxsICkgc2tlbGV0b24uY29tcHV0ZUJvbmVUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlLCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICkge1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmF0Y2hpbmdUZXh0dXJlJyApO1xuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdiYXRjaGluZ1RleHR1cmUnLCBvYmplY3QuX21hdHJpY2VzVGV4dHVyZSwgdGV4dHVyZXMgKTtcblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIG9iamVjdCwgJ2JhdGNoaW5nSWRUZXh0dXJlJyApO1xuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdiYXRjaGluZ0lkVGV4dHVyZScsIG9iamVjdC5faW5kaXJlY3RUZXh0dXJlLCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmF0Y2hpbmdDb2xvclRleHR1cmUnICk7XG5cdFx0XHRcdGlmICggb2JqZWN0Ll9jb2xvcnNUZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnYmF0Y2hpbmdDb2xvclRleHR1cmUnLCBvYmplY3QuX2NvbG9yc1RleHR1cmUsIHRleHR1cmVzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCB8fCBtb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQgfHwgKCBtb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRcdG1vcnBodGFyZ2V0cy51cGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIHByb2dyYW0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHJlZnJlc2hNYXRlcmlhbCB8fCBtYXRlcmlhbFByb3BlcnRpZXMucmVjZWl2ZVNoYWRvdyAhPT0gb2JqZWN0LnJlY2VpdmVTaGFkb3cgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnJlY2VpdmVTaGFkb3cgPSBvYmplY3QucmVjZWl2ZVNoYWRvdztcblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAncmVjZWl2ZVNoYWRvdycsIG9iamVjdC5yZWNlaXZlU2hhZG93ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzI0NDY3I2lzc3VlY29tbWVudC0xMjA5MDMxNTEyXG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoR291cmF1ZE1hdGVyaWFsICYmIG1hdGVyaWFsLmVudk1hcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRtX3VuaWZvcm1zLmVudk1hcC52YWx1ZSA9IGVudk1hcDtcblxuXHRcdFx0XHRtX3VuaWZvcm1zLmZsaXBFbnZNYXAudmFsdWUgPSAoIGVudk1hcC5pc0N1YmVUZXh0dXJlICYmIGVudk1hcC5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkgPyAtIDEgOiAxO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCAmJiBtYXRlcmlhbC5lbnZNYXAgPT09IG51bGwgJiYgc2NlbmUuZW52aXJvbm1lbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0bV91bmlmb3Jtcy5lbnZNYXBJbnRlbnNpdHkudmFsdWUgPSBzY2VuZS5lbnZpcm9ubWVudEludGVuc2l0eTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHJlZnJlc2hNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICd0b25lTWFwcGluZ0V4cG9zdXJlJywgX3RoaXMudG9uZU1hcHBpbmdFeHBvc3VyZSApO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzICkge1xuXG5cdFx0XHRcdFx0Ly8gdGhlIGN1cnJlbnQgbWF0ZXJpYWwgcmVxdWlyZXMgbGlnaHRpbmcgaW5mb1xuXG5cdFx0XHRcdFx0Ly8gbm90ZTogYWxsIGxpZ2h0aW5nIHVuaWZvcm1zIGFyZSBhbHdheXMgc2V0IGNvcnJlY3RseVxuXHRcdFx0XHRcdC8vIHRoZXkgc2ltcGx5IHJlZmVyZW5jZSB0aGUgcmVuZGVyZXIncyBzdGF0ZSBmb3IgdGhlaXJcblx0XHRcdFx0XHQvLyB2YWx1ZXNcblx0XHRcdFx0XHQvL1xuXHRcdFx0XHRcdC8vIHVzZSB0aGUgY3VycmVudCBtYXRlcmlhbCdzIC5uZWVkc1VwZGF0ZSBmbGFncyB0byBzZXRcblx0XHRcdFx0XHQvLyB0aGUgR0wgc3RhdGUgd2hlbiByZXF1aXJlZFxuXG5cdFx0XHRcdFx0bWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUoIG1fdW5pZm9ybXMsIHJlZnJlc2hMaWdodHMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gcmVmcmVzaCB1bmlmb3JtcyBjb21tb24gdG8gc2V2ZXJhbCBtYXRlcmlhbHNcblxuXHRcdFx0XHRpZiAoIGZvZyAmJiBtYXRlcmlhbC5mb2cgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRtYXRlcmlhbHMucmVmcmVzaEZvZ1VuaWZvcm1zKCBtX3VuaWZvcm1zLCBmb2cgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWF0ZXJpYWxzLnJlZnJlc2hNYXRlcmlhbFVuaWZvcm1zKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCwgX3BpeGVsUmF0aW8sIF9oZWlnaHQsIGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS50cmFuc21pc3Npb25SZW5kZXJUYXJnZXRbIGNhbWVyYS5pZCBdICk7XG5cblx0XHRcdFx0V2ViR0xVbmlmb3Jtcy51cGxvYWQoIF9nbCwgZ2V0VW5pZm9ybUxpc3QoIG1hdGVyaWFsUHJvcGVydGllcyApLCBtX3VuaWZvcm1zLCB0ZXh0dXJlcyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJiBtYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0V2ViR0xVbmlmb3Jtcy51cGxvYWQoIF9nbCwgZ2V0VW5pZm9ybUxpc3QoIG1hdGVyaWFsUHJvcGVydGllcyApLCBtX3VuaWZvcm1zLCB0ZXh0dXJlcyApO1xuXHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzU3ByaXRlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnY2VudGVyJywgb2JqZWN0LmNlbnRlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNvbW1vbiBtYXRyaWNlc1xuXG5cdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdtb2RlbFZpZXdNYXRyaXgnLCBvYmplY3QubW9kZWxWaWV3TWF0cml4ICk7XG5cdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdub3JtYWxNYXRyaXgnLCBvYmplY3Qubm9ybWFsTWF0cml4ICk7XG5cdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdtb2RlbE1hdHJpeCcsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHQvLyBVQk9zXG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCB8fCBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0XHRcdGNvbnN0IGdyb3VwcyA9IG1hdGVyaWFsLnVuaWZvcm1zR3JvdXBzO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcblxuXHRcdFx0XHRcdHVuaWZvcm1zR3JvdXBzLnVwZGF0ZSggZ3JvdXAsIHByb2dyYW0gKTtcblx0XHRcdFx0XHR1bmlmb3Jtc0dyb3Vwcy5iaW5kKCBncm91cCwgcHJvZ3JhbSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcHJvZ3JhbTtcblxuXHRcdH1cblxuXHRcdC8vIElmIHVuaWZvcm1zIGFyZSBtYXJrZWQgYXMgY2xlYW4sIHRoZXkgZG9uJ3QgbmVlZCB0byBiZSBsb2FkZWQgdG8gdGhlIEdQVS5cblxuXHRcdGZ1bmN0aW9uIG1hcmtVbmlmb3Jtc0xpZ2h0c05lZWRzVXBkYXRlKCB1bmlmb3JtcywgdmFsdWUgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFtYmllbnRMaWdodENvbG9yLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0XHR1bmlmb3Jtcy5saWdodFByb2JlLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0U2hhZG93cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdFx0dW5pZm9ybXMucG9pbnRMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHRcdHVuaWZvcm1zLnBvaW50TGlnaHRTaGFkb3dzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0XHR1bmlmb3Jtcy5zcG90TGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0XHR1bmlmb3Jtcy5zcG90TGlnaHRTaGFkb3dzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0XHR1bmlmb3Jtcy5yZWN0QXJlYUxpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdFx0dW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gbWF0ZXJpYWxOZWVkc0xpZ2h0cyggbWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJldHVybiBtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsIHx8IG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCB8fCBtYXRlcmlhbC5pc1NoYWRvd01hdGVyaWFsIHx8XG5cdFx0XHRcdCggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJiBtYXRlcmlhbC5saWdodHMgPT09IHRydWUgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZ2V0QWN0aXZlQ3ViZUZhY2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBfY3VycmVudEFjdGl2ZUN1YmVGYWNlO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gX2N1cnJlbnRSZW5kZXJUYXJnZXQ7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5zZXRSZW5kZXJUYXJnZXRUZXh0dXJlcyA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCBjb2xvclRleHR1cmUsIGRlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0cHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICkuX193ZWJnbFRleHR1cmUgPSBjb2xvclRleHR1cmU7XG5cdFx0XHRwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlID0gZGVwdGhUZXh0dXJlO1xuXG5cdFx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2hhc0V4dGVybmFsVGV4dHVyZXMgPSB0cnVlO1xuXG5cdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIgPSBkZXB0aFRleHR1cmUgPT09IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCAhIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19hdXRvQWxsb2NhdGVEZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0XHQvLyBUaGUgbXVsdGlzYW1wbGVfcmVuZGVyX3RvX3RleHR1cmUgZXh0ZW5zaW9uIGRvZXNuJ3Qgd29yayBwcm9wZXJseSBpZiB0aGVyZVxuXHRcdFx0XHQvLyBhcmUgbWlkZnJhbWUgZmx1c2hlcyBhbmQgYW4gZXh0ZXJuYWwgZGVwdGggYnVmZmVyLiBEaXNhYmxlIHVzZSBvZiB0aGUgZXh0ZW5zaW9uLlxuXHRcdFx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogUmVuZGVyLXRvLXRleHR1cmUgZXh0ZW5zaW9uIHdhcyBkaXNhYmxlZCBiZWNhdXNlIGFuIGV4dGVybmFsIHRleHR1cmUgd2FzIHByb3ZpZGVkJyApO1xuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX191c2VSZW5kZXJUb1RleHR1cmUgPSBmYWxzZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHR0aGlzLnNldFJlbmRlclRhcmdldEZyYW1lYnVmZmVyID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGRlZmF1bHRGcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gZGVmYXVsdEZyYW1lYnVmZmVyO1xuXHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3VzZURlZmF1bHRGcmFtZWJ1ZmZlciA9IGRlZmF1bHRGcmFtZWJ1ZmZlciA9PT0gdW5kZWZpbmVkO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuc2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGFjdGl2ZUN1YmVGYWNlID0gMCwgYWN0aXZlTWlwbWFwTGV2ZWwgPSAwICkge1xuXG5cdFx0XHRfY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblx0XHRcdF9jdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSBhY3RpdmVDdWJlRmFjZTtcblx0XHRcdF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgPSBhY3RpdmVNaXBtYXBMZXZlbDtcblxuXHRcdFx0bGV0IHVzZURlZmF1bHRGcmFtZWJ1ZmZlciA9IHRydWU7XG5cdFx0XHRsZXQgZnJhbWVidWZmZXIgPSBudWxsO1xuXHRcdFx0bGV0IGlzQ3ViZSA9IGZhbHNlO1xuXHRcdFx0bGV0IGlzUmVuZGVyVGFyZ2V0M0QgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX191c2VEZWZhdWx0RnJhbWVidWZmZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHRvIHJlYmluZCB0aGUgZnJhbWVidWZmZXIuXG5cdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIG51bGwgKTtcblx0XHRcdFx0XHR1c2VEZWZhdWx0RnJhbWVidWZmZXIgPSBmYWxzZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZXMuc2V0dXBSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19oYXNFeHRlcm5hbFRleHR1cmVzICkge1xuXG5cdFx0XHRcdFx0Ly8gQ29sb3IgYW5kIGRlcHRoIHRleHR1cmUgbXVzdCBiZSByZWJvdW5kIGluIG9yZGVyIGZvciB0aGUgc3dhcGNoYWluIHRvIHVwZGF0ZS5cblx0XHRcdFx0XHR0ZXh0dXJlcy5yZWJpbmRUZXh0dXJlcyggcmVuZGVyVGFyZ2V0LCBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSwgcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSB8fCB0ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCB0ZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdGlzUmVuZGVyVGFyZ2V0M0QgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBfX3dlYmdsRnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBfX3dlYmdsRnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0ZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlIF1bIGFjdGl2ZU1pcG1hcExldmVsIF07XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2UgXTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlzQ3ViZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggKCByZW5kZXJUYXJnZXQuc2FtcGxlcyA+IDAgKSAmJiB0ZXh0dXJlcy51c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlcjtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBfX3dlYmdsRnJhbWVidWZmZXIgKSApIHtcblxuXHRcdFx0XHRcdFx0ZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXJbIGFjdGl2ZU1pcG1hcExldmVsIF07XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlcjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2N1cnJlbnRWaWV3cG9ydC5jb3B5KCByZW5kZXJUYXJnZXQudmlld3BvcnQgKTtcblx0XHRcdFx0X2N1cnJlbnRTY2lzc29yLmNvcHkoIHJlbmRlclRhcmdldC5zY2lzc29yICk7XG5cdFx0XHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSByZW5kZXJUYXJnZXQuc2Npc3NvclRlc3Q7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBfdmlld3BvcnQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXHRcdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXHRcdFx0XHRfY3VycmVudFNjaXNzb3JUZXN0ID0gX3NjaXNzb3JUZXN0O1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGZyYW1lYnVmZmVyQm91bmQgPSBzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0aWYgKCBmcmFtZWJ1ZmZlckJvdW5kICYmIHVzZURlZmF1bHRGcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0XHRzdGF0ZS5kcmF3QnVmZmVycyggcmVuZGVyVGFyZ2V0LCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnZpZXdwb3J0KCBfY3VycmVudFZpZXdwb3J0ICk7XG5cdFx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IgKTtcblx0XHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KCBfY3VycmVudFNjaXNzb3JUZXN0ICk7XG5cblx0XHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBhY3RpdmVDdWJlRmFjZSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGlzUmVuZGVyVGFyZ2V0M0QgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTtcblx0XHRcdFx0Y29uc3QgbGF5ZXIgPSBhY3RpdmVDdWJlRmFjZSB8fCAwO1xuXHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgYWN0aXZlTWlwbWFwTGV2ZWwgfHwgMCwgbGF5ZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSAtIDE7IC8vIHJlc2V0IGN1cnJlbnQgbWF0ZXJpYWwgdG8gZW5zdXJlIGNvcnJlY3QgdW5pZm9ybSBiaW5kaW5nc1xuXG5cdFx0fTtcblxuXHRcdHRoaXMucmVhZFJlbmRlclRhcmdldFBpeGVscyA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBidWZmZXIsIGFjdGl2ZUN1YmVGYWNlSW5kZXggKSB7XG5cblx0XHRcdGlmICggISAoIHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQuJyApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IGZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtcblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgJiYgYWN0aXZlQ3ViZUZhY2VJbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlSW5kZXggXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGZyYW1lYnVmZmVyICkge1xuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cdFx0XHRcdFx0Y29uc3QgdGV4dHVyZUZvcm1hdCA9IHRleHR1cmUuZm9ybWF0O1xuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmVUeXBlID0gdGV4dHVyZS50eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCAhIGNhcGFiaWxpdGllcy50ZXh0dXJlRm9ybWF0UmVhZGFibGUoIHRleHR1cmVGb3JtYXQgKSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBSR0JBIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgZm9ybWF0LicgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggISBjYXBhYmlsaXRpZXMudGV4dHVyZVR5cGVSZWFkYWJsZSggdGV4dHVyZVR5cGUgKSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyB0aGUgZm9sbG93aW5nIGlmIHN0YXRlbWVudCBlbnN1cmVzIHZhbGlkIHJlYWQgcmVxdWVzdHMgKG5vIG91dC1vZi1ib3VuZHMgcGl4ZWxzLCBzZWUgIzg2MDQpXG5cblx0XHRcdFx0XHRpZiAoICggeCA+PSAwICYmIHggPD0gKCByZW5kZXJUYXJnZXQud2lkdGggLSB3aWR0aCApICkgJiYgKCB5ID49IDAgJiYgeSA8PSAoIHJlbmRlclRhcmdldC5oZWlnaHQgLSBoZWlnaHQgKSApICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wucmVhZFBpeGVscyggeCwgeSwgd2lkdGgsIGhlaWdodCwgdXRpbHMuY29udmVydCggdGV4dHVyZUZvcm1hdCApLCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlVHlwZSApLCBidWZmZXIgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGZpbmFsbHkge1xuXG5cdFx0XHRcdFx0Ly8gcmVzdG9yZSBmcmFtZWJ1ZmZlciBvZiBjdXJyZW50IHJlbmRlciB0YXJnZXQgaWYgbmVjZXNzYXJ5XG5cblx0XHRcdFx0XHRjb25zdCBmcmFtZWJ1ZmZlciA9ICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgIT09IG51bGwgKSA/IHByb3BlcnRpZXMuZ2V0KCBfY3VycmVudFJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlciA6IG51bGw7XG5cdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzQXN5bmMgPSBhc3luYyBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgYnVmZmVyLCBhY3RpdmVDdWJlRmFjZUluZGV4ICkge1xuXG5cdFx0XHRpZiAoICEgKCByZW5kZXJUYXJnZXQgJiYgcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCBmcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7XG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCAmJiBhY3RpdmVDdWJlRmFjZUluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2VJbmRleCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTtcblx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlRm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7XG5cdFx0XHRcdFx0Y29uc3QgdGV4dHVyZVR5cGUgPSB0ZXh0dXJlLnR5cGU7XG5cblx0XHRcdFx0XHRpZiAoICEgY2FwYWJpbGl0aWVzLnRleHR1cmVGb3JtYXRSZWFkYWJsZSggdGV4dHVyZUZvcm1hdCApICkge1xuXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYzogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBSR0JBIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgZm9ybWF0LicgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggISBjYXBhYmlsaXRpZXMudGV4dHVyZVR5cGVSZWFkYWJsZSggdGV4dHVyZVR5cGUgKSApIHtcblxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzQXN5bmM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gVW5zaWduZWRCeXRlVHlwZSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIHR5cGUuJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gdGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnQgZW5zdXJlcyB2YWxpZCByZWFkIHJlcXVlc3RzIChubyBvdXQtb2YtYm91bmRzIHBpeGVscywgc2VlICM4NjA0KVxuXHRcdFx0XHRcdGlmICggKCB4ID49IDAgJiYgeCA8PSAoIHJlbmRlclRhcmdldC53aWR0aCAtIHdpZHRoICkgKSAmJiAoIHkgPj0gMCAmJiB5IDw9ICggcmVuZGVyVGFyZ2V0LmhlaWdodCAtIGhlaWdodCApICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGdsQnVmZmVyID0gX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdFx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoIF9nbC5QSVhFTF9QQUNLX0JVRkZFUiwgZ2xCdWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC5idWZmZXJEYXRhKCBfZ2wuUElYRUxfUEFDS19CVUZGRVIsIGJ1ZmZlci5ieXRlTGVuZ3RoLCBfZ2wuU1RSRUFNX1JFQUQgKTtcblx0XHRcdFx0XHRcdF9nbC5yZWFkUGl4ZWxzKCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlRm9ybWF0ICksIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVUeXBlICksIDAgKTtcblx0XHRcdFx0XHRcdF9nbC5mbHVzaCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBjaGVjayBpZiB0aGUgY29tbWFuZHMgaGF2ZSBmaW5pc2hlZCBldmVyeSA4IG1zXG5cdFx0XHRcdFx0XHRjb25zdCBzeW5jID0gX2dsLmZlbmNlU3luYyggX2dsLlNZTkNfR1BVX0NPTU1BTkRTX0NPTVBMRVRFLCAwICk7XG5cdFx0XHRcdFx0XHRhd2FpdCBwcm9iZUFzeW5jKCBfZ2wsIHN5bmMsIDQgKTtcblxuXHRcdFx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdFx0XHRfZ2wuYmluZEJ1ZmZlciggX2dsLlBJWEVMX1BBQ0tfQlVGRkVSLCBnbEJ1ZmZlciApO1xuXHRcdFx0XHRcdFx0XHRfZ2wuZ2V0QnVmZmVyU3ViRGF0YSggX2dsLlBJWEVMX1BBQ0tfQlVGRkVSLCAwLCBidWZmZXIgKTtcblxuXHRcdFx0XHRcdFx0fSBmaW5hbGx5IHtcblxuXHRcdFx0XHRcdFx0XHRfZ2wuZGVsZXRlQnVmZmVyKCBnbEJ1ZmZlciApO1xuXHRcdFx0XHRcdFx0XHRfZ2wuZGVsZXRlU3luYyggc3luYyApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldHVybiBidWZmZXI7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBmaW5hbGx5IHtcblxuXHRcdFx0XHRcdC8vIHJlc3RvcmUgZnJhbWVidWZmZXIgb2YgY3VycmVudCByZW5kZXIgdGFyZ2V0IGlmIG5lY2Vzc2FyeVxuXG5cdFx0XHRcdFx0Y29uc3QgZnJhbWVidWZmZXIgPSAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsICkgPyBwcm9wZXJ0aWVzLmdldCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXIgOiBudWxsO1xuXHRcdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMuY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlID0gZnVuY3Rpb24gKCB0ZXh0dXJlLCBwb3NpdGlvbiA9IG51bGwsIGxldmVsID0gMCApIHtcblxuXHRcdFx0Ly8gc3VwcG9ydCBwcmV2aW91cyBzaWduYXR1cmUgd2l0aCBwb3NpdGlvbiBmaXJzdFxuXHRcdFx0aWYgKCB0ZXh0dXJlLmlzVGV4dHVyZSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHQvLyBAZGVwcmVjYXRlZCwgcjE2NVxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdXZWJHTFJlbmRlcmVyOiBjb3B5RnJhbWVidWZmZXJUb1RleHR1cmUgZnVuY3Rpb24gc2lnbmF0dXJlIGhhcyBjaGFuZ2VkLicgKTtcblxuXHRcdFx0XHRwb3NpdGlvbiA9IGFyZ3VtZW50c1sgMCBdIHx8IG51bGw7XG5cdFx0XHRcdHRleHR1cmUgPSBhcmd1bWVudHNbIDEgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBsZXZlbFNjYWxlID0gTWF0aC5wb3coIDIsIC0gbGV2ZWwgKTtcblx0XHRcdGNvbnN0IHdpZHRoID0gTWF0aC5mbG9vciggdGV4dHVyZS5pbWFnZS53aWR0aCAqIGxldmVsU2NhbGUgKTtcblx0XHRcdGNvbnN0IGhlaWdodCA9IE1hdGguZmxvb3IoIHRleHR1cmUuaW1hZ2UuaGVpZ2h0ICogbGV2ZWxTY2FsZSApO1xuXG5cdFx0XHRjb25zdCB4ID0gcG9zaXRpb24gIT09IG51bGwgPyBwb3NpdGlvbi54IDogMDtcblx0XHRcdGNvbnN0IHkgPSBwb3NpdGlvbiAhPT0gbnVsbCA/IHBvc2l0aW9uLnkgOiAwO1xuXG5cdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0X2dsLmNvcHlUZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWwsIDAsIDAsIHgsIHksIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuY29weVRleHR1cmVUb1RleHR1cmUgPSBmdW5jdGlvbiAoIHNyY1RleHR1cmUsIGRzdFRleHR1cmUsIHNyY1JlZ2lvbiA9IG51bGwsIGRzdFBvc2l0aW9uID0gbnVsbCwgbGV2ZWwgPSAwICkge1xuXG5cdFx0XHQvLyBzdXBwb3J0IHByZXZpb3VzIHNpZ25hdHVyZSB3aXRoIGRzdFBvc2l0aW9uIGZpcnN0XG5cdFx0XHRpZiAoIHNyY1RleHR1cmUuaXNUZXh0dXJlICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdC8vIEBkZXByZWNhdGVkLCByMTY1XG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1dlYkdMUmVuZGVyZXI6IGNvcHlUZXh0dXJlVG9UZXh0dXJlIGZ1bmN0aW9uIHNpZ25hdHVyZSBoYXMgY2hhbmdlZC4nICk7XG5cblx0XHRcdFx0ZHN0UG9zaXRpb24gPSBhcmd1bWVudHNbIDAgXSB8fCBudWxsO1xuXHRcdFx0XHRzcmNUZXh0dXJlID0gYXJndW1lbnRzWyAxIF07XG5cdFx0XHRcdGRzdFRleHR1cmUgPSBhcmd1bWVudHNbIDIgXTtcblx0XHRcdFx0bGV2ZWwgPSBhcmd1bWVudHNbIDMgXSB8fCAwO1xuXHRcdFx0XHRzcmNSZWdpb24gPSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCB3aWR0aCwgaGVpZ2h0LCBtaW5YLCBtaW5ZO1xuXHRcdFx0bGV0IGRzdFgsIGRzdFk7XG5cdFx0XHRpZiAoIHNyY1JlZ2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHR3aWR0aCA9IHNyY1JlZ2lvbi5tYXgueCAtIHNyY1JlZ2lvbi5taW4ueDtcblx0XHRcdFx0aGVpZ2h0ID0gc3JjUmVnaW9uLm1heC55IC0gc3JjUmVnaW9uLm1pbi55O1xuXHRcdFx0XHRtaW5YID0gc3JjUmVnaW9uLm1pbi54O1xuXHRcdFx0XHRtaW5ZID0gc3JjUmVnaW9uLm1pbi55O1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHdpZHRoID0gc3JjVGV4dHVyZS5pbWFnZS53aWR0aDtcblx0XHRcdFx0aGVpZ2h0ID0gc3JjVGV4dHVyZS5pbWFnZS5oZWlnaHQ7XG5cdFx0XHRcdG1pblggPSAwO1xuXHRcdFx0XHRtaW5ZID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGRzdFBvc2l0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGRzdFggPSBkc3RQb3NpdGlvbi54O1xuXHRcdFx0XHRkc3RZID0gZHN0UG9zaXRpb24ueTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRkc3RYID0gMDtcblx0XHRcdFx0ZHN0WSA9IDA7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCBkc3RUZXh0dXJlLmZvcm1hdCApO1xuXHRcdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS50eXBlICk7XG5cblx0XHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggZHN0VGV4dHVyZSwgMCApO1xuXG5cdFx0XHQvLyBBcyBhbm90aGVyIHRleHR1cmUgdXBsb2FkIG1heSBoYXZlIGNoYW5nZWQgcGl4ZWxTdG9yZWlcblx0XHRcdC8vIHBhcmFtZXRlcnMsIG1ha2Ugc3VyZSB0aGV5IGFyZSBjb3JyZWN0IGZvciB0aGUgZHN0VGV4dHVyZVxuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZHN0VGV4dHVyZS5mbGlwWSApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCBkc3RUZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19BTElHTk1FTlQsIGRzdFRleHR1cmUudW5wYWNrQWxpZ25tZW50ICk7XG5cblx0XHRcdGNvbnN0IGN1cnJlbnRVbnBhY2tSb3dMZW4gPSBfZ2wuZ2V0UGFyYW1ldGVyKCBfZ2wuVU5QQUNLX1JPV19MRU5HVEggKTtcblx0XHRcdGNvbnN0IGN1cnJlbnRVbnBhY2tJbWFnZUhlaWdodCA9IF9nbC5nZXRQYXJhbWV0ZXIoIF9nbC5VTlBBQ0tfSU1BR0VfSEVJR0hUICk7XG5cdFx0XHRjb25zdCBjdXJyZW50VW5wYWNrU2tpcFBpeGVscyA9IF9nbC5nZXRQYXJhbWV0ZXIoIF9nbC5VTlBBQ0tfU0tJUF9QSVhFTFMgKTtcblx0XHRcdGNvbnN0IGN1cnJlbnRVbnBhY2tTa2lwUm93cyA9IF9nbC5nZXRQYXJhbWV0ZXIoIF9nbC5VTlBBQ0tfU0tJUF9ST1dTICk7XG5cdFx0XHRjb25zdCBjdXJyZW50VW5wYWNrU2tpcEltYWdlcyA9IF9nbC5nZXRQYXJhbWV0ZXIoIF9nbC5VTlBBQ0tfU0tJUF9JTUFHRVMgKTtcblxuXHRcdFx0Y29uc3QgaW1hZ2UgPSBzcmNUZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgPyBzcmNUZXh0dXJlLm1pcG1hcHNbIGxldmVsIF0gOiBzcmNUZXh0dXJlLmltYWdlO1xuXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCwgaW1hZ2Uud2lkdGggKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19JTUFHRV9IRUlHSFQsIGltYWdlLmhlaWdodCApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUElYRUxTLCBtaW5YICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9ST1dTLCBtaW5ZICk7XG5cblx0XHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdF9nbC50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWwsIGRzdFgsIGRzdFksIHdpZHRoLCBoZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHNyY1RleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdF9nbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGxldmVsLCBkc3RYLCBkc3RZLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBnbEZvcm1hdCwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRfZ2wudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGxldmVsLCBkc3RYLCBkc3RZLCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCwgY3VycmVudFVucGFja1Jvd0xlbiApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0lNQUdFX0hFSUdIVCwgY3VycmVudFVucGFja0ltYWdlSGVpZ2h0ICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9QSVhFTFMsIGN1cnJlbnRVbnBhY2tTa2lwUGl4ZWxzICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9ST1dTLCBjdXJyZW50VW5wYWNrU2tpcFJvd3MgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19TS0lQX0lNQUdFUywgY3VycmVudFVucGFja1NraXBJbWFnZXMgKTtcblxuXHRcdFx0Ly8gR2VuZXJhdGUgbWlwbWFwcyBvbmx5IHdoZW4gY29weWluZyBsZXZlbCAwXG5cdFx0XHRpZiAoIGxldmVsID09PSAwICYmIGRzdFRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICkgX2dsLmdlbmVyYXRlTWlwbWFwKCBfZ2wuVEVYVFVSRV8yRCApO1xuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5jb3B5VGV4dHVyZVRvVGV4dHVyZTNEID0gZnVuY3Rpb24gKCBzcmNUZXh0dXJlLCBkc3RUZXh0dXJlLCBzcmNSZWdpb24gPSBudWxsLCBkc3RQb3NpdGlvbiA9IG51bGwsIGxldmVsID0gMCApIHtcblxuXHRcdFx0Ly8gc3VwcG9ydCBwcmV2aW91cyBzaWduYXR1cmUgd2l0aCBzb3VyY2UgYm94IGZpcnN0XG5cdFx0XHRpZiAoIHNyY1RleHR1cmUuaXNUZXh0dXJlICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdC8vIEBkZXByZWNhdGVkLCByMTY1XG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1dlYkdMUmVuZGVyZXI6IGNvcHlUZXh0dXJlVG9UZXh0dXJlM0QgZnVuY3Rpb24gc2lnbmF0dXJlIGhhcyBjaGFuZ2VkLicgKTtcblxuXHRcdFx0XHRzcmNSZWdpb24gPSBhcmd1bWVudHNbIDAgXSB8fCBudWxsO1xuXHRcdFx0XHRkc3RQb3NpdGlvbiA9IGFyZ3VtZW50c1sgMSBdIHx8IG51bGw7XG5cdFx0XHRcdHNyY1RleHR1cmUgPSBhcmd1bWVudHNbIDIgXTtcblx0XHRcdFx0ZHN0VGV4dHVyZSA9IGFyZ3VtZW50c1sgMyBdO1xuXHRcdFx0XHRsZXZlbCA9IGFyZ3VtZW50c1sgNCBdIHx8IDA7XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBtaW5YLCBtaW5ZLCBtaW5aO1xuXHRcdFx0bGV0IGRzdFgsIGRzdFksIGRzdFo7XG5cdFx0XHRjb25zdCBpbWFnZSA9IHNyY1RleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSA/IHNyY1RleHR1cmUubWlwbWFwc1sgbGV2ZWwgXSA6IHNyY1RleHR1cmUuaW1hZ2U7XG5cdFx0XHRpZiAoIHNyY1JlZ2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHR3aWR0aCA9IHNyY1JlZ2lvbi5tYXgueCAtIHNyY1JlZ2lvbi5taW4ueDtcblx0XHRcdFx0aGVpZ2h0ID0gc3JjUmVnaW9uLm1heC55IC0gc3JjUmVnaW9uLm1pbi55O1xuXHRcdFx0XHRkZXB0aCA9IHNyY1JlZ2lvbi5tYXgueiAtIHNyY1JlZ2lvbi5taW4uejtcblx0XHRcdFx0bWluWCA9IHNyY1JlZ2lvbi5taW4ueDtcblx0XHRcdFx0bWluWSA9IHNyY1JlZ2lvbi5taW4ueTtcblx0XHRcdFx0bWluWiA9IHNyY1JlZ2lvbi5taW4uejtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR3aWR0aCA9IGltYWdlLndpZHRoO1xuXHRcdFx0XHRoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG5cdFx0XHRcdGRlcHRoID0gaW1hZ2UuZGVwdGg7XG5cdFx0XHRcdG1pblggPSAwO1xuXHRcdFx0XHRtaW5ZID0gMDtcblx0XHRcdFx0bWluWiA9IDA7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBkc3RQb3NpdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRkc3RYID0gZHN0UG9zaXRpb24ueDtcblx0XHRcdFx0ZHN0WSA9IGRzdFBvc2l0aW9uLnk7XG5cdFx0XHRcdGRzdFogPSBkc3RQb3NpdGlvbi56O1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGRzdFggPSAwO1xuXHRcdFx0XHRkc3RZID0gMDtcblx0XHRcdFx0ZHN0WiA9IDA7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCBkc3RUZXh0dXJlLmZvcm1hdCApO1xuXHRcdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS50eXBlICk7XG5cdFx0XHRsZXQgZ2xUYXJnZXQ7XG5cblx0XHRcdGlmICggZHN0VGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB7XG5cblx0XHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTNEKCBkc3RUZXh0dXJlLCAwICk7XG5cdFx0XHRcdGdsVGFyZ2V0ID0gX2dsLlRFWFRVUkVfM0Q7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGRzdFRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlIHx8IGRzdFRleHR1cmUuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHRcdHRleHR1cmVzLnNldFRleHR1cmUyREFycmF5KCBkc3RUZXh0dXJlLCAwICk7XG5cdFx0XHRcdGdsVGFyZ2V0ID0gX2dsLlRFWFRVUkVfMkRfQVJSQVk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5jb3B5VGV4dHVyZVRvVGV4dHVyZTNEOiBvbmx5IHN1cHBvcnRzIFRIUkVFLkRhdGFUZXh0dXJlM0QgYW5kIFRIUkVFLkRhdGFUZXh0dXJlMkRBcnJheS4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCBkc3RUZXh0dXJlLmZsaXBZICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIGRzdFRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0FMSUdOTUVOVCwgZHN0VGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTtcblxuXHRcdFx0Y29uc3QgY3VycmVudFVucGFja1Jvd0xlbiA9IF9nbC5nZXRQYXJhbWV0ZXIoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCApO1xuXHRcdFx0Y29uc3QgY3VycmVudFVucGFja0ltYWdlSGVpZ2h0ID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19JTUFHRV9IRUlHSFQgKTtcblx0XHRcdGNvbnN0IGN1cnJlbnRVbnBhY2tTa2lwUGl4ZWxzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX1BJWEVMUyApO1xuXHRcdFx0Y29uc3QgY3VycmVudFVucGFja1NraXBSb3dzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX1JPV1MgKTtcblx0XHRcdGNvbnN0IGN1cnJlbnRVbnBhY2tTa2lwSW1hZ2VzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX0lNQUdFUyApO1xuXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCwgaW1hZ2Uud2lkdGggKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19JTUFHRV9IRUlHSFQsIGltYWdlLmhlaWdodCApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUElYRUxTLCBtaW5YICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9ST1dTLCBtaW5ZICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9JTUFHRVMsIG1pblogKTtcblxuXHRcdFx0aWYgKCBzcmNUZXh0dXJlLmlzRGF0YVRleHR1cmUgfHwgc3JjVGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB7XG5cblx0XHRcdFx0X2dsLnRleFN1YkltYWdlM0QoIGdsVGFyZ2V0LCBsZXZlbCwgZHN0WCwgZHN0WSwgZHN0Wiwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIGRzdFRleHR1cmUuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0X2dsLmNvbXByZXNzZWRUZXhTdWJJbWFnZTNEKCBnbFRhcmdldCwgbGV2ZWwsIGRzdFgsIGRzdFksIGRzdFosIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBnbEZvcm1hdCwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRfZ2wudGV4U3ViSW1hZ2UzRCggZ2xUYXJnZXQsIGxldmVsLCBkc3RYLCBkc3RZLCBkc3RaLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1JPV19MRU5HVEgsIGN1cnJlbnRVbnBhY2tSb3dMZW4gKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19JTUFHRV9IRUlHSFQsIGN1cnJlbnRVbnBhY2tJbWFnZUhlaWdodCApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUElYRUxTLCBjdXJyZW50VW5wYWNrU2tpcFBpeGVscyApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUk9XUywgY3VycmVudFVucGFja1NraXBSb3dzICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9JTUFHRVMsIGN1cnJlbnRVbnBhY2tTa2lwSW1hZ2VzICk7XG5cblx0XHRcdC8vIEdlbmVyYXRlIG1pcG1hcHMgb25seSB3aGVuIGNvcHlpbmcgbGV2ZWwgMFxuXHRcdFx0aWYgKCBsZXZlbCA9PT0gMCAmJiBkc3RUZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyApIF9nbC5nZW5lcmF0ZU1pcG1hcCggZ2xUYXJnZXQgKTtcblxuXHRcdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuaW5pdFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0XHRpZiAoIHByb3BlcnRpZXMuZ2V0KCB0YXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXR1cFJlbmRlclRhcmdldCggdGFyZ2V0ICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHR0aGlzLmluaXRUZXh0dXJlID0gZnVuY3Rpb24gKCB0ZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmUuaXNDdWJlVGV4dHVyZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgMCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgfHwgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5yZXNldFN0YXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRfY3VycmVudEFjdGl2ZUN1YmVGYWNlID0gMDtcblx0XHRcdF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgPSAwO1xuXHRcdFx0X2N1cnJlbnRSZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdFx0XHRzdGF0ZS5yZXNldCgpO1xuXHRcdFx0YmluZGluZ1N0YXRlcy5yZXNldCgpO1xuXG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRcdF9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdvYnNlcnZlJywgeyBkZXRhaWw6IHRoaXMgfSApICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGdldCBjb29yZGluYXRlU3lzdGVtKCkge1xuXG5cdFx0cmV0dXJuIFdlYkdMQ29vcmRpbmF0ZVN5c3RlbTtcblxuXHR9XG5cblx0Z2V0IG91dHB1dENvbG9yU3BhY2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fb3V0cHV0Q29sb3JTcGFjZTtcblxuXHR9XG5cblx0c2V0IG91dHB1dENvbG9yU3BhY2UoIGNvbG9yU3BhY2UgKSB7XG5cblx0XHR0aGlzLl9vdXRwdXRDb2xvclNwYWNlID0gY29sb3JTcGFjZTtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nZXRDb250ZXh0KCk7XG5cdFx0Z2wuZHJhd2luZ0J1ZmZlckNvbG9yU3BhY2UgPSBjb2xvclNwYWNlID09PSBEaXNwbGF5UDNDb2xvclNwYWNlID8gJ2Rpc3BsYXktcDMnIDogJ3NyZ2InO1xuXHRcdGdsLnVucGFja0NvbG9yU3BhY2UgPSBDb2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2UgPT09IExpbmVhckRpc3BsYXlQM0NvbG9yU3BhY2UgPyAnZGlzcGxheS1wMycgOiAnc3JnYic7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgV2ViR0xSZW5kZXJlciB9O1xuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcblxuY2xhc3MgRm9nRXhwMiB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBkZW5zaXR5ID0gMC4wMDAyNSApIHtcblxuXHRcdHRoaXMuaXNGb2dFeHAyID0gdHJ1ZTtcblxuXHRcdHRoaXMubmFtZSA9ICcnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggY29sb3IgKTtcblx0XHR0aGlzLmRlbnNpdHkgPSBkZW5zaXR5O1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgRm9nRXhwMiggdGhpcy5jb2xvciwgdGhpcy5kZW5zaXR5ICk7XG5cblx0fVxuXG5cdHRvSlNPTiggLyogbWV0YSAqLyApIHtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiAnRm9nRXhwMicsXG5cdFx0XHRuYW1lOiB0aGlzLm5hbWUsXG5cdFx0XHRjb2xvcjogdGhpcy5jb2xvci5nZXRIZXgoKSxcblx0XHRcdGRlbnNpdHk6IHRoaXMuZGVuc2l0eVxuXHRcdH07XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEZvZ0V4cDIgfTtcbiIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5cbmNsYXNzIEZvZyB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBuZWFyID0gMSwgZmFyID0gMTAwMCApIHtcblxuXHRcdHRoaXMuaXNGb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xuXG5cdFx0dGhpcy5uZWFyID0gbmVhcjtcblx0XHR0aGlzLmZhciA9IGZhcjtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IEZvZyggdGhpcy5jb2xvciwgdGhpcy5uZWFyLCB0aGlzLmZhciApO1xuXG5cdH1cblxuXHR0b0pTT04oIC8qIG1ldGEgKi8gKSB7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogJ0ZvZycsXG5cdFx0XHRuYW1lOiB0aGlzLm5hbWUsXG5cdFx0XHRjb2xvcjogdGhpcy5jb2xvci5nZXRIZXgoKSxcblx0XHRcdG5lYXI6IHRoaXMubmVhcixcblx0XHRcdGZhcjogdGhpcy5mYXJcblx0XHR9O1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBGb2cgfTtcbiIsImltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uL21hdGgvRXVsZXIuanMnO1xuXG5jbGFzcyBTY2VuZSBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzU2NlbmUgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ1NjZW5lJztcblxuXHRcdHRoaXMuYmFja2dyb3VuZCA9IG51bGw7XG5cdFx0dGhpcy5lbnZpcm9ubWVudCA9IG51bGw7XG5cdFx0dGhpcy5mb2cgPSBudWxsO1xuXG5cdFx0dGhpcy5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA9IDA7XG5cdFx0dGhpcy5iYWNrZ3JvdW5kSW50ZW5zaXR5ID0gMTtcblx0XHR0aGlzLmJhY2tncm91bmRSb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuXG5cdFx0dGhpcy5lbnZpcm9ubWVudEludGVuc2l0eSA9IDE7XG5cdFx0dGhpcy5lbnZpcm9ubWVudFJvdGF0aW9uID0gbmV3IEV1bGVyKCk7XG5cblx0XHR0aGlzLm92ZXJyaWRlTWF0ZXJpYWwgPSBudWxsO1xuXG5cdFx0aWYgKCB0eXBlb2YgX19USFJFRV9ERVZUT09MU19fICE9PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0X19USFJFRV9ERVZUT09MU19fLmRpc3BhdGNoRXZlbnQoIG5ldyBDdXN0b21FdmVudCggJ29ic2VydmUnLCB7IGRldGFpbDogdGhpcyB9ICkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UuYmFja2dyb3VuZCAhPT0gbnVsbCApIHRoaXMuYmFja2dyb3VuZCA9IHNvdXJjZS5iYWNrZ3JvdW5kLmNsb25lKCk7XG5cdFx0aWYgKCBzb3VyY2UuZW52aXJvbm1lbnQgIT09IG51bGwgKSB0aGlzLmVudmlyb25tZW50ID0gc291cmNlLmVudmlyb25tZW50LmNsb25lKCk7XG5cdFx0aWYgKCBzb3VyY2UuZm9nICE9PSBudWxsICkgdGhpcy5mb2cgPSBzb3VyY2UuZm9nLmNsb25lKCk7XG5cblx0XHR0aGlzLmJhY2tncm91bmRCbHVycmluZXNzID0gc291cmNlLmJhY2tncm91bmRCbHVycmluZXNzO1xuXHRcdHRoaXMuYmFja2dyb3VuZEludGVuc2l0eSA9IHNvdXJjZS5iYWNrZ3JvdW5kSW50ZW5zaXR5O1xuXHRcdHRoaXMuYmFja2dyb3VuZFJvdGF0aW9uLmNvcHkoIHNvdXJjZS5iYWNrZ3JvdW5kUm90YXRpb24gKTtcblxuXHRcdHRoaXMuZW52aXJvbm1lbnRJbnRlbnNpdHkgPSBzb3VyY2UuZW52aXJvbm1lbnRJbnRlbnNpdHk7XG5cdFx0dGhpcy5lbnZpcm9ubWVudFJvdGF0aW9uLmNvcHkoIHNvdXJjZS5lbnZpcm9ubWVudFJvdGF0aW9uICk7XG5cblx0XHRpZiAoIHNvdXJjZS5vdmVycmlkZU1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5vdmVycmlkZU1hdGVyaWFsID0gc291cmNlLm92ZXJyaWRlTWF0ZXJpYWwuY2xvbmUoKTtcblxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhBdXRvVXBkYXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcblxuXHRcdGlmICggdGhpcy5mb2cgIT09IG51bGwgKSBkYXRhLm9iamVjdC5mb2cgPSB0aGlzLmZvZy50b0pTT04oKTtcblxuXHRcdGlmICggdGhpcy5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA+IDAgKSBkYXRhLm9iamVjdC5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA9IHRoaXMuYmFja2dyb3VuZEJsdXJyaW5lc3M7XG5cdFx0aWYgKCB0aGlzLmJhY2tncm91bmRJbnRlbnNpdHkgIT09IDEgKSBkYXRhLm9iamVjdC5iYWNrZ3JvdW5kSW50ZW5zaXR5ID0gdGhpcy5iYWNrZ3JvdW5kSW50ZW5zaXR5O1xuXHRcdGRhdGEub2JqZWN0LmJhY2tncm91bmRSb3RhdGlvbiA9IHRoaXMuYmFja2dyb3VuZFJvdGF0aW9uLnRvQXJyYXkoKTtcblxuXHRcdGlmICggdGhpcy5lbnZpcm9ubWVudEludGVuc2l0eSAhPT0gMSApIGRhdGEub2JqZWN0LmVudmlyb25tZW50SW50ZW5zaXR5ID0gdGhpcy5lbnZpcm9ubWVudEludGVuc2l0eTtcblx0XHRkYXRhLm9iamVjdC5lbnZpcm9ubWVudFJvdGF0aW9uID0gdGhpcy5lbnZpcm9ubWVudFJvdGF0aW9uLnRvQXJyYXkoKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBTY2VuZSB9O1xuIiwiaW1wb3J0ICogYXMgTWF0aFV0aWxzIGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcbmltcG9ydCB7IFN0YXRpY0RyYXdVc2FnZSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyB3YXJuT25jZSB9IGZyb20gJy4uL3V0aWxzLmpzJztcblxuY2xhc3MgSW50ZXJsZWF2ZWRCdWZmZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgc3RyaWRlICkge1xuXG5cdFx0dGhpcy5pc0ludGVybGVhdmVkQnVmZmVyID0gdHJ1ZTtcblxuXHRcdHRoaXMuYXJyYXkgPSBhcnJheTtcblx0XHR0aGlzLnN0cmlkZSA9IHN0cmlkZTtcblx0XHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIHN0cmlkZSA6IDA7XG5cblx0XHR0aGlzLnVzYWdlID0gU3RhdGljRHJhd1VzYWdlO1xuXHRcdHRoaXMuX3VwZGF0ZVJhbmdlID0geyBvZmZzZXQ6IDAsIGNvdW50OiAtIDEgfTtcblx0XHR0aGlzLnVwZGF0ZVJhbmdlcyA9IFtdO1xuXG5cdFx0dGhpcy52ZXJzaW9uID0gMDtcblxuXHRcdHRoaXMudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcblxuXHR9XG5cblx0b25VcGxvYWRDYWxsYmFjaygpIHt9XG5cblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG5cdGdldCB1cGRhdGVSYW5nZSgpIHtcblxuXHRcdHdhcm5PbmNlKCAnVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXI6IHVwZGF0ZVJhbmdlKCkgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHIxNjkuIFVzZSBhZGRVcGRhdGVSYW5nZSgpIGluc3RlYWQuJyApOyAvLyBAZGVwcmVjYXRlZCwgcjE1OVxuXHRcdHJldHVybiB0aGlzLl91cGRhdGVSYW5nZTtcblxuXHR9XG5cblx0c2V0VXNhZ2UoIHZhbHVlICkge1xuXG5cdFx0dGhpcy51c2FnZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFVwZGF0ZVJhbmdlKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZVJhbmdlcy5wdXNoKCB7IHN0YXJ0LCBjb3VudCB9ICk7XG5cblx0fVxuXG5cdGNsZWFyVXBkYXRlUmFuZ2VzKCkge1xuXG5cdFx0dGhpcy51cGRhdGVSYW5nZXMubGVuZ3RoID0gMDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3IoIHNvdXJjZS5hcnJheSApO1xuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XG5cdFx0dGhpcy5zdHJpZGUgPSBzb3VyY2Uuc3RyaWRlO1xuXHRcdHRoaXMudXNhZ2UgPSBzb3VyY2UudXNhZ2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weUF0KCBpbmRleDEsIGF0dHJpYnV0ZSwgaW5kZXgyICkge1xuXG5cdFx0aW5kZXgxICo9IHRoaXMuc3RyaWRlO1xuXHRcdGluZGV4MiAqPSBhdHRyaWJ1dGUuc3RyaWRlO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5zdHJpZGU7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBhdHRyaWJ1dGUuYXJyYXlbIGluZGV4MiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXQoIHZhbHVlLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0dGhpcy5hcnJheS5zZXQoIHZhbHVlLCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSggZGF0YSApIHtcblxuXHRcdGlmICggZGF0YS5hcnJheUJ1ZmZlcnMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0ZGF0YS5hcnJheUJ1ZmZlcnMgPSB7fTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5hcnJheS5idWZmZXIuX3V1aWQgPSBNYXRoVXRpbHMuZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEuYXJyYXlCdWZmZXJzWyB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGRhdGEuYXJyYXlCdWZmZXJzWyB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCBdID0gdGhpcy5hcnJheS5zbGljZSggMCApLmJ1ZmZlcjtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGFycmF5ID0gbmV3IHRoaXMuYXJyYXkuY29uc3RydWN0b3IoIGRhdGEuYXJyYXlCdWZmZXJzWyB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCBdICk7XG5cblx0XHRjb25zdCBpYiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCBhcnJheSwgdGhpcy5zdHJpZGUgKTtcblx0XHRpYi5zZXRVc2FnZSggdGhpcy51c2FnZSApO1xuXG5cdFx0cmV0dXJuIGliO1xuXG5cdH1cblxuXHRvblVwbG9hZCggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLm9uVXBsb2FkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIGRhdGEgKSB7XG5cblx0XHRpZiAoIGRhdGEuYXJyYXlCdWZmZXJzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGRhdGEuYXJyYXlCdWZmZXJzID0ge307XG5cblx0XHR9XG5cblx0XHQvLyBnZW5lcmF0ZSBVVUlEIGZvciBhcnJheSBidWZmZXIgaWYgbmVjZXNzYXJ5XG5cblx0XHRpZiAoIHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkID0gTWF0aFV0aWxzLmdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLmFycmF5QnVmZmVyc1sgdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhLmFycmF5QnVmZmVyc1sgdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgXSA9IEFycmF5LmZyb20oIG5ldyBVaW50MzJBcnJheSggdGhpcy5hcnJheS5idWZmZXIgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHJldHVybiB7XG5cdFx0XHR1dWlkOiB0aGlzLnV1aWQsXG5cdFx0XHRidWZmZXI6IHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkLFxuXHRcdFx0dHlwZTogdGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0c3RyaWRlOiB0aGlzLnN0cmlkZVxuXHRcdH07XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEludGVybGVhdmVkQnVmZmVyIH07XG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IEJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4vQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IGRlbm9ybWFsaXplLCBub3JtYWxpemUgfSBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XG5cbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggaW50ZXJsZWF2ZWRCdWZmZXIsIGl0ZW1TaXplLCBvZmZzZXQsIG5vcm1hbGl6ZWQgPSBmYWxzZSApIHtcblxuXHRcdHRoaXMuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cblx0XHR0aGlzLm5hbWUgPSAnJztcblxuXHRcdHRoaXMuZGF0YSA9IGludGVybGVhdmVkQnVmZmVyO1xuXHRcdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0XHR0aGlzLm9mZnNldCA9IG9mZnNldDtcblxuXHRcdHRoaXMubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQ7XG5cblx0fVxuXG5cdGdldCBjb3VudCgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEuY291bnQ7XG5cblx0fVxuXG5cdGdldCBhcnJheSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEuYXJyYXk7XG5cblx0fVxuXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmRhdGEubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXg0KCBtICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5kYXRhLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cblx0XHRcdF92ZWN0b3IuYXBwbHlNYXRyaXg0KCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlOb3JtYWxNYXRyaXgoIG0gKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cblx0XHRcdF92ZWN0b3IuYXBwbHlOb3JtYWxNYXRyaXgoIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cblx0XHRcdF92ZWN0b3IudHJhbnNmb3JtRGlyZWN0aW9uKCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q29tcG9uZW50KCBpbmRleCwgY29tcG9uZW50ICkge1xuXG5cdFx0bGV0IHZhbHVlID0gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyBjb21wb25lbnQgXTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgdmFsdWUgPSBkZW5vcm1hbGl6ZSggdmFsdWUsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHJldHVybiB2YWx1ZTtcblxuXHR9XG5cblx0c2V0Q29tcG9uZW50KCBpbmRleCwgY29tcG9uZW50LCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgdmFsdWUgPSBub3JtYWxpemUoIHZhbHVlLCB0aGlzLmFycmF5ICk7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgY29tcG9uZW50IF0gPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYKCBpbmRleCwgeCApIHtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCBdID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRZKCBpbmRleCwgeSApIHtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDEgXSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WiggaW5kZXgsIHogKSB7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHogPSBub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFcoIGluZGV4LCB3ICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB3ID0gbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRYKCBpbmRleCApIHtcblxuXHRcdGxldCB4ID0gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCBdO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB4ID0gZGVub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHJldHVybiB4O1xuXG5cdH1cblxuXHRnZXRZKCBpbmRleCApIHtcblxuXHRcdGxldCB5ID0gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDEgXTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeSA9IGRlbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XG5cblx0XHRyZXR1cm4geTtcblxuXHR9XG5cblx0Z2V0WiggaW5kZXggKSB7XG5cblx0XHRsZXQgeiA9IHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAyIF07XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHogPSBkZW5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHo7XG5cblx0fVxuXG5cdGdldFcoIGluZGV4ICkge1xuXG5cdFx0bGV0IHcgPSB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMyBdO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB3ID0gZGVub3JtYWxpemUoIHcsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHJldHVybiB3O1xuXG5cdH1cblxuXHRzZXRYWSggaW5kZXgsIHgsIHkgKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB7XG5cblx0XHRcdHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcblx0XHRcdHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFhZWiggaW5kZXgsIHgsIHksIHogKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB7XG5cblx0XHRcdHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcblx0XHRcdHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcblx0XHRcdHogPSBub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFhZWlcoIGluZGV4LCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkge1xuXG5cdFx0XHR4ID0gbm9ybWFsaXplKCB4LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR3ID0gbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSggZGF0YSApIHtcblxuXHRcdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLmxvZyggJ1RIUkVFLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLmNsb25lKCk6IENsb25pbmcgYW4gaW50ZXJsZWF2ZWQgYnVmZmVyIGF0dHJpYnV0ZSB3aWxsIGRlLWludGVybGVhdmUgYnVmZmVyIGRhdGEuJyApO1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmNvdW50OyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gaSAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCB0aGlzLml0ZW1TaXplOyBqICsrICkge1xuXG5cdFx0XHRcdFx0YXJyYXkucHVzaCggdGhpcy5kYXRhLmFycmF5WyBpbmRleCArIGogXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggbmV3IHRoaXMuYXJyYXkuY29uc3RydWN0b3IoIGFycmF5ICksIHRoaXMuaXRlbVNpemUsIHRoaXMubm9ybWFsaXplZCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzID0ge307XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzWyB0aGlzLmRhdGEudXVpZCBdID0gdGhpcy5kYXRhLmNsb25lKCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnNbIHRoaXMuZGF0YS51dWlkIF0sIHRoaXMuaXRlbVNpemUsIHRoaXMub2Zmc2V0LCB0aGlzLm5vcm1hbGl6ZWQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dG9KU09OKCBkYXRhICkge1xuXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUudG9KU09OKCk6IFNlcmlhbGl6aW5nIGFuIGludGVybGVhdmVkIGJ1ZmZlciBhdHRyaWJ1dGUgd2lsbCBkZS1pbnRlcmxlYXZlIGJ1ZmZlciBkYXRhLicgKTtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5jb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbmRleCA9IGkgKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQ7XG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgdGhpcy5pdGVtU2l6ZTsgaiArKyApIHtcblxuXHRcdFx0XHRcdGFycmF5LnB1c2goIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyBqIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZGUtaW50ZXJsZWF2ZSBkYXRhIGFuZCBzYXZlIGl0IGFzIGFuIG9yZGluYXJ5IGJ1ZmZlciBhdHRyaWJ1dGUgZm9yIG5vd1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRpdGVtU2l6ZTogdGhpcy5pdGVtU2l6ZSxcblx0XHRcdFx0dHlwZTogdGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0XHRhcnJheTogYXJyYXksXG5cdFx0XHRcdG5vcm1hbGl6ZWQ6IHRoaXMubm9ybWFsaXplZFxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHNhdmUgYXMgdHJ1ZSBpbnRlcmxlYXZlZCBhdHRyaWJ1dGVcblxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzID0ge307XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzWyB0aGlzLmRhdGEudXVpZCBdID0gdGhpcy5kYXRhLnRvSlNPTiggZGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU6IHRydWUsXG5cdFx0XHRcdGl0ZW1TaXplOiB0aGlzLml0ZW1TaXplLFxuXHRcdFx0XHRkYXRhOiB0aGlzLmRhdGEudXVpZCxcblx0XHRcdFx0b2Zmc2V0OiB0aGlzLm9mZnNldCxcblx0XHRcdFx0bm9ybWFsaXplZDogdGhpcy5ub3JtYWxpemVkXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5cbmV4cG9ydCB7IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIH07XG4iLCJpbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcblxuY2xhc3MgU3ByaXRlTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc1Nwcml0ZU1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdTcHJpdGVNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLnJvdGF0aW9uID0gMDtcblxuXHRcdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gdHJ1ZTtcblxuXHRcdHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMucm90YXRpb24gPSBzb3VyY2Uucm90YXRpb247XG5cblx0XHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHNvdXJjZS5zaXplQXR0ZW51YXRpb247XG5cblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgU3ByaXRlTWF0ZXJpYWwgfTtcbiIsImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCB7IFRyaWFuZ2xlIH0gZnJvbSAnLi4vbWF0aC9UcmlhbmdsZS5qcyc7XG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IEludGVybGVhdmVkQnVmZmVyIH0gZnJvbSAnLi4vY29yZS9JbnRlcmxlYXZlZEJ1ZmZlci5qcyc7XG5pbXBvcnQgeyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgU3ByaXRlTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvU3ByaXRlTWF0ZXJpYWwuanMnO1xuXG5sZXQgX2dlb21ldHJ5O1xuXG5jb25zdCBfaW50ZXJzZWN0UG9pbnQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfd29ybGRTY2FsZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9tdlBvc2l0aW9uID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfYWxpZ25lZFBvc2l0aW9uID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuY29uc3QgX3JvdGF0ZWRQb3NpdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IF92aWV3V29ybGRNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5cbmNvbnN0IF92QSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92QiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92QyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX3V2QSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IF91dkIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfdXZDID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuXG5jbGFzcyBTcHJpdGUgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoIG1hdGVyaWFsID0gbmV3IFNwcml0ZU1hdGVyaWFsKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc1Nwcml0ZSA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3ByaXRlJztcblxuXHRcdGlmICggX2dlb21ldHJ5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdF9nZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0XHRjb25zdCBmbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBbXG5cdFx0XHRcdC0gMC41LCAtIDAuNSwgMCwgMCwgMCxcblx0XHRcdFx0MC41LCAtIDAuNSwgMCwgMSwgMCxcblx0XHRcdFx0MC41LCAwLjUsIDAsIDEsIDEsXG5cdFx0XHRcdC0gMC41LCAwLjUsIDAsIDAsIDFcblx0XHRcdF0gKTtcblxuXHRcdFx0Y29uc3QgaW50ZXJsZWF2ZWRCdWZmZXIgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXIoIGZsb2F0MzJBcnJheSwgNSApO1xuXG5cdFx0XHRfZ2VvbWV0cnkuc2V0SW5kZXgoIFsgMCwgMSwgMixcdDAsIDIsIDMgXSApO1xuXHRcdFx0X2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMywgMCwgZmFsc2UgKSApO1xuXHRcdFx0X2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMiwgMywgZmFsc2UgKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5nZW9tZXRyeSA9IF9nZW9tZXRyeTtcblx0XHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cblx0XHR0aGlzLmNlbnRlciA9IG5ldyBWZWN0b3IyKCAwLjUsIDAuNSApO1xuXG5cdH1cblxuXHRyYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRpZiAoIHJheWNhc3Rlci5jYW1lcmEgPT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TcHJpdGU6IFwiUmF5Y2FzdGVyLmNhbWVyYVwiIG5lZWRzIHRvIGJlIHNldCBpbiBvcmRlciB0byByYXljYXN0IGFnYWluc3Qgc3ByaXRlcy4nICk7XG5cblx0XHR9XG5cblx0XHRfd29ybGRTY2FsZS5zZXRGcm9tTWF0cml4U2NhbGUoIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdF92aWV3V29ybGRNYXRyaXguY29weSggcmF5Y2FzdGVyLmNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXHRcdHRoaXMubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIHJheWNhc3Rlci5jYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRfbXZQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubW9kZWxWaWV3TWF0cml4ICk7XG5cblx0XHRpZiAoIHJheWNhc3Rlci5jYW1lcmEuaXNQZXJzcGVjdGl2ZUNhbWVyYSAmJiB0aGlzLm1hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdF93b3JsZFNjYWxlLm11bHRpcGx5U2NhbGFyKCAtIF9tdlBvc2l0aW9uLnogKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHJvdGF0aW9uID0gdGhpcy5tYXRlcmlhbC5yb3RhdGlvbjtcblx0XHRsZXQgc2luLCBjb3M7XG5cblx0XHRpZiAoIHJvdGF0aW9uICE9PSAwICkge1xuXG5cdFx0XHRjb3MgPSBNYXRoLmNvcyggcm90YXRpb24gKTtcblx0XHRcdHNpbiA9IE1hdGguc2luKCByb3RhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXI7XG5cblx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIF92QS5zZXQoIC0gMC41LCAtIDAuNSwgMCApLCBfbXZQb3NpdGlvbiwgY2VudGVyLCBfd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIF92Qi5zZXQoIDAuNSwgLSAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cdFx0dHJhbnNmb3JtVmVydGV4KCBfdkMuc2V0KCAwLjUsIDAuNSwgMCApLCBfbXZQb3NpdGlvbiwgY2VudGVyLCBfd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblxuXHRcdF91dkEuc2V0KCAwLCAwICk7XG5cdFx0X3V2Qi5zZXQoIDEsIDAgKTtcblx0XHRfdXZDLnNldCggMSwgMSApO1xuXG5cdFx0Ly8gY2hlY2sgZmlyc3QgdHJpYW5nbGVcblx0XHRsZXQgaW50ZXJzZWN0ID0gcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RUcmlhbmdsZSggX3ZBLCBfdkIsIF92QywgZmFsc2UsIF9pbnRlcnNlY3RQb2ludCApO1xuXG5cdFx0aWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSB7XG5cblx0XHRcdC8vIGNoZWNrIHNlY29uZCB0cmlhbmdsZVxuXHRcdFx0dHJhbnNmb3JtVmVydGV4KCBfdkIuc2V0KCAtIDAuNSwgMC41LCAwICksIF9tdlBvc2l0aW9uLCBjZW50ZXIsIF93b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xuXHRcdFx0X3V2Qi5zZXQoIDAsIDEgKTtcblxuXHRcdFx0aW50ZXJzZWN0ID0gcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RUcmlhbmdsZSggX3ZBLCBfdkMsIF92QiwgZmFsc2UsIF9pbnRlcnNlY3RQb2ludCApO1xuXHRcdFx0aWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIF9pbnRlcnNlY3RQb2ludCApO1xuXG5cdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybjtcblxuXHRcdGludGVyc2VjdHMucHVzaCgge1xuXG5cdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRwb2ludDogX2ludGVyc2VjdFBvaW50LmNsb25lKCksXG5cdFx0XHR1djogVHJpYW5nbGUuZ2V0SW50ZXJwb2xhdGlvbiggX2ludGVyc2VjdFBvaW50LCBfdkEsIF92QiwgX3ZDLCBfdXZBLCBfdXZCLCBfdXZDLCBuZXcgVmVjdG9yMigpICksXG5cdFx0XHRmYWNlOiBudWxsLFxuXHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHR9ICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdGlmICggc291cmNlLmNlbnRlciAhPT0gdW5kZWZpbmVkICkgdGhpcy5jZW50ZXIuY29weSggc291cmNlLmNlbnRlciApO1xuXG5cdFx0dGhpcy5tYXRlcmlhbCA9IHNvdXJjZS5tYXRlcmlhbDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1WZXJ0ZXgoIHZlcnRleFBvc2l0aW9uLCBtdlBvc2l0aW9uLCBjZW50ZXIsIHNjYWxlLCBzaW4sIGNvcyApIHtcblxuXHQvLyBjb21wdXRlIHBvc2l0aW9uIGluIGNhbWVyYSBzcGFjZVxuXHRfYWxpZ25lZFBvc2l0aW9uLnN1YlZlY3RvcnMoIHZlcnRleFBvc2l0aW9uLCBjZW50ZXIgKS5hZGRTY2FsYXIoIDAuNSApLm11bHRpcGx5KCBzY2FsZSApO1xuXG5cdC8vIHRvIGNoZWNrIGlmIHJvdGF0aW9uIGlzIG5vdCB6ZXJvXG5cdGlmICggc2luICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRfcm90YXRlZFBvc2l0aW9uLnggPSAoIGNvcyAqIF9hbGlnbmVkUG9zaXRpb24ueCApIC0gKCBzaW4gKiBfYWxpZ25lZFBvc2l0aW9uLnkgKTtcblx0XHRfcm90YXRlZFBvc2l0aW9uLnkgPSAoIHNpbiAqIF9hbGlnbmVkUG9zaXRpb24ueCApICsgKCBjb3MgKiBfYWxpZ25lZFBvc2l0aW9uLnkgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0X3JvdGF0ZWRQb3NpdGlvbi5jb3B5KCBfYWxpZ25lZFBvc2l0aW9uICk7XG5cblx0fVxuXG5cblx0dmVydGV4UG9zaXRpb24uY29weSggbXZQb3NpdGlvbiApO1xuXHR2ZXJ0ZXhQb3NpdGlvbi54ICs9IF9yb3RhdGVkUG9zaXRpb24ueDtcblx0dmVydGV4UG9zaXRpb24ueSArPSBfcm90YXRlZFBvc2l0aW9uLnk7XG5cblx0Ly8gdHJhbnNmb3JtIHRvIHdvcmxkIHNwYWNlXG5cdHZlcnRleFBvc2l0aW9uLmFwcGx5TWF0cml4NCggX3ZpZXdXb3JsZE1hdHJpeCApO1xuXG59XG5cbmV4cG9ydCB7IFNwcml0ZSB9O1xuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xuXG5jb25zdCBfdjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIExPRCBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9jdXJyZW50TGV2ZWwgPSAwO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xPRCc7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcywge1xuXHRcdFx0bGV2ZWxzOiB7XG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBbXVxuXHRcdFx0fSxcblx0XHRcdGlzTE9EOiB7XG5cdFx0XHRcdHZhbHVlOiB0cnVlLFxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgZmFsc2UgKTtcblxuXHRcdGNvbnN0IGxldmVscyA9IHNvdXJjZS5sZXZlbHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgbGV2ZWwgPSBsZXZlbHNbIGkgXTtcblxuXHRcdFx0dGhpcy5hZGRMZXZlbCggbGV2ZWwub2JqZWN0LmNsb25lKCksIGxldmVsLmRpc3RhbmNlLCBsZXZlbC5oeXN0ZXJlc2lzICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmF1dG9VcGRhdGUgPSBzb3VyY2UuYXV0b1VwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRMZXZlbCggb2JqZWN0LCBkaXN0YW5jZSA9IDAsIGh5c3RlcmVzaXMgPSAwICkge1xuXG5cdFx0ZGlzdGFuY2UgPSBNYXRoLmFicyggZGlzdGFuY2UgKTtcblxuXHRcdGNvbnN0IGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0bGV0IGw7XG5cblx0XHRmb3IgKCBsID0gMDsgbCA8IGxldmVscy5sZW5ndGg7IGwgKysgKSB7XG5cblx0XHRcdGlmICggZGlzdGFuY2UgPCBsZXZlbHNbIGwgXS5kaXN0YW5jZSApIHtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0bGV2ZWxzLnNwbGljZSggbCwgMCwgeyBkaXN0YW5jZTogZGlzdGFuY2UsIGh5c3RlcmVzaXM6IGh5c3RlcmVzaXMsIG9iamVjdDogb2JqZWN0IH0gKTtcblxuXHRcdHRoaXMuYWRkKCBvYmplY3QgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRDdXJyZW50TGV2ZWwoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fY3VycmVudExldmVsO1xuXG5cdH1cblxuXG5cblx0Z2V0T2JqZWN0Rm9yRGlzdGFuY2UoIGRpc3RhbmNlICkge1xuXG5cdFx0Y29uc3QgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRpZiAoIGxldmVscy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRsZXQgaSwgbDtcblxuXHRcdFx0Zm9yICggaSA9IDEsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRsZXQgbGV2ZWxEaXN0YW5jZSA9IGxldmVsc1sgaSBdLmRpc3RhbmNlO1xuXG5cdFx0XHRcdGlmICggbGV2ZWxzWyBpIF0ub2JqZWN0LnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRsZXZlbERpc3RhbmNlIC09IGxldmVsRGlzdGFuY2UgKiBsZXZlbHNbIGkgXS5oeXN0ZXJlc2lzO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxEaXN0YW5jZSApIHtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbGV2ZWxzWyBpIC0gMSBdLm9iamVjdDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxuXHRyYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGlmICggbGV2ZWxzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdF92MS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdFx0Y29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfdjEgKTtcblxuXHRcdFx0dGhpcy5nZXRPYmplY3RGb3JEaXN0YW5jZSggZGlzdGFuY2UgKS5yYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dXBkYXRlKCBjYW1lcmEgKSB7XG5cblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGlmICggbGV2ZWxzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdF92MS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0X3YyLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IF92MS5kaXN0YW5jZVRvKCBfdjIgKSAvIGNhbWVyYS56b29tO1xuXG5cdFx0XHRsZXZlbHNbIDAgXS5vYmplY3QudmlzaWJsZSA9IHRydWU7XG5cblx0XHRcdGxldCBpLCBsO1xuXG5cdFx0XHRmb3IgKCBpID0gMSwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldCBsZXZlbERpc3RhbmNlID0gbGV2ZWxzWyBpIF0uZGlzdGFuY2U7XG5cblx0XHRcdFx0aWYgKCBsZXZlbHNbIGkgXS5vYmplY3QudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdGxldmVsRGlzdGFuY2UgLT0gbGV2ZWxEaXN0YW5jZSAqIGxldmVsc1sgaSBdLmh5c3RlcmVzaXM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGlzdGFuY2UgPj0gbGV2ZWxEaXN0YW5jZSApIHtcblxuXHRcdFx0XHRcdGxldmVsc1sgaSAtIDEgXS5vYmplY3QudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0XHRcdGxldmVsc1sgaSBdLm9iamVjdC52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2N1cnJlbnRMZXZlbCA9IGkgLSAxO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldmVsc1sgaSBdLm9iamVjdC52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0aWYgKCB0aGlzLmF1dG9VcGRhdGUgPT09IGZhbHNlICkgZGF0YS5vYmplY3QuYXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0ZGF0YS5vYmplY3QubGV2ZWxzID0gW107XG5cblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG5cdFx0XHRkYXRhLm9iamVjdC5sZXZlbHMucHVzaCgge1xuXHRcdFx0XHRvYmplY3Q6IGxldmVsLm9iamVjdC51dWlkLFxuXHRcdFx0XHRkaXN0YW5jZTogbGV2ZWwuZGlzdGFuY2UsXG5cdFx0XHRcdGh5c3RlcmVzaXM6IGxldmVsLmh5c3RlcmVzaXNcblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5cbmV4cG9ydCB7IExPRCB9O1xuIiwiaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4vTWVzaC5qcyc7XG5pbXBvcnQgeyBCb3gzIH0gZnJvbSAnLi4vbWF0aC9Cb3gzLmpzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXRoL01hdHJpeDQuanMnO1xuaW1wb3J0IHsgU3BoZXJlIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi4vbWF0aC9WZWN0b3I0LmpzJztcbmltcG9ydCB7IFJheSB9IGZyb20gJy4uL21hdGgvUmF5LmpzJztcbmltcG9ydCB7IEF0dGFjaGVkQmluZE1vZGUsIERldGFjaGVkQmluZE1vZGUgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuXG5jb25zdCBfYmFzZVBvc2l0aW9uID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfc2tpbkluZGV4ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yNCgpO1xuY29uc3QgX3NraW5XZWlnaHQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3I0KCk7XG5cbmNvbnN0IF92ZWN0b3IzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX21hdHJpeDQgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfdmVydGV4ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfc3BoZXJlID0gLypAX19QVVJFX18qLyBuZXcgU3BoZXJlKCk7XG5jb25zdCBfaW52ZXJzZU1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9yYXkgPSAvKkBfX1BVUkVfXyovIG5ldyBSYXkoKTtcblxuY2xhc3MgU2tpbm5lZE1lc2ggZXh0ZW5kcyBNZXNoIHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy5pc1NraW5uZWRNZXNoID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdTa2lubmVkTWVzaCc7XG5cblx0XHR0aGlzLmJpbmRNb2RlID0gQXR0YWNoZWRCaW5kTW9kZTtcblx0XHR0aGlzLmJpbmRNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0fVxuXG5cdGNvbXB1dGVCb3VuZGluZ0JveCgpIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJvdW5kaW5nQm94Lm1ha2VFbXB0eSgpO1xuXG5cdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmdldFZlcnRleFBvc2l0aW9uKCBpLCBfdmVydGV4ICk7XG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQoIF92ZXJ0ZXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5tYWtlRW1wdHkoKTtcblxuXHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5nZXRWZXJ0ZXhQb3NpdGlvbiggaSwgX3ZlcnRleCApO1xuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5leHBhbmRCeVBvaW50KCBfdmVydGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuYmluZE1vZGUgPSBzb3VyY2UuYmluZE1vZGU7XG5cdFx0dGhpcy5iaW5kTWF0cml4LmNvcHkoIHNvdXJjZS5iaW5kTWF0cml4ICk7XG5cdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5jb3B5KCBzb3VyY2UuYmluZE1hdHJpeEludmVyc2UgKTtcblxuXHRcdHRoaXMuc2tlbGV0b24gPSBzb3VyY2Uuc2tlbGV0b247XG5cblx0XHRpZiAoIHNvdXJjZS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHRoaXMuYm91bmRpbmdCb3ggPSBzb3VyY2UuYm91bmRpbmdCb3guY2xvbmUoKTtcblx0XHRpZiAoIHNvdXJjZS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHRoaXMuYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7XG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXG5cdFx0aWYgKCBtYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Ly8gdGVzdCB3aXRoIGJvdW5kaW5nIHNwaGVyZSBpbiB3b3JsZCBzcGFjZVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdF9zcGhlcmUuY29weSggdGhpcy5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdF9zcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0aWYgKCByYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUgKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBjb252ZXJ0IHJheSB0byBsb2NhbCBzcGFjZSBvZiBza2lubmVkIG1lc2hcblxuXHRcdF9pbnZlcnNlTWF0cml4LmNvcHkoIG1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cdFx0X3JheS5jb3B5KCByYXljYXN0ZXIucmF5ICkuYXBwbHlNYXRyaXg0KCBfaW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0Ly8gdGVzdCB3aXRoIGJvdW5kaW5nIGJveCBpbiBsb2NhbCBzcGFjZVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIF9yYXkuaW50ZXJzZWN0c0JveCggdGhpcy5ib3VuZGluZ0JveCApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIHRlc3QgZm9yIGludGVyc2VjdGlvbnMgd2l0aCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5fY29tcHV0ZUludGVyc2VjdGlvbnMoIHJheWNhc3RlciwgaW50ZXJzZWN0cywgX3JheSApO1xuXG5cdH1cblxuXHRnZXRWZXJ0ZXhQb3NpdGlvbiggaW5kZXgsIHRhcmdldCApIHtcblxuXHRcdHN1cGVyLmdldFZlcnRleFBvc2l0aW9uKCBpbmRleCwgdGFyZ2V0ICk7XG5cblx0XHR0aGlzLmFwcGx5Qm9uZVRyYW5zZm9ybSggaW5kZXgsIHRhcmdldCApO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0YmluZCggc2tlbGV0b24sIGJpbmRNYXRyaXggKSB7XG5cblx0XHR0aGlzLnNrZWxldG9uID0gc2tlbGV0b247XG5cblx0XHRpZiAoIGJpbmRNYXRyaXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHR0aGlzLnNrZWxldG9uLmNhbGN1bGF0ZUludmVyc2VzKCk7XG5cblx0XHRcdGJpbmRNYXRyaXggPSB0aGlzLm1hdHJpeFdvcmxkO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5iaW5kTWF0cml4LmNvcHkoIGJpbmRNYXRyaXggKTtcblx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmNvcHkoIGJpbmRNYXRyaXggKS5pbnZlcnQoKTtcblxuXHR9XG5cblx0cG9zZSgpIHtcblxuXHRcdHRoaXMuc2tlbGV0b24ucG9zZSgpO1xuXG5cdH1cblxuXHRub3JtYWxpemVTa2luV2VpZ2h0cygpIHtcblxuXHRcdGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3I0KCk7XG5cblx0XHRjb25zdCBza2luV2VpZ2h0ID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnNraW5XZWlnaHQ7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBza2luV2VpZ2h0LmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHNraW5XZWlnaHQsIGkgKTtcblxuXHRcdFx0Y29uc3Qgc2NhbGUgPSAxLjAgLyB2ZWN0b3IubWFuaGF0dGFuTGVuZ3RoKCk7XG5cblx0XHRcdGlmICggc2NhbGUgIT09IEluZmluaXR5ICkge1xuXG5cdFx0XHRcdHZlY3Rvci5tdWx0aXBseVNjYWxhciggc2NhbGUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2ZWN0b3Iuc2V0KCAxLCAwLCAwLCAwICk7IC8vIGRvIHNvbWV0aGluZyByZWFzb25hYmxlXG5cblx0XHRcdH1cblxuXHRcdFx0c2tpbldlaWdodC5zZXRYWVpXKCBpLCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56LCB2ZWN0b3IudyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHRcdGlmICggdGhpcy5iaW5kTW9kZSA9PT0gQXR0YWNoZWRCaW5kTW9kZSApIHtcblxuXHRcdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5jb3B5KCB0aGlzLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0XHR9IGVsc2UgaWYgKCB0aGlzLmJpbmRNb2RlID09PSBEZXRhY2hlZEJpbmRNb2RlICkge1xuXG5cdFx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmNvcHkoIHRoaXMuYmluZE1hdHJpeCApLmludmVydCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tpbm5lZE1lc2g6IFVucmVjb2duaXplZCBiaW5kTW9kZTogJyArIHRoaXMuYmluZE1vZGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0YXBwbHlCb25lVHJhbnNmb3JtKCBpbmRleCwgdmVjdG9yICkge1xuXG5cdFx0Y29uc3Qgc2tlbGV0b24gPSB0aGlzLnNrZWxldG9uO1xuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdF9za2luSW5kZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luSW5kZXgsIGluZGV4ICk7XG5cdFx0X3NraW5XZWlnaHQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0LCBpbmRleCApO1xuXG5cdFx0X2Jhc2VQb3NpdGlvbi5jb3B5KCB2ZWN0b3IgKS5hcHBseU1hdHJpeDQoIHRoaXMuYmluZE1hdHJpeCApO1xuXG5cdFx0dmVjdG9yLnNldCggMCwgMCwgMCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3Qgd2VpZ2h0ID0gX3NraW5XZWlnaHQuZ2V0Q29tcG9uZW50KCBpICk7XG5cblx0XHRcdGlmICggd2VpZ2h0ICE9PSAwICkge1xuXG5cdFx0XHRcdGNvbnN0IGJvbmVJbmRleCA9IF9za2luSW5kZXguZ2V0Q29tcG9uZW50KCBpICk7XG5cblx0XHRcdFx0X21hdHJpeDQubXVsdGlwbHlNYXRyaWNlcyggc2tlbGV0b24uYm9uZXNbIGJvbmVJbmRleCBdLm1hdHJpeFdvcmxkLCBza2VsZXRvbi5ib25lSW52ZXJzZXNbIGJvbmVJbmRleCBdICk7XG5cblx0XHRcdFx0dmVjdG9yLmFkZFNjYWxlZFZlY3RvciggX3ZlY3RvcjMuY29weSggX2Jhc2VQb3NpdGlvbiApLmFwcGx5TWF0cml4NCggX21hdHJpeDQgKSwgd2VpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzLmJpbmRNYXRyaXhJbnZlcnNlICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFNraW5uZWRNZXNoIH07XG4iLCJpbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xuXG5jbGFzcyBCb25lIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNCb25lID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdCb25lJztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQm9uZSB9O1xuIiwiaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBOZWFyZXN0RmlsdGVyIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuY2xhc3MgRGF0YVRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3RvciggZGF0YSA9IG51bGwsIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZm9ybWF0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXIsIG1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXIsIGFuaXNvdHJvcHksIGNvbG9yU3BhY2UgKSB7XG5cblx0XHRzdXBlciggbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICk7XG5cblx0XHR0aGlzLmlzRGF0YVRleHR1cmUgPSB0cnVlO1xuXG5cdFx0dGhpcy5pbWFnZSA9IHsgZGF0YTogZGF0YSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSAxO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBEYXRhVGV4dHVyZSB9O1xuIiwiaW1wb3J0IHtcblx0UkdCQUZvcm1hdCxcblx0RmxvYXRUeXBlXG59IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBCb25lIH0gZnJvbSAnLi9Cb25lLmpzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXRoL01hdHJpeDQuanMnO1xuaW1wb3J0IHsgRGF0YVRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9EYXRhVGV4dHVyZS5qcyc7XG5pbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuXG5jb25zdCBfb2Zmc2V0TWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2lkZW50aXR5TWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuXG5jbGFzcyBTa2VsZXRvbiB7XG5cblx0Y29uc3RydWN0b3IoIGJvbmVzID0gW10sIGJvbmVJbnZlcnNlcyA9IFtdICkge1xuXG5cdFx0dGhpcy51dWlkID0gTWF0aFV0aWxzLmdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0dGhpcy5ib25lcyA9IGJvbmVzLnNsaWNlKCAwICk7XG5cdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBib25lSW52ZXJzZXM7XG5cdFx0dGhpcy5ib25lTWF0cmljZXMgPSBudWxsO1xuXG5cdFx0dGhpcy5ib25lVGV4dHVyZSA9IG51bGw7XG5cblx0XHR0aGlzLmluaXQoKTtcblxuXHR9XG5cblx0aW5pdCgpIHtcblxuXHRcdGNvbnN0IGJvbmVzID0gdGhpcy5ib25lcztcblx0XHRjb25zdCBib25lSW52ZXJzZXMgPSB0aGlzLmJvbmVJbnZlcnNlcztcblxuXHRcdHRoaXMuYm9uZU1hdHJpY2VzID0gbmV3IEZsb2F0MzJBcnJheSggYm9uZXMubGVuZ3RoICogMTYgKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBpbnZlcnNlIGJvbmUgbWF0cmljZXMgaWYgbmVjZXNzYXJ5XG5cblx0XHRpZiAoIGJvbmVJbnZlcnNlcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdHRoaXMuY2FsY3VsYXRlSW52ZXJzZXMoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGhhbmRsZSBzcGVjaWFsIGNhc2VcblxuXHRcdFx0aWYgKCBib25lcy5sZW5ndGggIT09IGJvbmVJbnZlcnNlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tlbGV0b246IE51bWJlciBvZiBpbnZlcnNlIGJvbmUgbWF0cmljZXMgZG9lcyBub3QgbWF0Y2ggYW1vdW50IG9mIGJvbmVzLicgKTtcblxuXHRcdFx0XHR0aGlzLmJvbmVJbnZlcnNlcyA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dGhpcy5ib25lSW52ZXJzZXMucHVzaCggbmV3IE1hdHJpeDQoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRjYWxjdWxhdGVJbnZlcnNlcygpIHtcblxuXHRcdHRoaXMuYm9uZUludmVyc2VzLmxlbmd0aCA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgaW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRcdGlmICggdGhpcy5ib25lc1sgaSBdICkge1xuXG5cdFx0XHRcdGludmVyc2UuY29weSggdGhpcy5ib25lc1sgaSBdLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ib25lSW52ZXJzZXMucHVzaCggaW52ZXJzZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRwb3NlKCkge1xuXG5cdFx0Ly8gcmVjb3ZlciB0aGUgYmluZC10aW1lIHdvcmxkIG1hdHJpY2VzXG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYm9uZSA9IHRoaXMuYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lICkge1xuXG5cdFx0XHRcdGJvbmUubWF0cml4V29ybGQuY29weSggdGhpcy5ib25lSW52ZXJzZXNbIGkgXSApLmludmVydCgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBjb21wdXRlIHRoZSBsb2NhbCBtYXRyaWNlcywgcG9zaXRpb25zLCByb3RhdGlvbnMgYW5kIHNjYWxlc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGJvbmUgPSB0aGlzLmJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZSApIHtcblxuXHRcdFx0XHRpZiAoIGJvbmUucGFyZW50ICYmIGJvbmUucGFyZW50LmlzQm9uZSApIHtcblxuXHRcdFx0XHRcdGJvbmUubWF0cml4LmNvcHkoIGJvbmUucGFyZW50Lm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cdFx0XHRcdFx0Ym9uZS5tYXRyaXgubXVsdGlwbHkoIGJvbmUubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ym9uZS5tYXRyaXguY29weSggYm9uZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRib25lLm1hdHJpeC5kZWNvbXBvc2UoIGJvbmUucG9zaXRpb24sIGJvbmUucXVhdGVybmlvbiwgYm9uZS5zY2FsZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHVwZGF0ZSgpIHtcblxuXHRcdGNvbnN0IGJvbmVzID0gdGhpcy5ib25lcztcblx0XHRjb25zdCBib25lSW52ZXJzZXMgPSB0aGlzLmJvbmVJbnZlcnNlcztcblx0XHRjb25zdCBib25lTWF0cmljZXMgPSB0aGlzLmJvbmVNYXRyaWNlcztcblx0XHRjb25zdCBib25lVGV4dHVyZSA9IHRoaXMuYm9uZVRleHR1cmU7XG5cblx0XHQvLyBmbGF0dGVuIGJvbmUgbWF0cmljZXMgdG8gYXJyYXlcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Ly8gY29tcHV0ZSB0aGUgb2Zmc2V0IGJldHdlZW4gdGhlIGN1cnJlbnQgYW5kIHRoZSBvcmlnaW5hbCB0cmFuc2Zvcm1cblxuXHRcdFx0Y29uc3QgbWF0cml4ID0gYm9uZXNbIGkgXSA/IGJvbmVzWyBpIF0ubWF0cml4V29ybGQgOiBfaWRlbnRpdHlNYXRyaXg7XG5cblx0XHRcdF9vZmZzZXRNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggbWF0cml4LCBib25lSW52ZXJzZXNbIGkgXSApO1xuXHRcdFx0X29mZnNldE1hdHJpeC50b0FycmF5KCBib25lTWF0cmljZXMsIGkgKiAxNiApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBib25lVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ym9uZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgU2tlbGV0b24oIHRoaXMuYm9uZXMsIHRoaXMuYm9uZUludmVyc2VzICk7XG5cblx0fVxuXG5cdGNvbXB1dGVCb25lVGV4dHVyZSgpIHtcblxuXHRcdC8vIGxheW91dCAoMSBtYXRyaXggPSA0IHBpeGVscylcblx0XHQvLyAgICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgKD0+IGNvbHVtbjEsIGNvbHVtbjIsIGNvbHVtbjMsIGNvbHVtbjQpXG5cdFx0Ly8gIHdpdGggIDh4OCAgcGl4ZWwgdGV4dHVyZSBtYXggICAxNiBib25lcyAqIDQgcGl4ZWxzID0gICg4ICogOClcblx0XHQvLyAgICAgICAxNngxNiBwaXhlbCB0ZXh0dXJlIG1heCAgIDY0IGJvbmVzICogNCBwaXhlbHMgPSAoMTYgKiAxNilcblx0XHQvLyAgICAgICAzMngzMiBwaXhlbCB0ZXh0dXJlIG1heCAgMjU2IGJvbmVzICogNCBwaXhlbHMgPSAoMzIgKiAzMilcblx0XHQvLyAgICAgICA2NHg2NCBwaXhlbCB0ZXh0dXJlIG1heCAxMDI0IGJvbmVzICogNCBwaXhlbHMgPSAoNjQgKiA2NClcblxuXHRcdGxldCBzaXplID0gTWF0aC5zcXJ0KCB0aGlzLmJvbmVzLmxlbmd0aCAqIDQgKTsgLy8gNCBwaXhlbHMgbmVlZGVkIGZvciAxIG1hdHJpeFxuXHRcdHNpemUgPSBNYXRoLmNlaWwoIHNpemUgLyA0ICkgKiA0O1xuXHRcdHNpemUgPSBNYXRoLm1heCggc2l6ZSwgNCApO1xuXG5cdFx0Y29uc3QgYm9uZU1hdHJpY2VzID0gbmV3IEZsb2F0MzJBcnJheSggc2l6ZSAqIHNpemUgKiA0ICk7IC8vIDQgZmxvYXRzIHBlciBSR0JBIHBpeGVsXG5cdFx0Ym9uZU1hdHJpY2VzLnNldCggdGhpcy5ib25lTWF0cmljZXMgKTsgLy8gY29weSBjdXJyZW50IHZhbHVlc1xuXG5cdFx0Y29uc3QgYm9uZVRleHR1cmUgPSBuZXcgRGF0YVRleHR1cmUoIGJvbmVNYXRyaWNlcywgc2l6ZSwgc2l6ZSwgUkdCQUZvcm1hdCwgRmxvYXRUeXBlICk7XG5cdFx0Ym9uZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5ib25lTWF0cmljZXMgPSBib25lTWF0cmljZXM7XG5cdFx0dGhpcy5ib25lVGV4dHVyZSA9IGJvbmVUZXh0dXJlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldEJvbmVCeU5hbWUoIG5hbWUgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYm9uZSA9IHRoaXMuYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lLm5hbWUgPT09IG5hbWUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGJvbmU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0fVxuXG5cdGRpc3Bvc2UoICkge1xuXG5cdFx0aWYgKCB0aGlzLmJvbmVUZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvbmVUZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdFx0dGhpcy5ib25lVGV4dHVyZSA9IG51bGw7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uLCBib25lcyApIHtcblxuXHRcdHRoaXMudXVpZCA9IGpzb24udXVpZDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24uYm9uZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdXVpZCA9IGpzb24uYm9uZXNbIGkgXTtcblx0XHRcdGxldCBib25lID0gYm9uZXNbIHV1aWQgXTtcblxuXHRcdFx0aWYgKCBib25lID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tlbGV0b246IE5vIGJvbmUgZm91bmQgd2l0aCBVVUlEOicsIHV1aWQgKTtcblx0XHRcdFx0Ym9uZSA9IG5ldyBCb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ib25lcy5wdXNoKCBib25lICk7XG5cdFx0XHR0aGlzLmJvbmVJbnZlcnNlcy5wdXNoKCBuZXcgTWF0cml4NCgpLmZyb21BcnJheSgganNvbi5ib25lSW52ZXJzZXNbIGkgXSApICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmluaXQoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC42LFxuXHRcdFx0XHR0eXBlOiAnU2tlbGV0b24nLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdTa2VsZXRvbi50b0pTT04nXG5cdFx0XHR9LFxuXHRcdFx0Ym9uZXM6IFtdLFxuXHRcdFx0Ym9uZUludmVyc2VzOiBbXVxuXHRcdH07XG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cblx0XHRjb25zdCBib25lcyA9IHRoaXMuYm9uZXM7XG5cdFx0Y29uc3QgYm9uZUludmVyc2VzID0gdGhpcy5ib25lSW52ZXJzZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBib25lcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBib25lID0gYm9uZXNbIGkgXTtcblx0XHRcdGRhdGEuYm9uZXMucHVzaCggYm9uZS51dWlkICk7XG5cblx0XHRcdGNvbnN0IGJvbmVJbnZlcnNlID0gYm9uZUludmVyc2VzWyBpIF07XG5cdFx0XHRkYXRhLmJvbmVJbnZlcnNlcy5wdXNoKCBib25lSW52ZXJzZS50b0FycmF5KCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBTa2VsZXRvbiB9O1xuIiwiaW1wb3J0IHsgQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuXG5jbGFzcyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQsIG1lc2hQZXJBdHRyaWJ1dGUgPSAxICkge1xuXG5cdFx0c3VwZXIoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdFx0dGhpcy5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cblx0XHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBtZXNoUGVyQXR0cmlidXRlO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IHNvdXJjZS5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEubWVzaFBlckF0dHJpYnV0ZSA9IHRoaXMubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdGRhdGEuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSB9O1xuIiwiaW1wb3J0IHsgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4vTWVzaC5qcyc7XG5pbXBvcnQgeyBCb3gzIH0gZnJvbSAnLi4vbWF0aC9Cb3gzLmpzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXRoL01hdHJpeDQuanMnO1xuaW1wb3J0IHsgU3BoZXJlIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmUuanMnO1xuaW1wb3J0IHsgRGF0YVRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9EYXRhVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBGbG9hdFR5cGUsIFJlZEZvcm1hdCB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IF9pbnN0YW5jZUxvY2FsTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2luc3RhbmNlV29ybGRNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5cbmNvbnN0IF9pbnN0YW5jZUludGVyc2VjdHMgPSBbXTtcblxuY29uc3QgX2JveDMgPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7XG5jb25zdCBfaWRlbnRpdHkgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfbWVzaCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1lc2goKTtcbmNvbnN0IF9zcGhlcmUgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcblxuY2xhc3MgSW5zdGFuY2VkTWVzaCBleHRlbmRzIE1lc2gge1xuXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGNvdW50ICkge1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy5pc0luc3RhbmNlZE1lc2ggPSB0cnVlO1xuXG5cdFx0dGhpcy5pbnN0YW5jZU1hdHJpeCA9IG5ldyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIGNvdW50ICogMTYgKSwgMTYgKTtcblx0XHR0aGlzLmluc3RhbmNlQ29sb3IgPSBudWxsO1xuXHRcdHRoaXMubW9ycGhUZXh0dXJlID0gbnVsbDtcblxuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcblxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuc2V0TWF0cml4QXQoIGksIF9pZGVudGl0eSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjb21wdXRlQm91bmRpbmdCb3goKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgY291bnQgPSB0aGlzLmNvdW50O1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbmV3IEJveDMoKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ib3VuZGluZ0JveC5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvdW50OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpLCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xuXG5cdFx0XHRfYm94My5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ0JveCApLmFwcGx5TWF0cml4NCggX2luc3RhbmNlTG9jYWxNYXRyaXggKTtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC51bmlvbiggX2JveDMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IGNvdW50ID0gdGhpcy5jb3VudDtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSB7XG5cblx0XHRcdGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvdW50OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpLCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xuXG5cdFx0XHRfc3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICkuYXBwbHlNYXRyaXg0KCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlLnVuaW9uKCBfc3BoZXJlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuaW5zdGFuY2VNYXRyaXguY29weSggc291cmNlLmluc3RhbmNlTWF0cml4ICk7XG5cblx0XHRpZiAoIHNvdXJjZS5tb3JwaFRleHR1cmUgIT09IG51bGwgKSB0aGlzLm1vcnBoVGV4dHVyZSA9IHNvdXJjZS5tb3JwaFRleHR1cmUuY2xvbmUoKTtcblx0XHRpZiAoIHNvdXJjZS5pbnN0YW5jZUNvbG9yICE9PSBudWxsICkgdGhpcy5pbnN0YW5jZUNvbG9yID0gc291cmNlLmluc3RhbmNlQ29sb3IuY2xvbmUoKTtcblxuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XG5cblx0XHRpZiAoIHNvdXJjZS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHRoaXMuYm91bmRpbmdCb3ggPSBzb3VyY2UuYm91bmRpbmdCb3guY2xvbmUoKTtcblx0XHRpZiAoIHNvdXJjZS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHRoaXMuYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRDb2xvckF0KCBpbmRleCwgY29sb3IgKSB7XG5cblx0XHRjb2xvci5mcm9tQXJyYXkoIHRoaXMuaW5zdGFuY2VDb2xvci5hcnJheSwgaW5kZXggKiAzICk7XG5cblx0fVxuXG5cdGdldE1hdHJpeEF0KCBpbmRleCwgbWF0cml4ICkge1xuXG5cdFx0bWF0cml4LmZyb21BcnJheSggdGhpcy5pbnN0YW5jZU1hdHJpeC5hcnJheSwgaW5kZXggKiAxNiApO1xuXG5cdH1cblxuXHRnZXRNb3JwaEF0KCBpbmRleCwgb2JqZWN0ICkge1xuXG5cdFx0Y29uc3Qgb2JqZWN0SW5mbHVlbmNlcyA9IG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7XG5cblx0XHRjb25zdCBhcnJheSA9IHRoaXMubW9ycGhUZXh0dXJlLnNvdXJjZS5kYXRhLmRhdGE7XG5cblx0XHRjb25zdCBsZW4gPSBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aCArIDE7IC8vIEFsbCBpbmZsdWVuY2VzICsgdGhlIGJhc2VJbmZsdWVuY2VTdW1cblxuXHRcdGNvbnN0IGRhdGFJbmRleCA9IGluZGV4ICogbGVuICsgMTsgLy8gU2tpcCB0aGUgYmFzZUluZmx1ZW5jZVN1bSBhdCB0aGUgYmVnaW5uaW5nXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0b2JqZWN0SW5mbHVlbmNlc1sgaSBdID0gYXJyYXlbIGRhdGFJbmRleCArIGkgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXHRcdGNvbnN0IHJheWNhc3RUaW1lcyA9IHRoaXMuY291bnQ7XG5cblx0XHRfbWVzaC5nZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0X21lc2gubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuXG5cdFx0aWYgKCBfbWVzaC5tYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Ly8gdGVzdCB3aXRoIGJvdW5kaW5nIHNwaGVyZSBmaXJzdFxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdF9zcGhlcmUuY29weSggdGhpcy5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdF9zcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0aWYgKCByYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUgKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBub3cgdGVzdCBlYWNoIGluc3RhbmNlXG5cblx0XHRmb3IgKCBsZXQgaW5zdGFuY2VJZCA9IDA7IGluc3RhbmNlSWQgPCByYXljYXN0VGltZXM7IGluc3RhbmNlSWQgKysgKSB7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgd29ybGQgbWF0cml4IGZvciBlYWNoIGluc3RhbmNlXG5cblx0XHRcdHRoaXMuZ2V0TWF0cml4QXQoIGluc3RhbmNlSWQsIF9pbnN0YW5jZUxvY2FsTWF0cml4ICk7XG5cblx0XHRcdF9pbnN0YW5jZVdvcmxkTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeFdvcmxkLCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xuXG5cdFx0XHQvLyB0aGUgbWVzaCByZXByZXNlbnRzIHRoaXMgc2luZ2xlIGluc3RhbmNlXG5cblx0XHRcdF9tZXNoLm1hdHJpeFdvcmxkID0gX2luc3RhbmNlV29ybGRNYXRyaXg7XG5cblx0XHRcdF9tZXNoLnJheWNhc3QoIHJheWNhc3RlciwgX2luc3RhbmNlSW50ZXJzZWN0cyApO1xuXG5cdFx0XHQvLyBwcm9jZXNzIHRoZSByZXN1bHQgb2YgcmF5Y2FzdFxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBfaW5zdGFuY2VJbnRlcnNlY3RzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW50ZXJzZWN0ID0gX2luc3RhbmNlSW50ZXJzZWN0c1sgaSBdO1xuXHRcdFx0XHRpbnRlcnNlY3QuaW5zdGFuY2VJZCA9IGluc3RhbmNlSWQ7XG5cdFx0XHRcdGludGVyc2VjdC5vYmplY3QgPSB0aGlzO1xuXHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9pbnN0YW5jZUludGVyc2VjdHMubGVuZ3RoID0gMDtcblxuXHRcdH1cblxuXHR9XG5cblx0c2V0Q29sb3JBdCggaW5kZXgsIGNvbG9yICkge1xuXG5cdFx0aWYgKCB0aGlzLmluc3RhbmNlQ29sb3IgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuaW5zdGFuY2VDb2xvciA9IG5ldyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIHRoaXMuaW5zdGFuY2VNYXRyaXguY291bnQgKiAzICksIDMgKTtcblxuXHRcdH1cblxuXHRcdGNvbG9yLnRvQXJyYXkoIHRoaXMuaW5zdGFuY2VDb2xvci5hcnJheSwgaW5kZXggKiAzICk7XG5cblx0fVxuXG5cdHNldE1hdHJpeEF0KCBpbmRleCwgbWF0cml4ICkge1xuXG5cdFx0bWF0cml4LnRvQXJyYXkoIHRoaXMuaW5zdGFuY2VNYXRyaXguYXJyYXksIGluZGV4ICogMTYgKTtcblxuXHR9XG5cblx0c2V0TW9ycGhBdCggaW5kZXgsIG9iamVjdCApIHtcblxuXHRcdGNvbnN0IG9iamVjdEluZmx1ZW5jZXMgPSBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzO1xuXG5cdFx0Y29uc3QgbGVuID0gb2JqZWN0SW5mbHVlbmNlcy5sZW5ndGggKyAxOyAvLyBtb3JwaEJhc2VJbmZsdWVuY2UgKyBhbGwgaW5mbHVlbmNlc1xuXG5cdFx0aWYgKCB0aGlzLm1vcnBoVGV4dHVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5tb3JwaFRleHR1cmUgPSBuZXcgRGF0YVRleHR1cmUoIG5ldyBGbG9hdDMyQXJyYXkoIGxlbiAqIHRoaXMuY291bnQgKSwgbGVuLCB0aGlzLmNvdW50LCBSZWRGb3JtYXQsIEZsb2F0VHlwZSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXJyYXkgPSB0aGlzLm1vcnBoVGV4dHVyZS5zb3VyY2UuZGF0YS5kYXRhO1xuXG5cdFx0bGV0IG1vcnBoSW5mbHVlbmNlc1N1bSA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0bW9ycGhJbmZsdWVuY2VzU3VtICs9IG9iamVjdEluZmx1ZW5jZXNbIGkgXTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG1vcnBoQmFzZUluZmx1ZW5jZSA9IHRoaXMuZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgPyAxIDogMSAtIG1vcnBoSW5mbHVlbmNlc1N1bTtcblxuXHRcdGNvbnN0IGRhdGFJbmRleCA9IGxlbiAqIGluZGV4O1xuXG5cdFx0YXJyYXlbIGRhdGFJbmRleCBdID0gbW9ycGhCYXNlSW5mbHVlbmNlO1xuXG5cdFx0YXJyYXkuc2V0KCBvYmplY3RJbmZsdWVuY2VzLCBkYXRhSW5kZXggKyAxICk7XG5cblx0fVxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0cygpIHtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdFx0aWYgKCB0aGlzLm1vcnBoVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5tb3JwaFRleHR1cmUuZGlzcG9zZSgpO1xuXHRcdFx0dGhpcy5tb3JwaFRleHR1cmUgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEluc3RhbmNlZE1lc2ggfTtcbiIsImltcG9ydCB7IEJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBEYXRhVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL0RhdGFUZXh0dXJlLmpzJztcbmltcG9ydCB7IEZsb2F0VHlwZSwgUmVkSW50ZWdlckZvcm1hdCwgVW5zaWduZWRJbnRUeXBlIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXRoL01hdHJpeDQuanMnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4vTWVzaC5qcyc7XG5pbXBvcnQgeyBSR0JBRm9ybWF0IH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IENvbG9yTWFuYWdlbWVudCB9IGZyb20gJy4uL21hdGgvQ29sb3JNYW5hZ2VtZW50LmpzJztcbmltcG9ydCB7IEJveDMgfSBmcm9tICcuLi9tYXRoL0JveDMuanMnO1xuaW1wb3J0IHsgU3BoZXJlIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmUuanMnO1xuaW1wb3J0IHsgRnJ1c3R1bSB9IGZyb20gJy4uL21hdGgvRnJ1c3R1bS5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5cbmZ1bmN0aW9uIHNvcnRPcGFxdWUoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGEueiAtIGIuejtcblxufVxuXG5mdW5jdGlvbiBzb3J0VHJhbnNwYXJlbnQoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGIueiAtIGEuejtcblxufVxuXG5jbGFzcyBNdWx0aURyYXdSZW5kZXJMaXN0IHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuaW5kZXggPSAwO1xuXHRcdHRoaXMucG9vbCA9IFtdO1xuXHRcdHRoaXMubGlzdCA9IFtdO1xuXG5cdH1cblxuXHRwdXNoKCBkcmF3UmFuZ2UsIHosIGluZGV4ICkge1xuXG5cdFx0Y29uc3QgcG9vbCA9IHRoaXMucG9vbDtcblx0XHRjb25zdCBsaXN0ID0gdGhpcy5saXN0O1xuXHRcdGlmICggdGhpcy5pbmRleCA+PSBwb29sLmxlbmd0aCApIHtcblxuXHRcdFx0cG9vbC5wdXNoKCB7XG5cblx0XHRcdFx0c3RhcnQ6IC0gMSxcblx0XHRcdFx0Y291bnQ6IC0gMSxcblx0XHRcdFx0ejogLSAxLFxuXHRcdFx0XHRpbmRleDogLSAxLFxuXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpdGVtID0gcG9vbFsgdGhpcy5pbmRleCBdO1xuXHRcdGxpc3QucHVzaCggaXRlbSApO1xuXHRcdHRoaXMuaW5kZXggKys7XG5cblx0XHRpdGVtLnN0YXJ0ID0gZHJhd1JhbmdlLnN0YXJ0O1xuXHRcdGl0ZW0uY291bnQgPSBkcmF3UmFuZ2UuY291bnQ7XG5cdFx0aXRlbS56ID0gejtcblx0XHRpdGVtLmluZGV4ID0gaW5kZXg7XG5cblx0fVxuXG5cdHJlc2V0KCkge1xuXG5cdFx0dGhpcy5saXN0Lmxlbmd0aCA9IDA7XG5cdFx0dGhpcy5pbmRleCA9IDA7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9tYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfaW52TWF0cml4V29ybGQgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfaWRlbnRpdHlNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfd2hpdGVDb2xvciA9IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAxLCAxLCAxICk7XG5jb25zdCBfcHJvalNjcmVlbk1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9mcnVzdHVtID0gLypAX19QVVJFX18qLyBuZXcgRnJ1c3R1bSgpO1xuY29uc3QgX2JveCA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcbmNvbnN0IF9zcGhlcmUgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfZm9yd2FyZCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF90ZW1wID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3JlbmRlckxpc3QgPSAvKkBfX1BVUkVfXyovIG5ldyBNdWx0aURyYXdSZW5kZXJMaXN0KCk7XG5jb25zdCBfbWVzaCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1lc2goKTtcbmNvbnN0IF9iYXRjaEludGVyc2VjdHMgPSBbXTtcblxuLy8gQFRPRE86IFNraW5uZWRNZXNoIHN1cHBvcnQ/XG4vLyBAVE9ETzogZ2VvbWV0cnkuZ3JvdXBzIHN1cHBvcnQ/XG4vLyBAVE9ETzogZ2VvbWV0cnkuZHJhd1JhbmdlIHN1cHBvcnQ/XG4vLyBAVE9ETzogZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzIHN1cHBvcnQ/XG4vLyBAVE9ETzogU3VwcG9ydCB1bmlmb3JtIHBhcmFtZXRlciBwZXIgZ2VvbWV0cnlcbi8vIEBUT0RPOiBBZGQgYW4gXCJvcHRpbWl6ZVwiIGZ1bmN0aW9uIHRvIHBhY2sgZ2VvbWV0cnkgYW5kIHJlbW92ZSBkYXRhIGdhcHNcblxuLy8gY29waWVzIGRhdGEgZnJvbSBhdHRyaWJ1dGUgXCJzcmNcIiBpbnRvIFwidGFyZ2V0XCIgc3RhcnRpbmcgYXQgXCJ0YXJnZXRPZmZzZXRcIlxuZnVuY3Rpb24gY29weUF0dHJpYnV0ZURhdGEoIHNyYywgdGFyZ2V0LCB0YXJnZXRPZmZzZXQgPSAwICkge1xuXG5cdGNvbnN0IGl0ZW1TaXplID0gdGFyZ2V0Lml0ZW1TaXplO1xuXHRpZiAoIHNyYy5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIHx8IHNyYy5hcnJheS5jb25zdHJ1Y3RvciAhPT0gdGFyZ2V0LmFycmF5LmNvbnN0cnVjdG9yICkge1xuXG5cdFx0Ly8gdXNlIHRoZSBjb21wb25lbnQgZ2V0dGVycyBhbmQgc2V0dGVycyBpZiB0aGUgYXJyYXkgZGF0YSBjYW5ub3Rcblx0XHQvLyBiZSBjb3BpZWQgZGlyZWN0bHlcblx0XHRjb25zdCB2ZXJ0ZXhDb3VudCA9IHNyYy5jb3VudDtcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgaSArKyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGMgPSAwOyBjIDwgaXRlbVNpemU7IGMgKysgKSB7XG5cblx0XHRcdFx0dGFyZ2V0LnNldENvbXBvbmVudCggaSArIHRhcmdldE9mZnNldCwgYywgc3JjLmdldENvbXBvbmVudCggaSwgYyApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gZmFzdGVyIGNvcHkgYXBwcm9hY2ggdXNpbmcgdHlwZWQgYXJyYXkgc2V0IGZ1bmN0aW9uXG5cdFx0dGFyZ2V0LmFycmF5LnNldCggc3JjLmFycmF5LCB0YXJnZXRPZmZzZXQgKiBpdGVtU2l6ZSApO1xuXG5cdH1cblxuXHR0YXJnZXQubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG59XG5cbmNsYXNzIEJhdGNoZWRNZXNoIGV4dGVuZHMgTWVzaCB7XG5cblx0Z2V0IG1heEluc3RhbmNlQ291bnQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fbWF4SW5zdGFuY2VDb3VudDtcblxuXHR9XG5cblx0Y29uc3RydWN0b3IoIG1heEluc3RhbmNlQ291bnQsIG1heFZlcnRleENvdW50LCBtYXhJbmRleENvdW50ID0gbWF4VmVydGV4Q291bnQgKiAyLCBtYXRlcmlhbCApIHtcblxuXHRcdHN1cGVyKCBuZXcgQnVmZmVyR2VvbWV0cnkoKSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMuaXNCYXRjaGVkTWVzaCA9IHRydWU7XG5cdFx0dGhpcy5wZXJPYmplY3RGcnVzdHVtQ3VsbGVkID0gdHJ1ZTtcblx0XHR0aGlzLnNvcnRPYmplY3RzID0gdHJ1ZTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblx0XHR0aGlzLmN1c3RvbVNvcnQgPSBudWxsO1xuXG5cdFx0Ly8gc3RvcmVzIHZpc2libGUsIGFjdGl2ZSwgYW5kIGdlb21ldHJ5IGlkIHBlciBvYmplY3Rcblx0XHR0aGlzLl9kcmF3SW5mbyA9IFtdO1xuXG5cdFx0Ly8gZ2VvbWV0cnkgaW5mb3JtYXRpb25cblx0XHR0aGlzLl9kcmF3UmFuZ2VzID0gW107XG5cdFx0dGhpcy5fcmVzZXJ2ZWRSYW5nZXMgPSBbXTtcblx0XHR0aGlzLl9ib3VuZHMgPSBbXTtcblxuXHRcdHRoaXMuX21heEluc3RhbmNlQ291bnQgPSBtYXhJbnN0YW5jZUNvdW50O1xuXHRcdHRoaXMuX21heFZlcnRleENvdW50ID0gbWF4VmVydGV4Q291bnQ7XG5cdFx0dGhpcy5fbWF4SW5kZXhDb3VudCA9IG1heEluZGV4Q291bnQ7XG5cblx0XHR0aGlzLl9nZW9tZXRyeUluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5fZ2VvbWV0cnlDb3VudCA9IDA7XG5cdFx0dGhpcy5fbXVsdGlEcmF3Q291bnRzID0gbmV3IEludDMyQXJyYXkoIG1heEluc3RhbmNlQ291bnQgKTtcblx0XHR0aGlzLl9tdWx0aURyYXdTdGFydHMgPSBuZXcgSW50MzJBcnJheSggbWF4SW5zdGFuY2VDb3VudCApO1xuXHRcdHRoaXMuX211bHRpRHJhd0NvdW50ID0gMDtcblx0XHR0aGlzLl9tdWx0aURyYXdJbnN0YW5jZXMgPSBudWxsO1xuXHRcdHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdC8vIExvY2FsIG1hdHJpeCBwZXIgZ2VvbWV0cnkgYnkgdXNpbmcgZGF0YSB0ZXh0dXJlXG5cdFx0dGhpcy5fbWF0cmljZXNUZXh0dXJlID0gbnVsbDtcblx0XHR0aGlzLl9pbmRpcmVjdFRleHR1cmUgPSBudWxsO1xuXHRcdHRoaXMuX2NvbG9yc1RleHR1cmUgPSBudWxsO1xuXG5cdFx0dGhpcy5faW5pdE1hdHJpY2VzVGV4dHVyZSgpO1xuXHRcdHRoaXMuX2luaXRJbmRpcmVjdFRleHR1cmUoKTtcblxuXHR9XG5cblx0X2luaXRNYXRyaWNlc1RleHR1cmUoKSB7XG5cblx0XHQvLyBsYXlvdXQgKDEgbWF0cml4ID0gNCBwaXhlbHMpXG5cdFx0Ly8gICAgICBSR0JBIFJHQkEgUkdCQSBSR0JBICg9PiBjb2x1bW4xLCBjb2x1bW4yLCBjb2x1bW4zLCBjb2x1bW40KVxuXHRcdC8vICB3aXRoICA4eDggIHBpeGVsIHRleHR1cmUgbWF4ICAgMTYgbWF0cmljZXMgKiA0IHBpeGVscyA9ICAoOCAqIDgpXG5cdFx0Ly8gICAgICAgMTZ4MTYgcGl4ZWwgdGV4dHVyZSBtYXggICA2NCBtYXRyaWNlcyAqIDQgcGl4ZWxzID0gKDE2ICogMTYpXG5cdFx0Ly8gICAgICAgMzJ4MzIgcGl4ZWwgdGV4dHVyZSBtYXggIDI1NiBtYXRyaWNlcyAqIDQgcGl4ZWxzID0gKDMyICogMzIpXG5cdFx0Ly8gICAgICAgNjR4NjQgcGl4ZWwgdGV4dHVyZSBtYXggMTAyNCBtYXRyaWNlcyAqIDQgcGl4ZWxzID0gKDY0ICogNjQpXG5cblx0XHRsZXQgc2l6ZSA9IE1hdGguc3FydCggdGhpcy5fbWF4SW5zdGFuY2VDb3VudCAqIDQgKTsgLy8gNCBwaXhlbHMgbmVlZGVkIGZvciAxIG1hdHJpeFxuXHRcdHNpemUgPSBNYXRoLmNlaWwoIHNpemUgLyA0ICkgKiA0O1xuXHRcdHNpemUgPSBNYXRoLm1heCggc2l6ZSwgNCApO1xuXG5cdFx0Y29uc3QgbWF0cmljZXNBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIHNpemUgKiBzaXplICogNCApOyAvLyA0IGZsb2F0cyBwZXIgUkdCQSBwaXhlbFxuXHRcdGNvbnN0IG1hdHJpY2VzVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggbWF0cmljZXNBcnJheSwgc2l6ZSwgc2l6ZSwgUkdCQUZvcm1hdCwgRmxvYXRUeXBlICk7XG5cblx0XHR0aGlzLl9tYXRyaWNlc1RleHR1cmUgPSBtYXRyaWNlc1RleHR1cmU7XG5cblx0fVxuXG5cdF9pbml0SW5kaXJlY3RUZXh0dXJlKCkge1xuXG5cdFx0bGV0IHNpemUgPSBNYXRoLnNxcnQoIHRoaXMuX21heEluc3RhbmNlQ291bnQgKTtcblx0XHRzaXplID0gTWF0aC5jZWlsKCBzaXplICk7XG5cblx0XHRjb25zdCBpbmRpcmVjdEFycmF5ID0gbmV3IFVpbnQzMkFycmF5KCBzaXplICogc2l6ZSApO1xuXHRcdGNvbnN0IGluZGlyZWN0VGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggaW5kaXJlY3RBcnJheSwgc2l6ZSwgc2l6ZSwgUmVkSW50ZWdlckZvcm1hdCwgVW5zaWduZWRJbnRUeXBlICk7XG5cblx0XHR0aGlzLl9pbmRpcmVjdFRleHR1cmUgPSBpbmRpcmVjdFRleHR1cmU7XG5cblx0fVxuXG5cdF9pbml0Q29sb3JzVGV4dHVyZSgpIHtcblxuXHRcdGxldCBzaXplID0gTWF0aC5zcXJ0KCB0aGlzLl9tYXhJbmRleENvdW50ICk7XG5cdFx0c2l6ZSA9IE1hdGguY2VpbCggc2l6ZSApO1xuXG5cdFx0Ly8gNCBmbG9hdHMgcGVyIFJHQkEgcGl4ZWwgaW5pdGlhbGl6ZWQgdG8gd2hpdGVcblx0XHRjb25zdCBjb2xvcnNBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIHNpemUgKiBzaXplICogNCApLmZpbGwoIDEgKTtcblx0XHRjb25zdCBjb2xvcnNUZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCBjb2xvcnNBcnJheSwgc2l6ZSwgc2l6ZSwgUkdCQUZvcm1hdCwgRmxvYXRUeXBlICk7XG5cdFx0Y29sb3JzVGV4dHVyZS5jb2xvclNwYWNlID0gQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlO1xuXG5cdFx0dGhpcy5fY29sb3JzVGV4dHVyZSA9IGNvbG9yc1RleHR1cmU7XG5cblx0fVxuXG5cdF9pbml0aWFsaXplR2VvbWV0cnkoIHJlZmVyZW5jZSApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBtYXhWZXJ0ZXhDb3VudCA9IHRoaXMuX21heFZlcnRleENvdW50O1xuXHRcdGNvbnN0IG1heEluZGV4Q291bnQgPSB0aGlzLl9tYXhJbmRleENvdW50O1xuXHRcdGlmICggdGhpcy5fZ2VvbWV0cnlJbml0aWFsaXplZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IGF0dHJpYnV0ZU5hbWUgaW4gcmVmZXJlbmNlLmF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc3JjQXR0cmlidXRlID0gcmVmZXJlbmNlLmdldEF0dHJpYnV0ZSggYXR0cmlidXRlTmFtZSApO1xuXHRcdFx0XHRjb25zdCB7IGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCB9ID0gc3JjQXR0cmlidXRlO1xuXG5cdFx0XHRcdGNvbnN0IGRzdEFycmF5ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKCBtYXhWZXJ0ZXhDb3VudCAqIGl0ZW1TaXplICk7XG5cdFx0XHRcdGNvbnN0IGRzdEF0dHJpYnV0ZSA9IG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGRzdEFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggYXR0cmlidXRlTmFtZSwgZHN0QXR0cmlidXRlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZWZlcmVuY2UuZ2V0SW5kZXgoKSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyBSZXNlcnZlIGxhc3QgdTE2IGluZGV4IGZvciBwcmltaXRpdmUgcmVzdGFydC5cblx0XHRcdFx0Y29uc3QgaW5kZXhBcnJheSA9IG1heFZlcnRleENvdW50ID4gNjU1MzVcblx0XHRcdFx0XHQ/IG5ldyBVaW50MzJBcnJheSggbWF4SW5kZXhDb3VudCApXG5cdFx0XHRcdFx0OiBuZXcgVWludDE2QXJyYXkoIG1heEluZGV4Q291bnQgKTtcblxuXHRcdFx0XHRnZW9tZXRyeS5zZXRJbmRleCggbmV3IEJ1ZmZlckF0dHJpYnV0ZSggaW5kZXhBcnJheSwgMSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fZ2VvbWV0cnlJbml0aWFsaXplZCA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGUgZ2VvbWV0cnkgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBleGlzdGluZyBjb21iaW5lZCBnZW9tZXRyeSBhdHRyaWJ1dGVzXG5cdF92YWxpZGF0ZUdlb21ldHJ5KCBnZW9tZXRyeSApIHtcblxuXHRcdC8vIGNoZWNrIHRvIGVuc3VyZSB0aGUgZ2VvbWV0cmllcyBhcmUgdXNpbmcgY29uc2lzdGVudCBhdHRyaWJ1dGVzIGFuZCBpbmRpY2VzXG5cdFx0Y29uc3QgYmF0Y2hHZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0aWYgKCBCb29sZWFuKCBnZW9tZXRyeS5nZXRJbmRleCgpICkgIT09IEJvb2xlYW4oIGJhdGNoR2VvbWV0cnkuZ2V0SW5kZXgoKSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdCYXRjaGVkTWVzaDogQWxsIGdlb21ldHJpZXMgbXVzdCBjb25zaXN0ZW50bHkgaGF2ZSBcImluZGV4XCIuJyApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggY29uc3QgYXR0cmlidXRlTmFtZSBpbiBiYXRjaEdlb21ldHJ5LmF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGlmICggISBnZW9tZXRyeS5oYXNBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUgKSApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIGBCYXRjaGVkTWVzaDogQWRkZWQgZ2VvbWV0cnkgbWlzc2luZyBcIiR7IGF0dHJpYnV0ZU5hbWUgfVwiLiBBbGwgZ2VvbWV0cmllcyBtdXN0IGhhdmUgY29uc2lzdGVudCBhdHRyaWJ1dGVzLmAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzcmNBdHRyaWJ1dGUgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUgKTtcblx0XHRcdGNvbnN0IGRzdEF0dHJpYnV0ZSA9IGJhdGNoR2VvbWV0cnkuZ2V0QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICk7XG5cdFx0XHRpZiAoIHNyY0F0dHJpYnV0ZS5pdGVtU2l6ZSAhPT0gZHN0QXR0cmlidXRlLml0ZW1TaXplIHx8IHNyY0F0dHJpYnV0ZS5ub3JtYWxpemVkICE9PSBkc3RBdHRyaWJ1dGUubm9ybWFsaXplZCApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdCYXRjaGVkTWVzaDogQWxsIGF0dHJpYnV0ZXMgbXVzdCBoYXZlIGEgY29uc2lzdGVudCBpdGVtU2l6ZSBhbmQgbm9ybWFsaXplZCB2YWx1ZS4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0c2V0Q3VzdG9tU29ydCggZnVuYyApIHtcblxuXHRcdHRoaXMuY3VzdG9tU29ydCA9IGZ1bmM7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbXB1dGVCb3VuZGluZ0JveCgpIHtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBnZW9tZXRyeUNvdW50ID0gdGhpcy5fZ2VvbWV0cnlDb3VudDtcblx0XHRjb25zdCBib3VuZGluZ0JveCA9IHRoaXMuYm91bmRpbmdCb3g7XG5cdFx0Y29uc3QgZHJhd0luZm8gPSB0aGlzLl9kcmF3SW5mbztcblxuXHRcdGJvdW5kaW5nQm94Lm1ha2VFbXB0eSgpO1xuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGdlb21ldHJ5Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdGlmICggZHJhd0luZm9bIGkgXS5hY3RpdmUgPT09IGZhbHNlICkgY29udGludWU7XG5cblx0XHRcdGNvbnN0IGdlb21ldHJ5SWQgPSBkcmF3SW5mb1sgaSBdLmdlb21ldHJ5SW5kZXg7XG5cdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpLCBfbWF0cml4ICk7XG5cdFx0XHR0aGlzLmdldEJvdW5kaW5nQm94QXQoIGdlb21ldHJ5SWQsIF9ib3ggKS5hcHBseU1hdHJpeDQoIF9tYXRyaXggKTtcblx0XHRcdGJvdW5kaW5nQm94LnVuaW9uKCBfYm94ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpIHtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gdGhpcy5ib3VuZGluZ1NwaGVyZTtcblx0XHRjb25zdCBkcmF3SW5mbyA9IHRoaXMuX2RyYXdJbmZvO1xuXG5cdFx0Ym91bmRpbmdTcGhlcmUubWFrZUVtcHR5KCk7XG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gZHJhd0luZm8ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBkcmF3SW5mb1sgaSBdLmFjdGl2ZSA9PT0gZmFsc2UgKSBjb250aW51ZTtcblxuXHRcdFx0Y29uc3QgZ2VvbWV0cnlJZCA9IGRyYXdJbmZvWyBpIF0uZ2VvbWV0cnlJbmRleDtcblx0XHRcdHRoaXMuZ2V0TWF0cml4QXQoIGksIF9tYXRyaXggKTtcblx0XHRcdHRoaXMuZ2V0Qm91bmRpbmdTcGhlcmVBdCggZ2VvbWV0cnlJZCwgX3NwaGVyZSApLmFwcGx5TWF0cml4NCggX21hdHJpeCApO1xuXHRcdFx0Ym91bmRpbmdTcGhlcmUudW5pb24oIF9zcGhlcmUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0YWRkSW5zdGFuY2UoIGdlb21ldHJ5SWQgKSB7XG5cblx0XHQvLyBlbnN1cmUgd2UncmUgbm90IG92ZXIgZ2VvbWV0cnlcblx0XHRpZiAoIHRoaXMuX2RyYXdJbmZvLmxlbmd0aCA+PSB0aGlzLl9tYXhJbnN0YW5jZUNvdW50ICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdCYXRjaGVkTWVzaDogTWF4aW11bSBpdGVtIGNvdW50IHJlYWNoZWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fZHJhd0luZm8ucHVzaCgge1xuXG5cdFx0XHR2aXNpYmxlOiB0cnVlLFxuXHRcdFx0YWN0aXZlOiB0cnVlLFxuXHRcdFx0Z2VvbWV0cnlJbmRleDogZ2VvbWV0cnlJZCxcblxuXHRcdH0gKTtcblxuXHRcdC8vIGluaXRpYWxpemUgdGhlIG1hdHJpeFxuXHRcdGNvbnN0IGRyYXdJZCA9IHRoaXMuX2RyYXdJbmZvLmxlbmd0aCAtIDE7XG5cdFx0Y29uc3QgbWF0cmljZXNUZXh0dXJlID0gdGhpcy5fbWF0cmljZXNUZXh0dXJlO1xuXHRcdGNvbnN0IG1hdHJpY2VzQXJyYXkgPSBtYXRyaWNlc1RleHR1cmUuaW1hZ2UuZGF0YTtcblx0XHRfaWRlbnRpdHlNYXRyaXgudG9BcnJheSggbWF0cmljZXNBcnJheSwgZHJhd0lkICogMTYgKTtcblx0XHRtYXRyaWNlc1RleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0Y29uc3QgY29sb3JzVGV4dHVyZSA9IHRoaXMuX2NvbG9yc1RleHR1cmU7XG5cdFx0aWYgKCBjb2xvcnNUZXh0dXJlICkge1xuXG5cdFx0XHRfd2hpdGVDb2xvci50b0FycmF5KCBjb2xvcnNUZXh0dXJlLmltYWdlLmRhdGEsIGRyYXdJZCAqIDQgKTtcblx0XHRcdGNvbG9yc1RleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRyYXdJZDtcblxuXHR9XG5cblx0YWRkR2VvbWV0cnkoIGdlb21ldHJ5LCB2ZXJ0ZXhDb3VudCA9IC0gMSwgaW5kZXhDb3VudCA9IC0gMSApIHtcblxuXHRcdHRoaXMuX2luaXRpYWxpemVHZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHRcdHRoaXMuX3ZhbGlkYXRlR2VvbWV0cnkoIGdlb21ldHJ5ICk7XG5cblx0XHQvLyBlbnN1cmUgd2UncmUgbm90IG92ZXIgZ2VvbWV0cnlcblx0XHRpZiAoIHRoaXMuX2RyYXdJbmZvLmxlbmd0aCA+PSB0aGlzLl9tYXhJbnN0YW5jZUNvdW50ICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdCYXRjaGVkTWVzaDogTWF4aW11bSBpdGVtIGNvdW50IHJlYWNoZWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ2V0IHRoZSBuZWNlc3NhcnkgcmFuZ2UgZm8gdGhlIGdlb21ldHJ5XG5cdFx0Y29uc3QgcmVzZXJ2ZWRSYW5nZSA9IHtcblx0XHRcdHZlcnRleFN0YXJ0OiAtIDEsXG5cdFx0XHR2ZXJ0ZXhDb3VudDogLSAxLFxuXHRcdFx0aW5kZXhTdGFydDogLSAxLFxuXHRcdFx0aW5kZXhDb3VudDogLSAxLFxuXHRcdH07XG5cblx0XHRsZXQgbGFzdFJhbmdlID0gbnVsbDtcblx0XHRjb25zdCByZXNlcnZlZFJhbmdlcyA9IHRoaXMuX3Jlc2VydmVkUmFuZ2VzO1xuXHRcdGNvbnN0IGRyYXdSYW5nZXMgPSB0aGlzLl9kcmF3UmFuZ2VzO1xuXHRcdGNvbnN0IGJvdW5kcyA9IHRoaXMuX2JvdW5kcztcblx0XHRpZiAoIHRoaXMuX2dlb21ldHJ5Q291bnQgIT09IDAgKSB7XG5cblx0XHRcdGxhc3RSYW5nZSA9IHJlc2VydmVkUmFuZ2VzWyByZXNlcnZlZFJhbmdlcy5sZW5ndGggLSAxIF07XG5cblx0XHR9XG5cblx0XHRpZiAoIHZlcnRleENvdW50ID09PSAtIDEgKSB7XG5cblx0XHRcdHJlc2VydmVkUmFuZ2UudmVydGV4Q291bnQgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5jb3VudDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlc2VydmVkUmFuZ2UudmVydGV4Q291bnQgPSB2ZXJ0ZXhDb3VudDtcblxuXHRcdH1cblxuXHRcdGlmICggbGFzdFJhbmdlID09PSBudWxsICkge1xuXG5cdFx0XHRyZXNlcnZlZFJhbmdlLnZlcnRleFN0YXJ0ID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlc2VydmVkUmFuZ2UudmVydGV4U3RhcnQgPSBsYXN0UmFuZ2UudmVydGV4U3RhcnQgKyBsYXN0UmFuZ2UudmVydGV4Q291bnQ7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbmRleCA9IGdlb21ldHJ5LmdldEluZGV4KCk7XG5cdFx0Y29uc3QgaGFzSW5kZXggPSBpbmRleCAhPT0gbnVsbDtcblx0XHRpZiAoIGhhc0luZGV4ICkge1xuXG5cdFx0XHRpZiAoIGluZGV4Q291bnRcdD09PSAtIDEgKSB7XG5cblx0XHRcdFx0cmVzZXJ2ZWRSYW5nZS5pbmRleENvdW50ID0gaW5kZXguY291bnQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVzZXJ2ZWRSYW5nZS5pbmRleENvdW50ID0gaW5kZXhDb3VudDtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGxhc3RSYW5nZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRyZXNlcnZlZFJhbmdlLmluZGV4U3RhcnQgPSAwO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlc2VydmVkUmFuZ2UuaW5kZXhTdGFydCA9IGxhc3RSYW5nZS5pbmRleFN0YXJ0ICsgbGFzdFJhbmdlLmluZGV4Q291bnQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmIChcblx0XHRcdHJlc2VydmVkUmFuZ2UuaW5kZXhTdGFydCAhPT0gLSAxICYmXG5cdFx0XHRyZXNlcnZlZFJhbmdlLmluZGV4U3RhcnQgKyByZXNlcnZlZFJhbmdlLmluZGV4Q291bnQgPiB0aGlzLl9tYXhJbmRleENvdW50IHx8XG5cdFx0XHRyZXNlcnZlZFJhbmdlLnZlcnRleFN0YXJ0ICsgcmVzZXJ2ZWRSYW5nZS52ZXJ0ZXhDb3VudCA+IHRoaXMuX21heFZlcnRleENvdW50XG5cdFx0KSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ0JhdGNoZWRNZXNoOiBSZXNlcnZlZCBzcGFjZSByZXF1ZXN0IGV4Y2VlZHMgdGhlIG1heGltdW0gYnVmZmVyIHNpemUuJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGlkXG5cdFx0Y29uc3QgZ2VvbWV0cnlJZCA9IHRoaXMuX2dlb21ldHJ5Q291bnQ7XG5cdFx0dGhpcy5fZ2VvbWV0cnlDb3VudCArKztcblxuXHRcdC8vIGFkZCB0aGUgcmVzZXJ2ZWQgcmFuZ2UgYW5kIGRyYXcgcmFuZ2Ugb2JqZWN0c1xuXHRcdHJlc2VydmVkUmFuZ2VzLnB1c2goIHJlc2VydmVkUmFuZ2UgKTtcblx0XHRkcmF3UmFuZ2VzLnB1c2goIHtcblx0XHRcdHN0YXJ0OiBoYXNJbmRleCA/IHJlc2VydmVkUmFuZ2UuaW5kZXhTdGFydCA6IHJlc2VydmVkUmFuZ2UudmVydGV4U3RhcnQsXG5cdFx0XHRjb3VudDogLSAxXG5cdFx0fSApO1xuXHRcdGJvdW5kcy5wdXNoKCB7XG5cdFx0XHRib3hJbml0aWFsaXplZDogZmFsc2UsXG5cdFx0XHRib3g6IG5ldyBCb3gzKCksXG5cblx0XHRcdHNwaGVyZUluaXRpYWxpemVkOiBmYWxzZSxcblx0XHRcdHNwaGVyZTogbmV3IFNwaGVyZSgpXG5cdFx0fSApO1xuXG5cdFx0Ly8gdXBkYXRlIHRoZSBnZW9tZXRyeVxuXHRcdHRoaXMuc2V0R2VvbWV0cnlBdCggZ2VvbWV0cnlJZCwgZ2VvbWV0cnkgKTtcblxuXHRcdHJldHVybiBnZW9tZXRyeUlkO1xuXG5cdH1cblxuXHRzZXRHZW9tZXRyeUF0KCBnZW9tZXRyeUlkLCBnZW9tZXRyeSApIHtcblxuXHRcdGlmICggZ2VvbWV0cnlJZCA+PSB0aGlzLl9nZW9tZXRyeUNvdW50ICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdCYXRjaGVkTWVzaDogTWF4aW11bSBnZW9tZXRyeSBjb3VudCByZWFjaGVkLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3ZhbGlkYXRlR2VvbWV0cnkoIGdlb21ldHJ5ICk7XG5cblx0XHRjb25zdCBiYXRjaEdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBoYXNJbmRleCA9IGJhdGNoR2VvbWV0cnkuZ2V0SW5kZXgoKSAhPT0gbnVsbDtcblx0XHRjb25zdCBkc3RJbmRleCA9IGJhdGNoR2VvbWV0cnkuZ2V0SW5kZXgoKTtcblx0XHRjb25zdCBzcmNJbmRleCA9IGdlb21ldHJ5LmdldEluZGV4KCk7XG5cdFx0Y29uc3QgcmVzZXJ2ZWRSYW5nZSA9IHRoaXMuX3Jlc2VydmVkUmFuZ2VzWyBnZW9tZXRyeUlkIF07XG5cdFx0aWYgKFxuXHRcdFx0aGFzSW5kZXggJiZcblx0XHRcdHNyY0luZGV4LmNvdW50ID4gcmVzZXJ2ZWRSYW5nZS5pbmRleENvdW50IHx8XG5cdFx0XHRnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50ID4gcmVzZXJ2ZWRSYW5nZS52ZXJ0ZXhDb3VudFxuXHRcdCkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdCYXRjaGVkTWVzaDogUmVzZXJ2ZWQgc3BhY2Ugbm90IGxhcmdlIGVub3VnaCBmb3IgcHJvdmlkZWQgZ2VvbWV0cnkuJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29weSBnZW9tZXRyeSBvdmVyXG5cdFx0Y29uc3QgdmVydGV4U3RhcnQgPSByZXNlcnZlZFJhbmdlLnZlcnRleFN0YXJ0O1xuXHRcdGNvbnN0IHZlcnRleENvdW50ID0gcmVzZXJ2ZWRSYW5nZS52ZXJ0ZXhDb3VudDtcblx0XHRmb3IgKCBjb25zdCBhdHRyaWJ1dGVOYW1lIGluIGJhdGNoR2VvbWV0cnkuYXR0cmlidXRlcyApIHtcblxuXHRcdFx0Ly8gY29weSBhdHRyaWJ1dGUgZGF0YVxuXHRcdFx0Y29uc3Qgc3JjQXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICk7XG5cdFx0XHRjb25zdCBkc3RBdHRyaWJ1dGUgPSBiYXRjaEdlb21ldHJ5LmdldEF0dHJpYnV0ZSggYXR0cmlidXRlTmFtZSApO1xuXHRcdFx0Y29weUF0dHJpYnV0ZURhdGEoIHNyY0F0dHJpYnV0ZSwgZHN0QXR0cmlidXRlLCB2ZXJ0ZXhTdGFydCApO1xuXG5cdFx0XHQvLyBmaWxsIHRoZSByZXN0IGluIHdpdGggemVyb2VzXG5cdFx0XHRjb25zdCBpdGVtU2l6ZSA9IHNyY0F0dHJpYnV0ZS5pdGVtU2l6ZTtcblx0XHRcdGZvciAoIGxldCBpID0gc3JjQXR0cmlidXRlLmNvdW50LCBsID0gdmVydGV4Q291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gdmVydGV4U3RhcnQgKyBpO1xuXHRcdFx0XHRmb3IgKCBsZXQgYyA9IDA7IGMgPCBpdGVtU2l6ZTsgYyArKyApIHtcblxuXHRcdFx0XHRcdGRzdEF0dHJpYnV0ZS5zZXRDb21wb25lbnQoIGluZGV4LCBjLCAwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGRzdEF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRkc3RBdHRyaWJ1dGUuYWRkVXBkYXRlUmFuZ2UoIHZlcnRleFN0YXJ0ICogaXRlbVNpemUsIHZlcnRleENvdW50ICogaXRlbVNpemUgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvcHkgaW5kZXhcblx0XHRpZiAoIGhhc0luZGV4ICkge1xuXG5cdFx0XHRjb25zdCBpbmRleFN0YXJ0ID0gcmVzZXJ2ZWRSYW5nZS5pbmRleFN0YXJ0O1xuXG5cdFx0XHQvLyBjb3B5IGluZGV4IGRhdGEgb3ZlclxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgc3JjSW5kZXguY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0ZHN0SW5kZXguc2V0WCggaW5kZXhTdGFydCArIGksIHZlcnRleFN0YXJ0ICsgc3JjSW5kZXguZ2V0WCggaSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZmlsbCB0aGUgcmVzdCBpbiB3aXRoIHplcm9lc1xuXHRcdFx0Zm9yICggbGV0IGkgPSBzcmNJbmRleC5jb3VudCwgbCA9IHJlc2VydmVkUmFuZ2UuaW5kZXhDb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0ZHN0SW5kZXguc2V0WCggaW5kZXhTdGFydCArIGksIHZlcnRleFN0YXJ0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZHN0SW5kZXgubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0ZHN0SW5kZXguYWRkVXBkYXRlUmFuZ2UoIGluZGV4U3RhcnQsIHJlc2VydmVkUmFuZ2UuaW5kZXhDb3VudCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc3RvcmUgdGhlIGJvdW5kaW5nIGJveGVzXG5cdFx0Y29uc3QgYm91bmQgPSB0aGlzLl9ib3VuZHNbIGdlb21ldHJ5SWQgXTtcblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHRib3VuZC5ib3guY29weSggZ2VvbWV0cnkuYm91bmRpbmdCb3ggKTtcblx0XHRcdGJvdW5kLmJveEluaXRpYWxpemVkID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGJvdW5kLmJveEluaXRpYWxpemVkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRib3VuZC5zcGhlcmUuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKTtcblx0XHRcdGJvdW5kLnNwaGVyZUluaXRpYWxpemVkID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGJvdW5kLnNwaGVyZUluaXRpYWxpemVkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHQvLyBzZXQgZHJhd1JhbmdlIGNvdW50XG5cdFx0Y29uc3QgZHJhd1JhbmdlID0gdGhpcy5fZHJhd1Jhbmdlc1sgZ2VvbWV0cnlJZCBdO1xuXHRcdGNvbnN0IHBvc0F0dHIgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcblx0XHRkcmF3UmFuZ2UuY291bnQgPSBoYXNJbmRleCA/IHNyY0luZGV4LmNvdW50IDogcG9zQXR0ci5jb3VudDtcblx0XHR0aGlzLl92aXNpYmlsaXR5Q2hhbmdlZCA9IHRydWU7XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnlJZDtcblxuXHR9XG5cblx0Lypcblx0ZGVsZXRlR2VvbWV0cnkoIGdlb21ldHJ5SWQgKSB7XG5cblx0XHQvLyBUT0RPOiBkZWxldGUgZ2VvbWV0cnkgYW5kIGFzc29jaWF0ZWQgaW5zdGFuY2VzXG5cblx0fVxuXHQqL1xuXG5cdC8qXG5cdGRlbGV0ZUluc3RhbmNlKCBpbnN0YW5jZUlkICkge1xuXG5cdFx0Ly8gTm90ZTogVXNlciBuZWVkcyB0byBjYWxsIG9wdGltaXplKCkgYWZ0ZXJ3YXJkIHRvIHBhY2sgdGhlIGRhdGEuXG5cblx0XHRjb25zdCBkcmF3SW5mbyA9IHRoaXMuX2RyYXdJbmZvO1xuXHRcdGlmICggaW5zdGFuY2VJZCA+PSBkcmF3SW5mby5sZW5ndGggfHwgZHJhd0luZm9bIGluc3RhbmNlSWQgXS5hY3RpdmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGRyYXdJbmZvWyBpbnN0YW5jZUlkIF0uYWN0aXZlID0gZmFsc2U7XG5cdFx0dGhpcy5fdmlzaWJpbGl0eUNoYW5nZWQgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXHQqL1xuXG5cdC8vIGdldCBib3VuZGluZyBib3ggYW5kIGNvbXB1dGUgaXQgaWYgaXQgZG9lc24ndCBleGlzdFxuXHRnZXRCb3VuZGluZ0JveEF0KCBnZW9tZXRyeUlkLCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIGdlb21ldHJ5SWQgPj0gdGhpcy5fZ2VvbWV0cnlDb3VudCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHQvLyBjb21wdXRlIGJvdW5kaW5nIGJveFxuXHRcdGNvbnN0IGJvdW5kID0gdGhpcy5fYm91bmRzWyBnZW9tZXRyeUlkIF07XG5cdFx0Y29uc3QgYm94ID0gYm91bmQuYm94O1xuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRpZiAoIGJvdW5kLmJveEluaXRpYWxpemVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ym94Lm1ha2VFbXB0eSgpO1xuXG5cdFx0XHRjb25zdCBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0Y29uc3QgZHJhd1JhbmdlID0gdGhpcy5fZHJhd1Jhbmdlc1sgZ2VvbWV0cnlJZCBdO1xuXHRcdFx0Zm9yICggbGV0IGkgPSBkcmF3UmFuZ2Uuc3RhcnQsIGwgPSBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldCBpdiA9IGk7XG5cdFx0XHRcdGlmICggaW5kZXggKSB7XG5cblx0XHRcdFx0XHRpdiA9IGluZGV4LmdldFgoIGl2ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJveC5leHBhbmRCeVBvaW50KCBfdmVjdG9yLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpdiApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ym91bmQuYm94SW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LmNvcHkoIGJveCApO1xuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdC8vIGdldCBib3VuZGluZyBzcGhlcmUgYW5kIGNvbXB1dGUgaXQgaWYgaXQgZG9lc24ndCBleGlzdFxuXHRnZXRCb3VuZGluZ1NwaGVyZUF0KCBnZW9tZXRyeUlkLCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIGdlb21ldHJ5SWQgPj0gdGhpcy5fZ2VvbWV0cnlDb3VudCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHQvLyBjb21wdXRlIGJvdW5kaW5nIHNwaGVyZVxuXHRcdGNvbnN0IGJvdW5kID0gdGhpcy5fYm91bmRzWyBnZW9tZXRyeUlkIF07XG5cdFx0Y29uc3Qgc3BoZXJlID0gYm91bmQuc3BoZXJlO1xuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRpZiAoIGJvdW5kLnNwaGVyZUluaXRpYWxpemVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0c3BoZXJlLm1ha2VFbXB0eSgpO1xuXG5cdFx0XHR0aGlzLmdldEJvdW5kaW5nQm94QXQoIGdlb21ldHJ5SWQsIF9ib3ggKTtcblx0XHRcdF9ib3guZ2V0Q2VudGVyKCBzcGhlcmUuY2VudGVyICk7XG5cblx0XHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRjb25zdCBkcmF3UmFuZ2UgPSB0aGlzLl9kcmF3UmFuZ2VzWyBnZW9tZXRyeUlkIF07XG5cblx0XHRcdGxldCBtYXhSYWRpdXNTcSA9IDA7XG5cdFx0XHRmb3IgKCBsZXQgaSA9IGRyYXdSYW5nZS5zdGFydCwgbCA9IGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0bGV0IGl2ID0gaTtcblx0XHRcdFx0aWYgKCBpbmRleCApIHtcblxuXHRcdFx0XHRcdGl2ID0gaW5kZXguZ2V0WCggaXYgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0X3ZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaXYgKTtcblx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIHNwaGVyZS5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIF92ZWN0b3IgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNwaGVyZS5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cdFx0XHRib3VuZC5zcGhlcmVJbml0aWFsaXplZCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuY29weSggc3BoZXJlICk7XG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0c2V0TWF0cml4QXQoIGluc3RhbmNlSWQsIG1hdHJpeCApIHtcblxuXHRcdC8vIEBUT0RPOiBNYXAgZ2VvbWV0cnlJZCB0byBpbmRleCBvZiB0aGUgYXJyYXlzIGJlY2F1c2Vcblx0XHQvLyAgICAgICAgb3B0aW1pemUoKSBjYW4gbWFrZSBnZW9tZXRyeUlkIG1pc21hdGNoIHRoZSBpbmRleFxuXG5cdFx0Y29uc3QgZHJhd0luZm8gPSB0aGlzLl9kcmF3SW5mbztcblx0XHRjb25zdCBtYXRyaWNlc1RleHR1cmUgPSB0aGlzLl9tYXRyaWNlc1RleHR1cmU7XG5cdFx0Y29uc3QgbWF0cmljZXNBcnJheSA9IHRoaXMuX21hdHJpY2VzVGV4dHVyZS5pbWFnZS5kYXRhO1xuXHRcdGlmICggaW5zdGFuY2VJZCA+PSBkcmF3SW5mby5sZW5ndGggfHwgZHJhd0luZm9bIGluc3RhbmNlSWQgXS5hY3RpdmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdG1hdHJpeC50b0FycmF5KCBtYXRyaWNlc0FycmF5LCBpbnN0YW5jZUlkICogMTYgKTtcblx0XHRtYXRyaWNlc1RleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldE1hdHJpeEF0KCBpbnN0YW5jZUlkLCBtYXRyaXggKSB7XG5cblx0XHRjb25zdCBkcmF3SW5mbyA9IHRoaXMuX2RyYXdJbmZvO1xuXHRcdGNvbnN0IG1hdHJpY2VzQXJyYXkgPSB0aGlzLl9tYXRyaWNlc1RleHR1cmUuaW1hZ2UuZGF0YTtcblx0XHRpZiAoIGluc3RhbmNlSWQgPj0gZHJhd0luZm8ubGVuZ3RoIHx8IGRyYXdJbmZvWyBpbnN0YW5jZUlkIF0uYWN0aXZlID09PSBmYWxzZSApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0cml4LmZyb21BcnJheSggbWF0cmljZXNBcnJheSwgaW5zdGFuY2VJZCAqIDE2ICk7XG5cblx0fVxuXG5cdHNldENvbG9yQXQoIGluc3RhbmNlSWQsIGNvbG9yICkge1xuXG5cdFx0aWYgKCB0aGlzLl9jb2xvcnNUZXh0dXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9pbml0Q29sb3JzVGV4dHVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQFRPRE86IE1hcCBpZCB0byBpbmRleCBvZiB0aGUgYXJyYXlzIGJlY2F1c2Vcblx0XHQvLyAgICAgICAgb3B0aW1pemUoKSBjYW4gbWFrZSBpZCBtaXNtYXRjaCB0aGUgaW5kZXhcblxuXHRcdGNvbnN0IGNvbG9yc1RleHR1cmUgPSB0aGlzLl9jb2xvcnNUZXh0dXJlO1xuXHRcdGNvbnN0IGNvbG9yc0FycmF5ID0gdGhpcy5fY29sb3JzVGV4dHVyZS5pbWFnZS5kYXRhO1xuXHRcdGNvbnN0IGRyYXdJbmZvID0gdGhpcy5fZHJhd0luZm87XG5cdFx0aWYgKCBpbnN0YW5jZUlkID49IGRyYXdJbmZvLmxlbmd0aCB8fCBkcmF3SW5mb1sgaW5zdGFuY2VJZCBdLmFjdGl2ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0Y29sb3IudG9BcnJheSggY29sb3JzQXJyYXksIGluc3RhbmNlSWQgKiA0ICk7XG5cdFx0Y29sb3JzVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q29sb3JBdCggaW5zdGFuY2VJZCwgY29sb3IgKSB7XG5cblx0XHRjb25zdCBjb2xvcnNBcnJheSA9IHRoaXMuX2NvbG9yc1RleHR1cmUuaW1hZ2UuZGF0YTtcblx0XHRjb25zdCBkcmF3SW5mbyA9IHRoaXMuX2RyYXdJbmZvO1xuXHRcdGlmICggaW5zdGFuY2VJZCA+PSBkcmF3SW5mby5sZW5ndGggfHwgZHJhd0luZm9bIGluc3RhbmNlSWQgXS5hY3RpdmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb2xvci5mcm9tQXJyYXkoIGNvbG9yc0FycmF5LCBpbnN0YW5jZUlkICogNCApO1xuXG5cdH1cblxuXHRzZXRWaXNpYmxlQXQoIGluc3RhbmNlSWQsIHZhbHVlICkge1xuXG5cdFx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIG91dCBvZiByYW5nZSwgbm90IGFjdGl2ZSwgb3IgdmlzaWJpbGl0eSBzdGF0ZVxuXHRcdC8vIGRvZXMgbm90IGNoYW5nZSB0aGVuIHJldHVybiBlYXJseVxuXHRcdGNvbnN0IGRyYXdJbmZvID0gdGhpcy5fZHJhd0luZm87XG5cdFx0aWYgKFxuXHRcdFx0aW5zdGFuY2VJZCA+PSBkcmF3SW5mby5sZW5ndGggfHxcblx0XHRcdGRyYXdJbmZvWyBpbnN0YW5jZUlkIF0uYWN0aXZlID09PSBmYWxzZSB8fFxuXHRcdFx0ZHJhd0luZm9bIGluc3RhbmNlSWQgXS52aXNpYmxlID09PSB2YWx1ZVxuXHRcdCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGRyYXdJbmZvWyBpbnN0YW5jZUlkIF0udmlzaWJsZSA9IHZhbHVlO1xuXHRcdHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRWaXNpYmxlQXQoIGluc3RhbmNlSWQgKSB7XG5cblx0XHQvLyByZXR1cm4gZWFybHkgaWYgdGhlIGdlb21ldHJ5IGlzIG91dCBvZiByYW5nZSBvciBub3QgYWN0aXZlXG5cdFx0Y29uc3QgZHJhd0luZm8gPSB0aGlzLl9kcmF3SW5mbztcblx0XHRpZiAoIGluc3RhbmNlSWQgPj0gZHJhd0luZm8ubGVuZ3RoIHx8IGRyYXdJbmZvWyBpbnN0YW5jZUlkIF0uYWN0aXZlID09PSBmYWxzZSApIHtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRyYXdJbmZvWyBpbnN0YW5jZUlkIF0udmlzaWJsZTtcblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgZHJhd0luZm8gPSB0aGlzLl9kcmF3SW5mbztcblx0XHRjb25zdCBkcmF3UmFuZ2VzID0gdGhpcy5fZHJhd1Jhbmdlcztcblx0XHRjb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cdFx0Y29uc3QgYmF0Y2hHZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHQvLyBpdGVyYXRlIG92ZXIgZWFjaCBnZW9tZXRyeVxuXHRcdF9tZXNoLm1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcblx0XHRfbWVzaC5nZW9tZXRyeS5pbmRleCA9IGJhdGNoR2VvbWV0cnkuaW5kZXg7XG5cdFx0X21lc2guZ2VvbWV0cnkuYXR0cmlidXRlcyA9IGJhdGNoR2VvbWV0cnkuYXR0cmlidXRlcztcblx0XHRpZiAoIF9tZXNoLmdlb21ldHJ5LmJvdW5kaW5nQm94ID09PSBudWxsICkge1xuXG5cdFx0XHRfbWVzaC5nZW9tZXRyeS5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIF9tZXNoLmdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHRfbWVzaC5nZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGRyYXdJbmZvLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGlmICggISBkcmF3SW5mb1sgaSBdLnZpc2libGUgfHwgISBkcmF3SW5mb1sgaSBdLmFjdGl2ZSApIHtcblxuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBnZW9tZXRyeUlkID0gZHJhd0luZm9bIGkgXS5nZW9tZXRyeUluZGV4O1xuXHRcdFx0Y29uc3QgZHJhd1JhbmdlID0gZHJhd1Jhbmdlc1sgZ2VvbWV0cnlJZCBdO1xuXHRcdFx0X21lc2guZ2VvbWV0cnkuc2V0RHJhd1JhbmdlKCBkcmF3UmFuZ2Uuc3RhcnQsIGRyYXdSYW5nZS5jb3VudCApO1xuXG5cdFx0XHQvLyBnZSB0aGUgaW50ZXJzZWN0c1xuXHRcdFx0dGhpcy5nZXRNYXRyaXhBdCggaSwgX21lc2gubWF0cml4V29ybGQgKS5wcmVtdWx0aXBseSggbWF0cml4V29ybGQgKTtcblx0XHRcdHRoaXMuZ2V0Qm91bmRpbmdCb3hBdCggZ2VvbWV0cnlJZCwgX21lc2guZ2VvbWV0cnkuYm91bmRpbmdCb3ggKTtcblx0XHRcdHRoaXMuZ2V0Qm91bmRpbmdTcGhlcmVBdCggZ2VvbWV0cnlJZCwgX21lc2guZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKTtcblx0XHRcdF9tZXNoLnJheWNhc3QoIHJheWNhc3RlciwgX2JhdGNoSW50ZXJzZWN0cyApO1xuXG5cdFx0XHQvLyBhZGQgYmF0Y2ggaWQgdG8gdGhlIGludGVyc2VjdHNcblx0XHRcdGZvciAoIGxldCBqID0gMCwgbCA9IF9iYXRjaEludGVyc2VjdHMubGVuZ3RoOyBqIDwgbDsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbnRlcnNlY3QgPSBfYmF0Y2hJbnRlcnNlY3RzWyBqIF07XG5cdFx0XHRcdGludGVyc2VjdC5vYmplY3QgPSB0aGlzO1xuXHRcdFx0XHRpbnRlcnNlY3QuYmF0Y2hJZCA9IGk7XG5cdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2JhdGNoSW50ZXJzZWN0cy5sZW5ndGggPSAwO1xuXG5cdFx0fVxuXG5cdFx0X21lc2gubWF0ZXJpYWwgPSBudWxsO1xuXHRcdF9tZXNoLmdlb21ldHJ5LmluZGV4ID0gbnVsbDtcblx0XHRfbWVzaC5nZW9tZXRyeS5hdHRyaWJ1dGVzID0ge307XG5cdFx0X21lc2guZ2VvbWV0cnkuc2V0RHJhd1JhbmdlKCAwLCBJbmZpbml0eSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBzb3VyY2UuZ2VvbWV0cnkuY2xvbmUoKTtcblx0XHR0aGlzLnBlck9iamVjdEZydXN0dW1DdWxsZWQgPSBzb3VyY2UucGVyT2JqZWN0RnJ1c3R1bUN1bGxlZDtcblx0XHR0aGlzLnNvcnRPYmplY3RzID0gc291cmNlLnNvcnRPYmplY3RzO1xuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBzb3VyY2UuYm91bmRpbmdCb3ggIT09IG51bGwgPyBzb3VyY2UuYm91bmRpbmdCb3guY2xvbmUoKSA6IG51bGw7XG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IHNvdXJjZS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCA/IHNvdXJjZS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpIDogbnVsbDtcblxuXHRcdHRoaXMuX2RyYXdSYW5nZXMgPSBzb3VyY2UuX2RyYXdSYW5nZXMubWFwKCByYW5nZSA9PiAoIHsgLi4ucmFuZ2UgfSApICk7XG5cdFx0dGhpcy5fcmVzZXJ2ZWRSYW5nZXMgPSBzb3VyY2UuX3Jlc2VydmVkUmFuZ2VzLm1hcCggcmFuZ2UgPT4gKCB7IC4uLnJhbmdlIH0gKSApO1xuXG5cdFx0dGhpcy5fZHJhd0luZm8gPSBzb3VyY2UuX2RyYXdJbmZvLm1hcCggaW5mID0+ICggeyAuLi5pbmYgfSApICk7XG5cdFx0dGhpcy5fYm91bmRzID0gc291cmNlLl9ib3VuZHMubWFwKCBib3VuZCA9PiAoIHtcblx0XHRcdGJveEluaXRpYWxpemVkOiBib3VuZC5ib3hJbml0aWFsaXplZCxcblx0XHRcdGJveDogYm91bmQuYm94LmNsb25lKCksXG5cblx0XHRcdHNwaGVyZUluaXRpYWxpemVkOiBib3VuZC5zcGhlcmVJbml0aWFsaXplZCxcblx0XHRcdHNwaGVyZTogYm91bmQuc3BoZXJlLmNsb25lKClcblx0XHR9ICkgKTtcblxuXHRcdHRoaXMuX21heEluc3RhbmNlQ291bnQgPSBzb3VyY2UuX21heEluc3RhbmNlQ291bnQ7XG5cdFx0dGhpcy5fbWF4VmVydGV4Q291bnQgPSBzb3VyY2UuX21heFZlcnRleENvdW50O1xuXHRcdHRoaXMuX21heEluZGV4Q291bnQgPSBzb3VyY2UuX21heEluZGV4Q291bnQ7XG5cblx0XHR0aGlzLl9nZW9tZXRyeUluaXRpYWxpemVkID0gc291cmNlLl9nZW9tZXRyeUluaXRpYWxpemVkO1xuXHRcdHRoaXMuX2dlb21ldHJ5Q291bnQgPSBzb3VyY2UuX2dlb21ldHJ5Q291bnQ7XG5cdFx0dGhpcy5fbXVsdGlEcmF3Q291bnRzID0gc291cmNlLl9tdWx0aURyYXdDb3VudHMuc2xpY2UoKTtcblx0XHR0aGlzLl9tdWx0aURyYXdTdGFydHMgPSBzb3VyY2UuX211bHRpRHJhd1N0YXJ0cy5zbGljZSgpO1xuXG5cdFx0dGhpcy5fbWF0cmljZXNUZXh0dXJlID0gc291cmNlLl9tYXRyaWNlc1RleHR1cmUuY2xvbmUoKTtcblx0XHR0aGlzLl9tYXRyaWNlc1RleHR1cmUuaW1hZ2UuZGF0YSA9IHRoaXMuX21hdHJpY2VzVGV4dHVyZS5pbWFnZS5zbGljZSgpO1xuXG5cdFx0aWYgKCB0aGlzLl9jb2xvcnNUZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9jb2xvcnNUZXh0dXJlID0gc291cmNlLl9jb2xvcnNUZXh0dXJlLmNsb25lKCk7XG5cdFx0XHR0aGlzLl9jb2xvcnNUZXh0dXJlLmltYWdlLmRhdGEgPSB0aGlzLl9jb2xvcnNUZXh0dXJlLmltYWdlLnNsaWNlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdC8vIEFzc3VtaW5nIHRoZSBnZW9tZXRyeSBpcyBub3Qgc2hhcmVkIHdpdGggb3RoZXIgbWVzaGVzXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cblx0XHR0aGlzLl9tYXRyaWNlc1RleHR1cmUuZGlzcG9zZSgpO1xuXHRcdHRoaXMuX21hdHJpY2VzVGV4dHVyZSA9IG51bGw7XG5cblx0XHR0aGlzLl9pbmRpcmVjdFRleHR1cmUuZGlzcG9zZSgpO1xuXHRcdHRoaXMuX2luZGlyZWN0VGV4dHVyZSA9IG51bGw7XG5cblx0XHRpZiAoIHRoaXMuX2NvbG9yc1RleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2NvbG9yc1RleHR1cmUuZGlzcG9zZSgpO1xuXHRcdFx0dGhpcy5fY29sb3JzVGV4dHVyZSA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0b25CZWZvcmVSZW5kZXIoIHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwvKiwgX2dyb3VwKi8gKSB7XG5cblx0XHQvLyBpZiB2aXNpYmlsaXR5IGhhcyBub3QgY2hhbmdlZCBhbmQgZnJ1c3R1bSBjdWxsaW5nIGFuZCBvYmplY3Qgc29ydGluZyBpcyBub3QgcmVxdWlyZWRcblx0XHQvLyB0aGVuIHNraXAgaXRlcmF0aW5nIG92ZXIgYWxsIGl0ZW1zXG5cdFx0aWYgKCAhIHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkICYmICEgdGhpcy5wZXJPYmplY3RGcnVzdHVtQ3VsbGVkICYmICEgdGhpcy5zb3J0T2JqZWN0cyApIHtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdGhlIGluZGV4ZWQgdmVyc2lvbiBvZiB0aGUgbXVsdGkgZHJhdyBmdW5jdGlvbiByZXF1aXJlcyBzcGVjaWZ5aW5nIHRoZSBzdGFydFxuXHRcdC8vIG9mZnNldCBpbiBieXRlcy5cblx0XHRjb25zdCBpbmRleCA9IGdlb21ldHJ5LmdldEluZGV4KCk7XG5cdFx0Y29uc3QgYnl0ZXNQZXJFbGVtZW50ID0gaW5kZXggPT09IG51bGwgPyAxIDogaW5kZXguYXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XG5cblx0XHRjb25zdCBkcmF3SW5mbyA9IHRoaXMuX2RyYXdJbmZvO1xuXHRcdGNvbnN0IG11bHRpRHJhd1N0YXJ0cyA9IHRoaXMuX211bHRpRHJhd1N0YXJ0cztcblx0XHRjb25zdCBtdWx0aURyYXdDb3VudHMgPSB0aGlzLl9tdWx0aURyYXdDb3VudHM7XG5cdFx0Y29uc3QgZHJhd1JhbmdlcyA9IHRoaXMuX2RyYXdSYW5nZXM7XG5cdFx0Y29uc3QgcGVyT2JqZWN0RnJ1c3R1bUN1bGxlZCA9IHRoaXMucGVyT2JqZWN0RnJ1c3R1bUN1bGxlZDtcblx0XHRjb25zdCBpbmRpcmVjdFRleHR1cmUgPSB0aGlzLl9pbmRpcmVjdFRleHR1cmU7XG5cdFx0Y29uc3QgaW5kaXJlY3RBcnJheSA9IGluZGlyZWN0VGV4dHVyZS5pbWFnZS5kYXRhO1xuXG5cdFx0Ly8gcHJlcGFyZSB0aGUgZnJ1c3R1bSBpbiB0aGUgbG9jYWwgZnJhbWVcblx0XHRpZiAoIHBlck9iamVjdEZydXN0dW1DdWxsZWQgKSB7XG5cblx0XHRcdF9wcm9qU2NyZWVuTWF0cml4XG5cdFx0XHRcdC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApXG5cdFx0XHRcdC5tdWx0aXBseSggdGhpcy5tYXRyaXhXb3JsZCApO1xuXHRcdFx0X2ZydXN0dW0uc2V0RnJvbVByb2plY3Rpb25NYXRyaXgoXG5cdFx0XHRcdF9wcm9qU2NyZWVuTWF0cml4LFxuXHRcdFx0XHRyZW5kZXJlci5jb29yZGluYXRlU3lzdGVtXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGNvdW50ID0gMDtcblx0XHRpZiAoIHRoaXMuc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdC8vIGdldCB0aGUgY2FtZXJhIHBvc2l0aW9uIGluIHRoZSBsb2NhbCBmcmFtZVxuXHRcdFx0X2ludk1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblx0XHRcdF92ZWN0b3Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKS5hcHBseU1hdHJpeDQoIF9pbnZNYXRyaXhXb3JsZCApO1xuXHRcdFx0X2ZvcndhcmQuc2V0KCAwLCAwLCAtIDEgKS50cmFuc2Zvcm1EaXJlY3Rpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApLnRyYW5zZm9ybURpcmVjdGlvbiggX2ludk1hdHJpeFdvcmxkICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGRyYXdJbmZvLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBkcmF3SW5mb1sgaSBdLnZpc2libGUgJiYgZHJhd0luZm9bIGkgXS5hY3RpdmUgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBnZW9tZXRyeUlkID0gZHJhd0luZm9bIGkgXS5nZW9tZXRyeUluZGV4O1xuXG5cdFx0XHRcdFx0Ly8gZ2V0IHRoZSBib3VuZHMgaW4gd29ybGQgc3BhY2Vcblx0XHRcdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpLCBfbWF0cml4ICk7XG5cdFx0XHRcdFx0dGhpcy5nZXRCb3VuZGluZ1NwaGVyZUF0KCBnZW9tZXRyeUlkLCBfc3BoZXJlICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4ICk7XG5cblx0XHRcdFx0XHQvLyBkZXRlcm1pbmUgd2hldGhlciB0aGUgYmF0Y2hlZCBnZW9tZXRyeSBpcyB3aXRoaW4gdGhlIGZydXN0dW1cblx0XHRcdFx0XHRsZXQgY3VsbGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYgKCBwZXJPYmplY3RGcnVzdHVtQ3VsbGVkICkge1xuXG5cdFx0XHRcdFx0XHRjdWxsZWQgPSAhIF9mcnVzdHVtLmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggISBjdWxsZWQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGdldCB0aGUgZGlzdGFuY2UgZnJvbSBjYW1lcmEgdXNlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdFx0Y29uc3QgeiA9IF90ZW1wLnN1YlZlY3RvcnMoIF9zcGhlcmUuY2VudGVyLCBfdmVjdG9yICkuZG90KCBfZm9yd2FyZCApO1xuXHRcdFx0XHRcdFx0X3JlbmRlckxpc3QucHVzaCggZHJhd1Jhbmdlc1sgZ2VvbWV0cnlJZCBdLCB6LCBpICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFNvcnQgdGhlIGRyYXcgcmFuZ2VzIGFuZCBwcmVwIGZvciByZW5kZXJpbmdcblx0XHRcdGNvbnN0IGxpc3QgPSBfcmVuZGVyTGlzdC5saXN0O1xuXHRcdFx0Y29uc3QgY3VzdG9tU29ydCA9IHRoaXMuY3VzdG9tU29ydDtcblx0XHRcdGlmICggY3VzdG9tU29ydCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRsaXN0LnNvcnQoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID8gc29ydFRyYW5zcGFyZW50IDogc29ydE9wYXF1ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGN1c3RvbVNvcnQuY2FsbCggdGhpcywgbGlzdCwgY2FtZXJhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGl0ZW0gPSBsaXN0WyBpIF07XG5cdFx0XHRcdG11bHRpRHJhd1N0YXJ0c1sgY291bnQgXSA9IGl0ZW0uc3RhcnQgKiBieXRlc1BlckVsZW1lbnQ7XG5cdFx0XHRcdG11bHRpRHJhd0NvdW50c1sgY291bnQgXSA9IGl0ZW0uY291bnQ7XG5cdFx0XHRcdGluZGlyZWN0QXJyYXlbIGNvdW50IF0gPSBpdGVtLmluZGV4O1xuXHRcdFx0XHRjb3VudCArKztcblxuXHRcdFx0fVxuXG5cdFx0XHRfcmVuZGVyTGlzdC5yZXNldCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gZHJhd0luZm8ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGRyYXdJbmZvWyBpIF0udmlzaWJsZSAmJiBkcmF3SW5mb1sgaSBdLmFjdGl2ZSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdlb21ldHJ5SWQgPSBkcmF3SW5mb1sgaSBdLmdlb21ldHJ5SW5kZXg7XG5cblx0XHRcdFx0XHQvLyBkZXRlcm1pbmUgd2hldGhlciB0aGUgYmF0Y2hlZCBnZW9tZXRyeSBpcyB3aXRoaW4gdGhlIGZydXN0dW1cblx0XHRcdFx0XHRsZXQgY3VsbGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYgKCBwZXJPYmplY3RGcnVzdHVtQ3VsbGVkICkge1xuXG5cdFx0XHRcdFx0XHQvLyBnZXQgdGhlIGJvdW5kcyBpbiB3b3JsZCBzcGFjZVxuXHRcdFx0XHRcdFx0dGhpcy5nZXRNYXRyaXhBdCggaSwgX21hdHJpeCApO1xuXHRcdFx0XHRcdFx0dGhpcy5nZXRCb3VuZGluZ1NwaGVyZUF0KCBnZW9tZXRyeUlkLCBfc3BoZXJlICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4ICk7XG5cdFx0XHRcdFx0XHRjdWxsZWQgPSAhIF9mcnVzdHVtLmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggISBjdWxsZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHJhbmdlID0gZHJhd1Jhbmdlc1sgZ2VvbWV0cnlJZCBdO1xuXHRcdFx0XHRcdFx0bXVsdGlEcmF3U3RhcnRzWyBjb3VudCBdID0gcmFuZ2Uuc3RhcnQgKiBieXRlc1BlckVsZW1lbnQ7XG5cdFx0XHRcdFx0XHRtdWx0aURyYXdDb3VudHNbIGNvdW50IF0gPSByYW5nZS5jb3VudDtcblx0XHRcdFx0XHRcdGluZGlyZWN0QXJyYXlbIGNvdW50IF0gPSBpO1xuXHRcdFx0XHRcdFx0Y291bnQgKys7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpbmRpcmVjdFRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMuX211bHRpRHJhd0NvdW50ID0gY291bnQ7XG5cdFx0dGhpcy5fdmlzaWJpbGl0eUNoYW5nZWQgPSBmYWxzZTtcblxuXHR9XG5cblx0b25CZWZvcmVTaGFkb3coIHJlbmRlcmVyLCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbC8qICwgZ3JvdXAgKi8gKSB7XG5cblx0XHR0aGlzLm9uQmVmb3JlUmVuZGVyKCByZW5kZXJlciwgbnVsbCwgc2hhZG93Q2FtZXJhLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBCYXRjaGVkTWVzaCB9O1xuIiwiaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsLmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5cbmNsYXNzIExpbmVCYXNpY01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNMaW5lQmFzaWNNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZUJhc2ljTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMubGluZXdpZHRoID0gMTtcblx0XHR0aGlzLmxpbmVjYXAgPSAncm91bmQnO1xuXHRcdHRoaXMubGluZWpvaW4gPSAncm91bmQnO1xuXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmxpbmV3aWR0aCA9IHNvdXJjZS5saW5ld2lkdGg7XG5cdFx0dGhpcy5saW5lY2FwID0gc291cmNlLmxpbmVjYXA7XG5cdFx0dGhpcy5saW5lam9pbiA9IHNvdXJjZS5saW5lam9pbjtcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9O1xuIiwiaW1wb3J0IHsgU3BoZXJlIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmUuanMnO1xuaW1wb3J0IHsgUmF5IH0gZnJvbSAnLi4vbWF0aC9SYXkuanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcblxuY29uc3QgX3ZTdGFydCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92RW5kID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfaW52ZXJzZU1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9yYXkgPSAvKkBfX1BVUkVfXyovIG5ldyBSYXkoKTtcbmNvbnN0IF9zcGhlcmUgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcblxuY29uc3QgX2ludGVyc2VjdFBvaW50T25SYXkgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfaW50ZXJzZWN0UG9pbnRPblNlZ21lbnQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIExpbmUgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCksIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc0xpbmUgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmUnO1xuXG5cdFx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuXHRcdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblxuXHRcdHRoaXMudXBkYXRlTW9ycGhUYXJnZXRzKCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMubWF0ZXJpYWwgPSBBcnJheS5pc0FycmF5KCBzb3VyY2UubWF0ZXJpYWwgKSA/IHNvdXJjZS5tYXRlcmlhbC5zbGljZSgpIDogc291cmNlLm1hdGVyaWFsO1xuXHRcdHRoaXMuZ2VvbWV0cnkgPSBzb3VyY2UuZ2VvbWV0cnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29tcHV0ZUxpbmVEaXN0YW5jZXMoKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHQvLyB3ZSBhc3N1bWUgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHRcdGlmICggZ2VvbWV0cnkuaW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdGNvbnN0IGxpbmVEaXN0YW5jZXMgPSBbIDAgXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAxLCBsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdF92U3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgLSAxICk7XG5cdFx0XHRcdF92RW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICk7XG5cblx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcblx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdICs9IF92U3RhcnQuZGlzdGFuY2VUbyggX3ZFbmQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdsaW5lRGlzdGFuY2UnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbGluZURpc3RhbmNlcywgMSApICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCk6IENvbXB1dGF0aW9uIG9ubHkgcG9zc2libGUgd2l0aCBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeS4nICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcblx0XHRjb25zdCB0aHJlc2hvbGQgPSByYXljYXN0ZXIucGFyYW1zLkxpbmUudGhyZXNob2xkO1xuXHRcdGNvbnN0IGRyYXdSYW5nZSA9IGdlb21ldHJ5LmRyYXdSYW5nZTtcblxuXHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0X3NwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdF9zcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXHRcdF9zcGhlcmUucmFkaXVzICs9IHRocmVzaG9sZDtcblxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly9cblxuXHRcdF9pbnZlcnNlTWF0cml4LmNvcHkoIG1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cdFx0X3JheS5jb3B5KCByYXljYXN0ZXIucmF5ICkuYXBwbHlNYXRyaXg0KCBfaW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0Y29uc3QgbG9jYWxUaHJlc2hvbGQgPSB0aHJlc2hvbGQgLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7XG5cdFx0Y29uc3QgbG9jYWxUaHJlc2hvbGRTcSA9IGxvY2FsVGhyZXNob2xkICogbG9jYWxUaHJlc2hvbGQ7XG5cblx0XHRjb25zdCBzdGVwID0gdGhpcy5pc0xpbmVTZWdtZW50cyA/IDIgOiAxO1xuXG5cdFx0Y29uc3QgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBpbmRleC5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBsID0gZW5kIC0gMTsgaSA8IGw7IGkgKz0gc3RlcCApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gaW5kZXguZ2V0WCggaSApO1xuXHRcdFx0XHRjb25zdCBiID0gaW5kZXguZ2V0WCggaSArIDEgKTtcblxuXHRcdFx0XHRjb25zdCBpbnRlcnNlY3QgPSBjaGVja0ludGVyc2VjdGlvbiggdGhpcywgcmF5Y2FzdGVyLCBfcmF5LCBsb2NhbFRocmVzaG9sZFNxLCBhLCBiICk7XG5cblx0XHRcdFx0aWYgKCBpbnRlcnNlY3QgKSB7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRoaXMuaXNMaW5lTG9vcCApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gaW5kZXguZ2V0WCggZW5kIC0gMSApO1xuXHRcdFx0XHRjb25zdCBiID0gaW5kZXguZ2V0WCggc3RhcnQgKTtcblxuXHRcdFx0XHRjb25zdCBpbnRlcnNlY3QgPSBjaGVja0ludGVyc2VjdGlvbiggdGhpcywgcmF5Y2FzdGVyLCBfcmF5LCBsb2NhbFRocmVzaG9sZFNxLCBhLCBiICk7XG5cblx0XHRcdFx0aWYgKCBpbnRlcnNlY3QgKSB7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggcG9zaXRpb25BdHRyaWJ1dGUuY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgbCA9IGVuZCAtIDE7IGkgPCBsOyBpICs9IHN0ZXAgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW50ZXJzZWN0ID0gY2hlY2tJbnRlcnNlY3Rpb24oIHRoaXMsIHJheWNhc3RlciwgX3JheSwgbG9jYWxUaHJlc2hvbGRTcSwgaSwgaSArIDEgKTtcblxuXHRcdFx0XHRpZiAoIGludGVyc2VjdCApIHtcblxuXHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5pc0xpbmVMb29wICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVyc2VjdCA9IGNoZWNrSW50ZXJzZWN0aW9uKCB0aGlzLCByYXljYXN0ZXIsIF9yYXksIGxvY2FsVGhyZXNob2xkU3EsIGVuZCAtIDEsIHN0YXJ0ICk7XG5cblx0XHRcdFx0aWYgKCBpbnRlcnNlY3QgKSB7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGVNb3JwaFRhcmdldHMoKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTtcblxuXHRcdGlmICgga2V5cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1sga2V5c1sgMCBdIF07XG5cblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xuXHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHt9O1xuXG5cdFx0XHRcdGZvciAoIGxldCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG5hbWUgPSBtb3JwaEF0dHJpYnV0ZVsgbSBdLm5hbWUgfHwgU3RyaW5nKCBtICk7XG5cblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKCAwICk7XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50ZXJzZWN0aW9uKCBvYmplY3QsIHJheWNhc3RlciwgcmF5LCB0aHJlc2hvbGRTcSwgYSwgYiApIHtcblxuXHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IG9iamVjdC5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdF92U3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGEgKTtcblx0X3ZFbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGIgKTtcblxuXHRjb25zdCBkaXN0U3EgPSByYXkuZGlzdGFuY2VTcVRvU2VnbWVudCggX3ZTdGFydCwgX3ZFbmQsIF9pbnRlcnNlY3RQb2ludE9uUmF5LCBfaW50ZXJzZWN0UG9pbnRPblNlZ21lbnQgKTtcblxuXHRpZiAoIGRpc3RTcSA+IHRocmVzaG9sZFNxICkgcmV0dXJuO1xuXG5cdF9pbnRlcnNlY3RQb2ludE9uUmF5LmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7IC8vIE1vdmUgYmFjayB0byB3b3JsZCBzcGFjZSBmb3IgZGlzdGFuY2UgY2FsY3VsYXRpb25cblxuXHRjb25zdCBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIF9pbnRlcnNlY3RQb2ludE9uUmF5ICk7XG5cblx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybjtcblxuXHRyZXR1cm4ge1xuXG5cdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdC8vIFdoYXQgZG8gd2Ugd2FudD8gaW50ZXJzZWN0aW9uIHBvaW50IG9uIHRoZSByYXkgb3Igb24gdGhlIHNlZ21lbnQ/P1xuXHRcdC8vIHBvaW50OiByYXljYXN0ZXIucmF5LmF0KCBkaXN0YW5jZSApLFxuXHRcdHBvaW50OiBfaW50ZXJzZWN0UG9pbnRPblNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApLFxuXHRcdGluZGV4OiBhLFxuXHRcdGZhY2U6IG51bGwsXG5cdFx0ZmFjZUluZGV4OiBudWxsLFxuXHRcdG9iamVjdDogb2JqZWN0XG5cblx0fTtcblxufVxuXG5leHBvcnQgeyBMaW5lIH07XG4iLCJpbXBvcnQgeyBMaW5lIH0gZnJvbSAnLi9MaW5lLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcblxuY29uc3QgX3N0YXJ0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2VuZCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgTGluZVNlZ21lbnRzIGV4dGVuZHMgTGluZSB7XG5cblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMuaXNMaW5lU2VnbWVudHMgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmVTZWdtZW50cyc7XG5cblx0fVxuXG5cdGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0Ly8gd2UgYXNzdW1lIG5vbi1pbmRleGVkIGdlb21ldHJ5XG5cblx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRjb25zdCBsaW5lRGlzdGFuY2VzID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArPSAyICkge1xuXG5cdFx0XHRcdF9zdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXHRcdFx0XHRfZW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMSApO1xuXG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9ICggaSA9PT0gMCApID8gMCA6IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgKyAxIF0gPSBsaW5lRGlzdGFuY2VzWyBpIF0gKyBfc3RhcnQuZGlzdGFuY2VUbyggX2VuZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBsaW5lRGlzdGFuY2VzLCAxICkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmVTZWdtZW50cy5jb21wdXRlTGluZURpc3RhbmNlcygpOiBDb21wdXRhdGlvbiBvbmx5IHBvc3NpYmxlIHdpdGggbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnkuJyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IExpbmVTZWdtZW50cyB9O1xuIiwiaW1wb3J0IHsgTGluZSB9IGZyb20gJy4vTGluZS5qcyc7XG5cbmNsYXNzIExpbmVMb29wIGV4dGVuZHMgTGluZSB7XG5cblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMuaXNMaW5lTG9vcCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZUxvb3AnO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBMaW5lTG9vcCB9O1xuIiwiaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsLmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5cbmNsYXNzIFBvaW50c01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNQb2ludHNNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnUG9pbnRzTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5zaXplID0gMTtcblx0XHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHRydWU7XG5cblx0XHR0aGlzLmZvZyA9IHRydWU7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5zaXplID0gc291cmNlLnNpemU7XG5cdFx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0dGhpcy5mb2cgPSBzb3VyY2UuZm9nO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFBvaW50c01hdGVyaWFsIH07XG4iLCJpbXBvcnQgeyBTcGhlcmUgfSBmcm9tICcuLi9tYXRoL1NwaGVyZS5qcyc7XG5pbXBvcnQgeyBSYXkgfSBmcm9tICcuLi9tYXRoL1JheS5qcyc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFBvaW50c01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL1BvaW50c01hdGVyaWFsLmpzJztcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5cbmNvbnN0IF9pbnZlcnNlTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3JheSA9IC8qQF9fUFVSRV9fKi8gbmV3IFJheSgpO1xuY29uc3QgX3NwaGVyZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFNwaGVyZSgpO1xuY29uc3QgX3Bvc2l0aW9uID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBQb2ludHMgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCksIG1hdGVyaWFsID0gbmV3IFBvaW50c01hdGVyaWFsKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc1BvaW50cyA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnUG9pbnRzJztcblxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblx0XHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cblx0XHR0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLm1hdGVyaWFsID0gQXJyYXkuaXNBcnJheSggc291cmNlLm1hdGVyaWFsICkgPyBzb3VyY2UubWF0ZXJpYWwuc2xpY2UoKSA6IHNvdXJjZS5tYXRlcmlhbDtcblx0XHR0aGlzLmdlb21ldHJ5ID0gc291cmNlLmdlb21ldHJ5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cdFx0Y29uc3QgdGhyZXNob2xkID0gcmF5Y2FzdGVyLnBhcmFtcy5Qb2ludHMudGhyZXNob2xkO1xuXHRcdGNvbnN0IGRyYXdSYW5nZSA9IGdlb21ldHJ5LmRyYXdSYW5nZTtcblxuXHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0X3NwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdF9zcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXHRcdF9zcGhlcmUucmFkaXVzICs9IHRocmVzaG9sZDtcblxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly9cblxuXHRcdF9pbnZlcnNlTWF0cml4LmNvcHkoIG1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cdFx0X3JheS5jb3B5KCByYXljYXN0ZXIucmF5ICkuYXBwbHlNYXRyaXg0KCBfaW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0Y29uc3QgbG9jYWxUaHJlc2hvbGQgPSB0aHJlc2hvbGQgLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7XG5cdFx0Y29uc3QgbG9jYWxUaHJlc2hvbGRTcSA9IGxvY2FsVGhyZXNob2xkICogbG9jYWxUaHJlc2hvbGQ7XG5cblx0XHRjb25zdCBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIGluZGV4LmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gc3RhcnQsIGlsID0gZW5kOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYSA9IGluZGV4LmdldFgoIGkgKTtcblxuXHRcdFx0XHRfcG9zaXRpb24uZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGEgKTtcblxuXHRcdFx0XHR0ZXN0UG9pbnQoIF9wb3NpdGlvbiwgYSwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdGhpcyApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBsID0gZW5kOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRfcG9zaXRpb24uZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcblxuXHRcdFx0XHR0ZXN0UG9pbnQoIF9wb3NpdGlvbiwgaSwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdGhpcyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0cygpIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApO1xuXG5cdFx0aWYgKCBrZXlzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBrZXlzWyAwIF0gXTtcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gW107XG5cdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XG5cblx0XHRcdFx0Zm9yICggbGV0IG0gPSAwLCBtbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgbSA8IG1sOyBtICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbmFtZSA9IG1vcnBoQXR0cmlidXRlWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goIDAgKTtcblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gdGVzdFBvaW50KCBwb2ludCwgaW5kZXgsIGxvY2FsVGhyZXNob2xkU3EsIG1hdHJpeFdvcmxkLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIG9iamVjdCApIHtcblxuXHRjb25zdCByYXlQb2ludERpc3RhbmNlU3EgPSBfcmF5LmRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApO1xuXG5cdGlmICggcmF5UG9pbnREaXN0YW5jZVNxIDwgbG9jYWxUaHJlc2hvbGRTcSApIHtcblxuXHRcdGNvbnN0IGludGVyc2VjdFBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdF9yYXkuY2xvc2VzdFBvaW50VG9Qb2ludCggcG9pbnQsIGludGVyc2VjdFBvaW50ICk7XG5cdFx0aW50ZXJzZWN0UG9pbnQuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0Y29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBpbnRlcnNlY3RQb2ludCApO1xuXG5cdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybjtcblxuXHRcdGludGVyc2VjdHMucHVzaCgge1xuXG5cdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRkaXN0YW5jZVRvUmF5OiBNYXRoLnNxcnQoIHJheVBvaW50RGlzdGFuY2VTcSApLFxuXHRcdFx0cG9pbnQ6IGludGVyc2VjdFBvaW50LFxuXHRcdFx0aW5kZXg6IGluZGV4LFxuXHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdG9iamVjdDogb2JqZWN0XG5cblx0XHR9ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFBvaW50cyB9O1xuIiwiaW1wb3J0IHsgTGluZWFyRmlsdGVyIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuL1RleHR1cmUuanMnO1xuXG5jbGFzcyBWaWRlb1RleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3RvciggdmlkZW8sIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHtcblxuXHRcdHN1cGVyKCB2aWRlbywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XG5cblx0XHR0aGlzLmlzVmlkZW9UZXh0dXJlID0gdHJ1ZTtcblxuXHRcdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1hZ0ZpbHRlciA6IExpbmVhckZpbHRlcjtcblxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRmdW5jdGlvbiB1cGRhdGVWaWRlbygpIHtcblxuXHRcdFx0c2NvcGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0dmlkZW8ucmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjayggdXBkYXRlVmlkZW8gKTtcblxuXHRcdH1cblxuXHRcdGlmICggJ3JlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2snIGluIHZpZGVvICkge1xuXG5cdFx0XHR2aWRlby5yZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrKCB1cGRhdGVWaWRlbyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5pbWFnZSApLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0dXBkYXRlKCkge1xuXG5cdFx0Y29uc3QgdmlkZW8gPSB0aGlzLmltYWdlO1xuXHRcdGNvbnN0IGhhc1ZpZGVvRnJhbWVDYWxsYmFjayA9ICdyZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrJyBpbiB2aWRlbztcblxuXHRcdGlmICggaGFzVmlkZW9GcmFtZUNhbGxiYWNrID09PSBmYWxzZSAmJiB2aWRlby5yZWFkeVN0YXRlID49IHZpZGVvLkhBVkVfQ1VSUkVOVF9EQVRBICkge1xuXG5cdFx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgVmlkZW9UZXh0dXJlIH07XG4iLCJpbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlLmpzJztcbmltcG9ydCB7IE5lYXJlc3RGaWx0ZXIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuXG5jbGFzcyBGcmFtZWJ1ZmZlclRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdHN1cGVyKCB7IHdpZHRoLCBoZWlnaHQgfSApO1xuXG5cdFx0dGhpcy5pc0ZyYW1lYnVmZmVyVGV4dHVyZSA9IHRydWU7XG5cblx0XHR0aGlzLm1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBGcmFtZWJ1ZmZlclRleHR1cmUgfTtcbiIsImltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuL1RleHR1cmUuanMnO1xuXG5jbGFzcyBDb21wcmVzc2VkVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdGNvbnN0cnVjdG9yKCBtaXBtYXBzLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGNvbG9yU3BhY2UgKSB7XG5cblx0XHRzdXBlciggbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICk7XG5cblx0XHR0aGlzLmlzQ29tcHJlc3NlZFRleHR1cmUgPSB0cnVlO1xuXG5cdFx0dGhpcy5pbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXHRcdHRoaXMubWlwbWFwcyA9IG1pcG1hcHM7XG5cblx0XHQvLyBubyBmbGlwcGluZyBmb3IgY3ViZSB0ZXh0dXJlc1xuXHRcdC8vIChhbHNvIGZsaXBwaW5nIGRvZXNuJ3Qgd29yayBmb3IgY29tcHJlc3NlZCB0ZXh0dXJlcyApXG5cblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cblx0XHQvLyBjYW4ndCBnZW5lcmF0ZSBtaXBtYXBzIGZvciBjb21wcmVzc2VkIHRleHR1cmVzXG5cdFx0Ly8gbWlwcyBtdXN0IGJlIGVtYmVkZGVkIGluIEREUyBmaWxlc1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQ29tcHJlc3NlZFRleHR1cmUgfTtcbiIsImltcG9ydCB7IENsYW1wVG9FZGdlV3JhcHBpbmcgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgQ29tcHJlc3NlZFRleHR1cmUgfSBmcm9tICcuL0NvbXByZXNzZWRUZXh0dXJlLmpzJztcblxuY2xhc3MgQ29tcHJlc3NlZEFycmF5VGV4dHVyZSBleHRlbmRzIENvbXByZXNzZWRUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3RvciggbWlwbWFwcywgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGZvcm1hdCwgdHlwZSApIHtcblxuXHRcdHN1cGVyKCBtaXBtYXBzLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUgKTtcblxuXHRcdHRoaXMuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlID0gdHJ1ZTtcblx0XHR0aGlzLmltYWdlLmRlcHRoID0gZGVwdGg7XG5cdFx0dGhpcy53cmFwUiA9IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cblx0XHR0aGlzLmxheWVyVXBkYXRlcyA9IG5ldyBTZXQoKTtcblxuXHR9XG5cblx0YWRkTGF5ZXJVcGRhdGUoIGxheWVySW5kZXggKSB7XG5cblx0XHR0aGlzLmxheWVyVXBkYXRlcy5hZGQoIGxheWVySW5kZXggKTtcblxuXHR9XG5cblx0Y2xlYXJMYXllclVwZGF0ZXMoKSB7XG5cblx0XHR0aGlzLmxheWVyVXBkYXRlcy5jbGVhcigpO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBDb21wcmVzc2VkQXJyYXlUZXh0dXJlIH07XG4iLCJpbXBvcnQgeyBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgQ29tcHJlc3NlZFRleHR1cmUgfSBmcm9tICcuL0NvbXByZXNzZWRUZXh0dXJlLmpzJztcblxuY2xhc3MgQ29tcHJlc3NlZEN1YmVUZXh0dXJlIGV4dGVuZHMgQ29tcHJlc3NlZFRleHR1cmUge1xuXG5cdGNvbnN0cnVjdG9yKCBpbWFnZXMsIGZvcm1hdCwgdHlwZSApIHtcblxuXHRcdHN1cGVyKCB1bmRlZmluZWQsIGltYWdlc1sgMCBdLndpZHRoLCBpbWFnZXNbIDAgXS5oZWlnaHQsIGZvcm1hdCwgdHlwZSwgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nICk7XG5cblx0XHR0aGlzLmlzQ29tcHJlc3NlZEN1YmVUZXh0dXJlID0gdHJ1ZTtcblx0XHR0aGlzLmlzQ3ViZVRleHR1cmUgPSB0cnVlO1xuXG5cdFx0dGhpcy5pbWFnZSA9IGltYWdlcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQ29tcHJlc3NlZEN1YmVUZXh0dXJlIH07XG4iLCJpbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlLmpzJztcblxuY2xhc3MgQ2FudmFzVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdGNvbnN0cnVjdG9yKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHtcblxuXHRcdHN1cGVyKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xuXG5cdFx0dGhpcy5pc0NhbnZhc1RleHR1cmUgPSB0cnVlO1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IENhbnZhc1RleHR1cmUgfTtcbiIsImltcG9ydCAqIGFzIE1hdGhVdGlscyBmcm9tICcuLi8uLi9tYXRoL01hdGhVdGlscy5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uLy4uL21hdGgvTWF0cml4NC5qcyc7XG5cbi8qKlxuICogRXh0ZW5zaWJsZSBjdXJ2ZSBvYmplY3QuXG4gKlxuICogU29tZSBjb21tb24gb2YgY3VydmUgbWV0aG9kczpcbiAqIC5nZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgKSwgLmdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0IClcbiAqIC5nZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApLCAuZ2V0VGFuZ2VudEF0KCB1LCBvcHRpb25hbFRhcmdldCApXG4gKiAuZ2V0UG9pbnRzKCksIC5nZXRTcGFjZWRQb2ludHMoKVxuICogLmdldExlbmd0aCgpXG4gKiAudXBkYXRlQXJjTGVuZ3RocygpXG4gKlxuICogVGhpcyBmb2xsb3dpbmcgY3VydmVzIGluaGVyaXQgZnJvbSBUSFJFRS5DdXJ2ZTpcbiAqXG4gKiAtLSAyRCBjdXJ2ZXMgLS1cbiAqIFRIUkVFLkFyY0N1cnZlXG4gKiBUSFJFRS5DdWJpY0JlemllckN1cnZlXG4gKiBUSFJFRS5FbGxpcHNlQ3VydmVcbiAqIFRIUkVFLkxpbmVDdXJ2ZVxuICogVEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmVcbiAqIFRIUkVFLlNwbGluZUN1cnZlXG4gKlxuICogLS0gM0QgY3VydmVzIC0tXG4gKiBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzXG4gKiBUSFJFRS5DdWJpY0JlemllckN1cnZlM1xuICogVEhSRUUuTGluZUN1cnZlM1xuICogVEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmUzXG4gKlxuICogQSBzZXJpZXMgb2YgY3VydmVzIGNhbiBiZSByZXByZXNlbnRlZCBhcyBhIFRIUkVFLkN1cnZlUGF0aC5cbiAqXG4gKiovXG5cbmNsYXNzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMudHlwZSA9ICdDdXJ2ZSc7XG5cblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IDIwMDtcblxuXHR9XG5cblx0Ly8gVmlydHVhbCBiYXNlIGNsYXNzIG1ldGhvZCB0byBvdmVyd3JpdGUgYW5kIGltcGxlbWVudCBpbiBzdWJjbGFzc2VzXG5cdC8vXHQtIHQgWzAgLi4gMV1cblxuXHRnZXRQb2ludCggLyogdCwgb3B0aW9uYWxUYXJnZXQgKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLmdldFBvaW50KCkgbm90IGltcGxlbWVudGVkLicgKTtcblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cblx0Ly8gR2V0IHBvaW50IGF0IHJlbGF0aXZlIHBvc2l0aW9uIGluIGN1cnZlIGFjY29yZGluZyB0byBhcmMgbGVuZ3RoXG5cdC8vIC0gdSBbMCAuLiAxXVxuXG5cdGdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgdCA9IHRoaXMuZ2V0VXRvVG1hcHBpbmcoIHUgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG5cblx0Ly8gR2V0IHNlcXVlbmNlIG9mIHBvaW50cyB1c2luZyBnZXRQb2ludCggdCApXG5cblx0Z2V0UG9pbnRzKCBkaXZpc2lvbnMgPSA1ICkge1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgZCA9IDA7IGQgPD0gZGl2aXNpb25zOyBkICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludCggZCAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH1cblxuXHQvLyBHZXQgc2VxdWVuY2Ugb2YgcG9pbnRzIHVzaW5nIGdldFBvaW50QXQoIHUgKVxuXG5cdGdldFNwYWNlZFBvaW50cyggZGl2aXNpb25zID0gNSApIHtcblxuXHRcdGNvbnN0IHBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGQgPSAwOyBkIDw9IGRpdmlzaW9uczsgZCArKyApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnRBdCggZCAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH1cblxuXHQvLyBHZXQgdG90YWwgY3VydmUgYXJjIGxlbmd0aFxuXG5cdGdldExlbmd0aCgpIHtcblxuXHRcdGNvbnN0IGxlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcblx0XHRyZXR1cm4gbGVuZ3Roc1sgbGVuZ3Rocy5sZW5ndGggLSAxIF07XG5cblx0fVxuXG5cdC8vIEdldCBsaXN0IG9mIGN1bXVsYXRpdmUgc2VnbWVudCBsZW5ndGhzXG5cblx0Z2V0TGVuZ3RocyggZGl2aXNpb25zID0gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgKSB7XG5cblx0XHRpZiAoIHRoaXMuY2FjaGVBcmNMZW5ndGhzICYmXG5cdFx0XHQoIHRoaXMuY2FjaGVBcmNMZW5ndGhzLmxlbmd0aCA9PT0gZGl2aXNpb25zICsgMSApICYmXG5cdFx0XHQhIHRoaXMubmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmNhY2hlQXJjTGVuZ3RocztcblxuXHRcdH1cblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGNhY2hlID0gW107XG5cdFx0bGV0IGN1cnJlbnQsIGxhc3QgPSB0aGlzLmdldFBvaW50KCAwICk7XG5cdFx0bGV0IHN1bSA9IDA7XG5cblx0XHRjYWNoZS5wdXNoKCAwICk7XG5cblx0XHRmb3IgKCBsZXQgcCA9IDE7IHAgPD0gZGl2aXNpb25zOyBwICsrICkge1xuXG5cdFx0XHRjdXJyZW50ID0gdGhpcy5nZXRQb2ludCggcCAvIGRpdmlzaW9ucyApO1xuXHRcdFx0c3VtICs9IGN1cnJlbnQuZGlzdGFuY2VUbyggbGFzdCApO1xuXHRcdFx0Y2FjaGUucHVzaCggc3VtICk7XG5cdFx0XHRsYXN0ID0gY3VycmVudDtcblxuXHRcdH1cblxuXHRcdHRoaXMuY2FjaGVBcmNMZW5ndGhzID0gY2FjaGU7XG5cblx0XHRyZXR1cm4gY2FjaGU7IC8vIHsgc3VtczogY2FjaGUsIHN1bTogc3VtIH07IFN1bSBpcyBpbiB0aGUgbGFzdCBlbGVtZW50LlxuXG5cdH1cblxuXHR1cGRhdGVBcmNMZW5ndGhzKCkge1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5nZXRMZW5ndGhzKCk7XG5cblx0fVxuXG5cdC8vIEdpdmVuIHUgKCAwIC4uIDEgKSwgZ2V0IGEgdCB0byBmaW5kIHAuIFRoaXMgZ2l2ZXMgeW91IHBvaW50cyB3aGljaCBhcmUgZXF1aWRpc3RhbnRcblxuXHRnZXRVdG9UbWFwcGluZyggdSwgZGlzdGFuY2UgKSB7XG5cblx0XHRjb25zdCBhcmNMZW5ndGhzID0gdGhpcy5nZXRMZW5ndGhzKCk7XG5cblx0XHRsZXQgaSA9IDA7XG5cdFx0Y29uc3QgaWwgPSBhcmNMZW5ndGhzLmxlbmd0aDtcblxuXHRcdGxldCB0YXJnZXRBcmNMZW5ndGg7IC8vIFRoZSB0YXJnZXRlZCB1IGRpc3RhbmNlIHZhbHVlIHRvIGdldFxuXG5cdFx0aWYgKCBkaXN0YW5jZSApIHtcblxuXHRcdFx0dGFyZ2V0QXJjTGVuZ3RoID0gZGlzdGFuY2U7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0YXJnZXRBcmNMZW5ndGggPSB1ICogYXJjTGVuZ3Roc1sgaWwgLSAxIF07XG5cblx0XHR9XG5cblx0XHQvLyBiaW5hcnkgc2VhcmNoIGZvciB0aGUgaW5kZXggd2l0aCBsYXJnZXN0IHZhbHVlIHNtYWxsZXIgdGhhbiB0YXJnZXQgdSBkaXN0YW5jZVxuXG5cdFx0bGV0IGxvdyA9IDAsIGhpZ2ggPSBpbCAtIDEsIGNvbXBhcmlzb247XG5cblx0XHR3aGlsZSAoIGxvdyA8PSBoaWdoICkge1xuXG5cdFx0XHRpID0gTWF0aC5mbG9vciggbG93ICsgKCBoaWdoIC0gbG93ICkgLyAyICk7IC8vIGxlc3MgbGlrZWx5IHRvIG92ZXJmbG93LCB0aG91Z2ggcHJvYmFibHkgbm90IGlzc3VlIGhlcmUsIEpTIGRvZXNuJ3QgcmVhbGx5IGhhdmUgaW50ZWdlcnMsIGFsbCBudW1iZXJzIGFyZSBmbG9hdHNcblxuXHRcdFx0Y29tcGFyaXNvbiA9IGFyY0xlbmd0aHNbIGkgXSAtIHRhcmdldEFyY0xlbmd0aDtcblxuXHRcdFx0aWYgKCBjb21wYXJpc29uIDwgMCApIHtcblxuXHRcdFx0XHRsb3cgPSBpICsgMTtcblxuXHRcdFx0fSBlbHNlIGlmICggY29tcGFyaXNvbiA+IDAgKSB7XG5cblx0XHRcdFx0aGlnaCA9IGkgLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGhpZ2ggPSBpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHQvLyBET05FXG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGkgPSBoaWdoO1xuXG5cdFx0aWYgKCBhcmNMZW5ndGhzWyBpIF0gPT09IHRhcmdldEFyY0xlbmd0aCApIHtcblxuXHRcdFx0cmV0dXJuIGkgLyAoIGlsIC0gMSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gd2UgY291bGQgZ2V0IGZpbmVyIGdyYWluIGF0IGxlbmd0aHMsIG9yIHVzZSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBwb2ludHNcblxuXHRcdGNvbnN0IGxlbmd0aEJlZm9yZSA9IGFyY0xlbmd0aHNbIGkgXTtcblx0XHRjb25zdCBsZW5ndGhBZnRlciA9IGFyY0xlbmd0aHNbIGkgKyAxIF07XG5cblx0XHRjb25zdCBzZWdtZW50TGVuZ3RoID0gbGVuZ3RoQWZ0ZXIgLSBsZW5ndGhCZWZvcmU7XG5cblx0XHQvLyBkZXRlcm1pbmUgd2hlcmUgd2UgYXJlIGJldHdlZW4gdGhlICdiZWZvcmUnIGFuZCAnYWZ0ZXInIHBvaW50c1xuXG5cdFx0Y29uc3Qgc2VnbWVudEZyYWN0aW9uID0gKCB0YXJnZXRBcmNMZW5ndGggLSBsZW5ndGhCZWZvcmUgKSAvIHNlZ21lbnRMZW5ndGg7XG5cblx0XHQvLyBhZGQgdGhhdCBmcmFjdGlvbmFsIGFtb3VudCB0byB0XG5cblx0XHRjb25zdCB0ID0gKCBpICsgc2VnbWVudEZyYWN0aW9uICkgLyAoIGlsIC0gMSApO1xuXG5cdFx0cmV0dXJuIHQ7XG5cblx0fVxuXG5cdC8vIFJldHVybnMgYSB1bml0IHZlY3RvciB0YW5nZW50IGF0IHRcblx0Ly8gSW4gY2FzZSBhbnkgc3ViIGN1cnZlIGRvZXMgbm90IGltcGxlbWVudCBpdHMgdGFuZ2VudCBkZXJpdmF0aW9uLFxuXHQvLyAyIHBvaW50cyBhIHNtYWxsIGRlbHRhIGFwYXJ0IHdpbGwgYmUgdXNlZCB0byBmaW5kIGl0cyBncmFkaWVudFxuXHQvLyB3aGljaCBzZWVtcyB0byBnaXZlIGEgcmVhc29uYWJsZSBhcHByb3hpbWF0aW9uXG5cblx0Z2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBkZWx0YSA9IDAuMDAwMTtcblx0XHRsZXQgdDEgPSB0IC0gZGVsdGE7XG5cdFx0bGV0IHQyID0gdCArIGRlbHRhO1xuXG5cdFx0Ly8gQ2FwcGluZyBpbiBjYXNlIG9mIGRhbmdlclxuXG5cdFx0aWYgKCB0MSA8IDAgKSB0MSA9IDA7XG5cdFx0aWYgKCB0MiA+IDEgKSB0MiA9IDE7XG5cblx0XHRjb25zdCBwdDEgPSB0aGlzLmdldFBvaW50KCB0MSApO1xuXHRcdGNvbnN0IHB0MiA9IHRoaXMuZ2V0UG9pbnQoIHQyICk7XG5cblx0XHRjb25zdCB0YW5nZW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgKCAoIHB0MS5pc1ZlY3RvcjIgKSA/IG5ldyBWZWN0b3IyKCkgOiBuZXcgVmVjdG9yMygpICk7XG5cblx0XHR0YW5nZW50LmNvcHkoIHB0MiApLnN1YiggcHQxICkubm9ybWFsaXplKCk7XG5cblx0XHRyZXR1cm4gdGFuZ2VudDtcblxuXHR9XG5cblx0Z2V0VGFuZ2VudEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnN0IHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG5cblx0Y29tcHV0ZUZyZW5ldEZyYW1lcyggc2VnbWVudHMsIGNsb3NlZCApIHtcblxuXHRcdC8vIHNlZSBodHRwOi8vd3d3LmNzLmluZGlhbmEuZWR1L3B1Yi90ZWNocmVwb3J0cy9UUjQyNS5wZGZcblxuXHRcdGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRjb25zdCB0YW5nZW50cyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCBiaW5vcm1hbHMgPSBbXTtcblxuXHRcdGNvbnN0IHZlYyA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgbWF0ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdC8vIGNvbXB1dGUgdGhlIHRhbmdlbnQgdmVjdG9ycyBmb3IgZWFjaCBzZWdtZW50IG9uIHRoZSBjdXJ2ZVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCB1ID0gaSAvIHNlZ21lbnRzO1xuXG5cdFx0XHR0YW5nZW50c1sgaSBdID0gdGhpcy5nZXRUYW5nZW50QXQoIHUsIG5ldyBWZWN0b3IzKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHNlbGVjdCBhbiBpbml0aWFsIG5vcm1hbCB2ZWN0b3IgcGVycGVuZGljdWxhciB0byB0aGUgZmlyc3QgdGFuZ2VudCB2ZWN0b3IsXG5cdFx0Ly8gYW5kIGluIHRoZSBkaXJlY3Rpb24gb2YgdGhlIG1pbmltdW0gdGFuZ2VudCB4eXogY29tcG9uZW50XG5cblx0XHRub3JtYWxzWyAwIF0gPSBuZXcgVmVjdG9yMygpO1xuXHRcdGJpbm9ybWFsc1sgMCBdID0gbmV3IFZlY3RvcjMoKTtcblx0XHRsZXQgbWluID0gTnVtYmVyLk1BWF9WQUxVRTtcblx0XHRjb25zdCB0eCA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnggKTtcblx0XHRjb25zdCB0eSA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnkgKTtcblx0XHRjb25zdCB0eiA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnogKTtcblxuXHRcdGlmICggdHggPD0gbWluICkge1xuXG5cdFx0XHRtaW4gPSB0eDtcblx0XHRcdG5vcm1hbC5zZXQoIDEsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHkgPD0gbWluICkge1xuXG5cdFx0XHRtaW4gPSB0eTtcblx0XHRcdG5vcm1hbC5zZXQoIDAsIDEsIDAgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHogPD0gbWluICkge1xuXG5cdFx0XHRub3JtYWwuc2V0KCAwLCAwLCAxICk7XG5cblx0XHR9XG5cblx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCBub3JtYWwgKS5ub3JtYWxpemUoKTtcblxuXHRcdG5vcm1hbHNbIDAgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIHZlYyApO1xuXHRcdGJpbm9ybWFsc1sgMCBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgbm9ybWFsc1sgMCBdICk7XG5cblxuXHRcdC8vIGNvbXB1dGUgdGhlIHNsb3dseS12YXJ5aW5nIG5vcm1hbCBhbmQgYmlub3JtYWwgdmVjdG9ycyBmb3IgZWFjaCBzZWdtZW50IG9uIHRoZSBjdXJ2ZVxuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRub3JtYWxzWyBpIF0gPSBub3JtYWxzWyBpIC0gMSBdLmNsb25lKCk7XG5cblx0XHRcdGJpbm9ybWFsc1sgaSBdID0gYmlub3JtYWxzWyBpIC0gMSBdLmNsb25lKCk7XG5cblx0XHRcdHZlYy5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIC0gMSBdLCB0YW5nZW50c1sgaSBdICk7XG5cblx0XHRcdGlmICggdmVjLmxlbmd0aCgpID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0dmVjLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdGNvbnN0IHRoZXRhID0gTWF0aC5hY29zKCBNYXRoVXRpbHMuY2xhbXAoIHRhbmdlbnRzWyBpIC0gMSBdLmRvdCggdGFuZ2VudHNbIGkgXSApLCAtIDEsIDEgKSApOyAvLyBjbGFtcCBmb3IgZmxvYXRpbmcgcHQgZXJyb3JzXG5cblx0XHRcdFx0bm9ybWFsc1sgaSBdLmFwcGx5TWF0cml4NCggbWF0Lm1ha2VSb3RhdGlvbkF4aXMoIHZlYywgdGhldGEgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJpbm9ybWFsc1sgaSBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgXSwgbm9ybWFsc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHQvLyBpZiB0aGUgY3VydmUgaXMgY2xvc2VkLCBwb3N0cHJvY2VzcyB0aGUgdmVjdG9ycyBzbyB0aGUgZmlyc3QgYW5kIGxhc3Qgbm9ybWFsIHZlY3RvcnMgYXJlIHRoZSBzYW1lXG5cblx0XHRpZiAoIGNsb3NlZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0bGV0IHRoZXRhID0gTWF0aC5hY29zKCBNYXRoVXRpbHMuY2xhbXAoIG5vcm1hbHNbIDAgXS5kb3QoIG5vcm1hbHNbIHNlZ21lbnRzIF0gKSwgLSAxLCAxICkgKTtcblx0XHRcdHRoZXRhIC89IHNlZ21lbnRzO1xuXG5cdFx0XHRpZiAoIHRhbmdlbnRzWyAwIF0uZG90KCB2ZWMuY3Jvc3NWZWN0b3JzKCBub3JtYWxzWyAwIF0sIG5vcm1hbHNbIHNlZ21lbnRzIF0gKSApID4gMCApIHtcblxuXHRcdFx0XHR0aGV0YSA9IC0gdGhldGE7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdC8vIHR3aXN0IGEgbGl0dGxlLi4uXG5cdFx0XHRcdG5vcm1hbHNbIGkgXS5hcHBseU1hdHJpeDQoIG1hdC5tYWtlUm90YXRpb25BeGlzKCB0YW5nZW50c1sgaSBdLCB0aGV0YSAqIGkgKSApO1xuXHRcdFx0XHRiaW5vcm1hbHNbIGkgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIF0sIG5vcm1hbHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dGFuZ2VudHM6IHRhbmdlbnRzLFxuXHRcdFx0bm9ybWFsczogbm9ybWFscyxcblx0XHRcdGJpbm9ybWFsczogYmlub3JtYWxzXG5cdFx0fTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0gc291cmNlLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC42LFxuXHRcdFx0XHR0eXBlOiAnQ3VydmUnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdDdXJ2ZS50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGRhdGEuYXJjTGVuZ3RoRGl2aXNpb25zID0gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBqc29uLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5cbmV4cG9ydCB7IEN1cnZlIH07XG4iLCJpbXBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4uL2NvcmUvQ3VydmUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XG5cbmNsYXNzIEVsbGlwc2VDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggYVggPSAwLCBhWSA9IDAsIHhSYWRpdXMgPSAxLCB5UmFkaXVzID0gMSwgYVN0YXJ0QW5nbGUgPSAwLCBhRW5kQW5nbGUgPSBNYXRoLlBJICogMiwgYUNsb2Nrd2lzZSA9IGZhbHNlLCBhUm90YXRpb24gPSAwICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNFbGxpcHNlQ3VydmUgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0VsbGlwc2VDdXJ2ZSc7XG5cblx0XHR0aGlzLmFYID0gYVg7XG5cdFx0dGhpcy5hWSA9IGFZO1xuXG5cdFx0dGhpcy54UmFkaXVzID0geFJhZGl1cztcblx0XHR0aGlzLnlSYWRpdXMgPSB5UmFkaXVzO1xuXG5cdFx0dGhpcy5hU3RhcnRBbmdsZSA9IGFTdGFydEFuZ2xlO1xuXHRcdHRoaXMuYUVuZEFuZ2xlID0gYUVuZEFuZ2xlO1xuXG5cdFx0dGhpcy5hQ2xvY2t3aXNlID0gYUNsb2Nrd2lzZTtcblxuXHRcdHRoaXMuYVJvdGF0aW9uID0gYVJvdGF0aW9uO1xuXG5cdH1cblxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMigpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGNvbnN0IHR3b1BpID0gTWF0aC5QSSAqIDI7XG5cdFx0bGV0IGRlbHRhQW5nbGUgPSB0aGlzLmFFbmRBbmdsZSAtIHRoaXMuYVN0YXJ0QW5nbGU7XG5cdFx0Y29uc3Qgc2FtZVBvaW50cyA9IE1hdGguYWJzKCBkZWx0YUFuZ2xlICkgPCBOdW1iZXIuRVBTSUxPTjtcblxuXHRcdC8vIGVuc3VyZXMgdGhhdCBkZWx0YUFuZ2xlIGlzIDAgLi4gMiBQSVxuXHRcdHdoaWxlICggZGVsdGFBbmdsZSA8IDAgKSBkZWx0YUFuZ2xlICs9IHR3b1BpO1xuXHRcdHdoaWxlICggZGVsdGFBbmdsZSA+IHR3b1BpICkgZGVsdGFBbmdsZSAtPSB0d29QaTtcblxuXHRcdGlmICggZGVsdGFBbmdsZSA8IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRpZiAoIHNhbWVQb2ludHMgKSB7XG5cblx0XHRcdFx0ZGVsdGFBbmdsZSA9IDA7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGVsdGFBbmdsZSA9IHR3b1BpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYUNsb2Nrd2lzZSA9PT0gdHJ1ZSAmJiAhIHNhbWVQb2ludHMgKSB7XG5cblx0XHRcdGlmICggZGVsdGFBbmdsZSA9PT0gdHdvUGkgKSB7XG5cblx0XHRcdFx0ZGVsdGFBbmdsZSA9IC0gdHdvUGk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGVsdGFBbmdsZSA9IGRlbHRhQW5nbGUgLSB0d29QaTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYW5nbGUgPSB0aGlzLmFTdGFydEFuZ2xlICsgdCAqIGRlbHRhQW5nbGU7XG5cdFx0bGV0IHggPSB0aGlzLmFYICsgdGhpcy54UmFkaXVzICogTWF0aC5jb3MoIGFuZ2xlICk7XG5cdFx0bGV0IHkgPSB0aGlzLmFZICsgdGhpcy55UmFkaXVzICogTWF0aC5zaW4oIGFuZ2xlICk7XG5cblx0XHRpZiAoIHRoaXMuYVJvdGF0aW9uICE9PSAwICkge1xuXG5cdFx0XHRjb25zdCBjb3MgPSBNYXRoLmNvcyggdGhpcy5hUm90YXRpb24gKTtcblx0XHRcdGNvbnN0IHNpbiA9IE1hdGguc2luKCB0aGlzLmFSb3RhdGlvbiApO1xuXG5cdFx0XHRjb25zdCB0eCA9IHggLSB0aGlzLmFYO1xuXHRcdFx0Y29uc3QgdHkgPSB5IC0gdGhpcy5hWTtcblxuXHRcdFx0Ly8gUm90YXRlIHRoZSBwb2ludCBhYm91dCB0aGUgY2VudGVyIG9mIHRoZSBlbGxpcHNlLlxuXHRcdFx0eCA9IHR4ICogY29zIC0gdHkgKiBzaW4gKyB0aGlzLmFYO1xuXHRcdFx0eSA9IHR4ICogc2luICsgdHkgKiBjb3MgKyB0aGlzLmFZO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50LnNldCggeCwgeSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuYVggPSBzb3VyY2UuYVg7XG5cdFx0dGhpcy5hWSA9IHNvdXJjZS5hWTtcblxuXHRcdHRoaXMueFJhZGl1cyA9IHNvdXJjZS54UmFkaXVzO1xuXHRcdHRoaXMueVJhZGl1cyA9IHNvdXJjZS55UmFkaXVzO1xuXG5cdFx0dGhpcy5hU3RhcnRBbmdsZSA9IHNvdXJjZS5hU3RhcnRBbmdsZTtcblx0XHR0aGlzLmFFbmRBbmdsZSA9IHNvdXJjZS5hRW5kQW5nbGU7XG5cblx0XHR0aGlzLmFDbG9ja3dpc2UgPSBzb3VyY2UuYUNsb2Nrd2lzZTtcblxuXHRcdHRoaXMuYVJvdGF0aW9uID0gc291cmNlLmFSb3RhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLmFYID0gdGhpcy5hWDtcblx0XHRkYXRhLmFZID0gdGhpcy5hWTtcblxuXHRcdGRhdGEueFJhZGl1cyA9IHRoaXMueFJhZGl1cztcblx0XHRkYXRhLnlSYWRpdXMgPSB0aGlzLnlSYWRpdXM7XG5cblx0XHRkYXRhLmFTdGFydEFuZ2xlID0gdGhpcy5hU3RhcnRBbmdsZTtcblx0XHRkYXRhLmFFbmRBbmdsZSA9IHRoaXMuYUVuZEFuZ2xlO1xuXG5cdFx0ZGF0YS5hQ2xvY2t3aXNlID0gdGhpcy5hQ2xvY2t3aXNlO1xuXG5cdFx0ZGF0YS5hUm90YXRpb24gPSB0aGlzLmFSb3RhdGlvbjtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLmFYID0ganNvbi5hWDtcblx0XHR0aGlzLmFZID0ganNvbi5hWTtcblxuXHRcdHRoaXMueFJhZGl1cyA9IGpzb24ueFJhZGl1cztcblx0XHR0aGlzLnlSYWRpdXMgPSBqc29uLnlSYWRpdXM7XG5cblx0XHR0aGlzLmFTdGFydEFuZ2xlID0ganNvbi5hU3RhcnRBbmdsZTtcblx0XHR0aGlzLmFFbmRBbmdsZSA9IGpzb24uYUVuZEFuZ2xlO1xuXG5cdFx0dGhpcy5hQ2xvY2t3aXNlID0ganNvbi5hQ2xvY2t3aXNlO1xuXG5cdFx0dGhpcy5hUm90YXRpb24gPSBqc29uLmFSb3RhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBFbGxpcHNlQ3VydmUgfTtcbiIsImltcG9ydCB7IEVsbGlwc2VDdXJ2ZSB9IGZyb20gJy4vRWxsaXBzZUN1cnZlLmpzJztcblxuY2xhc3MgQXJjQ3VydmUgZXh0ZW5kcyBFbGxpcHNlQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCBhWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKSB7XG5cblx0XHRzdXBlciggYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XG5cblx0XHR0aGlzLmlzQXJjQ3VydmUgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0FyY0N1cnZlJztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQXJjQ3VydmUgfTtcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgQ3VydmUgfSBmcm9tICcuLi9jb3JlL0N1cnZlLmpzJztcblxuLyoqXG4gKiBDZW50cmlwZXRhbCBDYXRtdWxsUm9tIEN1cnZlIC0gd2hpY2ggaXMgdXNlZnVsIGZvciBhdm9pZGluZ1xuICogY3VzcHMgYW5kIHNlbGYtaW50ZXJzZWN0aW9ucyBpbiBub24tdW5pZm9ybSBjYXRtdWxsIHJvbSBjdXJ2ZXMuXG4gKiBodHRwOi8vd3d3LmNlbXl1a3NlbC5jb20vcmVzZWFyY2gvY2F0bXVsbHJvbV9wYXJhbS9jYXRtdWxscm9tLnBkZlxuICpcbiAqIGN1cnZlLnR5cGUgYWNjZXB0cyBjZW50cmlwZXRhbChkZWZhdWx0KSwgY2hvcmRhbCBhbmQgY2F0bXVsbHJvbVxuICogY3VydmUudGVuc2lvbiBpcyB1c2VkIGZvciBjYXRtdWxscm9tIHdoaWNoIGRlZmF1bHRzIHRvIDAuNVxuICovXG5cblxuLypcbkJhc2VkIG9uIGFuIG9wdGltaXplZCBjKysgc29sdXRpb24gaW5cbiAtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTQ4OTczNi9jYXRtdWxsLXJvbS1jdXJ2ZS13aXRoLW5vLWN1c3BzLWFuZC1uby1zZWxmLWludGVyc2VjdGlvbnMvXG4gLSBodHRwOi8vaWRlb25lLmNvbS9Ob0ViVk1cblxuVGhpcyBDdWJpY1BvbHkgY2xhc3MgY291bGQgYmUgdXNlZCBmb3IgcmV1c2luZyBzb21lIHZhcmlhYmxlcyBhbmQgY2FsY3VsYXRpb25zLFxuYnV0IGZvciB0aHJlZS5qcyBjdXJ2ZSB1c2UsIGl0IGNvdWxkIGJlIHBvc3NpYmxlIGlubGluZWQgYW5kIGZsYXR0ZW4gaW50byBhIHNpbmdsZSBmdW5jdGlvbiBjYWxsXG53aGljaCBjYW4gYmUgcGxhY2VkIGluIEN1cnZlVXRpbHMuXG4qL1xuXG5mdW5jdGlvbiBDdWJpY1BvbHkoKSB7XG5cblx0bGV0IGMwID0gMCwgYzEgPSAwLCBjMiA9IDAsIGMzID0gMDtcblxuXHQvKlxuXHQgKiBDb21wdXRlIGNvZWZmaWNpZW50cyBmb3IgYSBjdWJpYyBwb2x5bm9taWFsXG5cdCAqICAgcChzKSA9IGMwICsgYzEqcyArIGMyKnNeMiArIGMzKnNeM1xuXHQgKiBzdWNoIHRoYXRcblx0ICogICBwKDApID0geDAsIHAoMSkgPSB4MVxuXHQgKiAgYW5kXG5cdCAqICAgcCcoMCkgPSB0MCwgcCcoMSkgPSB0MS5cblx0ICovXG5cdGZ1bmN0aW9uIGluaXQoIHgwLCB4MSwgdDAsIHQxICkge1xuXG5cdFx0YzAgPSB4MDtcblx0XHRjMSA9IHQwO1xuXHRcdGMyID0gLSAzICogeDAgKyAzICogeDEgLSAyICogdDAgLSB0MTtcblx0XHRjMyA9IDIgKiB4MCAtIDIgKiB4MSArIHQwICsgdDE7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRpbml0Q2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgdGVuc2lvbiApIHtcblxuXHRcdFx0aW5pdCggeDEsIHgyLCB0ZW5zaW9uICogKCB4MiAtIHgwICksIHRlbnNpb24gKiAoIHgzIC0geDEgKSApO1xuXG5cdFx0fSxcblxuXHRcdGluaXROb251bmlmb3JtQ2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgZHQwLCBkdDEsIGR0MiApIHtcblxuXHRcdFx0Ly8gY29tcHV0ZSB0YW5nZW50cyB3aGVuIHBhcmFtZXRlcml6ZWQgaW4gW3QxLHQyXVxuXHRcdFx0bGV0IHQxID0gKCB4MSAtIHgwICkgLyBkdDAgLSAoIHgyIC0geDAgKSAvICggZHQwICsgZHQxICkgKyAoIHgyIC0geDEgKSAvIGR0MTtcblx0XHRcdGxldCB0MiA9ICggeDIgLSB4MSApIC8gZHQxIC0gKCB4MyAtIHgxICkgLyAoIGR0MSArIGR0MiApICsgKCB4MyAtIHgyICkgLyBkdDI7XG5cblx0XHRcdC8vIHJlc2NhbGUgdGFuZ2VudHMgZm9yIHBhcmFtZXRyaXphdGlvbiBpbiBbMCwxXVxuXHRcdFx0dDEgKj0gZHQxO1xuXHRcdFx0dDIgKj0gZHQxO1xuXG5cdFx0XHRpbml0KCB4MSwgeDIsIHQxLCB0MiApO1xuXG5cdFx0fSxcblxuXHRcdGNhbGM6IGZ1bmN0aW9uICggdCApIHtcblxuXHRcdFx0Y29uc3QgdDIgPSB0ICogdDtcblx0XHRcdGNvbnN0IHQzID0gdDIgKiB0O1xuXHRcdFx0cmV0dXJuIGMwICsgYzEgKiB0ICsgYzIgKiB0MiArIGMzICogdDM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG4vL1xuXG5jb25zdCB0bXAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBweCA9IC8qQF9fUFVSRV9fKi8gbmV3IEN1YmljUG9seSgpO1xuY29uc3QgcHkgPSAvKkBfX1BVUkVfXyovIG5ldyBDdWJpY1BvbHkoKTtcbmNvbnN0IHB6ID0gLypAX19QVVJFX18qLyBuZXcgQ3ViaWNQb2x5KCk7XG5cbmNsYXNzIENhdG11bGxSb21DdXJ2ZTMgZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoIHBvaW50cyA9IFtdLCBjbG9zZWQgPSBmYWxzZSwgY3VydmVUeXBlID0gJ2NlbnRyaXBldGFsJywgdGVuc2lvbiA9IDAuNSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzQ2F0bXVsbFJvbUN1cnZlMyA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2F0bXVsbFJvbUN1cnZlMyc7XG5cblx0XHR0aGlzLnBvaW50cyA9IHBvaW50cztcblx0XHR0aGlzLmNsb3NlZCA9IGNsb3NlZDtcblx0XHR0aGlzLmN1cnZlVHlwZSA9IGN1cnZlVHlwZTtcblx0XHR0aGlzLnRlbnNpb24gPSB0ZW5zaW9uO1xuXG5cdH1cblxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuXHRcdGNvbnN0IGwgPSBwb2ludHMubGVuZ3RoO1xuXG5cdFx0Y29uc3QgcCA9ICggbCAtICggdGhpcy5jbG9zZWQgPyAwIDogMSApICkgKiB0O1xuXHRcdGxldCBpbnRQb2ludCA9IE1hdGguZmxvb3IoIHAgKTtcblx0XHRsZXQgd2VpZ2h0ID0gcCAtIGludFBvaW50O1xuXG5cdFx0aWYgKCB0aGlzLmNsb3NlZCApIHtcblxuXHRcdFx0aW50UG9pbnQgKz0gaW50UG9pbnQgPiAwID8gMCA6ICggTWF0aC5mbG9vciggTWF0aC5hYnMoIGludFBvaW50ICkgLyBsICkgKyAxICkgKiBsO1xuXG5cdFx0fSBlbHNlIGlmICggd2VpZ2h0ID09PSAwICYmIGludFBvaW50ID09PSBsIC0gMSApIHtcblxuXHRcdFx0aW50UG9pbnQgPSBsIC0gMjtcblx0XHRcdHdlaWdodCA9IDE7XG5cblx0XHR9XG5cblx0XHRsZXQgcDAsIHAzOyAvLyA0IHBvaW50cyAocDEgJiBwMiBkZWZpbmVkIGJlbG93KVxuXG5cdFx0aWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCA+IDAgKSB7XG5cblx0XHRcdHAwID0gcG9pbnRzWyAoIGludFBvaW50IC0gMSApICUgbCBdO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gZXh0cmFwb2xhdGUgZmlyc3QgcG9pbnRcblx0XHRcdHRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIDAgXSwgcG9pbnRzWyAxIF0gKS5hZGQoIHBvaW50c1sgMCBdICk7XG5cdFx0XHRwMCA9IHRtcDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHAxID0gcG9pbnRzWyBpbnRQb2ludCAlIGwgXTtcblx0XHRjb25zdCBwMiA9IHBvaW50c1sgKCBpbnRQb2ludCArIDEgKSAlIGwgXTtcblxuXHRcdGlmICggdGhpcy5jbG9zZWQgfHwgaW50UG9pbnQgKyAyIDwgbCApIHtcblxuXHRcdFx0cDMgPSBwb2ludHNbICggaW50UG9pbnQgKyAyICkgJSBsIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBleHRyYXBvbGF0ZSBsYXN0IHBvaW50XG5cdFx0XHR0bXAuc3ViVmVjdG9ycyggcG9pbnRzWyBsIC0gMSBdLCBwb2ludHNbIGwgLSAyIF0gKS5hZGQoIHBvaW50c1sgbCAtIDEgXSApO1xuXHRcdFx0cDMgPSB0bXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY3VydmVUeXBlID09PSAnY2VudHJpcGV0YWwnIHx8IHRoaXMuY3VydmVUeXBlID09PSAnY2hvcmRhbCcgKSB7XG5cblx0XHRcdC8vIGluaXQgQ2VudHJpcGV0YWwgLyBDaG9yZGFsIENhdG11bGwtUm9tXG5cdFx0XHRjb25zdCBwb3cgPSB0aGlzLmN1cnZlVHlwZSA9PT0gJ2Nob3JkYWwnID8gMC41IDogMC4yNTtcblx0XHRcdGxldCBkdDAgPSBNYXRoLnBvdyggcDAuZGlzdGFuY2VUb1NxdWFyZWQoIHAxICksIHBvdyApO1xuXHRcdFx0bGV0IGR0MSA9IE1hdGgucG93KCBwMS5kaXN0YW5jZVRvU3F1YXJlZCggcDIgKSwgcG93ICk7XG5cdFx0XHRsZXQgZHQyID0gTWF0aC5wb3coIHAyLmRpc3RhbmNlVG9TcXVhcmVkKCBwMyApLCBwb3cgKTtcblxuXHRcdFx0Ly8gc2FmZXR5IGNoZWNrIGZvciByZXBlYXRlZCBwb2ludHNcblx0XHRcdGlmICggZHQxIDwgMWUtNCApIGR0MSA9IDEuMDtcblx0XHRcdGlmICggZHQwIDwgMWUtNCApIGR0MCA9IGR0MTtcblx0XHRcdGlmICggZHQyIDwgMWUtNCApIGR0MiA9IGR0MTtcblxuXHRcdFx0cHguaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC54LCBwMS54LCBwMi54LCBwMy54LCBkdDAsIGR0MSwgZHQyICk7XG5cdFx0XHRweS5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLnksIHAxLnksIHAyLnksIHAzLnksIGR0MCwgZHQxLCBkdDIgKTtcblx0XHRcdHB6LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgZHQwLCBkdDEsIGR0MiApO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5jdXJ2ZVR5cGUgPT09ICdjYXRtdWxscm9tJyApIHtcblxuXHRcdFx0cHguaW5pdENhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIHRoaXMudGVuc2lvbiApO1xuXHRcdFx0cHkuaW5pdENhdG11bGxSb20oIHAwLnksIHAxLnksIHAyLnksIHAzLnksIHRoaXMudGVuc2lvbiApO1xuXHRcdFx0cHouaW5pdENhdG11bGxSb20oIHAwLnosIHAxLnosIHAyLnosIHAzLnosIHRoaXMudGVuc2lvbiApO1xuXG5cdFx0fVxuXG5cdFx0cG9pbnQuc2V0KFxuXHRcdFx0cHguY2FsYyggd2VpZ2h0ICksXG5cdFx0XHRweS5jYWxjKCB3ZWlnaHQgKSxcblx0XHRcdHB6LmNhbGMoIHdlaWdodCApXG5cdFx0KTtcblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc291cmNlLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IHNvdXJjZS5wb2ludHNbIGkgXTtcblxuXHRcdFx0dGhpcy5wb2ludHMucHVzaCggcG9pbnQuY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jbG9zZWQgPSBzb3VyY2UuY2xvc2VkO1xuXHRcdHRoaXMuY3VydmVUeXBlID0gc291cmNlLmN1cnZlVHlwZTtcblx0XHR0aGlzLnRlbnNpb24gPSBzb3VyY2UudGVuc2lvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcG9pbnQgPSB0aGlzLnBvaW50c1sgaSBdO1xuXHRcdFx0ZGF0YS5wb2ludHMucHVzaCggcG9pbnQudG9BcnJheSgpICk7XG5cblx0XHR9XG5cblx0XHRkYXRhLmNsb3NlZCA9IHRoaXMuY2xvc2VkO1xuXHRcdGRhdGEuY3VydmVUeXBlID0gdGhpcy5jdXJ2ZVR5cGU7XG5cdFx0ZGF0YS50ZW5zaW9uID0gdGhpcy50ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IGpzb24ucG9pbnRzWyBpIF07XG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBuZXcgVmVjdG9yMygpLmZyb21BcnJheSggcG9pbnQgKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jbG9zZWQgPSBqc29uLmNsb3NlZDtcblx0XHR0aGlzLmN1cnZlVHlwZSA9IGpzb24uY3VydmVUeXBlO1xuXHRcdHRoaXMudGVuc2lvbiA9IGpzb24udGVuc2lvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBDYXRtdWxsUm9tQ3VydmUzIH07XG4iLCIvKipcbiAqIEJlemllciBDdXJ2ZXMgZm9ybXVsYXMgb2J0YWluZWQgZnJvbVxuICogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQiVDMyVBOXppZXJfY3VydmVcbiAqL1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tKCB0LCBwMCwgcDEsIHAyLCBwMyApIHtcblxuXHRjb25zdCB2MCA9ICggcDIgLSBwMCApICogMC41O1xuXHRjb25zdCB2MSA9ICggcDMgLSBwMSApICogMC41O1xuXHRjb25zdCB0MiA9IHQgKiB0O1xuXHRjb25zdCB0MyA9IHQgKiB0Mjtcblx0cmV0dXJuICggMiAqIHAxIC0gMiAqIHAyICsgdjAgKyB2MSApICogdDMgKyAoIC0gMyAqIHAxICsgMyAqIHAyIC0gMiAqIHYwIC0gdjEgKSAqIHQyICsgdjAgKiB0ICsgcDE7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDAoIHQsIHAgKSB7XG5cblx0Y29uc3QgayA9IDEgLSB0O1xuXHRyZXR1cm4gayAqIGsgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAxKCB0LCBwICkge1xuXG5cdHJldHVybiAyICogKCAxIC0gdCApICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDIoIHQsIHAgKSB7XG5cblx0cmV0dXJuIHQgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXIoIHQsIHAwLCBwMSwgcDIgKSB7XG5cblx0cmV0dXJuIFF1YWRyYXRpY0JlemllclAwKCB0LCBwMCApICsgUXVhZHJhdGljQmV6aWVyUDEoIHQsIHAxICkgK1xuXHRcdFF1YWRyYXRpY0JlemllclAyKCB0LCBwMiApO1xuXG59XG5cbi8vXG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDAoIHQsIHAgKSB7XG5cblx0Y29uc3QgayA9IDEgLSB0O1xuXHRyZXR1cm4gayAqIGsgKiBrICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllclAxKCB0LCBwICkge1xuXG5cdGNvbnN0IGsgPSAxIC0gdDtcblx0cmV0dXJuIDMgKiBrICogayAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDIoIHQsIHAgKSB7XG5cblx0cmV0dXJuIDMgKiAoIDEgLSB0ICkgKiB0ICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMyggdCwgcCApIHtcblxuXHRyZXR1cm4gdCAqIHQgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllciggdCwgcDAsIHAxLCBwMiwgcDMgKSB7XG5cblx0cmV0dXJuIEN1YmljQmV6aWVyUDAoIHQsIHAwICkgKyBDdWJpY0JlemllclAxKCB0LCBwMSApICsgQ3ViaWNCZXppZXJQMiggdCwgcDIgKSArXG5cdFx0Q3ViaWNCZXppZXJQMyggdCwgcDMgKTtcblxufVxuXG5leHBvcnQgeyBDYXRtdWxsUm9tLCBRdWFkcmF0aWNCZXppZXIsIEN1YmljQmV6aWVyIH07XG4iLCJpbXBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4uL2NvcmUvQ3VydmUuanMnO1xuaW1wb3J0IHsgQ3ViaWNCZXppZXIgfSBmcm9tICcuLi9jb3JlL0ludGVycG9sYXRpb25zLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xuXG5jbGFzcyBDdWJpY0JlemllckN1cnZlIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCB2MCA9IG5ldyBWZWN0b3IyKCksIHYxID0gbmV3IFZlY3RvcjIoKSwgdjIgPSBuZXcgVmVjdG9yMigpLCB2MyA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc0N1YmljQmV6aWVyQ3VydmUgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0N1YmljQmV6aWVyQ3VydmUnO1xuXG5cdFx0dGhpcy52MCA9IHYwO1xuXHRcdHRoaXMudjEgPSB2MTtcblx0XHR0aGlzLnYyID0gdjI7XG5cdFx0dGhpcy52MyA9IHYzO1xuXG5cdH1cblxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMigpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGNvbnN0IHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjIsIHYzID0gdGhpcy52MztcblxuXHRcdHBvaW50LnNldChcblx0XHRcdEN1YmljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54LCB2My54ICksXG5cdFx0XHRDdWJpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSwgdjMueSApXG5cdFx0KTtcblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdFx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblx0XHR0aGlzLnYzLmNvcHkoIHNvdXJjZS52MyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdFx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXHRcdGRhdGEudjMgPSB0aGlzLnYzLnRvQXJyYXkoKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblx0XHR0aGlzLnYzLmZyb21BcnJheSgganNvbi52MyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEN1YmljQmV6aWVyQ3VydmUgfTtcbiIsImltcG9ydCB7IEN1cnZlIH0gZnJvbSAnLi4vY29yZS9DdXJ2ZS5qcyc7XG5pbXBvcnQgeyBDdWJpY0JlemllciB9IGZyb20gJy4uL2NvcmUvSW50ZXJwb2xhdGlvbnMuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMy5qcyc7XG5cbmNsYXNzIEN1YmljQmV6aWVyQ3VydmUzIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCB2MCA9IG5ldyBWZWN0b3IzKCksIHYxID0gbmV3IFZlY3RvcjMoKSwgdjIgPSBuZXcgVmVjdG9yMygpLCB2MyA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc0N1YmljQmV6aWVyQ3VydmUzID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdDdWJpY0JlemllckN1cnZlMyc7XG5cblx0XHR0aGlzLnYwID0gdjA7XG5cdFx0dGhpcy52MSA9IHYxO1xuXHRcdHRoaXMudjIgPSB2Mjtcblx0XHR0aGlzLnYzID0gdjM7XG5cblx0fVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0Y29uc3QgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MiwgdjMgPSB0aGlzLnYzO1xuXG5cdFx0cG9pbnQuc2V0KFxuXHRcdFx0Q3ViaWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLngsIHYzLnggKSxcblx0XHRcdEN1YmljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55LCB2My55ICksXG5cdFx0XHRDdWJpY0JlemllciggdCwgdjAueiwgdjEueiwgdjIueiwgdjMueiApXG5cdFx0KTtcblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdFx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblx0XHR0aGlzLnYzLmNvcHkoIHNvdXJjZS52MyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdFx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXHRcdGRhdGEudjMgPSB0aGlzLnYzLnRvQXJyYXkoKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblx0XHR0aGlzLnYzLmZyb21BcnJheSgganNvbi52MyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEN1YmljQmV6aWVyQ3VydmUzIH07XG4iLCJpbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IEN1cnZlIH0gZnJvbSAnLi4vY29yZS9DdXJ2ZS5qcyc7XG5cbmNsYXNzIExpbmVDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggdjEgPSBuZXcgVmVjdG9yMigpLCB2MiA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc0xpbmVDdXJ2ZSA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZUN1cnZlJztcblxuXHRcdHRoaXMudjEgPSB2MTtcblx0XHR0aGlzLnYyID0gdjI7XG5cblx0fVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0aWYgKCB0ID09PSAxICkge1xuXG5cdFx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICkuc3ViKCB0aGlzLnYxICk7XG5cdFx0XHRwb2ludC5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy52MSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHQvLyBMaW5lIGN1cnZlIGlzIGxpbmVhciwgc28gd2UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0IGdldFBvaW50QXRcblx0Z2V0UG9pbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG5cblx0Z2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMigpICkge1xuXG5cdFx0cmV0dXJuIG9wdGlvbmFsVGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMudjIsIHRoaXMudjEgKS5ub3JtYWxpemUoKTtcblxuXHR9XG5cblx0Z2V0VGFuZ2VudEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldFRhbmdlbnQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0XHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0XHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IExpbmVDdXJ2ZSB9O1xuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4uL2NvcmUvQ3VydmUuanMnO1xuXG5jbGFzcyBMaW5lQ3VydmUzIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCB2MSA9IG5ldyBWZWN0b3IzKCksIHYyID0gbmV3IFZlY3RvcjMoKSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzTGluZUN1cnZlMyA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZUN1cnZlMyc7XG5cblx0XHR0aGlzLnYxID0gdjE7XG5cdFx0dGhpcy52MiA9IHYyO1xuXG5cdH1cblxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGlmICggdCA9PT0gMSApIHtcblxuXHRcdFx0cG9pbnQuY29weSggdGhpcy52MiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cG9pbnQuY29weSggdGhpcy52MiApLnN1YiggdGhpcy52MSApO1xuXHRcdFx0cG9pbnQubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMudjEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Ly8gTGluZSBjdXJ2ZSBpcyBsaW5lYXIsIHNvIHdlIGNhbiBvdmVyd3JpdGUgZGVmYXVsdCBnZXRQb2ludEF0XG5cdGdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxuXG5cdGdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjMoKSApIHtcblxuXHRcdHJldHVybiBvcHRpb25hbFRhcmdldC5zdWJWZWN0b3JzKCB0aGlzLnYyLCB0aGlzLnYxICkubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdGdldFRhbmdlbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRUYW5nZW50KCB1LCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdFx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdFx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBMaW5lQ3VydmUzIH07XG4iLCJpbXBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4uL2NvcmUvQ3VydmUuanMnO1xuaW1wb3J0IHsgUXVhZHJhdGljQmV6aWVyIH0gZnJvbSAnLi4vY29yZS9JbnRlcnBvbGF0aW9ucy5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcblxuY2xhc3MgUXVhZHJhdGljQmV6aWVyQ3VydmUgZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoIHYwID0gbmV3IFZlY3RvcjIoKSwgdjEgPSBuZXcgVmVjdG9yMigpLCB2MiA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc1F1YWRyYXRpY0JlemllckN1cnZlID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdRdWFkcmF0aWNCZXppZXJDdXJ2ZSc7XG5cblx0XHR0aGlzLnYwID0gdjA7XG5cdFx0dGhpcy52MSA9IHYxO1xuXHRcdHRoaXMudjIgPSB2MjtcblxuXHR9XG5cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRjb25zdCB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyO1xuXG5cdFx0cG9pbnQuc2V0KFxuXHRcdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54ICksXG5cdFx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnkgKVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gcG9pbnQ7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0XHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xuXHRcdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHRcdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgUXVhZHJhdGljQmV6aWVyQ3VydmUgfTtcbiIsImltcG9ydCB7IEN1cnZlIH0gZnJvbSAnLi4vY29yZS9DdXJ2ZS5qcyc7XG5pbXBvcnQgeyBRdWFkcmF0aWNCZXppZXIgfSBmcm9tICcuLi9jb3JlL0ludGVycG9sYXRpb25zLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuXG5jbGFzcyBRdWFkcmF0aWNCZXppZXJDdXJ2ZTMgZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoIHYwID0gbmV3IFZlY3RvcjMoKSwgdjEgPSBuZXcgVmVjdG9yMygpLCB2MiA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc1F1YWRyYXRpY0JlemllckN1cnZlMyA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnUXVhZHJhdGljQmV6aWVyQ3VydmUzJztcblxuXHRcdHRoaXMudjAgPSB2MDtcblx0XHR0aGlzLnYxID0gdjE7XG5cdFx0dGhpcy52MiA9IHYyO1xuXG5cdH1cblxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGNvbnN0IHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjI7XG5cblx0XHRwb2ludC5zZXQoXG5cdFx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLnggKSxcblx0XHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSApLFxuXHRcdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC56LCB2MS56LCB2Mi56IClcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XG5cdFx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0XHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdFx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XG5cdFx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0XHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFF1YWRyYXRpY0JlemllckN1cnZlMyB9O1xuIiwiaW1wb3J0IHsgQ3VydmUgfSBmcm9tICcuLi9jb3JlL0N1cnZlLmpzJztcbmltcG9ydCB7IENhdG11bGxSb20gfSBmcm9tICcuLi9jb3JlL0ludGVycG9sYXRpb25zLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xuXG5jbGFzcyBTcGxpbmVDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggcG9pbnRzID0gW10gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc1NwbGluZUN1cnZlID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdTcGxpbmVDdXJ2ZSc7XG5cblx0XHR0aGlzLnBvaW50cyA9IHBvaW50cztcblxuXHR9XG5cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcblx0XHRjb25zdCBwID0gKCBwb2ludHMubGVuZ3RoIC0gMSApICogdDtcblxuXHRcdGNvbnN0IGludFBvaW50ID0gTWF0aC5mbG9vciggcCApO1xuXHRcdGNvbnN0IHdlaWdodCA9IHAgLSBpbnRQb2ludDtcblxuXHRcdGNvbnN0IHAwID0gcG9pbnRzWyBpbnRQb2ludCA9PT0gMCA/IGludFBvaW50IDogaW50UG9pbnQgLSAxIF07XG5cdFx0Y29uc3QgcDEgPSBwb2ludHNbIGludFBvaW50IF07XG5cdFx0Y29uc3QgcDIgPSBwb2ludHNbIGludFBvaW50ID4gcG9pbnRzLmxlbmd0aCAtIDIgPyBwb2ludHMubGVuZ3RoIC0gMSA6IGludFBvaW50ICsgMSBdO1xuXHRcdGNvbnN0IHAzID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAzID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDIgXTtcblxuXHRcdHBvaW50LnNldChcblx0XHRcdENhdG11bGxSb20oIHdlaWdodCwgcDAueCwgcDEueCwgcDIueCwgcDMueCApLFxuXHRcdFx0Q2F0bXVsbFJvbSggd2VpZ2h0LCBwMC55LCBwMS55LCBwMi55LCBwMy55IClcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gc291cmNlLnBvaW50c1sgaSBdO1xuXG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5wb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gdGhpcy5wb2ludHNbIGkgXTtcblx0XHRcdGRhdGEucG9pbnRzLnB1c2goIHBvaW50LnRvQXJyYXkoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IGpzb24ucG9pbnRzWyBpIF07XG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggcG9pbnQgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFNwbGluZUN1cnZlIH07XG4iLCJpbXBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4vQ3VydmUuanMnO1xuaW1wb3J0ICogYXMgQ3VydmVzIGZyb20gJy4uL2N1cnZlcy9DdXJ2ZXMuanMnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXHRDdXJ2ZWQgUGF0aCAtIGEgY3VydmUgcGF0aCBpcyBzaW1wbHkgYSBhcnJheSBvZiBjb25uZWN0ZWRcbiAqICBjdXJ2ZXMsIGJ1dCByZXRhaW5zIHRoZSBhcGkgb2YgYSBjdXJ2ZVxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jbGFzcyBDdXJ2ZVBhdGggZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0N1cnZlUGF0aCc7XG5cblx0XHR0aGlzLmN1cnZlcyA9IFtdO1xuXHRcdHRoaXMuYXV0b0Nsb3NlID0gZmFsc2U7IC8vIEF1dG9tYXRpY2FsbHkgY2xvc2VzIHRoZSBwYXRoXG5cblx0fVxuXG5cdGFkZCggY3VydmUgKSB7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdH1cblxuXHRjbG9zZVBhdGgoKSB7XG5cblx0XHQvLyBBZGQgYSBsaW5lIGN1cnZlIGlmIHN0YXJ0IGFuZCBlbmQgb2YgbGluZXMgYXJlIG5vdCBjb25uZWN0ZWRcblx0XHRjb25zdCBzdGFydFBvaW50ID0gdGhpcy5jdXJ2ZXNbIDAgXS5nZXRQb2ludCggMCApO1xuXHRcdGNvbnN0IGVuZFBvaW50ID0gdGhpcy5jdXJ2ZXNbIHRoaXMuY3VydmVzLmxlbmd0aCAtIDEgXS5nZXRQb2ludCggMSApO1xuXG5cdFx0aWYgKCAhIHN0YXJ0UG9pbnQuZXF1YWxzKCBlbmRQb2ludCApICkge1xuXG5cdFx0XHRjb25zdCBsaW5lVHlwZSA9ICggc3RhcnRQb2ludC5pc1ZlY3RvcjIgPT09IHRydWUgKSA/ICdMaW5lQ3VydmUnIDogJ0xpbmVDdXJ2ZTMnO1xuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggbmV3IEN1cnZlc1sgbGluZVR5cGUgXSggZW5kUG9pbnQsIHN0YXJ0UG9pbnQgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIFRvIGdldCBhY2N1cmF0ZSBwb2ludCB3aXRoIHJlZmVyZW5jZSB0b1xuXHQvLyBlbnRpcmUgcGF0aCBkaXN0YW5jZSBhdCB0aW1lIHQsXG5cdC8vIGZvbGxvd2luZyBoYXMgdG8gYmUgZG9uZTpcblxuXHQvLyAxLiBMZW5ndGggb2YgZWFjaCBzdWIgcGF0aCBoYXZlIHRvIGJlIGtub3duXG5cdC8vIDIuIExvY2F0ZSBhbmQgaWRlbnRpZnkgdHlwZSBvZiBjdXJ2ZVxuXHQvLyAzLiBHZXQgdCBmb3IgdGhlIGN1cnZlXG5cdC8vIDQuIFJldHVybiBjdXJ2ZS5nZXRQb2ludEF0KHQnKVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnN0IGQgPSB0ICogdGhpcy5nZXRMZW5ndGgoKTtcblx0XHRjb25zdCBjdXJ2ZUxlbmd0aHMgPSB0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXHRcdGxldCBpID0gMDtcblxuXHRcdC8vIFRvIHRoaW5rIGFib3V0IGJvdW5kYXJpZXMgcG9pbnRzLlxuXG5cdFx0d2hpbGUgKCBpIDwgY3VydmVMZW5ndGhzLmxlbmd0aCApIHtcblxuXHRcdFx0aWYgKCBjdXJ2ZUxlbmd0aHNbIGkgXSA+PSBkICkge1xuXG5cdFx0XHRcdGNvbnN0IGRpZmYgPSBjdXJ2ZUxlbmd0aHNbIGkgXSAtIGQ7XG5cdFx0XHRcdGNvbnN0IGN1cnZlID0gdGhpcy5jdXJ2ZXNbIGkgXTtcblxuXHRcdFx0XHRjb25zdCBzZWdtZW50TGVuZ3RoID0gY3VydmUuZ2V0TGVuZ3RoKCk7XG5cdFx0XHRcdGNvbnN0IHUgPSBzZWdtZW50TGVuZ3RoID09PSAwID8gMCA6IDEgLSBkaWZmIC8gc2VnbWVudExlbmd0aDtcblxuXHRcdFx0XHRyZXR1cm4gY3VydmUuZ2V0UG9pbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpICsrO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0XHQvLyBsb29wIHdoZXJlIHN1bSAhPSAwLCBzdW0gPiBkICwgc3VtKzEgPGRcblxuXHR9XG5cblx0Ly8gV2UgY2Fubm90IHVzZSB0aGUgZGVmYXVsdCBUSFJFRS5DdXJ2ZSBnZXRQb2ludCgpIHdpdGggZ2V0TGVuZ3RoKCkgYmVjYXVzZSBpblxuXHQvLyBUSFJFRS5DdXJ2ZSwgZ2V0TGVuZ3RoKCkgZGVwZW5kcyBvbiBnZXRQb2ludCgpIGJ1dCBpbiBUSFJFRS5DdXJ2ZVBhdGhcblx0Ly8gZ2V0UG9pbnQoKSBkZXBlbmRzIG9uIGdldExlbmd0aFxuXG5cdGdldExlbmd0aCgpIHtcblxuXHRcdGNvbnN0IGxlbnMgPSB0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXHRcdHJldHVybiBsZW5zWyBsZW5zLmxlbmd0aCAtIDEgXTtcblxuXHR9XG5cblx0Ly8gY2FjaGVMZW5ndGhzIG11c3QgYmUgcmVjYWxjdWxhdGVkLlxuXHR1cGRhdGVBcmNMZW5ndGhzKCkge1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5jYWNoZUxlbmd0aHMgPSBudWxsO1xuXHRcdHRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7XG5cblx0fVxuXG5cdC8vIENvbXB1dGUgbGVuZ3RocyBhbmQgY2FjaGUgdGhlbVxuXHQvLyBXZSBjYW5ub3Qgb3ZlcndyaXRlIGdldExlbmd0aHMoKSBiZWNhdXNlIFV0b1QgbWFwcGluZyB1c2VzIGl0LlxuXG5cdGdldEN1cnZlTGVuZ3RocygpIHtcblxuXHRcdC8vIFdlIHVzZSBjYWNoZSB2YWx1ZXMgaWYgY3VydmVzIGFuZCBjYWNoZSBhcnJheSBhcmUgc2FtZSBsZW5ndGhcblxuXHRcdGlmICggdGhpcy5jYWNoZUxlbmd0aHMgJiYgdGhpcy5jYWNoZUxlbmd0aHMubGVuZ3RoID09PSB0aGlzLmN1cnZlcy5sZW5ndGggKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmNhY2hlTGVuZ3RocztcblxuXHRcdH1cblxuXHRcdC8vIEdldCBsZW5ndGggb2Ygc3ViLWN1cnZlXG5cdFx0Ly8gUHVzaCBzdW1zIGludG8gY2FjaGVkIGFycmF5XG5cblx0XHRjb25zdCBsZW5ndGhzID0gW107XG5cdFx0bGV0IHN1bXMgPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0c3VtcyArPSB0aGlzLmN1cnZlc1sgaSBdLmdldExlbmd0aCgpO1xuXHRcdFx0bGVuZ3Rocy5wdXNoKCBzdW1zICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNhY2hlTGVuZ3RocyA9IGxlbmd0aHM7XG5cblx0XHRyZXR1cm4gbGVuZ3RocztcblxuXHR9XG5cblx0Z2V0U3BhY2VkUG9pbnRzKCBkaXZpc2lvbnMgPSA0MCApIHtcblxuXHRcdGNvbnN0IHBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IGRpdmlzaW9uczsgaSArKyApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnQoIGkgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmF1dG9DbG9zZSApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHBvaW50c1sgMCBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH1cblxuXHRnZXRQb2ludHMoIGRpdmlzaW9ucyA9IDEyICkge1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XG5cdFx0bGV0IGxhc3Q7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGN1cnZlcyA9IHRoaXMuY3VydmVzOyBpIDwgY3VydmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgY3VydmUgPSBjdXJ2ZXNbIGkgXTtcblx0XHRcdGNvbnN0IHJlc29sdXRpb24gPSBjdXJ2ZS5pc0VsbGlwc2VDdXJ2ZSA/IGRpdmlzaW9ucyAqIDJcblx0XHRcdFx0OiAoIGN1cnZlLmlzTGluZUN1cnZlIHx8IGN1cnZlLmlzTGluZUN1cnZlMyApID8gMVxuXHRcdFx0XHRcdDogY3VydmUuaXNTcGxpbmVDdXJ2ZSA/IGRpdmlzaW9ucyAqIGN1cnZlLnBvaW50cy5sZW5ndGhcblx0XHRcdFx0XHRcdDogZGl2aXNpb25zO1xuXG5cdFx0XHRjb25zdCBwdHMgPSBjdXJ2ZS5nZXRQb2ludHMoIHJlc29sdXRpb24gKTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgcHRzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCBwb2ludCA9IHB0c1sgaiBdO1xuXG5cdFx0XHRcdGlmICggbGFzdCAmJiBsYXN0LmVxdWFscyggcG9pbnQgKSApIGNvbnRpbnVlOyAvLyBlbnN1cmVzIG5vIGNvbnNlY3V0aXZlIHBvaW50cyBhcmUgZHVwbGljYXRlc1xuXG5cdFx0XHRcdHBvaW50cy5wdXNoKCBwb2ludCApO1xuXHRcdFx0XHRsYXN0ID0gcG9pbnQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hdXRvQ2xvc2UgJiYgcG9pbnRzLmxlbmd0aCA+IDEgJiYgISBwb2ludHNbIHBvaW50cy5sZW5ndGggLSAxIF0uZXF1YWxzKCBwb2ludHNbIDAgXSApICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggcG9pbnRzWyAwIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNvdXJjZS5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgY3VydmUgPSBzb3VyY2UuY3VydmVzWyBpIF07XG5cblx0XHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYXV0b0Nsb3NlID0gc291cmNlLmF1dG9DbG9zZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLmF1dG9DbG9zZSA9IHRoaXMuYXV0b0Nsb3NlO1xuXHRcdGRhdGEuY3VydmVzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjdXJ2ZSA9IHRoaXMuY3VydmVzWyBpIF07XG5cdFx0XHRkYXRhLmN1cnZlcy5wdXNoKCBjdXJ2ZS50b0pTT04oKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMuYXV0b0Nsb3NlID0ganNvbi5hdXRvQ2xvc2U7XG5cdFx0dGhpcy5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24uY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGN1cnZlID0ganNvbi5jdXJ2ZXNbIGkgXTtcblx0XHRcdHRoaXMuY3VydmVzLnB1c2goIG5ldyBDdXJ2ZXNbIGN1cnZlLnR5cGUgXSgpLmZyb21KU09OKCBjdXJ2ZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBDdXJ2ZVBhdGggfTtcbiIsImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgQ3VydmVQYXRoIH0gZnJvbSAnLi9DdXJ2ZVBhdGguanMnO1xuaW1wb3J0IHsgRWxsaXBzZUN1cnZlIH0gZnJvbSAnLi4vY3VydmVzL0VsbGlwc2VDdXJ2ZS5qcyc7XG5pbXBvcnQgeyBTcGxpbmVDdXJ2ZSB9IGZyb20gJy4uL2N1cnZlcy9TcGxpbmVDdXJ2ZS5qcyc7XG5pbXBvcnQgeyBDdWJpY0JlemllckN1cnZlIH0gZnJvbSAnLi4vY3VydmVzL0N1YmljQmV6aWVyQ3VydmUuanMnO1xuaW1wb3J0IHsgUXVhZHJhdGljQmV6aWVyQ3VydmUgfSBmcm9tICcuLi9jdXJ2ZXMvUXVhZHJhdGljQmV6aWVyQ3VydmUuanMnO1xuaW1wb3J0IHsgTGluZUN1cnZlIH0gZnJvbSAnLi4vY3VydmVzL0xpbmVDdXJ2ZS5qcyc7XG5cbmNsYXNzIFBhdGggZXh0ZW5kcyBDdXJ2ZVBhdGgge1xuXG5cdGNvbnN0cnVjdG9yKCBwb2ludHMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BhdGgnO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0aWYgKCBwb2ludHMgKSB7XG5cblx0XHRcdHRoaXMuc2V0RnJvbVBvaW50cyggcG9pbnRzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldEZyb21Qb2ludHMoIHBvaW50cyApIHtcblxuXHRcdHRoaXMubW92ZVRvKCBwb2ludHNbIDAgXS54LCBwb2ludHNbIDAgXS55ICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDEsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5saW5lVG8oIHBvaW50c1sgaSBdLngsIHBvaW50c1sgaSBdLnkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtb3ZlVG8oIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIHgsIHkgKTsgLy8gVE9ETyBjb25zaWRlciByZWZlcmVuY2luZyB2ZWN0b3JzIGluc3RlYWQgb2YgY29weWluZz9cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRsaW5lVG8oIHgsIHkgKSB7XG5cblx0XHRjb25zdCBjdXJ2ZSA9IG5ldyBMaW5lQ3VydmUoIHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksIG5ldyBWZWN0b3IyKCB4LCB5ICkgKTtcblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCB4LCB5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICkge1xuXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgUXVhZHJhdGljQmV6aWVyQ3VydmUoXG5cdFx0XHR0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFDUHgsIGFDUHkgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhWCwgYVkgKVxuXHRcdCk7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCBhWCwgYVkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRiZXppZXJDdXJ2ZVRvKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICkge1xuXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgQ3ViaWNCZXppZXJDdXJ2ZShcblx0XHRcdHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQMXgsIGFDUDF5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQMngsIGFDUDJ5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYVgsIGFZIClcblx0XHQpO1xuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggYVgsIGFZICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3BsaW5lVGhydSggcHRzIC8qQXJyYXkgb2YgVmVjdG9yKi8gKSB7XG5cblx0XHRjb25zdCBucHRzID0gWyB0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpIF0uY29uY2F0KCBwdHMgKTtcblxuXHRcdGNvbnN0IGN1cnZlID0gbmV3IFNwbGluZUN1cnZlKCBucHRzICk7XG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkoIHB0c1sgcHRzLmxlbmd0aCAtIDEgXSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFyYyggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xuXG5cdFx0Y29uc3QgeDAgPSB0aGlzLmN1cnJlbnRQb2ludC54O1xuXHRcdGNvbnN0IHkwID0gdGhpcy5jdXJyZW50UG9pbnQueTtcblxuXHRcdHRoaXMuYWJzYXJjKCBhWCArIHgwLCBhWSArIHkwLCBhUmFkaXVzLFxuXHRcdFx0YVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFic2FyYyggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xuXG5cdFx0dGhpcy5hYnNlbGxpcHNlKCBhWCwgYVksIGFSYWRpdXMsIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlbGxpcHNlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApIHtcblxuXHRcdGNvbnN0IHgwID0gdGhpcy5jdXJyZW50UG9pbnQueDtcblx0XHRjb25zdCB5MCA9IHRoaXMuY3VycmVudFBvaW50Lnk7XG5cblx0XHR0aGlzLmFic2VsbGlwc2UoIGFYICsgeDAsIGFZICsgeTAsIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFic2VsbGlwc2UoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkge1xuXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgRWxsaXBzZUN1cnZlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApO1xuXG5cdFx0aWYgKCB0aGlzLmN1cnZlcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHQvLyBpZiBhIHByZXZpb3VzIGN1cnZlIGlzIHByZXNlbnQsIGF0dGVtcHQgdG8gam9pblxuXHRcdFx0Y29uc3QgZmlyc3RQb2ludCA9IGN1cnZlLmdldFBvaW50KCAwICk7XG5cblx0XHRcdGlmICggISBmaXJzdFBvaW50LmVxdWFscyggdGhpcy5jdXJyZW50UG9pbnQgKSApIHtcblxuXHRcdFx0XHR0aGlzLmxpbmVUbyggZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdGNvbnN0IGxhc3RQb2ludCA9IGN1cnZlLmdldFBvaW50KCAxICk7XG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggbGFzdFBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBzb3VyY2UuY3VycmVudFBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5jdXJyZW50UG9pbnQgPSB0aGlzLmN1cnJlbnRQb2ludC50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuZnJvbUFycmF5KCBqc29uLmN1cnJlbnRQb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgUGF0aCB9O1xuIiwiaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0ICogYXMgTWF0aFV0aWxzIGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcblxuY2xhc3MgTGF0aGVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcG9pbnRzID0gWyBuZXcgVmVjdG9yMiggMCwgLSAwLjUgKSwgbmV3IFZlY3RvcjIoIDAuNSwgMCApLCBuZXcgVmVjdG9yMiggMCwgMC41ICkgXSwgc2VnbWVudHMgPSAxMiwgcGhpU3RhcnQgPSAwLCBwaGlMZW5ndGggPSBNYXRoLlBJICogMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGF0aGVHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRwb2ludHM6IHBvaW50cyxcblx0XHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcblx0XHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoXG5cdFx0fTtcblxuXHRcdHNlZ21lbnRzID0gTWF0aC5mbG9vciggc2VnbWVudHMgKTtcblxuXHRcdC8vIGNsYW1wIHBoaUxlbmd0aCBzbyBpdCdzIGluIHJhbmdlIG9mIFsgMCwgMlBJIF1cblxuXHRcdHBoaUxlbmd0aCA9IE1hdGhVdGlscy5jbGFtcCggcGhpTGVuZ3RoLCAwLCBNYXRoLlBJICogMiApO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cdFx0Y29uc3QgaW5pdE5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCBpbnZlcnNlU2VnbWVudHMgPSAxLjAgLyBzZWdtZW50cztcblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHV2ID0gbmV3IFZlY3RvcjIoKTtcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IGN1ck5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgcHJldk5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0bGV0IGR4ID0gMDtcblx0XHRsZXQgZHkgPSAwO1xuXG5cdFx0Ly8gcHJlLWNvbXB1dGUgbm9ybWFscyBmb3IgaW5pdGlhbCBcIm1lcmlkaWFuXCJcblxuXHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdHN3aXRjaCAoIGogKSB7XG5cblx0XHRcdFx0Y2FzZSAwOlx0XHRcdFx0Ly8gc3BlY2lhbCBoYW5kbGluZyBmb3IgMXN0IHZlcnRleCBvbiBwYXRoXG5cblx0XHRcdFx0XHRkeCA9IHBvaW50c1sgaiArIDEgXS54IC0gcG9pbnRzWyBqIF0ueDtcblx0XHRcdFx0XHRkeSA9IHBvaW50c1sgaiArIDEgXS55IC0gcG9pbnRzWyBqIF0ueTtcblxuXHRcdFx0XHRcdG5vcm1hbC54ID0gZHkgKiAxLjA7XG5cdFx0XHRcdFx0bm9ybWFsLnkgPSAtIGR4O1xuXHRcdFx0XHRcdG5vcm1hbC56ID0gZHkgKiAwLjA7XG5cblx0XHRcdFx0XHRwcmV2Tm9ybWFsLmNvcHkoIG5vcm1hbCApO1xuXG5cdFx0XHRcdFx0bm9ybWFsLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdFx0aW5pdE5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAoIHBvaW50cy5sZW5ndGggLSAxICk6XHQvLyBzcGVjaWFsIGhhbmRsaW5nIGZvciBsYXN0IFZlcnRleCBvbiBwYXRoXG5cblx0XHRcdFx0XHRpbml0Tm9ybWFscy5wdXNoKCBwcmV2Tm9ybWFsLngsIHByZXZOb3JtYWwueSwgcHJldk5vcm1hbC56ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0Olx0XHRcdC8vIGRlZmF1bHQgaGFuZGxpbmcgZm9yIGFsbCB2ZXJ0aWNlcyBpbiBiZXR3ZWVuXG5cblx0XHRcdFx0XHRkeCA9IHBvaW50c1sgaiArIDEgXS54IC0gcG9pbnRzWyBqIF0ueDtcblx0XHRcdFx0XHRkeSA9IHBvaW50c1sgaiArIDEgXS55IC0gcG9pbnRzWyBqIF0ueTtcblxuXHRcdFx0XHRcdG5vcm1hbC54ID0gZHkgKiAxLjA7XG5cdFx0XHRcdFx0bm9ybWFsLnkgPSAtIGR4O1xuXHRcdFx0XHRcdG5vcm1hbC56ID0gZHkgKiAwLjA7XG5cblx0XHRcdFx0XHRjdXJOb3JtYWwuY29weSggbm9ybWFsICk7XG5cblx0XHRcdFx0XHRub3JtYWwueCArPSBwcmV2Tm9ybWFsLng7XG5cdFx0XHRcdFx0bm9ybWFsLnkgKz0gcHJldk5vcm1hbC55O1xuXHRcdFx0XHRcdG5vcm1hbC56ICs9IHByZXZOb3JtYWwuejtcblxuXHRcdFx0XHRcdG5vcm1hbC5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRcdGluaXROb3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0XHRcdHByZXZOb3JtYWwuY29weSggY3VyTm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCB1dnMgYW5kIG5vcm1hbHNcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcGhpID0gcGhpU3RhcnQgKyBpICogaW52ZXJzZVNlZ21lbnRzICogcGhpTGVuZ3RoO1xuXG5cdFx0XHRjb25zdCBzaW4gPSBNYXRoLnNpbiggcGhpICk7XG5cdFx0XHRjb25zdCBjb3MgPSBNYXRoLmNvcyggcGhpICk7XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSBwb2ludHNbIGogXS54ICogc2luO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHBvaW50c1sgaiBdLnk7XG5cdFx0XHRcdHZlcnRleC56ID0gcG9pbnRzWyBqIF0ueCAqIGNvcztcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1di54ID0gaSAvIHNlZ21lbnRzO1xuXHRcdFx0XHR1di55ID0gaiAvICggcG9pbnRzLmxlbmd0aCAtIDEgKTtcblxuXHRcdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdGNvbnN0IHggPSBpbml0Tm9ybWFsc1sgMyAqIGogKyAwIF0gKiBzaW47XG5cdFx0XHRcdGNvbnN0IHkgPSBpbml0Tm9ybWFsc1sgMyAqIGogKyAxIF07XG5cdFx0XHRcdGNvbnN0IHogPSBpbml0Tm9ybWFsc1sgMyAqIGogKyAwIF0gKiBjb3M7XG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCB4LCB5LCB6ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGluZGljZXNcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmFzZSA9IGogKyBpICogcG9pbnRzLmxlbmd0aDtcblxuXHRcdFx0XHRjb25zdCBhID0gYmFzZTtcblx0XHRcdFx0Y29uc3QgYiA9IGJhc2UgKyBwb2ludHMubGVuZ3RoO1xuXHRcdFx0XHRjb25zdCBjID0gYmFzZSArIHBvaW50cy5sZW5ndGggKyAxO1xuXHRcdFx0XHRjb25zdCBkID0gYmFzZSArIDE7XG5cblx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBjLCBkLCBiICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgTGF0aGVHZW9tZXRyeSggZGF0YS5wb2ludHMsIGRhdGEuc2VnbWVudHMsIGRhdGEucGhpU3RhcnQsIGRhdGEucGhpTGVuZ3RoICk7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgTGF0aGVHZW9tZXRyeSB9O1xuIiwiaW1wb3J0IHsgUGF0aCB9IGZyb20gJy4uL2V4dHJhcy9jb3JlL1BhdGguanMnO1xuaW1wb3J0IHsgTGF0aGVHZW9tZXRyeSB9IGZyb20gJy4vTGF0aGVHZW9tZXRyeS5qcyc7XG5cbmNsYXNzIENhcHN1bGVHZW9tZXRyeSBleHRlbmRzIExhdGhlR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBsZW5ndGggPSAxLCBjYXBTZWdtZW50cyA9IDQsIHJhZGlhbFNlZ21lbnRzID0gOCApIHtcblxuXHRcdGNvbnN0IHBhdGggPSBuZXcgUGF0aCgpO1xuXHRcdHBhdGguYWJzYXJjKCAwLCAtIGxlbmd0aCAvIDIsIHJhZGl1cywgTWF0aC5QSSAqIDEuNSwgMCApO1xuXHRcdHBhdGguYWJzYXJjKCAwLCBsZW5ndGggLyAyLCByYWRpdXMsIDAsIE1hdGguUEkgKiAwLjUgKTtcblxuXHRcdHN1cGVyKCBwYXRoLmdldFBvaW50cyggY2FwU2VnbWVudHMgKSwgcmFkaWFsU2VnbWVudHMgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDYXBzdWxlR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRsZW5ndGg6IGxlbmd0aCxcblx0XHRcdGNhcFNlZ21lbnRzOiBjYXBTZWdtZW50cyxcblx0XHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHR9O1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IENhcHN1bGVHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEubGVuZ3RoLCBkYXRhLmNhcFNlZ21lbnRzLCBkYXRhLnJhZGlhbFNlZ21lbnRzICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IENhcHN1bGVHZW9tZXRyeSB9O1xuIiwiaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xuXG5jbGFzcyBDaXJjbGVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgc2VnbWVudHMgPSAzMiwgdGhldGFTdGFydCA9IDAsIHRoZXRhTGVuZ3RoID0gTWF0aC5QSSAqIDIgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0NpcmNsZUdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0c2VnbWVudHM6IHNlZ21lbnRzLFxuXHRcdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHRcdH07XG5cblx0XHRzZWdtZW50cyA9IE1hdGgubWF4KCAzLCBzZWdtZW50cyApO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IHV2cyA9IFtdO1xuXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCB1diA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHQvLyBjZW50ZXIgcG9pbnRcblxuXHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblx0XHR1dnMucHVzaCggMC41LCAwLjUgKTtcblxuXHRcdGZvciAoIGxldCBzID0gMCwgaSA9IDM7IHMgPD0gc2VnbWVudHM7IHMgKyssIGkgKz0gMyApIHtcblxuXHRcdFx0Y29uc3Qgc2VnbWVudCA9IHRoZXRhU3RhcnQgKyBzIC8gc2VnbWVudHMgKiB0aGV0YUxlbmd0aDtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogTWF0aC5jb3MoIHNlZ21lbnQgKTtcblx0XHRcdHZlcnRleC55ID0gcmFkaXVzICogTWF0aC5zaW4oIHNlZ21lbnQgKTtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cblx0XHRcdC8vIHV2c1xuXG5cdFx0XHR1di54ID0gKCB2ZXJ0aWNlc1sgaSBdIC8gcmFkaXVzICsgMSApIC8gMjtcblx0XHRcdHV2LnkgPSAoIHZlcnRpY2VzWyBpICsgMSBdIC8gcmFkaXVzICsgMSApIC8gMjtcblxuXHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGluZGljZXNcblxuXHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0aW5kaWNlcy5wdXNoKCBpLCBpICsgMSwgMCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDaXJjbGVHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEuc2VnbWVudHMsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG5cbmV4cG9ydCB7IENpcmNsZUdlb21ldHJ5IH07XG4iLCJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XG5cbmNsYXNzIEN5bGluZGVyR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHJhZGl1c1RvcCA9IDEsIHJhZGl1c0JvdHRvbSA9IDEsIGhlaWdodCA9IDEsIHJhZGlhbFNlZ21lbnRzID0gMzIsIGhlaWdodFNlZ21lbnRzID0gMSwgb3BlbkVuZGVkID0gZmFsc2UsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKiAyICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDeWxpbmRlckdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1c1RvcDogcmFkaXVzVG9wLFxuXHRcdFx0cmFkaXVzQm90dG9tOiByYWRpdXNCb3R0b20sXG5cdFx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRcdG9wZW5FbmRlZDogb3BlbkVuZGVkLFxuXHRcdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHRcdH07XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICk7XG5cdFx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IHV2cyA9IFtdO1xuXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0bGV0IGluZGV4ID0gMDtcblx0XHRjb25zdCBpbmRleEFycmF5ID0gW107XG5cdFx0Y29uc3QgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XG5cdFx0bGV0IGdyb3VwU3RhcnQgPSAwO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgZ2VvbWV0cnlcblxuXHRcdGdlbmVyYXRlVG9yc28oKTtcblxuXHRcdGlmICggb3BlbkVuZGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0aWYgKCByYWRpdXNUb3AgPiAwICkgZ2VuZXJhdGVDYXAoIHRydWUgKTtcblx0XHRcdGlmICggcmFkaXVzQm90dG9tID4gMCApIGdlbmVyYXRlQ2FwKCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0XHRmdW5jdGlvbiBnZW5lcmF0ZVRvcnNvKCkge1xuXG5cdFx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0bGV0IGdyb3VwQ291bnQgPSAwO1xuXG5cdFx0XHQvLyB0aGlzIHdpbGwgYmUgdXNlZCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbFxuXHRcdFx0Y29uc3Qgc2xvcGUgPSAoIHJhZGl1c0JvdHRvbSAtIHJhZGl1c1RvcCApIC8gaGVpZ2h0O1xuXG5cdFx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRcdGZvciAoIGxldCB5ID0gMDsgeSA8PSBoZWlnaHRTZWdtZW50czsgeSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbmRleFJvdyA9IFtdO1xuXG5cdFx0XHRcdGNvbnN0IHYgPSB5IC8gaGVpZ2h0U2VnbWVudHM7XG5cblx0XHRcdFx0Ly8gY2FsY3VsYXRlIHRoZSByYWRpdXMgb2YgdGhlIGN1cnJlbnQgcm93XG5cblx0XHRcdFx0Y29uc3QgcmFkaXVzID0gdiAqICggcmFkaXVzQm90dG9tIC0gcmFkaXVzVG9wICkgKyByYWRpdXNUb3A7XG5cblx0XHRcdFx0Zm9yICggbGV0IHggPSAwOyB4IDw9IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdSA9IHggLyByYWRpYWxTZWdtZW50cztcblxuXHRcdFx0XHRcdGNvbnN0IHRoZXRhID0gdSAqIHRoZXRhTGVuZ3RoICsgdGhldGFTdGFydDtcblxuXHRcdFx0XHRcdGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cdFx0XHRcdFx0Y29uc3QgY29zVGhldGEgPSBNYXRoLmNvcyggdGhldGEgKTtcblxuXHRcdFx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBzaW5UaGV0YTtcblx0XHRcdFx0XHR2ZXJ0ZXgueSA9IC0gdiAqIGhlaWdodCArIGhhbGZIZWlnaHQ7XG5cdFx0XHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTtcblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRcdG5vcm1hbC5zZXQoIHNpblRoZXRhLCBzbG9wZSwgY29zVGhldGEgKS5ub3JtYWxpemUoKTtcblx0XHRcdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0XHR1dnMucHVzaCggdSwgMSAtIHYgKTtcblxuXHRcdFx0XHRcdC8vIHNhdmUgaW5kZXggb2YgdmVydGV4IGluIHJlc3BlY3RpdmUgcm93XG5cblx0XHRcdFx0XHRpbmRleFJvdy5wdXNoKCBpbmRleCArKyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBub3cgc2F2ZSB2ZXJ0aWNlcyBvZiB0aGUgcm93IGluIG91ciBpbmRleCBhcnJheVxuXG5cdFx0XHRcdGluZGV4QXJyYXkucHVzaCggaW5kZXhSb3cgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0XHRcdGZvciAoIGxldCB4ID0gMDsgeCA8IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCB5ID0gMDsgeSA8IGhlaWdodFNlZ21lbnRzOyB5ICsrICkge1xuXG5cdFx0XHRcdFx0Ly8gd2UgdXNlIHRoZSBpbmRleCBhcnJheSB0byBhY2Nlc3MgdGhlIGNvcnJlY3QgaW5kaWNlc1xuXG5cdFx0XHRcdFx0Y29uc3QgYSA9IGluZGV4QXJyYXlbIHkgXVsgeCBdO1xuXHRcdFx0XHRcdGNvbnN0IGIgPSBpbmRleEFycmF5WyB5ICsgMSBdWyB4IF07XG5cdFx0XHRcdFx0Y29uc3QgYyA9IGluZGV4QXJyYXlbIHkgKyAxIF1bIHggKyAxIF07XG5cdFx0XHRcdFx0Y29uc3QgZCA9IGluZGV4QXJyYXlbIHkgXVsgeCArIDEgXTtcblxuXHRcdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0XHRcdC8vIHVwZGF0ZSBncm91cCBjb3VudGVyXG5cblx0XHRcdFx0XHRncm91cENvdW50ICs9IDY7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0XG5cblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCAwICk7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZW5lcmF0ZUNhcCggdG9wICkge1xuXG5cdFx0XHQvLyBzYXZlIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2VudGVyIHZlcnRleFxuXHRcdFx0Y29uc3QgY2VudGVySW5kZXhTdGFydCA9IGluZGV4O1xuXG5cdFx0XHRjb25zdCB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRsZXQgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHRcdGNvbnN0IHJhZGl1cyA9ICggdG9wID09PSB0cnVlICkgPyByYWRpdXNUb3AgOiByYWRpdXNCb3R0b207XG5cdFx0XHRjb25zdCBzaWduID0gKCB0b3AgPT09IHRydWUgKSA/IDEgOiAtIDE7XG5cblx0XHRcdC8vIGZpcnN0IHdlIGdlbmVyYXRlIHRoZSBjZW50ZXIgdmVydGV4IGRhdGEgb2YgdGhlIGNhcC5cblx0XHRcdC8vIGJlY2F1c2UgdGhlIGdlb21ldHJ5IG5lZWRzIG9uZSBzZXQgb2YgdXZzIHBlciBmYWNlLFxuXHRcdFx0Ly8gd2UgbXVzdCBnZW5lcmF0ZSBhIGNlbnRlciB2ZXJ0ZXggcGVyIGZhY2Uvc2VnbWVudFxuXG5cdFx0XHRmb3IgKCBsZXQgeCA9IDE7IHggPD0gcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggMCwgaGFsZkhlaWdodCAqIHNpZ24sIDAgKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIDAsIHNpZ24sIDAgKTtcblxuXHRcdFx0XHQvLyB1dlxuXG5cdFx0XHRcdHV2cy5wdXNoKCAwLjUsIDAuNSApO1xuXG5cdFx0XHRcdC8vIGluY3JlYXNlIGluZGV4XG5cblx0XHRcdFx0aW5kZXggKys7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gc2F2ZSB0aGUgaW5kZXggb2YgdGhlIGxhc3QgY2VudGVyIHZlcnRleFxuXHRcdFx0Y29uc3QgY2VudGVySW5kZXhFbmQgPSBpbmRleDtcblxuXHRcdFx0Ly8gbm93IHdlIGdlbmVyYXRlIHRoZSBzdXJyb3VuZGluZyB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRcdGZvciAoIGxldCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHRjb25zdCB1ID0geCAvIHJhZGlhbFNlZ21lbnRzO1xuXHRcdFx0XHRjb25zdCB0aGV0YSA9IHUgKiB0aGV0YUxlbmd0aCArIHRoZXRhU3RhcnQ7XG5cblx0XHRcdFx0Y29uc3QgY29zVGhldGEgPSBNYXRoLmNvcyggdGhldGEgKTtcblx0XHRcdFx0Y29uc3Qgc2luVGhldGEgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIHNpblRoZXRhO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IGhhbGZIZWlnaHQgKiBzaWduO1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IHJhZGl1cyAqIGNvc1RoZXRhO1xuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCAwLCBzaWduLCAwICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1di54ID0gKCBjb3NUaGV0YSAqIDAuNSApICsgMC41O1xuXHRcdFx0XHR1di55ID0gKCBzaW5UaGV0YSAqIDAuNSAqIHNpZ24gKSArIDAuNTtcblx0XHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdFx0XHQvLyBpbmNyZWFzZSBpbmRleFxuXG5cdFx0XHRcdGluZGV4ICsrO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdFx0Zm9yICggbGV0IHggPSAwOyB4IDwgcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYyA9IGNlbnRlckluZGV4U3RhcnQgKyB4O1xuXHRcdFx0XHRjb25zdCBpID0gY2VudGVySW5kZXhFbmQgKyB4O1xuXG5cdFx0XHRcdGlmICggdG9wID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gZmFjZSB0b3BcblxuXHRcdFx0XHRcdGluZGljZXMucHVzaCggaSwgaSArIDEsIGMgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gZmFjZSBib3R0b21cblxuXHRcdFx0XHRcdGluZGljZXMucHVzaCggaSArIDEsIGksIGMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z3JvdXBDb3VudCArPSAzO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0XG5cblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCB0b3AgPT09IHRydWUgPyAxIDogMiApO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgbmV3IHN0YXJ0IHZhbHVlIGZvciBncm91cHNcblxuXHRcdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgQ3lsaW5kZXJHZW9tZXRyeSggZGF0YS5yYWRpdXNUb3AsIGRhdGEucmFkaXVzQm90dG9tLCBkYXRhLmhlaWdodCwgZGF0YS5yYWRpYWxTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5vcGVuRW5kZWQsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG5cbmV4cG9ydCB7IEN5bGluZGVyR2VvbWV0cnkgfTtcbiIsImltcG9ydCB7IEN5bGluZGVyR2VvbWV0cnkgfSBmcm9tICcuL0N5bGluZGVyR2VvbWV0cnkuanMnO1xuXG5jbGFzcyBDb25lR2VvbWV0cnkgZXh0ZW5kcyBDeWxpbmRlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgaGVpZ2h0ID0gMSwgcmFkaWFsU2VnbWVudHMgPSAzMiwgaGVpZ2h0U2VnbWVudHMgPSAxLCBvcGVuRW5kZWQgPSBmYWxzZSwgdGhldGFTdGFydCA9IDAsIHRoZXRhTGVuZ3RoID0gTWF0aC5QSSAqIDIgKSB7XG5cblx0XHRzdXBlciggMCwgcmFkaXVzLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0NvbmVHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdFx0fTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDb25lR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmhlaWdodCwgZGF0YS5yYWRpYWxTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5vcGVuRW5kZWQsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBDb25lR2VvbWV0cnkgfTtcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcblxuY2xhc3MgUG9seWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCB2ZXJ0aWNlcyA9IFtdLCBpbmRpY2VzID0gW10sIHJhZGl1cyA9IDEsIGRldGFpbCA9IDAgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BvbHloZWRyb25HZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHR2ZXJ0aWNlczogdmVydGljZXMsXG5cdFx0XHRpbmRpY2VzOiBpbmRpY2VzLFxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxuXHRcdH07XG5cblx0XHQvLyBkZWZhdWx0IGJ1ZmZlciBkYXRhXG5cblx0XHRjb25zdCB2ZXJ0ZXhCdWZmZXIgPSBbXTtcblx0XHRjb25zdCB1dkJ1ZmZlciA9IFtdO1xuXG5cdFx0Ly8gdGhlIHN1YmRpdmlzaW9uIGNyZWF0ZXMgdGhlIHZlcnRleCBidWZmZXIgZGF0YVxuXG5cdFx0c3ViZGl2aWRlKCBkZXRhaWwgKTtcblxuXHRcdC8vIGFsbCB2ZXJ0aWNlcyBzaG91bGQgbGllIG9uIGEgY29uY2VwdHVhbCBzcGhlcmUgd2l0aCBhIGdpdmVuIHJhZGl1c1xuXG5cdFx0YXBwbHlSYWRpdXMoIHJhZGl1cyApO1xuXG5cdFx0Ly8gZmluYWxseSwgY3JlYXRlIHRoZSB1diBkYXRhXG5cblx0XHRnZW5lcmF0ZVVWcygpO1xuXG5cdFx0Ly8gYnVpbGQgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGV4QnVmZmVyLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0ZXhCdWZmZXIuc2xpY2UoKSwgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dkJ1ZmZlciwgMiApICk7XG5cblx0XHRpZiAoIGRldGFpbCA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpOyAvLyBmbGF0IG5vcm1hbHNcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMubm9ybWFsaXplTm9ybWFscygpOyAvLyBzbW9vdGggbm9ybWFsc1xuXG5cdFx0fVxuXG5cdFx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdFx0ZnVuY3Rpb24gc3ViZGl2aWRlKCBkZXRhaWwgKSB7XG5cblx0XHRcdGNvbnN0IGEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0Y29uc3QgYiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBjID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Ly8gaXRlcmF0ZSBvdmVyIGFsbCBmYWNlcyBhbmQgYXBwbHkgYSBzdWJkaXZpc2lvbiB3aXRoIHRoZSBnaXZlbiBkZXRhaWwgdmFsdWVcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0XHQvLyBnZXQgdGhlIHZlcnRpY2VzIG9mIHRoZSBmYWNlXG5cblx0XHRcdFx0Z2V0VmVydGV4QnlJbmRleCggaW5kaWNlc1sgaSArIDAgXSwgYSApO1xuXHRcdFx0XHRnZXRWZXJ0ZXhCeUluZGV4KCBpbmRpY2VzWyBpICsgMSBdLCBiICk7XG5cdFx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAyIF0sIGMgKTtcblxuXHRcdFx0XHQvLyBwZXJmb3JtIHN1YmRpdmlzaW9uXG5cblx0XHRcdFx0c3ViZGl2aWRlRmFjZSggYSwgYiwgYywgZGV0YWlsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHN1YmRpdmlkZUZhY2UoIGEsIGIsIGMsIGRldGFpbCApIHtcblxuXHRcdFx0Y29uc3QgY29scyA9IGRldGFpbCArIDE7XG5cblx0XHRcdC8vIHdlIHVzZSB0aGlzIG11bHRpZGltZW5zaW9uYWwgYXJyYXkgYXMgYSBkYXRhIHN0cnVjdHVyZSBmb3IgY3JlYXRpbmcgdGhlIHN1YmRpdmlzaW9uXG5cblx0XHRcdGNvbnN0IHYgPSBbXTtcblxuXHRcdFx0Ly8gY29uc3RydWN0IGFsbCBvZiB0aGUgdmVydGljZXMgZm9yIHRoaXMgc3ViZGl2aXNpb25cblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IGNvbHM7IGkgKysgKSB7XG5cblx0XHRcdFx0dlsgaSBdID0gW107XG5cblx0XHRcdFx0Y29uc3QgYWogPSBhLmNsb25lKCkubGVycCggYywgaSAvIGNvbHMgKTtcblx0XHRcdFx0Y29uc3QgYmogPSBiLmNsb25lKCkubGVycCggYywgaSAvIGNvbHMgKTtcblxuXHRcdFx0XHRjb25zdCByb3dzID0gY29scyAtIGk7XG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9IHJvd3M7IGogKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGogPT09IDAgJiYgaSA9PT0gY29scyApIHtcblxuXHRcdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhajtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHZbIGkgXVsgaiBdID0gYWouY2xvbmUoKS5sZXJwKCBiaiwgaiAvIHJvd3MgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gY29uc3RydWN0IGFsbCBvZiB0aGUgZmFjZXNcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY29sczsgaSArKyApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCAyICogKCBjb2xzIC0gaSApIC0gMTsgaiArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGsgPSBNYXRoLmZsb29yKCBqIC8gMiApO1xuXG5cdFx0XHRcdFx0aWYgKCBqICUgMiA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSBdWyBrICsgMSBdICk7XG5cdFx0XHRcdFx0XHRwdXNoVmVydGV4KCB2WyBpICsgMSBdWyBrIF0gKTtcblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayBdICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRwdXNoVmVydGV4KCB2WyBpIF1bIGsgKyAxIF0gKTtcblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgKyAxIF0gKTtcblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgXSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gYXBwbHlSYWRpdXMoIHJhZGl1cyApIHtcblxuXHRcdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Ly8gaXRlcmF0ZSBvdmVyIHRoZSBlbnRpcmUgYnVmZmVyIGFuZCBhcHBseSB0aGUgcmFkaXVzIHRvIGVhY2ggdmVydGV4XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHZlcnRleEJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdFx0dmVydGV4LnkgPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF07XG5cdFx0XHRcdHZlcnRleC56ID0gdmVydGV4QnVmZmVyWyBpICsgMiBdO1xuXG5cdFx0XHRcdHZlcnRleC5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggcmFkaXVzICk7XG5cblx0XHRcdFx0dmVydGV4QnVmZmVyWyBpICsgMCBdID0gdmVydGV4Lng7XG5cdFx0XHRcdHZlcnRleEJ1ZmZlclsgaSArIDEgXSA9IHZlcnRleC55O1xuXHRcdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF0gPSB2ZXJ0ZXguejtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVVVnMoKSB7XG5cblx0XHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHZlcnRleEJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdFx0dmVydGV4LnkgPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF07XG5cdFx0XHRcdHZlcnRleC56ID0gdmVydGV4QnVmZmVyWyBpICsgMiBdO1xuXG5cdFx0XHRcdGNvbnN0IHUgPSBhemltdXRoKCB2ZXJ0ZXggKSAvIDIgLyBNYXRoLlBJICsgMC41O1xuXHRcdFx0XHRjb25zdCB2ID0gaW5jbGluYXRpb24oIHZlcnRleCApIC8gTWF0aC5QSSArIDAuNTtcblx0XHRcdFx0dXZCdWZmZXIucHVzaCggdSwgMSAtIHYgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb3JyZWN0VVZzKCk7XG5cblx0XHRcdGNvcnJlY3RTZWFtKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjb3JyZWN0U2VhbSgpIHtcblxuXHRcdFx0Ly8gaGFuZGxlIGNhc2Ugd2hlbiBmYWNlIHN0cmFkZGxlcyB0aGUgc2VhbSwgc2VlICMzMjY5XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHV2QnVmZmVyLmxlbmd0aDsgaSArPSA2ICkge1xuXG5cdFx0XHRcdC8vIHV2IGRhdGEgb2YgYSBzaW5nbGUgZmFjZVxuXG5cdFx0XHRcdGNvbnN0IHgwID0gdXZCdWZmZXJbIGkgKyAwIF07XG5cdFx0XHRcdGNvbnN0IHgxID0gdXZCdWZmZXJbIGkgKyAyIF07XG5cdFx0XHRcdGNvbnN0IHgyID0gdXZCdWZmZXJbIGkgKyA0IF07XG5cblx0XHRcdFx0Y29uc3QgbWF4ID0gTWF0aC5tYXgoIHgwLCB4MSwgeDIgKTtcblx0XHRcdFx0Y29uc3QgbWluID0gTWF0aC5taW4oIHgwLCB4MSwgeDIgKTtcblxuXHRcdFx0XHQvLyAwLjkgaXMgc29tZXdoYXQgYXJiaXRyYXJ5XG5cblx0XHRcdFx0aWYgKCBtYXggPiAwLjkgJiYgbWluIDwgMC4xICkge1xuXG5cdFx0XHRcdFx0aWYgKCB4MCA8IDAuMiApIHV2QnVmZmVyWyBpICsgMCBdICs9IDE7XG5cdFx0XHRcdFx0aWYgKCB4MSA8IDAuMiApIHV2QnVmZmVyWyBpICsgMiBdICs9IDE7XG5cdFx0XHRcdFx0aWYgKCB4MiA8IDAuMiApIHV2QnVmZmVyWyBpICsgNCBdICs9IDE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwdXNoVmVydGV4KCB2ZXJ0ZXggKSB7XG5cblx0XHRcdHZlcnRleEJ1ZmZlci5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRWZXJ0ZXhCeUluZGV4KCBpbmRleCwgdmVydGV4ICkge1xuXG5cdFx0XHRjb25zdCBzdHJpZGUgPSBpbmRleCAqIDM7XG5cblx0XHRcdHZlcnRleC54ID0gdmVydGljZXNbIHN0cmlkZSArIDAgXTtcblx0XHRcdHZlcnRleC55ID0gdmVydGljZXNbIHN0cmlkZSArIDEgXTtcblx0XHRcdHZlcnRleC56ID0gdmVydGljZXNbIHN0cmlkZSArIDIgXTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNvcnJlY3RVVnMoKSB7XG5cblx0XHRcdGNvbnN0IGEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0Y29uc3QgYiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBjID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Y29uc3QgY2VudHJvaWQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRjb25zdCB1dkEgPSBuZXcgVmVjdG9yMigpO1xuXHRcdFx0Y29uc3QgdXZCID0gbmV3IFZlY3RvcjIoKTtcblx0XHRcdGNvbnN0IHV2QyA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaiA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIubGVuZ3RoOyBpICs9IDksIGogKz0gNiApIHtcblxuXHRcdFx0XHRhLnNldCggdmVydGV4QnVmZmVyWyBpICsgMCBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0sIHZlcnRleEJ1ZmZlclsgaSArIDIgXSApO1xuXHRcdFx0XHRiLnNldCggdmVydGV4QnVmZmVyWyBpICsgMyBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyA0IF0sIHZlcnRleEJ1ZmZlclsgaSArIDUgXSApO1xuXHRcdFx0XHRjLnNldCggdmVydGV4QnVmZmVyWyBpICsgNiBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyA3IF0sIHZlcnRleEJ1ZmZlclsgaSArIDggXSApO1xuXG5cdFx0XHRcdHV2QS5zZXQoIHV2QnVmZmVyWyBqICsgMCBdLCB1dkJ1ZmZlclsgaiArIDEgXSApO1xuXHRcdFx0XHR1dkIuc2V0KCB1dkJ1ZmZlclsgaiArIDIgXSwgdXZCdWZmZXJbIGogKyAzIF0gKTtcblx0XHRcdFx0dXZDLnNldCggdXZCdWZmZXJbIGogKyA0IF0sIHV2QnVmZmVyWyBqICsgNSBdICk7XG5cblx0XHRcdFx0Y2VudHJvaWQuY29weSggYSApLmFkZCggYiApLmFkZCggYyApLmRpdmlkZVNjYWxhciggMyApO1xuXG5cdFx0XHRcdGNvbnN0IGF6aSA9IGF6aW11dGgoIGNlbnRyb2lkICk7XG5cblx0XHRcdFx0Y29ycmVjdFVWKCB1dkEsIGogKyAwLCBhLCBhemkgKTtcblx0XHRcdFx0Y29ycmVjdFVWKCB1dkIsIGogKyAyLCBiLCBhemkgKTtcblx0XHRcdFx0Y29ycmVjdFVWKCB1dkMsIGogKyA0LCBjLCBhemkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY29ycmVjdFVWKCB1diwgc3RyaWRlLCB2ZWN0b3IsIGF6aW11dGggKSB7XG5cblx0XHRcdGlmICggKCBhemltdXRoIDwgMCApICYmICggdXYueCA9PT0gMSApICkge1xuXG5cdFx0XHRcdHV2QnVmZmVyWyBzdHJpZGUgXSA9IHV2LnggLSAxO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggKCB2ZWN0b3IueCA9PT0gMCApICYmICggdmVjdG9yLnogPT09IDAgKSApIHtcblxuXHRcdFx0XHR1dkJ1ZmZlclsgc3RyaWRlIF0gPSBhemltdXRoIC8gMiAvIE1hdGguUEkgKyAwLjU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIEFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzLCBjb3VudGVyLWNsb2Nrd2lzZSB3aGVuIGxvb2tpbmcgZnJvbSBhYm92ZS5cblxuXHRcdGZ1bmN0aW9uIGF6aW11dGgoIHZlY3RvciApIHtcblxuXHRcdFx0cmV0dXJuIE1hdGguYXRhbjIoIHZlY3Rvci56LCAtIHZlY3Rvci54ICk7XG5cblx0XHR9XG5cblxuXHRcdC8vIEFuZ2xlIGFib3ZlIHRoZSBYWiBwbGFuZS5cblxuXHRcdGZ1bmN0aW9uIGluY2xpbmF0aW9uKCB2ZWN0b3IgKSB7XG5cblx0XHRcdHJldHVybiBNYXRoLmF0YW4yKCAtIHZlY3Rvci55LCBNYXRoLnNxcnQoICggdmVjdG9yLnggKiB2ZWN0b3IueCApICsgKCB2ZWN0b3IueiAqIHZlY3Rvci56ICkgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgUG9seWhlZHJvbkdlb21ldHJ5KCBkYXRhLnZlcnRpY2VzLCBkYXRhLmluZGljZXMsIGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbHMgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgUG9seWhlZHJvbkdlb21ldHJ5IH07XG4iLCJpbXBvcnQgeyBQb2x5aGVkcm9uR2VvbWV0cnkgfSBmcm9tICcuL1BvbHloZWRyb25HZW9tZXRyeS5qcyc7XG5cbmNsYXNzIERvZGVjYWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgUG9seWhlZHJvbkdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgZGV0YWlsID0gMCApIHtcblxuXHRcdGNvbnN0IHQgPSAoIDEgKyBNYXRoLnNxcnQoIDUgKSApIC8gMjtcblx0XHRjb25zdCByID0gMSAvIHQ7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtcblxuXHRcdFx0Ly8gKMKxMSwgwrExLCDCsTEpXG5cdFx0XHQtIDEsIC0gMSwgLSAxLFx0LSAxLCAtIDEsIDEsXG5cdFx0XHQtIDEsIDEsIC0gMSwgLSAxLCAxLCAxLFxuXHRcdFx0MSwgLSAxLCAtIDEsIDEsIC0gMSwgMSxcblx0XHRcdDEsIDEsIC0gMSwgMSwgMSwgMSxcblxuXHRcdFx0Ly8gKDAsIMKxMS/PhiwgwrHPhilcblx0XHRcdDAsIC0gciwgLSB0LCAwLCAtIHIsIHQsXG5cdFx0XHQwLCByLCAtIHQsIDAsIHIsIHQsXG5cblx0XHRcdC8vICjCsTEvz4YsIMKxz4YsIDApXG5cdFx0XHQtIHIsIC0gdCwgMCwgLSByLCB0LCAwLFxuXHRcdFx0ciwgLSB0LCAwLCByLCB0LCAwLFxuXG5cdFx0XHQvLyAowrHPhiwgMCwgwrExL8+GKVxuXHRcdFx0LSB0LCAwLCAtIHIsIHQsIDAsIC0gcixcblx0XHRcdC0gdCwgMCwgciwgdCwgMCwgclxuXHRcdF07XG5cblx0XHRjb25zdCBpbmRpY2VzID0gW1xuXHRcdFx0MywgMTEsIDcsIFx0MywgNywgMTUsIFx0MywgMTUsIDEzLFxuXHRcdFx0NywgMTksIDE3LCBcdDcsIDE3LCA2LCBcdDcsIDYsIDE1LFxuXHRcdFx0MTcsIDQsIDgsIFx0MTcsIDgsIDEwLCBcdDE3LCAxMCwgNixcblx0XHRcdDgsIDAsIDE2LCBcdDgsIDE2LCAyLCBcdDgsIDIsIDEwLFxuXHRcdFx0MCwgMTIsIDEsIFx0MCwgMSwgMTgsIFx0MCwgMTgsIDE2LFxuXHRcdFx0NiwgMTAsIDIsIFx0NiwgMiwgMTMsIFx0NiwgMTMsIDE1LFxuXHRcdFx0MiwgMTYsIDE4LCBcdDIsIDE4LCAzLCBcdDIsIDMsIDEzLFxuXHRcdFx0MTgsIDEsIDksIFx0MTgsIDksIDExLCBcdDE4LCAxMSwgMyxcblx0XHRcdDQsIDE0LCAxMiwgXHQ0LCAxMiwgMCwgXHQ0LCAwLCA4LFxuXHRcdFx0MTEsIDksIDUsIFx0MTEsIDUsIDE5LCBcdDExLCAxOSwgNyxcblx0XHRcdDE5LCA1LCAxNCwgXHQxOSwgMTQsIDQsIFx0MTksIDQsIDE3LFxuXHRcdFx0MSwgMTIsIDE0LCBcdDEsIDE0LCA1LCBcdDEsIDUsIDlcblx0XHRdO1xuXG5cdFx0c3VwZXIoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0RvZGVjYWhlZHJvbkdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0ZGV0YWlsOiBkZXRhaWxcblx0XHR9O1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IERvZGVjYWhlZHJvbkdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5kZXRhaWwgKTtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBEb2RlY2FoZWRyb25HZW9tZXRyeSB9O1xuIiwiaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XG5pbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgVHJpYW5nbGUgfSBmcm9tICcuLi9tYXRoL1RyaWFuZ2xlLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuXG5jb25zdCBfdjAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbm9ybWFsID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3RyaWFuZ2xlID0gLypAX19QVVJFX18qLyBuZXcgVHJpYW5nbGUoKTtcblxuY2xhc3MgRWRnZXNHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBudWxsLCB0aHJlc2hvbGRBbmdsZSA9IDEgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0VkZ2VzR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0Z2VvbWV0cnk6IGdlb21ldHJ5LFxuXHRcdFx0dGhyZXNob2xkQW5nbGU6IHRocmVzaG9sZEFuZ2xlXG5cdFx0fTtcblxuXHRcdGlmICggZ2VvbWV0cnkgIT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IHByZWNpc2lvblBvaW50cyA9IDQ7XG5cdFx0XHRjb25zdCBwcmVjaXNpb24gPSBNYXRoLnBvdyggMTAsIHByZWNpc2lvblBvaW50cyApO1xuXHRcdFx0Y29uc3QgdGhyZXNob2xkRG90ID0gTWF0aC5jb3MoIE1hdGhVdGlscy5ERUcyUkFEICogdGhyZXNob2xkQW5nbGUgKTtcblxuXHRcdFx0Y29uc3QgaW5kZXhBdHRyID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcblx0XHRcdGNvbnN0IHBvc2l0aW9uQXR0ciA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXHRcdFx0Y29uc3QgaW5kZXhDb3VudCA9IGluZGV4QXR0ciA/IGluZGV4QXR0ci5jb3VudCA6IHBvc2l0aW9uQXR0ci5jb3VudDtcblxuXHRcdFx0Y29uc3QgaW5kZXhBcnIgPSBbIDAsIDAsIDAgXTtcblx0XHRcdGNvbnN0IHZlcnRLZXlzID0gWyAnYScsICdiJywgJ2MnIF07XG5cdFx0XHRjb25zdCBoYXNoZXMgPSBuZXcgQXJyYXkoIDMgKTtcblxuXHRcdFx0Y29uc3QgZWRnZURhdGEgPSB7fTtcblx0XHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBpbmRleENvdW50OyBpICs9IDMgKSB7XG5cblx0XHRcdFx0aWYgKCBpbmRleEF0dHIgKSB7XG5cblx0XHRcdFx0XHRpbmRleEFyclsgMCBdID0gaW5kZXhBdHRyLmdldFgoIGkgKTtcblx0XHRcdFx0XHRpbmRleEFyclsgMSBdID0gaW5kZXhBdHRyLmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0aW5kZXhBcnJbIDIgXSA9IGluZGV4QXR0ci5nZXRYKCBpICsgMiApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpbmRleEFyclsgMCBdID0gaTtcblx0XHRcdFx0XHRpbmRleEFyclsgMSBdID0gaSArIDE7XG5cdFx0XHRcdFx0aW5kZXhBcnJbIDIgXSA9IGkgKyAyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCB7IGEsIGIsIGMgfSA9IF90cmlhbmdsZTtcblx0XHRcdFx0YS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4QXJyWyAwIF0gKTtcblx0XHRcdFx0Yi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4QXJyWyAxIF0gKTtcblx0XHRcdFx0Yy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4QXJyWyAyIF0gKTtcblx0XHRcdFx0X3RyaWFuZ2xlLmdldE5vcm1hbCggX25vcm1hbCApO1xuXG5cdFx0XHRcdC8vIGNyZWF0ZSBoYXNoZXMgZm9yIHRoZSBlZGdlIGZyb20gdGhlIHZlcnRpY2VzXG5cdFx0XHRcdGhhc2hlc1sgMCBdID0gYCR7IE1hdGgucm91bmQoIGEueCAqIHByZWNpc2lvbiApIH0sJHsgTWF0aC5yb3VuZCggYS55ICogcHJlY2lzaW9uICkgfSwkeyBNYXRoLnJvdW5kKCBhLnogKiBwcmVjaXNpb24gKSB9YDtcblx0XHRcdFx0aGFzaGVzWyAxIF0gPSBgJHsgTWF0aC5yb3VuZCggYi54ICogcHJlY2lzaW9uICkgfSwkeyBNYXRoLnJvdW5kKCBiLnkgKiBwcmVjaXNpb24gKSB9LCR7IE1hdGgucm91bmQoIGIueiAqIHByZWNpc2lvbiApIH1gO1xuXHRcdFx0XHRoYXNoZXNbIDIgXSA9IGAkeyBNYXRoLnJvdW5kKCBjLnggKiBwcmVjaXNpb24gKSB9LCR7IE1hdGgucm91bmQoIGMueSAqIHByZWNpc2lvbiApIH0sJHsgTWF0aC5yb3VuZCggYy56ICogcHJlY2lzaW9uICkgfWA7XG5cblx0XHRcdFx0Ly8gc2tpcCBkZWdlbmVyYXRlIHRyaWFuZ2xlc1xuXHRcdFx0XHRpZiAoIGhhc2hlc1sgMCBdID09PSBoYXNoZXNbIDEgXSB8fCBoYXNoZXNbIDEgXSA9PT0gaGFzaGVzWyAyIF0gfHwgaGFzaGVzWyAyIF0gPT09IGhhc2hlc1sgMCBdICkge1xuXG5cdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGl0ZXJhdGUgb3ZlciBldmVyeSBlZGdlXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdFx0XHQvLyBnZXQgdGhlIGZpcnN0IGFuZCBuZXh0IHZlcnRleCBtYWtpbmcgdXAgdGhlIGVkZ2Vcblx0XHRcdFx0XHRjb25zdCBqTmV4dCA9ICggaiArIDEgKSAlIDM7XG5cdFx0XHRcdFx0Y29uc3QgdmVjSGFzaDAgPSBoYXNoZXNbIGogXTtcblx0XHRcdFx0XHRjb25zdCB2ZWNIYXNoMSA9IGhhc2hlc1sgak5leHQgXTtcblx0XHRcdFx0XHRjb25zdCB2MCA9IF90cmlhbmdsZVsgdmVydEtleXNbIGogXSBdO1xuXHRcdFx0XHRcdGNvbnN0IHYxID0gX3RyaWFuZ2xlWyB2ZXJ0S2V5c1sgak5leHQgXSBdO1xuXG5cdFx0XHRcdFx0Y29uc3QgaGFzaCA9IGAkeyB2ZWNIYXNoMCB9XyR7IHZlY0hhc2gxIH1gO1xuXHRcdFx0XHRcdGNvbnN0IHJldmVyc2VIYXNoID0gYCR7IHZlY0hhc2gxIH1fJHsgdmVjSGFzaDAgfWA7XG5cblx0XHRcdFx0XHRpZiAoIHJldmVyc2VIYXNoIGluIGVkZ2VEYXRhICYmIGVkZ2VEYXRhWyByZXZlcnNlSGFzaCBdICkge1xuXG5cdFx0XHRcdFx0XHQvLyBpZiB3ZSBmb3VuZCBhIHNpYmxpbmcgZWRnZSBhZGQgaXQgaW50byB0aGUgdmVydGV4IGFycmF5IGlmXG5cdFx0XHRcdFx0XHQvLyBpdCBtZWV0cyB0aGUgYW5nbGUgdGhyZXNob2xkIGFuZCBkZWxldGUgdGhlIGVkZ2UgZnJvbSB0aGUgbWFwLlxuXHRcdFx0XHRcdFx0aWYgKCBfbm9ybWFsLmRvdCggZWRnZURhdGFbIHJldmVyc2VIYXNoIF0ubm9ybWFsICkgPD0gdGhyZXNob2xkRG90ICkge1xuXG5cdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHYwLngsIHYwLnksIHYwLnogKTtcblx0XHRcdFx0XHRcdFx0dmVydGljZXMucHVzaCggdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGVkZ2VEYXRhWyByZXZlcnNlSGFzaCBdID0gbnVsbDtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEgKCBoYXNoIGluIGVkZ2VEYXRhICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGlmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGVkZ2UgaGVyZSB0aGVuIHNraXAgYWRkaW5nIGEgbmV3IG9uZVxuXHRcdFx0XHRcdFx0ZWRnZURhdGFbIGhhc2ggXSA9IHtcblxuXHRcdFx0XHRcdFx0XHRpbmRleDA6IGluZGV4QXJyWyBqIF0sXG5cdFx0XHRcdFx0XHRcdGluZGV4MTogaW5kZXhBcnJbIGpOZXh0IF0sXG5cdFx0XHRcdFx0XHRcdG5vcm1hbDogX25vcm1hbC5jbG9uZSgpLFxuXG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIHJlbWFpbmluZywgdW5tYXRjaGVkIGVkZ2VzIGFuZCBhZGQgdGhlbSB0byB0aGUgdmVydGV4IGFycmF5XG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gZWRnZURhdGEgKSB7XG5cblx0XHRcdFx0aWYgKCBlZGdlRGF0YVsga2V5IF0gKSB7XG5cblx0XHRcdFx0XHRjb25zdCB7IGluZGV4MCwgaW5kZXgxIH0gPSBlZGdlRGF0YVsga2V5IF07XG5cdFx0XHRcdFx0X3YwLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0ciwgaW5kZXgwICk7XG5cdFx0XHRcdFx0X3YxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0ciwgaW5kZXgxICk7XG5cblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBfdjAueCwgX3YwLnksIF92MC56ICk7XG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggX3YxLngsIF92MS55LCBfdjEueiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBFZGdlc0dlb21ldHJ5IH07XG4iLCJpbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi9QYXRoLmpzJztcbmltcG9ydCAqIGFzIE1hdGhVdGlscyBmcm9tICcuLi8uLi9tYXRoL01hdGhVdGlscy5qcyc7XG5cbmNsYXNzIFNoYXBlIGV4dGVuZHMgUGF0aCB7XG5cblx0Y29uc3RydWN0b3IoIHBvaW50cyApIHtcblxuXHRcdHN1cGVyKCBwb2ludHMgKTtcblxuXHRcdHRoaXMudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdTaGFwZSc7XG5cblx0XHR0aGlzLmhvbGVzID0gW107XG5cblx0fVxuXG5cdGdldFBvaW50c0hvbGVzKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRjb25zdCBob2xlc1B0cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRob2xlc1B0c1sgaSBdID0gdGhpcy5ob2xlc1sgaSBdLmdldFBvaW50cyggZGl2aXNpb25zICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaG9sZXNQdHM7XG5cblx0fVxuXG5cdC8vIGdldCBwb2ludHMgb2Ygc2hhcGUgYW5kIGhvbGVzIChrZXlwb2ludHMgYmFzZWQgb24gc2VnbWVudHMgcGFyYW1ldGVyKVxuXG5cdGV4dHJhY3RQb2ludHMoIGRpdmlzaW9ucyApIHtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNoYXBlOiB0aGlzLmdldFBvaW50cyggZGl2aXNpb25zICksXG5cdFx0XHRob2xlczogdGhpcy5nZXRQb2ludHNIb2xlcyggZGl2aXNpb25zIClcblxuXHRcdH07XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc291cmNlLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGhvbGUgPSBzb3VyY2UuaG9sZXNbIGkgXTtcblxuXHRcdFx0dGhpcy5ob2xlcy5wdXNoKCBob2xlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBob2xlID0gdGhpcy5ob2xlc1sgaSBdO1xuXHRcdFx0ZGF0YS5ob2xlcy5wdXNoKCBob2xlLnRvSlNPTigpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy51dWlkID0ganNvbi51dWlkO1xuXHRcdHRoaXMuaG9sZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24uaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgaG9sZSA9IGpzb24uaG9sZXNbIGkgXTtcblx0XHRcdHRoaXMuaG9sZXMucHVzaCggbmV3IFBhdGgoKS5mcm9tSlNPTiggaG9sZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBTaGFwZSB9O1xuIiwiLyoqXG4gKiBQb3J0IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9lYXJjdXQgKHYyLjIuNClcbiAqL1xuXG5jb25zdCBFYXJjdXQgPSB7XG5cblx0dHJpYW5ndWxhdGU6IGZ1bmN0aW9uICggZGF0YSwgaG9sZUluZGljZXMsIGRpbSA9IDIgKSB7XG5cblx0XHRjb25zdCBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aDtcblx0XHRjb25zdCBvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbIDAgXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuXHRcdGxldCBvdXRlck5vZGUgPSBsaW5rZWRMaXN0KCBkYXRhLCAwLCBvdXRlckxlbiwgZGltLCB0cnVlICk7XG5cdFx0Y29uc3QgdHJpYW5nbGVzID0gW107XG5cblx0XHRpZiAoICEgb3V0ZXJOb2RlIHx8IG91dGVyTm9kZS5uZXh0ID09PSBvdXRlck5vZGUucHJldiApIHJldHVybiB0cmlhbmdsZXM7XG5cblx0XHRsZXQgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgaW52U2l6ZTtcblxuXHRcdGlmICggaGFzSG9sZXMgKSBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICk7XG5cblx0XHQvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcblx0XHRpZiAoIGRhdGEubGVuZ3RoID4gODAgKiBkaW0gKSB7XG5cblx0XHRcdG1pblggPSBtYXhYID0gZGF0YVsgMCBdO1xuXHRcdFx0bWluWSA9IG1heFkgPSBkYXRhWyAxIF07XG5cblx0XHRcdGZvciAoIGxldCBpID0gZGltOyBpIDwgb3V0ZXJMZW47IGkgKz0gZGltICkge1xuXG5cdFx0XHRcdHggPSBkYXRhWyBpIF07XG5cdFx0XHRcdHkgPSBkYXRhWyBpICsgMSBdO1xuXHRcdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0XHRpZiAoIHkgPiBtYXhZICkgbWF4WSA9IHk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbWluWCwgbWluWSBhbmQgaW52U2l6ZSBhcmUgbGF0ZXIgdXNlZCB0byB0cmFuc2Zvcm0gY29vcmRzIGludG8gaW50ZWdlcnMgZm9yIHotb3JkZXIgY2FsY3VsYXRpb25cblx0XHRcdGludlNpemUgPSBNYXRoLm1heCggbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZICk7XG5cdFx0XHRpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDMyNzY3IC8gaW52U2l6ZSA6IDA7XG5cblx0XHR9XG5cblx0XHRlYXJjdXRMaW5rZWQoIG91dGVyTm9kZSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDAgKTtcblxuXHRcdHJldHVybiB0cmlhbmdsZXM7XG5cblx0fVxuXG59O1xuXG4vLyBjcmVhdGUgYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QgZnJvbSBwb2x5Z29uIHBvaW50cyBpbiB0aGUgc3BlY2lmaWVkIHdpbmRpbmcgb3JkZXJcbmZ1bmN0aW9uIGxpbmtlZExpc3QoIGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSwgY2xvY2t3aXNlICkge1xuXG5cdGxldCBpLCBsYXN0O1xuXG5cdGlmICggY2xvY2t3aXNlID09PSAoIHNpZ25lZEFyZWEoIGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSApID4gMCApICkge1xuXG5cdFx0Zm9yICggaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGRpbSApIGxhc3QgPSBpbnNlcnROb2RlKCBpLCBkYXRhWyBpIF0sIGRhdGFbIGkgKyAxIF0sIGxhc3QgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Zm9yICggaSA9IGVuZCAtIGRpbTsgaSA+PSBzdGFydDsgaSAtPSBkaW0gKSBsYXN0ID0gaW5zZXJ0Tm9kZSggaSwgZGF0YVsgaSBdLCBkYXRhWyBpICsgMSBdLCBsYXN0ICk7XG5cblx0fVxuXG5cdGlmICggbGFzdCAmJiBlcXVhbHMoIGxhc3QsIGxhc3QubmV4dCApICkge1xuXG5cdFx0cmVtb3ZlTm9kZSggbGFzdCApO1xuXHRcdGxhc3QgPSBsYXN0Lm5leHQ7XG5cblx0fVxuXG5cdHJldHVybiBsYXN0O1xuXG59XG5cbi8vIGVsaW1pbmF0ZSBjb2xpbmVhciBvciBkdXBsaWNhdGUgcG9pbnRzXG5mdW5jdGlvbiBmaWx0ZXJQb2ludHMoIHN0YXJ0LCBlbmQgKSB7XG5cblx0aWYgKCAhIHN0YXJ0ICkgcmV0dXJuIHN0YXJ0O1xuXHRpZiAoICEgZW5kICkgZW5kID0gc3RhcnQ7XG5cblx0bGV0IHAgPSBzdGFydCxcblx0XHRhZ2Fpbjtcblx0ZG8ge1xuXG5cdFx0YWdhaW4gPSBmYWxzZTtcblxuXHRcdGlmICggISBwLnN0ZWluZXIgJiYgKCBlcXVhbHMoIHAsIHAubmV4dCApIHx8IGFyZWEoIHAucHJldiwgcCwgcC5uZXh0ICkgPT09IDAgKSApIHtcblxuXHRcdFx0cmVtb3ZlTm9kZSggcCApO1xuXHRcdFx0cCA9IGVuZCA9IHAucHJldjtcblx0XHRcdGlmICggcCA9PT0gcC5uZXh0ICkgYnJlYWs7XG5cdFx0XHRhZ2FpbiA9IHRydWU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwID0gcC5uZXh0O1xuXG5cdFx0fVxuXG5cdH0gd2hpbGUgKCBhZ2FpbiB8fCBwICE9PSBlbmQgKTtcblxuXHRyZXR1cm4gZW5kO1xuXG59XG5cbi8vIG1haW4gZWFyIHNsaWNpbmcgbG9vcCB3aGljaCB0cmlhbmd1bGF0ZXMgYSBwb2x5Z29uIChnaXZlbiBhcyBhIGxpbmtlZCBsaXN0KVxuZnVuY3Rpb24gZWFyY3V0TGlua2VkKCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCBwYXNzICkge1xuXG5cdGlmICggISBlYXIgKSByZXR1cm47XG5cblx0Ly8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuXHRpZiAoICEgcGFzcyAmJiBpbnZTaXplICkgaW5kZXhDdXJ2ZSggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cblx0bGV0IHN0b3AgPSBlYXIsXG5cdFx0cHJldiwgbmV4dDtcblxuXHQvLyBpdGVyYXRlIHRocm91Z2ggZWFycywgc2xpY2luZyB0aGVtIG9uZSBieSBvbmVcblx0d2hpbGUgKCBlYXIucHJldiAhPT0gZWFyLm5leHQgKSB7XG5cblx0XHRwcmV2ID0gZWFyLnByZXY7XG5cdFx0bmV4dCA9IGVhci5uZXh0O1xuXG5cdFx0aWYgKCBpbnZTaXplID8gaXNFYXJIYXNoZWQoIGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSApIDogaXNFYXIoIGVhciApICkge1xuXG5cdFx0XHQvLyBjdXQgb2ZmIHRoZSB0cmlhbmdsZVxuXHRcdFx0dHJpYW5nbGVzLnB1c2goIHByZXYuaSAvIGRpbSB8IDAgKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBlYXIuaSAvIGRpbSB8IDAgKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBuZXh0LmkgLyBkaW0gfCAwICk7XG5cblx0XHRcdHJlbW92ZU5vZGUoIGVhciApO1xuXG5cdFx0XHQvLyBza2lwcGluZyB0aGUgbmV4dCB2ZXJ0ZXggbGVhZHMgdG8gbGVzcyBzbGl2ZXIgdHJpYW5nbGVzXG5cdFx0XHRlYXIgPSBuZXh0Lm5leHQ7XG5cdFx0XHRzdG9wID0gbmV4dC5uZXh0O1xuXG5cdFx0XHRjb250aW51ZTtcblxuXHRcdH1cblxuXHRcdGVhciA9IG5leHQ7XG5cblx0XHQvLyBpZiB3ZSBsb29wZWQgdGhyb3VnaCB0aGUgd2hvbGUgcmVtYWluaW5nIHBvbHlnb24gYW5kIGNhbid0IGZpbmQgYW55IG1vcmUgZWFyc1xuXHRcdGlmICggZWFyID09PSBzdG9wICkge1xuXG5cdFx0XHQvLyB0cnkgZmlsdGVyaW5nIHBvaW50cyBhbmQgc2xpY2luZyBhZ2FpblxuXHRcdFx0aWYgKCAhIHBhc3MgKSB7XG5cblx0XHRcdFx0ZWFyY3V0TGlua2VkKCBmaWx0ZXJQb2ludHMoIGVhciApLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMSApO1xuXG5cdFx0XHRcdC8vIGlmIHRoaXMgZGlkbid0IHdvcmssIHRyeSBjdXJpbmcgYWxsIHNtYWxsIHNlbGYtaW50ZXJzZWN0aW9ucyBsb2NhbGx5XG5cblx0XHRcdH0gZWxzZSBpZiAoIHBhc3MgPT09IDEgKSB7XG5cblx0XHRcdFx0ZWFyID0gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyggZmlsdGVyUG9pbnRzKCBlYXIgKSwgdHJpYW5nbGVzLCBkaW0gKTtcblx0XHRcdFx0ZWFyY3V0TGlua2VkKCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAyICk7XG5cblx0XHRcdFx0Ly8gYXMgYSBsYXN0IHJlc29ydCwgdHJ5IHNwbGl0dGluZyB0aGUgcmVtYWluaW5nIHBvbHlnb24gaW50byB0d29cblxuXHRcdFx0fSBlbHNlIGlmICggcGFzcyA9PT0gMiApIHtcblxuXHRcdFx0XHRzcGxpdEVhcmN1dCggZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vLyBjaGVjayB3aGV0aGVyIGEgcG9seWdvbiBub2RlIGZvcm1zIGEgdmFsaWQgZWFyIHdpdGggYWRqYWNlbnQgbm9kZXNcbmZ1bmN0aW9uIGlzRWFyKCBlYXIgKSB7XG5cblx0Y29uc3QgYSA9IGVhci5wcmV2LFxuXHRcdGIgPSBlYXIsXG5cdFx0YyA9IGVhci5uZXh0O1xuXG5cdGlmICggYXJlYSggYSwgYiwgYyApID49IDAgKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cblx0Ly8gbm93IG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlIG90aGVyIHBvaW50cyBpbnNpZGUgdGhlIHBvdGVudGlhbCBlYXJcblx0Y29uc3QgYXggPSBhLngsIGJ4ID0gYi54LCBjeCA9IGMueCwgYXkgPSBhLnksIGJ5ID0gYi55LCBjeSA9IGMueTtcblxuXHQvLyB0cmlhbmdsZSBiYm94OyBtaW4gJiBtYXggYXJlIGNhbGN1bGF0ZWQgbGlrZSB0aGlzIGZvciBzcGVlZFxuXHRjb25zdCB4MCA9IGF4IDwgYnggPyAoIGF4IDwgY3ggPyBheCA6IGN4ICkgOiAoIGJ4IDwgY3ggPyBieCA6IGN4ICksXG5cdFx0eTAgPSBheSA8IGJ5ID8gKCBheSA8IGN5ID8gYXkgOiBjeSApIDogKCBieSA8IGN5ID8gYnkgOiBjeSApLFxuXHRcdHgxID0gYXggPiBieCA/ICggYXggPiBjeCA/IGF4IDogY3ggKSA6ICggYnggPiBjeCA/IGJ4IDogY3ggKSxcblx0XHR5MSA9IGF5ID4gYnkgPyAoIGF5ID4gY3kgPyBheSA6IGN5ICkgOiAoIGJ5ID4gY3kgPyBieSA6IGN5ICk7XG5cblx0bGV0IHAgPSBjLm5leHQ7XG5cdHdoaWxlICggcCAhPT0gYSApIHtcblxuXHRcdGlmICggcC54ID49IHgwICYmIHAueCA8PSB4MSAmJiBwLnkgPj0geTAgJiYgcC55IDw9IHkxICYmXG5cdFx0XHRwb2ludEluVHJpYW5nbGUoIGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHAueCwgcC55ICkgJiZcblx0XHRcdGFyZWEoIHAucHJldiwgcCwgcC5uZXh0ICkgPj0gMCApIHJldHVybiBmYWxzZTtcblx0XHRwID0gcC5uZXh0O1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG5mdW5jdGlvbiBpc0Vhckhhc2hlZCggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdGNvbnN0IGEgPSBlYXIucHJldixcblx0XHRiID0gZWFyLFxuXHRcdGMgPSBlYXIubmV4dDtcblxuXHRpZiAoIGFyZWEoIGEsIGIsIGMgKSA+PSAwICkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxuXG5cdGNvbnN0IGF4ID0gYS54LCBieCA9IGIueCwgY3ggPSBjLngsIGF5ID0gYS55LCBieSA9IGIueSwgY3kgPSBjLnk7XG5cblx0Ly8gdHJpYW5nbGUgYmJveDsgbWluICYgbWF4IGFyZSBjYWxjdWxhdGVkIGxpa2UgdGhpcyBmb3Igc3BlZWRcblx0Y29uc3QgeDAgPSBheCA8IGJ4ID8gKCBheCA8IGN4ID8gYXggOiBjeCApIDogKCBieCA8IGN4ID8gYnggOiBjeCApLFxuXHRcdHkwID0gYXkgPCBieSA/ICggYXkgPCBjeSA/IGF5IDogY3kgKSA6ICggYnkgPCBjeSA/IGJ5IDogY3kgKSxcblx0XHR4MSA9IGF4ID4gYnggPyAoIGF4ID4gY3ggPyBheCA6IGN4ICkgOiAoIGJ4ID4gY3ggPyBieCA6IGN4ICksXG5cdFx0eTEgPSBheSA+IGJ5ID8gKCBheSA+IGN5ID8gYXkgOiBjeSApIDogKCBieSA+IGN5ID8gYnkgOiBjeSApO1xuXG5cdC8vIHotb3JkZXIgcmFuZ2UgZm9yIHRoZSBjdXJyZW50IHRyaWFuZ2xlIGJib3g7XG5cdGNvbnN0IG1pblogPSB6T3JkZXIoIHgwLCB5MCwgbWluWCwgbWluWSwgaW52U2l6ZSApLFxuXHRcdG1heFogPSB6T3JkZXIoIHgxLCB5MSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdGxldCBwID0gZWFyLnByZXZaLFxuXHRcdG4gPSBlYXIubmV4dFo7XG5cblx0Ly8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgaW4gYm90aCBkaXJlY3Rpb25zXG5cdHdoaWxlICggcCAmJiBwLnogPj0gbWluWiAmJiBuICYmIG4ueiA8PSBtYXhaICkge1xuXG5cdFx0aWYgKCBwLnggPj0geDAgJiYgcC54IDw9IHgxICYmIHAueSA+PSB5MCAmJiBwLnkgPD0geTEgJiYgcCAhPT0gYSAmJiBwICE9PSBjICYmXG5cdFx0XHRwb2ludEluVHJpYW5nbGUoIGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHAueCwgcC55ICkgJiYgYXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA+PSAwICkgcmV0dXJuIGZhbHNlO1xuXHRcdHAgPSBwLnByZXZaO1xuXG5cdFx0aWYgKCBuLnggPj0geDAgJiYgbi54IDw9IHgxICYmIG4ueSA+PSB5MCAmJiBuLnkgPD0geTEgJiYgbiAhPT0gYSAmJiBuICE9PSBjICYmXG5cdFx0XHRwb2ludEluVHJpYW5nbGUoIGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIG4ueCwgbi55ICkgJiYgYXJlYSggbi5wcmV2LCBuLCBuLm5leHQgKSA+PSAwICkgcmV0dXJuIGZhbHNlO1xuXHRcdG4gPSBuLm5leHRaO1xuXG5cdH1cblxuXHQvLyBsb29rIGZvciByZW1haW5pbmcgcG9pbnRzIGluIGRlY3JlYXNpbmcgei1vcmRlclxuXHR3aGlsZSAoIHAgJiYgcC56ID49IG1pblogKSB7XG5cblx0XHRpZiAoIHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJiBwICE9PSBhICYmIHAgIT09IGMgJiZcblx0XHRcdHBvaW50SW5UcmlhbmdsZSggYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcC54LCBwLnkgKSAmJiBhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAucHJldlo7XG5cblx0fVxuXG5cdC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gaW5jcmVhc2luZyB6LW9yZGVyXG5cdHdoaWxlICggbiAmJiBuLnogPD0gbWF4WiApIHtcblxuXHRcdGlmICggbi54ID49IHgwICYmIG4ueCA8PSB4MSAmJiBuLnkgPj0geTAgJiYgbi55IDw9IHkxICYmIG4gIT09IGEgJiYgbiAhPT0gYyAmJlxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBuLngsIG4ueSApICYmIGFyZWEoIG4ucHJldiwgbiwgbi5uZXh0ICkgPj0gMCApIHJldHVybiBmYWxzZTtcblx0XHRuID0gbi5uZXh0WjtcblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn1cblxuLy8gZ28gdGhyb3VnaCBhbGwgcG9seWdvbiBub2RlcyBhbmQgY3VyZSBzbWFsbCBsb2NhbCBzZWxmLWludGVyc2VjdGlvbnNcbmZ1bmN0aW9uIGN1cmVMb2NhbEludGVyc2VjdGlvbnMoIHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSApIHtcblxuXHRsZXQgcCA9IHN0YXJ0O1xuXHRkbyB7XG5cblx0XHRjb25zdCBhID0gcC5wcmV2LFxuXHRcdFx0YiA9IHAubmV4dC5uZXh0O1xuXG5cdFx0aWYgKCAhIGVxdWFscyggYSwgYiApICYmIGludGVyc2VjdHMoIGEsIHAsIHAubmV4dCwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSAmJiBsb2NhbGx5SW5zaWRlKCBiLCBhICkgKSB7XG5cblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBhLmkgLyBkaW0gfCAwICk7XG5cdFx0XHR0cmlhbmdsZXMucHVzaCggcC5pIC8gZGltIHwgMCApO1xuXHRcdFx0dHJpYW5nbGVzLnB1c2goIGIuaSAvIGRpbSB8IDAgKTtcblxuXHRcdFx0Ly8gcmVtb3ZlIHR3byBub2RlcyBpbnZvbHZlZFxuXHRcdFx0cmVtb3ZlTm9kZSggcCApO1xuXHRcdFx0cmVtb3ZlTm9kZSggcC5uZXh0ICk7XG5cblx0XHRcdHAgPSBzdGFydCA9IGI7XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xuXG5cdHJldHVybiBmaWx0ZXJQb2ludHMoIHAgKTtcblxufVxuXG4vLyB0cnkgc3BsaXR0aW5nIHBvbHlnb24gaW50byB0d28gYW5kIHRyaWFuZ3VsYXRlIHRoZW0gaW5kZXBlbmRlbnRseVxuZnVuY3Rpb24gc3BsaXRFYXJjdXQoIHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHQvLyBsb29rIGZvciBhIHZhbGlkIGRpYWdvbmFsIHRoYXQgZGl2aWRlcyB0aGUgcG9seWdvbiBpbnRvIHR3b1xuXHRsZXQgYSA9IHN0YXJ0O1xuXHRkbyB7XG5cblx0XHRsZXQgYiA9IGEubmV4dC5uZXh0O1xuXHRcdHdoaWxlICggYiAhPT0gYS5wcmV2ICkge1xuXG5cdFx0XHRpZiAoIGEuaSAhPT0gYi5pICYmIGlzVmFsaWREaWFnb25hbCggYSwgYiApICkge1xuXG5cdFx0XHRcdC8vIHNwbGl0IHRoZSBwb2x5Z29uIGluIHR3byBieSB0aGUgZGlhZ29uYWxcblx0XHRcdFx0bGV0IGMgPSBzcGxpdFBvbHlnb24oIGEsIGIgKTtcblxuXHRcdFx0XHQvLyBmaWx0ZXIgY29saW5lYXIgcG9pbnRzIGFyb3VuZCB0aGUgY3V0c1xuXHRcdFx0XHRhID0gZmlsdGVyUG9pbnRzKCBhLCBhLm5leHQgKTtcblx0XHRcdFx0YyA9IGZpbHRlclBvaW50cyggYywgYy5uZXh0ICk7XG5cblx0XHRcdFx0Ly8gcnVuIGVhcmN1dCBvbiBlYWNoIGhhbGZcblx0XHRcdFx0ZWFyY3V0TGlua2VkKCBhLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMCApO1xuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGMsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAwICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRiID0gYi5uZXh0O1xuXG5cdFx0fVxuXG5cdFx0YSA9IGEubmV4dDtcblxuXHR9IHdoaWxlICggYSAhPT0gc3RhcnQgKTtcblxufVxuXG4vLyBsaW5rIGV2ZXJ5IGhvbGUgaW50byB0aGUgb3V0ZXIgbG9vcCwgcHJvZHVjaW5nIGEgc2luZ2xlLXJpbmcgcG9seWdvbiB3aXRob3V0IGhvbGVzXG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICkge1xuXG5cdGNvbnN0IHF1ZXVlID0gW107XG5cdGxldCBpLCBsZW4sIHN0YXJ0LCBlbmQsIGxpc3Q7XG5cblx0Zm9yICggaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSArKyApIHtcblxuXHRcdHN0YXJ0ID0gaG9sZUluZGljZXNbIGkgXSAqIGRpbTtcblx0XHRlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzWyBpICsgMSBdICogZGltIDogZGF0YS5sZW5ndGg7XG5cdFx0bGlzdCA9IGxpbmtlZExpc3QoIGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSwgZmFsc2UgKTtcblx0XHRpZiAoIGxpc3QgPT09IGxpc3QubmV4dCApIGxpc3Quc3RlaW5lciA9IHRydWU7XG5cdFx0cXVldWUucHVzaCggZ2V0TGVmdG1vc3QoIGxpc3QgKSApO1xuXG5cdH1cblxuXHRxdWV1ZS5zb3J0KCBjb21wYXJlWCApO1xuXG5cdC8vIHByb2Nlc3MgaG9sZXMgZnJvbSBsZWZ0IHRvIHJpZ2h0XG5cdGZvciAoIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0b3V0ZXJOb2RlID0gZWxpbWluYXRlSG9sZSggcXVldWVbIGkgXSwgb3V0ZXJOb2RlICk7XG5cblx0fVxuXG5cdHJldHVybiBvdXRlck5vZGU7XG5cbn1cblxuZnVuY3Rpb24gY29tcGFyZVgoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGEueCAtIGIueDtcblxufVxuXG4vLyBmaW5kIGEgYnJpZGdlIGJldHdlZW4gdmVydGljZXMgdGhhdCBjb25uZWN0cyBob2xlIHdpdGggYW4gb3V0ZXIgcmluZyBhbmQgbGluayBpdFxuZnVuY3Rpb24gZWxpbWluYXRlSG9sZSggaG9sZSwgb3V0ZXJOb2RlICkge1xuXG5cdGNvbnN0IGJyaWRnZSA9IGZpbmRIb2xlQnJpZGdlKCBob2xlLCBvdXRlck5vZGUgKTtcblx0aWYgKCAhIGJyaWRnZSApIHtcblxuXHRcdHJldHVybiBvdXRlck5vZGU7XG5cblx0fVxuXG5cdGNvbnN0IGJyaWRnZVJldmVyc2UgPSBzcGxpdFBvbHlnb24oIGJyaWRnZSwgaG9sZSApO1xuXG5cdC8vIGZpbHRlciBjb2xsaW5lYXIgcG9pbnRzIGFyb3VuZCB0aGUgY3V0c1xuXHRmaWx0ZXJQb2ludHMoIGJyaWRnZVJldmVyc2UsIGJyaWRnZVJldmVyc2UubmV4dCApO1xuXHRyZXR1cm4gZmlsdGVyUG9pbnRzKCBicmlkZ2UsIGJyaWRnZS5uZXh0ICk7XG5cbn1cblxuLy8gRGF2aWQgRWJlcmx5J3MgYWxnb3JpdGhtIGZvciBmaW5kaW5nIGEgYnJpZGdlIGJldHdlZW4gaG9sZSBhbmQgb3V0ZXIgcG9seWdvblxuZnVuY3Rpb24gZmluZEhvbGVCcmlkZ2UoIGhvbGUsIG91dGVyTm9kZSApIHtcblxuXHRsZXQgcCA9IG91dGVyTm9kZSxcblx0XHRxeCA9IC0gSW5maW5pdHksXG5cdFx0bTtcblxuXHRjb25zdCBoeCA9IGhvbGUueCwgaHkgPSBob2xlLnk7XG5cblx0Ly8gZmluZCBhIHNlZ21lbnQgaW50ZXJzZWN0ZWQgYnkgYSByYXkgZnJvbSB0aGUgaG9sZSdzIGxlZnRtb3N0IHBvaW50IHRvIHRoZSBsZWZ0O1xuXHQvLyBzZWdtZW50J3MgZW5kcG9pbnQgd2l0aCBsZXNzZXIgeCB3aWxsIGJlIHBvdGVudGlhbCBjb25uZWN0aW9uIHBvaW50XG5cdGRvIHtcblxuXHRcdGlmICggaHkgPD0gcC55ICYmIGh5ID49IHAubmV4dC55ICYmIHAubmV4dC55ICE9PSBwLnkgKSB7XG5cblx0XHRcdGNvbnN0IHggPSBwLnggKyAoIGh5IC0gcC55ICkgKiAoIHAubmV4dC54IC0gcC54ICkgLyAoIHAubmV4dC55IC0gcC55ICk7XG5cdFx0XHRpZiAoIHggPD0gaHggJiYgeCA+IHF4ICkge1xuXG5cdFx0XHRcdHF4ID0geDtcblx0XHRcdFx0bSA9IHAueCA8IHAubmV4dC54ID8gcCA6IHAubmV4dDtcblx0XHRcdFx0aWYgKCB4ID09PSBoeCApIHJldHVybiBtOyAvLyBob2xlIHRvdWNoZXMgb3V0ZXIgc2VnbWVudDsgcGljayBsZWZ0bW9zdCBlbmRwb2ludFxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBvdXRlck5vZGUgKTtcblxuXHRpZiAoICEgbSApIHJldHVybiBudWxsO1xuXG5cdC8vIGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIG9mIGhvbGUgcG9pbnQsIHNlZ21lbnQgaW50ZXJzZWN0aW9uIGFuZCBlbmRwb2ludDtcblx0Ly8gaWYgdGhlcmUgYXJlIG5vIHBvaW50cyBmb3VuZCwgd2UgaGF2ZSBhIHZhbGlkIGNvbm5lY3Rpb247XG5cdC8vIG90aGVyd2lzZSBjaG9vc2UgdGhlIHBvaW50IG9mIHRoZSBtaW5pbXVtIGFuZ2xlIHdpdGggdGhlIHJheSBhcyBjb25uZWN0aW9uIHBvaW50XG5cblx0Y29uc3Qgc3RvcCA9IG0sXG5cdFx0bXggPSBtLngsXG5cdFx0bXkgPSBtLnk7XG5cdGxldCB0YW5NaW4gPSBJbmZpbml0eSwgdGFuO1xuXG5cdHAgPSBtO1xuXG5cdGRvIHtcblxuXHRcdGlmICggaHggPj0gcC54ICYmIHAueCA+PSBteCAmJiBoeCAhPT0gcC54ICYmXG5cdFx0XHRcdHBvaW50SW5UcmlhbmdsZSggaHkgPCBteSA/IGh4IDogcXgsIGh5LCBteCwgbXksIGh5IDwgbXkgPyBxeCA6IGh4LCBoeSwgcC54LCBwLnkgKSApIHtcblxuXHRcdFx0dGFuID0gTWF0aC5hYnMoIGh5IC0gcC55ICkgLyAoIGh4IC0gcC54ICk7IC8vIHRhbmdlbnRpYWxcblxuXHRcdFx0aWYgKCBsb2NhbGx5SW5zaWRlKCBwLCBob2xlICkgJiYgKCB0YW4gPCB0YW5NaW4gfHwgKCB0YW4gPT09IHRhbk1pbiAmJiAoIHAueCA+IG0ueCB8fCAoIHAueCA9PT0gbS54ICYmIHNlY3RvckNvbnRhaW5zU2VjdG9yKCBtLCBwICkgKSApICkgKSApIHtcblxuXHRcdFx0XHRtID0gcDtcblx0XHRcdFx0dGFuTWluID0gdGFuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdG9wICk7XG5cblx0cmV0dXJuIG07XG5cbn1cblxuLy8gd2hldGhlciBzZWN0b3IgaW4gdmVydGV4IG0gY29udGFpbnMgc2VjdG9yIGluIHZlcnRleCBwIGluIHRoZSBzYW1lIGNvb3JkaW5hdGVzXG5mdW5jdGlvbiBzZWN0b3JDb250YWluc1NlY3RvciggbSwgcCApIHtcblxuXHRyZXR1cm4gYXJlYSggbS5wcmV2LCBtLCBwLnByZXYgKSA8IDAgJiYgYXJlYSggcC5uZXh0LCBtLCBtLm5leHQgKSA8IDA7XG5cbn1cblxuLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuZnVuY3Rpb24gaW5kZXhDdXJ2ZSggc3RhcnQsIG1pblgsIG1pblksIGludlNpemUgKSB7XG5cblx0bGV0IHAgPSBzdGFydDtcblx0ZG8ge1xuXG5cdFx0aWYgKCBwLnogPT09IDAgKSBwLnogPSB6T3JkZXIoIHAueCwgcC55LCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cdFx0cC5wcmV2WiA9IHAucHJldjtcblx0XHRwLm5leHRaID0gcC5uZXh0O1xuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7XG5cblx0cC5wcmV2Wi5uZXh0WiA9IG51bGw7XG5cdHAucHJldlogPSBudWxsO1xuXG5cdHNvcnRMaW5rZWQoIHAgKTtcblxufVxuXG4vLyBTaW1vbiBUYXRoYW0ncyBsaW5rZWQgbGlzdCBtZXJnZSBzb3J0IGFsZ29yaXRobVxuLy8gaHR0cDovL3d3dy5jaGlhcmsuZ3JlZW5lbmQub3JnLnVrL35zZ3RhdGhhbS9hbGdvcml0aG1zL2xpc3Rzb3J0Lmh0bWxcbmZ1bmN0aW9uIHNvcnRMaW5rZWQoIGxpc3QgKSB7XG5cblx0bGV0IGksIHAsIHEsIGUsIHRhaWwsIG51bU1lcmdlcywgcFNpemUsIHFTaXplLFxuXHRcdGluU2l6ZSA9IDE7XG5cblx0ZG8ge1xuXG5cdFx0cCA9IGxpc3Q7XG5cdFx0bGlzdCA9IG51bGw7XG5cdFx0dGFpbCA9IG51bGw7XG5cdFx0bnVtTWVyZ2VzID0gMDtcblxuXHRcdHdoaWxlICggcCApIHtcblxuXHRcdFx0bnVtTWVyZ2VzICsrO1xuXHRcdFx0cSA9IHA7XG5cdFx0XHRwU2l6ZSA9IDA7XG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IGluU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRwU2l6ZSArKztcblx0XHRcdFx0cSA9IHEubmV4dFo7XG5cdFx0XHRcdGlmICggISBxICkgYnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0cVNpemUgPSBpblNpemU7XG5cblx0XHRcdHdoaWxlICggcFNpemUgPiAwIHx8ICggcVNpemUgPiAwICYmIHEgKSApIHtcblxuXHRcdFx0XHRpZiAoIHBTaXplICE9PSAwICYmICggcVNpemUgPT09IDAgfHwgISBxIHx8IHAueiA8PSBxLnogKSApIHtcblxuXHRcdFx0XHRcdGUgPSBwO1xuXHRcdFx0XHRcdHAgPSBwLm5leHRaO1xuXHRcdFx0XHRcdHBTaXplIC0tO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRlID0gcTtcblx0XHRcdFx0XHRxID0gcS5uZXh0Wjtcblx0XHRcdFx0XHRxU2l6ZSAtLTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB0YWlsICkgdGFpbC5uZXh0WiA9IGU7XG5cdFx0XHRcdGVsc2UgbGlzdCA9IGU7XG5cblx0XHRcdFx0ZS5wcmV2WiA9IHRhaWw7XG5cdFx0XHRcdHRhaWwgPSBlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHAgPSBxO1xuXG5cdFx0fVxuXG5cdFx0dGFpbC5uZXh0WiA9IG51bGw7XG5cdFx0aW5TaXplICo9IDI7XG5cblx0fSB3aGlsZSAoIG51bU1lcmdlcyA+IDEgKTtcblxuXHRyZXR1cm4gbGlzdDtcblxufVxuXG4vLyB6LW9yZGVyIG9mIGEgcG9pbnQgZ2l2ZW4gY29vcmRzIGFuZCBpbnZlcnNlIG9mIHRoZSBsb25nZXIgc2lkZSBvZiBkYXRhIGJib3hcbmZ1bmN0aW9uIHpPcmRlciggeCwgeSwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHQvLyBjb29yZHMgYXJlIHRyYW5zZm9ybWVkIGludG8gbm9uLW5lZ2F0aXZlIDE1LWJpdCBpbnRlZ2VyIHJhbmdlXG5cdHggPSAoIHggLSBtaW5YICkgKiBpbnZTaXplIHwgMDtcblx0eSA9ICggeSAtIG1pblkgKSAqIGludlNpemUgfCAwO1xuXG5cdHggPSAoIHggfCAoIHggPDwgOCApICkgJiAweDAwRkYwMEZGO1xuXHR4ID0gKCB4IHwgKCB4IDw8IDQgKSApICYgMHgwRjBGMEYwRjtcblx0eCA9ICggeCB8ICggeCA8PCAyICkgKSAmIDB4MzMzMzMzMzM7XG5cdHggPSAoIHggfCAoIHggPDwgMSApICkgJiAweDU1NTU1NTU1O1xuXG5cdHkgPSAoIHkgfCAoIHkgPDwgOCApICkgJiAweDAwRkYwMEZGO1xuXHR5ID0gKCB5IHwgKCB5IDw8IDQgKSApICYgMHgwRjBGMEYwRjtcblx0eSA9ICggeSB8ICggeSA8PCAyICkgKSAmIDB4MzMzMzMzMzM7XG5cdHkgPSAoIHkgfCAoIHkgPDwgMSApICkgJiAweDU1NTU1NTU1O1xuXG5cdHJldHVybiB4IHwgKCB5IDw8IDEgKTtcblxufVxuXG4vLyBmaW5kIHRoZSBsZWZ0bW9zdCBub2RlIG9mIGEgcG9seWdvbiByaW5nXG5mdW5jdGlvbiBnZXRMZWZ0bW9zdCggc3RhcnQgKSB7XG5cblx0bGV0IHAgPSBzdGFydCxcblx0XHRsZWZ0bW9zdCA9IHN0YXJ0O1xuXHRkbyB7XG5cblx0XHRpZiAoIHAueCA8IGxlZnRtb3N0LnggfHwgKCBwLnggPT09IGxlZnRtb3N0LnggJiYgcC55IDwgbGVmdG1vc3QueSApICkgbGVmdG1vc3QgPSBwO1xuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7XG5cblx0cmV0dXJuIGxlZnRtb3N0O1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgcG9pbnQgbGllcyB3aXRoaW4gYSBjb252ZXggdHJpYW5nbGVcbmZ1bmN0aW9uIHBvaW50SW5UcmlhbmdsZSggYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcHgsIHB5ICkge1xuXG5cdHJldHVybiAoIGN4IC0gcHggKSAqICggYXkgLSBweSApID49ICggYXggLSBweCApICogKCBjeSAtIHB5ICkgJiZcbiAgICAgICAgICAgKCBheCAtIHB4ICkgKiAoIGJ5IC0gcHkgKSA+PSAoIGJ4IC0gcHggKSAqICggYXkgLSBweSApICYmXG4gICAgICAgICAgICggYnggLSBweCApICogKCBjeSAtIHB5ICkgPj0gKCBjeCAtIHB4ICkgKiAoIGJ5IC0gcHkgKTtcblxufVxuXG4vLyBjaGVjayBpZiBhIGRpYWdvbmFsIGJldHdlZW4gdHdvIHBvbHlnb24gbm9kZXMgaXMgdmFsaWQgKGxpZXMgaW4gcG9seWdvbiBpbnRlcmlvcilcbmZ1bmN0aW9uIGlzVmFsaWREaWFnb25hbCggYSwgYiApIHtcblxuXHRyZXR1cm4gYS5uZXh0LmkgIT09IGIuaSAmJiBhLnByZXYuaSAhPT0gYi5pICYmICEgaW50ZXJzZWN0c1BvbHlnb24oIGEsIGIgKSAmJiAvLyBkb25lcyd0IGludGVyc2VjdCBvdGhlciBlZGdlc1xuICAgICAgICAgICAoIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSAmJiBsb2NhbGx5SW5zaWRlKCBiLCBhICkgJiYgbWlkZGxlSW5zaWRlKCBhLCBiICkgJiYgLy8gbG9jYWxseSB2aXNpYmxlXG4gICAgICAgICAgICAoIGFyZWEoIGEucHJldiwgYSwgYi5wcmV2ICkgfHwgYXJlYSggYSwgYi5wcmV2LCBiICkgKSB8fCAvLyBkb2VzIG5vdCBjcmVhdGUgb3Bwb3NpdGUtZmFjaW5nIHNlY3RvcnNcbiAgICAgICAgICAgIGVxdWFscyggYSwgYiApICYmIGFyZWEoIGEucHJldiwgYSwgYS5uZXh0ICkgPiAwICYmIGFyZWEoIGIucHJldiwgYiwgYi5uZXh0ICkgPiAwICk7IC8vIHNwZWNpYWwgemVyby1sZW5ndGggY2FzZVxuXG59XG5cbi8vIHNpZ25lZCBhcmVhIG9mIGEgdHJpYW5nbGVcbmZ1bmN0aW9uIGFyZWEoIHAsIHEsIHIgKSB7XG5cblx0cmV0dXJuICggcS55IC0gcC55ICkgKiAoIHIueCAtIHEueCApIC0gKCBxLnggLSBwLnggKSAqICggci55IC0gcS55ICk7XG5cbn1cblxuLy8gY2hlY2sgaWYgdHdvIHBvaW50cyBhcmUgZXF1YWxcbmZ1bmN0aW9uIGVxdWFscyggcDEsIHAyICkge1xuXG5cdHJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7XG5cbn1cblxuLy8gY2hlY2sgaWYgdHdvIHNlZ21lbnRzIGludGVyc2VjdFxuZnVuY3Rpb24gaW50ZXJzZWN0cyggcDEsIHExLCBwMiwgcTIgKSB7XG5cblx0Y29uc3QgbzEgPSBzaWduKCBhcmVhKCBwMSwgcTEsIHAyICkgKTtcblx0Y29uc3QgbzIgPSBzaWduKCBhcmVhKCBwMSwgcTEsIHEyICkgKTtcblx0Y29uc3QgbzMgPSBzaWduKCBhcmVhKCBwMiwgcTIsIHAxICkgKTtcblx0Y29uc3QgbzQgPSBzaWduKCBhcmVhKCBwMiwgcTIsIHExICkgKTtcblxuXHRpZiAoIG8xICE9PSBvMiAmJiBvMyAhPT0gbzQgKSByZXR1cm4gdHJ1ZTsgLy8gZ2VuZXJhbCBjYXNlXG5cblx0aWYgKCBvMSA9PT0gMCAmJiBvblNlZ21lbnQoIHAxLCBwMiwgcTEgKSApIHJldHVybiB0cnVlOyAvLyBwMSwgcTEgYW5kIHAyIGFyZSBjb2xsaW5lYXIgYW5kIHAyIGxpZXMgb24gcDFxMVxuXHRpZiAoIG8yID09PSAwICYmIG9uU2VnbWVudCggcDEsIHEyLCBxMSApICkgcmV0dXJuIHRydWU7IC8vIHAxLCBxMSBhbmQgcTIgYXJlIGNvbGxpbmVhciBhbmQgcTIgbGllcyBvbiBwMXExXG5cdGlmICggbzMgPT09IDAgJiYgb25TZWdtZW50KCBwMiwgcDEsIHEyICkgKSByZXR1cm4gdHJ1ZTsgLy8gcDIsIHEyIGFuZCBwMSBhcmUgY29sbGluZWFyIGFuZCBwMSBsaWVzIG9uIHAycTJcblx0aWYgKCBvNCA9PT0gMCAmJiBvblNlZ21lbnQoIHAyLCBxMSwgcTIgKSApIHJldHVybiB0cnVlOyAvLyBwMiwgcTIgYW5kIHExIGFyZSBjb2xsaW5lYXIgYW5kIHExIGxpZXMgb24gcDJxMlxuXG5cdHJldHVybiBmYWxzZTtcblxufVxuXG4vLyBmb3IgY29sbGluZWFyIHBvaW50cyBwLCBxLCByLCBjaGVjayBpZiBwb2ludCBxIGxpZXMgb24gc2VnbWVudCBwclxuZnVuY3Rpb24gb25TZWdtZW50KCBwLCBxLCByICkge1xuXG5cdHJldHVybiBxLnggPD0gTWF0aC5tYXgoIHAueCwgci54ICkgJiYgcS54ID49IE1hdGgubWluKCBwLngsIHIueCApICYmIHEueSA8PSBNYXRoLm1heCggcC55LCByLnkgKSAmJiBxLnkgPj0gTWF0aC5taW4oIHAueSwgci55ICk7XG5cbn1cblxuZnVuY3Rpb24gc2lnbiggbnVtICkge1xuXG5cdHJldHVybiBudW0gPiAwID8gMSA6IG51bSA8IDAgPyAtIDEgOiAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXG5mdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApIHtcblxuXHRsZXQgcCA9IGE7XG5cdGRvIHtcblxuXHRcdGlmICggcC5pICE9PSBhLmkgJiYgcC5uZXh0LmkgIT09IGEuaSAmJiBwLmkgIT09IGIuaSAmJiBwLm5leHQuaSAhPT0gYi5pICYmXG5cdFx0XHRpbnRlcnNlY3RzKCBwLCBwLm5leHQsIGEsIGIgKSApIHJldHVybiB0cnVlO1xuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IGEgKTtcblxuXHRyZXR1cm4gZmFsc2U7XG5cbn1cblxuLy8gY2hlY2sgaWYgYSBwb2x5Z29uIGRpYWdvbmFsIGlzIGxvY2FsbHkgaW5zaWRlIHRoZSBwb2x5Z29uXG5mdW5jdGlvbiBsb2NhbGx5SW5zaWRlKCBhLCBiICkge1xuXG5cdHJldHVybiBhcmVhKCBhLnByZXYsIGEsIGEubmV4dCApIDwgMCA/XG5cdFx0YXJlYSggYSwgYiwgYS5uZXh0ICkgPj0gMCAmJiBhcmVhKCBhLCBhLnByZXYsIGIgKSA+PSAwIDpcblx0XHRhcmVhKCBhLCBiLCBhLnByZXYgKSA8IDAgfHwgYXJlYSggYSwgYS5uZXh0LCBiICkgPCAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIHRoZSBtaWRkbGUgcG9pbnQgb2YgYSBwb2x5Z29uIGRpYWdvbmFsIGlzIGluc2lkZSB0aGUgcG9seWdvblxuZnVuY3Rpb24gbWlkZGxlSW5zaWRlKCBhLCBiICkge1xuXG5cdGxldCBwID0gYSxcblx0XHRpbnNpZGUgPSBmYWxzZTtcblx0Y29uc3QgcHggPSAoIGEueCArIGIueCApIC8gMixcblx0XHRweSA9ICggYS55ICsgYi55ICkgLyAyO1xuXHRkbyB7XG5cblx0XHRpZiAoICggKCBwLnkgPiBweSApICE9PSAoIHAubmV4dC55ID4gcHkgKSApICYmIHAubmV4dC55ICE9PSBwLnkgJiZcblx0XHRcdCggcHggPCAoIHAubmV4dC54IC0gcC54ICkgKiAoIHB5IC0gcC55ICkgLyAoIHAubmV4dC55IC0gcC55ICkgKyBwLnggKSApXG5cdFx0XHRpbnNpZGUgPSAhIGluc2lkZTtcblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBhICk7XG5cblx0cmV0dXJuIGluc2lkZTtcblxufVxuXG4vLyBsaW5rIHR3byBwb2x5Z29uIHZlcnRpY2VzIHdpdGggYSBicmlkZ2U7IGlmIHRoZSB2ZXJ0aWNlcyBiZWxvbmcgdG8gdGhlIHNhbWUgcmluZywgaXQgc3BsaXRzIHBvbHlnb24gaW50byB0d287XG4vLyBpZiBvbmUgYmVsb25ncyB0byB0aGUgb3V0ZXIgcmluZyBhbmQgYW5vdGhlciB0byBhIGhvbGUsIGl0IG1lcmdlcyBpdCBpbnRvIGEgc2luZ2xlIHJpbmdcbmZ1bmN0aW9uIHNwbGl0UG9seWdvbiggYSwgYiApIHtcblxuXHRjb25zdCBhMiA9IG5ldyBOb2RlKCBhLmksIGEueCwgYS55ICksXG5cdFx0YjIgPSBuZXcgTm9kZSggYi5pLCBiLngsIGIueSApLFxuXHRcdGFuID0gYS5uZXh0LFxuXHRcdGJwID0gYi5wcmV2O1xuXG5cdGEubmV4dCA9IGI7XG5cdGIucHJldiA9IGE7XG5cblx0YTIubmV4dCA9IGFuO1xuXHRhbi5wcmV2ID0gYTI7XG5cblx0YjIubmV4dCA9IGEyO1xuXHRhMi5wcmV2ID0gYjI7XG5cblx0YnAubmV4dCA9IGIyO1xuXHRiMi5wcmV2ID0gYnA7XG5cblx0cmV0dXJuIGIyO1xuXG59XG5cbi8vIGNyZWF0ZSBhIG5vZGUgYW5kIG9wdGlvbmFsbHkgbGluayBpdCB3aXRoIHByZXZpb3VzIG9uZSAoaW4gYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QpXG5mdW5jdGlvbiBpbnNlcnROb2RlKCBpLCB4LCB5LCBsYXN0ICkge1xuXG5cdGNvbnN0IHAgPSBuZXcgTm9kZSggaSwgeCwgeSApO1xuXG5cdGlmICggISBsYXN0ICkge1xuXG5cdFx0cC5wcmV2ID0gcDtcblx0XHRwLm5leHQgPSBwO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRwLm5leHQgPSBsYXN0Lm5leHQ7XG5cdFx0cC5wcmV2ID0gbGFzdDtcblx0XHRsYXN0Lm5leHQucHJldiA9IHA7XG5cdFx0bGFzdC5uZXh0ID0gcDtcblxuXHR9XG5cblx0cmV0dXJuIHA7XG5cbn1cblxuZnVuY3Rpb24gcmVtb3ZlTm9kZSggcCApIHtcblxuXHRwLm5leHQucHJldiA9IHAucHJldjtcblx0cC5wcmV2Lm5leHQgPSBwLm5leHQ7XG5cblx0aWYgKCBwLnByZXZaICkgcC5wcmV2Wi5uZXh0WiA9IHAubmV4dFo7XG5cdGlmICggcC5uZXh0WiApIHAubmV4dFoucHJldlogPSBwLnByZXZaO1xuXG59XG5cbmZ1bmN0aW9uIE5vZGUoIGksIHgsIHkgKSB7XG5cblx0Ly8gdmVydGV4IGluZGV4IGluIGNvb3JkaW5hdGVzIGFycmF5XG5cdHRoaXMuaSA9IGk7XG5cblx0Ly8gdmVydGV4IGNvb3JkaW5hdGVzXG5cdHRoaXMueCA9IHg7XG5cdHRoaXMueSA9IHk7XG5cblx0Ly8gcHJldmlvdXMgYW5kIG5leHQgdmVydGV4IG5vZGVzIGluIGEgcG9seWdvbiByaW5nXG5cdHRoaXMucHJldiA9IG51bGw7XG5cdHRoaXMubmV4dCA9IG51bGw7XG5cblx0Ly8gei1vcmRlciBjdXJ2ZSB2YWx1ZVxuXHR0aGlzLnogPSAwO1xuXG5cdC8vIHByZXZpb3VzIGFuZCBuZXh0IG5vZGVzIGluIHotb3JkZXJcblx0dGhpcy5wcmV2WiA9IG51bGw7XG5cdHRoaXMubmV4dFogPSBudWxsO1xuXG5cdC8vIGluZGljYXRlcyB3aGV0aGVyIHRoaXMgaXMgYSBzdGVpbmVyIHBvaW50XG5cdHRoaXMuc3RlaW5lciA9IGZhbHNlO1xuXG59XG5cbmZ1bmN0aW9uIHNpZ25lZEFyZWEoIGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSApIHtcblxuXHRsZXQgc3VtID0gMDtcblx0Zm9yICggbGV0IGkgPSBzdGFydCwgaiA9IGVuZCAtIGRpbTsgaSA8IGVuZDsgaSArPSBkaW0gKSB7XG5cblx0XHRzdW0gKz0gKCBkYXRhWyBqIF0gLSBkYXRhWyBpIF0gKSAqICggZGF0YVsgaSArIDEgXSArIGRhdGFbIGogKyAxIF0gKTtcblx0XHRqID0gaTtcblxuXHR9XG5cblx0cmV0dXJuIHN1bTtcblxufVxuXG5leHBvcnQgeyBFYXJjdXQgfTtcbiIsImltcG9ydCB7IEVhcmN1dCB9IGZyb20gJy4vRWFyY3V0LmpzJztcblxuY2xhc3MgU2hhcGVVdGlscyB7XG5cblx0Ly8gY2FsY3VsYXRlIGFyZWEgb2YgdGhlIGNvbnRvdXIgcG9seWdvblxuXG5cdHN0YXRpYyBhcmVhKCBjb250b3VyICkge1xuXG5cdFx0Y29uc3QgbiA9IGNvbnRvdXIubGVuZ3RoO1xuXHRcdGxldCBhID0gMC4wO1xuXG5cdFx0Zm9yICggbGV0IHAgPSBuIC0gMSwgcSA9IDA7IHEgPCBuOyBwID0gcSArKyApIHtcblxuXHRcdFx0YSArPSBjb250b3VyWyBwIF0ueCAqIGNvbnRvdXJbIHEgXS55IC0gY29udG91clsgcSBdLnggKiBjb250b3VyWyBwIF0ueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhICogMC41O1xuXG5cdH1cblxuXHRzdGF0aWMgaXNDbG9ja1dpc2UoIHB0cyApIHtcblxuXHRcdHJldHVybiBTaGFwZVV0aWxzLmFyZWEoIHB0cyApIDwgMDtcblxuXHR9XG5cblx0c3RhdGljIHRyaWFuZ3VsYXRlU2hhcGUoIGNvbnRvdXIsIGhvbGVzICkge1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTsgLy8gZmxhdCBhcnJheSBvZiB2ZXJ0aWNlcyBsaWtlIFsgeDAseTAsIHgxLHkxLCB4Mix5MiwgLi4uIF1cblx0XHRjb25zdCBob2xlSW5kaWNlcyA9IFtdOyAvLyBhcnJheSBvZiBob2xlIGluZGljZXNcblx0XHRjb25zdCBmYWNlcyA9IFtdOyAvLyBmaW5hbCBhcnJheSBvZiB2ZXJ0ZXggaW5kaWNlcyBsaWtlIFsgWyBhLGIsZCBdLCBbIGIsYyxkIF0gXVxuXG5cdFx0cmVtb3ZlRHVwRW5kUHRzKCBjb250b3VyICk7XG5cdFx0YWRkQ29udG91ciggdmVydGljZXMsIGNvbnRvdXIgKTtcblxuXHRcdC8vXG5cblx0XHRsZXQgaG9sZUluZGV4ID0gY29udG91ci5sZW5ndGg7XG5cblx0XHRob2xlcy5mb3JFYWNoKCByZW1vdmVEdXBFbmRQdHMgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGhvbGVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aG9sZUluZGljZXMucHVzaCggaG9sZUluZGV4ICk7XG5cdFx0XHRob2xlSW5kZXggKz0gaG9sZXNbIGkgXS5sZW5ndGg7XG5cdFx0XHRhZGRDb250b3VyKCB2ZXJ0aWNlcywgaG9sZXNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IHRyaWFuZ2xlcyA9IEVhcmN1dC50cmlhbmd1bGF0ZSggdmVydGljZXMsIGhvbGVJbmRpY2VzICk7XG5cblx0XHQvL1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdHJpYW5nbGVzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRmYWNlcy5wdXNoKCB0cmlhbmdsZXMuc2xpY2UoIGksIGkgKyAzICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWNlcztcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRHVwRW5kUHRzKCBwb2ludHMgKSB7XG5cblx0Y29uc3QgbCA9IHBvaW50cy5sZW5ndGg7XG5cblx0aWYgKCBsID4gMiAmJiBwb2ludHNbIGwgLSAxIF0uZXF1YWxzKCBwb2ludHNbIDAgXSApICkge1xuXG5cdFx0cG9pbnRzLnBvcCgpO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBhZGRDb250b3VyKCB2ZXJ0aWNlcywgY29udG91ciApIHtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb250b3VyLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdHZlcnRpY2VzLnB1c2goIGNvbnRvdXJbIGkgXS54ICk7XG5cdFx0dmVydGljZXMucHVzaCggY29udG91clsgaSBdLnkgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgU2hhcGVVdGlscyB9O1xuIiwiLyoqXG4gKiBDcmVhdGVzIGV4dHJ1ZGVkIGdlb21ldHJ5IGZyb20gYSBwYXRoIHNoYXBlLlxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKlxuICogIGN1cnZlU2VnbWVudHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgcG9pbnRzIG9uIHRoZSBjdXJ2ZXNcbiAqICBzdGVwczogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgZm9yIHotc2lkZSBleHRydXNpb25zIC8gdXNlZCBmb3Igc3ViZGl2aWRpbmcgc2VnbWVudHMgb2YgZXh0cnVkZSBzcGxpbmUgdG9vXG4gKiAgZGVwdGg6IDxmbG9hdD4sIC8vIERlcHRoIHRvIGV4dHJ1ZGUgdGhlIHNoYXBlXG4gKlxuICogIGJldmVsRW5hYmxlZDogPGJvb2w+LCAvLyB0dXJuIG9uIGJldmVsXG4gKiAgYmV2ZWxUaGlja25lc3M6IDxmbG9hdD4sIC8vIGhvdyBkZWVwIGludG8gdGhlIG9yaWdpbmFsIHNoYXBlIGJldmVsIGdvZXNcbiAqICBiZXZlbFNpemU6IDxmbG9hdD4sIC8vIGhvdyBmYXIgZnJvbSBzaGFwZSBvdXRsaW5lIChpbmNsdWRpbmcgYmV2ZWxPZmZzZXQpIGlzIGJldmVsXG4gKiAgYmV2ZWxPZmZzZXQ6IDxmbG9hdD4sIC8vIGhvdyBmYXIgZnJvbSBzaGFwZSBvdXRsaW5lIGRvZXMgYmV2ZWwgc3RhcnRcbiAqICBiZXZlbFNlZ21lbnRzOiA8aW50PiwgLy8gbnVtYmVyIG9mIGJldmVsIGxheWVyc1xuICpcbiAqICBleHRydWRlUGF0aDogPFRIUkVFLkN1cnZlPiAvLyBjdXJ2ZSB0byBleHRydWRlIHNoYXBlIGFsb25nXG4gKlxuICogIFVWR2VuZXJhdG9yOiA8T2JqZWN0PiAvLyBvYmplY3QgdGhhdCBwcm92aWRlcyBVViBnZW5lcmF0b3IgZnVuY3Rpb25zXG4gKlxuICogfVxuICovXG5cbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0ICogYXMgQ3VydmVzIGZyb20gJy4uL2V4dHJhcy9jdXJ2ZXMvQ3VydmVzLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uL2V4dHJhcy9jb3JlL1NoYXBlLmpzJztcbmltcG9ydCB7IFNoYXBlVXRpbHMgfSBmcm9tICcuLi9leHRyYXMvU2hhcGVVdGlscy5qcyc7XG5cbmNsYXNzIEV4dHJ1ZGVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3Rvciggc2hhcGVzID0gbmV3IFNoYXBlKCBbIG5ldyBWZWN0b3IyKCAwLjUsIDAuNSApLCBuZXcgVmVjdG9yMiggLSAwLjUsIDAuNSApLCBuZXcgVmVjdG9yMiggLSAwLjUsIC0gMC41ICksIG5ldyBWZWN0b3IyKCAwLjUsIC0gMC41ICkgXSApLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0V4dHJ1ZGVHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRcdG9wdGlvbnM6IG9wdGlvbnNcblx0XHR9O1xuXG5cdFx0c2hhcGVzID0gQXJyYXkuaXNBcnJheSggc2hhcGVzICkgPyBzaGFwZXMgOiBbIHNoYXBlcyBdO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgdmVydGljZXNBcnJheSA9IFtdO1xuXHRcdGNvbnN0IHV2QXJyYXkgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXHRcdFx0YWRkU2hhcGUoIHNoYXBlICk7XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlc0FycmF5LCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2QXJyYXksIDIgKSApO1xuXG5cdFx0dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuXG5cdFx0Ly8gZnVuY3Rpb25zXG5cblx0XHRmdW5jdGlvbiBhZGRTaGFwZSggc2hhcGUgKSB7XG5cblx0XHRcdGNvbnN0IHBsYWNlaG9sZGVyID0gW107XG5cblx0XHRcdC8vIG9wdGlvbnNcblxuXHRcdFx0Y29uc3QgY3VydmVTZWdtZW50cyA9IG9wdGlvbnMuY3VydmVTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jdXJ2ZVNlZ21lbnRzIDogMTI7XG5cdFx0XHRjb25zdCBzdGVwcyA9IG9wdGlvbnMuc3RlcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlcHMgOiAxO1xuXHRcdFx0Y29uc3QgZGVwdGggPSBvcHRpb25zLmRlcHRoICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRlcHRoIDogMTtcblxuXHRcdFx0bGV0IGJldmVsRW5hYmxlZCA9IG9wdGlvbnMuYmV2ZWxFbmFibGVkICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsRW5hYmxlZCA6IHRydWU7XG5cdFx0XHRsZXQgYmV2ZWxUaGlja25lc3MgPSBvcHRpb25zLmJldmVsVGhpY2tuZXNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsVGhpY2tuZXNzIDogMC4yO1xuXHRcdFx0bGV0IGJldmVsU2l6ZSA9IG9wdGlvbnMuYmV2ZWxTaXplICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsU2l6ZSA6IGJldmVsVGhpY2tuZXNzIC0gMC4xO1xuXHRcdFx0bGV0IGJldmVsT2Zmc2V0ID0gb3B0aW9ucy5iZXZlbE9mZnNldCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbE9mZnNldCA6IDA7XG5cdFx0XHRsZXQgYmV2ZWxTZWdtZW50cyA9IG9wdGlvbnMuYmV2ZWxTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFNlZ21lbnRzIDogMztcblxuXHRcdFx0Y29uc3QgZXh0cnVkZVBhdGggPSBvcHRpb25zLmV4dHJ1ZGVQYXRoO1xuXG5cdFx0XHRjb25zdCB1dmdlbiA9IG9wdGlvbnMuVVZHZW5lcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuVVZHZW5lcmF0b3IgOiBXb3JsZFVWR2VuZXJhdG9yO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRsZXQgZXh0cnVkZVB0cywgZXh0cnVkZUJ5UGF0aCA9IGZhbHNlO1xuXHRcdFx0bGV0IHNwbGluZVR1YmUsIGJpbm9ybWFsLCBub3JtYWwsIHBvc2l0aW9uMjtcblxuXHRcdFx0aWYgKCBleHRydWRlUGF0aCApIHtcblxuXHRcdFx0XHRleHRydWRlUHRzID0gZXh0cnVkZVBhdGguZ2V0U3BhY2VkUG9pbnRzKCBzdGVwcyApO1xuXG5cdFx0XHRcdGV4dHJ1ZGVCeVBhdGggPSB0cnVlO1xuXHRcdFx0XHRiZXZlbEVuYWJsZWQgPSBmYWxzZTsgLy8gYmV2ZWxzIG5vdCBzdXBwb3J0ZWQgZm9yIHBhdGggZXh0cnVzaW9uXG5cblx0XHRcdFx0Ly8gU0VUVVAgVE5CIHZhcmlhYmxlc1xuXG5cdFx0XHRcdC8vIFRPRE8xIC0gaGF2ZSBhIC5pc0Nsb3NlZCBpbiBzcGxpbmU/XG5cblx0XHRcdFx0c3BsaW5lVHViZSA9IGV4dHJ1ZGVQYXRoLmNvbXB1dGVGcmVuZXRGcmFtZXMoIHN0ZXBzLCBmYWxzZSApO1xuXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKHNwbGluZVR1YmUsICdzcGxpbmVUdWJlJywgc3BsaW5lVHViZS5ub3JtYWxzLmxlbmd0aCwgJ3N0ZXBzJywgc3RlcHMsICdleHRydWRlUHRzJywgZXh0cnVkZVB0cy5sZW5ndGgpO1xuXG5cdFx0XHRcdGJpbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdFx0bm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdFx0cG9zaXRpb24yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYWZlZ3VhcmRzIGlmIGJldmVscyBhcmUgbm90IGVuYWJsZWRcblxuXHRcdFx0aWYgKCAhIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0XHRiZXZlbFNlZ21lbnRzID0gMDtcblx0XHRcdFx0YmV2ZWxUaGlja25lc3MgPSAwO1xuXHRcdFx0XHRiZXZlbFNpemUgPSAwO1xuXHRcdFx0XHRiZXZlbE9mZnNldCA9IDA7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gVmFyaWFibGVzIGluaXRpYWxpemF0aW9uXG5cblx0XHRcdGNvbnN0IHNoYXBlUG9pbnRzID0gc2hhcGUuZXh0cmFjdFBvaW50cyggY3VydmVTZWdtZW50cyApO1xuXG5cdFx0XHRsZXQgdmVydGljZXMgPSBzaGFwZVBvaW50cy5zaGFwZTtcblx0XHRcdGNvbnN0IGhvbGVzID0gc2hhcGVQb2ludHMuaG9sZXM7XG5cblx0XHRcdGNvbnN0IHJldmVyc2UgPSAhIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIHZlcnRpY2VzICk7XG5cblx0XHRcdGlmICggcmV2ZXJzZSApIHtcblxuXHRcdFx0XHR2ZXJ0aWNlcyA9IHZlcnRpY2VzLnJldmVyc2UoKTtcblxuXHRcdFx0XHQvLyBNYXliZSB3ZSBzaG91bGQgYWxzbyBjaGVjayBpZiBob2xlcyBhcmUgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiwganVzdCB0byBiZSBzYWZlIC4uLlxuXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblxuXHRcdFx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggYWhvbGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aG9sZXNbIGggXSA9IGFob2xlLnJldmVyc2UoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXG5cdFx0XHRjb25zdCBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggdmVydGljZXMsIGhvbGVzICk7XG5cblx0XHRcdC8qIFZlcnRpY2VzICovXG5cblx0XHRcdGNvbnN0IGNvbnRvdXIgPSB2ZXJ0aWNlczsgLy8gdmVydGljZXMgaGFzIGFsbCBwb2ludHMgYnV0IGNvbnRvdXIgaGFzIG9ubHkgcG9pbnRzIG9mIGNpcmN1bWZlcmVuY2VcblxuXHRcdFx0Zm9yICggbGV0IGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblxuXHRcdFx0XHR2ZXJ0aWNlcyA9IHZlcnRpY2VzLmNvbmNhdCggYWhvbGUgKTtcblxuXHRcdFx0fVxuXG5cblx0XHRcdGZ1bmN0aW9uIHNjYWxlUHQyKCBwdCwgdmVjLCBzaXplICkge1xuXG5cdFx0XHRcdGlmICggISB2ZWMgKSBjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUdlb21ldHJ5OiB2ZWMgZG9lcyBub3QgZXhpc3QnICk7XG5cblx0XHRcdFx0cmV0dXJuIHB0LmNsb25lKCkuYWRkU2NhbGVkVmVjdG9yKCB2ZWMsIHNpemUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB2bGVuID0gdmVydGljZXMubGVuZ3RoLCBmbGVuID0gZmFjZXMubGVuZ3RoO1xuXG5cblx0XHRcdC8vIEZpbmQgZGlyZWN0aW9ucyBmb3IgcG9pbnQgbW92ZW1lbnRcblxuXG5cdFx0XHRmdW5jdGlvbiBnZXRCZXZlbFZlYyggaW5QdCwgaW5QcmV2LCBpbk5leHQgKSB7XG5cblx0XHRcdFx0Ly8gY29tcHV0ZXMgZm9yIGluUHQgdGhlIGNvcnJlc3BvbmRpbmcgcG9pbnQgaW5QdCcgb24gYSBuZXcgY29udG91clxuXHRcdFx0XHQvLyAgIHNoaWZ0ZWQgYnkgMSB1bml0IChsZW5ndGggb2Ygbm9ybWFsaXplZCB2ZWN0b3IpIHRvIHRoZSBsZWZ0XG5cdFx0XHRcdC8vIGlmIHdlIHdhbGsgYWxvbmcgY29udG91ciBjbG9ja3dpc2UsIHRoaXMgbmV3IGNvbnRvdXIgaXMgb3V0c2lkZSB0aGUgb2xkIG9uZVxuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyBpblB0JyBpcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gbGluZXMgcGFyYWxsZWwgdG8gdGhlIHR3b1xuXHRcdFx0XHQvLyAgYWRqYWNlbnQgZWRnZXMgb2YgaW5QdCBhdCBhIGRpc3RhbmNlIG9mIDEgdW5pdCBvbiB0aGUgbGVmdCBzaWRlLlxuXG5cdFx0XHRcdGxldCB2X3RyYW5zX3gsIHZfdHJhbnNfeSwgc2hyaW5rX2J5OyAvLyByZXN1bHRpbmcgdHJhbnNsYXRpb24gdmVjdG9yIGZvciBpblB0XG5cblx0XHRcdFx0Ly8gZ29vZCByZWFkaW5nIGZvciBnZW9tZXRyeSBhbGdvcml0aG1zIChoZXJlOiBsaW5lLWxpbmUgaW50ZXJzZWN0aW9uKVxuXHRcdFx0XHQvLyBodHRwOi8vZ2VvbWFsZ29yaXRobXMuY29tL2EwNS1faW50ZXJzZWN0LTEuaHRtbFxuXG5cdFx0XHRcdGNvbnN0IHZfcHJldl94ID0gaW5QdC54IC0gaW5QcmV2LngsXG5cdFx0XHRcdFx0dl9wcmV2X3kgPSBpblB0LnkgLSBpblByZXYueTtcblx0XHRcdFx0Y29uc3Qgdl9uZXh0X3ggPSBpbk5leHQueCAtIGluUHQueCxcblx0XHRcdFx0XHR2X25leHRfeSA9IGluTmV4dC55IC0gaW5QdC55O1xuXG5cdFx0XHRcdGNvbnN0IHZfcHJldl9sZW5zcSA9ICggdl9wcmV2X3ggKiB2X3ByZXZfeCArIHZfcHJldl95ICogdl9wcmV2X3kgKTtcblxuXHRcdFx0XHQvLyBjaGVjayBmb3IgY29sbGluZWFyIGVkZ2VzXG5cdFx0XHRcdGNvbnN0IGNvbGxpbmVhcjAgPSAoIHZfcHJldl94ICogdl9uZXh0X3kgLSB2X3ByZXZfeSAqIHZfbmV4dF94ICk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggY29sbGluZWFyMCApID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHQvLyBub3QgY29sbGluZWFyXG5cblx0XHRcdFx0XHQvLyBsZW5ndGggb2YgdmVjdG9ycyBmb3Igbm9ybWFsaXppbmdcblxuXHRcdFx0XHRcdGNvbnN0IHZfcHJldl9sZW4gPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSApO1xuXHRcdFx0XHRcdGNvbnN0IHZfbmV4dF9sZW4gPSBNYXRoLnNxcnQoIHZfbmV4dF94ICogdl9uZXh0X3ggKyB2X25leHRfeSAqIHZfbmV4dF95ICk7XG5cblx0XHRcdFx0XHQvLyBzaGlmdCBhZGphY2VudCBwb2ludHMgYnkgdW5pdCB2ZWN0b3JzIHRvIHRoZSBsZWZ0XG5cblx0XHRcdFx0XHRjb25zdCBwdFByZXZTaGlmdF94ID0gKCBpblByZXYueCAtIHZfcHJldl95IC8gdl9wcmV2X2xlbiApO1xuXHRcdFx0XHRcdGNvbnN0IHB0UHJldlNoaWZ0X3kgPSAoIGluUHJldi55ICsgdl9wcmV2X3ggLyB2X3ByZXZfbGVuICk7XG5cblx0XHRcdFx0XHRjb25zdCBwdE5leHRTaGlmdF94ID0gKCBpbk5leHQueCAtIHZfbmV4dF95IC8gdl9uZXh0X2xlbiApO1xuXHRcdFx0XHRcdGNvbnN0IHB0TmV4dFNoaWZ0X3kgPSAoIGluTmV4dC55ICsgdl9uZXh0X3ggLyB2X25leHRfbGVuICk7XG5cblx0XHRcdFx0XHQvLyBzY2FsaW5nIGZhY3RvciBmb3Igdl9wcmV2IHRvIGludGVyc2VjdGlvbiBwb2ludFxuXG5cdFx0XHRcdFx0Y29uc3Qgc2YgPSAoICggcHROZXh0U2hpZnRfeCAtIHB0UHJldlNoaWZ0X3ggKSAqIHZfbmV4dF95IC1cblx0XHRcdFx0XHRcdFx0KCBwdE5leHRTaGlmdF95IC0gcHRQcmV2U2hpZnRfeSApICogdl9uZXh0X3ggKSAvXG5cdFx0XHRcdFx0XHQoIHZfcHJldl94ICogdl9uZXh0X3kgLSB2X3ByZXZfeSAqIHZfbmV4dF94ICk7XG5cblx0XHRcdFx0XHQvLyB2ZWN0b3IgZnJvbSBpblB0IHRvIGludGVyc2VjdGlvbiBwb2ludFxuXG5cdFx0XHRcdFx0dl90cmFuc194ID0gKCBwdFByZXZTaGlmdF94ICsgdl9wcmV2X3ggKiBzZiAtIGluUHQueCApO1xuXHRcdFx0XHRcdHZfdHJhbnNfeSA9ICggcHRQcmV2U2hpZnRfeSArIHZfcHJldl95ICogc2YgLSBpblB0LnkgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IG5vcm1hbGl6ZSEsIG90aGVyd2lzZSBzaGFycCBjb3JuZXJzIGJlY29tZSB1Z2x5XG5cdFx0XHRcdFx0Ly8gIGJ1dCBwcmV2ZW50IGNyYXp5IHNwaWtlc1xuXHRcdFx0XHRcdGNvbnN0IHZfdHJhbnNfbGVuc3EgPSAoIHZfdHJhbnNfeCAqIHZfdHJhbnNfeCArIHZfdHJhbnNfeSAqIHZfdHJhbnNfeSApO1xuXHRcdFx0XHRcdGlmICggdl90cmFuc19sZW5zcSA8PSAyICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gbmV3IFZlY3RvcjIoIHZfdHJhbnNfeCwgdl90cmFuc195ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfdHJhbnNfbGVuc3EgLyAyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGhhbmRsZSBzcGVjaWFsIGNhc2Ugb2YgY29sbGluZWFyIGVkZ2VzXG5cblx0XHRcdFx0XHRsZXQgZGlyZWN0aW9uX2VxID0gZmFsc2U7IC8vIGFzc3VtZXM6IG9wcG9zaXRlXG5cblx0XHRcdFx0XHRpZiAoIHZfcHJldl94ID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdl9uZXh0X3ggPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHZfcHJldl94IDwgLSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHZfbmV4dF94IDwgLSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggTWF0aC5zaWduKCB2X3ByZXZfeSApID09PSBNYXRoLnNpZ24oIHZfbmV4dF95ICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBkaXJlY3Rpb25fZXEgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiV2FybmluZzogbGluZXMgYXJlIGEgc3RyYWlnaHQgc2VxdWVuY2VcIik7XG5cdFx0XHRcdFx0XHR2X3RyYW5zX3ggPSAtIHZfcHJldl95O1xuXHRcdFx0XHRcdFx0dl90cmFuc195ID0gdl9wcmV2X3g7XG5cdFx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJXYXJuaW5nOiBsaW5lcyBhcmUgYSBzdHJhaWdodCBzcGlrZVwiKTtcblx0XHRcdFx0XHRcdHZfdHJhbnNfeCA9IHZfcHJldl94O1xuXHRcdFx0XHRcdFx0dl90cmFuc195ID0gdl9wcmV2X3k7XG5cdFx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSAvIDIgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IyKCB2X3RyYW5zX3ggLyBzaHJpbmtfYnksIHZfdHJhbnNfeSAvIHNocmlua19ieSApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0Y29uc3QgY29udG91ck1vdmVtZW50cyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGgsIGogPSBpbCAtIDEsIGsgPSBpICsgMTsgaSA8IGlsOyBpICsrLCBqICsrLCBrICsrICkge1xuXG5cdFx0XHRcdGlmICggaiA9PT0gaWwgKSBqID0gMDtcblx0XHRcdFx0aWYgKCBrID09PSBpbCApIGsgPSAwO1xuXG5cdFx0XHRcdC8vICAoaiktLS0oaSktLS0oaylcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ2ksaixrJywgaSwgaiAsIGspXG5cblx0XHRcdFx0Y29udG91ck1vdmVtZW50c1sgaSBdID0gZ2V0QmV2ZWxWZWMoIGNvbnRvdXJbIGkgXSwgY29udG91clsgaiBdLCBjb250b3VyWyBrIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBob2xlc01vdmVtZW50cyA9IFtdO1xuXHRcdFx0bGV0IG9uZUhvbGVNb3ZlbWVudHMsIHZlcnRpY2VzTW92ZW1lbnRzID0gY29udG91ck1vdmVtZW50cy5jb25jYXQoKTtcblxuXHRcdFx0Zm9yICggbGV0IGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblxuXHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gW107XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aCwgaiA9IGlsIC0gMSwgayA9IGkgKyAxOyBpIDwgaWw7IGkgKyssIGogKyssIGsgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGogPT09IGlsICkgaiA9IDA7XG5cdFx0XHRcdFx0aWYgKCBrID09PSBpbCApIGsgPSAwO1xuXG5cdFx0XHRcdFx0Ly8gIChqKS0tLShpKS0tLShrKVxuXHRcdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHNbIGkgXSA9IGdldEJldmVsVmVjKCBhaG9sZVsgaSBdLCBhaG9sZVsgaiBdLCBhaG9sZVsgayBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGhvbGVzTW92ZW1lbnRzLnB1c2goIG9uZUhvbGVNb3ZlbWVudHMgKTtcblx0XHRcdFx0dmVydGljZXNNb3ZlbWVudHMgPSB2ZXJ0aWNlc01vdmVtZW50cy5jb25jYXQoIG9uZUhvbGVNb3ZlbWVudHMgKTtcblxuXHRcdFx0fVxuXG5cblx0XHRcdC8vIExvb3AgYmV2ZWxTZWdtZW50cywgMSBmb3IgdGhlIGZyb250LCAxIGZvciB0aGUgYmFja1xuXG5cdFx0XHRmb3IgKCBsZXQgYiA9IDA7IGIgPCBiZXZlbFNlZ21lbnRzOyBiICsrICkge1xuXG5cdFx0XHRcdC8vZm9yICggYiA9IGJldmVsU2VnbWVudHM7IGIgPiAwOyBiIC0tICkge1xuXG5cdFx0XHRcdGNvbnN0IHQgPSBiIC8gYmV2ZWxTZWdtZW50cztcblx0XHRcdFx0Y29uc3QgeiA9IGJldmVsVGhpY2tuZXNzICogTWF0aC5jb3MoIHQgKiBNYXRoLlBJIC8gMiApO1xuXHRcdFx0XHRjb25zdCBicyA9IGJldmVsU2l6ZSAqIE1hdGguc2luKCB0ICogTWF0aC5QSSAvIDIgKSArIGJldmVsT2Zmc2V0O1xuXG5cdFx0XHRcdC8vIGNvbnRyYWN0IHNoYXBlXG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2ZXJ0ID0gc2NhbGVQdDIoIGNvbnRvdXJbIGkgXSwgY29udG91ck1vdmVtZW50c1sgaSBdLCBicyApO1xuXG5cdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIC0geiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBleHBhbmQgaG9sZXNcblxuXHRcdFx0XHRmb3IgKCBsZXQgaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhaG9sZSA9IGhvbGVzWyBoIF07XG5cdFx0XHRcdFx0b25lSG9sZU1vdmVtZW50cyA9IGhvbGVzTW92ZW1lbnRzWyBoIF07XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHZlcnQgPSBzY2FsZVB0MiggYWhvbGVbIGkgXSwgb25lSG9sZU1vdmVtZW50c1sgaSBdLCBicyApO1xuXG5cdFx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgLSB6ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGJzID0gYmV2ZWxTaXplICsgYmV2ZWxPZmZzZXQ7XG5cblx0XHRcdC8vIEJhY2sgZmFjaW5nIHZlcnRpY2VzXG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdmVydCA9IGJldmVsRW5hYmxlZCA/IHNjYWxlUHQyKCB2ZXJ0aWNlc1sgaSBdLCB2ZXJ0aWNlc01vdmVtZW50c1sgaSBdLCBicyApIDogdmVydGljZXNbIGkgXTtcblxuXHRcdFx0XHRpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHtcblxuXHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCAwICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHYoIHZlcnQueCwgdmVydC55ICsgZXh0cnVkZVB0c1sgMCBdLnksIGV4dHJ1ZGVQdHNbIDAgXS54ICk7XG5cblx0XHRcdFx0XHRub3JtYWwuY29weSggc3BsaW5lVHViZS5ub3JtYWxzWyAwIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC54ICk7XG5cdFx0XHRcdFx0Ymlub3JtYWwuY29weSggc3BsaW5lVHViZS5iaW5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnkgKTtcblxuXHRcdFx0XHRcdHBvc2l0aW9uMi5jb3B5KCBleHRydWRlUHRzWyAwIF0gKS5hZGQoIG5vcm1hbCApLmFkZCggYmlub3JtYWwgKTtcblxuXHRcdFx0XHRcdHYoIHBvc2l0aW9uMi54LCBwb3NpdGlvbjIueSwgcG9zaXRpb24yLnogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHN0ZXBwZWQgdmVydGljZXMuLi5cblx0XHRcdC8vIEluY2x1ZGluZyBmcm9udCBmYWNpbmcgdmVydGljZXNcblxuXHRcdFx0Zm9yICggbGV0IHMgPSAxOyBzIDw9IHN0ZXBzOyBzICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2ZXJ0ID0gYmV2ZWxFbmFibGVkID8gc2NhbGVQdDIoIHZlcnRpY2VzWyBpIF0sIHZlcnRpY2VzTW92ZW1lbnRzWyBpIF0sIGJzICkgOiB2ZXJ0aWNlc1sgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XG5cblx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCBkZXB0aCAvIHN0ZXBzICogcyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gdiggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHMgLSAxIF0ueCApO1xuXG5cdFx0XHRcdFx0XHRub3JtYWwuY29weSggc3BsaW5lVHViZS5ub3JtYWxzWyBzIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC54ICk7XG5cdFx0XHRcdFx0XHRiaW5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLmJpbm9ybWFsc1sgcyBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueSApO1xuXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjIuY29weSggZXh0cnVkZVB0c1sgcyBdICkuYWRkKCBub3JtYWwgKS5hZGQoIGJpbm9ybWFsICk7XG5cblx0XHRcdFx0XHRcdHYoIHBvc2l0aW9uMi54LCBwb3NpdGlvbjIueSwgcG9zaXRpb24yLnogKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXG5cdFx0XHQvLyBBZGQgYmV2ZWwgc2VnbWVudHMgcGxhbmVzXG5cblx0XHRcdC8vZm9yICggYiA9IDE7IGIgPD0gYmV2ZWxTZWdtZW50czsgYiArKyApIHtcblx0XHRcdGZvciAoIGxldCBiID0gYmV2ZWxTZWdtZW50cyAtIDE7IGIgPj0gMDsgYiAtLSApIHtcblxuXHRcdFx0XHRjb25zdCB0ID0gYiAvIGJldmVsU2VnbWVudHM7XG5cdFx0XHRcdGNvbnN0IHogPSBiZXZlbFRoaWNrbmVzcyAqIE1hdGguY29zKCB0ICogTWF0aC5QSSAvIDIgKTtcblx0XHRcdFx0Y29uc3QgYnMgPSBiZXZlbFNpemUgKiBNYXRoLnNpbiggdCAqIE1hdGguUEkgLyAyICkgKyBiZXZlbE9mZnNldDtcblxuXHRcdFx0XHQvLyBjb250cmFjdCBzaGFwZVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmVydCA9IHNjYWxlUHQyKCBjb250b3VyWyBpIF0sIGNvbnRvdXJNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggKyB6ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGV4cGFuZCBob2xlc1xuXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblx0XHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gaG9sZXNNb3ZlbWVudHNbIGggXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhaG9sZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHRcdGlmICggISBleHRydWRlQnlQYXRoICkge1xuXG5cdFx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCBkZXB0aCArIHogKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIHN0ZXBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHN0ZXBzIC0gMSBdLnggKyB6ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0LyogRmFjZXMgKi9cblxuXHRcdFx0Ly8gVG9wIGFuZCBib3R0b20gZmFjZXNcblxuXHRcdFx0YnVpbGRMaWRGYWNlcygpO1xuXG5cdFx0XHQvLyBTaWRlcyBmYWNlc1xuXG5cdFx0XHRidWlsZFNpZGVGYWNlcygpO1xuXG5cblx0XHRcdC8vLy8vICBJbnRlcm5hbCBmdW5jdGlvbnNcblxuXHRcdFx0ZnVuY3Rpb24gYnVpbGRMaWRGYWNlcygpIHtcblxuXHRcdFx0XHRjb25zdCBzdGFydCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblxuXHRcdFx0XHRpZiAoIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0XHRcdGxldCBsYXllciA9IDA7IC8vIHN0ZXBzICsgMVxuXHRcdFx0XHRcdGxldCBvZmZzZXQgPSB2bGVuICogbGF5ZXI7XG5cblx0XHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDIgXSArIG9mZnNldCwgZmFjZVsgMSBdICsgb2Zmc2V0LCBmYWNlWyAwIF0gKyBvZmZzZXQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGxheWVyID0gc3RlcHMgKyBiZXZlbFNlZ21lbnRzICogMjtcblx0XHRcdFx0XHRvZmZzZXQgPSB2bGVuICogbGF5ZXI7XG5cblx0XHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDAgXSArIG9mZnNldCwgZmFjZVsgMSBdICsgb2Zmc2V0LCBmYWNlWyAyIF0gKyBvZmZzZXQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gQm90dG9tIGZhY2VzXG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBmbGVuOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRcdGYzKCBmYWNlWyAyIF0sIGZhY2VbIDEgXSwgZmFjZVsgMCBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDAgXSArIHZsZW4gKiBzdGVwcywgZmFjZVsgMSBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWyAyIF0gKyB2bGVuICogc3RlcHMgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUuYWRkR3JvdXAoIHN0YXJ0LCB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDMgLSBzdGFydCwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIENyZWF0ZSBmYWNlcyBmb3IgdGhlIHotc2lkZXMgb2YgdGhlIHNoYXBlXG5cblx0XHRcdGZ1bmN0aW9uIGJ1aWxkU2lkZUZhY2VzKCkge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXJ0ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xuXHRcdFx0XHRsZXQgbGF5ZXJvZmZzZXQgPSAwO1xuXHRcdFx0XHRzaWRld2FsbHMoIGNvbnRvdXIsIGxheWVyb2Zmc2V0ICk7XG5cdFx0XHRcdGxheWVyb2Zmc2V0ICs9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblx0XHRcdFx0XHRzaWRld2FsbHMoIGFob2xlLCBsYXllcm9mZnNldCApO1xuXG5cdFx0XHRcdFx0Ly8sIHRydWVcblx0XHRcdFx0XHRsYXllcm9mZnNldCArPSBhaG9sZS5sZW5ndGg7XG5cblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0c2NvcGUuYWRkR3JvdXAoIHN0YXJ0LCB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDMgLSBzdGFydCwgMSApO1xuXG5cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gc2lkZXdhbGxzKCBjb250b3VyLCBsYXllcm9mZnNldCApIHtcblxuXHRcdFx0XHRsZXQgaSA9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggLS0gaSA+PSAwICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgaiA9IGk7XG5cdFx0XHRcdFx0bGV0IGsgPSBpIC0gMTtcblx0XHRcdFx0XHRpZiAoIGsgPCAwICkgayA9IGNvbnRvdXIubGVuZ3RoIC0gMTtcblxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ2InLCBpLGosIGktMSwgayx2ZXJ0aWNlcy5sZW5ndGgpO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IHMgPSAwLCBzbCA9ICggc3RlcHMgKyBiZXZlbFNlZ21lbnRzICogMiApOyBzIDwgc2w7IHMgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHNsZW4xID0gdmxlbiAqIHM7XG5cdFx0XHRcdFx0XHRjb25zdCBzbGVuMiA9IHZsZW4gKiAoIHMgKyAxICk7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGEgPSBsYXllcm9mZnNldCArIGogKyBzbGVuMSxcblx0XHRcdFx0XHRcdFx0YiA9IGxheWVyb2Zmc2V0ICsgayArIHNsZW4xLFxuXHRcdFx0XHRcdFx0XHRjID0gbGF5ZXJvZmZzZXQgKyBrICsgc2xlbjIsXG5cdFx0XHRcdFx0XHRcdGQgPSBsYXllcm9mZnNldCArIGogKyBzbGVuMjtcblxuXHRcdFx0XHRcdFx0ZjQoIGEsIGIsIGMsIGQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gdiggeCwgeSwgeiApIHtcblxuXHRcdFx0XHRwbGFjZWhvbGRlci5wdXNoKCB4ICk7XG5cdFx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHkgKTtcblx0XHRcdFx0cGxhY2Vob2xkZXIucHVzaCggeiApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0ZnVuY3Rpb24gZjMoIGEsIGIsIGMgKSB7XG5cblx0XHRcdFx0YWRkVmVydGV4KCBhICk7XG5cdFx0XHRcdGFkZFZlcnRleCggYiApO1xuXHRcdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcblxuXHRcdFx0XHRjb25zdCBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cdFx0XHRcdGNvbnN0IHV2cyA9IHV2Z2VuLmdlbmVyYXRlVG9wVVYoIHNjb3BlLCB2ZXJ0aWNlc0FycmF5LCBuZXh0SW5kZXggLSAzLCBuZXh0SW5kZXggLSAyLCBuZXh0SW5kZXggLSAxICk7XG5cblx0XHRcdFx0YWRkVVYoIHV2c1sgMCBdICk7XG5cdFx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBmNCggYSwgYiwgYywgZCApIHtcblxuXHRcdFx0XHRhZGRWZXJ0ZXgoIGEgKTtcblx0XHRcdFx0YWRkVmVydGV4KCBiICk7XG5cdFx0XHRcdGFkZFZlcnRleCggZCApO1xuXG5cdFx0XHRcdGFkZFZlcnRleCggYiApO1xuXHRcdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcblx0XHRcdFx0YWRkVmVydGV4KCBkICk7XG5cblxuXHRcdFx0XHRjb25zdCBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cdFx0XHRcdGNvbnN0IHV2cyA9IHV2Z2VuLmdlbmVyYXRlU2lkZVdhbGxVViggc2NvcGUsIHZlcnRpY2VzQXJyYXksIG5leHRJbmRleCAtIDYsIG5leHRJbmRleCAtIDMsIG5leHRJbmRleCAtIDIsIG5leHRJbmRleCAtIDEgKTtcblxuXHRcdFx0XHRhZGRVViggdXZzWyAwIF0gKTtcblx0XHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRcdGFkZFVWKCB1dnNbIDMgXSApO1xuXG5cdFx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcblx0XHRcdFx0YWRkVVYoIHV2c1sgMyBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gYWRkVmVydGV4KCBpbmRleCApIHtcblxuXHRcdFx0XHR2ZXJ0aWNlc0FycmF5LnB1c2goIHBsYWNlaG9sZGVyWyBpbmRleCAqIDMgKyAwIF0gKTtcblx0XHRcdFx0dmVydGljZXNBcnJheS5wdXNoKCBwbGFjZWhvbGRlclsgaW5kZXggKiAzICsgMSBdICk7XG5cdFx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDIgXSApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0ZnVuY3Rpb24gYWRkVVYoIHZlY3RvcjIgKSB7XG5cblx0XHRcdFx0dXZBcnJheS5wdXNoKCB2ZWN0b3IyLnggKTtcblx0XHRcdFx0dXZBcnJheS5wdXNoKCB2ZWN0b3IyLnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cdFx0Y29uc3Qgb3B0aW9ucyA9IHRoaXMucGFyYW1ldGVycy5vcHRpb25zO1xuXG5cdFx0cmV0dXJuIHRvSlNPTiggc2hhcGVzLCBvcHRpb25zLCBkYXRhICk7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSwgc2hhcGVzICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlTaGFwZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0Y29uc3Qgc2hhcGUgPSBzaGFwZXNbIGRhdGEuc2hhcGVzWyBqIF0gXTtcblxuXHRcdFx0Z2VvbWV0cnlTaGFwZXMucHVzaCggc2hhcGUgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGV4dHJ1ZGVQYXRoID0gZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoO1xuXG5cdFx0aWYgKCBleHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhLm9wdGlvbnMuZXh0cnVkZVBhdGggPSBuZXcgQ3VydmVzWyBleHRydWRlUGF0aC50eXBlIF0oKS5mcm9tSlNPTiggZXh0cnVkZVBhdGggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgRXh0cnVkZUdlb21ldHJ5KCBnZW9tZXRyeVNoYXBlcywgZGF0YS5vcHRpb25zICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IFdvcmxkVVZHZW5lcmF0b3IgPSB7XG5cblx0Z2VuZXJhdGVUb3BVVjogZnVuY3Rpb24gKCBnZW9tZXRyeSwgdmVydGljZXMsIGluZGV4QSwgaW5kZXhCLCBpbmRleEMgKSB7XG5cblx0XHRjb25zdCBhX3ggPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyBdO1xuXHRcdGNvbnN0IGFfeSA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMSBdO1xuXHRcdGNvbnN0IGJfeCA9IHZlcnRpY2VzWyBpbmRleEIgKiAzIF07XG5cdFx0Y29uc3QgYl95ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAxIF07XG5cdFx0Y29uc3QgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTtcblx0XHRjb25zdCBjX3kgPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDEgXTtcblxuXHRcdHJldHVybiBbXG5cdFx0XHRuZXcgVmVjdG9yMiggYV94LCBhX3kgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBiX3gsIGJfeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGNfeCwgY195IClcblx0XHRdO1xuXG5cdH0sXG5cblx0Z2VuZXJhdGVTaWRlV2FsbFVWOiBmdW5jdGlvbiAoIGdlb21ldHJ5LCB2ZXJ0aWNlcywgaW5kZXhBLCBpbmRleEIsIGluZGV4QywgaW5kZXhEICkge1xuXG5cdFx0Y29uc3QgYV94ID0gdmVydGljZXNbIGluZGV4QSAqIDMgXTtcblx0XHRjb25zdCBhX3kgPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDEgXTtcblx0XHRjb25zdCBhX3ogPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDIgXTtcblx0XHRjb25zdCBiX3ggPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyBdO1xuXHRcdGNvbnN0IGJfeSA9IHZlcnRpY2VzWyBpbmRleEIgKiAzICsgMSBdO1xuXHRcdGNvbnN0IGJfeiA9IHZlcnRpY2VzWyBpbmRleEIgKiAzICsgMiBdO1xuXHRcdGNvbnN0IGNfeCA9IHZlcnRpY2VzWyBpbmRleEMgKiAzIF07XG5cdFx0Y29uc3QgY195ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAxIF07XG5cdFx0Y29uc3QgY196ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAyIF07XG5cdFx0Y29uc3QgZF94ID0gdmVydGljZXNbIGluZGV4RCAqIDMgXTtcblx0XHRjb25zdCBkX3kgPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyArIDEgXTtcblx0XHRjb25zdCBkX3ogPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyArIDIgXTtcblxuXHRcdGlmICggTWF0aC5hYnMoIGFfeSAtIGJfeSApIDwgTWF0aC5hYnMoIGFfeCAtIGJfeCApICkge1xuXG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRuZXcgVmVjdG9yMiggYV94LCAxIC0gYV96ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBiX3gsIDEgLSBiX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGNfeCwgMSAtIGNfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggZF94LCAxIC0gZF96IClcblx0XHRcdF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRuZXcgVmVjdG9yMiggYV95LCAxIC0gYV96ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBiX3ksIDEgLSBiX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGNfeSwgMSAtIGNfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggZF95LCAxIC0gZF96IClcblx0XHRcdF07XG5cblx0XHR9XG5cblx0fVxuXG59O1xuXG5mdW5jdGlvbiB0b0pTT04oIHNoYXBlcywgb3B0aW9ucywgZGF0YSApIHtcblxuXHRkYXRhLnNoYXBlcyA9IFtdO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3Qgc2hhcGUgPSBzaGFwZXNbIGkgXTtcblxuXHRcdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGUudXVpZCApO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZXMudXVpZCApO1xuXG5cdH1cblxuXHRkYXRhLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKCB7fSwgb3B0aW9ucyApO1xuXG5cdGlmICggb3B0aW9ucy5leHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkgZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoID0gb3B0aW9ucy5leHRydWRlUGF0aC50b0pTT04oKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufVxuXG5cbmV4cG9ydCB7IEV4dHJ1ZGVHZW9tZXRyeSB9O1xuIiwiaW1wb3J0IHsgUG9seWhlZHJvbkdlb21ldHJ5IH0gZnJvbSAnLi9Qb2x5aGVkcm9uR2VvbWV0cnkuanMnO1xuXG5jbGFzcyBJY29zYWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgUG9seWhlZHJvbkdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgZGV0YWlsID0gMCApIHtcblxuXHRcdGNvbnN0IHQgPSAoIDEgKyBNYXRoLnNxcnQoIDUgKSApIC8gMjtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW1xuXHRcdFx0LSAxLCB0LCAwLCBcdDEsIHQsIDAsIFx0LSAxLCAtIHQsIDAsIFx0MSwgLSB0LCAwLFxuXHRcdFx0MCwgLSAxLCB0LCBcdDAsIDEsIHQsXHQwLCAtIDEsIC0gdCwgXHQwLCAxLCAtIHQsXG5cdFx0XHR0LCAwLCAtIDEsIFx0dCwgMCwgMSwgXHQtIHQsIDAsIC0gMSwgXHQtIHQsIDAsIDFcblx0XHRdO1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtcblx0XHRcdDAsIDExLCA1LCBcdDAsIDUsIDEsIFx0MCwgMSwgNywgXHQwLCA3LCAxMCwgXHQwLCAxMCwgMTEsXG5cdFx0XHQxLCA1LCA5LCBcdDUsIDExLCA0LFx0MTEsIDEwLCAyLFx0MTAsIDcsIDYsXHQ3LCAxLCA4LFxuXHRcdFx0MywgOSwgNCwgXHQzLCA0LCAyLFx0MywgMiwgNixcdDMsIDYsIDgsXHQzLCA4LCA5LFxuXHRcdFx0NCwgOSwgNSwgXHQyLCA0LCAxMSxcdDYsIDIsIDEwLFx0OCwgNiwgNyxcdDksIDgsIDFcblx0XHRdO1xuXG5cdFx0c3VwZXIoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0ljb3NhaGVkcm9uR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxuXHRcdH07XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgSWNvc2FoZWRyb25HZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEuZGV0YWlsICk7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgSWNvc2FoZWRyb25HZW9tZXRyeSB9O1xuIiwiaW1wb3J0IHsgUG9seWhlZHJvbkdlb21ldHJ5IH0gZnJvbSAnLi9Qb2x5aGVkcm9uR2VvbWV0cnkuanMnO1xuXG5jbGFzcyBPY3RhaGVkcm9uR2VvbWV0cnkgZXh0ZW5kcyBQb2x5aGVkcm9uR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBkZXRhaWwgPSAwICkge1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXG5cdFx0XHQxLCAwLCAwLCBcdC0gMSwgMCwgMCxcdDAsIDEsIDAsXG5cdFx0XHQwLCAtIDEsIDAsIFx0MCwgMCwgMSxcdDAsIDAsIC0gMVxuXHRcdF07XG5cblx0XHRjb25zdCBpbmRpY2VzID0gW1xuXHRcdFx0MCwgMiwgNCxcdDAsIDQsIDMsXHQwLCAzLCA1LFxuXHRcdFx0MCwgNSwgMixcdDEsIDIsIDUsXHQxLCA1LCAzLFxuXHRcdFx0MSwgMywgNCxcdDEsIDQsIDJcblx0XHRdO1xuXG5cdFx0c3VwZXIoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ09jdGFoZWRyb25HZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdGRldGFpbDogZGV0YWlsXG5cdFx0fTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBPY3RhaGVkcm9uR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbCApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBPY3RhaGVkcm9uR2VvbWV0cnkgfTtcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcblxuY2xhc3MgUmluZ0dlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCBpbm5lclJhZGl1cyA9IDAuNSwgb3V0ZXJSYWRpdXMgPSAxLCB0aGV0YVNlZ21lbnRzID0gMzIsIHBoaVNlZ21lbnRzID0gMSwgdGhldGFTdGFydCA9IDAsIHRoZXRhTGVuZ3RoID0gTWF0aC5QSSAqIDIgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1JpbmdHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRpbm5lclJhZGl1czogaW5uZXJSYWRpdXMsXG5cdFx0XHRvdXRlclJhZGl1czogb3V0ZXJSYWRpdXMsXG5cdFx0XHR0aGV0YVNlZ21lbnRzOiB0aGV0YVNlZ21lbnRzLFxuXHRcdFx0cGhpU2VnbWVudHM6IHBoaVNlZ21lbnRzLFxuXHRcdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHRcdH07XG5cblx0XHR0aGV0YVNlZ21lbnRzID0gTWF0aC5tYXgoIDMsIHRoZXRhU2VnbWVudHMgKTtcblx0XHRwaGlTZWdtZW50cyA9IE1hdGgubWF4KCAxLCBwaGlTZWdtZW50cyApO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IHV2cyA9IFtdO1xuXG5cdFx0Ly8gc29tZSBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRsZXQgcmFkaXVzID0gaW5uZXJSYWRpdXM7XG5cdFx0Y29uc3QgcmFkaXVzU3RlcCA9ICggKCBvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzICkgLyBwaGlTZWdtZW50cyApO1xuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgdXYgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9IHBoaVNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gdGhldGFTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHQvLyB2YWx1ZXMgYXJlIGdlbmVyYXRlIGZyb20gdGhlIGluc2lkZSBvZiB0aGUgcmluZyB0byB0aGUgb3V0c2lkZVxuXG5cdFx0XHRcdGNvbnN0IHNlZ21lbnQgPSB0aGV0YVN0YXJ0ICsgaSAvIHRoZXRhU2VnbWVudHMgKiB0aGV0YUxlbmd0aDtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIE1hdGguY29zKCBzZWdtZW50ICk7XG5cdFx0XHRcdHZlcnRleC55ID0gcmFkaXVzICogTWF0aC5zaW4oIHNlZ21lbnQgKTtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1di54ID0gKCB2ZXJ0ZXgueCAvIG91dGVyUmFkaXVzICsgMSApIC8gMjtcblx0XHRcdFx0dXYueSA9ICggdmVydGV4LnkgLyBvdXRlclJhZGl1cyArIDEgKSAvIDI7XG5cblx0XHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBpbmNyZWFzZSB0aGUgcmFkaXVzIGZvciBuZXh0IHJvdyBvZiB2ZXJ0aWNlc1xuXG5cdFx0XHRyYWRpdXMgKz0gcmFkaXVzU3RlcDtcblxuXHRcdH1cblxuXHRcdC8vIGluZGljZXNcblxuXHRcdGZvciAoIGxldCBqID0gMDsgaiA8IHBoaVNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRjb25zdCB0aGV0YVNlZ21lbnRMZXZlbCA9IGogKiAoIHRoZXRhU2VnbWVudHMgKyAxICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoZXRhU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2VnbWVudCA9IGkgKyB0aGV0YVNlZ21lbnRMZXZlbDtcblxuXHRcdFx0XHRjb25zdCBhID0gc2VnbWVudDtcblx0XHRcdFx0Y29uc3QgYiA9IHNlZ21lbnQgKyB0aGV0YVNlZ21lbnRzICsgMTtcblx0XHRcdFx0Y29uc3QgYyA9IHNlZ21lbnQgKyB0aGV0YVNlZ21lbnRzICsgMjtcblx0XHRcdFx0Y29uc3QgZCA9IHNlZ21lbnQgKyAxO1xuXG5cdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFJpbmdHZW9tZXRyeSggZGF0YS5pbm5lclJhZGl1cywgZGF0YS5vdXRlclJhZGl1cywgZGF0YS50aGV0YVNlZ21lbnRzLCBkYXRhLnBoaVNlZ21lbnRzLCBkYXRhLnRoZXRhU3RhcnQsIGRhdGEudGhldGFMZW5ndGggKTtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBSaW5nR2VvbWV0cnkgfTtcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi9leHRyYXMvY29yZS9TaGFwZS5qcyc7XG5pbXBvcnQgeyBTaGFwZVV0aWxzIH0gZnJvbSAnLi4vZXh0cmFzL1NoYXBlVXRpbHMuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XG5cbmNsYXNzIFNoYXBlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHNoYXBlcyA9IG5ldyBTaGFwZSggWyBuZXcgVmVjdG9yMiggMCwgMC41ICksIG5ldyBWZWN0b3IyKCAtIDAuNSwgLSAwLjUgKSwgbmV3IFZlY3RvcjIoIDAuNSwgLSAwLjUgKSBdICksIGN1cnZlU2VnbWVudHMgPSAxMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU2hhcGVHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRcdGN1cnZlU2VnbWVudHM6IGN1cnZlU2VnbWVudHNcblx0XHR9O1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IHV2cyA9IFtdO1xuXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0bGV0IGdyb3VwU3RhcnQgPSAwO1xuXHRcdGxldCBncm91cENvdW50ID0gMDtcblxuXHRcdC8vIGFsbG93IHNpbmdsZSBhbmQgYXJyYXkgdmFsdWVzIGZvciBcInNoYXBlc1wiIHBhcmFtZXRlclxuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGFkZFNoYXBlKCBzaGFwZXMgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNoYXBlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0YWRkU2hhcGUoIHNoYXBlc1sgaSBdICk7XG5cblx0XHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgaSApOyAvLyBlbmFibGVzIE11bHRpTWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRcdGdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDtcblx0XHRcdFx0Z3JvdXBDb3VudCA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cblx0XHQvLyBoZWxwZXIgZnVuY3Rpb25zXG5cblx0XHRmdW5jdGlvbiBhZGRTaGFwZSggc2hhcGUgKSB7XG5cblx0XHRcdGNvbnN0IGluZGV4T2Zmc2V0ID0gdmVydGljZXMubGVuZ3RoIC8gMztcblx0XHRcdGNvbnN0IHBvaW50cyA9IHNoYXBlLmV4dHJhY3RQb2ludHMoIGN1cnZlU2VnbWVudHMgKTtcblxuXHRcdFx0bGV0IHNoYXBlVmVydGljZXMgPSBwb2ludHMuc2hhcGU7XG5cdFx0XHRjb25zdCBzaGFwZUhvbGVzID0gcG9pbnRzLmhvbGVzO1xuXG5cdFx0XHQvLyBjaGVjayBkaXJlY3Rpb24gb2YgdmVydGljZXNcblxuXHRcdFx0aWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBzaGFwZVZlcnRpY2VzICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdHNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLnJldmVyc2UoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZUhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2hhcGVIb2xlID0gc2hhcGVIb2xlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggc2hhcGVIb2xlICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRzaGFwZUhvbGVzWyBpIF0gPSBzaGFwZUhvbGUucmV2ZXJzZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggc2hhcGVWZXJ0aWNlcywgc2hhcGVIb2xlcyApO1xuXG5cdFx0XHQvLyBqb2luIHZlcnRpY2VzIG9mIGlubmVyIGFuZCBvdXRlciBwYXRocyB0byBhIHNpbmdsZSBhcnJheVxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZUhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2hhcGVIb2xlID0gc2hhcGVIb2xlc1sgaSBdO1xuXHRcdFx0XHRzaGFwZVZlcnRpY2VzID0gc2hhcGVWZXJ0aWNlcy5jb25jYXQoIHNoYXBlSG9sZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHZlcnRpY2VzLCBub3JtYWxzLCB1dnNcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc2hhcGVWZXJ0aWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHZlcnRleCA9IHNoYXBlVmVydGljZXNbIGkgXTtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIDAgKTtcblx0XHRcdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cdFx0XHRcdHV2cy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnkgKTsgLy8gd29ybGQgdXZzXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaW5kaWNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0XHRcdGNvbnN0IGEgPSBmYWNlWyAwIF0gKyBpbmRleE9mZnNldDtcblx0XHRcdFx0Y29uc3QgYiA9IGZhY2VbIDEgXSArIGluZGV4T2Zmc2V0O1xuXHRcdFx0XHRjb25zdCBjID0gZmFjZVsgMiBdICsgaW5kZXhPZmZzZXQ7XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBjICk7XG5cdFx0XHRcdGdyb3VwQ291bnQgKz0gMztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cblx0XHRyZXR1cm4gdG9KU09OKCBzaGFwZXMsIGRhdGEgKTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhLCBzaGFwZXMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeVNoYXBlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IGRhdGEuc2hhcGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgZGF0YS5zaGFwZXNbIGogXSBdO1xuXG5cdFx0XHRnZW9tZXRyeVNoYXBlcy5wdXNoKCBzaGFwZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBTaGFwZUdlb21ldHJ5KCBnZW9tZXRyeVNoYXBlcywgZGF0YS5jdXJ2ZVNlZ21lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHRvSlNPTiggc2hhcGVzLCBkYXRhICkge1xuXG5cdGRhdGEuc2hhcGVzID0gW107XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXG5cdFx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZS51dWlkICk7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlcy51dWlkICk7XG5cblx0fVxuXG5cdHJldHVybiBkYXRhO1xuXG59XG5cbmV4cG9ydCB7IFNoYXBlR2VvbWV0cnkgfTtcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5cbmNsYXNzIFNwaGVyZUdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCB3aWR0aFNlZ21lbnRzID0gMzIsIGhlaWdodFNlZ21lbnRzID0gMTYsIHBoaVN0YXJ0ID0gMCwgcGhpTGVuZ3RoID0gTWF0aC5QSSAqIDIsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1NwaGVyZUdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoLFxuXHRcdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHRcdH07XG5cblx0XHR3aWR0aFNlZ21lbnRzID0gTWF0aC5tYXgoIDMsIE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKSApO1xuXHRcdGhlaWdodFNlZ21lbnRzID0gTWF0aC5tYXgoIDIsIE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICkgKTtcblxuXHRcdGNvbnN0IHRoZXRhRW5kID0gTWF0aC5taW4oIHRoZXRhU3RhcnQgKyB0aGV0YUxlbmd0aCwgTWF0aC5QSSApO1xuXG5cdFx0bGV0IGluZGV4ID0gMDtcblx0XHRjb25zdCBncmlkID0gW107XG5cblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCBsZXQgaXkgPSAwOyBpeSA8PSBoZWlnaHRTZWdtZW50czsgaXkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHZlcnRpY2VzUm93ID0gW107XG5cblx0XHRcdGNvbnN0IHYgPSBpeSAvIGhlaWdodFNlZ21lbnRzO1xuXG5cdFx0XHQvLyBzcGVjaWFsIGNhc2UgZm9yIHRoZSBwb2xlc1xuXG5cdFx0XHRsZXQgdU9mZnNldCA9IDA7XG5cblx0XHRcdGlmICggaXkgPT09IDAgJiYgdGhldGFTdGFydCA9PT0gMCApIHtcblxuXHRcdFx0XHR1T2Zmc2V0ID0gMC41IC8gd2lkdGhTZWdtZW50cztcblxuXHRcdFx0fSBlbHNlIGlmICggaXkgPT09IGhlaWdodFNlZ21lbnRzICYmIHRoZXRhRW5kID09PSBNYXRoLlBJICkge1xuXG5cdFx0XHRcdHVPZmZzZXQgPSAtIDAuNSAvIHdpZHRoU2VnbWVudHM7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPD0gd2lkdGhTZWdtZW50czsgaXggKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdSA9IGl4IC8gd2lkdGhTZWdtZW50cztcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IC0gcmFkaXVzICogTWF0aC5jb3MoIHBoaVN0YXJ0ICsgdSAqIHBoaUxlbmd0aCApICogTWF0aC5zaW4oIHRoZXRhU3RhcnQgKyB2ICogdGhldGFMZW5ndGggKTtcblx0XHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLmNvcyggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApO1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IHJhZGl1cyAqIE1hdGguc2luKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdG5vcm1hbC5jb3B5KCB2ZXJ0ZXggKS5ub3JtYWxpemUoKTtcblx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1dnMucHVzaCggdSArIHVPZmZzZXQsIDEgLSB2ICk7XG5cblx0XHRcdFx0dmVydGljZXNSb3cucHVzaCggaW5kZXggKysgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRncmlkLnB1c2goIHZlcnRpY2VzUm93ICk7XG5cblx0XHR9XG5cblx0XHQvLyBpbmRpY2VzXG5cblx0XHRmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPCB3aWR0aFNlZ21lbnRzOyBpeCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gZ3JpZFsgaXkgXVsgaXggKyAxIF07XG5cdFx0XHRcdGNvbnN0IGIgPSBncmlkWyBpeSBdWyBpeCBdO1xuXHRcdFx0XHRjb25zdCBjID0gZ3JpZFsgaXkgKyAxIF1bIGl4IF07XG5cdFx0XHRcdGNvbnN0IGQgPSBncmlkWyBpeSArIDEgXVsgaXggKyAxIF07XG5cblx0XHRcdFx0aWYgKCBpeSAhPT0gMCB8fCB0aGV0YVN0YXJ0ID4gMCApIGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpZiAoIGl5ICE9PSBoZWlnaHRTZWdtZW50cyAtIDEgfHwgdGhldGFFbmQgPCBNYXRoLlBJICkgaW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgU3BoZXJlR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLndpZHRoU2VnbWVudHMsIGRhdGEuaGVpZ2h0U2VnbWVudHMsIGRhdGEucGhpU3RhcnQsIGRhdGEucGhpTGVuZ3RoLCBkYXRhLnRoZXRhU3RhcnQsIGRhdGEudGhldGFMZW5ndGggKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgU3BoZXJlR2VvbWV0cnkgfTtcbiIsImltcG9ydCB7IFBvbHloZWRyb25HZW9tZXRyeSB9IGZyb20gJy4vUG9seWhlZHJvbkdlb21ldHJ5LmpzJztcblxuY2xhc3MgVGV0cmFoZWRyb25HZW9tZXRyeSBleHRlbmRzIFBvbHloZWRyb25HZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIGRldGFpbCA9IDAgKSB7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtcblx0XHRcdDEsIDEsIDEsIFx0LSAxLCAtIDEsIDEsIFx0LSAxLCAxLCAtIDEsIFx0MSwgLSAxLCAtIDFcblx0XHRdO1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtcblx0XHRcdDIsIDEsIDAsIFx0MCwgMywgMixcdDEsIDMsIDAsXHQyLCAzLCAxXG5cdFx0XTtcblxuXHRcdHN1cGVyKCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdUZXRyYWhlZHJvbkdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0ZGV0YWlsOiBkZXRhaWxcblx0XHR9O1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFRldHJhaGVkcm9uR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbCApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBUZXRyYWhlZHJvbkdlb21ldHJ5IH07XG4iLCJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuXG5jbGFzcyBUb3J1c0dlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCB0dWJlID0gMC40LCByYWRpYWxTZWdtZW50cyA9IDEyLCB0dWJ1bGFyU2VnbWVudHMgPSA0OCwgYXJjID0gTWF0aC5QSSAqIDIgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1RvcnVzR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHR0dWJlOiB0dWJlLFxuXHRcdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0XHRhcmM6IGFyY1xuXHRcdH07XG5cblx0XHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICk7XG5cdFx0dHVidWxhclNlZ21lbnRzID0gTWF0aC5mbG9vciggdHVidWxhclNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCBjZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIGFyYztcblx0XHRcdFx0Y29uc3QgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXG5cdFx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRcdHZlcnRleC54ID0gKCByYWRpdXMgKyB0dWJlICogTWF0aC5jb3MoIHYgKSApICogTWF0aC5jb3MoIHUgKTtcblx0XHRcdFx0dmVydGV4LnkgPSAoIHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyggdiApICkgKiBNYXRoLnNpbiggdSApO1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IHR1YmUgKiBNYXRoLnNpbiggdiApO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRjZW50ZXIueCA9IHJhZGl1cyAqIE1hdGguY29zKCB1ICk7XG5cdFx0XHRcdGNlbnRlci55ID0gcmFkaXVzICogTWF0aC5zaW4oIHUgKTtcblx0XHRcdFx0bm9ybWFsLnN1YlZlY3RvcnMoIHZlcnRleCwgY2VudGVyICkubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1dnMucHVzaCggaSAvIHR1YnVsYXJTZWdtZW50cyApO1xuXHRcdFx0XHR1dnMucHVzaCggaiAvIHJhZGlhbFNlZ21lbnRzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdGZvciAoIGxldCBqID0gMTsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHQvLyBpbmRpY2VzXG5cblx0XHRcdFx0Y29uc3QgYSA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogaiArIGkgLSAxO1xuXHRcdFx0XHRjb25zdCBiID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpIC0gMTtcblx0XHRcdFx0Y29uc3QgYyA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblx0XHRcdFx0Y29uc3QgZCA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogaiArIGk7XG5cblx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgVG9ydXNHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEudHViZSwgZGF0YS5yYWRpYWxTZWdtZW50cywgZGF0YS50dWJ1bGFyU2VnbWVudHMsIGRhdGEuYXJjICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFRvcnVzR2VvbWV0cnkgfTtcbiIsImltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5cbmNsYXNzIFRvcnVzS25vdEdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCB0dWJlID0gMC40LCB0dWJ1bGFyU2VnbWVudHMgPSA2NCwgcmFkaWFsU2VnbWVudHMgPSA4LCBwID0gMiwgcSA9IDMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1RvcnVzS25vdEdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0dHViZTogdHViZSxcblx0XHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0cDogcCxcblx0XHRcdHE6IHFcblx0XHR9O1xuXG5cdFx0dHVidWxhclNlZ21lbnRzID0gTWF0aC5mbG9vciggdHVidWxhclNlZ21lbnRzICk7XG5cdFx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IHV2cyA9IFtdO1xuXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Y29uc3QgUDEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IFAyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGNvbnN0IEIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IFQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IE4gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgKysgaSApIHtcblxuXHRcdFx0Ly8gdGhlIHJhZGlhbiBcInVcIiBpcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlIG9mIHRoZSBjdXJyZW50IHR1YnVsYXIgc2VnbWVudFxuXG5cdFx0XHRjb25zdCB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIHAgKiBNYXRoLlBJICogMjtcblxuXHRcdFx0Ly8gbm93IHdlIGNhbGN1bGF0ZSB0d28gcG9pbnRzLiBQMSBpcyBvdXIgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgY3VydmUsIFAyIGlzIGEgbGl0dGxlIGZhcnRoZXIgYWhlYWQuXG5cdFx0XHQvLyB0aGVzZSBwb2ludHMgYXJlIHVzZWQgdG8gY3JlYXRlIGEgc3BlY2lhbCBcImNvb3JkaW5hdGUgc3BhY2VcIiwgd2hpY2ggaXMgbmVjZXNzYXJ5IHRvIGNhbGN1bGF0ZSB0aGUgY29ycmVjdCB2ZXJ0ZXggcG9zaXRpb25zXG5cblx0XHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBQMSApO1xuXHRcdFx0Y2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKCB1ICsgMC4wMSwgcCwgcSwgcmFkaXVzLCBQMiApO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgb3J0aG9ub3JtYWwgYmFzaXNcblxuXHRcdFx0VC5zdWJWZWN0b3JzKCBQMiwgUDEgKTtcblx0XHRcdE4uYWRkVmVjdG9ycyggUDIsIFAxICk7XG5cdFx0XHRCLmNyb3NzVmVjdG9ycyggVCwgTiApO1xuXHRcdFx0Ti5jcm9zc1ZlY3RvcnMoIEIsIFQgKTtcblxuXHRcdFx0Ly8gbm9ybWFsaXplIEIsIE4uIFQgY2FuIGJlIGlnbm9yZWQsIHdlIGRvbid0IHVzZSBpdFxuXG5cdFx0XHRCLm5vcm1hbGl6ZSgpO1xuXHRcdFx0Ti5ub3JtYWxpemUoKTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyArKyBqICkge1xuXG5cdFx0XHRcdC8vIG5vdyBjYWxjdWxhdGUgdGhlIHZlcnRpY2VzLiB0aGV5IGFyZSBub3RoaW5nIG1vcmUgdGhhbiBhbiBleHRydXNpb24gb2YgdGhlIHRvcnVzIGN1cnZlLlxuXHRcdFx0XHQvLyBiZWNhdXNlIHdlIGV4dHJ1ZGUgYSBzaGFwZSBpbiB0aGUgeHktcGxhbmUsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsY3VsYXRlIGEgei12YWx1ZS5cblxuXHRcdFx0XHRjb25zdCB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7XG5cdFx0XHRcdGNvbnN0IGN4ID0gLSB0dWJlICogTWF0aC5jb3MoIHYgKTtcblx0XHRcdFx0Y29uc3QgY3kgPSB0dWJlICogTWF0aC5zaW4oIHYgKTtcblxuXHRcdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSBmaW5hbCB2ZXJ0ZXggcG9zaXRpb24uXG5cdFx0XHRcdC8vIGZpcnN0IHdlIG9yaWVudCB0aGUgZXh0cnVzaW9uIHdpdGggb3VyIGJhc2lzIHZlY3RvcnMsIHRoZW4gd2UgYWRkIGl0IHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZVxuXG5cdFx0XHRcdHZlcnRleC54ID0gUDEueCArICggY3ggKiBOLnggKyBjeSAqIEIueCApO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IFAxLnkgKyAoIGN4ICogTi55ICsgY3kgKiBCLnkgKTtcblx0XHRcdFx0dmVydGV4LnogPSBQMS56ICsgKCBjeCAqIE4ueiArIGN5ICogQi56ICk7XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbCAoUDEgaXMgYWx3YXlzIHRoZSBjZW50ZXIvb3JpZ2luIG9mIHRoZSBleHRydXNpb24sIHRodXMgd2UgY2FuIHVzZSBpdCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbClcblxuXHRcdFx0XHRub3JtYWwuc3ViVmVjdG9ycyggdmVydGV4LCBQMSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXZzLnB1c2goIGkgLyB0dWJ1bGFyU2VnbWVudHMgKTtcblx0XHRcdFx0dXZzLnB1c2goIGogLyByYWRpYWxTZWdtZW50cyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0XHRmb3IgKCBsZXQgaiA9IDE7IGogPD0gdHVidWxhclNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPD0gcmFkaWFsU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0Ly8gaW5kaWNlc1xuXG5cdFx0XHRcdGNvbnN0IGEgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgKCBpIC0gMSApO1xuXHRcdFx0XHRjb25zdCBiID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyAoIGkgLSAxICk7XG5cdFx0XHRcdGNvbnN0IGMgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArIGk7XG5cdFx0XHRcdGNvbnN0IGQgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0XHQvLyB0aGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlXG5cblx0XHRmdW5jdGlvbiBjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUoIHUsIHAsIHEsIHJhZGl1cywgcG9zaXRpb24gKSB7XG5cblx0XHRcdGNvbnN0IGN1ID0gTWF0aC5jb3MoIHUgKTtcblx0XHRcdGNvbnN0IHN1ID0gTWF0aC5zaW4oIHUgKTtcblx0XHRcdGNvbnN0IHF1T3ZlclAgPSBxIC8gcCAqIHU7XG5cdFx0XHRjb25zdCBjcyA9IE1hdGguY29zKCBxdU92ZXJQICk7XG5cblx0XHRcdHBvc2l0aW9uLnggPSByYWRpdXMgKiAoIDIgKyBjcyApICogMC41ICogY3U7XG5cdFx0XHRwb3NpdGlvbi55ID0gcmFkaXVzICogKCAyICsgY3MgKSAqIHN1ICogMC41O1xuXHRcdFx0cG9zaXRpb24ueiA9IHJhZGl1cyAqIE1hdGguc2luKCBxdU92ZXJQICkgKiAwLjU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBUb3J1c0tub3RHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEudHViZSwgZGF0YS50dWJ1bGFyU2VnbWVudHMsIGRhdGEucmFkaWFsU2VnbWVudHMsIGRhdGEucCwgZGF0YS5xICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFRvcnVzS25vdEdlb21ldHJ5IH07XG4iLCJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCAqIGFzIEN1cnZlcyBmcm9tICcuLi9leHRyYXMvY3VydmVzL0N1cnZlcy5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuXG5jbGFzcyBUdWJlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHBhdGggPSBuZXcgQ3VydmVzWyAnUXVhZHJhdGljQmV6aWVyQ3VydmUzJyBdKCBuZXcgVmVjdG9yMyggLSAxLCAtIDEsIDAgKSwgbmV3IFZlY3RvcjMoIC0gMSwgMSwgMCApLCBuZXcgVmVjdG9yMyggMSwgMSwgMCApICksIHR1YnVsYXJTZWdtZW50cyA9IDY0LCByYWRpdXMgPSAxLCByYWRpYWxTZWdtZW50cyA9IDgsIGNsb3NlZCA9IGZhbHNlICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdUdWJlR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cGF0aDogcGF0aCxcblx0XHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0XHRjbG9zZWQ6IGNsb3NlZFxuXHRcdH07XG5cblx0XHRjb25zdCBmcmFtZXMgPSBwYXRoLmNvbXB1dGVGcmVuZXRGcmFtZXMoIHR1YnVsYXJTZWdtZW50cywgY2xvc2VkICk7XG5cblx0XHQvLyBleHBvc2UgaW50ZXJuYWxzXG5cblx0XHR0aGlzLnRhbmdlbnRzID0gZnJhbWVzLnRhbmdlbnRzO1xuXHRcdHRoaXMubm9ybWFscyA9IGZyYW1lcy5ub3JtYWxzO1xuXHRcdHRoaXMuYmlub3JtYWxzID0gZnJhbWVzLmJpbm9ybWFscztcblxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0bGV0IFAgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gYnVmZmVyXG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cblx0XHQvLyBjcmVhdGUgYnVmZmVyIGRhdGFcblxuXHRcdGdlbmVyYXRlQnVmZmVyRGF0YSgpO1xuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0XHQvLyBmdW5jdGlvbnNcblxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlQnVmZmVyRGF0YSgpIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlU2VnbWVudCggaSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIHRoZSBnZW9tZXRyeSBpcyBub3QgY2xvc2VkLCBnZW5lcmF0ZSB0aGUgbGFzdCByb3cgb2YgdmVydGljZXMgYW5kIG5vcm1hbHNcblx0XHRcdC8vIGF0IHRoZSByZWd1bGFyIHBvc2l0aW9uIG9uIHRoZSBnaXZlbiBwYXRoXG5cdFx0XHQvL1xuXHRcdFx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIGNsb3NlZCwgZHVwbGljYXRlIHRoZSBmaXJzdCByb3cgb2YgdmVydGljZXMgYW5kIG5vcm1hbHMgKHV2cyB3aWxsIGRpZmZlcilcblxuXHRcdFx0Z2VuZXJhdGVTZWdtZW50KCAoIGNsb3NlZCA9PT0gZmFsc2UgKSA/IHR1YnVsYXJTZWdtZW50cyA6IDAgKTtcblxuXHRcdFx0Ly8gdXZzIGFyZSBnZW5lcmF0ZWQgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbi5cblx0XHRcdC8vIHRoaXMgbWFrZXMgaXQgZWFzeSBjb21wdXRlIGNvcnJlY3QgdmFsdWVzIGZvciBjbG9zZWQgZ2VvbWV0cmllc1xuXG5cdFx0XHRnZW5lcmF0ZVVWcygpO1xuXG5cdFx0XHQvLyBmaW5hbGx5IGNyZWF0ZSBmYWNlc1xuXG5cdFx0XHRnZW5lcmF0ZUluZGljZXMoKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudCggaSApIHtcblxuXHRcdFx0Ly8gd2UgdXNlIGdldFBvaW50QXQgdG8gc2FtcGxlIGV2ZW5seSBkaXN0cmlidXRlZCBwb2ludHMgZnJvbSB0aGUgZ2l2ZW4gcGF0aFxuXG5cdFx0XHRQID0gcGF0aC5nZXRQb2ludEF0KCBpIC8gdHVidWxhclNlZ21lbnRzLCBQICk7XG5cblx0XHRcdC8vIHJldHJpZXZlIGNvcnJlc3BvbmRpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbFxuXG5cdFx0XHRjb25zdCBOID0gZnJhbWVzLm5vcm1hbHNbIGkgXTtcblx0XHRcdGNvbnN0IEIgPSBmcmFtZXMuYmlub3JtYWxzWyBpIF07XG5cblx0XHRcdC8vIGdlbmVyYXRlIG5vcm1hbHMgYW5kIHZlcnRpY2VzIGZvciB0aGUgY3VycmVudCBzZWdtZW50XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7XG5cblx0XHRcdFx0Y29uc3Qgc2luID0gTWF0aC5zaW4oIHYgKTtcblx0XHRcdFx0Y29uc3QgY29zID0gLSBNYXRoLmNvcyggdiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdG5vcm1hbC54ID0gKCBjb3MgKiBOLnggKyBzaW4gKiBCLnggKTtcblx0XHRcdFx0bm9ybWFsLnkgPSAoIGNvcyAqIE4ueSArIHNpbiAqIEIueSApO1xuXHRcdFx0XHRub3JtYWwueiA9ICggY29zICogTi56ICsgc2luICogQi56ICk7XG5cdFx0XHRcdG5vcm1hbC5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IFAueCArIHJhZGl1cyAqIG5vcm1hbC54O1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IFAueSArIHJhZGl1cyAqIG5vcm1hbC55O1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IFAueiArIHJhZGl1cyAqIG5vcm1hbC56O1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVJbmRpY2VzKCkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDE7IGogPD0gdHVidWxhclNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSByYWRpYWxTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgKCBpIC0gMSApO1xuXHRcdFx0XHRcdGNvbnN0IGIgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArICggaSAtIDEgKTtcblx0XHRcdFx0XHRjb25zdCBjID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyBpO1xuXHRcdFx0XHRcdGNvbnN0IGQgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblxuXHRcdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlVVZzKCkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0XHRcdHV2LnggPSBpIC8gdHVidWxhclNlZ21lbnRzO1xuXHRcdFx0XHRcdHV2LnkgPSBqIC8gcmFkaWFsU2VnbWVudHM7XG5cblx0XHRcdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEucGF0aCA9IHRoaXMucGFyYW1ldGVycy5wYXRoLnRvSlNPTigpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdC8vIFRoaXMgb25seSB3b3JrcyBmb3IgYnVpbHQtaW4gY3VydmVzIChlLmcuIENhdG11bGxSb21DdXJ2ZTMpLlxuXHRcdC8vIFVzZXIgZGVmaW5lZCBjdXJ2ZXMgb3IgaW5zdGFuY2VzIG9mIEN1cnZlUGF0aCB3aWxsIG5vdCBiZSBkZXNlcmlhbGl6ZWQuXG5cdFx0cmV0dXJuIG5ldyBUdWJlR2VvbWV0cnkoXG5cdFx0XHRuZXcgQ3VydmVzWyBkYXRhLnBhdGgudHlwZSBdKCkuZnJvbUpTT04oIGRhdGEucGF0aCApLFxuXHRcdFx0ZGF0YS50dWJ1bGFyU2VnbWVudHMsXG5cdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXG5cdFx0XHRkYXRhLmNsb3NlZFxuXHRcdCk7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgVHViZUdlb21ldHJ5IH07XG4iLCJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuXG5jbGFzcyBXaXJlZnJhbWVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdXaXJlZnJhbWVHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRnZW9tZXRyeTogZ2VvbWV0cnlcblx0XHR9O1xuXG5cdFx0aWYgKCBnZW9tZXRyeSAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gYnVmZmVyXG5cblx0XHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0XHRjb25zdCBlZGdlcyA9IG5ldyBTZXQoKTtcblxuXHRcdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0XHRjb25zdCBzdGFydCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBlbmQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdC8vIGluZGV4ZWQgQnVmZmVyR2VvbWV0cnlcblxuXHRcdFx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdGNvbnN0IGluZGljZXMgPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdFx0bGV0IGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdFx0XHRncm91cHMgPSBbIHsgc3RhcnQ6IDAsIGNvdW50OiBpbmRpY2VzLmNvdW50LCBtYXRlcmlhbEluZGV4OiAwIH0gXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gY3JlYXRlIGEgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBjb250YWlucyBhbGwgZWRnZXMgd2l0aG91dCBkdXBsaWNhdGVzXG5cblx0XHRcdFx0Zm9yICggbGV0IG8gPSAwLCBvbCA9IGdyb3Vwcy5sZW5ndGg7IG8gPCBvbDsgKysgbyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBvIF07XG5cblx0XHRcdFx0XHRjb25zdCBncm91cFN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXBDb3VudCA9IGdyb3VwLmNvdW50O1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSBncm91cFN0YXJ0LCBsID0gKCBncm91cFN0YXJ0ICsgZ3JvdXBDb3VudCApOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGluZGV4MSA9IGluZGljZXMuZ2V0WCggaSArIGogKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgaW5kZXgyID0gaW5kaWNlcy5nZXRYKCBpICsgKCBqICsgMSApICUgMyApO1xuXG5cdFx0XHRcdFx0XHRcdHN0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDEgKTtcblx0XHRcdFx0XHRcdFx0ZW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDIgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzVW5pcXVlRWRnZSggc3RhcnQsIGVuZCwgZWRnZXMgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHN0YXJ0LngsIHN0YXJ0LnksIHN0YXJ0LnogKTtcblx0XHRcdFx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBlbmQueCwgZW5kLnksIGVuZC56ICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5XG5cblx0XHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9ICggcG9zaXRpb24uY291bnQgLyAzICk7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgMzsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gdGhyZWUgZWRnZXMgcGVyIHRyaWFuZ2xlLCBhbiBlZGdlIGlzIHJlcHJlc2VudGVkIGFzIChpbmRleDEsIGluZGV4Milcblx0XHRcdFx0XHRcdC8vIGUuZy4gdGhlIGZpcnN0IHRyaWFuZ2xlIGhhcyB0aGUgZm9sbG93aW5nIGVkZ2VzOiAoMCwxKSwoMSwyKSwoMiwwKVxuXG5cdFx0XHRcdFx0XHRjb25zdCBpbmRleDEgPSAzICogaSArIGo7XG5cdFx0XHRcdFx0XHRjb25zdCBpbmRleDIgPSAzICogaSArICggKCBqICsgMSApICUgMyApO1xuXG5cdFx0XHRcdFx0XHRzdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaW5kZXgxICk7XG5cdFx0XHRcdFx0XHRlbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4MiApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGlzVW5pcXVlRWRnZSggc3RhcnQsIGVuZCwgZWRnZXMgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBzdGFydC54LCBzdGFydC55LCBzdGFydC56ICk7XG5cdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIGVuZC54LCBlbmQueSwgZW5kLnogKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBpc1VuaXF1ZUVkZ2UoIHN0YXJ0LCBlbmQsIGVkZ2VzICkge1xuXG5cdGNvbnN0IGhhc2gxID0gYCR7c3RhcnQueH0sJHtzdGFydC55fSwke3N0YXJ0Lnp9LSR7ZW5kLnh9LCR7ZW5kLnl9LCR7ZW5kLnp9YDtcblx0Y29uc3QgaGFzaDIgPSBgJHtlbmQueH0sJHtlbmQueX0sJHtlbmQuen0tJHtzdGFydC54fSwke3N0YXJ0Lnl9LCR7c3RhcnQuen1gOyAvLyBjb2luY2lkZW50IGVkZ2VcblxuXHRpZiAoIGVkZ2VzLmhhcyggaGFzaDEgKSA9PT0gdHJ1ZSB8fCBlZGdlcy5oYXMoIGhhc2gyICkgPT09IHRydWUgKSB7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSBlbHNlIHtcblxuXHRcdGVkZ2VzLmFkZCggaGFzaDEgKTtcblx0XHRlZGdlcy5hZGQoIGhhc2gyICk7XG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgV2lyZWZyYW1lR2VvbWV0cnkgfTtcbiIsImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xuXG5jbGFzcyBTaGFkb3dNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzU2hhZG93TWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ1NoYWRvd01hdGVyaWFsJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0XHR0aGlzLmZvZyA9IHRydWU7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgU2hhZG93TWF0ZXJpYWwgfTtcbiIsImltcG9ydCB7IFNoYWRlck1hdGVyaWFsIH0gZnJvbSAnLi9TaGFkZXJNYXRlcmlhbC5qcyc7XG5cbmNsYXNzIFJhd1NoYWRlck1hdGVyaWFsIGV4dGVuZHMgU2hhZGVyTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoIHBhcmFtZXRlcnMgKTtcblxuXHRcdHRoaXMuaXNSYXdTaGFkZXJNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnUmF3U2hhZGVyTWF0ZXJpYWwnO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBSYXdTaGFkZXJNYXRlcmlhbCB9O1xuIiwiaW1wb3J0IHsgVGFuZ2VudFNwYWNlTm9ybWFsTWFwIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uL21hdGgvRXVsZXIuanMnO1xuXG5jbGFzcyBNZXNoU3RhbmRhcmRNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9O1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hTdGFuZGFyZE1hdGVyaWFsJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2Vcblx0XHR0aGlzLnJvdWdobmVzcyA9IDEuMDtcblx0XHR0aGlzLm1ldGFsbmVzcyA9IDAuMDtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLnJvdWdobmVzc01hcCA9IG51bGw7XG5cblx0XHR0aGlzLm1ldGFsbmVzc01hcCA9IG51bGw7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuZW52TWFwID0gbnVsbDtcblx0XHR0aGlzLmVudk1hcFJvdGF0aW9uID0gbmV3IEV1bGVyKCk7XG5cdFx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7ICdTVEFOREFSRCc6ICcnIH07XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHRcdHRoaXMucm91Z2huZXNzID0gc291cmNlLnJvdWdobmVzcztcblx0XHR0aGlzLm1ldGFsbmVzcyA9IHNvdXJjZS5tZXRhbG5lc3M7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmVtaXNzaXZlLmNvcHkoIHNvdXJjZS5lbWlzc2l2ZSApO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR0aGlzLnJvdWdobmVzc01hcCA9IHNvdXJjZS5yb3VnaG5lc3NNYXA7XG5cblx0XHR0aGlzLm1ldGFsbmVzc01hcCA9IHNvdXJjZS5tZXRhbG5lc3NNYXA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHRcdHRoaXMuZW52TWFwUm90YXRpb24uY29weSggc291cmNlLmVudk1hcFJvdGF0aW9uICk7XG5cdFx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSBzb3VyY2UuZW52TWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBNZXNoU3RhbmRhcmRNYXRlcmlhbCB9O1xuIiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBNZXNoU3RhbmRhcmRNYXRlcmlhbCB9IGZyb20gJy4vTWVzaFN0YW5kYXJkTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcbmltcG9ydCAqIGFzIE1hdGhVdGlscyBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XG5cbmNsYXNzIE1lc2hQaHlzaWNhbE1hdGVyaWFsIGV4dGVuZHMgTWVzaFN0YW5kYXJkTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNNZXNoUGh5c2ljYWxNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7XG5cblx0XHRcdCdTVEFOREFSRCc6ICcnLFxuXHRcdFx0J1BIWVNJQ0FMJzogJydcblxuXHRcdH07XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaFBoeXNpY2FsTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5hbmlzb3Ryb3B5Um90YXRpb24gPSAwO1xuXHRcdHRoaXMuYW5pc290cm9weU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmNsZWFyY29hdE1hcCA9IG51bGw7XG5cdFx0dGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgPSAwLjA7XG5cdFx0dGhpcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPSBudWxsO1xuXHRcdHRoaXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXHRcdHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuaW9yID0gMS41O1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAncmVmbGVjdGl2aXR5Jywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0cmV0dXJuICggTWF0aFV0aWxzLmNsYW1wKCAyLjUgKiAoIHRoaXMuaW9yIC0gMSApIC8gKCB0aGlzLmlvciArIDEgKSwgMCwgMSApICk7XG5cblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICggcmVmbGVjdGl2aXR5ICkge1xuXG5cdFx0XHRcdHRoaXMuaW9yID0gKCAxICsgMC40ICogcmVmbGVjdGl2aXR5ICkgLyAoIDEgLSAwLjQgKiByZWZsZWN0aXZpdHkgKTtcblxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHRoaXMuaXJpZGVzY2VuY2VNYXAgPSBudWxsO1xuXHRcdHRoaXMuaXJpZGVzY2VuY2VJT1IgPSAxLjM7XG5cdFx0dGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlID0gWyAxMDAsIDQwMCBdO1xuXHRcdHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5zaGVlbkNvbG9yID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHRcdHRoaXMuc2hlZW5Db2xvck1hcCA9IG51bGw7XG5cdFx0dGhpcy5zaGVlblJvdWdobmVzcyA9IDEuMDtcblx0XHR0aGlzLnNoZWVuUm91Z2huZXNzTWFwID0gbnVsbDtcblxuXHRcdHRoaXMudHJhbnNtaXNzaW9uTWFwID0gbnVsbDtcblxuXHRcdHRoaXMudGhpY2tuZXNzID0gMDtcblx0XHR0aGlzLnRoaWNrbmVzc01hcCA9IG51bGw7XG5cdFx0dGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlID0gSW5maW5pdHk7XG5cdFx0dGhpcy5hdHRlbnVhdGlvbkNvbG9yID0gbmV3IENvbG9yKCAxLCAxLCAxICk7XG5cblx0XHR0aGlzLnNwZWN1bGFySW50ZW5zaXR5ID0gMS4wO1xuXHRcdHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPSBudWxsO1xuXHRcdHRoaXMuc3BlY3VsYXJDb2xvciA9IG5ldyBDb2xvciggMSwgMSwgMSApO1xuXHRcdHRoaXMuc3BlY3VsYXJDb2xvck1hcCA9IG51bGw7XG5cblx0XHR0aGlzLl9hbmlzb3Ryb3B5ID0gMDtcblx0XHR0aGlzLl9jbGVhcmNvYXQgPSAwO1xuXHRcdHRoaXMuX2Rpc3BlcnNpb24gPSAwO1xuXHRcdHRoaXMuX2lyaWRlc2NlbmNlID0gMDtcblx0XHR0aGlzLl9zaGVlbiA9IDAuMDtcblx0XHR0aGlzLl90cmFuc21pc3Npb24gPSAwO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Z2V0IGFuaXNvdHJvcHkoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fYW5pc290cm9weTtcblxuXHR9XG5cblx0c2V0IGFuaXNvdHJvcHkoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9hbmlzb3Ryb3B5ID4gMCAhPT0gdmFsdWUgPiAwICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9hbmlzb3Ryb3B5ID0gdmFsdWU7XG5cblx0fVxuXG5cdGdldCBjbGVhcmNvYXQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fY2xlYXJjb2F0O1xuXG5cdH1cblxuXHRzZXQgY2xlYXJjb2F0KCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5fY2xlYXJjb2F0ID4gMCAhPT0gdmFsdWUgPiAwICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9jbGVhcmNvYXQgPSB2YWx1ZTtcblxuXHR9XG5cblx0Z2V0IGlyaWRlc2NlbmNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2lyaWRlc2NlbmNlO1xuXG5cdH1cblxuXHRzZXQgaXJpZGVzY2VuY2UoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pcmlkZXNjZW5jZSA+IDAgIT09IHZhbHVlID4gMCApIHtcblxuXHRcdFx0dGhpcy52ZXJzaW9uICsrO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5faXJpZGVzY2VuY2UgPSB2YWx1ZTtcblxuXHR9XG5cblx0Z2V0IGRpc3BlcnNpb24oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZGlzcGVyc2lvbjtcblxuXHR9XG5cblx0c2V0IGRpc3BlcnNpb24oIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9kaXNwZXJzaW9uID4gMCAhPT0gdmFsdWUgPiAwICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9kaXNwZXJzaW9uID0gdmFsdWU7XG5cblx0fVxuXG5cdGdldCBzaGVlbigpIHtcblxuXHRcdHJldHVybiB0aGlzLl9zaGVlbjtcblxuXHR9XG5cblx0c2V0IHNoZWVuKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5fc2hlZW4gPiAwICE9PSB2YWx1ZSA+IDAgKSB7XG5cblx0XHRcdHRoaXMudmVyc2lvbiArKztcblxuXHRcdH1cblxuXHRcdHRoaXMuX3NoZWVuID0gdmFsdWU7XG5cblx0fVxuXG5cdGdldCB0cmFuc21pc3Npb24oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fdHJhbnNtaXNzaW9uO1xuXG5cdH1cblxuXHRzZXQgdHJhbnNtaXNzaW9uKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5fdHJhbnNtaXNzaW9uID4gMCAhPT0gdmFsdWUgPiAwICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0XHR0aGlzLl90cmFuc21pc3Npb24gPSB2YWx1ZTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7XG5cblx0XHRcdCdTVEFOREFSRCc6ICcnLFxuXHRcdFx0J1BIWVNJQ0FMJzogJydcblxuXHRcdH07XG5cblx0XHR0aGlzLmFuaXNvdHJvcHkgPSBzb3VyY2UuYW5pc290cm9weTtcblx0XHR0aGlzLmFuaXNvdHJvcHlSb3RhdGlvbiA9IHNvdXJjZS5hbmlzb3Ryb3B5Um90YXRpb247XG5cdFx0dGhpcy5hbmlzb3Ryb3B5TWFwID0gc291cmNlLmFuaXNvdHJvcHlNYXA7XG5cblx0XHR0aGlzLmNsZWFyY29hdCA9IHNvdXJjZS5jbGVhcmNvYXQ7XG5cdFx0dGhpcy5jbGVhcmNvYXRNYXAgPSBzb3VyY2UuY2xlYXJjb2F0TWFwO1xuXHRcdHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzID0gc291cmNlLmNsZWFyY29hdFJvdWdobmVzcztcblx0XHR0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcCA9IHNvdXJjZS5jbGVhcmNvYXRSb3VnaG5lc3NNYXA7XG5cdFx0dGhpcy5jbGVhcmNvYXROb3JtYWxNYXAgPSBzb3VyY2UuY2xlYXJjb2F0Tm9ybWFsTWFwO1xuXHRcdHRoaXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUuY29weSggc291cmNlLmNsZWFyY29hdE5vcm1hbFNjYWxlICk7XG5cblx0XHR0aGlzLmRpc3BlcnNpb24gPSBzb3VyY2UuZGlzcGVyc2lvbjtcblx0XHR0aGlzLmlvciA9IHNvdXJjZS5pb3I7XG5cblx0XHR0aGlzLmlyaWRlc2NlbmNlID0gc291cmNlLmlyaWRlc2NlbmNlO1xuXHRcdHRoaXMuaXJpZGVzY2VuY2VNYXAgPSBzb3VyY2UuaXJpZGVzY2VuY2VNYXA7XG5cdFx0dGhpcy5pcmlkZXNjZW5jZUlPUiA9IHNvdXJjZS5pcmlkZXNjZW5jZUlPUjtcblx0XHR0aGlzLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2UgPSBbIC4uLnNvdXJjZS5pcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlIF07XG5cdFx0dGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA9IHNvdXJjZS5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcDtcblxuXHRcdHRoaXMuc2hlZW4gPSBzb3VyY2Uuc2hlZW47XG5cdFx0dGhpcy5zaGVlbkNvbG9yLmNvcHkoIHNvdXJjZS5zaGVlbkNvbG9yICk7XG5cdFx0dGhpcy5zaGVlbkNvbG9yTWFwID0gc291cmNlLnNoZWVuQ29sb3JNYXA7XG5cdFx0dGhpcy5zaGVlblJvdWdobmVzcyA9IHNvdXJjZS5zaGVlblJvdWdobmVzcztcblx0XHR0aGlzLnNoZWVuUm91Z2huZXNzTWFwID0gc291cmNlLnNoZWVuUm91Z2huZXNzTWFwO1xuXG5cdFx0dGhpcy50cmFuc21pc3Npb24gPSBzb3VyY2UudHJhbnNtaXNzaW9uO1xuXHRcdHRoaXMudHJhbnNtaXNzaW9uTWFwID0gc291cmNlLnRyYW5zbWlzc2lvbk1hcDtcblxuXHRcdHRoaXMudGhpY2tuZXNzID0gc291cmNlLnRoaWNrbmVzcztcblx0XHR0aGlzLnRoaWNrbmVzc01hcCA9IHNvdXJjZS50aGlja25lc3NNYXA7XG5cdFx0dGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlID0gc291cmNlLmF0dGVudWF0aW9uRGlzdGFuY2U7XG5cdFx0dGhpcy5hdHRlbnVhdGlvbkNvbG9yLmNvcHkoIHNvdXJjZS5hdHRlbnVhdGlvbkNvbG9yICk7XG5cblx0XHR0aGlzLnNwZWN1bGFySW50ZW5zaXR5ID0gc291cmNlLnNwZWN1bGFySW50ZW5zaXR5O1xuXHRcdHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPSBzb3VyY2Uuc3BlY3VsYXJJbnRlbnNpdHlNYXA7XG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yLmNvcHkoIHNvdXJjZS5zcGVjdWxhckNvbG9yICk7XG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yTWFwID0gc291cmNlLnNwZWN1bGFyQ29sb3JNYXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgTWVzaFBoeXNpY2FsTWF0ZXJpYWwgfTtcbiIsImltcG9ydCB7IE11bHRpcGx5T3BlcmF0aW9uLCBUYW5nZW50U3BhY2VOb3JtYWxNYXAgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuL01hdGVyaWFsLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcbmltcG9ydCB7IEV1bGVyIH0gZnJvbSAnLi4vbWF0aC9FdWxlci5qcyc7XG5cbmNsYXNzIE1lc2hQaG9uZ01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNNZXNoUGhvbmdNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaFBob25nTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXHRcdHRoaXMuc3BlY3VsYXIgPSBuZXcgQ29sb3IoIDB4MTExMTExICk7XG5cdFx0dGhpcy5zaGluaW5lc3MgPSAzMDtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5lbnZNYXAgPSBudWxsO1xuXHRcdHRoaXMuZW52TWFwUm90YXRpb24gPSBuZXcgRXVsZXIoKTtcblx0XHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblxuXHRcdHRoaXMuZm9nID0gdHJ1ZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0XHR0aGlzLnNwZWN1bGFyLmNvcHkoIHNvdXJjZS5zcGVjdWxhciApO1xuXHRcdHRoaXMuc2hpbmluZXNzID0gc291cmNlLnNoaW5pbmVzcztcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdFx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBzb3VyY2Uuc3BlY3VsYXJNYXA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHRcdHRoaXMuZW52TWFwUm90YXRpb24uY29weSggc291cmNlLmVudk1hcFJvdGF0aW9uICk7XG5cdFx0dGhpcy5jb21iaW5lID0gc291cmNlLmNvbWJpbmU7XG5cdFx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBzb3VyY2UuZmxhdFNoYWRpbmc7XG5cblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgTWVzaFBob25nTWF0ZXJpYWwgfTtcbiIsImltcG9ydCB7IFRhbmdlbnRTcGFjZU5vcm1hbE1hcCB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xuXG5jbGFzcyBNZXNoVG9vbk1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNNZXNoVG9vbk1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMuZGVmaW5lcyA9IHsgJ1RPT04nOiAnJyB9O1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hUb29uTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblx0XHR0aGlzLmdyYWRpZW50TWFwID0gbnVsbDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0XHR0aGlzLmZvZyA9IHRydWU7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cdFx0dGhpcy5ncmFkaWVudE1hcCA9IHNvdXJjZS5ncmFkaWVudE1hcDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdFx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgTWVzaFRvb25NYXRlcmlhbCB9O1xuIiwiaW1wb3J0IHsgVGFuZ2VudFNwYWNlTm9ybWFsTWFwIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcblxuY2xhc3MgTWVzaE5vcm1hbE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hOb3JtYWxNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBzb3VyY2UuZmxhdFNoYWRpbmc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgTWVzaE5vcm1hbE1hdGVyaWFsIH07XG4iLCJpbXBvcnQgeyBNdWx0aXBseU9wZXJhdGlvbiwgVGFuZ2VudFNwYWNlTm9ybWFsTWFwIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uL21hdGgvRXVsZXIuanMnO1xuXG5jbGFzcyBNZXNoTGFtYmVydE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNNZXNoTGFtYmVydE1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoTGFtYmVydE1hdGVyaWFsJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2VcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5lbnZNYXAgPSBudWxsO1xuXHRcdHRoaXMuZW52TWFwUm90YXRpb24gPSBuZXcgRXVsZXIoKTtcblx0XHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblxuXHRcdHRoaXMuZm9nID0gdHJ1ZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdFx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBzb3VyY2Uuc3BlY3VsYXJNYXA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHRcdHRoaXMuZW52TWFwUm90YXRpb24uY29weSggc291cmNlLmVudk1hcFJvdGF0aW9uICk7XG5cdFx0dGhpcy5jb21iaW5lID0gc291cmNlLmNvbWJpbmU7XG5cdFx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBzb3VyY2UuZmxhdFNoYWRpbmc7XG5cblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgTWVzaExhbWJlcnRNYXRlcmlhbCB9O1xuIiwiaW1wb3J0IHsgVGFuZ2VudFNwYWNlTm9ybWFsTWFwIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5cbmNsYXNzIE1lc2hNYXRjYXBNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzTWVzaE1hdGNhcE1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMuZGVmaW5lcyA9IHsgJ01BVENBUCc6ICcnIH07XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaE1hdGNhcE1hdGVyaWFsJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2VcblxuXHRcdHRoaXMubWF0Y2FwID0gbnVsbDtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cdFx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gZmFsc2U7XG5cblx0XHR0aGlzLmZvZyA9IHRydWU7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0geyAnTUFUQ0FQJzogJycgfTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLm1hdGNhcCA9IHNvdXJjZS5tYXRjYXA7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBzb3VyY2UuZmxhdFNoYWRpbmc7XG5cblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgTWVzaE1hdGNhcE1hdGVyaWFsIH07XG4iLCJpbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4vTGluZUJhc2ljTWF0ZXJpYWwuanMnO1xuXG5jbGFzcyBMaW5lRGFzaGVkTWF0ZXJpYWwgZXh0ZW5kcyBMaW5lQmFzaWNNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc0xpbmVEYXNoZWRNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZURhc2hlZE1hdGVyaWFsJztcblxuXHRcdHRoaXMuc2NhbGUgPSAxO1xuXHRcdHRoaXMuZGFzaFNpemUgPSAzO1xuXHRcdHRoaXMuZ2FwU2l6ZSA9IDE7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuc2NhbGUgPSBzb3VyY2Uuc2NhbGU7XG5cdFx0dGhpcy5kYXNoU2l6ZSA9IHNvdXJjZS5kYXNoU2l6ZTtcblx0XHR0aGlzLmdhcFNpemUgPSBzb3VyY2UuZ2FwU2l6ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBMaW5lRGFzaGVkTWF0ZXJpYWwgfTtcbiIsImltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuLi9tYXRoL1F1YXRlcm5pb24uanMnO1xuaW1wb3J0IHsgQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuXG4vLyBjb252ZXJ0cyBhbiBhcnJheSB0byBhIHNwZWNpZmljIHR5cGVcbmZ1bmN0aW9uIGNvbnZlcnRBcnJheSggYXJyYXksIHR5cGUsIGZvcmNlQ2xvbmUgKSB7XG5cblx0aWYgKCAhIGFycmF5IHx8IC8vIGxldCAndW5kZWZpbmVkJyBhbmQgJ251bGwnIHBhc3Ncblx0XHQhIGZvcmNlQ2xvbmUgJiYgYXJyYXkuY29uc3RydWN0b3IgPT09IHR5cGUgKSByZXR1cm4gYXJyYXk7XG5cblx0aWYgKCB0eXBlb2YgdHlwZS5CWVRFU19QRVJfRUxFTUVOVCA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRyZXR1cm4gbmV3IHR5cGUoIGFycmF5ICk7IC8vIGNyZWF0ZSB0eXBlZCBhcnJheVxuXG5cdH1cblxuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFycmF5ICk7IC8vIGNyZWF0ZSBBcnJheVxuXG59XG5cbmZ1bmN0aW9uIGlzVHlwZWRBcnJheSggb2JqZWN0ICkge1xuXG5cdHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoIG9iamVjdCApICYmXG5cdFx0ISAoIG9iamVjdCBpbnN0YW5jZW9mIERhdGFWaWV3ICk7XG5cbn1cblxuLy8gcmV0dXJucyBhbiBhcnJheSBieSB3aGljaCB0aW1lcyBhbmQgdmFsdWVzIGNhbiBiZSBzb3J0ZWRcbmZ1bmN0aW9uIGdldEtleWZyYW1lT3JkZXIoIHRpbWVzICkge1xuXG5cdGZ1bmN0aW9uIGNvbXBhcmVUaW1lKCBpLCBqICkge1xuXG5cdFx0cmV0dXJuIHRpbWVzWyBpIF0gLSB0aW1lc1sgaiBdO1xuXG5cdH1cblxuXHRjb25zdCBuID0gdGltZXMubGVuZ3RoO1xuXHRjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoIG4gKTtcblx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkgcmVzdWx0WyBpIF0gPSBpO1xuXG5cdHJlc3VsdC5zb3J0KCBjb21wYXJlVGltZSApO1xuXG5cdHJldHVybiByZXN1bHQ7XG5cbn1cblxuLy8gdXNlcyB0aGUgYXJyYXkgcHJldmlvdXNseSByZXR1cm5lZCBieSAnZ2V0S2V5ZnJhbWVPcmRlcicgdG8gc29ydCBkYXRhXG5mdW5jdGlvbiBzb3J0ZWRBcnJheSggdmFsdWVzLCBzdHJpZGUsIG9yZGVyICkge1xuXG5cdGNvbnN0IG5WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuXHRjb25zdCByZXN1bHQgPSBuZXcgdmFsdWVzLmNvbnN0cnVjdG9yKCBuVmFsdWVzICk7XG5cblx0Zm9yICggbGV0IGkgPSAwLCBkc3RPZmZzZXQgPSAwOyBkc3RPZmZzZXQgIT09IG5WYWx1ZXM7ICsrIGkgKSB7XG5cblx0XHRjb25zdCBzcmNPZmZzZXQgPSBvcmRlclsgaSBdICogc3RyaWRlO1xuXG5cdFx0Zm9yICggbGV0IGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdHJlc3VsdFsgZHN0T2Zmc2V0ICsrIF0gPSB2YWx1ZXNbIHNyY09mZnNldCArIGogXTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcblxufVxuXG4vLyBmdW5jdGlvbiBmb3IgcGFyc2luZyBBT1Mga2V5ZnJhbWUgZm9ybWF0c1xuZnVuY3Rpb24gZmxhdHRlbkpTT04oIGpzb25LZXlzLCB0aW1lcywgdmFsdWVzLCB2YWx1ZVByb3BlcnR5TmFtZSApIHtcblxuXHRsZXQgaSA9IDEsIGtleSA9IGpzb25LZXlzWyAwIF07XG5cblx0d2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCAmJiBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0fVxuXG5cdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSByZXR1cm47IC8vIG5vIGRhdGFcblxuXHRsZXQgdmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHJldHVybjsgLy8gbm8gZGF0YVxuXG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblxuXHRcdGRvIHtcblxuXHRcdFx0dmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cblx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHR2YWx1ZXMucHVzaC5hcHBseSggdmFsdWVzLCB2YWx1ZSApOyAvLyBwdXNoIGFsbCBlbGVtZW50c1xuXG5cdFx0XHR9XG5cblx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcblxuXHR9IGVsc2UgaWYgKCB2YWx1ZS50b0FycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHQvLyAuLi5hc3N1bWUgVEhSRUUuTWF0aC1pc2hcblxuXHRcdGRvIHtcblxuXHRcdFx0dmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cblx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHR2YWx1ZS50b0FycmF5KCB2YWx1ZXMsIHZhbHVlcy5sZW5ndGggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRrZXkgPSBqc29uS2V5c1sgaSArKyBdO1xuXG5cdFx0fSB3aGlsZSAoIGtleSAhPT0gdW5kZWZpbmVkICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIG90aGVyd2lzZSBwdXNoIGFzLWlzXG5cblx0XHRkbyB7XG5cblx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGltZXMucHVzaCgga2V5LnRpbWUgKTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0a2V5ID0ganNvbktleXNbIGkgKysgXTtcblxuXHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzdWJjbGlwKCBzb3VyY2VDbGlwLCBuYW1lLCBzdGFydEZyYW1lLCBlbmRGcmFtZSwgZnBzID0gMzAgKSB7XG5cblx0Y29uc3QgY2xpcCA9IHNvdXJjZUNsaXAuY2xvbmUoKTtcblxuXHRjbGlwLm5hbWUgPSBuYW1lO1xuXG5cdGNvbnN0IHRyYWNrcyA9IFtdO1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IGNsaXAudHJhY2tzLmxlbmd0aDsgKysgaSApIHtcblxuXHRcdGNvbnN0IHRyYWNrID0gY2xpcC50cmFja3NbIGkgXTtcblx0XHRjb25zdCB2YWx1ZVNpemUgPSB0cmFjay5nZXRWYWx1ZVNpemUoKTtcblxuXHRcdGNvbnN0IHRpbWVzID0gW107XG5cdFx0Y29uc3QgdmFsdWVzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCB0cmFjay50aW1lcy5sZW5ndGg7ICsrIGogKSB7XG5cblx0XHRcdGNvbnN0IGZyYW1lID0gdHJhY2sudGltZXNbIGogXSAqIGZwcztcblxuXHRcdFx0aWYgKCBmcmFtZSA8IHN0YXJ0RnJhbWUgfHwgZnJhbWUgPj0gZW5kRnJhbWUgKSBjb250aW51ZTtcblxuXHRcdFx0dGltZXMucHVzaCggdHJhY2sudGltZXNbIGogXSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgayA9IDA7IGsgPCB2YWx1ZVNpemU7ICsrIGsgKSB7XG5cblx0XHRcdFx0dmFsdWVzLnB1c2goIHRyYWNrLnZhbHVlc1sgaiAqIHZhbHVlU2l6ZSArIGsgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRpbWVzLmxlbmd0aCA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0dHJhY2sudGltZXMgPSBjb252ZXJ0QXJyYXkoIHRpbWVzLCB0cmFjay50aW1lcy5jb25zdHJ1Y3RvciApO1xuXHRcdHRyYWNrLnZhbHVlcyA9IGNvbnZlcnRBcnJheSggdmFsdWVzLCB0cmFjay52YWx1ZXMuY29uc3RydWN0b3IgKTtcblxuXHRcdHRyYWNrcy5wdXNoKCB0cmFjayApO1xuXG5cdH1cblxuXHRjbGlwLnRyYWNrcyA9IHRyYWNrcztcblxuXHQvLyBmaW5kIG1pbmltdW0gLnRpbWVzIHZhbHVlIGFjcm9zcyBhbGwgdHJhY2tzIGluIHRoZSB0cmltbWVkIGNsaXBcblxuXHRsZXQgbWluU3RhcnRUaW1lID0gSW5maW5pdHk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2xpcC50cmFja3MubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0aWYgKCBtaW5TdGFydFRpbWUgPiBjbGlwLnRyYWNrc1sgaSBdLnRpbWVzWyAwIF0gKSB7XG5cblx0XHRcdG1pblN0YXJ0VGltZSA9IGNsaXAudHJhY2tzWyBpIF0udGltZXNbIDAgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gc2hpZnQgYWxsIHRyYWNrcyBzdWNoIHRoYXQgY2xpcCBiZWdpbnMgYXQgdD0wXG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2xpcC50cmFja3MubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0Y2xpcC50cmFja3NbIGkgXS5zaGlmdCggLSAxICogbWluU3RhcnRUaW1lICk7XG5cblx0fVxuXG5cdGNsaXAucmVzZXREdXJhdGlvbigpO1xuXG5cdHJldHVybiBjbGlwO1xuXG59XG5cbmZ1bmN0aW9uIG1ha2VDbGlwQWRkaXRpdmUoIHRhcmdldENsaXAsIHJlZmVyZW5jZUZyYW1lID0gMCwgcmVmZXJlbmNlQ2xpcCA9IHRhcmdldENsaXAsIGZwcyA9IDMwICkge1xuXG5cdGlmICggZnBzIDw9IDAgKSBmcHMgPSAzMDtcblxuXHRjb25zdCBudW1UcmFja3MgPSByZWZlcmVuY2VDbGlwLnRyYWNrcy5sZW5ndGg7XG5cdGNvbnN0IHJlZmVyZW5jZVRpbWUgPSByZWZlcmVuY2VGcmFtZSAvIGZwcztcblxuXHQvLyBNYWtlIGVhY2ggdHJhY2sncyB2YWx1ZXMgcmVsYXRpdmUgdG8gdGhlIHZhbHVlcyBhdCB0aGUgcmVmZXJlbmNlIGZyYW1lXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IG51bVRyYWNrczsgKysgaSApIHtcblxuXHRcdGNvbnN0IHJlZmVyZW5jZVRyYWNrID0gcmVmZXJlbmNlQ2xpcC50cmFja3NbIGkgXTtcblx0XHRjb25zdCByZWZlcmVuY2VUcmFja1R5cGUgPSByZWZlcmVuY2VUcmFjay5WYWx1ZVR5cGVOYW1lO1xuXG5cdFx0Ly8gU2tpcCB0aGlzIHRyYWNrIGlmIGl0J3Mgbm9uLW51bWVyaWNcblx0XHRpZiAoIHJlZmVyZW5jZVRyYWNrVHlwZSA9PT0gJ2Jvb2wnIHx8IHJlZmVyZW5jZVRyYWNrVHlwZSA9PT0gJ3N0cmluZycgKSBjb250aW51ZTtcblxuXHRcdC8vIEZpbmQgdGhlIHRyYWNrIGluIHRoZSB0YXJnZXQgY2xpcCB3aG9zZSBuYW1lIGFuZCB0eXBlIG1hdGNoZXMgdGhlIHJlZmVyZW5jZSB0cmFja1xuXHRcdGNvbnN0IHRhcmdldFRyYWNrID0gdGFyZ2V0Q2xpcC50cmFja3MuZmluZCggZnVuY3Rpb24gKCB0cmFjayApIHtcblxuXHRcdFx0cmV0dXJuIHRyYWNrLm5hbWUgPT09IHJlZmVyZW5jZVRyYWNrLm5hbWVcblx0XHRcdFx0JiYgdHJhY2suVmFsdWVUeXBlTmFtZSA9PT0gcmVmZXJlbmNlVHJhY2tUeXBlO1xuXG5cdFx0fSApO1xuXG5cdFx0aWYgKCB0YXJnZXRUcmFjayA9PT0gdW5kZWZpbmVkICkgY29udGludWU7XG5cblx0XHRsZXQgcmVmZXJlbmNlT2Zmc2V0ID0gMDtcblx0XHRjb25zdCByZWZlcmVuY2VWYWx1ZVNpemUgPSByZWZlcmVuY2VUcmFjay5nZXRWYWx1ZVNpemUoKTtcblxuXHRcdGlmICggcmVmZXJlbmNlVHJhY2suY3JlYXRlSW50ZXJwb2xhbnQuaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUgKSB7XG5cblx0XHRcdHJlZmVyZW5jZU9mZnNldCA9IHJlZmVyZW5jZVZhbHVlU2l6ZSAvIDM7XG5cblx0XHR9XG5cblx0XHRsZXQgdGFyZ2V0T2Zmc2V0ID0gMDtcblx0XHRjb25zdCB0YXJnZXRWYWx1ZVNpemUgPSB0YXJnZXRUcmFjay5nZXRWYWx1ZVNpemUoKTtcblxuXHRcdGlmICggdGFyZ2V0VHJhY2suY3JlYXRlSW50ZXJwb2xhbnQuaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUgKSB7XG5cblx0XHRcdHRhcmdldE9mZnNldCA9IHRhcmdldFZhbHVlU2l6ZSAvIDM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBsYXN0SW5kZXggPSByZWZlcmVuY2VUcmFjay50aW1lcy5sZW5ndGggLSAxO1xuXHRcdGxldCByZWZlcmVuY2VWYWx1ZTtcblxuXHRcdC8vIEZpbmQgdGhlIHZhbHVlIHRvIHN1YnRyYWN0IG91dCBvZiB0aGUgdHJhY2tcblx0XHRpZiAoIHJlZmVyZW5jZVRpbWUgPD0gcmVmZXJlbmNlVHJhY2sudGltZXNbIDAgXSApIHtcblxuXHRcdFx0Ly8gUmVmZXJlbmNlIGZyYW1lIGlzIGVhcmxpZXIgdGhhbiB0aGUgZmlyc3Qga2V5ZnJhbWUsIHNvIGp1c3QgdXNlIHRoZSBmaXJzdCBrZXlmcmFtZVxuXHRcdFx0Y29uc3Qgc3RhcnRJbmRleCA9IHJlZmVyZW5jZU9mZnNldDtcblx0XHRcdGNvbnN0IGVuZEluZGV4ID0gcmVmZXJlbmNlVmFsdWVTaXplIC0gcmVmZXJlbmNlT2Zmc2V0O1xuXHRcdFx0cmVmZXJlbmNlVmFsdWUgPSByZWZlcmVuY2VUcmFjay52YWx1ZXMuc2xpY2UoIHN0YXJ0SW5kZXgsIGVuZEluZGV4ICk7XG5cblx0XHR9IGVsc2UgaWYgKCByZWZlcmVuY2VUaW1lID49IHJlZmVyZW5jZVRyYWNrLnRpbWVzWyBsYXN0SW5kZXggXSApIHtcblxuXHRcdFx0Ly8gUmVmZXJlbmNlIGZyYW1lIGlzIGFmdGVyIHRoZSBsYXN0IGtleWZyYW1lLCBzbyBqdXN0IHVzZSB0aGUgbGFzdCBrZXlmcmFtZVxuXHRcdFx0Y29uc3Qgc3RhcnRJbmRleCA9IGxhc3RJbmRleCAqIHJlZmVyZW5jZVZhbHVlU2l6ZSArIHJlZmVyZW5jZU9mZnNldDtcblx0XHRcdGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHJlZmVyZW5jZVZhbHVlU2l6ZSAtIHJlZmVyZW5jZU9mZnNldDtcblx0XHRcdHJlZmVyZW5jZVZhbHVlID0gcmVmZXJlbmNlVHJhY2sudmFsdWVzLnNsaWNlKCBzdGFydEluZGV4LCBlbmRJbmRleCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSW50ZXJwb2xhdGUgdG8gdGhlIHJlZmVyZW5jZSB2YWx1ZVxuXHRcdFx0Y29uc3QgaW50ZXJwb2xhbnQgPSByZWZlcmVuY2VUcmFjay5jcmVhdGVJbnRlcnBvbGFudCgpO1xuXHRcdFx0Y29uc3Qgc3RhcnRJbmRleCA9IHJlZmVyZW5jZU9mZnNldDtcblx0XHRcdGNvbnN0IGVuZEluZGV4ID0gcmVmZXJlbmNlVmFsdWVTaXplIC0gcmVmZXJlbmNlT2Zmc2V0O1xuXHRcdFx0aW50ZXJwb2xhbnQuZXZhbHVhdGUoIHJlZmVyZW5jZVRpbWUgKTtcblx0XHRcdHJlZmVyZW5jZVZhbHVlID0gaW50ZXJwb2xhbnQucmVzdWx0QnVmZmVyLnNsaWNlKCBzdGFydEluZGV4LCBlbmRJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQ29uanVnYXRlIHRoZSBxdWF0ZXJuaW9uXG5cdFx0aWYgKCByZWZlcmVuY2VUcmFja1R5cGUgPT09ICdxdWF0ZXJuaW9uJyApIHtcblxuXHRcdFx0Y29uc3QgcmVmZXJlbmNlUXVhdCA9IG5ldyBRdWF0ZXJuaW9uKCkuZnJvbUFycmF5KCByZWZlcmVuY2VWYWx1ZSApLm5vcm1hbGl6ZSgpLmNvbmp1Z2F0ZSgpO1xuXHRcdFx0cmVmZXJlbmNlUXVhdC50b0FycmF5KCByZWZlcmVuY2VWYWx1ZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgdGhlIHJlZmVyZW5jZSB2YWx1ZSBmcm9tIGFsbCBvZiB0aGUgdHJhY2sgdmFsdWVzXG5cblx0XHRjb25zdCBudW1UaW1lcyA9IHRhcmdldFRyYWNrLnRpbWVzLmxlbmd0aDtcblx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBudW1UaW1lczsgKysgaiApIHtcblxuXHRcdFx0Y29uc3QgdmFsdWVTdGFydCA9IGogKiB0YXJnZXRWYWx1ZVNpemUgKyB0YXJnZXRPZmZzZXQ7XG5cblx0XHRcdGlmICggcmVmZXJlbmNlVHJhY2tUeXBlID09PSAncXVhdGVybmlvbicgKSB7XG5cblx0XHRcdFx0Ly8gTXVsdGlwbHkgdGhlIGNvbmp1Z2F0ZSBmb3IgcXVhdGVybmlvbiB0cmFjayB0eXBlc1xuXHRcdFx0XHRRdWF0ZXJuaW9uLm11bHRpcGx5UXVhdGVybmlvbnNGbGF0KFxuXHRcdFx0XHRcdHRhcmdldFRyYWNrLnZhbHVlcyxcblx0XHRcdFx0XHR2YWx1ZVN0YXJ0LFxuXHRcdFx0XHRcdHJlZmVyZW5jZVZhbHVlLFxuXHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0dGFyZ2V0VHJhY2sudmFsdWVzLFxuXHRcdFx0XHRcdHZhbHVlU3RhcnRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCB2YWx1ZUVuZCA9IHRhcmdldFZhbHVlU2l6ZSAtIHRhcmdldE9mZnNldCAqIDI7XG5cblx0XHRcdFx0Ly8gU3VidHJhY3QgZWFjaCB2YWx1ZSBmb3IgYWxsIG90aGVyIG51bWVyaWMgdHJhY2sgdHlwZXNcblx0XHRcdFx0Zm9yICggbGV0IGsgPSAwOyBrIDwgdmFsdWVFbmQ7ICsrIGsgKSB7XG5cblx0XHRcdFx0XHR0YXJnZXRUcmFjay52YWx1ZXNbIHZhbHVlU3RhcnQgKyBrIF0gLT0gcmVmZXJlbmNlVmFsdWVbIGsgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0dGFyZ2V0Q2xpcC5ibGVuZE1vZGUgPSBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZTtcblxuXHRyZXR1cm4gdGFyZ2V0Q2xpcDtcblxufVxuXG5jb25zdCBBbmltYXRpb25VdGlscyA9IHtcblx0Y29udmVydEFycmF5OiBjb252ZXJ0QXJyYXksXG5cdGlzVHlwZWRBcnJheTogaXNUeXBlZEFycmF5LFxuXHRnZXRLZXlmcmFtZU9yZGVyOiBnZXRLZXlmcmFtZU9yZGVyLFxuXHRzb3J0ZWRBcnJheTogc29ydGVkQXJyYXksXG5cdGZsYXR0ZW5KU09OOiBmbGF0dGVuSlNPTixcblx0c3ViY2xpcDogc3ViY2xpcCxcblx0bWFrZUNsaXBBZGRpdGl2ZTogbWFrZUNsaXBBZGRpdGl2ZVxufTtcblxuZXhwb3J0IHtcblx0Y29udmVydEFycmF5LFxuXHRpc1R5cGVkQXJyYXksXG5cdGdldEtleWZyYW1lT3JkZXIsXG5cdHNvcnRlZEFycmF5LFxuXHRmbGF0dGVuSlNPTixcblx0c3ViY2xpcCxcblx0bWFrZUNsaXBBZGRpdGl2ZSxcblx0QW5pbWF0aW9uVXRpbHNcbn07XG4iLCIvKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3Mgb2YgaW50ZXJwb2xhbnRzIG92ZXIgcGFyYW1ldHJpYyBzYW1wbGVzLlxuICpcbiAqIFRoZSBwYXJhbWV0ZXIgZG9tYWluIGlzIG9uZSBkaW1lbnNpb25hbCwgdHlwaWNhbGx5IHRoZSB0aW1lIG9yIGEgcGF0aFxuICogYWxvbmcgYSBjdXJ2ZSBkZWZpbmVkIGJ5IHRoZSBkYXRhLlxuICpcbiAqIFRoZSBzYW1wbGUgdmFsdWVzIGNhbiBoYXZlIGFueSBkaW1lbnNpb25hbGl0eSBhbmQgZGVyaXZlZCBjbGFzc2VzIG1heVxuICogYXBwbHkgc3BlY2lhbCBpbnRlcnByZXRhdGlvbnMgdG8gdGhlIGRhdGEuXG4gKlxuICogVGhpcyBjbGFzcyBwcm92aWRlcyB0aGUgaW50ZXJ2YWwgc2VlayBpbiBhIFRlbXBsYXRlIE1ldGhvZCwgZGVmZXJyaW5nXG4gKiB0aGUgYWN0dWFsIGludGVycG9sYXRpb24gdG8gZGVyaXZlZCBjbGFzc2VzLlxuICpcbiAqIFRpbWUgY29tcGxleGl0eSBpcyBPKDEpIGZvciBsaW5lYXIgYWNjZXNzIGNyb3NzaW5nIGF0IG1vc3QgdHdvIHBvaW50c1xuICogYW5kIE8obG9nIE4pIGZvciByYW5kb20gYWNjZXNzLCB3aGVyZSBOIGlzIHRoZSBudW1iZXIgb2YgcG9zaXRpb25zLlxuICpcbiAqIFJlZmVyZW5jZXM6XG4gKlxuICogXHRcdGh0dHA6Ly93d3cub29kZXNpZ24uY29tL3RlbXBsYXRlLW1ldGhvZC1wYXR0ZXJuLmh0bWxcbiAqXG4gKi9cblxuY2xhc3MgSW50ZXJwb2xhbnQge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnMgPSBwYXJhbWV0ZXJQb3NpdGlvbnM7XG5cdFx0dGhpcy5fY2FjaGVkSW5kZXggPSAwO1xuXG5cdFx0dGhpcy5yZXN1bHRCdWZmZXIgPSByZXN1bHRCdWZmZXIgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRyZXN1bHRCdWZmZXIgOiBuZXcgc2FtcGxlVmFsdWVzLmNvbnN0cnVjdG9yKCBzYW1wbGVTaXplICk7XG5cdFx0dGhpcy5zYW1wbGVWYWx1ZXMgPSBzYW1wbGVWYWx1ZXM7XG5cdFx0dGhpcy52YWx1ZVNpemUgPSBzYW1wbGVTaXplO1xuXG5cdFx0dGhpcy5zZXR0aW5ncyA9IG51bGw7XG5cdFx0dGhpcy5EZWZhdWx0U2V0dGluZ3NfID0ge307XG5cblx0fVxuXG5cdGV2YWx1YXRlKCB0ICkge1xuXG5cdFx0Y29uc3QgcHAgPSB0aGlzLnBhcmFtZXRlclBvc2l0aW9ucztcblx0XHRsZXQgaTEgPSB0aGlzLl9jYWNoZWRJbmRleCxcblx0XHRcdHQxID0gcHBbIGkxIF0sXG5cdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdHZhbGlkYXRlX2ludGVydmFsOiB7XG5cblx0XHRcdHNlZWs6IHtcblxuXHRcdFx0XHRsZXQgcmlnaHQ7XG5cblx0XHRcdFx0bGluZWFyX3NjYW46IHtcblxuXHRcdFx0XHRcdC8vLSBTZWUgaHR0cDovL2pzcGVyZi5jb20vY29tcGFyaXNvbi10by11bmRlZmluZWQvM1xuXHRcdFx0XHRcdC8vLSBzbG93ZXIgY29kZTpcblx0XHRcdFx0XHQvLy1cblx0XHRcdFx0XHQvLy0gXHRcdFx0XHRpZiAoIHQgPj0gdDEgfHwgdDEgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRmb3J3YXJkX3NjYW46IGlmICggISAoIHQgPCB0MSApICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgZ2l2ZVVwQXQgPSBpMSArIDI7IDsgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0MSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDAgKSBicmVhayBmb3J3YXJkX3NjYW47XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBhZnRlciBlbmRcblxuXHRcdFx0XHRcdFx0XHRcdGkxID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggaTEgLSAxICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggaTEgPT09IGdpdmVVcEF0ICkgYnJlYWs7IC8vIHRoaXMgbG9vcFxuXG5cdFx0XHRcdFx0XHRcdHQwID0gdDE7XG5cdFx0XHRcdFx0XHRcdHQxID0gcHBbICsrIGkxIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgaW5kZXhcblx0XHRcdFx0XHRcdHJpZ2h0ID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0YnJlYWsgbGluZWFyX3NjYW47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XG5cdFx0XHRcdFx0Ly8tXHRcdFx0XHRcdGlmICggdCA8IHQwIHx8IHQwID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhICggdCA+PSB0MCApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBsb29waW5nP1xuXG5cdFx0XHRcdFx0XHRjb25zdCB0MWdsb2JhbCA9IHBwWyAxIF07XG5cblx0XHRcdFx0XHRcdGlmICggdCA8IHQxZ2xvYmFsICkge1xuXG5cdFx0XHRcdFx0XHRcdGkxID0gMjsgLy8gKyAxLCB1c2luZyB0aGUgc2NhbiBmb3IgdGhlIGRldGFpbHNcblx0XHRcdFx0XHRcdFx0dDAgPSB0MWdsb2JhbDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBsaW5lYXIgcmV2ZXJzZSBzY2FuXG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBnaXZlVXBBdCA9IGkxIC0gMjsgOyApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHQwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBiZWZvcmUgc3RhcnRcblxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5jb3B5U2FtcGxlVmFsdWVfKCAwICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggaTEgPT09IGdpdmVVcEF0ICkgYnJlYWs7IC8vIHRoaXMgbG9vcFxuXG5cdFx0XHRcdFx0XHRcdHQxID0gdDA7XG5cdFx0XHRcdFx0XHRcdHQwID0gcHBbIC0tIGkxIC0gMSBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdCA+PSB0MCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIHdlIGhhdmUgYXJyaXZlZCBhdCB0aGUgc291Z2h0IGludGVydmFsXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWsgc2VlaztcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gcHJlcGFyZSBiaW5hcnkgc2VhcmNoIG9uIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIGluZGV4XG5cdFx0XHRcdFx0XHRyaWdodCA9IGkxO1xuXHRcdFx0XHRcdFx0aTEgPSAwO1xuXHRcdFx0XHRcdFx0YnJlYWsgbGluZWFyX3NjYW47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyB0aGUgaW50ZXJ2YWwgaXMgdmFsaWRcblxuXHRcdFx0XHRcdGJyZWFrIHZhbGlkYXRlX2ludGVydmFsO1xuXG5cdFx0XHRcdH0gLy8gbGluZWFyIHNjYW5cblxuXHRcdFx0XHQvLyBiaW5hcnkgc2VhcmNoXG5cblx0XHRcdFx0d2hpbGUgKCBpMSA8IHJpZ2h0ICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbWlkID0gKCBpMSArIHJpZ2h0ICkgPj4+IDE7XG5cblx0XHRcdFx0XHRpZiAoIHQgPCBwcFsgbWlkIF0gKSB7XG5cblx0XHRcdFx0XHRcdHJpZ2h0ID0gbWlkO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aTEgPSBtaWQgKyAxO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0MSA9IHBwWyBpMSBdO1xuXHRcdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdFx0XHQvLyBjaGVjayBib3VuZGFyeSBjYXNlcywgYWdhaW5cblxuXHRcdFx0XHRpZiAoIHQwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHQxID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpMSA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmNvcHlTYW1wbGVWYWx1ZV8oIGkxIC0gMSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSAvLyBzZWVrXG5cblx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cblx0XHRcdHRoaXMuaW50ZXJ2YWxDaGFuZ2VkXyggaTEsIHQwLCB0MSApO1xuXG5cdFx0fSAvLyB2YWxpZGF0ZV9pbnRlcnZhbFxuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJwb2xhdGVfKCBpMSwgdDAsIHQsIHQxICk7XG5cblx0fVxuXG5cdGdldFNldHRpbmdzXygpIHtcblxuXHRcdHJldHVybiB0aGlzLnNldHRpbmdzIHx8IHRoaXMuRGVmYXVsdFNldHRpbmdzXztcblxuXHR9XG5cblx0Y29weVNhbXBsZVZhbHVlXyggaW5kZXggKSB7XG5cblx0XHQvLyBjb3BpZXMgYSBzYW1wbGUgdmFsdWUgdG8gdGhlIHJlc3VsdCBidWZmZXJcblxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdG9mZnNldCA9IGluZGV4ICogc3RyaWRlO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID0gdmFsdWVzWyBvZmZzZXQgKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxuXHQvLyBUZW1wbGF0ZSBtZXRob2RzIGZvciBkZXJpdmVkIGNsYXNzZXM6XG5cblx0aW50ZXJwb2xhdGVfKCAvKiBpMSwgdDAsIHQsIHQxICovICkge1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCAnY2FsbCB0byBhYnN0cmFjdCBtZXRob2QnICk7XG5cdFx0Ly8gaW1wbGVtZW50YXRpb25zIHNoYWxsIHJldHVybiB0aGlzLnJlc3VsdEJ1ZmZlclxuXG5cdH1cblxuXHRpbnRlcnZhbENoYW5nZWRfKCAvKiBpMSwgdDAsIHQxICovICkge1xuXG5cdFx0Ly8gZW1wdHlcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgSW50ZXJwb2xhbnQgfTtcbiIsImltcG9ydCB7IFplcm9DdXJ2YXR1cmVFbmRpbmcsIFdyYXBBcm91bmRFbmRpbmcsIFplcm9TbG9wZUVuZGluZyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBJbnRlcnBvbGFudCB9IGZyb20gJy4uL0ludGVycG9sYW50LmpzJztcblxuLyoqXG4gKiBGYXN0IGFuZCBzaW1wbGUgY3ViaWMgc3BsaW5lIGludGVycG9sYW50LlxuICpcbiAqIEl0IHdhcyBkZXJpdmVkIGZyb20gYSBIZXJtaXRpYW4gY29uc3RydWN0aW9uIHNldHRpbmcgdGhlIGZpcnN0IGRlcml2YXRpdmVcbiAqIGF0IGVhY2ggc2FtcGxlIHBvc2l0aW9uIHRvIHRoZSBsaW5lYXIgc2xvcGUgYmV0d2VlbiBuZWlnaGJvcmluZyBwb3NpdGlvbnNcbiAqIG92ZXIgdGhlaXIgcGFyYW1ldGVyIGludGVydmFsLlxuICovXG5cbmNsYXNzIEN1YmljSW50ZXJwb2xhbnQgZXh0ZW5kcyBJbnRlcnBvbGFudCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0XHRzdXBlciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG5cdFx0dGhpcy5fd2VpZ2h0UHJldiA9IC0gMDtcblx0XHR0aGlzLl9vZmZzZXRQcmV2ID0gLSAwO1xuXHRcdHRoaXMuX3dlaWdodE5leHQgPSAtIDA7XG5cdFx0dGhpcy5fb2Zmc2V0TmV4dCA9IC0gMDtcblxuXHRcdHRoaXMuRGVmYXVsdFNldHRpbmdzXyA9IHtcblxuXHRcdFx0ZW5kaW5nU3RhcnQ6IFplcm9DdXJ2YXR1cmVFbmRpbmcsXG5cdFx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcblxuXHRcdH07XG5cblx0fVxuXG5cdGludGVydmFsQ2hhbmdlZF8oIGkxLCB0MCwgdDEgKSB7XG5cblx0XHRjb25zdCBwcCA9IHRoaXMucGFyYW1ldGVyUG9zaXRpb25zO1xuXHRcdGxldCBpUHJldiA9IGkxIC0gMixcblx0XHRcdGlOZXh0ID0gaTEgKyAxLFxuXG5cdFx0XHR0UHJldiA9IHBwWyBpUHJldiBdLFxuXHRcdFx0dE5leHQgPSBwcFsgaU5leHQgXTtcblxuXHRcdGlmICggdFByZXYgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy5nZXRTZXR0aW5nc18oKS5lbmRpbmdTdGFydCApIHtcblxuXHRcdFx0XHRjYXNlIFplcm9TbG9wZUVuZGluZzpcblxuXHRcdFx0XHRcdC8vIGYnKHQwKSA9IDBcblx0XHRcdFx0XHRpUHJldiA9IGkxO1xuXHRcdFx0XHRcdHRQcmV2ID0gMiAqIHQwIC0gdDE7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFdyYXBBcm91bmRFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmVcblx0XHRcdFx0XHRpUHJldiA9IHBwLmxlbmd0aCAtIDI7XG5cdFx0XHRcdFx0dFByZXYgPSB0MCArIHBwWyBpUHJldiBdIC0gcHBbIGlQcmV2ICsgMSBdO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogLy8gWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdFx0XHRcdFx0Ly8gZicnKHQwKSA9IDAgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXG5cdFx0XHRcdFx0aVByZXYgPSBpMTtcblx0XHRcdFx0XHR0UHJldiA9IHQxO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHROZXh0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nRW5kICkge1xuXG5cdFx0XHRcdGNhc2UgWmVyb1Nsb3BlRW5kaW5nOlxuXG5cdFx0XHRcdFx0Ly8gZicodE4pID0gMFxuXHRcdFx0XHRcdGlOZXh0ID0gaTE7XG5cdFx0XHRcdFx0dE5leHQgPSAyICogdDEgLSB0MDtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgV3JhcEFyb3VuZEVuZGluZzpcblxuXHRcdFx0XHRcdC8vIHVzZSB0aGUgb3RoZXIgZW5kIG9mIHRoZSBjdXJ2ZVxuXHRcdFx0XHRcdGlOZXh0ID0gMTtcblx0XHRcdFx0XHR0TmV4dCA9IHQxICsgcHBbIDEgXSAtIHBwWyAwIF07XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OiAvLyBaZXJvQ3VydmF0dXJlRW5kaW5nXG5cblx0XHRcdFx0XHQvLyBmJycodE4pID0gMCwgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXG5cdFx0XHRcdFx0aU5leHQgPSBpMSAtIDE7XG5cdFx0XHRcdFx0dE5leHQgPSB0MDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgaGFsZkR0ID0gKCB0MSAtIHQwICkgKiAwLjUsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZTtcblxuXHRcdHRoaXMuX3dlaWdodFByZXYgPSBoYWxmRHQgLyAoIHQwIC0gdFByZXYgKTtcblx0XHR0aGlzLl93ZWlnaHROZXh0ID0gaGFsZkR0IC8gKCB0TmV4dCAtIHQxICk7XG5cdFx0dGhpcy5fb2Zmc2V0UHJldiA9IGlQcmV2ICogc3RyaWRlO1xuXHRcdHRoaXMuX29mZnNldE5leHQgPSBpTmV4dCAqIHN0cmlkZTtcblxuXHR9XG5cblx0aW50ZXJwb2xhdGVfKCBpMSwgdDAsIHQsIHQxICkge1xuXG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvMSA9IGkxICogc3RyaWRlLFx0XHRvMCA9IG8xIC0gc3RyaWRlLFxuXHRcdFx0b1AgPSB0aGlzLl9vZmZzZXRQcmV2LCBcdG9OID0gdGhpcy5fb2Zmc2V0TmV4dCxcblx0XHRcdHdQID0gdGhpcy5fd2VpZ2h0UHJldixcdHdOID0gdGhpcy5fd2VpZ2h0TmV4dCxcblxuXHRcdFx0cCA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSxcblx0XHRcdHBwID0gcCAqIHAsXG5cdFx0XHRwcHAgPSBwcCAqIHA7XG5cblx0XHQvLyBldmFsdWF0ZSBwb2x5bm9taWFsc1xuXG5cdFx0Y29uc3Qgc1AgPSAtIHdQICogcHBwICsgMiAqIHdQICogcHAgLSB3UCAqIHA7XG5cdFx0Y29uc3QgczAgPSAoIDEgKyB3UCApICogcHBwICsgKCAtIDEuNSAtIDIgKiB3UCApICogcHAgKyAoIC0gMC41ICsgd1AgKSAqIHAgKyAxO1xuXHRcdGNvbnN0IHMxID0gKCAtIDEgLSB3TiApICogcHBwICsgKCAxLjUgKyB3TiApICogcHAgKyAwLjUgKiBwO1xuXHRcdGNvbnN0IHNOID0gd04gKiBwcHAgLSB3TiAqIHBwO1xuXG5cdFx0Ly8gY29tYmluZSBkYXRhIGxpbmVhcmx5XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0cmVzdWx0WyBpIF0gPVxuXHRcdFx0XHRcdHNQICogdmFsdWVzWyBvUCArIGkgXSArXG5cdFx0XHRcdFx0czAgKiB2YWx1ZXNbIG8wICsgaSBdICtcblx0XHRcdFx0XHRzMSAqIHZhbHVlc1sgbzEgKyBpIF0gK1xuXHRcdFx0XHRcdHNOICogdmFsdWVzWyBvTiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEN1YmljSW50ZXJwb2xhbnQgfTtcbiIsImltcG9ydCB7IEludGVycG9sYW50IH0gZnJvbSAnLi4vSW50ZXJwb2xhbnQuanMnO1xuXG5jbGFzcyBMaW5lYXJJbnRlcnBvbGFudCBleHRlbmRzIEludGVycG9sYW50IHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRcdHN1cGVyKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cblx0fVxuXG5cdGludGVycG9sYXRlXyggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblxuXHRcdFx0b2Zmc2V0MSA9IGkxICogc3RyaWRlLFxuXHRcdFx0b2Zmc2V0MCA9IG9mZnNldDEgLSBzdHJpZGUsXG5cblx0XHRcdHdlaWdodDEgPSAoIHQgLSB0MCApIC8gKCB0MSAtIHQwICksXG5cdFx0XHR3ZWlnaHQwID0gMSAtIHdlaWdodDE7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0cmVzdWx0WyBpIF0gPVxuXHRcdFx0XHRcdHZhbHVlc1sgb2Zmc2V0MCArIGkgXSAqIHdlaWdodDAgK1xuXHRcdFx0XHRcdHZhbHVlc1sgb2Zmc2V0MSArIGkgXSAqIHdlaWdodDE7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufVxuXG5cbmV4cG9ydCB7IExpbmVhckludGVycG9sYW50IH07XG4iLCJpbXBvcnQgeyBJbnRlcnBvbGFudCB9IGZyb20gJy4uL0ludGVycG9sYW50LmpzJztcblxuLyoqXG4gKlxuICogSW50ZXJwb2xhbnQgdGhhdCBldmFsdWF0ZXMgdG8gdGhlIHNhbXBsZSB2YWx1ZSBhdCB0aGUgcG9zaXRpb24gcHJlY2VkaW5nXG4gKiB0aGUgcGFyYW1ldGVyLlxuICovXG5cbmNsYXNzIERpc2NyZXRlSW50ZXJwb2xhbnQgZXh0ZW5kcyBJbnRlcnBvbGFudCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0XHRzdXBlciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG5cdH1cblxuXHRpbnRlcnBvbGF0ZV8oIGkxIC8qLCB0MCwgdCwgdDEgKi8gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jb3B5U2FtcGxlVmFsdWVfKCBpMSAtIDEgKTtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBEaXNjcmV0ZUludGVycG9sYW50IH07XG4iLCJpbXBvcnQge1xuXHRJbnRlcnBvbGF0ZUxpbmVhcixcblx0SW50ZXJwb2xhdGVTbW9vdGgsXG5cdEludGVycG9sYXRlRGlzY3JldGVcbn0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IEN1YmljSW50ZXJwb2xhbnQgfSBmcm9tICcuLi9tYXRoL2ludGVycG9sYW50cy9DdWJpY0ludGVycG9sYW50LmpzJztcbmltcG9ydCB7IExpbmVhckludGVycG9sYW50IH0gZnJvbSAnLi4vbWF0aC9pbnRlcnBvbGFudHMvTGluZWFySW50ZXJwb2xhbnQuanMnO1xuaW1wb3J0IHsgRGlzY3JldGVJbnRlcnBvbGFudCB9IGZyb20gJy4uL21hdGgvaW50ZXJwb2xhbnRzL0Rpc2NyZXRlSW50ZXJwb2xhbnQuanMnO1xuaW1wb3J0ICogYXMgQW5pbWF0aW9uVXRpbHMgZnJvbSAnLi9BbmltYXRpb25VdGlscy5qcyc7XG5cbmNsYXNzIEtleWZyYW1lVHJhY2sge1xuXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayBuYW1lIGlzIHVuZGVmaW5lZCcgKTtcblx0XHRpZiAoIHRpbWVzID09PSB1bmRlZmluZWQgfHwgdGltZXMubGVuZ3RoID09PSAwICkgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogbm8ga2V5ZnJhbWVzIGluIHRyYWNrIG5hbWVkICcgKyBuYW1lICk7XG5cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0dGhpcy50aW1lcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdGltZXMsIHRoaXMuVGltZUJ1ZmZlclR5cGUgKTtcblx0XHR0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdmFsdWVzLCB0aGlzLlZhbHVlQnVmZmVyVHlwZSApO1xuXG5cdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCBpbnRlcnBvbGF0aW9uIHx8IHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24gKTtcblxuXHR9XG5cblx0Ly8gU2VyaWFsaXphdGlvbiAoaW4gc3RhdGljIGNvbnRleHQsIGJlY2F1c2Ugb2YgY29uc3RydWN0b3IgaW52b2NhdGlvblxuXHQvLyBhbmQgYXV0b21hdGljIGludm9jYXRpb24gb2YgLnRvSlNPTik6XG5cblx0c3RhdGljIHRvSlNPTiggdHJhY2sgKSB7XG5cblx0XHRjb25zdCB0cmFja1R5cGUgPSB0cmFjay5jb25zdHJ1Y3RvcjtcblxuXHRcdGxldCBqc29uO1xuXG5cdFx0Ly8gZGVyaXZlZCBjbGFzc2VzIGNhbiBkZWZpbmUgYSBzdGF0aWMgdG9KU09OIG1ldGhvZFxuXHRcdGlmICggdHJhY2tUeXBlLnRvSlNPTiAhPT0gdGhpcy50b0pTT04gKSB7XG5cblx0XHRcdGpzb24gPSB0cmFja1R5cGUudG9KU09OKCB0cmFjayApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYnkgZGVmYXVsdCwgd2UgYXNzdW1lIHRoZSBkYXRhIGNhbiBiZSBzZXJpYWxpemVkIGFzLWlzXG5cdFx0XHRqc29uID0ge1xuXG5cdFx0XHRcdCduYW1lJzogdHJhY2submFtZSxcblx0XHRcdFx0J3RpbWVzJzogQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0cmFjay50aW1lcywgQXJyYXkgKSxcblx0XHRcdFx0J3ZhbHVlcyc6IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdHJhY2sudmFsdWVzLCBBcnJheSApXG5cblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IGludGVycG9sYXRpb24gPSB0cmFjay5nZXRJbnRlcnBvbGF0aW9uKCk7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhdGlvbiAhPT0gdHJhY2suRGVmYXVsdEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0anNvbi5pbnRlcnBvbGF0aW9uID0gaW50ZXJwb2xhdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0anNvbi50eXBlID0gdHJhY2suVmFsdWVUeXBlTmFtZTsgLy8gbWFuZGF0b3J5XG5cblx0XHRyZXR1cm4ganNvbjtcblxuXHR9XG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGUoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgRGlzY3JldGVJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH1cblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgTGluZWFySW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9XG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IEN1YmljSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9XG5cblx0c2V0SW50ZXJwb2xhdGlvbiggaW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdGxldCBmYWN0b3J5TWV0aG9kO1xuXG5cdFx0c3dpdGNoICggaW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZURpc2NyZXRlOlxuXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEludGVycG9sYXRlTGluZWFyOlxuXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZVNtb290aDpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHRpZiAoIGZhY3RvcnlNZXRob2QgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgbWVzc2FnZSA9ICd1bnN1cHBvcnRlZCBpbnRlcnBvbGF0aW9uIGZvciAnICtcblx0XHRcdFx0dGhpcy5WYWx1ZVR5cGVOYW1lICsgJyBrZXlmcmFtZSB0cmFjayBuYW1lZCAnICsgdGhpcy5uYW1lO1xuXG5cdFx0XHRpZiAoIHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBmYWxsIGJhY2sgdG8gZGVmYXVsdCwgdW5sZXNzIHRoZSBkZWZhdWx0IGl0c2VsZiBpcyBtZXNzZWQgdXBcblx0XHRcdFx0aWYgKCBpbnRlcnBvbGF0aW9uICE9PSB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggbWVzc2FnZSApOyAvLyBmYXRhbCwgaW4gdGhpcyBjYXNlXG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLktleWZyYW1lVHJhY2s6JywgbWVzc2FnZSApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNyZWF0ZUludGVycG9sYW50ID0gZmFjdG9yeU1ldGhvZDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRJbnRlcnBvbGF0aW9uKCkge1xuXG5cdFx0c3dpdGNoICggdGhpcy5jcmVhdGVJbnRlcnBvbGFudCApIHtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZURpc2NyZXRlO1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZUxpbmVhcjtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDpcblxuXHRcdFx0XHRyZXR1cm4gSW50ZXJwb2xhdGVTbW9vdGg7XG5cblx0XHR9XG5cblx0fVxuXG5cdGdldFZhbHVlU2l6ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5sZW5ndGggLyB0aGlzLnRpbWVzLmxlbmd0aDtcblxuXHR9XG5cblx0Ly8gbW92ZSBhbGwga2V5ZnJhbWVzIGVpdGhlciBmb3J3YXJkcyBvciBiYWNrd2FyZHMgaW4gdGltZVxuXHRzaGlmdCggdGltZU9mZnNldCApIHtcblxuXHRcdGlmICggdGltZU9mZnNldCAhPT0gMC4wICkge1xuXG5cdFx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICs9IHRpbWVPZmZzZXQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvLyBzY2FsZSBhbGwga2V5ZnJhbWUgdGltZXMgYnkgYSBmYWN0b3IgKHVzZWZ1bCBmb3IgZnJhbWUgPC0+IHNlY29uZHMgY29udmVyc2lvbnMpXG5cdHNjYWxlKCB0aW1lU2NhbGUgKSB7XG5cblx0XHRpZiAoIHRpbWVTY2FsZSAhPT0gMS4wICkge1xuXG5cdFx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICo9IHRpbWVTY2FsZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIHJlbW92ZXMga2V5ZnJhbWVzIGJlZm9yZSBhbmQgYWZ0ZXIgYW5pbWF0aW9uIHdpdGhvdXQgY2hhbmdpbmcgYW55IHZhbHVlcyB3aXRoaW4gdGhlIHJhbmdlIFtzdGFydFRpbWUsIGVuZFRpbWVdLlxuXHQvLyBJTVBPUlRBTlQ6IFdlIGRvIG5vdCBzaGlmdCBhcm91bmQga2V5cyB0byB0aGUgc3RhcnQgb2YgdGhlIHRyYWNrIHRpbWUsIGJlY2F1c2UgZm9yIGludGVycG9sYXRlZCBrZXlzIHRoaXMgd2lsbCBjaGFuZ2UgdGhlaXIgdmFsdWVzXG5cdHRyaW0oIHN0YXJ0VGltZSwgZW5kVGltZSApIHtcblxuXHRcdGNvbnN0IHRpbWVzID0gdGhpcy50aW1lcyxcblx0XHRcdG5LZXlzID0gdGltZXMubGVuZ3RoO1xuXG5cdFx0bGV0IGZyb20gPSAwLFxuXHRcdFx0dG8gPSBuS2V5cyAtIDE7XG5cblx0XHR3aGlsZSAoIGZyb20gIT09IG5LZXlzICYmIHRpbWVzWyBmcm9tIF0gPCBzdGFydFRpbWUgKSB7XG5cblx0XHRcdCsrIGZyb207XG5cblx0XHR9XG5cblx0XHR3aGlsZSAoIHRvICE9PSAtIDEgJiYgdGltZXNbIHRvIF0gPiBlbmRUaW1lICkge1xuXG5cdFx0XHQtLSB0bztcblxuXHRcdH1cblxuXHRcdCsrIHRvOyAvLyBpbmNsdXNpdmUgLT4gZXhjbHVzaXZlIGJvdW5kXG5cblx0XHRpZiAoIGZyb20gIT09IDAgfHwgdG8gIT09IG5LZXlzICkge1xuXG5cdFx0XHQvLyBlbXB0eSB0cmFja3MgYXJlIGZvcmJpZGRlbiwgc28ga2VlcCBhdCBsZWFzdCBvbmUga2V5ZnJhbWVcblx0XHRcdGlmICggZnJvbSA+PSB0byApIHtcblxuXHRcdFx0XHR0byA9IE1hdGgubWF4KCB0bywgMSApO1xuXHRcdFx0XHRmcm9tID0gdG8gLSAxO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCk7XG5cdFx0XHR0aGlzLnRpbWVzID0gdGltZXMuc2xpY2UoIGZyb20sIHRvICk7XG5cdFx0XHR0aGlzLnZhbHVlcyA9IHRoaXMudmFsdWVzLnNsaWNlKCBmcm9tICogc3RyaWRlLCB0byAqIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIGVuc3VyZSB3ZSBkbyBub3QgZ2V0IGEgR2FyYmFnZUluR2FyYmFnZU91dCBzaXR1YXRpb24sIG1ha2Ugc3VyZSB0cmFja3MgYXJlIGF0IGxlYXN0IG1pbmltYWxseSB2aWFibGVcblx0dmFsaWRhdGUoKSB7XG5cblx0XHRsZXQgdmFsaWQgPSB0cnVlO1xuXG5cdFx0Y29uc3QgdmFsdWVTaXplID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcblx0XHRpZiAoIHZhbHVlU2l6ZSAtIE1hdGguZmxvb3IoIHZhbHVlU2l6ZSApICE9PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogSW52YWxpZCB2YWx1ZSBzaXplIGluIHRyYWNrLicsIHRoaXMgKTtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXMsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcblxuXHRcdFx0bktleXMgPSB0aW1lcy5sZW5ndGg7XG5cblx0XHRpZiAoIG5LZXlzID09PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVHJhY2sgaXMgZW1wdHkuJywgdGhpcyApO1xuXHRcdFx0dmFsaWQgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGxldCBwcmV2VGltZSA9IG51bGw7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5LZXlzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjdXJyVGltZSA9IHRpbWVzWyBpIF07XG5cblx0XHRcdGlmICggdHlwZW9mIGN1cnJUaW1lID09PSAnbnVtYmVyJyAmJiBpc05hTiggY3VyclRpbWUgKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVGltZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgY3VyclRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwcmV2VGltZSAhPT0gbnVsbCAmJiBwcmV2VGltZSA+IGN1cnJUaW1lICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBPdXQgb2Ygb3JkZXIga2V5cy4nLCB0aGlzLCBpLCBjdXJyVGltZSwgcHJldlRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJldlRpbWUgPSBjdXJyVGltZTtcblxuXHRcdH1cblxuXHRcdGlmICggdmFsdWVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggQW5pbWF0aW9uVXRpbHMuaXNUeXBlZEFycmF5KCB2YWx1ZXMgKSApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSB2YWx1ZXNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggaXNOYU4oIHZhbHVlICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblxuXHR9XG5cblx0Ly8gcmVtb3ZlcyBlcXVpdmFsZW50IHNlcXVlbnRpYWwga2V5cyBhcyBjb21tb24gaW4gbW9ycGggdGFyZ2V0IHNlcXVlbmNlc1xuXHQvLyAoMCwwLDAsMCwxLDEsMSwwLDAsMCwwLDAsMCwwKSAtLT4gKDAsMCwxLDEsMCwwKVxuXHRvcHRpbWl6ZSgpIHtcblxuXHRcdC8vIHRpbWVzIG9yIHZhbHVlcyBtYXkgYmUgc2hhcmVkIHdpdGggb3RoZXIgdHJhY2tzLCBzbyBvdmVyd3JpdGluZyBpcyB1bnNhZmVcblx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXMuc2xpY2UoKSxcblx0XHRcdHZhbHVlcyA9IHRoaXMudmFsdWVzLnNsaWNlKCksXG5cdFx0XHRzdHJpZGUgPSB0aGlzLmdldFZhbHVlU2l6ZSgpLFxuXG5cdFx0XHRzbW9vdGhJbnRlcnBvbGF0aW9uID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uKCkgPT09IEludGVycG9sYXRlU21vb3RoLFxuXG5cdFx0XHRsYXN0SW5kZXggPSB0aW1lcy5sZW5ndGggLSAxO1xuXG5cdFx0bGV0IHdyaXRlSW5kZXggPSAxO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDwgbGFzdEluZGV4OyArKyBpICkge1xuXG5cdFx0XHRsZXQga2VlcCA9IGZhbHNlO1xuXG5cdFx0XHRjb25zdCB0aW1lID0gdGltZXNbIGkgXTtcblx0XHRcdGNvbnN0IHRpbWVOZXh0ID0gdGltZXNbIGkgKyAxIF07XG5cblx0XHRcdC8vIHJlbW92ZSBhZGphY2VudCBrZXlmcmFtZXMgc2NoZWR1bGVkIGF0IHRoZSBzYW1lIHRpbWVcblxuXHRcdFx0aWYgKCB0aW1lICE9PSB0aW1lTmV4dCAmJiAoIGkgIT09IDEgfHwgdGltZSAhPT0gdGltZXNbIDAgXSApICkge1xuXG5cdFx0XHRcdGlmICggISBzbW9vdGhJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIHVubmVjZXNzYXJ5IGtleWZyYW1lcyBzYW1lIGFzIHRoZWlyIG5laWdoYm9yc1xuXG5cdFx0XHRcdFx0Y29uc3Qgb2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdG9mZnNldFAgPSBvZmZzZXQgLSBzdHJpZGUsXG5cdFx0XHRcdFx0XHRvZmZzZXROID0gb2Zmc2V0ICsgc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHZhbHVlID0gdmFsdWVzWyBvZmZzZXQgKyBqIF07XG5cblx0XHRcdFx0XHRcdGlmICggdmFsdWUgIT09IHZhbHVlc1sgb2Zmc2V0UCArIGogXSB8fFxuXHRcdFx0XHRcdFx0XHR2YWx1ZSAhPT0gdmFsdWVzWyBvZmZzZXROICsgaiBdICkge1xuXG5cdFx0XHRcdFx0XHRcdGtlZXAgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRrZWVwID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaW4tcGxhY2UgY29tcGFjdGlvblxuXG5cdFx0XHRpZiAoIGtlZXAgKSB7XG5cblx0XHRcdFx0aWYgKCBpICE9PSB3cml0ZUluZGV4ICkge1xuXG5cdFx0XHRcdFx0dGltZXNbIHdyaXRlSW5kZXggXSA9IHRpbWVzWyBpIF07XG5cblx0XHRcdFx0XHRjb25zdCByZWFkT2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdHdyaXRlT2Zmc2V0ID0gd3JpdGVJbmRleCAqIHN0cmlkZTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdFx0XHR2YWx1ZXNbIHdyaXRlT2Zmc2V0ICsgaiBdID0gdmFsdWVzWyByZWFkT2Zmc2V0ICsgaiBdO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQrKyB3cml0ZUluZGV4O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBmbHVzaCBsYXN0IGtleWZyYW1lIChjb21wYWN0aW9uIGxvb2tzIGFoZWFkKVxuXG5cdFx0aWYgKCBsYXN0SW5kZXggPiAwICkge1xuXG5cdFx0XHR0aW1lc1sgd3JpdGVJbmRleCBdID0gdGltZXNbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRmb3IgKCBsZXQgcmVhZE9mZnNldCA9IGxhc3RJbmRleCAqIHN0cmlkZSwgd3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlLCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdHZhbHVlc1sgd3JpdGVPZmZzZXQgKyBqIF0gPSB2YWx1ZXNbIHJlYWRPZmZzZXQgKyBqIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Kysgd3JpdGVJbmRleDtcblxuXHRcdH1cblxuXHRcdGlmICggd3JpdGVJbmRleCAhPT0gdGltZXMubGVuZ3RoICkge1xuXG5cdFx0XHR0aGlzLnRpbWVzID0gdGltZXMuc2xpY2UoIDAsIHdyaXRlSW5kZXggKTtcblx0XHRcdHRoaXMudmFsdWVzID0gdmFsdWVzLnNsaWNlKCAwLCB3cml0ZUluZGV4ICogc3RyaWRlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnRpbWVzID0gdGltZXM7XG5cdFx0XHR0aGlzLnZhbHVlcyA9IHZhbHVlcztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdGNvbnN0IHRpbWVzID0gdGhpcy50aW1lcy5zbGljZSgpO1xuXHRcdGNvbnN0IHZhbHVlcyA9IHRoaXMudmFsdWVzLnNsaWNlKCk7XG5cblx0XHRjb25zdCBUeXBlZEtleWZyYW1lVHJhY2sgPSB0aGlzLmNvbnN0cnVjdG9yO1xuXHRcdGNvbnN0IHRyYWNrID0gbmV3IFR5cGVkS2V5ZnJhbWVUcmFjayggdGhpcy5uYW1lLCB0aW1lcywgdmFsdWVzICk7XG5cblx0XHQvLyBJbnRlcnBvbGFudCBhcmd1bWVudCB0byBjb25zdHJ1Y3RvciBpcyBub3Qgc2F2ZWQsIHNvIGNvcHkgdGhlIGZhY3RvcnkgbWV0aG9kIGRpcmVjdGx5LlxuXHRcdHRyYWNrLmNyZWF0ZUludGVycG9sYW50ID0gdGhpcy5jcmVhdGVJbnRlcnBvbGFudDtcblxuXHRcdHJldHVybiB0cmFjaztcblxuXHR9XG5cbn1cblxuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVGltZUJ1ZmZlclR5cGUgPSBGbG9hdDMyQXJyYXk7XG5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZUJ1ZmZlclR5cGUgPSBGbG9hdDMyQXJyYXk7XG5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5EZWZhdWx0SW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRlTGluZWFyO1xuXG5leHBvcnQgeyBLZXlmcmFtZVRyYWNrIH07XG4iLCJpbXBvcnQgeyBJbnRlcnBvbGF0ZURpc2NyZXRlIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IEtleWZyYW1lVHJhY2sgfSBmcm9tICcuLi9LZXlmcmFtZVRyYWNrLmpzJztcblxuLyoqXG4gKiBBIFRyYWNrIG9mIEJvb2xlYW4ga2V5ZnJhbWUgdmFsdWVzLlxuICovXG5jbGFzcyBCb29sZWFuS2V5ZnJhbWVUcmFjayBleHRlbmRzIEtleWZyYW1lVHJhY2sge1xuXG5cdC8vIE5vIGludGVycG9sYXRpb24gcGFyYW1ldGVyIGJlY2F1c2Ugb25seSBJbnRlcnBvbGF0ZURpc2NyZXRlIGlzIHZhbGlkLlxuXHRjb25zdHJ1Y3RvciggbmFtZSwgdGltZXMsIHZhbHVlcyApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB0aW1lcywgdmFsdWVzICk7XG5cblx0fVxuXG59XG5cbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZVR5cGVOYW1lID0gJ2Jvb2wnO1xuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlQnVmZmVyVHlwZSA9IEFycmF5O1xuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkRlZmF1bHRJbnRlcnBvbGF0aW9uID0gSW50ZXJwb2xhdGVEaXNjcmV0ZTtcbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIgPSB1bmRlZmluZWQ7XG5Cb29sZWFuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoID0gdW5kZWZpbmVkO1xuXG4vLyBOb3RlOiBBY3R1YWxseSB0aGlzIHRyYWNrIGNvdWxkIGhhdmUgYSBvcHRpbWl6ZWQgLyBjb21wcmVzc2VkXG4vLyByZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSB2YWx1ZSBhbmQgYSBjdXN0b20gaW50ZXJwb2xhbnQgdGhhdFxuLy8gY29tcHV0ZXMgXCJmaXJzdFZhbHVlIF4gaXNPZGQoIGluZGV4IClcIi5cblxuZXhwb3J0IHsgQm9vbGVhbktleWZyYW1lVHJhY2sgfTtcbiIsImltcG9ydCB7IEtleWZyYW1lVHJhY2sgfSBmcm9tICcuLi9LZXlmcmFtZVRyYWNrLmpzJztcblxuLyoqXG4gKiBBIFRyYWNrIG9mIGtleWZyYW1lIHZhbHVlcyB0aGF0IHJlcHJlc2VudCBjb2xvci5cbiAqL1xuY2xhc3MgQ29sb3JLZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7fVxuXG5Db2xvcktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAnY29sb3InO1xuLy8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxuLy8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXG5cbi8vIE5vdGU6IFZlcnkgYmFzaWMgaW1wbGVtZW50YXRpb24gYW5kIG5vdGhpbmcgc3BlY2lhbCB5ZXQuXG4vLyBIb3dldmVyLCB0aGlzIGlzIHRoZSBwbGFjZSBmb3IgY29sb3Igc3BhY2UgcGFyYW1ldGVyaXphdGlvbi5cblxuZXhwb3J0IHsgQ29sb3JLZXlmcmFtZVRyYWNrIH07XG4iLCJpbXBvcnQgeyBLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi4vS2V5ZnJhbWVUcmFjay5qcyc7XG5cbi8qKlxuICogQSBUcmFjayBvZiBudW1lcmljIGtleWZyYW1lIHZhbHVlcy5cbiAqL1xuY2xhc3MgTnVtYmVyS2V5ZnJhbWVUcmFjayBleHRlbmRzIEtleWZyYW1lVHJhY2sge31cblxuTnVtYmVyS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdudW1iZXInO1xuLy8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxuLy8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXG5cbmV4cG9ydCB7IE51bWJlcktleWZyYW1lVHJhY2sgfTtcbiIsImltcG9ydCB7IEludGVycG9sYW50IH0gZnJvbSAnLi4vSW50ZXJwb2xhbnQuanMnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4uL1F1YXRlcm5pb24uanMnO1xuXG4vKipcbiAqIFNwaGVyaWNhbCBsaW5lYXIgdW5pdCBxdWF0ZXJuaW9uIGludGVycG9sYW50LlxuICovXG5cbmNsYXNzIFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCBleHRlbmRzIEludGVycG9sYW50IHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRcdHN1cGVyKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cblx0fVxuXG5cdGludGVycG9sYXRlXyggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblxuXHRcdFx0YWxwaGEgPSAoIHQgLSB0MCApIC8gKCB0MSAtIHQwICk7XG5cblx0XHRsZXQgb2Zmc2V0ID0gaTEgKiBzdHJpZGU7XG5cblx0XHRmb3IgKCBsZXQgZW5kID0gb2Zmc2V0ICsgc3RyaWRlOyBvZmZzZXQgIT09IGVuZDsgb2Zmc2V0ICs9IDQgKSB7XG5cblx0XHRcdFF1YXRlcm5pb24uc2xlcnBGbGF0KCByZXN1bHQsIDAsIHZhbHVlcywgb2Zmc2V0IC0gc3RyaWRlLCB2YWx1ZXMsIG9mZnNldCwgYWxwaGEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50IH07XG4iLCJpbXBvcnQgeyBLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi4vS2V5ZnJhbWVUcmFjay5qcyc7XG5pbXBvcnQgeyBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQgfSBmcm9tICcuLi8uLi9tYXRoL2ludGVycG9sYW50cy9RdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQuanMnO1xuXG4vKipcbiAqIEEgVHJhY2sgb2YgcXVhdGVybmlvbiBrZXlmcmFtZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7XG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH1cblxufVxuXG5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdxdWF0ZXJuaW9uJztcbi8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcbi8vIERlZmF1bHRJbnRlcnBvbGF0aW9uIGlzIGluaGVyaXRlZDtcblF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGggPSB1bmRlZmluZWQ7XG5cbmV4cG9ydCB7IFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrIH07XG4iLCJpbXBvcnQgeyBJbnRlcnBvbGF0ZURpc2NyZXRlIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IEtleWZyYW1lVHJhY2sgfSBmcm9tICcuLi9LZXlmcmFtZVRyYWNrLmpzJztcblxuLyoqXG4gKiBBIFRyYWNrIHRoYXQgaW50ZXJwb2xhdGVzIFN0cmluZ3NcbiAqL1xuY2xhc3MgU3RyaW5nS2V5ZnJhbWVUcmFjayBleHRlbmRzIEtleWZyYW1lVHJhY2sge1xuXG5cdC8vIE5vIGludGVycG9sYXRpb24gcGFyYW1ldGVyIGJlY2F1c2Ugb25seSBJbnRlcnBvbGF0ZURpc2NyZXRlIGlzIHZhbGlkLlxuXHRjb25zdHJ1Y3RvciggbmFtZSwgdGltZXMsIHZhbHVlcyApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB0aW1lcywgdmFsdWVzICk7XG5cblx0fVxuXG59XG5cblN0cmluZ0tleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAnc3RyaW5nJztcblN0cmluZ0tleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlQnVmZmVyVHlwZSA9IEFycmF5O1xuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuRGVmYXVsdEludGVycG9sYXRpb24gPSBJbnRlcnBvbGF0ZURpc2NyZXRlO1xuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyID0gdW5kZWZpbmVkO1xuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoID0gdW5kZWZpbmVkO1xuXG5leHBvcnQgeyBTdHJpbmdLZXlmcmFtZVRyYWNrIH07XG4iLCJpbXBvcnQgeyBLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi4vS2V5ZnJhbWVUcmFjay5qcyc7XG5cbi8qKlxuICogQSBUcmFjayBvZiB2ZWN0b3JlZCBrZXlmcmFtZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIFZlY3RvcktleWZyYW1lVHJhY2sgZXh0ZW5kcyBLZXlmcmFtZVRyYWNrIHt9XG5cblZlY3RvcktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAndmVjdG9yJztcbi8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcbi8vIERlZmF1bHRJbnRlcnBvbGF0aW9uIGlzIGluaGVyaXRlZFxuXG5leHBvcnQgeyBWZWN0b3JLZXlmcmFtZVRyYWNrIH07XG4iLCJpbXBvcnQgKiBhcyBBbmltYXRpb25VdGlscyBmcm9tICcuL0FuaW1hdGlvblV0aWxzLmpzJztcbmltcG9ydCB7IEtleWZyYW1lVHJhY2sgfSBmcm9tICcuL0tleWZyYW1lVHJhY2suanMnO1xuaW1wb3J0IHsgQm9vbGVhbktleWZyYW1lVHJhY2sgfSBmcm9tICcuL3RyYWNrcy9Cb29sZWFuS2V5ZnJhbWVUcmFjay5qcyc7XG5pbXBvcnQgeyBDb2xvcktleWZyYW1lVHJhY2sgfSBmcm9tICcuL3RyYWNrcy9Db2xvcktleWZyYW1lVHJhY2suanMnO1xuaW1wb3J0IHsgTnVtYmVyS2V5ZnJhbWVUcmFjayB9IGZyb20gJy4vdHJhY2tzL051bWJlcktleWZyYW1lVHJhY2suanMnO1xuaW1wb3J0IHsgUXVhdGVybmlvbktleWZyYW1lVHJhY2sgfSBmcm9tICcuL3RyYWNrcy9RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjay5qcyc7XG5pbXBvcnQgeyBTdHJpbmdLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi90cmFja3MvU3RyaW5nS2V5ZnJhbWVUcmFjay5qcyc7XG5pbXBvcnQgeyBWZWN0b3JLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi90cmFja3MvVmVjdG9yS2V5ZnJhbWVUcmFjay5qcyc7XG5pbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuY2xhc3MgQW5pbWF0aW9uQ2xpcCB7XG5cblx0Y29uc3RydWN0b3IoIG5hbWUgPSAnJywgZHVyYXRpb24gPSAtIDEsIHRyYWNrcyA9IFtdLCBibGVuZE1vZGUgPSBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGUgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdHRoaXMudHJhY2tzID0gdHJhY2tzO1xuXHRcdHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcblx0XHR0aGlzLmJsZW5kTW9kZSA9IGJsZW5kTW9kZTtcblxuXHRcdHRoaXMudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcblxuXHRcdC8vIHRoaXMgbWVhbnMgaXQgc2hvdWxkIGZpZ3VyZSBvdXQgaXRzIGR1cmF0aW9uIGJ5IHNjYW5uaW5nIHRoZSB0cmFja3Ncblx0XHRpZiAoIHRoaXMuZHVyYXRpb24gPCAwICkge1xuXG5cdFx0XHR0aGlzLnJlc2V0RHVyYXRpb24oKTtcblxuXHRcdH1cblxuXHR9XG5cblxuXHRzdGF0aWMgcGFyc2UoIGpzb24gKSB7XG5cblx0XHRjb25zdCB0cmFja3MgPSBbXSxcblx0XHRcdGpzb25UcmFja3MgPSBqc29uLnRyYWNrcyxcblx0XHRcdGZyYW1lVGltZSA9IDEuMCAvICgganNvbi5mcHMgfHwgMS4wICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBqc29uVHJhY2tzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dHJhY2tzLnB1c2goIHBhcnNlS2V5ZnJhbWVUcmFjaygganNvblRyYWNrc1sgaSBdICkuc2NhbGUoIGZyYW1lVGltZSApICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBjbGlwID0gbmV3IHRoaXMoIGpzb24ubmFtZSwganNvbi5kdXJhdGlvbiwgdHJhY2tzLCBqc29uLmJsZW5kTW9kZSApO1xuXHRcdGNsaXAudXVpZCA9IGpzb24udXVpZDtcblxuXHRcdHJldHVybiBjbGlwO1xuXG5cdH1cblxuXHRzdGF0aWMgdG9KU09OKCBjbGlwICkge1xuXG5cdFx0Y29uc3QgdHJhY2tzID0gW10sXG5cdFx0XHRjbGlwVHJhY2tzID0gY2xpcC50cmFja3M7XG5cblx0XHRjb25zdCBqc29uID0ge1xuXG5cdFx0XHQnbmFtZSc6IGNsaXAubmFtZSxcblx0XHRcdCdkdXJhdGlvbic6IGNsaXAuZHVyYXRpb24sXG5cdFx0XHQndHJhY2tzJzogdHJhY2tzLFxuXHRcdFx0J3V1aWQnOiBjbGlwLnV1aWQsXG5cdFx0XHQnYmxlbmRNb2RlJzogY2xpcC5ibGVuZE1vZGVcblxuXHRcdH07XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBjbGlwVHJhY2tzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dHJhY2tzLnB1c2goIEtleWZyYW1lVHJhY2sudG9KU09OKCBjbGlwVHJhY2tzWyBpIF0gKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpzb247XG5cblx0fVxuXG5cdHN0YXRpYyBDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSggbmFtZSwgbW9ycGhUYXJnZXRTZXF1ZW5jZSwgZnBzLCBub0xvb3AgKSB7XG5cblx0XHRjb25zdCBudW1Nb3JwaFRhcmdldHMgPSBtb3JwaFRhcmdldFNlcXVlbmNlLmxlbmd0aDtcblx0XHRjb25zdCB0cmFja3MgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG51bU1vcnBoVGFyZ2V0czsgaSArKyApIHtcblxuXHRcdFx0bGV0IHRpbWVzID0gW107XG5cdFx0XHRsZXQgdmFsdWVzID0gW107XG5cblx0XHRcdHRpbWVzLnB1c2goXG5cdFx0XHRcdCggaSArIG51bU1vcnBoVGFyZ2V0cyAtIDEgKSAlIG51bU1vcnBoVGFyZ2V0cyxcblx0XHRcdFx0aSxcblx0XHRcdFx0KCBpICsgMSApICUgbnVtTW9ycGhUYXJnZXRzICk7XG5cblx0XHRcdHZhbHVlcy5wdXNoKCAwLCAxLCAwICk7XG5cblx0XHRcdGNvbnN0IG9yZGVyID0gQW5pbWF0aW9uVXRpbHMuZ2V0S2V5ZnJhbWVPcmRlciggdGltZXMgKTtcblx0XHRcdHRpbWVzID0gQW5pbWF0aW9uVXRpbHMuc29ydGVkQXJyYXkoIHRpbWVzLCAxLCBvcmRlciApO1xuXHRcdFx0dmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuc29ydGVkQXJyYXkoIHZhbHVlcywgMSwgb3JkZXIgKTtcblxuXHRcdFx0Ly8gaWYgdGhlcmUgaXMgYSBrZXkgYXQgdGhlIGZpcnN0IGZyYW1lLCBkdXBsaWNhdGUgaXQgYXMgdGhlXG5cdFx0XHQvLyBsYXN0IGZyYW1lIGFzIHdlbGwgZm9yIHBlcmZlY3QgbG9vcC5cblx0XHRcdGlmICggISBub0xvb3AgJiYgdGltZXNbIDAgXSA9PT0gMCApIHtcblxuXHRcdFx0XHR0aW1lcy5wdXNoKCBudW1Nb3JwaFRhcmdldHMgKTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlc1sgMCBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dHJhY2tzLnB1c2goXG5cdFx0XHRcdG5ldyBOdW1iZXJLZXlmcmFtZVRyYWNrKFxuXHRcdFx0XHRcdCcubW9ycGhUYXJnZXRJbmZsdWVuY2VzWycgKyBtb3JwaFRhcmdldFNlcXVlbmNlWyBpIF0ubmFtZSArICddJyxcblx0XHRcdFx0XHR0aW1lcywgdmFsdWVzXG5cdFx0XHRcdCkuc2NhbGUoIDEuMCAvIGZwcyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMoIG5hbWUsIC0gMSwgdHJhY2tzICk7XG5cblx0fVxuXG5cdHN0YXRpYyBmaW5kQnlOYW1lKCBvYmplY3RPckNsaXBBcnJheSwgbmFtZSApIHtcblxuXHRcdGxldCBjbGlwQXJyYXkgPSBvYmplY3RPckNsaXBBcnJheTtcblxuXHRcdGlmICggISBBcnJheS5pc0FycmF5KCBvYmplY3RPckNsaXBBcnJheSApICkge1xuXG5cdFx0XHRjb25zdCBvID0gb2JqZWN0T3JDbGlwQXJyYXk7XG5cdFx0XHRjbGlwQXJyYXkgPSBvLmdlb21ldHJ5ICYmIG8uZ2VvbWV0cnkuYW5pbWF0aW9ucyB8fCBvLmFuaW1hdGlvbnM7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjbGlwQXJyYXkubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIGNsaXBBcnJheVsgaSBdLm5hbWUgPT09IG5hbWUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGNsaXBBcnJheVsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cblx0c3RhdGljIENyZWF0ZUNsaXBzRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2VzKCBtb3JwaFRhcmdldHMsIGZwcywgbm9Mb29wICkge1xuXG5cdFx0Y29uc3QgYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHMgPSB7fTtcblxuXHRcdC8vIHRlc3RlZCB3aXRoIGh0dHBzOi8vcmVnZXgxMDEuY29tLyBvbiB0cmljayBzZXF1ZW5jZXNcblx0XHQvLyBzdWNoIGZsYW1pbmdvX2ZseUFfMDAzLCBmbGFtaW5nb19ydW4xXzAwMywgY3JkZWF0aDAwNTlcblx0XHRjb25zdCBwYXR0ZXJuID0gL14oW1xcdy1dKj8pKFtcXGRdKykkLztcblxuXHRcdC8vIHNvcnQgbW9ycGggdGFyZ2V0IG5hbWVzIGludG8gYW5pbWF0aW9uIGdyb3VwcyBiYXNlZFxuXHRcdC8vIHBhdHRlcm5zIGxpa2UgV2Fsa18wMDEsIFdhbGtfMDAyLCBSdW5fMDAxLCBSdW5fMDAyXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGkgXTtcblx0XHRcdGNvbnN0IHBhcnRzID0gbW9ycGhUYXJnZXQubmFtZS5tYXRjaCggcGF0dGVybiApO1xuXG5cdFx0XHRpZiAoIHBhcnRzICYmIHBhcnRzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdFx0Y29uc3QgbmFtZSA9IHBhcnRzWyAxIF07XG5cblx0XHRcdFx0bGV0IGFuaW1hdGlvbk1vcnBoVGFyZ2V0cyA9IGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF07XG5cblx0XHRcdFx0aWYgKCAhIGFuaW1hdGlvbk1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF0gPSBhbmltYXRpb25Nb3JwaFRhcmdldHMgPSBbXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YW5pbWF0aW9uTW9ycGhUYXJnZXRzLnB1c2goIG1vcnBoVGFyZ2V0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGNsaXBzID0gW107XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRjbGlwcy5wdXNoKCB0aGlzLkNyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlKCBuYW1lLCBhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdLCBmcHMsIG5vTG9vcCApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xpcHM7XG5cblx0fVxuXG5cdC8vIHBhcnNlIHRoZSBhbmltYXRpb24uaGllcmFyY2h5IGZvcm1hdFxuXHRzdGF0aWMgcGFyc2VBbmltYXRpb24oIGFuaW1hdGlvbiwgYm9uZXMgKSB7XG5cblx0XHRpZiAoICEgYW5pbWF0aW9uICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQW5pbWF0aW9uQ2xpcDogTm8gYW5pbWF0aW9uIGluIEpTT05Mb2FkZXIgZGF0YS4nICk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGFkZE5vbmVtcHR5VHJhY2sgPSBmdW5jdGlvbiAoIHRyYWNrVHlwZSwgdHJhY2tOYW1lLCBhbmltYXRpb25LZXlzLCBwcm9wZXJ0eU5hbWUsIGRlc3RUcmFja3MgKSB7XG5cblx0XHRcdC8vIG9ubHkgcmV0dXJuIHRyYWNrIGlmIHRoZXJlIGFyZSBhY3R1YWxseSBrZXlzLlxuXHRcdFx0aWYgKCBhbmltYXRpb25LZXlzLmxlbmd0aCAhPT0gMCApIHtcblxuXHRcdFx0XHRjb25zdCB0aW1lcyA9IFtdO1xuXHRcdFx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0XHRBbmltYXRpb25VdGlscy5mbGF0dGVuSlNPTiggYW5pbWF0aW9uS2V5cywgdGltZXMsIHZhbHVlcywgcHJvcGVydHlOYW1lICk7XG5cblx0XHRcdFx0Ly8gZW1wdHkga2V5cyBhcmUgZmlsdGVyZWQgb3V0LCBzbyBjaGVjayBhZ2FpblxuXHRcdFx0XHRpZiAoIHRpbWVzLmxlbmd0aCAhPT0gMCApIHtcblxuXHRcdFx0XHRcdGRlc3RUcmFja3MucHVzaCggbmV3IHRyYWNrVHlwZSggdHJhY2tOYW1lLCB0aW1lcywgdmFsdWVzICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHRjb25zdCB0cmFja3MgPSBbXTtcblxuXHRcdGNvbnN0IGNsaXBOYW1lID0gYW5pbWF0aW9uLm5hbWUgfHwgJ2RlZmF1bHQnO1xuXHRcdGNvbnN0IGZwcyA9IGFuaW1hdGlvbi5mcHMgfHwgMzA7XG5cdFx0Y29uc3QgYmxlbmRNb2RlID0gYW5pbWF0aW9uLmJsZW5kTW9kZTtcblxuXHRcdC8vIGF1dG9tYXRpYyBsZW5ndGggZGV0ZXJtaW5hdGlvbiBpbiBBbmltYXRpb25DbGlwLlxuXHRcdGxldCBkdXJhdGlvbiA9IGFuaW1hdGlvbi5sZW5ndGggfHwgLSAxO1xuXG5cdFx0Y29uc3QgaGllcmFyY2h5VHJhY2tzID0gYW5pbWF0aW9uLmhpZXJhcmNoeSB8fCBbXTtcblxuXHRcdGZvciAoIGxldCBoID0gMDsgaCA8IGhpZXJhcmNoeVRyYWNrcy5sZW5ndGg7IGggKysgKSB7XG5cblx0XHRcdGNvbnN0IGFuaW1hdGlvbktleXMgPSBoaWVyYXJjaHlUcmFja3NbIGggXS5rZXlzO1xuXG5cdFx0XHQvLyBza2lwIGVtcHR5IHRyYWNrc1xuXHRcdFx0aWYgKCAhIGFuaW1hdGlvbktleXMgfHwgYW5pbWF0aW9uS2V5cy5sZW5ndGggPT09IDAgKSBjb250aW51ZTtcblxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCB0YXJnZXRzXG5cdFx0XHRpZiAoIGFuaW1hdGlvbktleXNbIDAgXS5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0Ly8gZmlndXJlIG91dCBhbGwgbW9ycGggdGFyZ2V0cyB1c2VkIGluIHRoaXMgdHJhY2tcblx0XHRcdFx0Y29uc3QgbW9ycGhUYXJnZXROYW1lcyA9IHt9O1xuXG5cdFx0XHRcdGxldCBrO1xuXG5cdFx0XHRcdGZvciAoIGsgPSAwOyBrIDwgYW5pbWF0aW9uS2V5cy5sZW5ndGg7IGsgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGFuaW1hdGlvbktleXNbIGsgXS5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBtID0gMDsgbSA8IGFuaW1hdGlvbktleXNbIGsgXS5tb3JwaFRhcmdldHMubGVuZ3RoOyBtICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdG1vcnBoVGFyZ2V0TmFtZXNbIGFuaW1hdGlvbktleXNbIGsgXS5tb3JwaFRhcmdldHNbIG0gXSBdID0gLSAxO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGNyZWF0ZSBhIHRyYWNrIGZvciBlYWNoIG1vcnBoIHRhcmdldCB3aXRoIGFsbCB6ZXJvXG5cdFx0XHRcdC8vIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBleGNlcHQgZm9yIHRoZSBrZXlzIGluIHdoaWNoXG5cdFx0XHRcdC8vIHRoZSBtb3JwaFRhcmdldCBpcyBuYW1lZC5cblx0XHRcdFx0Zm9yICggY29uc3QgbW9ycGhUYXJnZXROYW1lIGluIG1vcnBoVGFyZ2V0TmFtZXMgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB0aW1lcyA9IFtdO1xuXHRcdFx0XHRcdGNvbnN0IHZhbHVlcyA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IG0gPSAwOyBtICE9PSBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgKysgbSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgYW5pbWF0aW9uS2V5ID0gYW5pbWF0aW9uS2V5c1sgayBdO1xuXG5cdFx0XHRcdFx0XHR0aW1lcy5wdXNoKCBhbmltYXRpb25LZXkudGltZSApO1xuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goICggYW5pbWF0aW9uS2V5Lm1vcnBoVGFyZ2V0ID09PSBtb3JwaFRhcmdldE5hbWUgKSA/IDEgOiAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0cmFja3MucHVzaCggbmV3IE51bWJlcktleWZyYW1lVHJhY2soICcubW9ycGhUYXJnZXRJbmZsdWVuY2VbJyArIG1vcnBoVGFyZ2V0TmFtZSArICddJywgdGltZXMsIHZhbHVlcyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGR1cmF0aW9uID0gbW9ycGhUYXJnZXROYW1lcy5sZW5ndGggKiBmcHM7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gLi4uYXNzdW1lIHNrZWxldGFsIGFuaW1hdGlvblxuXG5cdFx0XHRcdGNvbnN0IGJvbmVOYW1lID0gJy5ib25lc1snICsgYm9uZXNbIGggXS5uYW1lICsgJ10nO1xuXG5cdFx0XHRcdGFkZE5vbmVtcHR5VHJhY2soXG5cdFx0XHRcdFx0VmVjdG9yS2V5ZnJhbWVUcmFjaywgYm9uZU5hbWUgKyAnLnBvc2l0aW9uJyxcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAncG9zJywgdHJhY2tzICk7XG5cblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcblx0XHRcdFx0XHRRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaywgYm9uZU5hbWUgKyAnLnF1YXRlcm5pb24nLFxuXHRcdFx0XHRcdGFuaW1hdGlvbktleXMsICdyb3QnLCB0cmFja3MgKTtcblxuXHRcdFx0XHRhZGROb25lbXB0eVRyYWNrKFxuXHRcdFx0XHRcdFZlY3RvcktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5zY2FsZScsXG5cdFx0XHRcdFx0YW5pbWF0aW9uS2V5cywgJ3NjbCcsIHRyYWNrcyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRyYWNrcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2xpcCA9IG5ldyB0aGlzKCBjbGlwTmFtZSwgZHVyYXRpb24sIHRyYWNrcywgYmxlbmRNb2RlICk7XG5cblx0XHRyZXR1cm4gY2xpcDtcblxuXHR9XG5cblx0cmVzZXREdXJhdGlvbigpIHtcblxuXHRcdGNvbnN0IHRyYWNrcyA9IHRoaXMudHJhY2tzO1xuXHRcdGxldCBkdXJhdGlvbiA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSB0cmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCB0cmFjayA9IHRoaXMudHJhY2tzWyBpIF07XG5cblx0XHRcdGR1cmF0aW9uID0gTWF0aC5tYXgoIGR1cmF0aW9uLCB0cmFjay50aW1lc1sgdHJhY2sudGltZXMubGVuZ3RoIC0gMSBdICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJpbSgpIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy50cmFja3NbIGkgXS50cmltKCAwLCB0aGlzLmR1cmF0aW9uICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dmFsaWRhdGUoKSB7XG5cblx0XHRsZXQgdmFsaWQgPSB0cnVlO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YWxpZCA9IHZhbGlkICYmIHRoaXMudHJhY2tzWyBpIF0udmFsaWRhdGUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblxuXHR9XG5cblx0b3B0aW1pemUoKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudHJhY2tzWyBpIF0ub3B0aW1pemUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0cmFja3MucHVzaCggdGhpcy50cmFja3NbIGkgXS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMubmFtZSwgdGhpcy5kdXJhdGlvbiwgdHJhY2tzLCB0aGlzLmJsZW5kTW9kZSApO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b0pTT04oIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZSggdHlwZU5hbWUgKSB7XG5cblx0c3dpdGNoICggdHlwZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblxuXHRcdGNhc2UgJ3NjYWxhcic6XG5cdFx0Y2FzZSAnZG91YmxlJzpcblx0XHRjYXNlICdmbG9hdCc6XG5cdFx0Y2FzZSAnbnVtYmVyJzpcblx0XHRjYXNlICdpbnRlZ2VyJzpcblxuXHRcdFx0cmV0dXJuIE51bWJlcktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICd2ZWN0b3InOlxuXHRcdGNhc2UgJ3ZlY3RvcjInOlxuXHRcdGNhc2UgJ3ZlY3RvcjMnOlxuXHRcdGNhc2UgJ3ZlY3RvcjQnOlxuXG5cdFx0XHRyZXR1cm4gVmVjdG9yS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ2NvbG9yJzpcblxuXHRcdFx0cmV0dXJuIENvbG9yS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ3F1YXRlcm5pb24nOlxuXG5cdFx0XHRyZXR1cm4gUXVhdGVybmlvbktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdib29sJzpcblx0XHRjYXNlICdib29sZWFuJzpcblxuXHRcdFx0cmV0dXJuIEJvb2xlYW5LZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAnc3RyaW5nJzpcblxuXHRcdFx0cmV0dXJuIFN0cmluZ0tleWZyYW1lVHJhY2s7XG5cblx0fVxuXG5cdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFVuc3VwcG9ydGVkIHR5cGVOYW1lOiAnICsgdHlwZU5hbWUgKTtcblxufVxuXG5mdW5jdGlvbiBwYXJzZUtleWZyYW1lVHJhY2soIGpzb24gKSB7XG5cblx0aWYgKCBqc29uLnR5cGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIHR5cGUgdW5kZWZpbmVkLCBjYW4gbm90IHBhcnNlJyApO1xuXG5cdH1cblxuXHRjb25zdCB0cmFja1R5cGUgPSBnZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lKCBqc29uLnR5cGUgKTtcblxuXHRpZiAoIGpzb24udGltZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGNvbnN0IHRpbWVzID0gW10sIHZhbHVlcyA9IFtdO1xuXG5cdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oIGpzb24ua2V5cywgdGltZXMsIHZhbHVlcywgJ3ZhbHVlJyApO1xuXG5cdFx0anNvbi50aW1lcyA9IHRpbWVzO1xuXHRcdGpzb24udmFsdWVzID0gdmFsdWVzO1xuXG5cdH1cblxuXHQvLyBkZXJpdmVkIGNsYXNzZXMgY2FuIGRlZmluZSBhIHN0YXRpYyBwYXJzZSBtZXRob2Rcblx0aWYgKCB0cmFja1R5cGUucGFyc2UgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHJldHVybiB0cmFja1R5cGUucGFyc2UoIGpzb24gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gYnkgZGVmYXVsdCwgd2UgYXNzdW1lIGEgY29uc3RydWN0b3IgY29tcGF0aWJsZSB3aXRoIHRoZSBiYXNlXG5cdFx0cmV0dXJuIG5ldyB0cmFja1R5cGUoIGpzb24ubmFtZSwganNvbi50aW1lcywganNvbi52YWx1ZXMsIGpzb24uaW50ZXJwb2xhdGlvbiApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBBbmltYXRpb25DbGlwIH07XG4iLCJjb25zdCBDYWNoZSA9IHtcblxuXHRlbmFibGVkOiBmYWxzZSxcblxuXHRmaWxlczoge30sXG5cblx0YWRkOiBmdW5jdGlvbiAoIGtleSwgZmlsZSApIHtcblxuXHRcdGlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQ2FjaGUnLCAnQWRkaW5nIGtleTonLCBrZXkgKTtcblxuXHRcdHRoaXMuZmlsZXNbIGtleSBdID0gZmlsZTtcblxuXHR9LFxuXG5cdGdldDogZnVuY3Rpb24gKCBrZXkgKSB7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ1RIUkVFLkNhY2hlJywgJ0NoZWNraW5nIGtleTonLCBrZXkgKTtcblxuXHRcdHJldHVybiB0aGlzLmZpbGVzWyBrZXkgXTtcblxuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24gKCBrZXkgKSB7XG5cblx0XHRkZWxldGUgdGhpcy5maWxlc1sga2V5IF07XG5cblx0fSxcblxuXHRjbGVhcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5maWxlcyA9IHt9O1xuXG5cdH1cblxufTtcblxuXG5leHBvcnQgeyBDYWNoZSB9O1xuIiwiY2xhc3MgTG9hZGluZ01hbmFnZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRsZXQgaXNMb2FkaW5nID0gZmFsc2U7XG5cdFx0bGV0IGl0ZW1zTG9hZGVkID0gMDtcblx0XHRsZXQgaXRlbXNUb3RhbCA9IDA7XG5cdFx0bGV0IHVybE1vZGlmaWVyID0gdW5kZWZpbmVkO1xuXHRcdGNvbnN0IGhhbmRsZXJzID0gW107XG5cblx0XHQvLyBSZWZlciB0byAjNTY4OSBmb3IgdGhlIHJlYXNvbiB3aHkgd2UgZG9uJ3Qgc2V0IC5vblN0YXJ0XG5cdFx0Ly8gaW4gdGhlIGNvbnN0cnVjdG9yXG5cblx0XHR0aGlzLm9uU3RhcnQgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5vbkxvYWQgPSBvbkxvYWQ7XG5cdFx0dGhpcy5vblByb2dyZXNzID0gb25Qcm9ncmVzcztcblx0XHR0aGlzLm9uRXJyb3IgPSBvbkVycm9yO1xuXG5cdFx0dGhpcy5pdGVtU3RhcnQgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdFx0aXRlbXNUb3RhbCArKztcblxuXHRcdFx0aWYgKCBpc0xvYWRpbmcgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGlmICggc2NvcGUub25TdGFydCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0c2NvcGUub25TdGFydCggdXJsLCBpdGVtc0xvYWRlZCwgaXRlbXNUb3RhbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpc0xvYWRpbmcgPSB0cnVlO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuaXRlbUVuZCA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0XHRpdGVtc0xvYWRlZCArKztcblxuXHRcdFx0aWYgKCBzY29wZS5vblByb2dyZXNzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c2NvcGUub25Qcm9ncmVzcyggdXJsLCBpdGVtc0xvYWRlZCwgaXRlbXNUb3RhbCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXRlbXNMb2FkZWQgPT09IGl0ZW1zVG90YWwgKSB7XG5cblx0XHRcdFx0aXNMb2FkaW5nID0gZmFsc2U7XG5cblx0XHRcdFx0aWYgKCBzY29wZS5vbkxvYWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHNjb3BlLm9uTG9hZCgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMuaXRlbUVycm9yID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRcdGlmICggc2NvcGUub25FcnJvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLm9uRXJyb3IoIHVybCApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5yZXNvbHZlVVJMID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRcdGlmICggdXJsTW9kaWZpZXIgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHVybE1vZGlmaWVyKCB1cmwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdXJsO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuc2V0VVJMTW9kaWZpZXIgPSBmdW5jdGlvbiAoIHRyYW5zZm9ybSApIHtcblxuXHRcdFx0dXJsTW9kaWZpZXIgPSB0cmFuc2Zvcm07XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuYWRkSGFuZGxlciA9IGZ1bmN0aW9uICggcmVnZXgsIGxvYWRlciApIHtcblxuXHRcdFx0aGFuZGxlcnMucHVzaCggcmVnZXgsIGxvYWRlciApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0XHR0aGlzLnJlbW92ZUhhbmRsZXIgPSBmdW5jdGlvbiAoIHJlZ2V4ICkge1xuXG5cdFx0XHRjb25zdCBpbmRleCA9IGhhbmRsZXJzLmluZGV4T2YoIHJlZ2V4ICk7XG5cblx0XHRcdGlmICggaW5kZXggIT09IC0gMSApIHtcblxuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGluZGV4LCAyICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRIYW5kbGVyID0gZnVuY3Rpb24gKCBmaWxlICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBsOyBpICs9IDIgKSB7XG5cblx0XHRcdFx0Y29uc3QgcmVnZXggPSBoYW5kbGVyc1sgaSBdO1xuXHRcdFx0XHRjb25zdCBsb2FkZXIgPSBoYW5kbGVyc1sgaSArIDEgXTtcblxuXHRcdFx0XHRpZiAoIHJlZ2V4Lmdsb2JhbCApIHJlZ2V4Lmxhc3RJbmRleCA9IDA7IC8vIHNlZSAjMTc5MjBcblxuXHRcdFx0XHRpZiAoIHJlZ2V4LnRlc3QoIGZpbGUgKSApIHtcblxuXHRcdFx0XHRcdHJldHVybiBsb2FkZXI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fTtcblxuXHR9XG5cbn1cblxuY29uc3QgRGVmYXVsdExvYWRpbmdNYW5hZ2VyID0gLypAX19QVVJFX18qLyBuZXcgTG9hZGluZ01hbmFnZXIoKTtcblxuZXhwb3J0IHsgRGVmYXVsdExvYWRpbmdNYW5hZ2VyLCBMb2FkaW5nTWFuYWdlciB9O1xuIiwiaW1wb3J0IHsgRGVmYXVsdExvYWRpbmdNYW5hZ2VyIH0gZnJvbSAnLi9Mb2FkaW5nTWFuYWdlci5qcyc7XG5cbmNsYXNzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcblx0XHR0aGlzLndpdGhDcmVkZW50aWFscyA9IGZhbHNlO1xuXHRcdHRoaXMucGF0aCA9ICcnO1xuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gJyc7XG5cdFx0dGhpcy5yZXF1ZXN0SGVhZGVyID0ge307XG5cblx0fVxuXG5cdGxvYWQoIC8qIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICovICkge31cblxuXHRsb2FkQXN5bmMoIHVybCwgb25Qcm9ncmVzcyApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7XG5cblx0XHRcdHNjb3BlLmxvYWQoIHVybCwgcmVzb2x2ZSwgb25Qcm9ncmVzcywgcmVqZWN0ICk7XG5cblx0XHR9ICk7XG5cblx0fVxuXG5cdHBhcnNlKCAvKiBkYXRhICovICkge31cblxuXHRzZXRDcm9zc09yaWdpbiggY3Jvc3NPcmlnaW4gKSB7XG5cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gY3Jvc3NPcmlnaW47XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFdpdGhDcmVkZW50aWFscyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLndpdGhDcmVkZW50aWFscyA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRQYXRoKCBwYXRoICkge1xuXG5cdFx0dGhpcy5wYXRoID0gcGF0aDtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0UmVzb3VyY2VQYXRoKCByZXNvdXJjZVBhdGggKSB7XG5cblx0XHR0aGlzLnJlc291cmNlUGF0aCA9IHJlc291cmNlUGF0aDtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0UmVxdWVzdEhlYWRlciggcmVxdWVzdEhlYWRlciApIHtcblxuXHRcdHRoaXMucmVxdWVzdEhlYWRlciA9IHJlcXVlc3RIZWFkZXI7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkxvYWRlci5ERUZBVUxUX01BVEVSSUFMX05BTUUgPSAnX19ERUZBVUxUJztcblxuZXhwb3J0IHsgTG9hZGVyIH07XG4iLCJpbXBvcnQgeyBDYWNoZSB9IGZyb20gJy4vQ2FjaGUuanMnO1xuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSAnLi9Mb2FkZXIuanMnO1xuXG5jb25zdCBsb2FkaW5nID0ge307XG5cbmNsYXNzIEh0dHBFcnJvciBleHRlbmRzIEVycm9yIHtcblxuXHRjb25zdHJ1Y3RvciggbWVzc2FnZSwgcmVzcG9uc2UgKSB7XG5cblx0XHRzdXBlciggbWVzc2FnZSApO1xuXHRcdHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcblxuXHR9XG5cbn1cblxuY2xhc3MgRmlsZUxvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGlmICggdXJsID09PSB1bmRlZmluZWQgKSB1cmwgPSAnJztcblxuXHRcdGlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB1cmwgPSB0aGlzLnBhdGggKyB1cmw7XG5cblx0XHR1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCggdXJsICk7XG5cblx0XHRjb25zdCBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApO1xuXG5cdFx0aWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRcdHNldFRpbWVvdXQoICgpID0+IHtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggY2FjaGVkICk7XG5cblx0XHRcdFx0dGhpcy5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCAwICk7XG5cblx0XHRcdHJldHVybiBjYWNoZWQ7XG5cblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiByZXF1ZXN0IGlzIGR1cGxpY2F0ZVxuXG5cdFx0aWYgKCBsb2FkaW5nWyB1cmwgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsb2FkaW5nWyB1cmwgXS5wdXNoKCB7XG5cblx0XHRcdFx0b25Mb2FkOiBvbkxvYWQsXG5cdFx0XHRcdG9uUHJvZ3Jlc3M6IG9uUHJvZ3Jlc3MsXG5cdFx0XHRcdG9uRXJyb3I6IG9uRXJyb3JcblxuXHRcdFx0fSApO1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBJbml0aWFsaXNlIGFycmF5IGZvciBkdXBsaWNhdGUgcmVxdWVzdHNcblx0XHRsb2FkaW5nWyB1cmwgXSA9IFtdO1xuXG5cdFx0bG9hZGluZ1sgdXJsIF0ucHVzaCgge1xuXHRcdFx0b25Mb2FkOiBvbkxvYWQsXG5cdFx0XHRvblByb2dyZXNzOiBvblByb2dyZXNzLFxuXHRcdFx0b25FcnJvcjogb25FcnJvcixcblx0XHR9ICk7XG5cblx0XHQvLyBjcmVhdGUgcmVxdWVzdFxuXHRcdGNvbnN0IHJlcSA9IG5ldyBSZXF1ZXN0KCB1cmwsIHtcblx0XHRcdGhlYWRlcnM6IG5ldyBIZWFkZXJzKCB0aGlzLnJlcXVlc3RIZWFkZXIgKSxcblx0XHRcdGNyZWRlbnRpYWxzOiB0aGlzLndpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdzYW1lLW9yaWdpbicsXG5cdFx0XHQvLyBBbiBhYm9ydCBjb250cm9sbGVyIGNvdWxkIGJlIGFkZGVkIHdpdGhpbiBhIGZ1dHVyZSBQUlxuXHRcdH0gKTtcblxuXHRcdC8vIHJlY29yZCBzdGF0ZXMgKCBhdm9pZCBkYXRhIHJhY2UgKVxuXHRcdGNvbnN0IG1pbWVUeXBlID0gdGhpcy5taW1lVHlwZTtcblx0XHRjb25zdCByZXNwb25zZVR5cGUgPSB0aGlzLnJlc3BvbnNlVHlwZTtcblxuXHRcdC8vIHN0YXJ0IHRoZSBmZXRjaFxuXHRcdGZldGNoKCByZXEgKVxuXHRcdFx0LnRoZW4oIHJlc3BvbnNlID0+IHtcblxuXHRcdFx0XHRpZiAoIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwIHx8IHJlc3BvbnNlLnN0YXR1cyA9PT0gMCApIHtcblxuXHRcdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgcmV0dXJuIEhUVFAgU3RhdHVzIDAgd2hlbiB1c2luZyBub24taHR0cCBwcm90b2NvbFxuXHRcdFx0XHRcdC8vIGUuZy4gJ2ZpbGU6Ly8nIG9yICdkYXRhOi8vJy4gSGFuZGxlIGFzIHN1Y2Nlc3MuXG5cblx0XHRcdFx0XHRpZiAoIHJlc3BvbnNlLnN0YXR1cyA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRmlsZUxvYWRlcjogSFRUUCBTdGF0dXMgMCByZWNlaXZlZC4nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBXb3JrYXJvdW5kOiBDaGVja2luZyBpZiByZXNwb25zZS5ib2R5ID09PSB1bmRlZmluZWQgZm9yIEFsaXBheSBicm93c2VyICMyMzU0OFxuXG5cdFx0XHRcdFx0aWYgKCB0eXBlb2YgUmVhZGFibGVTdHJlYW0gPT09ICd1bmRlZmluZWQnIHx8IHJlc3BvbnNlLmJvZHkgPT09IHVuZGVmaW5lZCB8fCByZXNwb25zZS5ib2R5LmdldFJlYWRlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTtcblx0XHRcdFx0XHRjb25zdCByZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpO1xuXG5cdFx0XHRcdFx0Ly8gTmdpbnggbmVlZHMgWC1GaWxlLVNpemUgY2hlY2tcblx0XHRcdFx0XHQvLyBodHRwczovL3NlcnZlcmZhdWx0LmNvbS9xdWVzdGlvbnMvNDgyODc1L3doeS1kb2VzLW5naW54LXJlbW92ZS1jb250ZW50LWxlbmd0aC1oZWFkZXItZm9yLWNodW5rZWQtY29udGVudFxuXHRcdFx0XHRcdGNvbnN0IGNvbnRlbnRMZW5ndGggPSByZXNwb25zZS5oZWFkZXJzLmdldCggJ1gtRmlsZS1TaXplJyApIHx8IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCAnQ29udGVudC1MZW5ndGgnICk7XG5cdFx0XHRcdFx0Y29uc3QgdG90YWwgPSBjb250ZW50TGVuZ3RoID8gcGFyc2VJbnQoIGNvbnRlbnRMZW5ndGggKSA6IDA7XG5cdFx0XHRcdFx0Y29uc3QgbGVuZ3RoQ29tcHV0YWJsZSA9IHRvdGFsICE9PSAwO1xuXHRcdFx0XHRcdGxldCBsb2FkZWQgPSAwO1xuXG5cdFx0XHRcdFx0Ly8gcGVyaW9kaWNhbGx5IHJlYWQgZGF0YSBpbnRvIHRoZSBuZXcgc3RyZWFtIHRyYWNraW5nIHdoaWxlIGRvd25sb2FkIHByb2dyZXNzXG5cdFx0XHRcdFx0Y29uc3Qgc3RyZWFtID0gbmV3IFJlYWRhYmxlU3RyZWFtKCB7XG5cdFx0XHRcdFx0XHRzdGFydCggY29udHJvbGxlciApIHtcblxuXHRcdFx0XHRcdFx0XHRyZWFkRGF0YSgpO1xuXG5cdFx0XHRcdFx0XHRcdGZ1bmN0aW9uIHJlYWREYXRhKCkge1xuXG5cdFx0XHRcdFx0XHRcdFx0cmVhZGVyLnJlYWQoKS50aGVuKCAoIHsgZG9uZSwgdmFsdWUgfSApID0+IHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkb25lICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuY2xvc2UoKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsb2FkZWQgKz0gdmFsdWUuYnl0ZUxlbmd0aDtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBldmVudCA9IG5ldyBQcm9ncmVzc0V2ZW50KCAncHJvZ3Jlc3MnLCB7IGxlbmd0aENvbXB1dGFibGUsIGxvYWRlZCwgdG90YWwgfSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uUHJvZ3Jlc3MgKSBjYWxsYmFjay5vblByb2dyZXNzKCBldmVudCApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb250cm9sbGVyLmVucXVldWUoIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJlYWREYXRhKCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdH0sICggZSApID0+IHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Y29udHJvbGxlci5lcnJvciggZSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBSZXNwb25zZSggc3RyZWFtICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBIdHRwRXJyb3IoIGBmZXRjaCBmb3IgXCIke3Jlc3BvbnNlLnVybH1cIiByZXNwb25kZWQgd2l0aCAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gLCByZXNwb25zZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApXG5cdFx0XHQudGhlbiggcmVzcG9uc2UgPT4ge1xuXG5cdFx0XHRcdHN3aXRjaCAoIHJlc3BvbnNlVHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ2FycmF5YnVmZmVyJzpcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG5cblx0XHRcdFx0XHRjYXNlICdibG9iJzpcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcblxuXHRcdFx0XHRcdGNhc2UgJ2RvY3VtZW50JzpcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnRleHQoKVxuXHRcdFx0XHRcdFx0XHQudGhlbiggdGV4dCA9PiB7XG5cblx0XHRcdFx0XHRcdFx0XHRjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcoIHRleHQsIG1pbWVUeXBlICk7XG5cblx0XHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0Y2FzZSAnanNvbic6XG5cblx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHRpZiAoIG1pbWVUeXBlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBzbmlmZiBlbmNvZGluZ1xuXHRcdFx0XHRcdFx0XHRjb25zdCByZSA9IC9jaGFyc2V0PVwiPyhbXjtcIlxcc10qKVwiPy9pO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBleGVjID0gcmUuZXhlYyggbWltZVR5cGUgKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgbGFiZWwgPSBleGVjICYmIGV4ZWNbIDEgXSA/IGV4ZWNbIDEgXS50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCBsYWJlbCApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKS50aGVuKCBhYiA9PiBkZWNvZGVyLmRlY29kZSggYWIgKSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IClcblx0XHRcdC50aGVuKCBkYXRhID0+IHtcblxuXHRcdFx0XHQvLyBBZGQgdG8gY2FjaGUgb25seSBvbiBIVFRQIHN1Y2Nlc3MsIHNvIHRoYXQgd2UgZG8gbm90IGNhY2hlXG5cdFx0XHRcdC8vIGVycm9yIHJlc3BvbnNlIGJvZGllcyBhcyBwcm9wZXIgcmVzcG9uc2VzIHRvIHJlcXVlc3RzLlxuXHRcdFx0XHRDYWNoZS5hZGQoIHVybCwgZGF0YSApO1xuXG5cdFx0XHRcdGNvbnN0IGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkxvYWQgKSBjYWxsYmFjay5vbkxvYWQoIGRhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKVxuXHRcdFx0LmNhdGNoKCBlcnIgPT4ge1xuXG5cdFx0XHRcdC8vIEFib3J0IGVycm9ycyBhbmQgb3RoZXIgZXJyb3JzIGFyZSBoYW5kbGVkIHRoZSBzYW1lXG5cblx0XHRcdFx0Y29uc3QgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0aWYgKCBjYWxsYmFja3MgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdC8vIFdoZW4gb25Mb2FkIHdhcyBjYWxsZWQgYW5kIHVybCB3YXMgZGVsZXRlZCBpbiBgbG9hZGluZ2Bcblx0XHRcdFx0XHR0aGlzLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0XHR0aHJvdyBlcnI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uRXJyb3IgKSBjYWxsYmFjay5vbkVycm9yKCBlcnIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cblx0XHRcdH0gKVxuXHRcdFx0LmZpbmFsbHkoICgpID0+IHtcblxuXHRcdFx0XHR0aGlzLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdHRoaXMubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdH1cblxuXHRzZXRSZXNwb25zZVR5cGUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5yZXNwb25zZVR5cGUgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0TWltZVR5cGUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5taW1lVHlwZSA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5cbmV4cG9ydCB7IEZpbGVMb2FkZXIgfTtcbiIsImltcG9ydCB7IEFuaW1hdGlvbkNsaXAgfSBmcm9tICcuLi9hbmltYXRpb24vQW5pbWF0aW9uQ2xpcC5qcyc7XG5pbXBvcnQgeyBGaWxlTG9hZGVyIH0gZnJvbSAnLi9GaWxlTG9hZGVyLmpzJztcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4vTG9hZGVyLmpzJztcblxuY2xhc3MgQW5pbWF0aW9uTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0fVxuXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggSlNPTi5wYXJzZSggdGV4dCApICkgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICkge1xuXG5cdFx0XHRcdFx0b25FcnJvciggZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH1cblxuXHRwYXJzZSgganNvbiApIHtcblxuXHRcdGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGpzb24ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjbGlwID0gQW5pbWF0aW9uQ2xpcC5wYXJzZSgganNvblsgaSBdICk7XG5cblx0XHRcdGFuaW1hdGlvbnMucHVzaCggY2xpcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFuaW1hdGlvbnM7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgQW5pbWF0aW9uTG9hZGVyIH07XG4iLCJpbXBvcnQgeyBMaW5lYXJGaWx0ZXIgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgRmlsZUxvYWRlciB9IGZyb20gJy4vRmlsZUxvYWRlci5qcyc7XG5pbXBvcnQgeyBDb21wcmVzc2VkVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL0NvbXByZXNzZWRUZXh0dXJlLmpzJztcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4vTG9hZGVyLmpzJztcblxuLyoqXG4gKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGJsb2NrIGJhc2VkIHRleHR1cmVzIGxvYWRlciAoZGRzLCBwdnIsIC4uLilcbiAqXG4gKiBTdWIgY2xhc3NlcyBoYXZlIHRvIGltcGxlbWVudCB0aGUgcGFyc2UoKSBtZXRob2Qgd2hpY2ggd2lsbCBiZSB1c2VkIGluIGxvYWQoKS5cbiAqL1xuXG5jbGFzcyBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGltYWdlcyA9IFtdO1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBDb21wcmVzc2VkVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXG5cdFx0bGV0IGxvYWRlZCA9IDA7XG5cblx0XHRmdW5jdGlvbiBsb2FkVGV4dHVyZSggaSApIHtcblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybFsgaSBdLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpbWFnZXNbIGkgXSA9IHtcblx0XHRcdFx0XHR3aWR0aDogdGV4RGF0YXMud2lkdGgsXG5cdFx0XHRcdFx0aGVpZ2h0OiB0ZXhEYXRhcy5oZWlnaHQsXG5cdFx0XHRcdFx0Zm9ybWF0OiB0ZXhEYXRhcy5mb3JtYXQsXG5cdFx0XHRcdFx0bWlwbWFwczogdGV4RGF0YXMubWlwbWFwc1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGxvYWRlZCArPSAxO1xuXG5cdFx0XHRcdGlmICggbG9hZGVkID09PSA2ICkge1xuXG5cdFx0XHRcdFx0aWYgKCB0ZXhEYXRhcy5taXBtYXBDb3VudCA9PT0gMSApIHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlcztcblx0XHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcblx0XHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHVybCApICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdXJsLmxlbmd0aDsgaSA8IGlsOyArKyBpICkge1xuXG5cdFx0XHRcdGxvYWRUZXh0dXJlKCBpICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGNvbXByZXNzZWQgY3ViZW1hcCB0ZXh0dXJlIHN0b3JlZCBpbiBhIHNpbmdsZSBERFMgZmlsZVxuXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLmlzQ3ViZW1hcCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGZhY2VzID0gdGV4RGF0YXMubWlwbWFwcy5sZW5ndGggLyB0ZXhEYXRhcy5taXBtYXBDb3VudDtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBmID0gMDsgZiA8IGZhY2VzOyBmICsrICkge1xuXG5cdFx0XHRcdFx0XHRpbWFnZXNbIGYgXSA9IHsgbWlwbWFwczogW10gfTtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4RGF0YXMubWlwbWFwQ291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0ubWlwbWFwcy5wdXNoKCB0ZXhEYXRhcy5taXBtYXBzWyBmICogdGV4RGF0YXMubWlwbWFwQ291bnQgKyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0uZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS53aWR0aCA9IHRleERhdGFzLndpZHRoO1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS5oZWlnaHQgPSB0ZXhEYXRhcy5oZWlnaHQ7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2UgPSBpbWFnZXM7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhcy53aWR0aDtcblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGFzLmhlaWdodDtcblx0XHRcdFx0XHR0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhcy5taXBtYXBzO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciB9O1xuIiwiaW1wb3J0IHsgQ2FjaGUgfSBmcm9tICcuL0NhY2hlLmpzJztcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4vTG9hZGVyLmpzJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnROUyB9IGZyb20gJy4uL3V0aWxzLmpzJztcblxuY2xhc3MgSW1hZ2VMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCAwICk7XG5cblx0XHRcdHJldHVybiBjYWNoZWQ7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbWFnZSA9IGNyZWF0ZUVsZW1lbnROUyggJ2ltZycgKTtcblxuXHRcdGZ1bmN0aW9uIG9uSW1hZ2VMb2FkKCkge1xuXG5cdFx0XHRyZW1vdmVFdmVudExpc3RlbmVycygpO1xuXG5cdFx0XHRDYWNoZS5hZGQoIHVybCwgdGhpcyApO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGhpcyApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25JbWFnZUVycm9yKCBldmVudCApIHtcblxuXHRcdFx0cmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcblxuXHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZXZlbnQgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuXG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApO1xuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBvbkltYWdlTG9hZCwgZmFsc2UgKTtcblx0XHRpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7XG5cblx0XHRpZiAoIHVybC5zbGljZSggMCwgNSApICE9PSAnZGF0YTonICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuY3Jvc3NPcmlnaW4gIT09IHVuZGVmaW5lZCApIGltYWdlLmNyb3NzT3JpZ2luID0gdGhpcy5jcm9zc09yaWdpbjtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdGltYWdlLnNyYyA9IHVybDtcblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBJbWFnZUxvYWRlciB9O1xuIiwiaW1wb3J0IHsgSW1hZ2VMb2FkZXIgfSBmcm9tICcuL0ltYWdlTG9hZGVyLmpzJztcbmltcG9ydCB7IEN1YmVUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvQ3ViZVRleHR1cmUuanMnO1xuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSAnLi9Mb2FkZXIuanMnO1xuaW1wb3J0IHsgU1JHQkNvbG9yU3BhY2UgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuXG5jbGFzcyBDdWJlVGV4dHVyZUxvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdH1cblxuXHRsb2FkKCB1cmxzLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCk7XG5cdFx0dGV4dHVyZS5jb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2U7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblxuXHRcdGxldCBsb2FkZWQgPSAwO1xuXG5cdFx0ZnVuY3Rpb24gbG9hZFRleHR1cmUoIGkgKSB7XG5cblx0XHRcdGxvYWRlci5sb2FkKCB1cmxzWyBpIF0sIGZ1bmN0aW9uICggaW1hZ2UgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5pbWFnZXNbIGkgXSA9IGltYWdlO1xuXG5cdFx0XHRcdGxvYWRlZCArKztcblxuXHRcdFx0XHRpZiAoIGxvYWRlZCA9PT0gNiApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIHVuZGVmaW5lZCwgb25FcnJvciApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdGxvYWRUZXh0dXJlKCBpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBDdWJlVGV4dHVyZUxvYWRlciB9O1xuIiwiaW1wb3J0IHsgTGluZWFyRmlsdGVyLCBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIsIENsYW1wVG9FZGdlV3JhcHBpbmcgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgRmlsZUxvYWRlciB9IGZyb20gJy4vRmlsZUxvYWRlci5qcyc7XG5pbXBvcnQgeyBEYXRhVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL0RhdGFUZXh0dXJlLmpzJztcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4vTG9hZGVyLmpzJztcblxuLyoqXG4gKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGxvYWQgZ2VuZXJpYyBiaW5hcnkgdGV4dHVyZXMgZm9ybWF0cyAocmdiZSwgaGRyLCAuLi4pXG4gKlxuICogU3ViIGNsYXNzZXMgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHBhcnNlKCkgbWV0aG9kIHdoaWNoIHdpbGwgYmUgdXNlZCBpbiBsb2FkKCkuXG4gKi9cblxuY2xhc3MgRGF0YVRleHR1cmVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCk7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuXHRcdGxvYWRlci5zZXRSZXF1ZXN0SGVhZGVyKCB0aGlzLnJlcXVlc3RIZWFkZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggc2NvcGUud2l0aENyZWRlbnRpYWxzICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRcdGxldCB0ZXhEYXRhO1xuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdHRleERhdGEgPSBzY29wZS5wYXJzZSggYnVmZmVyICk7XG5cblx0XHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG9uRXJyb3IoIGVycm9yICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGVycm9yICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleERhdGEuaW1hZ2UgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlID0gdGV4RGF0YS5pbWFnZTtcblxuXHRcdFx0fSBlbHNlIGlmICggdGV4RGF0YS5kYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5pbWFnZS53aWR0aCA9IHRleERhdGEud2lkdGg7XG5cdFx0XHRcdHRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gdGV4RGF0YS5oZWlnaHQ7XG5cdFx0XHRcdHRleHR1cmUuaW1hZ2UuZGF0YSA9IHRleERhdGEuZGF0YTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlLndyYXBTID0gdGV4RGF0YS53cmFwUyAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS53cmFwUyA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cdFx0XHR0ZXh0dXJlLndyYXBUID0gdGV4RGF0YS53cmFwVCAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS53cmFwVCA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cblx0XHRcdHRleHR1cmUubWFnRmlsdGVyID0gdGV4RGF0YS5tYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IHRleERhdGEubWFnRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSB0ZXhEYXRhLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS5taW5GaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdHRleHR1cmUuYW5pc290cm9weSA9IHRleERhdGEuYW5pc290cm9weSAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS5hbmlzb3Ryb3B5IDogMTtcblxuXHRcdFx0aWYgKCB0ZXhEYXRhLmNvbG9yU3BhY2UgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmNvbG9yU3BhY2UgPSB0ZXhEYXRhLmNvbG9yU3BhY2U7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXhEYXRhLmZsaXBZICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5mbGlwWSA9IHRleERhdGEuZmxpcFk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXhEYXRhLmZvcm1hdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YS5mb3JtYXQ7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXhEYXRhLnR5cGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSB0ZXhEYXRhLnR5cGU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXhEYXRhLm1pcG1hcHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhLm1pcG1hcHM7XG5cdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyOyAvLyBwcmVzdW1hYmx5Li4uXG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXhEYXRhLm1pcG1hcENvdW50ID09PSAxICkge1xuXG5cdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5nZW5lcmF0ZU1pcG1hcHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IHRleERhdGEuZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSwgdGV4RGF0YSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBEYXRhVGV4dHVyZUxvYWRlciB9O1xuIiwiaW1wb3J0IHsgSW1hZ2VMb2FkZXIgfSBmcm9tICcuL0ltYWdlTG9hZGVyLmpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9UZXh0dXJlLmpzJztcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4vTG9hZGVyLmpzJztcblxuY2xhc3MgVGV4dHVyZUxvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGltYWdlICkge1xuXG5cdFx0XHR0ZXh0dXJlLmltYWdlID0gaW1hZ2U7XG5cdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRvbkxvYWQoIHRleHR1cmUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgVGV4dHVyZUxvYWRlciB9O1xuIiwiaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5cbmNsYXNzIExpZ2h0IGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCBjb2xvciwgaW50ZW5zaXR5ID0gMSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzTGlnaHQgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpZ2h0JztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBpbnRlbnNpdHk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHQvLyBFbXB0eSBoZXJlIGluIGJhc2UgY2xhc3M7IHNvbWUgc3ViY2xhc3NlcyBvdmVycmlkZS5cblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0XHR0aGlzLmludGVuc2l0eSA9IHNvdXJjZS5pbnRlbnNpdHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3QuY29sb3IgPSB0aGlzLmNvbG9yLmdldEhleCgpO1xuXHRcdGRhdGEub2JqZWN0LmludGVuc2l0eSA9IHRoaXMuaW50ZW5zaXR5O1xuXG5cdFx0aWYgKCB0aGlzLmdyb3VuZENvbG9yICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5ncm91bmRDb2xvciA9IHRoaXMuZ3JvdW5kQ29sb3IuZ2V0SGV4KCk7XG5cblx0XHRpZiAoIHRoaXMuZGlzdGFuY2UgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LmRpc3RhbmNlID0gdGhpcy5kaXN0YW5jZTtcblx0XHRpZiAoIHRoaXMuYW5nbGUgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LmFuZ2xlID0gdGhpcy5hbmdsZTtcblx0XHRpZiAoIHRoaXMuZGVjYXkgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LmRlY2F5ID0gdGhpcy5kZWNheTtcblx0XHRpZiAoIHRoaXMucGVudW1icmEgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LnBlbnVtYnJhID0gdGhpcy5wZW51bWJyYTtcblxuXHRcdGlmICggdGhpcy5zaGFkb3cgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LnNoYWRvdyA9IHRoaXMuc2hhZG93LnRvSlNPTigpO1xuXHRcdGlmICggdGhpcy50YXJnZXQgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LnRhcmdldCA9IHRoaXMudGFyZ2V0LnV1aWQ7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgTGlnaHQgfTtcbiIsImltcG9ydCB7IExpZ2h0IH0gZnJvbSAnLi9MaWdodC5qcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcblxuY2xhc3MgSGVtaXNwaGVyZUxpZ2h0IGV4dGVuZHMgTGlnaHQge1xuXG5cdGNvbnN0cnVjdG9yKCBza3lDb2xvciwgZ3JvdW5kQ29sb3IsIGludGVuc2l0eSApIHtcblxuXHRcdHN1cGVyKCBza3lDb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0XHR0aGlzLmlzSGVtaXNwaGVyZUxpZ2h0ID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdIZW1pc3BoZXJlTGlnaHQnO1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5ERUZBVUxUX1VQICk7XG5cdFx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdHRoaXMuZ3JvdW5kQ29sb3IgPSBuZXcgQ29sb3IoIGdyb3VuZENvbG9yICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuZ3JvdW5kQ29sb3IuY29weSggc291cmNlLmdyb3VuZENvbG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgSGVtaXNwaGVyZUxpZ2h0IH07XG4iLCJpbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi4vbWF0aC9WZWN0b3I0LmpzJztcbmltcG9ydCB7IEZydXN0dW0gfSBmcm9tICcuLi9tYXRoL0ZydXN0dW0uanMnO1xuXG5jb25zdCBfcHJvalNjcmVlbk1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9saWdodFBvc2l0aW9uV29ybGQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbG9va1RhcmdldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgTGlnaHRTaGFkb3cge1xuXG5cdGNvbnN0cnVjdG9yKCBjYW1lcmEgKSB7XG5cblx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdHRoaXMuaW50ZW5zaXR5ID0gMTtcblxuXHRcdHRoaXMuYmlhcyA9IDA7XG5cdFx0dGhpcy5ub3JtYWxCaWFzID0gMDtcblx0XHR0aGlzLnJhZGl1cyA9IDE7XG5cdFx0dGhpcy5ibHVyU2FtcGxlcyA9IDg7XG5cblx0XHR0aGlzLm1hcFNpemUgPSBuZXcgVmVjdG9yMiggNTEyLCA1MTIgKTtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblx0XHR0aGlzLm1hcFBhc3MgPSBudWxsO1xuXHRcdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7XG5cdFx0dGhpcy5fZnJhbWVFeHRlbnRzID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdHRoaXMuX3ZpZXdwb3J0Q291bnQgPSAxO1xuXG5cdFx0dGhpcy5fdmlld3BvcnRzID0gW1xuXG5cdFx0XHRuZXcgVmVjdG9yNCggMCwgMCwgMSwgMSApXG5cblx0XHRdO1xuXG5cdH1cblxuXHRnZXRWaWV3cG9ydENvdW50KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZpZXdwb3J0Q291bnQ7XG5cblx0fVxuXG5cdGdldEZydXN0dW0oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJ1c3R1bTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cmljZXMoIGxpZ2h0ICkge1xuXG5cdFx0Y29uc3Qgc2hhZG93Q2FtZXJhID0gdGhpcy5jYW1lcmE7XG5cdFx0Y29uc3Qgc2hhZG93TWF0cml4ID0gdGhpcy5tYXRyaXg7XG5cblx0XHRfbGlnaHRQb3NpdGlvbldvcmxkLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRzaGFkb3dDYW1lcmEucG9zaXRpb24uY29weSggX2xpZ2h0UG9zaXRpb25Xb3JsZCApO1xuXG5cdFx0X2xvb2tUYXJnZXQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRzaGFkb3dDYW1lcmEubG9va0F0KCBfbG9va1RhcmdldCApO1xuXHRcdHNoYWRvd0NhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0X3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggc2hhZG93Q2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHR0aGlzLl9mcnVzdHVtLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdFx0c2hhZG93TWF0cml4LnNldChcblx0XHRcdDAuNSwgMC4wLCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC41LCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjUsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjAsIDEuMFxuXHRcdCk7XG5cblx0XHRzaGFkb3dNYXRyaXgubXVsdGlwbHkoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0fVxuXG5cdGdldFZpZXdwb3J0KCB2aWV3cG9ydEluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZpZXdwb3J0c1sgdmlld3BvcnRJbmRleCBdO1xuXG5cdH1cblxuXHRnZXRGcmFtZUV4dGVudHMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJhbWVFeHRlbnRzO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0aWYgKCB0aGlzLm1hcCApIHtcblxuXHRcdFx0dGhpcy5tYXAuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hcFBhc3MgKSB7XG5cblx0XHRcdHRoaXMubWFwUGFzcy5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuY2FtZXJhID0gc291cmNlLmNhbWVyYS5jbG9uZSgpO1xuXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBzb3VyY2UuaW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5iaWFzID0gc291cmNlLmJpYXM7XG5cdFx0dGhpcy5yYWRpdXMgPSBzb3VyY2UucmFkaXVzO1xuXG5cdFx0dGhpcy5tYXBTaXplLmNvcHkoIHNvdXJjZS5tYXBTaXplICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IG9iamVjdCA9IHt9O1xuXG5cdFx0aWYgKCB0aGlzLmludGVuc2l0eSAhPT0gMSApIG9iamVjdC5pbnRlbnNpdHkgPSB0aGlzLmludGVuc2l0eTtcblx0XHRpZiAoIHRoaXMuYmlhcyAhPT0gMCApIG9iamVjdC5iaWFzID0gdGhpcy5iaWFzO1xuXHRcdGlmICggdGhpcy5ub3JtYWxCaWFzICE9PSAwICkgb2JqZWN0Lm5vcm1hbEJpYXMgPSB0aGlzLm5vcm1hbEJpYXM7XG5cdFx0aWYgKCB0aGlzLnJhZGl1cyAhPT0gMSApIG9iamVjdC5yYWRpdXMgPSB0aGlzLnJhZGl1cztcblx0XHRpZiAoIHRoaXMubWFwU2l6ZS54ICE9PSA1MTIgfHwgdGhpcy5tYXBTaXplLnkgIT09IDUxMiApIG9iamVjdC5tYXBTaXplID0gdGhpcy5tYXBTaXplLnRvQXJyYXkoKTtcblxuXHRcdG9iamVjdC5jYW1lcmEgPSB0aGlzLmNhbWVyYS50b0pTT04oIGZhbHNlICkub2JqZWN0O1xuXHRcdGRlbGV0ZSBvYmplY3QuY2FtZXJhLm1hdHJpeDtcblxuXHRcdHJldHVybiBvYmplY3Q7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IExpZ2h0U2hhZG93IH07XG4iLCJpbXBvcnQgeyBMaWdodFNoYWRvdyB9IGZyb20gJy4vTGlnaHRTaGFkb3cuanMnO1xuaW1wb3J0ICogYXMgTWF0aFV0aWxzIGZyb20gJy4uL21hdGgvTWF0aFV0aWxzLmpzJztcbmltcG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhIH0gZnJvbSAnLi4vY2FtZXJhcy9QZXJzcGVjdGl2ZUNhbWVyYS5qcyc7XG5cbmNsYXNzIFNwb3RMaWdodFNoYWRvdyBleHRlbmRzIExpZ2h0U2hhZG93IHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIDUwLCAxLCAwLjUsIDUwMCApICk7XG5cblx0XHR0aGlzLmlzU3BvdExpZ2h0U2hhZG93ID0gdHJ1ZTtcblxuXHRcdHRoaXMuZm9jdXMgPSAxO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaWNlcyggbGlnaHQgKSB7XG5cblx0XHRjb25zdCBjYW1lcmEgPSB0aGlzLmNhbWVyYTtcblxuXHRcdGNvbnN0IGZvdiA9IE1hdGhVdGlscy5SQUQyREVHICogMiAqIGxpZ2h0LmFuZ2xlICogdGhpcy5mb2N1cztcblx0XHRjb25zdCBhc3BlY3QgPSB0aGlzLm1hcFNpemUud2lkdGggLyB0aGlzLm1hcFNpemUuaGVpZ2h0O1xuXHRcdGNvbnN0IGZhciA9IGxpZ2h0LmRpc3RhbmNlIHx8IGNhbWVyYS5mYXI7XG5cblx0XHRpZiAoIGZvdiAhPT0gY2FtZXJhLmZvdiB8fCBhc3BlY3QgIT09IGNhbWVyYS5hc3BlY3QgfHwgZmFyICE9PSBjYW1lcmEuZmFyICkge1xuXG5cdFx0XHRjYW1lcmEuZm92ID0gZm92O1xuXHRcdFx0Y2FtZXJhLmFzcGVjdCA9IGFzcGVjdDtcblx0XHRcdGNhbWVyYS5mYXIgPSBmYXI7XG5cdFx0XHRjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0fVxuXG5cdFx0c3VwZXIudXBkYXRlTWF0cmljZXMoIGxpZ2h0ICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5mb2N1cyA9IHNvdXJjZS5mb2N1cztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBTcG90TGlnaHRTaGFkb3cgfTtcbiIsImltcG9ydCB7IExpZ2h0IH0gZnJvbSAnLi9MaWdodC5qcyc7XG5pbXBvcnQgeyBTcG90TGlnaHRTaGFkb3cgfSBmcm9tICcuL1Nwb3RMaWdodFNoYWRvdy5qcyc7XG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xuXG5jbGFzcyBTcG90TGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlID0gMCwgYW5nbGUgPSBNYXRoLlBJIC8gMywgcGVudW1icmEgPSAwLCBkZWNheSA9IDIgKSB7XG5cblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xuXG5cdFx0dGhpcy5pc1Nwb3RMaWdodCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3BvdExpZ2h0JztcblxuXHRcdHRoaXMucG9zaXRpb24uY29weSggT2JqZWN0M0QuREVGQVVMVF9VUCApO1xuXHRcdHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0XHR0aGlzLnRhcmdldCA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdFx0dGhpcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuXHRcdHRoaXMuYW5nbGUgPSBhbmdsZTtcblx0XHR0aGlzLnBlbnVtYnJhID0gcGVudW1icmE7XG5cdFx0dGhpcy5kZWNheSA9IGRlY2F5O1xuXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5zaGFkb3cgPSBuZXcgU3BvdExpZ2h0U2hhZG93KCk7XG5cblx0fVxuXG5cdGdldCBwb3dlcigpIHtcblxuXHRcdC8vIGNvbXB1dGUgdGhlIGxpZ2h0J3MgbHVtaW5vdXMgcG93ZXIgKGluIGx1bWVucykgZnJvbSBpdHMgaW50ZW5zaXR5IChpbiBjYW5kZWxhKVxuXHRcdC8vIGJ5IGNvbnZlbnRpb24gZm9yIGEgc3BvdGxpZ2h0LCBsdW1pbm91cyBwb3dlciAobG0pID0gz4AgKiBsdW1pbm91cyBpbnRlbnNpdHkgKGNkKVxuXHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIE1hdGguUEk7XG5cblx0fVxuXG5cdHNldCBwb3dlciggcG93ZXIgKSB7XG5cblx0XHQvLyBzZXQgdGhlIGxpZ2h0J3MgaW50ZW5zaXR5IChpbiBjYW5kZWxhKSBmcm9tIHRoZSBkZXNpcmVkIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvIE1hdGguUEk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLnNoYWRvdy5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuZGlzdGFuY2UgPSBzb3VyY2UuZGlzdGFuY2U7XG5cdFx0dGhpcy5hbmdsZSA9IHNvdXJjZS5hbmdsZTtcblx0XHR0aGlzLnBlbnVtYnJhID0gc291cmNlLnBlbnVtYnJhO1xuXHRcdHRoaXMuZGVjYXkgPSBzb3VyY2UuZGVjYXk7XG5cblx0XHR0aGlzLnRhcmdldCA9IHNvdXJjZS50YXJnZXQuY2xvbmUoKTtcblxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFNwb3RMaWdodCB9O1xuIiwiaW1wb3J0IHsgTGlnaHRTaGFkb3cgfSBmcm9tICcuL0xpZ2h0U2hhZG93LmpzJztcbmltcG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhIH0gZnJvbSAnLi4vY2FtZXJhcy9QZXJzcGVjdGl2ZUNhbWVyYS5qcyc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi4vbWF0aC9WZWN0b3I0LmpzJztcblxuY29uc3QgX3Byb2pTY3JlZW5NYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfbGlnaHRQb3NpdGlvbldvcmxkID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2xvb2tUYXJnZXQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIFBvaW50TGlnaHRTaGFkb3cgZXh0ZW5kcyBMaWdodFNoYWRvdyB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlciggbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCA5MCwgMSwgMC41LCA1MDAgKSApO1xuXG5cdFx0dGhpcy5pc1BvaW50TGlnaHRTaGFkb3cgPSB0cnVlO1xuXG5cdFx0dGhpcy5fZnJhbWVFeHRlbnRzID0gbmV3IFZlY3RvcjIoIDQsIDIgKTtcblxuXHRcdHRoaXMuX3ZpZXdwb3J0Q291bnQgPSA2O1xuXG5cdFx0dGhpcy5fdmlld3BvcnRzID0gW1xuXHRcdFx0Ly8gVGhlc2Ugdmlld3BvcnRzIG1hcCBhIGN1YmUtbWFwIG9udG8gYSAyRCB0ZXh0dXJlIHdpdGggdGhlXG5cdFx0XHQvLyBmb2xsb3dpbmcgb3JpZW50YXRpb246XG5cdFx0XHQvL1xuXHRcdFx0Ly8gIHh6WFpcblx0XHRcdC8vICAgeSBZXG5cdFx0XHQvL1xuXHRcdFx0Ly8gWCAtIFBvc2l0aXZlIHggZGlyZWN0aW9uXG5cdFx0XHQvLyB4IC0gTmVnYXRpdmUgeCBkaXJlY3Rpb25cblx0XHRcdC8vIFkgLSBQb3NpdGl2ZSB5IGRpcmVjdGlvblxuXHRcdFx0Ly8geSAtIE5lZ2F0aXZlIHkgZGlyZWN0aW9uXG5cdFx0XHQvLyBaIC0gUG9zaXRpdmUgeiBkaXJlY3Rpb25cblx0XHRcdC8vIHogLSBOZWdhdGl2ZSB6IGRpcmVjdGlvblxuXG5cdFx0XHQvLyBwb3NpdGl2ZSBYXG5cdFx0XHRuZXcgVmVjdG9yNCggMiwgMSwgMSwgMSApLFxuXHRcdFx0Ly8gbmVnYXRpdmUgWFxuXHRcdFx0bmV3IFZlY3RvcjQoIDAsIDEsIDEsIDEgKSxcblx0XHRcdC8vIHBvc2l0aXZlIFpcblx0XHRcdG5ldyBWZWN0b3I0KCAzLCAxLCAxLCAxICksXG5cdFx0XHQvLyBuZWdhdGl2ZSBaXG5cdFx0XHRuZXcgVmVjdG9yNCggMSwgMSwgMSwgMSApLFxuXHRcdFx0Ly8gcG9zaXRpdmUgWVxuXHRcdFx0bmV3IFZlY3RvcjQoIDMsIDAsIDEsIDEgKSxcblx0XHRcdC8vIG5lZ2F0aXZlIFlcblx0XHRcdG5ldyBWZWN0b3I0KCAxLCAwLCAxLCAxIClcblx0XHRdO1xuXG5cdFx0dGhpcy5fY3ViZURpcmVjdGlvbnMgPSBbXG5cdFx0XHRuZXcgVmVjdG9yMyggMSwgMCwgMCApLCBuZXcgVmVjdG9yMyggLSAxLCAwLCAwICksIG5ldyBWZWN0b3IzKCAwLCAwLCAxICksXG5cdFx0XHRuZXcgVmVjdG9yMyggMCwgMCwgLSAxICksIG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIG5ldyBWZWN0b3IzKCAwLCAtIDEsIDAgKVxuXHRcdF07XG5cblx0XHR0aGlzLl9jdWJlVXBzID0gW1xuXHRcdFx0bmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSxcblx0XHRcdG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIG5ldyBWZWN0b3IzKCAwLCAwLCAxICksXHRuZXcgVmVjdG9yMyggMCwgMCwgLSAxIClcblx0XHRdO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaWNlcyggbGlnaHQsIHZpZXdwb3J0SW5kZXggPSAwICkge1xuXG5cdFx0Y29uc3QgY2FtZXJhID0gdGhpcy5jYW1lcmE7XG5cdFx0Y29uc3Qgc2hhZG93TWF0cml4ID0gdGhpcy5tYXRyaXg7XG5cblx0XHRjb25zdCBmYXIgPSBsaWdodC5kaXN0YW5jZSB8fCBjYW1lcmEuZmFyO1xuXG5cdFx0aWYgKCBmYXIgIT09IGNhbWVyYS5mYXIgKSB7XG5cblx0XHRcdGNhbWVyYS5mYXIgPSBmYXI7XG5cdFx0XHRjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0fVxuXG5cdFx0X2xpZ2h0UG9zaXRpb25Xb3JsZC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0Y2FtZXJhLnBvc2l0aW9uLmNvcHkoIF9saWdodFBvc2l0aW9uV29ybGQgKTtcblxuXHRcdF9sb29rVGFyZ2V0LmNvcHkoIGNhbWVyYS5wb3NpdGlvbiApO1xuXHRcdF9sb29rVGFyZ2V0LmFkZCggdGhpcy5fY3ViZURpcmVjdGlvbnNbIHZpZXdwb3J0SW5kZXggXSApO1xuXHRcdGNhbWVyYS51cC5jb3B5KCB0aGlzLl9jdWJlVXBzWyB2aWV3cG9ydEluZGV4IF0gKTtcblx0XHRjYW1lcmEubG9va0F0KCBfbG9va1RhcmdldCApO1xuXHRcdGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0c2hhZG93TWF0cml4Lm1ha2VUcmFuc2xhdGlvbiggLSBfbGlnaHRQb3NpdGlvbldvcmxkLngsIC0gX2xpZ2h0UG9zaXRpb25Xb3JsZC55LCAtIF9saWdodFBvc2l0aW9uV29ybGQueiApO1xuXG5cdFx0X3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHR0aGlzLl9mcnVzdHVtLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBQb2ludExpZ2h0U2hhZG93IH07XG4iLCJpbXBvcnQgeyBMaWdodCB9IGZyb20gJy4vTGlnaHQuanMnO1xuaW1wb3J0IHsgUG9pbnRMaWdodFNoYWRvdyB9IGZyb20gJy4vUG9pbnRMaWdodFNoYWRvdy5qcyc7XG5cbmNsYXNzIFBvaW50TGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlID0gMCwgZGVjYXkgPSAyICkge1xuXG5cdFx0c3VwZXIoIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHRcdHRoaXMuaXNQb2ludExpZ2h0ID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdQb2ludExpZ2h0JztcblxuXHRcdHRoaXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHR0aGlzLmRlY2F5ID0gZGVjYXk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IG5ldyBQb2ludExpZ2h0U2hhZG93KCk7XG5cblx0fVxuXG5cdGdldCBwb3dlcigpIHtcblxuXHRcdC8vIGNvbXB1dGUgdGhlIGxpZ2h0J3MgbHVtaW5vdXMgcG93ZXIgKGluIGx1bWVucykgZnJvbSBpdHMgaW50ZW5zaXR5IChpbiBjYW5kZWxhKVxuXHRcdC8vIGZvciBhbiBpc290cm9waWMgbGlnaHQgc291cmNlLCBsdW1pbm91cyBwb3dlciAobG0pID0gNCDPgCBsdW1pbm91cyBpbnRlbnNpdHkgKGNkKVxuXHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIDQgKiBNYXRoLlBJO1xuXG5cdH1cblxuXHRzZXQgcG93ZXIoIHBvd2VyICkge1xuXG5cdFx0Ly8gc2V0IHRoZSBsaWdodCdzIGludGVuc2l0eSAoaW4gY2FuZGVsYSkgZnJvbSB0aGUgZGVzaXJlZCBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKVxuXHRcdHRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyAoIDQgKiBNYXRoLlBJICk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLnNoYWRvdy5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuZGlzdGFuY2UgPSBzb3VyY2UuZGlzdGFuY2U7XG5cdFx0dGhpcy5kZWNheSA9IHNvdXJjZS5kZWNheTtcblxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFBvaW50TGlnaHQgfTtcbiIsImltcG9ydCB7IExpZ2h0U2hhZG93IH0gZnJvbSAnLi9MaWdodFNoYWRvdy5qcyc7XG5pbXBvcnQgeyBPcnRob2dyYXBoaWNDYW1lcmEgfSBmcm9tICcuLi9jYW1lcmFzL09ydGhvZ3JhcGhpY0NhbWVyYS5qcyc7XG5cbmNsYXNzIERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZXh0ZW5kcyBMaWdodFNoYWRvdyB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlciggbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSggLSA1LCA1LCA1LCAtIDUsIDAuNSwgNTAwICkgKTtcblxuXHRcdHRoaXMuaXNEaXJlY3Rpb25hbExpZ2h0U2hhZG93ID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgRGlyZWN0aW9uYWxMaWdodFNoYWRvdyB9O1xuIiwiaW1wb3J0IHsgTGlnaHQgfSBmcm9tICcuL0xpZ2h0LmpzJztcbmltcG9ydCB7IERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgfSBmcm9tICcuL0RpcmVjdGlvbmFsTGlnaHRTaGFkb3cuanMnO1xuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcblxuY2xhc3MgRGlyZWN0aW9uYWxMaWdodCBleHRlbmRzIExpZ2h0IHtcblxuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSApIHtcblxuXHRcdHN1cGVyKCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0XHR0aGlzLmlzRGlyZWN0aW9uYWxMaWdodCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnRGlyZWN0aW9uYWxMaWdodCc7XG5cblx0XHR0aGlzLnBvc2l0aW9uLmNvcHkoIE9iamVjdDNELkRFRkFVTFRfVVAgKTtcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdHRoaXMuc2hhZG93ID0gbmV3IERpcmVjdGlvbmFsTGlnaHRTaGFkb3coKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuc2hhZG93LmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnRhcmdldCA9IHNvdXJjZS50YXJnZXQuY2xvbmUoKTtcblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBEaXJlY3Rpb25hbExpZ2h0IH07XG4iLCJpbXBvcnQgeyBMaWdodCB9IGZyb20gJy4vTGlnaHQuanMnO1xuXG5jbGFzcyBBbWJpZW50TGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xuXG5cdFx0dGhpcy5pc0FtYmllbnRMaWdodCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnQW1iaWVudExpZ2h0JztcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQW1iaWVudExpZ2h0IH07XG4iLCJpbXBvcnQgeyBMaWdodCB9IGZyb20gJy4vTGlnaHQuanMnO1xuXG5jbGFzcyBSZWN0QXJlYUxpZ2h0IGV4dGVuZHMgTGlnaHQge1xuXG5cdGNvbnN0cnVjdG9yKCBjb2xvciwgaW50ZW5zaXR5LCB3aWR0aCA9IDEwLCBoZWlnaHQgPSAxMCApIHtcblxuXHRcdHN1cGVyKCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0XHR0aGlzLmlzUmVjdEFyZWFMaWdodCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnUmVjdEFyZWFMaWdodCc7XG5cblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0fVxuXG5cdGdldCBwb3dlcigpIHtcblxuXHRcdC8vIGNvbXB1dGUgdGhlIGxpZ2h0J3MgbHVtaW5vdXMgcG93ZXIgKGluIGx1bWVucykgZnJvbSBpdHMgaW50ZW5zaXR5IChpbiBuaXRzKVxuXHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodCAqIE1hdGguUEk7XG5cblx0fVxuXG5cdHNldCBwb3dlciggcG93ZXIgKSB7XG5cblx0XHQvLyBzZXQgdGhlIGxpZ2h0J3MgaW50ZW5zaXR5IChpbiBuaXRzKSBmcm9tIHRoZSBkZXNpcmVkIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICggdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0ICogTWF0aC5QSSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LndpZHRoID0gdGhpcy53aWR0aDtcblx0XHRkYXRhLm9iamVjdC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBSZWN0QXJlYUxpZ2h0IH07XG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzLmpzJztcblxuLyoqXG4gKiBQcmltYXJ5IHJlZmVyZW5jZTpcbiAqICAgaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmXG4gKlxuICogU2Vjb25kYXJ5IHJlZmVyZW5jZTpcbiAqICAgaHR0cHM6Ly93d3cucHBzbG9hbi5vcmcvcHVibGljYXRpb25zL1N0dXBpZFNIMzYucGRmXG4gKi9cblxuLy8gMy1iYW5kIFNIIGRlZmluZWQgYnkgOSBjb2VmZmljaWVudHNcblxuY2xhc3MgU3BoZXJpY2FsSGFybW9uaWNzMyB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHR0aGlzLmlzU3BoZXJpY2FsSGFybW9uaWNzMyA9IHRydWU7XG5cblx0XHR0aGlzLmNvZWZmaWNpZW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHMucHVzaCggbmV3IFZlY3RvcjMoKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXQoIGNvZWZmaWNpZW50cyApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uY29weSggY29lZmZpY2llbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR6ZXJvKCkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvLyBnZXQgdGhlIHJhZGlhbmNlIGluIHRoZSBkaXJlY3Rpb24gb2YgdGhlIG5vcm1hbFxuXHQvLyB0YXJnZXQgaXMgYSBWZWN0b3IzXG5cdGdldEF0KCBub3JtYWwsIHRhcmdldCApIHtcblxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoXG5cblx0XHRjb25zdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xuXG5cdFx0Y29uc3QgY29lZmYgPSB0aGlzLmNvZWZmaWNpZW50cztcblxuXHRcdC8vIGJhbmQgMFxuXHRcdHRhcmdldC5jb3B5KCBjb2VmZlsgMCBdICkubXVsdGlwbHlTY2FsYXIoIDAuMjgyMDk1ICk7XG5cblx0XHQvLyBiYW5kIDFcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgMSBdLCAwLjQ4ODYwMyAqIHkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgMiBdLCAwLjQ4ODYwMyAqIHogKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgMyBdLCAwLjQ4ODYwMyAqIHggKTtcblxuXHRcdC8vIGJhbmQgMlxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA0IF0sIDEuMDkyNTQ4ICogKCB4ICogeSApICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDUgXSwgMS4wOTI1NDggKiAoIHkgKiB6ICkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNiBdLCAwLjMxNTM5MiAqICggMy4wICogeiAqIHogLSAxLjAgKSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA3IF0sIDEuMDkyNTQ4ICogKCB4ICogeiApICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDggXSwgMC41NDYyNzQgKiAoIHggKiB4IC0geSAqIHkgKSApO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0Ly8gZ2V0IHRoZSBpcnJhZGlhbmNlIChyYWRpYW5jZSBjb252b2x2ZWQgd2l0aCBjb3NpbmUgbG9iZSkgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbm9ybWFsXG5cdC8vIHRhcmdldCBpcyBhIFZlY3RvcjNcblx0Ly8gaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmXG5cdGdldElycmFkaWFuY2VBdCggbm9ybWFsLCB0YXJnZXQgKSB7XG5cblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxuXG5cdFx0Y29uc3QgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcblxuXHRcdGNvbnN0IGNvZWZmID0gdGhpcy5jb2VmZmljaWVudHM7XG5cblx0XHQvLyBiYW5kIDBcblx0XHR0YXJnZXQuY29weSggY29lZmZbIDAgXSApLm11bHRpcGx5U2NhbGFyKCAwLjg4NjIyNyApOyAvLyDPgCAqIDAuMjgyMDk1XG5cblx0XHQvLyBiYW5kIDFcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgMSBdLCAyLjAgKiAwLjUxMTY2NCAqIHkgKTsgLy8gKCAyICogz4AgLyAzICkgKiAwLjQ4ODYwM1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAyIF0sIDIuMCAqIDAuNTExNjY0ICogeiApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAzIF0sIDIuMCAqIDAuNTExNjY0ICogeCApO1xuXG5cdFx0Ly8gYmFuZCAyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDQgXSwgMi4wICogMC40MjkwNDMgKiB4ICogeSApOyAvLyAoIM+AIC8gNCApICogMS4wOTI1NDhcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNSBdLCAyLjAgKiAwLjQyOTA0MyAqIHkgKiB6ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDYgXSwgMC43NDMxMjUgKiB6ICogeiAtIDAuMjQ3NzA4ICk7IC8vICggz4AgLyA0ICkgKiAwLjMxNTM5MiAqIDNcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNyBdLCAyLjAgKiAwLjQyOTA0MyAqIHggKiB6ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDggXSwgMC40MjkwNDMgKiAoIHggKiB4IC0geSAqIHkgKSApOyAvLyAoIM+AIC8gNCApICogMC41NDYyNzRcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdGFkZCggc2ggKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmFkZCggc2guY29lZmZpY2llbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRTY2FsZWRTSCggc2gsIHMgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmFkZFNjYWxlZFZlY3Rvciggc2guY29lZmZpY2llbnRzWyBpIF0sIHMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzY2FsZSggcyApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0ubXVsdGlwbHlTY2FsYXIoIHMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRsZXJwKCBzaCwgYWxwaGEgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmxlcnAoIHNoLmNvZWZmaWNpZW50c1sgaSBdLCBhbHBoYSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggc2ggKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHRpZiAoICEgdGhpcy5jb2VmZmljaWVudHNbIGkgXS5lcXVhbHMoIHNoLmNvZWZmaWNpZW50c1sgaSBdICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0Y29weSggc2ggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIHNoLmNvZWZmaWNpZW50cyApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGNvbnN0IGNvZWZmaWNpZW50cyA9IHRoaXMuY29lZmZpY2llbnRzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0Y29lZmZpY2llbnRzWyBpIF0uZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ICsgKCBpICogMyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGNvbnN0IGNvZWZmaWNpZW50cyA9IHRoaXMuY29lZmZpY2llbnRzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0Y29lZmZpY2llbnRzWyBpIF0udG9BcnJheSggYXJyYXksIG9mZnNldCArICggaSAqIDMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHQvLyBldmFsdWF0ZSB0aGUgYmFzaXMgZnVuY3Rpb25zXG5cdC8vIHNoQmFzaXMgaXMgYW4gQXJyYXlbIDkgXVxuXHRzdGF0aWMgZ2V0QmFzaXNBdCggbm9ybWFsLCBzaEJhc2lzICkge1xuXG5cdFx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGhcblxuXHRcdGNvbnN0IHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7XG5cblx0XHQvLyBiYW5kIDBcblx0XHRzaEJhc2lzWyAwIF0gPSAwLjI4MjA5NTtcblxuXHRcdC8vIGJhbmQgMVxuXHRcdHNoQmFzaXNbIDEgXSA9IDAuNDg4NjAzICogeTtcblx0XHRzaEJhc2lzWyAyIF0gPSAwLjQ4ODYwMyAqIHo7XG5cdFx0c2hCYXNpc1sgMyBdID0gMC40ODg2MDMgKiB4O1xuXG5cdFx0Ly8gYmFuZCAyXG5cdFx0c2hCYXNpc1sgNCBdID0gMS4wOTI1NDggKiB4ICogeTtcblx0XHRzaEJhc2lzWyA1IF0gPSAxLjA5MjU0OCAqIHkgKiB6O1xuXHRcdHNoQmFzaXNbIDYgXSA9IDAuMzE1MzkyICogKCAzICogeiAqIHogLSAxICk7XG5cdFx0c2hCYXNpc1sgNyBdID0gMS4wOTI1NDggKiB4ICogejtcblx0XHRzaEJhc2lzWyA4IF0gPSAwLjU0NjI3NCAqICggeCAqIHggLSB5ICogeSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBTcGhlcmljYWxIYXJtb25pY3MzIH07XG4iLCJpbXBvcnQgeyBTcGhlcmljYWxIYXJtb25pY3MzIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmljYWxIYXJtb25pY3MzLmpzJztcbmltcG9ydCB7IExpZ2h0IH0gZnJvbSAnLi9MaWdodC5qcyc7XG5cbmNsYXNzIExpZ2h0UHJvYmUgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIHNoID0gbmV3IFNwaGVyaWNhbEhhcm1vbmljczMoKSwgaW50ZW5zaXR5ID0gMSApIHtcblxuXHRcdHN1cGVyKCB1bmRlZmluZWQsIGludGVuc2l0eSApO1xuXG5cdFx0dGhpcy5pc0xpZ2h0UHJvYmUgPSB0cnVlO1xuXG5cdFx0dGhpcy5zaCA9IHNoO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuc2guY29weSggc291cmNlLnNoICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHR0aGlzLmludGVuc2l0eSA9IGpzb24uaW50ZW5zaXR5OyAvLyBUT0RPOiBNb3ZlIHRoaXMgYml0IHRvIExpZ2h0LmZyb21KU09OKCk7XG5cdFx0dGhpcy5zaC5mcm9tQXJyYXkoIGpzb24uc2ggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5zaCA9IHRoaXMuc2gudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IExpZ2h0UHJvYmUgfTtcbiIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uL21hdGgvVmVjdG9yNC5qcyc7XG5pbXBvcnQgeyBNYXRyaXgzIH0gZnJvbSAnLi4vbWF0aC9NYXRyaXgzLmpzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXRoL01hdHJpeDQuanMnO1xuaW1wb3J0IHsgRmlsZUxvYWRlciB9IGZyb20gJy4vRmlsZUxvYWRlci5qcyc7XG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlci5qcyc7XG5pbXBvcnQge1xuXHRTaGFkb3dNYXRlcmlhbCxcblx0U3ByaXRlTWF0ZXJpYWwsXG5cdFJhd1NoYWRlck1hdGVyaWFsLFxuXHRTaGFkZXJNYXRlcmlhbCxcblx0UG9pbnRzTWF0ZXJpYWwsXG5cdE1lc2hQaHlzaWNhbE1hdGVyaWFsLFxuXHRNZXNoU3RhbmRhcmRNYXRlcmlhbCxcblx0TWVzaFBob25nTWF0ZXJpYWwsXG5cdE1lc2hUb29uTWF0ZXJpYWwsXG5cdE1lc2hOb3JtYWxNYXRlcmlhbCxcblx0TWVzaExhbWJlcnRNYXRlcmlhbCxcblx0TWVzaERlcHRoTWF0ZXJpYWwsXG5cdE1lc2hEaXN0YW5jZU1hdGVyaWFsLFxuXHRNZXNoQmFzaWNNYXRlcmlhbCxcblx0TWVzaE1hdGNhcE1hdGVyaWFsLFxuXHRMaW5lRGFzaGVkTWF0ZXJpYWwsXG5cdExpbmVCYXNpY01hdGVyaWFsLFxuXHRNYXRlcmlhbCxcbn0gZnJvbSAnLi4vbWF0ZXJpYWxzL01hdGVyaWFscy5qcyc7XG5cbmNsYXNzIE1hdGVyaWFsTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cdFx0dGhpcy50ZXh0dXJlcyA9IHt9O1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHNjb3BlLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggc2NvcGUucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgKSB7XG5cblx0XHRcdFx0XHRvbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXG5cdFx0XHR9XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fVxuXG5cdHBhcnNlKCBqc29uICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSB0aGlzLnRleHR1cmVzO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0VGV4dHVyZSggbmFtZSApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWxMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlJywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0dXJlc1sgbmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBNYXRlcmlhbExvYWRlci5jcmVhdGVNYXRlcmlhbEZyb21UeXBlKCBqc29uLnR5cGUgKTtcblxuXHRcdGlmICgganNvbi51dWlkICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC51dWlkID0ganNvbi51dWlkO1xuXHRcdGlmICgganNvbi5uYW1lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5uYW1lID0ganNvbi5uYW1lO1xuXHRcdGlmICgganNvbi5jb2xvciAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLmNvbG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jb2xvci5zZXRIZXgoIGpzb24uY29sb3IgKTtcblx0XHRpZiAoIGpzb24ucm91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3VnaG5lc3MgPSBqc29uLnJvdWdobmVzcztcblx0XHRpZiAoIGpzb24ubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tZXRhbG5lc3MgPSBqc29uLm1ldGFsbmVzcztcblx0XHRpZiAoIGpzb24uc2hlZW4gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuID0ganNvbi5zaGVlbjtcblx0XHRpZiAoIGpzb24uc2hlZW5Db2xvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2hlZW5Db2xvciA9IG5ldyBDb2xvcigpLnNldEhleCgganNvbi5zaGVlbkNvbG9yICk7XG5cdFx0aWYgKCBqc29uLnNoZWVuUm91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGVlblJvdWdobmVzcyA9IGpzb24uc2hlZW5Sb3VnaG5lc3M7XG5cdFx0aWYgKCBqc29uLmVtaXNzaXZlICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWwuZW1pc3NpdmUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVtaXNzaXZlLnNldEhleCgganNvbi5lbWlzc2l2ZSApO1xuXHRcdGlmICgganNvbi5zcGVjdWxhciAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLnNwZWN1bGFyICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhci5zZXRIZXgoIGpzb24uc3BlY3VsYXIgKTtcblx0XHRpZiAoIGpzb24uc3BlY3VsYXJJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5ID0ganNvbi5zcGVjdWxhckludGVuc2l0eTtcblx0XHRpZiAoIGpzb24uc3BlY3VsYXJDb2xvciAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3Iuc2V0SGV4KCBqc29uLnNwZWN1bGFyQ29sb3IgKTtcblx0XHRpZiAoIGpzb24uc2hpbmluZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGluaW5lc3MgPSBqc29uLnNoaW5pbmVzcztcblx0XHRpZiAoIGpzb24uY2xlYXJjb2F0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhcmNvYXQgPSBqc29uLmNsZWFyY29hdDtcblx0XHRpZiAoIGpzb24uY2xlYXJjb2F0Um91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBqc29uLmNsZWFyY29hdFJvdWdobmVzcztcblx0XHRpZiAoIGpzb24uZGlzcGVyc2lvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGVyc2lvbiA9IGpzb24uZGlzcGVyc2lvbjtcblx0XHRpZiAoIGpzb24uaXJpZGVzY2VuY2UgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmlyaWRlc2NlbmNlID0ganNvbi5pcmlkZXNjZW5jZTtcblx0XHRpZiAoIGpzb24uaXJpZGVzY2VuY2VJT1IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmlyaWRlc2NlbmNlSU9SID0ganNvbi5pcmlkZXNjZW5jZUlPUjtcblx0XHRpZiAoIGpzb24uaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSA9IGpzb24uaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZTtcblx0XHRpZiAoIGpzb24udHJhbnNtaXNzaW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50cmFuc21pc3Npb24gPSBqc29uLnRyYW5zbWlzc2lvbjtcblx0XHRpZiAoIGpzb24udGhpY2tuZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50aGlja25lc3MgPSBqc29uLnRoaWNrbmVzcztcblx0XHRpZiAoIGpzb24uYXR0ZW51YXRpb25EaXN0YW5jZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZSA9IGpzb24uYXR0ZW51YXRpb25EaXN0YW5jZTtcblx0XHRpZiAoIGpzb24uYXR0ZW51YXRpb25Db2xvciAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLmF0dGVudWF0aW9uQ29sb3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmF0dGVudWF0aW9uQ29sb3Iuc2V0SGV4KCBqc29uLmF0dGVudWF0aW9uQ29sb3IgKTtcblx0XHRpZiAoIGpzb24uYW5pc290cm9weSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYW5pc290cm9weSA9IGpzb24uYW5pc290cm9weTtcblx0XHRpZiAoIGpzb24uYW5pc290cm9weVJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbmlzb3Ryb3B5Um90YXRpb24gPSBqc29uLmFuaXNvdHJvcHlSb3RhdGlvbjtcblx0XHRpZiAoIGpzb24uZm9nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mb2cgPSBqc29uLmZvZztcblx0XHRpZiAoIGpzb24uZmxhdFNoYWRpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZsYXRTaGFkaW5nID0ganNvbi5mbGF0U2hhZGluZztcblx0XHRpZiAoIGpzb24uYmxlbmRpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kaW5nID0ganNvbi5ibGVuZGluZztcblx0XHRpZiAoIGpzb24uY29tYmluZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY29tYmluZSA9IGpzb24uY29tYmluZTtcblx0XHRpZiAoIGpzb24uc2lkZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2lkZSA9IGpzb24uc2lkZTtcblx0XHRpZiAoIGpzb24uc2hhZG93U2lkZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2hhZG93U2lkZSA9IGpzb24uc2hhZG93U2lkZTtcblx0XHRpZiAoIGpzb24ub3BhY2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwub3BhY2l0eSA9IGpzb24ub3BhY2l0eTtcblx0XHRpZiAoIGpzb24udHJhbnNwYXJlbnQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnRyYW5zcGFyZW50ID0ganNvbi50cmFuc3BhcmVudDtcblx0XHRpZiAoIGpzb24uYWxwaGFUZXN0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbHBoYVRlc3QgPSBqc29uLmFscGhhVGVzdDtcblx0XHRpZiAoIGpzb24uYWxwaGFIYXNoICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbHBoYUhhc2ggPSBqc29uLmFscGhhSGFzaDtcblx0XHRpZiAoIGpzb24uZGVwdGhGdW5jICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZXB0aEZ1bmMgPSBqc29uLmRlcHRoRnVuYztcblx0XHRpZiAoIGpzb24uZGVwdGhUZXN0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZXB0aFRlc3QgPSBqc29uLmRlcHRoVGVzdDtcblx0XHRpZiAoIGpzb24uZGVwdGhXcml0ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGVwdGhXcml0ZSA9IGpzb24uZGVwdGhXcml0ZTtcblx0XHRpZiAoIGpzb24uY29sb3JXcml0ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY29sb3JXcml0ZSA9IGpzb24uY29sb3JXcml0ZTtcblx0XHRpZiAoIGpzb24uYmxlbmRTcmMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kU3JjID0ganNvbi5ibGVuZFNyYztcblx0XHRpZiAoIGpzb24uYmxlbmREc3QgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kRHN0ID0ganNvbi5ibGVuZERzdDtcblx0XHRpZiAoIGpzb24uYmxlbmRFcXVhdGlvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbiA9IGpzb24uYmxlbmRFcXVhdGlvbjtcblx0XHRpZiAoIGpzb24uYmxlbmRTcmNBbHBoYSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmRTcmNBbHBoYSA9IGpzb24uYmxlbmRTcmNBbHBoYTtcblx0XHRpZiAoIGpzb24uYmxlbmREc3RBbHBoYSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmREc3RBbHBoYSA9IGpzb24uYmxlbmREc3RBbHBoYTtcblx0XHRpZiAoIGpzb24uYmxlbmRFcXVhdGlvbkFscGhhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uQWxwaGEgPSBqc29uLmJsZW5kRXF1YXRpb25BbHBoYTtcblx0XHRpZiAoIGpzb24uYmxlbmRDb2xvciAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLmJsZW5kQ29sb3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kQ29sb3Iuc2V0SGV4KCBqc29uLmJsZW5kQ29sb3IgKTtcblx0XHRpZiAoIGpzb24uYmxlbmRBbHBoYSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmRBbHBoYSA9IGpzb24uYmxlbmRBbHBoYTtcblx0XHRpZiAoIGpzb24uc3RlbmNpbFdyaXRlTWFzayAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzayA9IGpzb24uc3RlbmNpbFdyaXRlTWFzaztcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZ1bmMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxGdW5jID0ganNvbi5zdGVuY2lsRnVuYztcblx0XHRpZiAoIGpzb24uc3RlbmNpbFJlZiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbFJlZiA9IGpzb24uc3RlbmNpbFJlZjtcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZ1bmNNYXNrICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsRnVuY01hc2sgPSBqc29uLnN0ZW5jaWxGdW5jTWFzaztcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZhaWwgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxGYWlsID0ganNvbi5zdGVuY2lsRmFpbDtcblx0XHRpZiAoIGpzb24uc3RlbmNpbFpGYWlsICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsWkZhaWwgPSBqc29uLnN0ZW5jaWxaRmFpbDtcblx0XHRpZiAoIGpzb24uc3RlbmNpbFpQYXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsWlBhc3MgPSBqc29uLnN0ZW5jaWxaUGFzcztcblx0XHRpZiAoIGpzb24uc3RlbmNpbFdyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsV3JpdGUgPSBqc29uLnN0ZW5jaWxXcml0ZTtcblxuXHRcdGlmICgganNvbi53aXJlZnJhbWUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZSA9IGpzb24ud2lyZWZyYW1lO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5ld2lkdGggIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aCA9IGpzb24ud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5lY2FwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWVMaW5lY2FwID0ganNvbi53aXJlZnJhbWVMaW5lY2FwO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5lam9pbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lTGluZWpvaW4gPSBqc29uLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0aWYgKCBqc29uLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3RhdGlvbiA9IGpzb24ucm90YXRpb247XG5cblx0XHRpZiAoIGpzb24ubGluZXdpZHRoICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5saW5ld2lkdGggPSBqc29uLmxpbmV3aWR0aDtcblx0XHRpZiAoIGpzb24uZGFzaFNpemUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRhc2hTaXplID0ganNvbi5kYXNoU2l6ZTtcblx0XHRpZiAoIGpzb24uZ2FwU2l6ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZ2FwU2l6ZSA9IGpzb24uZ2FwU2l6ZTtcblx0XHRpZiAoIGpzb24uc2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNjYWxlID0ganNvbi5zY2FsZTtcblxuXHRcdGlmICgganNvbi5wb2x5Z29uT2Zmc2V0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0ID0ganNvbi5wb2x5Z29uT2Zmc2V0O1xuXHRcdGlmICgganNvbi5wb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0RmFjdG9yID0ganNvbi5wb2x5Z29uT2Zmc2V0RmFjdG9yO1xuXHRcdGlmICgganNvbi5wb2x5Z29uT2Zmc2V0VW5pdHMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyA9IGpzb24ucG9seWdvbk9mZnNldFVuaXRzO1xuXG5cdFx0aWYgKCBqc29uLmRpdGhlcmluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGl0aGVyaW5nID0ganNvbi5kaXRoZXJpbmc7XG5cblx0XHRpZiAoIGpzb24uYWxwaGFUb0NvdmVyYWdlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbHBoYVRvQ292ZXJhZ2UgPSBqc29uLmFscGhhVG9Db3ZlcmFnZTtcblx0XHRpZiAoIGpzb24ucHJlbXVsdGlwbGllZEFscGhhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEgPSBqc29uLnByZW11bHRpcGxpZWRBbHBoYTtcblx0XHRpZiAoIGpzb24uZm9yY2VTaW5nbGVQYXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mb3JjZVNpbmdsZVBhc3MgPSBqc29uLmZvcmNlU2luZ2xlUGFzcztcblxuXHRcdGlmICgganNvbi52aXNpYmxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC52aXNpYmxlID0ganNvbi52aXNpYmxlO1xuXG5cdFx0aWYgKCBqc29uLnRvbmVNYXBwZWQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnRvbmVNYXBwZWQgPSBqc29uLnRvbmVNYXBwZWQ7XG5cblx0XHRpZiAoIGpzb24udXNlckRhdGEgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnVzZXJEYXRhID0ganNvbi51c2VyRGF0YTtcblxuXHRcdGlmICgganNvbi52ZXJ0ZXhDb2xvcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCB0eXBlb2YganNvbi52ZXJ0ZXhDb2xvcnMgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLnZlcnRleENvbG9ycyA9ICgganNvbi52ZXJ0ZXhDb2xvcnMgPiAwICkgPyB0cnVlIDogZmFsc2U7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwudmVydGV4Q29sb3JzID0ganNvbi52ZXJ0ZXhDb2xvcnM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFNoYWRlciBNYXRlcmlhbFxuXG5cdFx0aWYgKCBqc29uLnVuaWZvcm1zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IG5hbWUgaW4ganNvbi51bmlmb3JtcyApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtID0ganNvbi51bmlmb3Jtc1sgbmFtZSBdO1xuXG5cdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0gPSB7fTtcblxuXHRcdFx0XHRzd2l0Y2ggKCB1bmlmb3JtLnR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICd0Jzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBnZXRUZXh0dXJlKCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ2MnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBDb2xvcigpLnNldEhleCggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICd2Mic6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAndjMnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3Y0Jzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgVmVjdG9yNCgpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdtMyc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IE1hdHJpeDMoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnbTQnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gdW5pZm9ybS52YWx1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5kZWZpbmVzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZWZpbmVzID0ganNvbi5kZWZpbmVzO1xuXHRcdGlmICgganNvbi52ZXJ0ZXhTaGFkZXIgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnZlcnRleFNoYWRlciA9IGpzb24udmVydGV4U2hhZGVyO1xuXHRcdGlmICgganNvbi5mcmFnbWVudFNoYWRlciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXIgPSBqc29uLmZyYWdtZW50U2hhZGVyO1xuXHRcdGlmICgganNvbi5nbHNsVmVyc2lvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZ2xzbFZlcnNpb24gPSBqc29uLmdsc2xWZXJzaW9uO1xuXG5cdFx0aWYgKCBqc29uLmV4dGVuc2lvbnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggY29uc3Qga2V5IGluIGpzb24uZXh0ZW5zaW9ucyApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5leHRlbnNpb25zWyBrZXkgXSA9IGpzb24uZXh0ZW5zaW9uc1sga2V5IF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5saWdodHMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmxpZ2h0cyA9IGpzb24ubGlnaHRzO1xuXHRcdGlmICgganNvbi5jbGlwcGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xpcHBpbmcgPSBqc29uLmNsaXBwaW5nO1xuXG5cdFx0Ly8gZm9yIFBvaW50c01hdGVyaWFsXG5cblx0XHRpZiAoIGpzb24uc2l6ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2l6ZSA9IGpzb24uc2l6ZTtcblx0XHRpZiAoIGpzb24uc2l6ZUF0dGVudWF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPSBqc29uLnNpemVBdHRlbnVhdGlvbjtcblxuXHRcdC8vIG1hcHNcblxuXHRcdGlmICgganNvbi5tYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1hcCA9IGdldFRleHR1cmUoIGpzb24ubWFwICk7XG5cdFx0aWYgKCBqc29uLm1hdGNhcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWF0Y2FwID0gZ2V0VGV4dHVyZSgganNvbi5tYXRjYXAgKTtcblxuXHRcdGlmICgganNvbi5hbHBoYU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYWxwaGFNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmFscGhhTWFwICk7XG5cblx0XHRpZiAoIGpzb24uYnVtcE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYnVtcE1hcCA9IGdldFRleHR1cmUoIGpzb24uYnVtcE1hcCApO1xuXHRcdGlmICgganNvbi5idW1wU2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJ1bXBTY2FsZSA9IGpzb24uYnVtcFNjYWxlO1xuXG5cdFx0aWYgKCBqc29uLm5vcm1hbE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubm9ybWFsTWFwID0gZ2V0VGV4dHVyZSgganNvbi5ub3JtYWxNYXAgKTtcblx0XHRpZiAoIGpzb24ubm9ybWFsTWFwVHlwZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9IGpzb24ubm9ybWFsTWFwVHlwZTtcblx0XHRpZiAoIGpzb24ubm9ybWFsU2NhbGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bGV0IG5vcm1hbFNjYWxlID0ganNvbi5ub3JtYWxTY2FsZTtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBub3JtYWxTY2FsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBCbGVuZGVyIGV4cG9ydGVyIHVzZWQgdG8gZXhwb3J0IGEgc2NhbGFyLiBTZWUgIzc0NTlcblxuXHRcdFx0XHRub3JtYWxTY2FsZSA9IFsgbm9ybWFsU2NhbGUsIG5vcm1hbFNjYWxlIF07XG5cblx0XHRcdH1cblxuXHRcdFx0bWF0ZXJpYWwubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggbm9ybWFsU2NhbGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5kaXNwbGFjZW1lbnRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCA9IGdldFRleHR1cmUoIGpzb24uZGlzcGxhY2VtZW50TWFwICk7XG5cdFx0aWYgKCBqc29uLmRpc3BsYWNlbWVudFNjYWxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSA9IGpzb24uZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0aWYgKCBqc29uLmRpc3BsYWNlbWVudEJpYXMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXMgPSBqc29uLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHRpZiAoIGpzb24ucm91Z2huZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnJvdWdobmVzc01hcCApO1xuXHRcdGlmICgganNvbi5tZXRhbG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1ldGFsbmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24ubWV0YWxuZXNzTWFwICk7XG5cblx0XHRpZiAoIGpzb24uZW1pc3NpdmVNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVtaXNzaXZlTWFwID0gZ2V0VGV4dHVyZSgganNvbi5lbWlzc2l2ZU1hcCApO1xuXHRcdGlmICgganNvbi5lbWlzc2l2ZUludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmVJbnRlbnNpdHkgPSBqc29uLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhck1hcCA9IGdldFRleHR1cmUoIGpzb24uc3BlY3VsYXJNYXAgKTtcblx0XHRpZiAoIGpzb24uc3BlY3VsYXJJbnRlbnNpdHlNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwID0gZ2V0VGV4dHVyZSgganNvbi5zcGVjdWxhckludGVuc2l0eU1hcCApO1xuXHRcdGlmICgganNvbi5zcGVjdWxhckNvbG9yTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zcGVjdWxhckNvbG9yTWFwICk7XG5cblx0XHRpZiAoIGpzb24uZW52TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbnZNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmVudk1hcCApO1xuXHRcdGlmICgganNvbi5lbnZNYXBSb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW52TWFwUm90YXRpb24uZnJvbUFycmF5KCBqc29uLmVudk1hcFJvdGF0aW9uICk7XG5cdFx0aWYgKCBqc29uLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW52TWFwSW50ZW5zaXR5ID0ganNvbi5lbnZNYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24ucmVmbGVjdGl2aXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yZWZsZWN0aXZpdHkgPSBqc29uLnJlZmxlY3Rpdml0eTtcblx0XHRpZiAoIGpzb24ucmVmcmFjdGlvblJhdGlvICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW8gPSBqc29uLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdGlmICgganNvbi5saWdodE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubGlnaHRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmxpZ2h0TWFwICk7XG5cdFx0aWYgKCBqc29uLmxpZ2h0TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eSA9IGpzb24ubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uYW9NYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFvTWFwID0gZ2V0VGV4dHVyZSgganNvbi5hb01hcCApO1xuXHRcdGlmICgganNvbi5hb01hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHkgPSBqc29uLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLmdyYWRpZW50TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ncmFkaWVudE1hcCA9IGdldFRleHR1cmUoIGpzb24uZ3JhZGllbnRNYXAgKTtcblxuXHRcdGlmICgganNvbi5jbGVhcmNvYXRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdE1hcCA9IGdldFRleHR1cmUoIGpzb24uY2xlYXJjb2F0TWFwICk7XG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdFJvdWdobmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgKTtcblx0XHRpZiAoIGpzb24uY2xlYXJjb2F0Tm9ybWFsTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmNsZWFyY29hdE5vcm1hbE1hcCApO1xuXHRcdGlmICgganNvbi5jbGVhcmNvYXROb3JtYWxTY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMigpLmZyb21BcnJheSgganNvbi5jbGVhcmNvYXROb3JtYWxTY2FsZSApO1xuXG5cdFx0aWYgKCBqc29uLmlyaWRlc2NlbmNlTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5pcmlkZXNjZW5jZU1hcCA9IGdldFRleHR1cmUoIGpzb24uaXJpZGVzY2VuY2VNYXAgKTtcblx0XHRpZiAoIGpzb24uaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCApO1xuXG5cdFx0aWYgKCBqc29uLnRyYW5zbWlzc2lvbk1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwID0gZ2V0VGV4dHVyZSgganNvbi50cmFuc21pc3Npb25NYXAgKTtcblx0XHRpZiAoIGpzb24udGhpY2tuZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50aGlja25lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnRoaWNrbmVzc01hcCApO1xuXG5cdFx0aWYgKCBqc29uLmFuaXNvdHJvcHlNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFuaXNvdHJvcHlNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmFuaXNvdHJvcHlNYXAgKTtcblxuXHRcdGlmICgganNvbi5zaGVlbkNvbG9yTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGVlbkNvbG9yTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zaGVlbkNvbG9yTWFwICk7XG5cdFx0aWYgKCBqc29uLnNoZWVuUm91Z2huZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGVlblJvdWdobmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24uc2hlZW5Sb3VnaG5lc3NNYXAgKTtcblxuXHRcdHJldHVybiBtYXRlcmlhbDtcblxuXHR9XG5cblx0c2V0VGV4dHVyZXMoIHZhbHVlICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlcyA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlTWF0ZXJpYWxGcm9tVHlwZSggdHlwZSApIHtcblxuXHRcdGNvbnN0IG1hdGVyaWFsTGliID0ge1xuXHRcdFx0U2hhZG93TWF0ZXJpYWwsXG5cdFx0XHRTcHJpdGVNYXRlcmlhbCxcblx0XHRcdFJhd1NoYWRlck1hdGVyaWFsLFxuXHRcdFx0U2hhZGVyTWF0ZXJpYWwsXG5cdFx0XHRQb2ludHNNYXRlcmlhbCxcblx0XHRcdE1lc2hQaHlzaWNhbE1hdGVyaWFsLFxuXHRcdFx0TWVzaFN0YW5kYXJkTWF0ZXJpYWwsXG5cdFx0XHRNZXNoUGhvbmdNYXRlcmlhbCxcblx0XHRcdE1lc2hUb29uTWF0ZXJpYWwsXG5cdFx0XHRNZXNoTm9ybWFsTWF0ZXJpYWwsXG5cdFx0XHRNZXNoTGFtYmVydE1hdGVyaWFsLFxuXHRcdFx0TWVzaERlcHRoTWF0ZXJpYWwsXG5cdFx0XHRNZXNoRGlzdGFuY2VNYXRlcmlhbCxcblx0XHRcdE1lc2hCYXNpY01hdGVyaWFsLFxuXHRcdFx0TWVzaE1hdGNhcE1hdGVyaWFsLFxuXHRcdFx0TGluZURhc2hlZE1hdGVyaWFsLFxuXHRcdFx0TGluZUJhc2ljTWF0ZXJpYWwsXG5cdFx0XHRNYXRlcmlhbFxuXHRcdH07XG5cblx0XHRyZXR1cm4gbmV3IG1hdGVyaWFsTGliWyB0eXBlIF0oKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgTWF0ZXJpYWxMb2FkZXIgfTtcbiIsImNsYXNzIExvYWRlclV0aWxzIHtcblxuXHRzdGF0aWMgZGVjb2RlVGV4dCggYXJyYXkgKSB7IC8vIEBkZXByZWNhdGVkLCByMTY1XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Mb2FkZXJVdGlsczogZGVjb2RlVGV4dCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQgd2l0aCByMTY1IGFuZCB3aWxsIGJlIHJlbW92ZWQgd2l0aCByMTc1LiBVc2UgVGV4dERlY29kZXIgaW5zdGVhZC4nICk7XG5cblx0XHRpZiAoIHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRcdHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoIGFycmF5ICk7XG5cblx0XHR9XG5cblx0XHQvLyBBdm9pZCB0aGUgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBhcnJheSkgc2hvcnRjdXQsIHdoaWNoXG5cdFx0Ly8gdGhyb3dzIGEgXCJtYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiIGVycm9yIGZvciBsYXJnZSBhcnJheXMuXG5cblx0XHRsZXQgcyA9ICcnO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHQvLyBJbXBsaWNpdGx5IGFzc3VtZXMgbGl0dGxlLWVuZGlhbi5cblx0XHRcdHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSggYXJyYXlbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Ly8gbWVyZ2VzIG11bHRpLWJ5dGUgdXRmLTggY2hhcmFjdGVycy5cblxuXHRcdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCggZXNjYXBlKCBzICkgKTtcblxuXHRcdH0gY2F0Y2ggKCBlICkgeyAvLyBzZWUgIzE2MzU4XG5cblx0XHRcdHJldHVybiBzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzdGF0aWMgZXh0cmFjdFVybEJhc2UoIHVybCApIHtcblxuXHRcdGNvbnN0IGluZGV4ID0gdXJsLmxhc3RJbmRleE9mKCAnLycgKTtcblxuXHRcdGlmICggaW5kZXggPT09IC0gMSApIHJldHVybiAnLi8nO1xuXG5cdFx0cmV0dXJuIHVybC5zbGljZSggMCwgaW5kZXggKyAxICk7XG5cblx0fVxuXG5cdHN0YXRpYyByZXNvbHZlVVJMKCB1cmwsIHBhdGggKSB7XG5cblx0XHQvLyBJbnZhbGlkIFVSTFxuXHRcdGlmICggdHlwZW9mIHVybCAhPT0gJ3N0cmluZycgfHwgdXJsID09PSAnJyApIHJldHVybiAnJztcblxuXHRcdC8vIEhvc3QgUmVsYXRpdmUgVVJMXG5cdFx0aWYgKCAvXmh0dHBzPzpcXC9cXC8vaS50ZXN0KCBwYXRoICkgJiYgL15cXC8vLnRlc3QoIHVybCApICkge1xuXG5cdFx0XHRwYXRoID0gcGF0aC5yZXBsYWNlKCAvKF5odHRwcz86XFwvXFwvW15cXC9dKykuKi9pLCAnJDEnICk7XG5cblx0XHR9XG5cblx0XHQvLyBBYnNvbHV0ZSBVUkwgaHR0cDovLyxodHRwczovLywvL1xuXHRcdGlmICggL14oaHR0cHM/Oik/XFwvXFwvL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsO1xuXG5cdFx0Ly8gRGF0YSBVUklcblx0XHRpZiAoIC9eZGF0YTouKiwuKiQvaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7XG5cblx0XHQvLyBCbG9iIFVSTFxuXHRcdGlmICggL15ibG9iOi4qJC9pLnRlc3QoIHVybCApICkgcmV0dXJuIHVybDtcblxuXHRcdC8vIFJlbGF0aXZlIFVSTFxuXHRcdHJldHVybiBwYXRoICsgdXJsO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBMb2FkZXJVdGlscyB9O1xuIiwiaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuL0J1ZmZlckdlb21ldHJ5LmpzJztcblxuY2xhc3MgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSc7XG5cdFx0dGhpcy5pbnN0YW5jZUNvdW50ID0gSW5maW5pdHk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5pbnN0YW5jZUNvdW50ID0gc291cmNlLmluc3RhbmNlQ291bnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5pbnN0YW5jZUNvdW50ID0gdGhpcy5pbnN0YW5jZUNvdW50O1xuXG5cdFx0ZGF0YS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID0gdHJ1ZTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSB9O1xuIiwiaW1wb3J0IHsgU3BoZXJlIH0gZnJvbSAnLi4vbWF0aC9TcGhlcmUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgRmlsZUxvYWRlciB9IGZyb20gJy4vRmlsZUxvYWRlci5qcyc7XG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlci5qcyc7XG5pbXBvcnQgeyBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IEludGVybGVhdmVkQnVmZmVyIH0gZnJvbSAnLi4vY29yZS9JbnRlcmxlYXZlZEJ1ZmZlci5qcyc7XG5pbXBvcnQgeyBnZXRUeXBlZEFycmF5IH0gZnJvbSAnLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBCdWZmZXJHZW9tZXRyeUxvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHNjb3BlLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggc2NvcGUucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgKSB7XG5cblx0XHRcdFx0XHRvbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXG5cdFx0XHR9XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fVxuXG5cdHBhcnNlKCBqc29uICkge1xuXG5cdFx0Y29uc3QgaW50ZXJsZWF2ZWRCdWZmZXJNYXAgPSB7fTtcblx0XHRjb25zdCBhcnJheUJ1ZmZlck1hcCA9IHt9O1xuXG5cdFx0ZnVuY3Rpb24gZ2V0SW50ZXJsZWF2ZWRCdWZmZXIoIGpzb24sIHV1aWQgKSB7XG5cblx0XHRcdGlmICggaW50ZXJsZWF2ZWRCdWZmZXJNYXBbIHV1aWQgXSAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIGludGVybGVhdmVkQnVmZmVyTWFwWyB1dWlkIF07XG5cblx0XHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVycyA9IGpzb24uaW50ZXJsZWF2ZWRCdWZmZXJzO1xuXHRcdFx0Y29uc3QgaW50ZXJsZWF2ZWRCdWZmZXIgPSBpbnRlcmxlYXZlZEJ1ZmZlcnNbIHV1aWQgXTtcblxuXHRcdFx0Y29uc3QgYnVmZmVyID0gZ2V0QXJyYXlCdWZmZXIoIGpzb24sIGludGVybGVhdmVkQnVmZmVyLmJ1ZmZlciApO1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IGdldFR5cGVkQXJyYXkoIGludGVybGVhdmVkQnVmZmVyLnR5cGUsIGJ1ZmZlciApO1xuXHRcdFx0Y29uc3QgaWIgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXIoIGFycmF5LCBpbnRlcmxlYXZlZEJ1ZmZlci5zdHJpZGUgKTtcblx0XHRcdGliLnV1aWQgPSBpbnRlcmxlYXZlZEJ1ZmZlci51dWlkO1xuXG5cdFx0XHRpbnRlcmxlYXZlZEJ1ZmZlck1hcFsgdXVpZCBdID0gaWI7XG5cblx0XHRcdHJldHVybiBpYjtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldEFycmF5QnVmZmVyKCBqc29uLCB1dWlkICkge1xuXG5cdFx0XHRpZiAoIGFycmF5QnVmZmVyTWFwWyB1dWlkIF0gIT09IHVuZGVmaW5lZCApIHJldHVybiBhcnJheUJ1ZmZlck1hcFsgdXVpZCBdO1xuXG5cdFx0XHRjb25zdCBhcnJheUJ1ZmZlcnMgPSBqc29uLmFycmF5QnVmZmVycztcblx0XHRcdGNvbnN0IGFycmF5QnVmZmVyID0gYXJyYXlCdWZmZXJzWyB1dWlkIF07XG5cblx0XHRcdGNvbnN0IGFiID0gbmV3IFVpbnQzMkFycmF5KCBhcnJheUJ1ZmZlciApLmJ1ZmZlcjtcblxuXHRcdFx0YXJyYXlCdWZmZXJNYXBbIHV1aWQgXSA9IGFiO1xuXG5cdFx0XHRyZXR1cm4gYWI7XG5cblx0XHR9XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IGpzb24uaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSA/IG5ldyBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSgpIDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHRjb25zdCBpbmRleCA9IGpzb24uZGF0YS5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgdHlwZWRBcnJheSA9IGdldFR5cGVkQXJyYXkoIGluZGV4LnR5cGUsIGluZGV4LmFycmF5ICk7XG5cdFx0XHRnZW9tZXRyeS5zZXRJbmRleCggbmV3IEJ1ZmZlckF0dHJpYnV0ZSggdHlwZWRBcnJheSwgMSApICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhdHRyaWJ1dGVzID0ganNvbi5kYXRhLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gYXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1sga2V5IF07XG5cdFx0XHRsZXQgYnVmZmVyQXR0cmlidXRlO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyID0gZ2V0SW50ZXJsZWF2ZWRCdWZmZXIoIGpzb24uZGF0YSwgYXR0cmlidXRlLmRhdGEgKTtcblx0XHRcdFx0YnVmZmVyQXR0cmlidXRlID0gbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgYXR0cmlidXRlLml0ZW1TaXplLCBhdHRyaWJ1dGUub2Zmc2V0LCBhdHRyaWJ1dGUubm9ybWFsaXplZCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IHR5cGVkQXJyYXkgPSBnZXRUeXBlZEFycmF5KCBhdHRyaWJ1dGUudHlwZSwgYXR0cmlidXRlLmFycmF5ICk7XG5cdFx0XHRcdGNvbnN0IGJ1ZmZlckF0dHJpYnV0ZUNvbnN0ciA9IGF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA/IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA6IEJ1ZmZlckF0dHJpYnV0ZTtcblx0XHRcdFx0YnVmZmVyQXR0cmlidXRlID0gbmV3IGJ1ZmZlckF0dHJpYnV0ZUNvbnN0ciggdHlwZWRBcnJheSwgYXR0cmlidXRlLml0ZW1TaXplLCBhdHRyaWJ1dGUubm9ybWFsaXplZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYXR0cmlidXRlLm5hbWUgIT09IHVuZGVmaW5lZCApIGJ1ZmZlckF0dHJpYnV0ZS5uYW1lID0gYXR0cmlidXRlLm5hbWU7XG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS51c2FnZSAhPT0gdW5kZWZpbmVkICkgYnVmZmVyQXR0cmlidXRlLnNldFVzYWdlKCBhdHRyaWJ1dGUudXNhZ2UgKTtcblxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCBrZXksIGJ1ZmZlckF0dHJpYnV0ZSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0ganNvbi5kYXRhLm1vcnBoQXR0cmlidXRlcztcblxuXHRcdGlmICggbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZUFycmF5ID0gbW9ycGhBdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhdHRyaWJ1dGVBcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZUFycmF5WyBpIF07XG5cdFx0XHRcdFx0bGV0IGJ1ZmZlckF0dHJpYnV0ZTtcblxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyID0gZ2V0SW50ZXJsZWF2ZWRCdWZmZXIoIGpzb24uZGF0YSwgYXR0cmlidXRlLmRhdGEgKTtcblx0XHRcdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaW50ZXJsZWF2ZWRCdWZmZXIsIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm9mZnNldCwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHR5cGVkQXJyYXkgPSBnZXRUeXBlZEFycmF5KCBhdHRyaWJ1dGUudHlwZSwgYXR0cmlidXRlLmFycmF5ICk7XG5cdFx0XHRcdFx0XHRidWZmZXJBdHRyaWJ1dGUgPSBuZXcgQnVmZmVyQXR0cmlidXRlKCB0eXBlZEFycmF5LCBhdHRyaWJ1dGUuaXRlbVNpemUsIGF0dHJpYnV0ZS5ub3JtYWxpemVkICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZS5uYW1lICE9PSB1bmRlZmluZWQgKSBidWZmZXJBdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZS5uYW1lO1xuXHRcdFx0XHRcdGFycmF5LnB1c2goIGJ1ZmZlckF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXNbIGtleSBdID0gYXJyYXk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0ganNvbi5kYXRhLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xuXG5cdFx0aWYgKCBtb3JwaFRhcmdldHNSZWxhdGl2ZSApIHtcblxuXHRcdFx0Z2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZ3JvdXBzID0ganNvbi5kYXRhLmdyb3VwcyB8fCBqc29uLmRhdGEuZHJhd2NhbGxzIHx8IGpzb24uZGF0YS5vZmZzZXRzO1xuXG5cdFx0aWYgKCBncm91cHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gZ3JvdXBzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXG5cdFx0XHRcdGdlb21ldHJ5LmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYm91bmRpbmdTcGhlcmUgPSBqc29uLmRhdGEuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGNlbnRlciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGlmICggYm91bmRpbmdTcGhlcmUuY2VudGVyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y2VudGVyLmZyb21BcnJheSggYm91bmRpbmdTcGhlcmUuY2VudGVyICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCBjZW50ZXIsIGJvdW5kaW5nU3BoZXJlLnJhZGl1cyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLm5hbWUgKSBnZW9tZXRyeS5uYW1lID0ganNvbi5uYW1lO1xuXHRcdGlmICgganNvbi51c2VyRGF0YSApIGdlb21ldHJ5LnVzZXJEYXRhID0ganNvbi51c2VyRGF0YTtcblxuXHRcdHJldHVybiBnZW9tZXRyeTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQnVmZmVyR2VvbWV0cnlMb2FkZXIgfTtcbiIsImltcG9ydCB7XG5cdFVWTWFwcGluZyxcblx0Q3ViZVJlZmxlY3Rpb25NYXBwaW5nLFxuXHRDdWJlUmVmcmFjdGlvbk1hcHBpbmcsXG5cdEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLFxuXHRFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyxcblx0Q3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcsXG5cblx0UmVwZWF0V3JhcHBpbmcsXG5cdENsYW1wVG9FZGdlV3JhcHBpbmcsXG5cdE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsXG5cblx0TmVhcmVzdEZpbHRlcixcblx0TmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIsXG5cdE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsXG5cdExpbmVhckZpbHRlcixcblx0TGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcixcblx0TGluZWFyTWlwbWFwTGluZWFyRmlsdGVyXG59IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZS5qcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcbmltcG9ydCB7IEdyb3VwIH0gZnJvbSAnLi4vb2JqZWN0cy9Hcm91cC5qcyc7XG5pbXBvcnQgeyBJbnN0YW5jZWRNZXNoIH0gZnJvbSAnLi4vb2JqZWN0cy9JbnN0YW5jZWRNZXNoLmpzJztcbmltcG9ydCB7IEJhdGNoZWRNZXNoIH0gZnJvbSAnLi4vb2JqZWN0cy9CYXRjaGVkTWVzaC5qcyc7XG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tICcuLi9vYmplY3RzL1Nwcml0ZS5qcyc7XG5pbXBvcnQgeyBQb2ludHMgfSBmcm9tICcuLi9vYmplY3RzL1BvaW50cy5qcyc7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAnLi4vb2JqZWN0cy9MaW5lLmpzJztcbmltcG9ydCB7IExpbmVMb29wIH0gZnJvbSAnLi4vb2JqZWN0cy9MaW5lTG9vcC5qcyc7XG5pbXBvcnQgeyBMaW5lU2VnbWVudHMgfSBmcm9tICcuLi9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyc7XG5pbXBvcnQgeyBMT0QgfSBmcm9tICcuLi9vYmplY3RzL0xPRC5qcyc7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSAnLi4vb2JqZWN0cy9NZXNoLmpzJztcbmltcG9ydCB7IFNraW5uZWRNZXNoIH0gZnJvbSAnLi4vb2JqZWN0cy9Ta2lubmVkTWVzaC5qcyc7XG5pbXBvcnQgeyBCb25lIH0gZnJvbSAnLi4vb2JqZWN0cy9Cb25lLmpzJztcbmltcG9ydCB7IFNrZWxldG9uIH0gZnJvbSAnLi4vb2JqZWN0cy9Ta2VsZXRvbi5qcyc7XG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uL2V4dHJhcy9jb3JlL1NoYXBlLmpzJztcbmltcG9ydCB7IEZvZyB9IGZyb20gJy4uL3NjZW5lcy9Gb2cuanMnO1xuaW1wb3J0IHsgRm9nRXhwMiB9IGZyb20gJy4uL3NjZW5lcy9Gb2dFeHAyLmpzJztcbmltcG9ydCB7IEhlbWlzcGhlcmVMaWdodCB9IGZyb20gJy4uL2xpZ2h0cy9IZW1pc3BoZXJlTGlnaHQuanMnO1xuaW1wb3J0IHsgU3BvdExpZ2h0IH0gZnJvbSAnLi4vbGlnaHRzL1Nwb3RMaWdodC5qcyc7XG5pbXBvcnQgeyBQb2ludExpZ2h0IH0gZnJvbSAnLi4vbGlnaHRzL1BvaW50TGlnaHQuanMnO1xuaW1wb3J0IHsgRGlyZWN0aW9uYWxMaWdodCB9IGZyb20gJy4uL2xpZ2h0cy9EaXJlY3Rpb25hbExpZ2h0LmpzJztcbmltcG9ydCB7IEFtYmllbnRMaWdodCB9IGZyb20gJy4uL2xpZ2h0cy9BbWJpZW50TGlnaHQuanMnO1xuaW1wb3J0IHsgUmVjdEFyZWFMaWdodCB9IGZyb20gJy4uL2xpZ2h0cy9SZWN0QXJlYUxpZ2h0LmpzJztcbmltcG9ydCB7IExpZ2h0UHJvYmUgfSBmcm9tICcuLi9saWdodHMvTGlnaHRQcm9iZS5qcyc7XG5pbXBvcnQgeyBPcnRob2dyYXBoaWNDYW1lcmEgfSBmcm9tICcuLi9jYW1lcmFzL09ydGhvZ3JhcGhpY0NhbWVyYS5qcyc7XG5pbXBvcnQgeyBQZXJzcGVjdGl2ZUNhbWVyYSB9IGZyb20gJy4uL2NhbWVyYXMvUGVyc3BlY3RpdmVDYW1lcmEuanMnO1xuaW1wb3J0IHsgU2NlbmUgfSBmcm9tICcuLi9zY2VuZXMvU2NlbmUuanMnO1xuaW1wb3J0IHsgQ3ViZVRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9DdWJlVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBTb3VyY2UgfSBmcm9tICcuLi90ZXh0dXJlcy9Tb3VyY2UuanMnO1xuaW1wb3J0IHsgRGF0YVRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9EYXRhVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBJbWFnZUxvYWRlciB9IGZyb20gJy4vSW1hZ2VMb2FkZXIuanMnO1xuaW1wb3J0IHsgTG9hZGluZ01hbmFnZXIgfSBmcm9tICcuL0xvYWRpbmdNYW5hZ2VyLmpzJztcbmltcG9ydCB7IEFuaW1hdGlvbkNsaXAgfSBmcm9tICcuLi9hbmltYXRpb24vQW5pbWF0aW9uQ2xpcC5qcyc7XG5pbXBvcnQgeyBNYXRlcmlhbExvYWRlciB9IGZyb20gJy4vTWF0ZXJpYWxMb2FkZXIuanMnO1xuaW1wb3J0IHsgTG9hZGVyVXRpbHMgfSBmcm9tICcuL0xvYWRlclV0aWxzLmpzJztcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5TG9hZGVyIH0gZnJvbSAnLi9CdWZmZXJHZW9tZXRyeUxvYWRlci5qcyc7XG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlci5qcyc7XG5pbXBvcnQgeyBGaWxlTG9hZGVyIH0gZnJvbSAnLi9GaWxlTG9hZGVyLmpzJztcbmltcG9ydCAqIGFzIEdlb21ldHJpZXMgZnJvbSAnLi4vZ2VvbWV0cmllcy9HZW9tZXRyaWVzLmpzJztcbmltcG9ydCB7IGdldFR5cGVkQXJyYXkgfSBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgeyBCb3gzIH0gZnJvbSAnLi4vbWF0aC9Cb3gzLmpzJztcbmltcG9ydCB7IFNwaGVyZSB9IGZyb20gJy4uL21hdGgvU3BoZXJlLmpzJztcblxuY2xhc3MgT2JqZWN0TG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0fVxuXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgcGF0aCA9ICggdGhpcy5wYXRoID09PSAnJyApID8gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApIDogdGhpcy5wYXRoO1xuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGggfHwgcGF0aDtcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHRoaXMud2l0aENyZWRlbnRpYWxzICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHRsZXQganNvbiA9IG51bGw7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0anNvbiA9IEpTT04ucGFyc2UoIHRleHQgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRcdGlmICggb25FcnJvciAhPT0gdW5kZWZpbmVkICkgb25FcnJvciggZXJyb3IgKTtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUU6T2JqZWN0TG9hZGVyOiBDYW5cXCd0IHBhcnNlICcgKyB1cmwgKyAnLicsIGVycm9yLm1lc3NhZ2UgKTtcblxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbWV0YWRhdGEgPSBqc29uLm1ldGFkYXRhO1xuXG5cdFx0XHRpZiAoIG1ldGFkYXRhID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2dlb21ldHJ5JyApIHtcblxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgIT09IHVuZGVmaW5lZCApIG9uRXJyb3IoIG5ldyBFcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwgKSApO1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3RMb2FkZXI6IENhblxcJ3QgbG9hZCAnICsgdXJsICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRzY29wZS5wYXJzZSgganNvbiwgb25Mb2FkICk7XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fVxuXG5cdGFzeW5jIGxvYWRBc3luYyggdXJsLCBvblByb2dyZXNzICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgcGF0aCA9ICggdGhpcy5wYXRoID09PSAnJyApID8gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApIDogdGhpcy5wYXRoO1xuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGggfHwgcGF0aDtcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHRoaXMud2l0aENyZWRlbnRpYWxzICk7XG5cblx0XHRjb25zdCB0ZXh0ID0gYXdhaXQgbG9hZGVyLmxvYWRBc3luYyggdXJsLCBvblByb2dyZXNzICk7XG5cblx0XHRjb25zdCBqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXG5cdFx0Y29uc3QgbWV0YWRhdGEgPSBqc29uLm1ldGFkYXRhO1xuXG5cdFx0aWYgKCBtZXRhZGF0YSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdnZW9tZXRyeScgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhd2FpdCBzY29wZS5wYXJzZUFzeW5jKCBqc29uICk7XG5cblx0fVxuXG5cdHBhcnNlKCBqc29uLCBvbkxvYWQgKSB7XG5cblx0XHRjb25zdCBhbmltYXRpb25zID0gdGhpcy5wYXJzZUFuaW1hdGlvbnMoIGpzb24uYW5pbWF0aW9ucyApO1xuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyc2VTaGFwZXMoIGpzb24uc2hhcGVzICk7XG5cdFx0Y29uc3QgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKCBqc29uLmdlb21ldHJpZXMsIHNoYXBlcyApO1xuXG5cdFx0Y29uc3QgaW1hZ2VzID0gdGhpcy5wYXJzZUltYWdlcygganNvbi5pbWFnZXMsIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIG9uTG9hZCggb2JqZWN0ICk7XG5cblx0XHR9ICk7XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHRoaXMucGFyc2VUZXh0dXJlcygganNvbi50ZXh0dXJlcywgaW1hZ2VzICk7XG5cdFx0Y29uc3QgbWF0ZXJpYWxzID0gdGhpcy5wYXJzZU1hdGVyaWFscygganNvbi5tYXRlcmlhbHMsIHRleHR1cmVzICk7XG5cblx0XHRjb25zdCBvYmplY3QgPSB0aGlzLnBhcnNlT2JqZWN0KCBqc29uLm9iamVjdCwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLCB0ZXh0dXJlcywgYW5pbWF0aW9ucyApO1xuXHRcdGNvbnN0IHNrZWxldG9ucyA9IHRoaXMucGFyc2VTa2VsZXRvbnMoIGpzb24uc2tlbGV0b25zLCBvYmplY3QgKTtcblxuXHRcdHRoaXMuYmluZFNrZWxldG9ucyggb2JqZWN0LCBza2VsZXRvbnMgKTtcblx0XHR0aGlzLmJpbmRMaWdodFRhcmdldHMoIG9iamVjdCApO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggb25Mb2FkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxldCBoYXNJbWFnZXMgPSBmYWxzZTtcblxuXHRcdFx0Zm9yICggY29uc3QgdXVpZCBpbiBpbWFnZXMgKSB7XG5cblx0XHRcdFx0aWYgKCBpbWFnZXNbIHV1aWQgXS5kYXRhIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHtcblxuXHRcdFx0XHRcdGhhc0ltYWdlcyA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzSW1hZ2VzID09PSBmYWxzZSApIG9uTG9hZCggb2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxuXHRhc3luYyBwYXJzZUFzeW5jKCBqc29uICkge1xuXG5cdFx0Y29uc3QgYW5pbWF0aW9ucyA9IHRoaXMucGFyc2VBbmltYXRpb25zKCBqc29uLmFuaW1hdGlvbnMgKTtcblx0XHRjb25zdCBzaGFwZXMgPSB0aGlzLnBhcnNlU2hhcGVzKCBqc29uLnNoYXBlcyApO1xuXHRcdGNvbnN0IGdlb21ldHJpZXMgPSB0aGlzLnBhcnNlR2VvbWV0cmllcygganNvbi5nZW9tZXRyaWVzLCBzaGFwZXMgKTtcblxuXHRcdGNvbnN0IGltYWdlcyA9IGF3YWl0IHRoaXMucGFyc2VJbWFnZXNBc3luYygganNvbi5pbWFnZXMgKTtcblxuXHRcdGNvbnN0IHRleHR1cmVzID0gdGhpcy5wYXJzZVRleHR1cmVzKCBqc29uLnRleHR1cmVzLCBpbWFnZXMgKTtcblx0XHRjb25zdCBtYXRlcmlhbHMgPSB0aGlzLnBhcnNlTWF0ZXJpYWxzKCBqc29uLm1hdGVyaWFscywgdGV4dHVyZXMgKTtcblxuXHRcdGNvbnN0IG9iamVjdCA9IHRoaXMucGFyc2VPYmplY3QoIGpzb24ub2JqZWN0LCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMsIHRleHR1cmVzLCBhbmltYXRpb25zICk7XG5cdFx0Y29uc3Qgc2tlbGV0b25zID0gdGhpcy5wYXJzZVNrZWxldG9ucygganNvbi5za2VsZXRvbnMsIG9iamVjdCApO1xuXG5cdFx0dGhpcy5iaW5kU2tlbGV0b25zKCBvYmplY3QsIHNrZWxldG9ucyApO1xuXHRcdHRoaXMuYmluZExpZ2h0VGFyZ2V0cyggb2JqZWN0ICk7XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxuXHRwYXJzZVNoYXBlcygganNvbiApIHtcblxuXHRcdGNvbnN0IHNoYXBlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzaGFwZSA9IG5ldyBTaGFwZSgpLmZyb21KU09OKCBqc29uWyBpIF0gKTtcblxuXHRcdFx0XHRzaGFwZXNbIHNoYXBlLnV1aWQgXSA9IHNoYXBlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdH1cblxuXHRwYXJzZVNrZWxldG9ucygganNvbiwgb2JqZWN0ICkge1xuXG5cdFx0Y29uc3Qgc2tlbGV0b25zID0ge307XG5cdFx0Y29uc3QgYm9uZXMgPSB7fTtcblxuXHRcdC8vIGdlbmVyYXRlIGJvbmUgbG9va3VwIHRhYmxlXG5cblx0XHRvYmplY3QudHJhdmVyc2UoIGZ1bmN0aW9uICggY2hpbGQgKSB7XG5cblx0XHRcdGlmICggY2hpbGQuaXNCb25lICkgYm9uZXNbIGNoaWxkLnV1aWQgXSA9IGNoaWxkO1xuXG5cdFx0fSApO1xuXG5cdFx0Ly8gY3JlYXRlIHNrZWxldG9uc1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBza2VsZXRvbiA9IG5ldyBTa2VsZXRvbigpLmZyb21KU09OKCBqc29uWyBpIF0sIGJvbmVzICk7XG5cblx0XHRcdFx0c2tlbGV0b25zWyBza2VsZXRvbi51dWlkIF0gPSBza2VsZXRvbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNrZWxldG9ucztcblxuXHR9XG5cblx0cGFyc2VHZW9tZXRyaWVzKCBqc29uLCBzaGFwZXMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyaWVzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgYnVmZmVyR2VvbWV0cnlMb2FkZXIgPSBuZXcgQnVmZmVyR2VvbWV0cnlMb2FkZXIoKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldCBnZW9tZXRyeTtcblx0XHRcdFx0Y29uc3QgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdCdWZmZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IGJ1ZmZlckdlb21ldHJ5TG9hZGVyLnBhcnNlKCBkYXRhICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdGlmICggZGF0YS50eXBlIGluIEdlb21ldHJpZXMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXS5mcm9tSlNPTiggZGF0YSwgc2hhcGVzICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCBgVEhSRUUuT2JqZWN0TG9hZGVyOiBVbnN1cHBvcnRlZCBnZW9tZXRyeSB0eXBlIFwiJHsgZGF0YS50eXBlIH1cImAgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnZW9tZXRyeS51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSBnZW9tZXRyeS5uYW1lID0gZGF0YS5uYW1lO1xuXHRcdFx0XHRpZiAoIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCApIGdlb21ldHJ5LnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTtcblxuXHRcdFx0XHRnZW9tZXRyaWVzWyBkYXRhLnV1aWQgXSA9IGdlb21ldHJ5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cmllcztcblxuXHR9XG5cblx0cGFyc2VNYXRlcmlhbHMoIGpzb24sIHRleHR1cmVzICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB7fTsgLy8gTXVsdGlNYXRlcmlhbFxuXHRcdGNvbnN0IG1hdGVyaWFscyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGxvYWRlciA9IG5ldyBNYXRlcmlhbExvYWRlcigpO1xuXHRcdFx0bG9hZGVyLnNldFRleHR1cmVzKCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRpZiAoIGNhY2hlWyBkYXRhLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y2FjaGVbIGRhdGEudXVpZCBdID0gbG9hZGVyLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hdGVyaWFsc1sgZGF0YS51dWlkIF0gPSBjYWNoZVsgZGF0YS51dWlkIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRlcmlhbHM7XG5cblx0fVxuXG5cdHBhcnNlQW5pbWF0aW9ucygganNvbiApIHtcblxuXHRcdGNvbnN0IGFuaW1hdGlvbnMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBqc29uLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGNvbnN0IGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0YW5pbWF0aW9uc1sgY2xpcC51dWlkIF0gPSBjbGlwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcblxuXHR9XG5cblx0cGFyc2VJbWFnZXMoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblx0XHRjb25zdCBpbWFnZXMgPSB7fTtcblxuXHRcdGxldCBsb2FkZXI7XG5cblx0XHRmdW5jdGlvbiBsb2FkSW1hZ2UoIHVybCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRyZXR1cm4gbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGltYWdlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZTtcblxuXHRcdFx0XHRjb25zdCBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCB1cmwgKSA/IHVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIHVybDtcblxuXHRcdFx0XHRyZXR1cm4gbG9hZEltYWdlKCBwYXRoICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBpbWFnZS5kYXRhICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGRhdGE6IGdldFR5cGVkQXJyYXkoIGltYWdlLnR5cGUsIGltYWdlLmRhdGEgKSxcblx0XHRcdFx0XHRcdHdpZHRoOiBpbWFnZS53aWR0aCxcblx0XHRcdFx0XHRcdGhlaWdodDogaW1hZ2UuaGVpZ2h0XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCAmJiBqc29uLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IG1hbmFnZXIgPSBuZXcgTG9hZGluZ01hbmFnZXIoIG9uTG9hZCApO1xuXG5cdFx0XHRsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIG1hbmFnZXIgKTtcblx0XHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0ganNvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbWFnZSA9IGpzb25bIGkgXTtcblx0XHRcdFx0Y29uc3QgdXJsID0gaW1hZ2UudXJsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdXJsICkgKSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIGFycmF5IG9mIGltYWdlcyBlLmcgQ3ViZVRleHR1cmVcblxuXHRcdFx0XHRcdGNvbnN0IGltYWdlQXJyYXkgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSB1cmwubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRVcmwgPSB1cmxbIGogXTtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZGVzZXJpYWxpemVkSW1hZ2UgPSBkZXNlcmlhbGl6ZUltYWdlKCBjdXJyZW50VXJsICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGVzZXJpYWxpemVkSW1hZ2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBkZXNlcmlhbGl6ZWRJbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpbWFnZUFycmF5LnB1c2goIGRlc2VyaWFsaXplZEltYWdlICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNwZWNpYWwgY2FzZTogaGFuZGxlIGFycmF5IG9mIGRhdGEgdGV4dHVyZXMgZm9yIGN1YmUgdGV4dHVyZXNcblxuXHRcdFx0XHRcdFx0XHRcdGltYWdlQXJyYXkucHVzaCggbmV3IERhdGFUZXh0dXJlKCBkZXNlcmlhbGl6ZWRJbWFnZS5kYXRhLCBkZXNlcmlhbGl6ZWRJbWFnZS53aWR0aCwgZGVzZXJpYWxpemVkSW1hZ2UuaGVpZ2h0ICkgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbmV3IFNvdXJjZSggaW1hZ2VBcnJheSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIHNpbmdsZSBpbWFnZVxuXG5cdFx0XHRcdFx0Y29uc3QgZGVzZXJpYWxpemVkSW1hZ2UgPSBkZXNlcmlhbGl6ZUltYWdlKCBpbWFnZS51cmwgKTtcblx0XHRcdFx0XHRpbWFnZXNbIGltYWdlLnV1aWQgXSA9IG5ldyBTb3VyY2UoIGRlc2VyaWFsaXplZEltYWdlICk7XG5cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZXM7XG5cblx0fVxuXG5cdGFzeW5jIHBhcnNlSW1hZ2VzQXN5bmMoIGpzb24gKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cdFx0Y29uc3QgaW1hZ2VzID0ge307XG5cblx0XHRsZXQgbG9hZGVyO1xuXG5cdFx0YXN5bmMgZnVuY3Rpb24gZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGltYWdlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZTtcblxuXHRcdFx0XHRjb25zdCBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCB1cmwgKSA/IHVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIHVybDtcblxuXHRcdFx0XHRyZXR1cm4gYXdhaXQgbG9hZGVyLmxvYWRBc3luYyggcGF0aCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggaW1hZ2UuZGF0YSApIHtcblxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRkYXRhOiBnZXRUeXBlZEFycmF5KCBpbWFnZS50eXBlLCBpbWFnZS5kYXRhICksXG5cdFx0XHRcdFx0XHR3aWR0aDogaW1hZ2Uud2lkdGgsXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodFxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgJiYganNvbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBqc29uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGltYWdlID0ganNvblsgaSBdO1xuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZS51cmw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB1cmwgKSApIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgYXJyYXkgb2YgaW1hZ2VzIGUuZyBDdWJlVGV4dHVyZVxuXG5cdFx0XHRcdFx0Y29uc3QgaW1hZ2VBcnJheSA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IHVybC5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgY3VycmVudFVybCA9IHVybFsgaiBdO1xuXG5cdFx0XHRcdFx0XHRjb25zdCBkZXNlcmlhbGl6ZWRJbWFnZSA9IGF3YWl0IGRlc2VyaWFsaXplSW1hZ2UoIGN1cnJlbnRVcmwgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBkZXNlcmlhbGl6ZWRJbWFnZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGRlc2VyaWFsaXplZEltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGltYWdlQXJyYXkucHVzaCggZGVzZXJpYWxpemVkSW1hZ2UgKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc3BlY2lhbCBjYXNlOiBoYW5kbGUgYXJyYXkgb2YgZGF0YSB0ZXh0dXJlcyBmb3IgY3ViZSB0ZXh0dXJlc1xuXG5cdFx0XHRcdFx0XHRcdFx0aW1hZ2VBcnJheS5wdXNoKCBuZXcgRGF0YVRleHR1cmUoIGRlc2VyaWFsaXplZEltYWdlLmRhdGEsIGRlc2VyaWFsaXplZEltYWdlLndpZHRoLCBkZXNlcmlhbGl6ZWRJbWFnZS5oZWlnaHQgKSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0gPSBuZXcgU291cmNlKCBpbWFnZUFycmF5ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgc2luZ2xlIGltYWdlXG5cblx0XHRcdFx0XHRjb25zdCBkZXNlcmlhbGl6ZWRJbWFnZSA9IGF3YWl0IGRlc2VyaWFsaXplSW1hZ2UoIGltYWdlLnVybCApO1xuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbmV3IFNvdXJjZSggZGVzZXJpYWxpemVkSW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZXM7XG5cblx0fVxuXG5cdHBhcnNlVGV4dHVyZXMoIGpzb24sIGltYWdlcyApIHtcblxuXHRcdGZ1bmN0aW9uIHBhcnNlQ29uc3RhbnQoIHZhbHVlLCB0eXBlICkge1xuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSByZXR1cm4gdmFsdWU7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlci5wYXJzZVRleHR1cmU6IENvbnN0YW50IHNob3VsZCBiZSBpbiBudW1lcmljIGZvcm0uJywgdmFsdWUgKTtcblxuXHRcdFx0cmV0dXJuIHR5cGVbIHZhbHVlIF07XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGlmICggZGF0YS5pbWFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBcImltYWdlXCIgc3BlY2lmaWVkIGZvcicsIGRhdGEudXVpZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGltYWdlc1sgZGF0YS5pbWFnZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZScsIGRhdGEuaW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3Qgc291cmNlID0gaW1hZ2VzWyBkYXRhLmltYWdlIF07XG5cdFx0XHRcdGNvbnN0IGltYWdlID0gc291cmNlLmRhdGE7XG5cblx0XHRcdFx0bGV0IHRleHR1cmU7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbWFnZSApICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZS5sZW5ndGggPT09IDYgKSB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZSAmJiBpbWFnZS5kYXRhICkge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaW1hZ2UgKSB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsgLy8gdGV4dHVyZXMgY2FuIGhhdmUgdW5kZWZpbmVkIGltYWdlIGRhdGFcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZS5zb3VyY2UgPSBzb3VyY2U7XG5cblx0XHRcdFx0dGV4dHVyZS51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm5hbWUgPSBkYXRhLm5hbWU7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm1hcHBpbmcgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWFwcGluZyA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWFwcGluZywgVEVYVFVSRV9NQVBQSU5HICk7XG5cdFx0XHRcdGlmICggZGF0YS5jaGFubmVsICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmNoYW5uZWwgPSBkYXRhLmNoYW5uZWw7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm9mZnNldCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5vZmZzZXQuZnJvbUFycmF5KCBkYXRhLm9mZnNldCApO1xuXHRcdFx0XHRpZiAoIGRhdGEucmVwZWF0ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnJlcGVhdC5mcm9tQXJyYXkoIGRhdGEucmVwZWF0ICk7XG5cdFx0XHRcdGlmICggZGF0YS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuY2VudGVyLmZyb21BcnJheSggZGF0YS5jZW50ZXIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnJvdGF0aW9uID0gZGF0YS5yb3RhdGlvbjtcblxuXHRcdFx0XHRpZiAoIGRhdGEud3JhcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwUyA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMCBdLCBURVhUVVJFX1dSQVBQSU5HICk7XG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwVCA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMSBdLCBURVhUVVJFX1dSQVBQSU5HICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGF0YS5mb3JtYXQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZm9ybWF0ID0gZGF0YS5mb3JtYXQ7XG5cdFx0XHRcdGlmICggZGF0YS5pbnRlcm5hbEZvcm1hdCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCA9IGRhdGEuaW50ZXJuYWxGb3JtYXQ7XG5cdFx0XHRcdGlmICggZGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnR5cGUgPSBkYXRhLnR5cGU7XG5cdFx0XHRcdGlmICggZGF0YS5jb2xvclNwYWNlICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmNvbG9yU3BhY2UgPSBkYXRhLmNvbG9yU3BhY2U7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5taW5GaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1pbkZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLm1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5tYWdGaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1hZ0ZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuYW5pc290cm9weSA9IGRhdGEuYW5pc290cm9weTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuZmxpcFkgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZmxpcFkgPSBkYXRhLmZsaXBZO1xuXG5cdFx0XHRcdGlmICggZGF0YS5nZW5lcmF0ZU1pcG1hcHMgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZGF0YS5nZW5lcmF0ZU1pcG1hcHM7XG5cdFx0XHRcdGlmICggZGF0YS5wcmVtdWx0aXBseUFscGhhICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgPSBkYXRhLnByZW11bHRpcGx5QWxwaGE7XG5cdFx0XHRcdGlmICggZGF0YS51bnBhY2tBbGlnbm1lbnQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ID0gZGF0YS51bnBhY2tBbGlnbm1lbnQ7XG5cdFx0XHRcdGlmICggZGF0YS5jb21wYXJlRnVuY3Rpb24gIT09IHVuZGVmaW5lZCApIHRleHR1cmUuY29tcGFyZUZ1bmN0aW9uID0gZGF0YS5jb21wYXJlRnVuY3Rpb247XG5cblx0XHRcdFx0aWYgKCBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTtcblxuXHRcdFx0XHR0ZXh0dXJlc1sgZGF0YS51dWlkIF0gPSB0ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZXM7XG5cblx0fVxuXG5cdHBhcnNlT2JqZWN0KCBkYXRhLCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMsIHRleHR1cmVzLCBhbmltYXRpb25zICkge1xuXG5cdFx0bGV0IG9iamVjdDtcblxuXHRcdGZ1bmN0aW9uIGdldEdlb21ldHJ5KCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJpZXNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGdlb21ldHJ5JywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBnZW9tZXRyaWVzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRNYXRlcmlhbCggbmFtZSApIHtcblxuXHRcdFx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblxuXHRcdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IG5hbWUubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHV1aWQgPSBuYW1lWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsc1sgdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsJywgdXVpZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWxzWyB1dWlkIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGFycmF5O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWxzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWxzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRUZXh0dXJlKCB1dWlkICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmVzWyB1dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlJywgdXVpZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0dXJlc1sgdXVpZCBdO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGdlb21ldHJ5LCBtYXRlcmlhbDtcblxuXHRcdHN3aXRjaCAoIGRhdGEudHlwZSApIHtcblxuXHRcdFx0Y2FzZSAnU2NlbmUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTY2VuZSgpO1xuXG5cdFx0XHRcdGlmICggZGF0YS5iYWNrZ3JvdW5kICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIE51bWJlci5pc0ludGVnZXIoIGRhdGEuYmFja2dyb3VuZCApICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IG5ldyBDb2xvciggZGF0YS5iYWNrZ3JvdW5kICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IGdldFRleHR1cmUoIGRhdGEuYmFja2dyb3VuZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRhdGEuZW52aXJvbm1lbnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5lbnZpcm9ubWVudCA9IGdldFRleHR1cmUoIGRhdGEuZW52aXJvbm1lbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmZvZy50eXBlID09PSAnRm9nJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2coIGRhdGEuZm9nLmNvbG9yLCBkYXRhLmZvZy5uZWFyLCBkYXRhLmZvZy5mYXIgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGRhdGEuZm9nLnR5cGUgPT09ICdGb2dFeHAyJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2dFeHAyKCBkYXRhLmZvZy5jb2xvciwgZGF0YS5mb2cuZGVuc2l0eSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmZvZy5uYW1lICE9PSAnJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZy5uYW1lID0gZGF0YS5mb2cubmFtZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkYXRhLmJhY2tncm91bmRCbHVycmluZXNzICE9PSB1bmRlZmluZWQgKSBvYmplY3QuYmFja2dyb3VuZEJsdXJyaW5lc3MgPSBkYXRhLmJhY2tncm91bmRCbHVycmluZXNzO1xuXHRcdFx0XHRpZiAoIGRhdGEuYmFja2dyb3VuZEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmJhY2tncm91bmRJbnRlbnNpdHkgPSBkYXRhLmJhY2tncm91bmRJbnRlbnNpdHk7XG5cdFx0XHRcdGlmICggZGF0YS5iYWNrZ3JvdW5kUm90YXRpb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5iYWNrZ3JvdW5kUm90YXRpb24uZnJvbUFycmF5KCBkYXRhLmJhY2tncm91bmRSb3RhdGlvbiApO1xuXG5cdFx0XHRcdGlmICggZGF0YS5lbnZpcm9ubWVudEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmVudmlyb25tZW50SW50ZW5zaXR5ID0gZGF0YS5lbnZpcm9ubWVudEludGVuc2l0eTtcblx0XHRcdFx0aWYgKCBkYXRhLmVudmlyb25tZW50Um90YXRpb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5lbnZpcm9ubWVudFJvdGF0aW9uLmZyb21BcnJheSggZGF0YS5lbnZpcm9ubWVudFJvdGF0aW9uICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1BlcnNwZWN0aXZlQ2FtZXJhJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGRhdGEuZm92LCBkYXRhLmFzcGVjdCwgZGF0YS5uZWFyLCBkYXRhLmZhciApO1xuXG5cdFx0XHRcdGlmICggZGF0YS5mb2N1cyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmZvY3VzID0gZGF0YS5mb2N1cztcblx0XHRcdFx0aWYgKCBkYXRhLnpvb20gIT09IHVuZGVmaW5lZCApIG9iamVjdC56b29tID0gZGF0YS56b29tO1xuXHRcdFx0XHRpZiAoIGRhdGEuZmlsbUdhdWdlICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZmlsbUdhdWdlID0gZGF0YS5maWxtR2F1Z2U7XG5cdFx0XHRcdGlmICggZGF0YS5maWxtT2Zmc2V0ICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZmlsbU9mZnNldCA9IGRhdGEuZmlsbU9mZnNldDtcblx0XHRcdFx0aWYgKCBkYXRhLnZpZXcgIT09IHVuZGVmaW5lZCApIG9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIGRhdGEudmlldyApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdPcnRob2dyYXBoaWNDYW1lcmEnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIGRhdGEubGVmdCwgZGF0YS5yaWdodCwgZGF0YS50b3AsIGRhdGEuYm90dG9tLCBkYXRhLm5lYXIsIGRhdGEuZmFyICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLnpvb20gIT09IHVuZGVmaW5lZCApIG9iamVjdC56b29tID0gZGF0YS56b29tO1xuXHRcdFx0XHRpZiAoIGRhdGEudmlldyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgZGF0YS52aWV3ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0FtYmllbnRMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEFtYmllbnRMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IERpcmVjdGlvbmFsTGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7XG5cdFx0XHRcdG9iamVjdC50YXJnZXQgPSBkYXRhLnRhcmdldCB8fMKgJyc7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1BvaW50TGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQb2ludExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS5kaXN0YW5jZSwgZGF0YS5kZWNheSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdSZWN0QXJlYUxpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUmVjdEFyZWFMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHksIGRhdGEud2lkdGgsIGRhdGEuaGVpZ2h0ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1Nwb3RMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFNwb3RMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHksIGRhdGEuZGlzdGFuY2UsIGRhdGEuYW5nbGUsIGRhdGEucGVudW1icmEsIGRhdGEuZGVjYXkgKTtcblx0XHRcdFx0b2JqZWN0LnRhcmdldCA9IGRhdGEudGFyZ2V0IHx8wqAnJztcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnSGVtaXNwaGVyZUxpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgSGVtaXNwaGVyZUxpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmdyb3VuZENvbG9yLCBkYXRhLmludGVuc2l0eSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMaWdodFByb2JlJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGlnaHRQcm9iZSgpLmZyb21KU09OKCBkYXRhICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1NraW5uZWRNZXNoJzpcblxuXHRcdFx0XHRnZW9tZXRyeSA9IGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICk7XG5cdFx0XHQgXHRtYXRlcmlhbCA9IGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICk7XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFNraW5uZWRNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuYmluZE1vZGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5iaW5kTW9kZSA9IGRhdGEuYmluZE1vZGU7XG5cdFx0XHRcdGlmICggZGF0YS5iaW5kTWF0cml4ICE9PSB1bmRlZmluZWQgKSBvYmplY3QuYmluZE1hdHJpeC5mcm9tQXJyYXkoIGRhdGEuYmluZE1hdHJpeCApO1xuXHRcdFx0XHRpZiAoIGRhdGEuc2tlbGV0b24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5za2VsZXRvbiA9IGRhdGEuc2tlbGV0b247XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ01lc2gnOlxuXG5cdFx0XHRcdGdlb21ldHJ5ID0gZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKTtcblx0XHRcdFx0bWF0ZXJpYWwgPSBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApO1xuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnSW5zdGFuY2VkTWVzaCc6XG5cblx0XHRcdFx0Z2VvbWV0cnkgPSBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApO1xuXHRcdFx0XHRtYXRlcmlhbCA9IGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICk7XG5cdFx0XHRcdGNvbnN0IGNvdW50ID0gZGF0YS5jb3VudDtcblx0XHRcdFx0Y29uc3QgaW5zdGFuY2VNYXRyaXggPSBkYXRhLmluc3RhbmNlTWF0cml4O1xuXHRcdFx0XHRjb25zdCBpbnN0YW5jZUNvbG9yID0gZGF0YS5pbnN0YW5jZUNvbG9yO1xuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBJbnN0YW5jZWRNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGNvdW50ICk7XG5cdFx0XHRcdG9iamVjdC5pbnN0YW5jZU1hdHJpeCA9IG5ldyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIGluc3RhbmNlTWF0cml4LmFycmF5ICksIDE2ICk7XG5cdFx0XHRcdGlmICggaW5zdGFuY2VDb2xvciAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lmluc3RhbmNlQ29sb3IgPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBpbnN0YW5jZUNvbG9yLmFycmF5ICksIGluc3RhbmNlQ29sb3IuaXRlbVNpemUgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnQmF0Y2hlZE1lc2gnOlxuXG5cdFx0XHRcdGdlb21ldHJ5ID0gZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKTtcblx0XHRcdFx0bWF0ZXJpYWwgPSBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApO1xuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBCYXRjaGVkTWVzaCggZGF0YS5tYXhJbnN0YW5jZUNvdW50LCBkYXRhLm1heFZlcnRleENvdW50LCBkYXRhLm1heEluZGV4Q291bnQsIG1hdGVyaWFsICk7XG5cdFx0XHRcdG9iamVjdC5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuXHRcdFx0XHRvYmplY3QucGVyT2JqZWN0RnJ1c3R1bUN1bGxlZCA9IGRhdGEucGVyT2JqZWN0RnJ1c3R1bUN1bGxlZDtcblx0XHRcdFx0b2JqZWN0LnNvcnRPYmplY3RzID0gZGF0YS5zb3J0T2JqZWN0cztcblxuXHRcdFx0XHRvYmplY3QuX2RyYXdSYW5nZXMgPSBkYXRhLmRyYXdSYW5nZXM7XG5cdFx0XHRcdG9iamVjdC5fcmVzZXJ2ZWRSYW5nZXMgPSBkYXRhLnJlc2VydmVkUmFuZ2VzO1xuXG5cdFx0XHRcdG9iamVjdC5fdmlzaWJpbGl0eSA9IGRhdGEudmlzaWJpbGl0eTtcblx0XHRcdFx0b2JqZWN0Ll9hY3RpdmUgPSBkYXRhLmFjdGl2ZTtcblx0XHRcdFx0b2JqZWN0Ll9ib3VuZHMgPSBkYXRhLmJvdW5kcy5tYXAoIGJvdW5kID0+IHtcblxuXHRcdFx0XHRcdGNvbnN0IGJveCA9IG5ldyBCb3gzKCk7XG5cdFx0XHRcdFx0Ym94Lm1pbi5mcm9tQXJyYXkoIGJvdW5kLmJveE1pbiApO1xuXHRcdFx0XHRcdGJveC5tYXguZnJvbUFycmF5KCBib3VuZC5ib3hNYXggKTtcblxuXHRcdFx0XHRcdGNvbnN0IHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblx0XHRcdFx0XHRzcGhlcmUucmFkaXVzID0gYm91bmQuc3BoZXJlUmFkaXVzO1xuXHRcdFx0XHRcdHNwaGVyZS5jZW50ZXIuZnJvbUFycmF5KCBib3VuZC5zcGhlcmVDZW50ZXIgKTtcblxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRib3hJbml0aWFsaXplZDogYm91bmQuYm94SW5pdGlhbGl6ZWQsXG5cdFx0XHRcdFx0XHRib3g6IGJveCxcblxuXHRcdFx0XHRcdFx0c3BoZXJlSW5pdGlhbGl6ZWQ6IGJvdW5kLnNwaGVyZUluaXRpYWxpemVkLFxuXHRcdFx0XHRcdFx0c3BoZXJlOiBzcGhlcmVcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRvYmplY3QuX21heEluc3RhbmNlQ291bnQgPSBkYXRhLm1heEluc3RhbmNlQ291bnQ7XG5cdFx0XHRcdG9iamVjdC5fbWF4VmVydGV4Q291bnQgPSBkYXRhLm1heFZlcnRleENvdW50O1xuXHRcdFx0XHRvYmplY3QuX21heEluZGV4Q291bnQgPSBkYXRhLm1heEluZGV4Q291bnQ7XG5cblx0XHRcdFx0b2JqZWN0Ll9nZW9tZXRyeUluaXRpYWxpemVkID0gZGF0YS5nZW9tZXRyeUluaXRpYWxpemVkO1xuXHRcdFx0XHRvYmplY3QuX2dlb21ldHJ5Q291bnQgPSBkYXRhLmdlb21ldHJ5Q291bnQ7XG5cblx0XHRcdFx0b2JqZWN0Ll9tYXRyaWNlc1RleHR1cmUgPSBnZXRUZXh0dXJlKCBkYXRhLm1hdHJpY2VzVGV4dHVyZS51dWlkICk7XG5cdFx0XHRcdGlmICggZGF0YS5jb2xvcnNUZXh0dXJlICE9PSB1bmRlZmluZWQgKSBvYmplY3QuX2NvbG9yc1RleHR1cmUgPSBnZXRUZXh0dXJlKCBkYXRhLmNvbG9yc1RleHR1cmUudXVpZCApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMT0QnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMT0QoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IExpbmUoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZUxvb3AnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lTG9vcCggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMaW5lU2VnbWVudHMnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lU2VnbWVudHMoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUG9pbnRDbG91ZCc6XG5cdFx0XHRjYXNlICdQb2ludHMnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQb2ludHMoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU3ByaXRlJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3ByaXRlKCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0dyb3VwJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgR3JvdXAoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnQm9uZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEJvbmUoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdH1cblxuXHRcdG9iamVjdC51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5uYW1lID0gZGF0YS5uYW1lO1xuXG5cdFx0aWYgKCBkYXRhLm1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRvYmplY3QubWF0cml4LmZyb21BcnJheSggZGF0YS5tYXRyaXggKTtcblxuXHRcdFx0aWYgKCBkYXRhLm1hdHJpeEF1dG9VcGRhdGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZGF0YS5tYXRyaXhBdXRvVXBkYXRlO1xuXHRcdFx0aWYgKCBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSApIG9iamVjdC5tYXRyaXguZGVjb21wb3NlKCBvYmplY3QucG9zaXRpb24sIG9iamVjdC5xdWF0ZXJuaW9uLCBvYmplY3Quc2NhbGUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggZGF0YS5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnBvc2l0aW9uLmZyb21BcnJheSggZGF0YS5wb3NpdGlvbiApO1xuXHRcdFx0aWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBvYmplY3Qucm90YXRpb24uZnJvbUFycmF5KCBkYXRhLnJvdGF0aW9uICk7XG5cdFx0XHRpZiAoIGRhdGEucXVhdGVybmlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnF1YXRlcm5pb24uZnJvbUFycmF5KCBkYXRhLnF1YXRlcm5pb24gKTtcblx0XHRcdGlmICggZGF0YS5zY2FsZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNjYWxlLmZyb21BcnJheSggZGF0YS5zY2FsZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLnVwICE9PSB1bmRlZmluZWQgKSBvYmplY3QudXAuZnJvbUFycmF5KCBkYXRhLnVwICk7XG5cblx0XHRpZiAoIGRhdGEuY2FzdFNoYWRvdyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmNhc3RTaGFkb3cgPSBkYXRhLmNhc3RTaGFkb3c7XG5cdFx0aWYgKCBkYXRhLnJlY2VpdmVTaGFkb3cgIT09IHVuZGVmaW5lZCApIG9iamVjdC5yZWNlaXZlU2hhZG93ID0gZGF0YS5yZWNlaXZlU2hhZG93O1xuXG5cdFx0aWYgKCBkYXRhLnNoYWRvdyApIHtcblxuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5pbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cuaW50ZW5zaXR5ID0gZGF0YS5zaGFkb3cuaW50ZW5zaXR5O1xuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5iaWFzICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93LmJpYXMgPSBkYXRhLnNoYWRvdy5iaWFzO1xuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5ub3JtYWxCaWFzICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93Lm5vcm1hbEJpYXMgPSBkYXRhLnNoYWRvdy5ub3JtYWxCaWFzO1xuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5yYWRpdXMgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cucmFkaXVzID0gZGF0YS5zaGFkb3cucmFkaXVzO1xuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5tYXBTaXplICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93Lm1hcFNpemUuZnJvbUFycmF5KCBkYXRhLnNoYWRvdy5tYXBTaXplICk7XG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LmNhbWVyYSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5jYW1lcmEgPSB0aGlzLnBhcnNlT2JqZWN0KCBkYXRhLnNoYWRvdy5jYW1lcmEgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS52aXNpYmxlICE9PSB1bmRlZmluZWQgKSBvYmplY3QudmlzaWJsZSA9IGRhdGEudmlzaWJsZTtcblx0XHRpZiAoIGRhdGEuZnJ1c3R1bUN1bGxlZCAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmZydXN0dW1DdWxsZWQgPSBkYXRhLmZydXN0dW1DdWxsZWQ7XG5cdFx0aWYgKCBkYXRhLnJlbmRlck9yZGVyICE9PSB1bmRlZmluZWQgKSBvYmplY3QucmVuZGVyT3JkZXIgPSBkYXRhLnJlbmRlck9yZGVyO1xuXHRcdGlmICggZGF0YS51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTtcblx0XHRpZiAoIGRhdGEubGF5ZXJzICE9PSB1bmRlZmluZWQgKSBvYmplY3QubGF5ZXJzLm1hc2sgPSBkYXRhLmxheWVycztcblxuXHRcdGlmICggZGF0YS5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBjaGlsZHJlbiA9IGRhdGEuY2hpbGRyZW47XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRvYmplY3QuYWRkKCB0aGlzLnBhcnNlT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMsIHRleHR1cmVzLCBhbmltYXRpb25zICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLmFuaW1hdGlvbnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3Qgb2JqZWN0QW5pbWF0aW9ucyA9IGRhdGEuYW5pbWF0aW9ucztcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgb2JqZWN0QW5pbWF0aW9ucy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdXVpZCA9IG9iamVjdEFuaW1hdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRvYmplY3QuYW5pbWF0aW9ucy5wdXNoKCBhbmltYXRpb25zWyB1dWlkIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLnR5cGUgPT09ICdMT0QnICkge1xuXG5cdFx0XHRpZiAoIGRhdGEuYXV0b1VwZGF0ZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmF1dG9VcGRhdGUgPSBkYXRhLmF1dG9VcGRhdGU7XG5cblx0XHRcdGNvbnN0IGxldmVscyA9IGRhdGEubGV2ZWxzO1xuXG5cdFx0XHRmb3IgKCBsZXQgbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGxldmVsID0gbGV2ZWxzWyBsIF07XG5cdFx0XHRcdGNvbnN0IGNoaWxkID0gb2JqZWN0LmdldE9iamVjdEJ5UHJvcGVydHkoICd1dWlkJywgbGV2ZWwub2JqZWN0ICk7XG5cblx0XHRcdFx0aWYgKCBjaGlsZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0LmFkZExldmVsKCBjaGlsZCwgbGV2ZWwuZGlzdGFuY2UsIGxldmVsLmh5c3RlcmVzaXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBvYmplY3Q7XG5cblx0fVxuXG5cdGJpbmRTa2VsZXRvbnMoIG9iamVjdCwgc2tlbGV0b25zICkge1xuXG5cdFx0aWYgKCBPYmplY3Qua2V5cyggc2tlbGV0b25zICkubGVuZ3RoID09PSAwICkgcmV0dXJuO1xuXG5cdFx0b2JqZWN0LnRyYXZlcnNlKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuXG5cdFx0XHRpZiAoIGNoaWxkLmlzU2tpbm5lZE1lc2ggPT09IHRydWUgJiYgY2hpbGQuc2tlbGV0b24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zdCBza2VsZXRvbiA9IHNrZWxldG9uc1sgY2hpbGQuc2tlbGV0b24gXTtcblxuXHRcdFx0XHRpZiAoIHNrZWxldG9uID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IE5vIHNrZWxldG9uIGZvdW5kIHdpdGggVVVJRDonLCBjaGlsZC5za2VsZXRvbiApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjaGlsZC5iaW5kKCBza2VsZXRvbiwgY2hpbGQuYmluZE1hdHJpeCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSApO1xuXG5cdH1cblxuXHRiaW5kTGlnaHRUYXJnZXRzKCBvYmplY3QgKSB7XG5cblx0XHRvYmplY3QudHJhdmVyc2UoIGZ1bmN0aW9uICggY2hpbGQgKSB7XG5cblx0XHRcdGlmICggY2hpbGQuaXNEaXJlY3Rpb25hbExpZ2h0IHx8wqBjaGlsZC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1dWlkID0gY2hpbGQudGFyZ2V0O1xuXG5cdFx0XHRcdGNvbnN0IHRhcmdldCA9IG9iamVjdC5nZXRPYmplY3RCeVByb3BlcnR5KCAndXVpZCcsIHV1aWQgKTtcblxuXHRcdFx0XHRpZiAoIHRhcmdldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y2hpbGQudGFyZ2V0ID0gdGFyZ2V0O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjaGlsZC50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHR9XG5cbn1cblxuY29uc3QgVEVYVFVSRV9NQVBQSU5HID0ge1xuXHRVVk1hcHBpbmc6IFVWTWFwcGluZyxcblx0Q3ViZVJlZmxlY3Rpb25NYXBwaW5nOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEN1YmVSZWZyYWN0aW9uTWFwcGluZzogQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLFxuXHRFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZzogRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOiBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyxcblx0Q3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nXG59O1xuXG5jb25zdCBURVhUVVJFX1dSQVBQSU5HID0ge1xuXHRSZXBlYXRXcmFwcGluZzogUmVwZWF0V3JhcHBpbmcsXG5cdENsYW1wVG9FZGdlV3JhcHBpbmc6IENsYW1wVG9FZGdlV3JhcHBpbmcsXG5cdE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmdcbn07XG5cbmNvbnN0IFRFWFRVUkVfRklMVEVSID0ge1xuXHROZWFyZXN0RmlsdGVyOiBOZWFyZXN0RmlsdGVyLFxuXHROZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcjogTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIsXG5cdE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXI6IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsXG5cdExpbmVhckZpbHRlcjogTGluZWFyRmlsdGVyLFxuXHRMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyOiBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyLFxuXHRMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI6IExpbmVhck1pcG1hcExpbmVhckZpbHRlclxufTtcblxuZXhwb3J0IHsgT2JqZWN0TG9hZGVyIH07XG4iLCJpbXBvcnQgeyBDYWNoZSB9IGZyb20gJy4vQ2FjaGUuanMnO1xuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSAnLi9Mb2FkZXIuanMnO1xuXG5jbGFzcyBJbWFnZUJpdG1hcExvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdFx0dGhpcy5pc0ltYWdlQml0bWFwTG9hZGVyID0gdHJ1ZTtcblxuXHRcdGlmICggdHlwZW9mIGNyZWF0ZUltYWdlQml0bWFwID09PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGNyZWF0ZUltYWdlQml0bWFwKCkgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiBmZXRjaCA9PT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlQml0bWFwTG9hZGVyOiBmZXRjaCgpIG5vdCBzdXBwb3J0ZWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5vcHRpb25zID0geyBwcmVtdWx0aXBseUFscGhhOiAnbm9uZScgfTtcblxuXHR9XG5cblx0c2V0T3B0aW9ucyggb3B0aW9ucyApIHtcblxuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0Ly8gSWYgY2FjaGVkIGlzIGEgcHJvbWlzZSwgd2FpdCBmb3IgaXQgdG8gcmVzb2x2ZVxuXHRcdFx0aWYgKCBjYWNoZWQudGhlbiApIHtcblxuXHRcdFx0XHRjYWNoZWQudGhlbiggaW1hZ2VCaXRtYXAgPT4ge1xuXG5cdFx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGltYWdlQml0bWFwICk7XG5cblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHRcdH0gKS5jYXRjaCggZSA9PiB7XG5cblx0XHRcdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgY2FjaGVkIGlzIG5vdCBhIHByb21pc2UgKGkuZS4sIGl0J3MgYWxyZWFkeSBhbiBpbWFnZUJpdG1hcClcblx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggY2FjaGVkICk7XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZmV0Y2hPcHRpb25zID0ge307XG5cdFx0ZmV0Y2hPcHRpb25zLmNyZWRlbnRpYWxzID0gKCB0aGlzLmNyb3NzT3JpZ2luID09PSAnYW5vbnltb3VzJyApID8gJ3NhbWUtb3JpZ2luJyA6ICdpbmNsdWRlJztcblx0XHRmZXRjaE9wdGlvbnMuaGVhZGVycyA9IHRoaXMucmVxdWVzdEhlYWRlcjtcblxuXHRcdGNvbnN0IHByb21pc2UgPSBmZXRjaCggdXJsLCBmZXRjaE9wdGlvbnMgKS50aGVuKCBmdW5jdGlvbiAoIHJlcyApIHtcblxuXHRcdFx0cmV0dXJuIHJlcy5ibG9iKCk7XG5cblx0XHR9ICkudGhlbiggZnVuY3Rpb24gKCBibG9iICkge1xuXG5cdFx0XHRyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoIGJsb2IsIE9iamVjdC5hc3NpZ24oIHNjb3BlLm9wdGlvbnMsIHsgY29sb3JTcGFjZUNvbnZlcnNpb246ICdub25lJyB9ICkgKTtcblxuXHRcdH0gKS50aGVuKCBmdW5jdGlvbiAoIGltYWdlQml0bWFwICkge1xuXG5cdFx0XHRDYWNoZS5hZGQoIHVybCwgaW1hZ2VCaXRtYXAgKTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGltYWdlQml0bWFwICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdHJldHVybiBpbWFnZUJpdG1hcDtcblxuXHRcdH0gKS5jYXRjaCggZnVuY3Rpb24gKCBlICkge1xuXG5cdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBlICk7XG5cblx0XHRcdENhY2hlLnJlbW92ZSggdXJsICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9ICk7XG5cblx0XHRDYWNoZS5hZGQoIHVybCwgcHJvbWlzZSApO1xuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgSW1hZ2VCaXRtYXBMb2FkZXIgfTtcbiIsImxldCBfY29udGV4dDtcblxuY2xhc3MgQXVkaW9Db250ZXh0IHtcblxuXHRzdGF0aWMgZ2V0Q29udGV4dCgpIHtcblxuXHRcdGlmICggX2NvbnRleHQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2NvbnRleHQgPSBuZXcgKCB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQgKSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIF9jb250ZXh0O1xuXG5cdH1cblxuXHRzdGF0aWMgc2V0Q29udGV4dCggdmFsdWUgKSB7XG5cblx0XHRfY29udGV4dCA9IHZhbHVlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBBdWRpb0NvbnRleHQgfTtcbiIsImltcG9ydCB7IEF1ZGlvQ29udGV4dCB9IGZyb20gJy4uL2F1ZGlvL0F1ZGlvQ29udGV4dC5qcyc7XG5pbXBvcnQgeyBGaWxlTG9hZGVyIH0gZnJvbSAnLi9GaWxlTG9hZGVyLmpzJztcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4vTG9hZGVyLmpzJztcblxuY2xhc3MgQXVkaW9Mb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHQvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBidWZmZXIuIFRoZSBgZGVjb2RlQXVkaW9EYXRhYCBtZXRob2Rcblx0XHRcdFx0Ly8gZGV0YWNoZXMgdGhlIGJ1ZmZlciB3aGVuIGNvbXBsZXRlLCBwcmV2ZW50aW5nIHJldXNlLlxuXHRcdFx0XHRjb25zdCBidWZmZXJDb3B5ID0gYnVmZmVyLnNsaWNlKCAwICk7XG5cblx0XHRcdFx0Y29uc3QgY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cdFx0XHRcdGNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKCBidWZmZXJDb3B5LCBmdW5jdGlvbiAoIGF1ZGlvQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0b25Mb2FkKCBhdWRpb0J1ZmZlciApO1xuXG5cdFx0XHRcdH0gKS5jYXRjaCggaGFuZGxlRXJyb3IgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0aGFuZGxlRXJyb3IoIGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlRXJyb3IoIGUgKSB7XG5cblx0XHRcdGlmICggb25FcnJvciApIHtcblxuXHRcdFx0XHRvbkVycm9yKCBlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBBdWRpb0xvYWRlciB9O1xuIiwiaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdGgvTWF0cml4NC5qcyc7XG5pbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgUGVyc3BlY3RpdmVDYW1lcmEgfSBmcm9tICcuL1BlcnNwZWN0aXZlQ2FtZXJhLmpzJztcblxuY29uc3QgX2V5ZVJpZ2h0ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2V5ZUxlZnQgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfcHJvamVjdGlvbk1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuY2xhc3MgU3RlcmVvQ2FtZXJhIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMudHlwZSA9ICdTdGVyZW9DYW1lcmEnO1xuXG5cdFx0dGhpcy5hc3BlY3QgPSAxO1xuXG5cdFx0dGhpcy5leWVTZXAgPSAwLjA2NDtcblxuXHRcdHRoaXMuY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdHRoaXMuY2FtZXJhTC5sYXllcnMuZW5hYmxlKCAxICk7XG5cdFx0dGhpcy5jYW1lcmFMLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdHRoaXMuY2FtZXJhUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cdFx0dGhpcy5jYW1lcmFSLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuX2NhY2hlID0ge1xuXHRcdFx0Zm9jdXM6IG51bGwsXG5cdFx0XHRmb3Y6IG51bGwsXG5cdFx0XHRhc3BlY3Q6IG51bGwsXG5cdFx0XHRuZWFyOiBudWxsLFxuXHRcdFx0ZmFyOiBudWxsLFxuXHRcdFx0em9vbTogbnVsbCxcblx0XHRcdGV5ZVNlcDogbnVsbFxuXHRcdH07XG5cblx0fVxuXG5cdHVwZGF0ZSggY2FtZXJhICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZTtcblxuXHRcdGNvbnN0IG5lZWRzVXBkYXRlID0gY2FjaGUuZm9jdXMgIT09IGNhbWVyYS5mb2N1cyB8fCBjYWNoZS5mb3YgIT09IGNhbWVyYS5mb3YgfHxcblx0XHRcdGNhY2hlLmFzcGVjdCAhPT0gY2FtZXJhLmFzcGVjdCAqIHRoaXMuYXNwZWN0IHx8IGNhY2hlLm5lYXIgIT09IGNhbWVyYS5uZWFyIHx8XG5cdFx0XHRjYWNoZS5mYXIgIT09IGNhbWVyYS5mYXIgfHwgY2FjaGUuem9vbSAhPT0gY2FtZXJhLnpvb20gfHwgY2FjaGUuZXllU2VwICE9PSB0aGlzLmV5ZVNlcDtcblxuXHRcdGlmICggbmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdGNhY2hlLmZvY3VzID0gY2FtZXJhLmZvY3VzO1xuXHRcdFx0Y2FjaGUuZm92ID0gY2FtZXJhLmZvdjtcblx0XHRcdGNhY2hlLmFzcGVjdCA9IGNhbWVyYS5hc3BlY3QgKiB0aGlzLmFzcGVjdDtcblx0XHRcdGNhY2hlLm5lYXIgPSBjYW1lcmEubmVhcjtcblx0XHRcdGNhY2hlLmZhciA9IGNhbWVyYS5mYXI7XG5cdFx0XHRjYWNoZS56b29tID0gY2FtZXJhLnpvb207XG5cdFx0XHRjYWNoZS5leWVTZXAgPSB0aGlzLmV5ZVNlcDtcblxuXHRcdFx0Ly8gT2ZmLWF4aXMgc3RlcmVvc2NvcGljIGVmZmVjdCBiYXNlZCBvblxuXHRcdFx0Ly8gaHR0cDovL3BhdWxib3Vya2UubmV0L3N0ZXJlb2dyYXBoaWNzL3N0ZXJlb3JlbmRlci9cblxuXHRcdFx0X3Byb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblx0XHRcdGNvbnN0IGV5ZVNlcEhhbGYgPSBjYWNoZS5leWVTZXAgLyAyO1xuXHRcdFx0Y29uc3QgZXllU2VwT25Qcm9qZWN0aW9uID0gZXllU2VwSGFsZiAqIGNhY2hlLm5lYXIgLyBjYWNoZS5mb2N1cztcblx0XHRcdGNvbnN0IHltYXggPSAoIGNhY2hlLm5lYXIgKiBNYXRoLnRhbiggTWF0aFV0aWxzLkRFRzJSQUQgKiBjYWNoZS5mb3YgKiAwLjUgKSApIC8gY2FjaGUuem9vbTtcblx0XHRcdGxldCB4bWluLCB4bWF4O1xuXG5cdFx0XHQvLyB0cmFuc2xhdGUgeE9mZnNldFxuXG5cdFx0XHRfZXllTGVmdC5lbGVtZW50c1sgMTIgXSA9IC0gZXllU2VwSGFsZjtcblx0XHRcdF9leWVSaWdodC5lbGVtZW50c1sgMTIgXSA9IGV5ZVNlcEhhbGY7XG5cblx0XHRcdC8vIGZvciBsZWZ0IGV5ZVxuXG5cdFx0XHR4bWluID0gLSB5bWF4ICogY2FjaGUuYXNwZWN0ICsgZXllU2VwT25Qcm9qZWN0aW9uO1xuXHRcdFx0eG1heCA9IHltYXggKiBjYWNoZS5hc3BlY3QgKyBleWVTZXBPblByb2plY3Rpb247XG5cblx0XHRcdF9wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF0gPSAyICogY2FjaGUubmVhciAvICggeG1heCAtIHhtaW4gKTtcblx0XHRcdF9wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA4IF0gPSAoIHhtYXggKyB4bWluICkgLyAoIHhtYXggLSB4bWluICk7XG5cblx0XHRcdHRoaXMuY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIF9wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdC8vIGZvciByaWdodCBleWVcblxuXHRcdFx0eG1pbiA9IC0geW1heCAqIGNhY2hlLmFzcGVjdCAtIGV5ZVNlcE9uUHJvamVjdGlvbjtcblx0XHRcdHhtYXggPSB5bWF4ICogY2FjaGUuYXNwZWN0IC0gZXllU2VwT25Qcm9qZWN0aW9uO1xuXG5cdFx0XHRfcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgMCBdID0gMiAqIGNhY2hlLm5lYXIgLyAoIHhtYXggLSB4bWluICk7XG5cdFx0XHRfcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgOCBdID0gKCB4bWF4ICsgeG1pbiApIC8gKCB4bWF4IC0geG1pbiApO1xuXG5cdFx0XHR0aGlzLmNhbWVyYVIucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBfcHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jYW1lcmFMLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZCApLm11bHRpcGx5KCBfZXllTGVmdCApO1xuXHRcdHRoaXMuY2FtZXJhUi5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5tdWx0aXBseSggX2V5ZVJpZ2h0ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFN0ZXJlb0NhbWVyYSB9O1xuIiwiY2xhc3MgQ2xvY2sge1xuXG5cdGNvbnN0cnVjdG9yKCBhdXRvU3RhcnQgPSB0cnVlICkge1xuXG5cdFx0dGhpcy5hdXRvU3RhcnQgPSBhdXRvU3RhcnQ7XG5cblx0XHR0aGlzLnN0YXJ0VGltZSA9IDA7XG5cdFx0dGhpcy5vbGRUaW1lID0gMDtcblx0XHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcblxuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXG5cdH1cblxuXHRzdGFydCgpIHtcblxuXHRcdHRoaXMuc3RhcnRUaW1lID0gbm93KCk7XG5cblx0XHR0aGlzLm9sZFRpbWUgPSB0aGlzLnN0YXJ0VGltZTtcblx0XHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcblx0XHR0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuXG5cdH1cblxuXHRzdG9wKCkge1xuXG5cdFx0dGhpcy5nZXRFbGFwc2VkVGltZSgpO1xuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXHRcdHRoaXMuYXV0b1N0YXJ0ID0gZmFsc2U7XG5cblx0fVxuXG5cdGdldEVsYXBzZWRUaW1lKCkge1xuXG5cdFx0dGhpcy5nZXREZWx0YSgpO1xuXHRcdHJldHVybiB0aGlzLmVsYXBzZWRUaW1lO1xuXG5cdH1cblxuXHRnZXREZWx0YSgpIHtcblxuXHRcdGxldCBkaWZmID0gMDtcblxuXHRcdGlmICggdGhpcy5hdXRvU3RhcnQgJiYgISB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdHRoaXMuc3RhcnQoKTtcblx0XHRcdHJldHVybiAwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdGNvbnN0IG5ld1RpbWUgPSBub3coKTtcblxuXHRcdFx0ZGlmZiA9ICggbmV3VGltZSAtIHRoaXMub2xkVGltZSApIC8gMTAwMDtcblx0XHRcdHRoaXMub2xkVGltZSA9IG5ld1RpbWU7XG5cblx0XHRcdHRoaXMuZWxhcHNlZFRpbWUgKz0gZGlmZjtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkaWZmO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBub3coKSB7XG5cblx0cmV0dXJuICggdHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJyA/IERhdGUgOiBwZXJmb3JtYW5jZSApLm5vdygpOyAvLyBzZWUgIzEwNzMyXG5cbn1cblxuZXhwb3J0IHsgQ2xvY2sgfTtcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4uL21hdGgvUXVhdGVybmlvbi5qcyc7XG5pbXBvcnQgeyBDbG9jayB9IGZyb20gJy4uL2NvcmUvQ2xvY2suanMnO1xuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcbmltcG9ydCB7IEF1ZGlvQ29udGV4dCB9IGZyb20gJy4vQXVkaW9Db250ZXh0LmpzJztcblxuY29uc3QgX3Bvc2l0aW9uID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3F1YXRlcm5pb24gPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5jb25zdCBfc2NhbGUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfb3JpZW50YXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIEF1ZGlvTGlzdGVuZXIgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0F1ZGlvTGlzdGVuZXInO1xuXG5cdFx0dGhpcy5jb250ZXh0ID0gQXVkaW9Db250ZXh0LmdldENvbnRleHQoKTtcblxuXHRcdHRoaXMuZ2FpbiA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cdFx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdFx0dGhpcy5maWx0ZXIgPSBudWxsO1xuXG5cdFx0dGhpcy50aW1lRGVsdGEgPSAwO1xuXG5cdFx0Ly8gcHJpdmF0ZVxuXG5cdFx0dGhpcy5fY2xvY2sgPSBuZXcgQ2xvY2soKTtcblxuXHR9XG5cblx0Z2V0SW5wdXQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nYWluO1xuXG5cdH1cblxuXHRyZW1vdmVGaWx0ZXIoKSB7XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVyICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5maWx0ZXIgKTtcblx0XHRcdHRoaXMuZmlsdGVyLmRpc2Nvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXHRcdFx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXHRcdFx0dGhpcy5maWx0ZXIgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldEZpbHRlcigpIHtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcjtcblxuXHR9XG5cblx0c2V0RmlsdGVyKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdFx0dGhpcy5maWx0ZXIuZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmZpbHRlciA9IHZhbHVlO1xuXHRcdHRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdHRoaXMuZmlsdGVyLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldE1hc3RlclZvbHVtZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZTtcblxuXHR9XG5cblx0c2V0TWFzdGVyVm9sdW1lKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZ2Fpbi5nYWluLnNldFRhcmdldEF0VGltZSggdmFsdWUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdFx0Y29uc3QgbGlzdGVuZXIgPSB0aGlzLmNvbnRleHQubGlzdGVuZXI7XG5cdFx0Y29uc3QgdXAgPSB0aGlzLnVwO1xuXG5cdFx0dGhpcy50aW1lRGVsdGEgPSB0aGlzLl9jbG9jay5nZXREZWx0YSgpO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIF9wb3NpdGlvbiwgX3F1YXRlcm5pb24sIF9zY2FsZSApO1xuXG5cdFx0X29yaWVudGF0aW9uLnNldCggMCwgMCwgLSAxICkuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiApO1xuXG5cdFx0aWYgKCBsaXN0ZW5lci5wb3NpdGlvblggKSB7XG5cblx0XHRcdC8vIGNvZGUgcGF0aCBmb3IgQ2hyb21lIChzZWUgIzE0MzkzKVxuXG5cdFx0XHRjb25zdCBlbmRUaW1lID0gdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgdGhpcy50aW1lRGVsdGE7XG5cblx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLngsIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLnksIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLnosIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLmZvcndhcmRYLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24ueCwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIuZm9yd2FyZFkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbi55LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci5mb3J3YXJkWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLnosIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLnVwWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggdXAueCwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIudXBZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCB1cC55LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci51cFoubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHVwLnosIGVuZFRpbWUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGxpc3RlbmVyLnNldFBvc2l0aW9uKCBfcG9zaXRpb24ueCwgX3Bvc2l0aW9uLnksIF9wb3NpdGlvbi56ICk7XG5cdFx0XHRsaXN0ZW5lci5zZXRPcmllbnRhdGlvbiggX29yaWVudGF0aW9uLngsIF9vcmllbnRhdGlvbi55LCBfb3JpZW50YXRpb24ueiwgdXAueCwgdXAueSwgdXAueiApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgeyBBdWRpb0xpc3RlbmVyIH07XG4iLCJpbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJy4uL2NvcmUvT2JqZWN0M0QuanMnO1xuXG5jbGFzcyBBdWRpbyBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggbGlzdGVuZXIgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0F1ZGlvJztcblxuXHRcdHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcblx0XHR0aGlzLmNvbnRleHQgPSBsaXN0ZW5lci5jb250ZXh0O1xuXG5cdFx0dGhpcy5nYWluID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblx0XHR0aGlzLmdhaW4uY29ubmVjdCggbGlzdGVuZXIuZ2V0SW5wdXQoKSApO1xuXG5cdFx0dGhpcy5hdXRvcGxheSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5idWZmZXIgPSBudWxsO1xuXHRcdHRoaXMuZGV0dW5lID0gMDtcblx0XHR0aGlzLmxvb3AgPSBmYWxzZTtcblx0XHR0aGlzLmxvb3BTdGFydCA9IDA7XG5cdFx0dGhpcy5sb29wRW5kID0gMDtcblx0XHR0aGlzLm9mZnNldCA9IDA7XG5cdFx0dGhpcy5kdXJhdGlvbiA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnBsYXliYWNrUmF0ZSA9IDE7XG5cdFx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IHRydWU7XG5cdFx0dGhpcy5zb3VyY2UgPSBudWxsO1xuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdlbXB0eSc7XG5cblx0XHR0aGlzLl9zdGFydGVkQXQgPSAwO1xuXHRcdHRoaXMuX3Byb2dyZXNzID0gMDtcblx0XHR0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcblxuXHRcdHRoaXMuZmlsdGVycyA9IFtdO1xuXG5cdH1cblxuXHRnZXRPdXRwdXQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nYWluO1xuXG5cdH1cblxuXHRzZXROb2RlU291cmNlKCBhdWRpb05vZGUgKSB7XG5cblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlO1xuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdhdWRpb05vZGUnO1xuXHRcdHRoaXMuc291cmNlID0gYXVkaW9Ob2RlO1xuXHRcdHRoaXMuY29ubmVjdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldE1lZGlhRWxlbWVudFNvdXJjZSggbWVkaWFFbGVtZW50ICkge1xuXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBmYWxzZTtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnbWVkaWFOb2RlJztcblx0XHR0aGlzLnNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UoIG1lZGlhRWxlbWVudCApO1xuXHRcdHRoaXMuY29ubmVjdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldE1lZGlhU3RyZWFtU291cmNlKCBtZWRpYVN0cmVhbSApIHtcblxuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gZmFsc2U7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ21lZGlhU3RyZWFtTm9kZSc7XG5cdFx0dGhpcy5zb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UoIG1lZGlhU3RyZWFtICk7XG5cdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0QnVmZmVyKCBhdWRpb0J1ZmZlciApIHtcblxuXHRcdHRoaXMuYnVmZmVyID0gYXVkaW9CdWZmZXI7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2J1ZmZlcic7XG5cblx0XHRpZiAoIHRoaXMuYXV0b3BsYXkgKSB0aGlzLnBsYXkoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRwbGF5KCBkZWxheSA9IDAgKSB7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogQXVkaW8gaXMgYWxyZWFkeSBwbGF5aW5nLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLl9zdGFydGVkQXQgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyBkZWxheTtcblxuXHRcdGNvbnN0IHNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcblx0XHRzb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG5cdFx0c291cmNlLmxvb3AgPSB0aGlzLmxvb3A7XG5cdFx0c291cmNlLmxvb3BTdGFydCA9IHRoaXMubG9vcFN0YXJ0O1xuXHRcdHNvdXJjZS5sb29wRW5kID0gdGhpcy5sb29wRW5kO1xuXHRcdHNvdXJjZS5vbmVuZGVkID0gdGhpcy5vbkVuZGVkLmJpbmQoIHRoaXMgKTtcblx0XHRzb3VyY2Uuc3RhcnQoIHRoaXMuX3N0YXJ0ZWRBdCwgdGhpcy5fcHJvZ3Jlc3MgKyB0aGlzLm9mZnNldCwgdGhpcy5kdXJhdGlvbiApO1xuXG5cdFx0dGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xuXG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cblx0XHR0aGlzLnNldERldHVuZSggdGhpcy5kZXR1bmUgKTtcblx0XHR0aGlzLnNldFBsYXliYWNrUmF0ZSggdGhpcy5wbGF5YmFja1JhdGUgKTtcblxuXHRcdHJldHVybiB0aGlzLmNvbm5lY3QoKTtcblxuXHR9XG5cblx0cGF1c2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Ly8gdXBkYXRlIGN1cnJlbnQgcHJvZ3Jlc3NcblxuXHRcdFx0dGhpcy5fcHJvZ3Jlc3MgKz0gTWF0aC5tYXgoIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSAtIHRoaXMuX3N0YXJ0ZWRBdCwgMCApICogdGhpcy5wbGF5YmFja1JhdGU7XG5cblx0XHRcdGlmICggdGhpcy5sb29wID09PSB0cnVlICkge1xuXG5cdFx0XHRcdC8vIGVuc3VyZSBfcHJvZ3Jlc3MgZG9lcyBub3QgZXhjZWVkIGR1cmF0aW9uIHdpdGggbG9vcGVkIGF1ZGlvc1xuXG5cdFx0XHRcdHRoaXMuX3Byb2dyZXNzID0gdGhpcy5fcHJvZ3Jlc3MgJSAoIHRoaXMuZHVyYXRpb24gfHwgdGhpcy5idWZmZXIuZHVyYXRpb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNvdXJjZS5zdG9wKCk7XG5cdFx0XHR0aGlzLnNvdXJjZS5vbmVuZGVkID0gbnVsbDtcblxuXHRcdFx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdG9wKCkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3Byb2dyZXNzID0gMDtcblxuXHRcdGlmICggdGhpcy5zb3VyY2UgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLnN0b3AoKTtcblx0XHRcdHRoaXMuc291cmNlLm9uZW5kZWQgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb25uZWN0KCkge1xuXG5cdFx0aWYgKCB0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuY29ubmVjdCggdGhpcy5maWx0ZXJzWyAwIF0gKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAxLCBsID0gdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5maWx0ZXJzWyBpIC0gMSBdLmNvbm5lY3QoIHRoaXMuZmlsdGVyc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5maWx0ZXJzWyB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMSBdLmNvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmNvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGlzY29ubmVjdCgpIHtcblxuXHRcdGlmICggdGhpcy5fY29ubmVjdGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuZGlzY29ubmVjdCggdGhpcy5maWx0ZXJzWyAwIF0gKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAxLCBsID0gdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5maWx0ZXJzWyBpIC0gMSBdLmRpc2Nvbm5lY3QoIHRoaXMuZmlsdGVyc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5maWx0ZXJzWyB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMSBdLmRpc2Nvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmRpc2Nvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldEZpbHRlcnMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJzO1xuXG5cdH1cblxuXHRzZXRGaWx0ZXJzKCB2YWx1ZSApIHtcblxuXHRcdGlmICggISB2YWx1ZSApIHZhbHVlID0gW107XG5cblx0XHRpZiAoIHRoaXMuX2Nvbm5lY3RlZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5kaXNjb25uZWN0KCk7XG5cdFx0XHR0aGlzLmZpbHRlcnMgPSB2YWx1ZS5zbGljZSgpO1xuXHRcdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmZpbHRlcnMgPSB2YWx1ZS5zbGljZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldERldHVuZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmRldHVuZSA9IHZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSAmJiB0aGlzLnNvdXJjZS5kZXR1bmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuZGV0dW5lLnNldFRhcmdldEF0VGltZSggdGhpcy5kZXR1bmUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldERldHVuZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRldHVuZTtcblxuXHR9XG5cblx0Z2V0RmlsdGVyKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0RmlsdGVycygpWyAwIF07XG5cblx0fVxuXG5cdHNldEZpbHRlciggZmlsdGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RmlsdGVycyggZmlsdGVyID8gWyBmaWx0ZXIgXSA6IFtdICk7XG5cblx0fVxuXG5cdHNldFBsYXliYWNrUmF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5wbGF5YmFja1JhdGUgPSB2YWx1ZTtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLnBsYXliYWNrUmF0ZS5zZXRUYXJnZXRBdFRpbWUoIHRoaXMucGxheWJhY2tSYXRlLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUsIDAuMDEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRQbGF5YmFja1JhdGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wbGF5YmFja1JhdGU7XG5cblx0fVxuXG5cdG9uRW5kZWQoKSB7XG5cblx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG5cdH1cblxuXHRnZXRMb29wKCkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmxvb3A7XG5cblx0fVxuXG5cdHNldExvb3AoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMubG9vcCA9IHZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UubG9vcCA9IHRoaXMubG9vcDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRMb29wU3RhcnQoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5sb29wU3RhcnQgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRMb29wRW5kKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMubG9vcEVuZCA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFZvbHVtZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZTtcblxuXHR9XG5cblx0c2V0Vm9sdW1lKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZ2Fpbi5nYWluLnNldFRhcmdldEF0VGltZSggdmFsdWUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEF1ZGlvIH07XG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuLi9tYXRoL1F1YXRlcm5pb24uanMnO1xuaW1wb3J0IHsgQXVkaW8gfSBmcm9tICcuL0F1ZGlvLmpzJztcblxuY29uc3QgX3Bvc2l0aW9uID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3F1YXRlcm5pb24gPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5jb25zdCBfc2NhbGUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfb3JpZW50YXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIFBvc2l0aW9uYWxBdWRpbyBleHRlbmRzIEF1ZGlvIHtcblxuXHRjb25zdHJ1Y3RvciggbGlzdGVuZXIgKSB7XG5cblx0XHRzdXBlciggbGlzdGVuZXIgKTtcblxuXHRcdHRoaXMucGFubmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZVBhbm5lcigpO1xuXHRcdHRoaXMucGFubmVyLnBhbm5pbmdNb2RlbCA9ICdIUlRGJztcblx0XHR0aGlzLnBhbm5lci5jb25uZWN0KCB0aGlzLmdhaW4gKTtcblxuXHR9XG5cblx0Y29ubmVjdCgpIHtcblxuXHRcdHN1cGVyLmNvbm5lY3QoKTtcblxuXHRcdHRoaXMucGFubmVyLmNvbm5lY3QoIHRoaXMuZ2FpbiApO1xuXG5cdH1cblxuXHRkaXNjb25uZWN0KCkge1xuXG5cdFx0c3VwZXIuZGlzY29ubmVjdCgpO1xuXG5cdFx0dGhpcy5wYW5uZXIuZGlzY29ubmVjdCggdGhpcy5nYWluICk7XG5cblx0fVxuXG5cdGdldE91dHB1dCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lcjtcblxuXHR9XG5cblx0Z2V0UmVmRGlzdGFuY2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucmVmRGlzdGFuY2U7XG5cblx0fVxuXG5cdHNldFJlZkRpc3RhbmNlKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLnJlZkRpc3RhbmNlID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Um9sbG9mZkZhY3RvcigpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5yb2xsb2ZmRmFjdG9yO1xuXG5cdH1cblxuXHRzZXRSb2xsb2ZmRmFjdG9yKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLnJvbGxvZmZGYWN0b3IgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXREaXN0YW5jZU1vZGVsKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLmRpc3RhbmNlTW9kZWw7XG5cblx0fVxuXG5cdHNldERpc3RhbmNlTW9kZWwoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYW5uZXIuZGlzdGFuY2VNb2RlbCA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldE1heERpc3RhbmNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLm1heERpc3RhbmNlO1xuXG5cdH1cblxuXHRzZXRNYXhEaXN0YW5jZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5tYXhEaXN0YW5jZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldERpcmVjdGlvbmFsQ29uZSggY29uZUlubmVyQW5nbGUsIGNvbmVPdXRlckFuZ2xlLCBjb25lT3V0ZXJHYWluICkge1xuXG5cdFx0dGhpcy5wYW5uZXIuY29uZUlubmVyQW5nbGUgPSBjb25lSW5uZXJBbmdsZTtcblx0XHR0aGlzLnBhbm5lci5jb25lT3V0ZXJBbmdsZSA9IGNvbmVPdXRlckFuZ2xlO1xuXHRcdHRoaXMucGFubmVyLmNvbmVPdXRlckdhaW4gPSBjb25lT3V0ZXJHYWluO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gdHJ1ZSAmJiB0aGlzLmlzUGxheWluZyA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uLCBfcXVhdGVybmlvbiwgX3NjYWxlICk7XG5cblx0XHRfb3JpZW50YXRpb24uc2V0KCAwLCAwLCAxICkuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiApO1xuXG5cdFx0Y29uc3QgcGFubmVyID0gdGhpcy5wYW5uZXI7XG5cblx0XHRpZiAoIHBhbm5lci5wb3NpdGlvblggKSB7XG5cblx0XHRcdC8vIGNvZGUgcGF0aCBmb3IgQ2hyb21lIGFuZCBGaXJlZm94IChzZWUgIzE0MzkzKVxuXG5cdFx0XHRjb25zdCBlbmRUaW1lID0gdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgdGhpcy5saXN0ZW5lci50aW1lRGVsdGE7XG5cblx0XHRcdHBhbm5lci5wb3NpdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9wb3NpdGlvbi54LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIucG9zaXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24ueSwgZW5kVGltZSApO1xuXHRcdFx0cGFubmVyLnBvc2l0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLnosIGVuZFRpbWUgKTtcblx0XHRcdHBhbm5lci5vcmllbnRhdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbi54LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIub3JpZW50YXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24ueSwgZW5kVGltZSApO1xuXHRcdFx0cGFubmVyLm9yaWVudGF0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLnosIGVuZFRpbWUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHBhbm5lci5zZXRQb3NpdGlvbiggX3Bvc2l0aW9uLngsIF9wb3NpdGlvbi55LCBfcG9zaXRpb24ueiApO1xuXHRcdFx0cGFubmVyLnNldE9yaWVudGF0aW9uKCBfb3JpZW50YXRpb24ueCwgX29yaWVudGF0aW9uLnksIF9vcmllbnRhdGlvbi56ICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFBvc2l0aW9uYWxBdWRpbyB9O1xuIiwiY2xhc3MgQXVkaW9BbmFseXNlciB7XG5cblx0Y29uc3RydWN0b3IoIGF1ZGlvLCBmZnRTaXplID0gMjA0OCApIHtcblxuXHRcdHRoaXMuYW5hbHlzZXIgPSBhdWRpby5jb250ZXh0LmNyZWF0ZUFuYWx5c2VyKCk7XG5cdFx0dGhpcy5hbmFseXNlci5mZnRTaXplID0gZmZ0U2l6ZTtcblxuXHRcdHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KCB0aGlzLmFuYWx5c2VyLmZyZXF1ZW5jeUJpbkNvdW50ICk7XG5cblx0XHRhdWRpby5nZXRPdXRwdXQoKS5jb25uZWN0KCB0aGlzLmFuYWx5c2VyICk7XG5cblx0fVxuXG5cblx0Z2V0RnJlcXVlbmN5RGF0YSgpIHtcblxuXHRcdHRoaXMuYW5hbHlzZXIuZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEoIHRoaXMuZGF0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YTtcblxuXHR9XG5cblx0Z2V0QXZlcmFnZUZyZXF1ZW5jeSgpIHtcblxuXHRcdGxldCB2YWx1ZSA9IDA7XG5cdFx0Y29uc3QgZGF0YSA9IHRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhbHVlICs9IGRhdGFbIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZSAvIGRhdGEubGVuZ3RoO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBBdWRpb0FuYWx5c2VyIH07XG4iLCJpbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSAnLi4vbWF0aC9RdWF0ZXJuaW9uLmpzJztcblxuY2xhc3MgUHJvcGVydHlNaXhlciB7XG5cblx0Y29uc3RydWN0b3IoIGJpbmRpbmcsIHR5cGVOYW1lLCB2YWx1ZVNpemUgKSB7XG5cblx0XHR0aGlzLmJpbmRpbmcgPSBiaW5kaW5nO1xuXHRcdHRoaXMudmFsdWVTaXplID0gdmFsdWVTaXplO1xuXG5cdFx0bGV0IG1peEZ1bmN0aW9uLFxuXHRcdFx0bWl4RnVuY3Rpb25BZGRpdGl2ZSxcblx0XHRcdHNldElkZW50aXR5O1xuXG5cdFx0Ly8gYnVmZmVyIGxheW91dDogWyBpbmNvbWluZyB8IGFjY3UwIHwgYWNjdTEgfCBvcmlnIHwgYWRkQWNjdSB8IChvcHRpb25hbCB3b3JrKSBdXG5cdFx0Ly9cblx0XHQvLyBpbnRlcnBvbGF0b3JzIGNhbiB1c2UgLmJ1ZmZlciBhcyB0aGVpciAucmVzdWx0XG5cdFx0Ly8gdGhlIGRhdGEgdGhlbiBnb2VzIHRvICdpbmNvbWluZydcblx0XHQvL1xuXHRcdC8vICdhY2N1MCcgYW5kICdhY2N1MScgYXJlIHVzZWQgZnJhbWUtaW50ZXJsZWF2ZWQgZm9yXG5cdFx0Ly8gdGhlIGN1bXVsYXRpdmUgcmVzdWx0IGFuZCBhcmUgY29tcGFyZWQgdG8gZGV0ZWN0XG5cdFx0Ly8gY2hhbmdlc1xuXHRcdC8vXG5cdFx0Ly8gJ29yaWcnIHN0b3JlcyB0aGUgb3JpZ2luYWwgc3RhdGUgb2YgdGhlIHByb3BlcnR5XG5cdFx0Ly9cblx0XHQvLyAnYWRkJyBpcyB1c2VkIGZvciBhZGRpdGl2ZSBjdW11bGF0aXZlIHJlc3VsdHNcblx0XHQvL1xuXHRcdC8vICd3b3JrJyBpcyBvcHRpb25hbCBhbmQgaXMgb25seSBwcmVzZW50IGZvciBxdWF0ZXJuaW9uIHR5cGVzLiBJdCBpcyB1c2VkXG5cdFx0Ly8gdG8gc3RvcmUgaW50ZXJtZWRpYXRlIHF1YXRlcm5pb24gbXVsdGlwbGljYXRpb24gcmVzdWx0c1xuXG5cdFx0c3dpdGNoICggdHlwZU5hbWUgKSB7XG5cblx0XHRcdGNhc2UgJ3F1YXRlcm5pb24nOlxuXHRcdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX3NsZXJwO1xuXHRcdFx0XHRtaXhGdW5jdGlvbkFkZGl0aXZlID0gdGhpcy5fc2xlcnBBZGRpdGl2ZTtcblx0XHRcdFx0c2V0SWRlbnRpdHkgPSB0aGlzLl9zZXRBZGRpdGl2ZUlkZW50aXR5UXVhdGVybmlvbjtcblxuXHRcdFx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDY0QXJyYXkoIHZhbHVlU2l6ZSAqIDYgKTtcblx0XHRcdFx0dGhpcy5fd29ya0luZGV4ID0gNTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ3N0cmluZyc6XG5cdFx0XHRjYXNlICdib29sJzpcblx0XHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9zZWxlY3Q7XG5cblx0XHRcdFx0Ly8gVXNlIHRoZSByZWd1bGFyIG1peCBmdW5jdGlvbiBhbmQgZm9yIGFkZGl0aXZlIG9uIHRoZXNlIHR5cGVzLFxuXHRcdFx0XHQvLyBhZGRpdGl2ZSBpcyBub3QgcmVsZXZhbnQgZm9yIG5vbi1udW1lcmljIHR5cGVzXG5cdFx0XHRcdG1peEZ1bmN0aW9uQWRkaXRpdmUgPSB0aGlzLl9zZWxlY3Q7XG5cblx0XHRcdFx0c2V0SWRlbnRpdHkgPSB0aGlzLl9zZXRBZGRpdGl2ZUlkZW50aXR5T3RoZXI7XG5cblx0XHRcdFx0dGhpcy5idWZmZXIgPSBuZXcgQXJyYXkoIHZhbHVlU2l6ZSAqIDUgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fbGVycDtcblx0XHRcdFx0bWl4RnVuY3Rpb25BZGRpdGl2ZSA9IHRoaXMuX2xlcnBBZGRpdGl2ZTtcblx0XHRcdFx0c2V0SWRlbnRpdHkgPSB0aGlzLl9zZXRBZGRpdGl2ZUlkZW50aXR5TnVtZXJpYztcblxuXHRcdFx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDY0QXJyYXkoIHZhbHVlU2l6ZSAqIDUgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbiA9IG1peEZ1bmN0aW9uO1xuXHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbkFkZGl0aXZlID0gbWl4RnVuY3Rpb25BZGRpdGl2ZTtcblx0XHR0aGlzLl9zZXRJZGVudGl0eSA9IHNldElkZW50aXR5O1xuXHRcdHRoaXMuX29yaWdJbmRleCA9IDM7XG5cdFx0dGhpcy5fYWRkSW5kZXggPSA0O1xuXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHRBZGRpdGl2ZSA9IDA7XG5cblx0XHR0aGlzLnVzZUNvdW50ID0gMDtcblx0XHR0aGlzLnJlZmVyZW5jZUNvdW50ID0gMDtcblxuXHR9XG5cblx0Ly8gYWNjdW11bGF0ZSBkYXRhIGluIHRoZSAnaW5jb21pbmcnIHJlZ2lvbiBpbnRvICdhY2N1PGk+J1xuXHRhY2N1bXVsYXRlKCBhY2N1SW5kZXgsIHdlaWdodCApIHtcblxuXHRcdC8vIG5vdGU6IGhhcHBpbHkgYWNjdW11bGF0aW5nIG5vdGhpbmcgd2hlbiB3ZWlnaHQgPSAwLCB0aGUgY2FsbGVyIGtub3dzXG5cdFx0Ly8gdGhlIHdlaWdodCBhbmQgc2hvdWxkbid0IGhhdmUgbWFkZSB0aGUgY2FsbCBpbiB0aGUgZmlyc3QgcGxhY2VcblxuXHRcdGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRvZmZzZXQgPSBhY2N1SW5kZXggKiBzdHJpZGUgKyBzdHJpZGU7XG5cblx0XHRsZXQgY3VycmVudFdlaWdodCA9IHRoaXMuY3VtdWxhdGl2ZVdlaWdodDtcblxuXHRcdGlmICggY3VycmVudFdlaWdodCA9PT0gMCApIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gaW5jb21pbmcgKiB3ZWlnaHRcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBpIF0gPSBidWZmZXJbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50V2VpZ2h0ID0gd2VpZ2h0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBpbmNvbWluZyAqIHdlaWdodFxuXG5cdFx0XHRjdXJyZW50V2VpZ2h0ICs9IHdlaWdodDtcblx0XHRcdGNvbnN0IG1peCA9IHdlaWdodCAvIGN1cnJlbnRXZWlnaHQ7XG5cdFx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb24oIGJ1ZmZlciwgb2Zmc2V0LCAwLCBtaXgsIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gY3VycmVudFdlaWdodDtcblxuXHR9XG5cblx0Ly8gYWNjdW11bGF0ZSBkYXRhIGluIHRoZSAnaW5jb21pbmcnIHJlZ2lvbiBpbnRvICdhZGQnXG5cdGFjY3VtdWxhdGVBZGRpdGl2ZSggd2VpZ2h0ICkge1xuXG5cdFx0Y29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXIsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdG9mZnNldCA9IHN0cmlkZSAqIHRoaXMuX2FkZEluZGV4O1xuXG5cdFx0aWYgKCB0aGlzLmN1bXVsYXRpdmVXZWlnaHRBZGRpdGl2ZSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gYWRkID0gaWRlbnRpdHlcblxuXHRcdFx0dGhpcy5fc2V0SWRlbnRpdHkoKTtcblxuXHRcdH1cblxuXHRcdC8vIGFkZCA6PSBhZGQgKyBpbmNvbWluZyAqIHdlaWdodFxuXG5cdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uQWRkaXRpdmUoIGJ1ZmZlciwgb2Zmc2V0LCAwLCB3ZWlnaHQsIHN0cmlkZSApO1xuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlICs9IHdlaWdodDtcblxuXHR9XG5cblx0Ly8gYXBwbHkgdGhlIHN0YXRlIG9mICdhY2N1PGk+JyB0byB0aGUgYmluZGluZyB3aGVuIGFjY3VzIGRpZmZlclxuXHRhcHBseSggYWNjdUluZGV4ICkge1xuXG5cdFx0Y29uc3Qgc3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRidWZmZXIgPSB0aGlzLmJ1ZmZlcixcblx0XHRcdG9mZnNldCA9IGFjY3VJbmRleCAqIHN0cmlkZSArIHN0cmlkZSxcblxuXHRcdFx0d2VpZ2h0ID0gdGhpcy5jdW11bGF0aXZlV2VpZ2h0LFxuXHRcdFx0d2VpZ2h0QWRkaXRpdmUgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHRBZGRpdGl2ZSxcblxuXHRcdFx0YmluZGluZyA9IHRoaXMuYmluZGluZztcblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUgPSAwO1xuXG5cdFx0aWYgKCB3ZWlnaHQgPCAxICkge1xuXG5cdFx0XHQvLyBhY2N1TiA6PSBhY2N1TiArIG9yaWdpbmFsICogKCAxIC0gY3VtdWxhdGl2ZVdlaWdodCApXG5cblx0XHRcdGNvbnN0IG9yaWdpbmFsVmFsdWVPZmZzZXQgPSBzdHJpZGUgKiB0aGlzLl9vcmlnSW5kZXg7XG5cblx0XHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbihcblx0XHRcdFx0YnVmZmVyLCBvZmZzZXQsIG9yaWdpbmFsVmFsdWVPZmZzZXQsIDEgLSB3ZWlnaHQsIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB3ZWlnaHRBZGRpdGl2ZSA+IDAgKSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGFjY3VOICsgYWRkaXRpdmUgYWNjdU5cblxuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uQWRkaXRpdmUoIGJ1ZmZlciwgb2Zmc2V0LCB0aGlzLl9hZGRJbmRleCAqIHN0cmlkZSwgMSwgc3RyaWRlICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IHN0cmlkZSwgZSA9IHN0cmlkZSArIHN0cmlkZTsgaSAhPT0gZTsgKysgaSApIHtcblxuXHRcdFx0aWYgKCBidWZmZXJbIGkgXSAhPT0gYnVmZmVyWyBpICsgc3RyaWRlIF0gKSB7XG5cblx0XHRcdFx0Ly8gdmFsdWUgaGFzIGNoYW5nZWQgLT4gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHRcdFx0YmluZGluZy5zZXRWYWx1ZSggYnVmZmVyLCBvZmZzZXQgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gcmVtZW1iZXIgdGhlIHN0YXRlIG9mIHRoZSBib3VuZCBwcm9wZXJ0eSBhbmQgY29weSBpdCB0byBib3RoIGFjY3VzXG5cdHNhdmVPcmlnaW5hbFN0YXRlKCkge1xuXG5cdFx0Y29uc3QgYmluZGluZyA9IHRoaXMuYmluZGluZztcblxuXHRcdGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG9yaWdpbmFsVmFsdWVPZmZzZXQgPSBzdHJpZGUgKiB0aGlzLl9vcmlnSW5kZXg7XG5cblx0XHRiaW5kaW5nLmdldFZhbHVlKCBidWZmZXIsIG9yaWdpbmFsVmFsdWVPZmZzZXQgKTtcblxuXHRcdC8vIGFjY3VbMC4uMV0gOj0gb3JpZyAtLSBpbml0aWFsbHkgZGV0ZWN0IGNoYW5nZXMgYWdhaW5zdCB0aGUgb3JpZ2luYWxcblx0XHRmb3IgKCBsZXQgaSA9IHN0cmlkZSwgZSA9IG9yaWdpbmFsVmFsdWVPZmZzZXQ7IGkgIT09IGU7ICsrIGkgKSB7XG5cblx0XHRcdGJ1ZmZlclsgaSBdID0gYnVmZmVyWyBvcmlnaW5hbFZhbHVlT2Zmc2V0ICsgKCBpICUgc3RyaWRlICkgXTtcblxuXHRcdH1cblxuXHRcdC8vIEFkZCB0byBpZGVudGl0eSBmb3IgYWRkaXRpdmVcblx0XHR0aGlzLl9zZXRJZGVudGl0eSgpO1xuXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHRBZGRpdGl2ZSA9IDA7XG5cblx0fVxuXG5cdC8vIGFwcGx5IHRoZSBzdGF0ZSBwcmV2aW91c2x5IHRha2VuIHZpYSAnc2F2ZU9yaWdpbmFsU3RhdGUnIHRvIHRoZSBiaW5kaW5nXG5cdHJlc3RvcmVPcmlnaW5hbFN0YXRlKCkge1xuXG5cdFx0Y29uc3Qgb3JpZ2luYWxWYWx1ZU9mZnNldCA9IHRoaXMudmFsdWVTaXplICogMztcblx0XHR0aGlzLmJpbmRpbmcuc2V0VmFsdWUoIHRoaXMuYnVmZmVyLCBvcmlnaW5hbFZhbHVlT2Zmc2V0ICk7XG5cblx0fVxuXG5cdF9zZXRBZGRpdGl2ZUlkZW50aXR5TnVtZXJpYygpIHtcblxuXHRcdGNvbnN0IHN0YXJ0SW5kZXggPSB0aGlzLl9hZGRJbmRleCAqIHRoaXMudmFsdWVTaXplO1xuXHRcdGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHRoaXMudmFsdWVTaXplO1xuXG5cdFx0Zm9yICggbGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuYnVmZmVyWyBpIF0gPSAwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfc2V0QWRkaXRpdmVJZGVudGl0eVF1YXRlcm5pb24oKSB7XG5cblx0XHR0aGlzLl9zZXRBZGRpdGl2ZUlkZW50aXR5TnVtZXJpYygpO1xuXHRcdHRoaXMuYnVmZmVyWyB0aGlzLl9hZGRJbmRleCAqIHRoaXMudmFsdWVTaXplICsgMyBdID0gMTtcblxuXHR9XG5cblx0X3NldEFkZGl0aXZlSWRlbnRpdHlPdGhlcigpIHtcblxuXHRcdGNvbnN0IHN0YXJ0SW5kZXggPSB0aGlzLl9vcmlnSW5kZXggKiB0aGlzLnZhbHVlU2l6ZTtcblx0XHRjb25zdCB0YXJnZXRJbmRleCA9IHRoaXMuX2FkZEluZGV4ICogdGhpcy52YWx1ZVNpemU7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5idWZmZXJbIHRhcmdldEluZGV4ICsgaSBdID0gdGhpcy5idWZmZXJbIHN0YXJ0SW5kZXggKyBpIF07XG5cblx0XHR9XG5cblx0fVxuXG5cblx0Ly8gbWl4IGZ1bmN0aW9uc1xuXG5cdF9zZWxlY3QoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcblxuXHRcdGlmICggdCA+PSAwLjUgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRcdGJ1ZmZlclsgZHN0T2Zmc2V0ICsgaSBdID0gYnVmZmVyWyBzcmNPZmZzZXQgKyBpIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0X3NsZXJwKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0ICkge1xuXG5cdFx0UXVhdGVybmlvbi5zbGVycEZsYXQoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBzcmNPZmZzZXQsIHQgKTtcblxuXHR9XG5cblx0X3NsZXJwQWRkaXRpdmUoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcblxuXHRcdGNvbnN0IHdvcmtPZmZzZXQgPSB0aGlzLl93b3JrSW5kZXggKiBzdHJpZGU7XG5cblx0XHQvLyBTdG9yZSByZXN1bHQgaW4gaW50ZXJtZWRpYXRlIGJ1ZmZlciBvZmZzZXRcblx0XHRRdWF0ZXJuaW9uLm11bHRpcGx5UXVhdGVybmlvbnNGbGF0KCBidWZmZXIsIHdvcmtPZmZzZXQsIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIHNyY09mZnNldCApO1xuXG5cdFx0Ly8gU2xlcnAgdG8gdGhlIGludGVybWVkaWF0ZSByZXN1bHRcblx0XHRRdWF0ZXJuaW9uLnNsZXJwRmxhdCggYnVmZmVyLCBkc3RPZmZzZXQsIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIHdvcmtPZmZzZXQsIHQgKTtcblxuXHR9XG5cblx0X2xlcnAoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcblxuXHRcdGNvbnN0IHMgPSAxIC0gdDtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBqID0gZHN0T2Zmc2V0ICsgaTtcblxuXHRcdFx0YnVmZmVyWyBqIF0gPSBidWZmZXJbIGogXSAqIHMgKyBidWZmZXJbIHNyY09mZnNldCArIGkgXSAqIHQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9sZXJwQWRkaXRpdmUoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBqID0gZHN0T2Zmc2V0ICsgaTtcblxuXHRcdFx0YnVmZmVyWyBqIF0gPSBidWZmZXJbIGogXSArIGJ1ZmZlclsgc3JjT2Zmc2V0ICsgaSBdICogdDtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBQcm9wZXJ0eU1peGVyIH07XG4iLCIvLyBDaGFyYWN0ZXJzIFtdLjovIGFyZSByZXNlcnZlZCBmb3IgdHJhY2sgYmluZGluZyBzeW50YXguXG5jb25zdCBfUkVTRVJWRURfQ0hBUlNfUkUgPSAnXFxcXFtcXFxcXVxcXFwuOlxcXFwvJztcbmNvbnN0IF9yZXNlcnZlZFJlID0gbmV3IFJlZ0V4cCggJ1snICsgX1JFU0VSVkVEX0NIQVJTX1JFICsgJ10nLCAnZycgKTtcblxuLy8gQXR0ZW1wdHMgdG8gYWxsb3cgbm9kZSBuYW1lcyBmcm9tIGFueSBsYW5ndWFnZS4gRVM1J3MgYFxcd2AgcmVnZXhwIG1hdGNoZXNcbi8vIG9ubHkgbGF0aW4gY2hhcmFjdGVycywgYW5kIHRoZSB1bmljb2RlIFxccHtMfSBpcyBub3QgeWV0IHN1cHBvcnRlZC4gU29cbi8vIGluc3RlYWQsIHdlIGV4Y2x1ZGUgcmVzZXJ2ZWQgY2hhcmFjdGVycyBhbmQgbWF0Y2ggZXZlcnl0aGluZyBlbHNlLlxuY29uc3QgX3dvcmRDaGFyID0gJ1teJyArIF9SRVNFUlZFRF9DSEFSU19SRSArICddJztcbmNvbnN0IF93b3JkQ2hhck9yRG90ID0gJ1teJyArIF9SRVNFUlZFRF9DSEFSU19SRS5yZXBsYWNlKCAnXFxcXC4nLCAnJyApICsgJ10nO1xuXG4vLyBQYXJlbnQgZGlyZWN0b3JpZXMsIGRlbGltaXRlZCBieSAnLycgb3IgJzonLiBDdXJyZW50bHkgdW51c2VkLCBidXQgbXVzdFxuLy8gYmUgbWF0Y2hlZCB0byBwYXJzZSB0aGUgcmVzdCBvZiB0aGUgdHJhY2sgbmFtZS5cbmNvbnN0IF9kaXJlY3RvcnlSZSA9IC8qQF9fUFVSRV9fKi8gLygoPzpXQytbXFwvOl0pKikvLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCBfd29yZENoYXIgKTtcblxuLy8gVGFyZ2V0IG5vZGUuIE1heSBjb250YWluIHdvcmQgY2hhcmFjdGVycyAoYS16QS1aMC05XykgYW5kICcuJyBvciAnLScuXG5jb25zdCBfbm9kZVJlID0gLypAX19QVVJFX18qLyAvKFdDT0QrKT8vLnNvdXJjZS5yZXBsYWNlKCAnV0NPRCcsIF93b3JkQ2hhck9yRG90ICk7XG5cbi8vIE9iamVjdCBvbiB0YXJnZXQgbm9kZSwgYW5kIGFjY2Vzc29yLiBNYXkgbm90IGNvbnRhaW4gcmVzZXJ2ZWRcbi8vIGNoYXJhY3RlcnMuIEFjY2Vzc29yIG1heSBjb250YWluIGFueSBjaGFyYWN0ZXIgZXhjZXB0IGNsb3NpbmcgYnJhY2tldC5cbmNvbnN0IF9vYmplY3RSZSA9IC8qQF9fUFVSRV9fKi8gLyg/OlxcLihXQyspKD86XFxbKC4rKVxcXSk/KT8vLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCBfd29yZENoYXIgKTtcblxuLy8gUHJvcGVydHkgYW5kIGFjY2Vzc29yLiBNYXkgbm90IGNvbnRhaW4gcmVzZXJ2ZWQgY2hhcmFjdGVycy4gQWNjZXNzb3IgbWF5XG4vLyBjb250YWluIGFueSBub24tYnJhY2tldCBjaGFyYWN0ZXJzLlxuY29uc3QgX3Byb3BlcnR5UmUgPSAvKkBfX1BVUkVfXyovIC9cXC4oV0MrKSg/OlxcWyguKylcXF0pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIF93b3JkQ2hhciApO1xuXG5jb25zdCBfdHJhY2tSZSA9IG5ldyBSZWdFeHAoICcnXG5cdCsgJ14nXG5cdCsgX2RpcmVjdG9yeVJlXG5cdCsgX25vZGVSZVxuXHQrIF9vYmplY3RSZVxuXHQrIF9wcm9wZXJ0eVJlXG5cdCsgJyQnXG4pO1xuXG5jb25zdCBfc3VwcG9ydGVkT2JqZWN0TmFtZXMgPSBbICdtYXRlcmlhbCcsICdtYXRlcmlhbHMnLCAnYm9uZXMnLCAnbWFwJyBdO1xuXG5jbGFzcyBDb21wb3NpdGUge1xuXG5cdGNvbnN0cnVjdG9yKCB0YXJnZXRHcm91cCwgcGF0aCwgb3B0aW9uYWxQYXJzZWRQYXRoICkge1xuXG5cdFx0Y29uc3QgcGFyc2VkUGF0aCA9IG9wdGlvbmFsUGFyc2VkUGF0aCB8fCBQcm9wZXJ0eUJpbmRpbmcucGFyc2VUcmFja05hbWUoIHBhdGggKTtcblxuXHRcdHRoaXMuX3RhcmdldEdyb3VwID0gdGFyZ2V0R3JvdXA7XG5cdFx0dGhpcy5fYmluZGluZ3MgPSB0YXJnZXRHcm91cC5zdWJzY3JpYmVfKCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cblx0fVxuXG5cdGdldFZhbHVlKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5iaW5kKCk7IC8vIGJpbmQgYWxsIGJpbmRpbmdcblxuXHRcdGNvbnN0IGZpcnN0VmFsaWRJbmRleCA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGJpbmRpbmcgPSB0aGlzLl9iaW5kaW5nc1sgZmlyc3RWYWxpZEluZGV4IF07XG5cblx0XHQvLyBhbmQgb25seSBjYWxsIC5nZXRWYWx1ZSBvbiB0aGUgZmlyc3Rcblx0XHRpZiAoIGJpbmRpbmcgIT09IHVuZGVmaW5lZCApIGJpbmRpbmcuZ2V0VmFsdWUoIGFycmF5LCBvZmZzZXQgKTtcblxuXHR9XG5cblx0c2V0VmFsdWUoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uc2V0VmFsdWUoIGFycmF5LCBvZmZzZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0YmluZCgpIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRmb3IgKCBsZXQgaSA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXywgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0YmluZGluZ3NbIGkgXS5iaW5kKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHVuYmluZCgpIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRmb3IgKCBsZXQgaSA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXywgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0YmluZGluZ3NbIGkgXS51bmJpbmQoKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLy8gTm90ZTogVGhpcyBjbGFzcyB1c2VzIGEgU3RhdGUgcGF0dGVybiBvbiBhIHBlci1tZXRob2QgYmFzaXM6XG4vLyAnYmluZCcgc2V0cyAndGhpcy5nZXRWYWx1ZScgLyAnc2V0VmFsdWUnIGFuZCBzaGFkb3dzIHRoZVxuLy8gcHJvdG90eXBlIHZlcnNpb24gb2YgdGhlc2UgbWV0aG9kcyB3aXRoIG9uZSB0aGF0IHJlcHJlc2VudHNcbi8vIHRoZSBib3VuZCBzdGF0ZS4gV2hlbiB0aGUgcHJvcGVydHkgaXMgbm90IGZvdW5kLCB0aGUgbWV0aG9kc1xuLy8gYmVjb21lIG5vLW9wcy5cbmNsYXNzIFByb3BlcnR5QmluZGluZyB7XG5cblx0Y29uc3RydWN0b3IoIHJvb3ROb2RlLCBwYXRoLCBwYXJzZWRQYXRoICkge1xuXG5cdFx0dGhpcy5wYXRoID0gcGF0aDtcblx0XHR0aGlzLnBhcnNlZFBhdGggPSBwYXJzZWRQYXRoIHx8IFByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZSggcGF0aCApO1xuXG5cdFx0dGhpcy5ub2RlID0gUHJvcGVydHlCaW5kaW5nLmZpbmROb2RlKCByb290Tm9kZSwgdGhpcy5wYXJzZWRQYXRoLm5vZGVOYW1lICk7XG5cblx0XHR0aGlzLnJvb3ROb2RlID0gcm9vdE5vZGU7XG5cblx0XHQvLyBpbml0aWFsIHN0YXRlIG9mIHRoZXNlIG1ldGhvZHMgdGhhdCBjYWxscyAnYmluZCdcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5fZ2V0VmFsdWVfdW5ib3VuZDtcblx0XHR0aGlzLnNldFZhbHVlID0gdGhpcy5fc2V0VmFsdWVfdW5ib3VuZDtcblxuXHR9XG5cblxuXHRzdGF0aWMgY3JlYXRlKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICkge1xuXG5cdFx0aWYgKCAhICggcm9vdCAmJiByb290LmlzQW5pbWF0aW9uT2JqZWN0R3JvdXAgKSApIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9wZXJ0eUJpbmRpbmcoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBuZXcgUHJvcGVydHlCaW5kaW5nLkNvbXBvc2l0ZSggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmVwbGFjZXMgc3BhY2VzIHdpdGggdW5kZXJzY29yZXMgYW5kIHJlbW92ZXMgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycyBmcm9tXG5cdCAqIG5vZGUgbmFtZXMsIHRvIGVuc3VyZSBjb21wYXRpYmlsaXR5IHdpdGggcGFyc2VUcmFja05hbWUoKS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9kZSBuYW1lIHRvIGJlIHNhbml0aXplZC5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0c3RhdGljIHNhbml0aXplTm9kZU5hbWUoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gbmFtZS5yZXBsYWNlKCAvXFxzL2csICdfJyApLnJlcGxhY2UoIF9yZXNlcnZlZFJlLCAnJyApO1xuXG5cdH1cblxuXHRzdGF0aWMgcGFyc2VUcmFja05hbWUoIHRyYWNrTmFtZSApIHtcblxuXHRcdGNvbnN0IG1hdGNoZXMgPSBfdHJhY2tSZS5leGVjKCB0cmFja05hbWUgKTtcblxuXHRcdGlmICggbWF0Y2hlcyA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnUHJvcGVydHlCaW5kaW5nOiBDYW5ub3QgcGFyc2UgdHJhY2tOYW1lOiAnICsgdHJhY2tOYW1lICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCByZXN1bHRzID0ge1xuXHRcdFx0Ly8gZGlyZWN0b3J5TmFtZTogbWF0Y2hlc1sgMSBdLCAvLyAodHNjaHcpIGN1cnJlbnRseSB1bnVzZWRcblx0XHRcdG5vZGVOYW1lOiBtYXRjaGVzWyAyIF0sXG5cdFx0XHRvYmplY3ROYW1lOiBtYXRjaGVzWyAzIF0sXG5cdFx0XHRvYmplY3RJbmRleDogbWF0Y2hlc1sgNCBdLFxuXHRcdFx0cHJvcGVydHlOYW1lOiBtYXRjaGVzWyA1IF0sIC8vIHJlcXVpcmVkXG5cdFx0XHRwcm9wZXJ0eUluZGV4OiBtYXRjaGVzWyA2IF1cblx0XHR9O1xuXG5cdFx0Y29uc3QgbGFzdERvdCA9IHJlc3VsdHMubm9kZU5hbWUgJiYgcmVzdWx0cy5ub2RlTmFtZS5sYXN0SW5kZXhPZiggJy4nICk7XG5cblx0XHRpZiAoIGxhc3REb3QgIT09IHVuZGVmaW5lZCAmJiBsYXN0RG90ICE9PSAtIDEgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdE5hbWUgPSByZXN1bHRzLm5vZGVOYW1lLnN1YnN0cmluZyggbGFzdERvdCArIDEgKTtcblxuXHRcdFx0Ly8gT2JqZWN0IG5hbWVzIG11c3QgYmUgY2hlY2tlZCBhZ2FpbnN0IGFuIGFsbG93bGlzdC4gT3RoZXJ3aXNlLCB0aGVyZVxuXHRcdFx0Ly8gaXMgbm8gd2F5IHRvIHBhcnNlICdmb28uYmFyLmJheic6ICdiYXonIG11c3QgYmUgYSBwcm9wZXJ0eSwgYnV0XG5cdFx0XHQvLyAnYmFyJyBjb3VsZCBiZSB0aGUgb2JqZWN0TmFtZSwgb3IgcGFydCBvZiBhIG5vZGVOYW1lICh3aGljaCBjYW5cblx0XHRcdC8vIGluY2x1ZGUgJy4nIGNoYXJhY3RlcnMpLlxuXHRcdFx0aWYgKCBfc3VwcG9ydGVkT2JqZWN0TmFtZXMuaW5kZXhPZiggb2JqZWN0TmFtZSApICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0cmVzdWx0cy5ub2RlTmFtZSA9IHJlc3VsdHMubm9kZU5hbWUuc3Vic3RyaW5nKCAwLCBsYXN0RG90ICk7XG5cdFx0XHRcdHJlc3VsdHMub2JqZWN0TmFtZSA9IG9iamVjdE5hbWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcmVzdWx0cy5wcm9wZXJ0eU5hbWUgPT09IG51bGwgfHwgcmVzdWx0cy5wcm9wZXJ0eU5hbWUubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdQcm9wZXJ0eUJpbmRpbmc6IGNhbiBub3QgcGFyc2UgcHJvcGVydHlOYW1lIGZyb20gdHJhY2tOYW1lOiAnICsgdHJhY2tOYW1lICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHR9XG5cblx0c3RhdGljIGZpbmROb2RlKCByb290LCBub2RlTmFtZSApIHtcblxuXHRcdGlmICggbm9kZU5hbWUgPT09IHVuZGVmaW5lZCB8fCBub2RlTmFtZSA9PT0gJycgfHwgbm9kZU5hbWUgPT09ICcuJyB8fCBub2RlTmFtZSA9PT0gLSAxIHx8IG5vZGVOYW1lID09PSByb290Lm5hbWUgfHwgbm9kZU5hbWUgPT09IHJvb3QudXVpZCApIHtcblxuXHRcdFx0cmV0dXJuIHJvb3Q7XG5cblx0XHR9XG5cblx0XHQvLyBzZWFyY2ggaW50byBza2VsZXRvbiBib25lcy5cblx0XHRpZiAoIHJvb3Quc2tlbGV0b24gKSB7XG5cblx0XHRcdGNvbnN0IGJvbmUgPSByb290LnNrZWxldG9uLmdldEJvbmVCeU5hbWUoIG5vZGVOYW1lICk7XG5cblx0XHRcdGlmICggYm9uZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBib25lO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBzZWFyY2ggaW50byBub2RlIHN1YnRyZWUuXG5cdFx0aWYgKCByb290LmNoaWxkcmVuICkge1xuXG5cdFx0XHRjb25zdCBzZWFyY2hOb2RlU3VidHJlZSA9IGZ1bmN0aW9uICggY2hpbGRyZW4gKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgY2hpbGROb2RlID0gY2hpbGRyZW5bIGkgXTtcblxuXHRcdFx0XHRcdGlmICggY2hpbGROb2RlLm5hbWUgPT09IG5vZGVOYW1lIHx8IGNoaWxkTm9kZS51dWlkID09PSBub2RlTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIGNoaWxkTm9kZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IHNlYXJjaE5vZGVTdWJ0cmVlKCBjaGlsZE5vZGUuY2hpbGRyZW4gKTtcblxuXHRcdFx0XHRcdGlmICggcmVzdWx0ICkgcmV0dXJuIHJlc3VsdDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IHN1YlRyZWVOb2RlID0gc2VhcmNoTm9kZVN1YnRyZWUoIHJvb3QuY2hpbGRyZW4gKTtcblxuXHRcdFx0aWYgKCBzdWJUcmVlTm9kZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gc3ViVHJlZU5vZGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxuXHQvLyB0aGVzZSBhcmUgdXNlZCB0byBcImJpbmRcIiBhIG5vbmV4aXN0ZW50IHByb3BlcnR5XG5cdF9nZXRWYWx1ZV91bmF2YWlsYWJsZSgpIHt9XG5cdF9zZXRWYWx1ZV91bmF2YWlsYWJsZSgpIHt9XG5cblx0Ly8gR2V0dGVyc1xuXG5cdF9nZXRWYWx1ZV9kaXJlY3QoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0YnVmZmVyWyBvZmZzZXQgXSA9IHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdO1xuXG5cdH1cblxuXHRfZ2V0VmFsdWVfYXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc3Qgc291cmNlID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gc291cmNlLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0YnVmZmVyWyBvZmZzZXQgKysgXSA9IHNvdXJjZVsgaSBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfZ2V0VmFsdWVfYXJyYXlFbGVtZW50KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdGJ1ZmZlclsgb2Zmc2V0IF0gPSB0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdO1xuXG5cdH1cblxuXHRfZ2V0VmFsdWVfdG9BcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkudG9BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcblxuXHR9XG5cblx0Ly8gRGlyZWN0XG5cblx0X3NldFZhbHVlX2RpcmVjdCggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV9kaXJlY3Rfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2RpcmVjdF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0Ly8gRW50aXJlQXJyYXlcblxuXHRfc2V0VmFsdWVfYXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc3QgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfc2V0VmFsdWVfYXJyYXlfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc3QgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfYXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRjb25zdCBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGRlc3RbIGkgXSA9IGJ1ZmZlclsgb2Zmc2V0ICsrIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0Ly8gQXJyYXlFbGVtZW50XG5cblx0X3NldFZhbHVlX2FycmF5RWxlbWVudCggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2FycmF5RWxlbWVudF9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0Ly8gSGFzVG9Gcm9tQXJyYXlcblxuXHRfc2V0VmFsdWVfZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcblx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHRfZ2V0VmFsdWVfdW5ib3VuZCggdGFyZ2V0QXJyYXksIG9mZnNldCApIHtcblxuXHRcdHRoaXMuYmluZCgpO1xuXHRcdHRoaXMuZ2V0VmFsdWUoIHRhcmdldEFycmF5LCBvZmZzZXQgKTtcblxuXHR9XG5cblx0X3NldFZhbHVlX3VuYm91bmQoIHNvdXJjZUFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmJpbmQoKTtcblx0XHR0aGlzLnNldFZhbHVlKCBzb3VyY2VBcnJheSwgb2Zmc2V0ICk7XG5cblx0fVxuXG5cdC8vIGNyZWF0ZSBnZXR0ZXIgLyBzZXR0ZXIgcGFpciBmb3IgYSBwcm9wZXJ0eSBpbiB0aGUgc2NlbmUgZ3JhcGhcblx0YmluZCgpIHtcblxuXHRcdGxldCB0YXJnZXRPYmplY3QgPSB0aGlzLm5vZGU7XG5cdFx0Y29uc3QgcGFyc2VkUGF0aCA9IHRoaXMucGFyc2VkUGF0aDtcblxuXHRcdGNvbnN0IG9iamVjdE5hbWUgPSBwYXJzZWRQYXRoLm9iamVjdE5hbWU7XG5cdFx0Y29uc3QgcHJvcGVydHlOYW1lID0gcGFyc2VkUGF0aC5wcm9wZXJ0eU5hbWU7XG5cdFx0bGV0IHByb3BlcnR5SW5kZXggPSBwYXJzZWRQYXRoLnByb3BlcnR5SW5kZXg7XG5cblx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0ICkge1xuXG5cdFx0XHR0YXJnZXRPYmplY3QgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUoIHRoaXMucm9vdE5vZGUsIHBhcnNlZFBhdGgubm9kZU5hbWUgKTtcblxuXHRcdFx0dGhpcy5ub2RlID0gdGFyZ2V0T2JqZWN0O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2V0IGZhaWwgc3RhdGUgc28gd2UgY2FuIGp1c3QgJ3JldHVybicgb24gZXJyb3Jcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5fZ2V0VmFsdWVfdW5hdmFpbGFibGU7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYXZhaWxhYmxlO1xuXG5cdFx0Ly8gZW5zdXJlIHRoZXJlIGlzIGEgdmFsdWUgbm9kZVxuXHRcdGlmICggISB0YXJnZXRPYmplY3QgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogTm8gdGFyZ2V0IG5vZGUgZm91bmQgZm9yIHRyYWNrOiAnICsgdGhpcy5wYXRoICsgJy4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdE5hbWUgKSB7XG5cblx0XHRcdGxldCBvYmplY3RJbmRleCA9IHBhcnNlZFBhdGgub2JqZWN0SW5kZXg7XG5cblx0XHRcdC8vIHNwZWNpYWwgY2FzZXMgd2VyZSB3ZSBuZWVkIHRvIHJlYWNoIGRlZXBlciBpbnRvIHRoZSBoaWVyYXJjaHkgdG8gZ2V0IHRoZSBmYWNlIG1hdGVyaWFscy4uLi5cblx0XHRcdHN3aXRjaCAoIG9iamVjdE5hbWUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnbWF0ZXJpYWxzJzpcblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QubWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbCBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbC4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hdGVyaWFscyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1hdGVyaWFsLm1hdGVyaWFscyBhcyBub2RlLm1hdGVyaWFsIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbHMgYXJyYXkuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hdGVyaWFscztcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2JvbmVzJzpcblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3Quc2tlbGV0b24gKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBib25lcyBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBza2VsZXRvbi4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBwb3RlbnRpYWwgZnV0dXJlIG9wdGltaXphdGlvbjogc2tpcCB0aGlzIGlmIHByb3BlcnR5SW5kZXggaXMgYWxyZWFkeSBhbiBpbnRlZ2VyXG5cdFx0XHRcdFx0Ly8gYW5kIGNvbnZlcnQgdGhlIGludGVnZXIgc3RyaW5nIHRvIGEgdHJ1ZSBpbnRlZ2VyLlxuXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0LnNrZWxldG9uLmJvbmVzO1xuXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydCByZXNvbHZpbmcgbW9ycGhUYXJnZXQgbmFtZXMgaW50byBpbmRpY2VzLlxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRhcmdldE9iamVjdC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0WyBpIF0ubmFtZSA9PT0gb2JqZWN0SW5kZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0b2JqZWN0SW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnbWFwJzpcblxuXHRcdFx0XHRcdGlmICggJ21hcCcgaW4gdGFyZ2V0T2JqZWN0ICkge1xuXG5cdFx0XHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3QubWFwO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbWF0ZXJpYWwgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWwuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbC5tYXAgYXMgbm9kZS5tYXRlcmlhbCBkb2VzIG5vdCBoYXZlIGEgbWFwLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXA7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0WyBvYmplY3ROYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG9iamVjdE5hbWUgb2Ygbm9kZSB1bmRlZmluZWQuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0WyBvYmplY3ROYW1lIF07XG5cblx0XHRcdH1cblxuXG5cdFx0XHRpZiAoIG9iamVjdEluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3RbIG9iamVjdEluZGV4IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byBiaW5kIHRvIG9iamVjdEluZGV4IG9mIG9iamVjdE5hbWUsIGJ1dCBpcyB1bmRlZmluZWQuJywgdGhpcywgdGFyZ2V0T2JqZWN0ICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3RbIG9iamVjdEluZGV4IF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHJlc29sdmUgcHJvcGVydHlcblx0XHRjb25zdCBub2RlUHJvcGVydHkgPSB0YXJnZXRPYmplY3RbIHByb3BlcnR5TmFtZSBdO1xuXG5cdFx0aWYgKCBub2RlUHJvcGVydHkgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3Qgbm9kZU5hbWUgPSBwYXJzZWRQYXRoLm5vZGVOYW1lO1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIHByb3BlcnR5IGZvciB0cmFjazogJyArIG5vZGVOYW1lICtcblx0XHRcdFx0Jy4nICsgcHJvcGVydHlOYW1lICsgJyBidXQgaXQgd2FzblxcJ3QgZm91bmQuJywgdGFyZ2V0T2JqZWN0ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBkZXRlcm1pbmUgdmVyc2lvbmluZyBzY2hlbWVcblx0XHRsZXQgdmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5Ob25lO1xuXG5cdFx0dGhpcy50YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3Q7XG5cblx0XHRpZiAoIHRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSAhPT0gdW5kZWZpbmVkICkgeyAvLyBtYXRlcmlhbFxuXG5cdFx0XHR2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk5lZWRzVXBkYXRlO1xuXG5cdFx0fSBlbHNlIGlmICggdGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgIT09IHVuZGVmaW5lZCApIHsgLy8gbm9kZSB0cmFuc2Zvcm1cblxuXHRcdFx0dmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5NYXRyaXhXb3JsZE5lZWRzVXBkYXRlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZGV0ZXJtaW5lIGhvdyB0aGUgcHJvcGVydHkgZ2V0cyBib3VuZFxuXHRcdGxldCBiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuRGlyZWN0O1xuXG5cdFx0aWYgKCBwcm9wZXJ0eUluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIGFjY2VzcyBhIHN1YiBlbGVtZW50IG9mIHRoZSBwcm9wZXJ0eSBhcnJheSAob25seSBwcmltaXRpdmVzIGFyZSBzdXBwb3J0ZWQgcmlnaHQgbm93KVxuXG5cdFx0XHRpZiAoIHByb3BlcnR5TmFtZSA9PT0gJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycgKSB7XG5cblx0XHRcdFx0Ly8gcG90ZW50aWFsIG9wdGltaXphdGlvbiwgc2tpcCB0aGlzIGlmIHByb3BlcnR5SW5kZXggaXMgYWxyZWFkeSBhbiBpbnRlZ2VyLCBhbmQgY29udmVydCB0aGUgaW50ZWdlciBzdHJpbmcgdG8gYSB0cnVlIGludGVnZXIuXG5cblx0XHRcdFx0Ly8gc3VwcG9ydCByZXNvbHZpbmcgbW9ycGhUYXJnZXQgbmFtZXMgaW50byBpbmRpY2VzLlxuXHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5LicsIHRoaXMgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QuZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy4nLCB0aGlzICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdC5tb3JwaFRhcmdldERpY3Rpb25hcnlbIHByb3BlcnR5SW5kZXggXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0cHJvcGVydHlJbmRleCA9IHRhcmdldE9iamVjdC5tb3JwaFRhcmdldERpY3Rpb25hcnlbIHByb3BlcnR5SW5kZXggXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0YmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkFycmF5RWxlbWVudDtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5ID0gbm9kZVByb3BlcnR5O1xuXHRcdFx0dGhpcy5wcm9wZXJ0eUluZGV4ID0gcHJvcGVydHlJbmRleDtcblxuXHRcdH0gZWxzZSBpZiAoIG5vZGVQcm9wZXJ0eS5mcm9tQXJyYXkgIT09IHVuZGVmaW5lZCAmJiBub2RlUHJvcGVydHkudG9BcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBtdXN0IHVzZSBjb3B5IGZvciBPYmplY3QzRC5FdWxlci9RdWF0ZXJuaW9uXG5cblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5IYXNGcm9tVG9BcnJheTtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5ID0gbm9kZVByb3BlcnR5O1xuXG5cdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggbm9kZVByb3BlcnR5ICkgKSB7XG5cblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5FbnRpcmVBcnJheTtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5ID0gbm9kZVByb3BlcnR5O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG5cblx0XHR9XG5cblx0XHQvLyBzZWxlY3QgZ2V0dGVyIC8gc2V0dGVyXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuR2V0dGVyQnlCaW5kaW5nVHlwZVsgYmluZGluZ1R5cGUgXTtcblx0XHR0aGlzLnNldFZhbHVlID0gdGhpcy5TZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZ1sgYmluZGluZ1R5cGUgXVsgdmVyc2lvbmluZyBdO1xuXG5cdH1cblxuXHR1bmJpbmQoKSB7XG5cblx0XHR0aGlzLm5vZGUgPSBudWxsO1xuXG5cdFx0Ly8gYmFjayB0byB0aGUgcHJvdG90eXBlIHZlcnNpb24gb2YgZ2V0VmFsdWUgLyBzZXRWYWx1ZVxuXHRcdC8vIG5vdGU6IGF2b2lkaW5nIHRvIG11dGF0ZSB0aGUgc2hhcGUgb2YgJ3RoaXMnIHZpYSAnZGVsZXRlJ1xuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmJvdW5kO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmJvdW5kO1xuXG5cdH1cblxufVxuXG5Qcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlID0gQ29tcG9zaXRlO1xuXG5Qcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLkJpbmRpbmdUeXBlID0ge1xuXHREaXJlY3Q6IDAsXG5cdEVudGlyZUFycmF5OiAxLFxuXHRBcnJheUVsZW1lbnQ6IDIsXG5cdEhhc0Zyb21Ub0FycmF5OiAzXG59O1xuXG5Qcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLlZlcnNpb25pbmcgPSB7XG5cdE5vbmU6IDAsXG5cdE5lZWRzVXBkYXRlOiAxLFxuXHRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlOiAyXG59O1xuXG5Qcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLkdldHRlckJ5QmluZGluZ1R5cGUgPSBbXG5cblx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fZ2V0VmFsdWVfZGlyZWN0LFxuXHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9nZXRWYWx1ZV9hcnJheSxcblx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fZ2V0VmFsdWVfYXJyYXlFbGVtZW50LFxuXHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9nZXRWYWx1ZV90b0FycmF5LFxuXG5dO1xuXG5Qcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLlNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nID0gW1xuXG5cdFtcblx0XHQvLyBEaXJlY3Rcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9kaXJlY3QsXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlLFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2RpcmVjdF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlLFxuXG5cdF0sIFtcblxuXHRcdC8vIEVudGlyZUFycmF5XG5cblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheSxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheV9zZXROZWVkc1VwZGF0ZSxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlLFxuXG5cdF0sIFtcblxuXHRcdC8vIEFycmF5RWxlbWVudFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5RWxlbWVudCxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TmVlZHNVcGRhdGUsXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsXG5cblx0XSwgW1xuXG5cdFx0Ly8gSGFzVG9Gcm9tQXJyYXlcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9mcm9tQXJyYXksXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZnJvbUFycmF5X3NldE5lZWRzVXBkYXRlLFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2Zyb21BcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlLFxuXG5cdF1cblxuXTtcblxuXG5leHBvcnQgeyBQcm9wZXJ0eUJpbmRpbmcgfTtcbiIsImltcG9ydCB7IFByb3BlcnR5QmluZGluZyB9IGZyb20gJy4vUHJvcGVydHlCaW5kaW5nLmpzJztcbmltcG9ydCAqIGFzIE1hdGhVdGlscyBmcm9tICcuLi9tYXRoL01hdGhVdGlscy5qcyc7XG5cbi8qKlxuICpcbiAqIEEgZ3JvdXAgb2Ygb2JqZWN0cyB0aGF0IHJlY2VpdmVzIGEgc2hhcmVkIGFuaW1hdGlvbiBzdGF0ZS5cbiAqXG4gKiBVc2FnZTpcbiAqXG4gKiAgLSBBZGQgb2JqZWN0cyB5b3Ugd291bGQgb3RoZXJ3aXNlIHBhc3MgYXMgJ3Jvb3QnIHRvIHRoZVxuICogICAgY29uc3RydWN0b3Igb3IgdGhlIC5jbGlwQWN0aW9uIG1ldGhvZCBvZiBBbmltYXRpb25NaXhlci5cbiAqXG4gKiAgLSBJbnN0ZWFkIHBhc3MgdGhpcyBvYmplY3QgYXMgJ3Jvb3QnLlxuICpcbiAqICAtIFlvdSBjYW4gYWxzbyBhZGQgYW5kIHJlbW92ZSBvYmplY3RzIGxhdGVyIHdoZW4gdGhlIG1peGVyXG4gKiAgICBpcyBydW5uaW5nLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAgT2JqZWN0cyBvZiB0aGlzIGNsYXNzIGFwcGVhciBhcyBvbmUgb2JqZWN0IHRvIHRoZSBtaXhlcixcbiAqICAgIHNvIGNhY2hlIGNvbnRyb2wgb2YgdGhlIGluZGl2aWR1YWwgb2JqZWN0cyBtdXN0IGJlIGRvbmVcbiAqICAgIG9uIHRoZSBncm91cC5cbiAqXG4gKiBMaW1pdGF0aW9uOlxuICpcbiAqICAtIFRoZSBhbmltYXRlZCBwcm9wZXJ0aWVzIG11c3QgYmUgY29tcGF0aWJsZSBhbW9uZyB0aGVcbiAqICAgIGFsbCBvYmplY3RzIGluIHRoZSBncm91cC5cbiAqXG4gKiAgLSBBIHNpbmdsZSBwcm9wZXJ0eSBjYW4gZWl0aGVyIGJlIGNvbnRyb2xsZWQgdGhyb3VnaCBhXG4gKiAgICB0YXJnZXQgZ3JvdXAgb3IgZGlyZWN0bHksIGJ1dCBub3QgYm90aC5cbiAqL1xuXG5jbGFzcyBBbmltYXRpb25PYmplY3RHcm91cCB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHR0aGlzLmlzQW5pbWF0aW9uT2JqZWN0R3JvdXAgPSB0cnVlO1xuXG5cdFx0dGhpcy51dWlkID0gTWF0aFV0aWxzLmdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0Ly8gY2FjaGVkIG9iamVjdHMgZm9sbG93ZWQgYnkgdGhlIGFjdGl2ZSBvbmVzXG5cdFx0dGhpcy5fb2JqZWN0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblxuXHRcdHRoaXMubkNhY2hlZE9iamVjdHNfID0gMDsgLy8gdGhyZXNob2xkXG5cdFx0Ly8gbm90ZTogcmVhZCBieSBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlXG5cblx0XHRjb25zdCBpbmRpY2VzID0ge307XG5cdFx0dGhpcy5faW5kaWNlc0J5VVVJRCA9IGluZGljZXM7IC8vIGZvciBib29ra2VlcGluZ1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0aW5kaWNlc1sgYXJndW1lbnRzWyBpIF0udXVpZCBdID0gaTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3BhdGhzID0gW107IC8vIGluc2lkZTogc3RyaW5nXG5cdFx0dGhpcy5fcGFyc2VkUGF0aHMgPSBbXTsgLy8gaW5zaWRlOiB7IHdlIGRvbid0IGNhcmUsIGhlcmUgfVxuXHRcdHRoaXMuX2JpbmRpbmdzID0gW107IC8vIGluc2lkZTogQXJyYXk8IFByb3BlcnR5QmluZGluZyA+XG5cdFx0dGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoID0ge307IC8vIGluc2lkZTogaW5kaWNlcyBpbiB0aGVzZSBhcnJheXNcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdHRoaXMuc3RhdHMgPSB7XG5cblx0XHRcdG9iamVjdHM6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9vYmplY3RzLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcy50b3RhbCAtIHNjb3BlLm5DYWNoZWRPYmplY3RzXztcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Z2V0IGJpbmRpbmdzUGVyT2JqZWN0KCkge1xuXG5cdFx0XHRcdHJldHVybiBzY29wZS5fYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHRhZGQoKSB7XG5cblx0XHRjb25zdCBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0cGF0aHMgPSB0aGlzLl9wYXRocyxcblx0XHRcdHBhcnNlZFBhdGhzID0gdGhpcy5fcGFyc2VkUGF0aHMsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0bGV0IGtub3duT2JqZWN0ID0gdW5kZWZpbmVkLFxuXHRcdFx0bk9iamVjdHMgPSBvYmplY3RzLmxlbmd0aCxcblx0XHRcdG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c187XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBvYmplY3QgPSBhcmd1bWVudHNbIGkgXSxcblx0XHRcdFx0dXVpZCA9IG9iamVjdC51dWlkO1xuXHRcdFx0bGV0IGluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGluZGV4ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gdW5rbm93biBvYmplY3QgLT4gYWRkIGl0IHRvIHRoZSBBQ1RJVkUgcmVnaW9uXG5cblx0XHRcdFx0aW5kZXggPSBuT2JqZWN0cyArKztcblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgdXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdG9iamVjdHMucHVzaCggb2JqZWN0ICk7XG5cblx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdGJpbmRpbmdzWyBqIF0ucHVzaCggbmV3IFByb3BlcnR5QmluZGluZyggb2JqZWN0LCBwYXRoc1sgaiBdLCBwYXJzZWRQYXRoc1sgaiBdICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGluZGV4IDwgbkNhY2hlZE9iamVjdHMgKSB7XG5cblx0XHRcdFx0a25vd25PYmplY3QgPSBvYmplY3RzWyBpbmRleCBdO1xuXG5cdFx0XHRcdC8vIG1vdmUgZXhpc3Rpbmcgb2JqZWN0IHRvIHRoZSBBQ1RJVkUgcmVnaW9uXG5cblx0XHRcdFx0Y29uc3QgZmlyc3RBY3RpdmVJbmRleCA9IC0tIG5DYWNoZWRPYmplY3RzLFxuXHRcdFx0XHRcdGxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdENhY2hlZE9iamVjdC51dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RDYWNoZWRPYmplY3Q7XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgdXVpZCBdID0gZmlyc3RBY3RpdmVJbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdID0gb2JqZWN0O1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRjb25zdCBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0bGFzdENhY2hlZCA9IGJpbmRpbmdzRm9yUGF0aFsgZmlyc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0XHRcdFx0bGV0IGJpbmRpbmcgPSBiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF07XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBsYXN0Q2FjaGVkO1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHNpbmNlIHdlIGRvIG5vdCBib3RoZXIgdG8gY3JlYXRlIG5ldyBiaW5kaW5nc1xuXHRcdFx0XHRcdFx0Ly8gZm9yIG9iamVjdHMgdGhhdCBhcmUgY2FjaGVkLCB0aGUgYmluZGluZyBtYXlcblx0XHRcdFx0XHRcdC8vIG9yIG1heSBub3QgZXhpc3RcblxuXHRcdFx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aHNbIGogXSwgcGFyc2VkUGF0aHNbIGogXSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0c1sgaW5kZXggXSAhPT0ga25vd25PYmplY3QgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkFuaW1hdGlvbk9iamVjdEdyb3VwOiBEaWZmZXJlbnQgb2JqZWN0cyB3aXRoIHRoZSBzYW1lIFVVSUQgJyArXG5cdFx0XHRcdFx0J2RldGVjdGVkLiBDbGVhbiB0aGUgY2FjaGVzIG9yIHJlY3JlYXRlIHlvdXIgaW5mcmFzdHJ1Y3R1cmUgd2hlbiByZWxvYWRpbmcgc2NlbmVzLicgKTtcblxuXHRcdFx0fSAvLyBlbHNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSB3aGVyZSB3ZSB3YW50IGl0IHRvIGJlXG5cblx0XHR9IC8vIGZvciBhcmd1bWVudHNcblxuXHRcdHRoaXMubkNhY2hlZE9iamVjdHNfID0gbkNhY2hlZE9iamVjdHM7XG5cblx0fVxuXG5cdHJlbW92ZSgpIHtcblxuXHRcdGNvbnN0IG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0aW5kaWNlc0J5VVVJRCA9IHRoaXMuX2luZGljZXNCeVVVSUQsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0bGV0IG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c187XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBvYmplY3QgPSBhcmd1bWVudHNbIGkgXSxcblx0XHRcdFx0dXVpZCA9IG9iamVjdC51dWlkLFxuXHRcdFx0XHRpbmRleCA9IGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ID49IG5DYWNoZWRPYmplY3RzICkge1xuXG5cdFx0XHRcdC8vIG1vdmUgZXhpc3Rpbmcgb2JqZWN0IGludG8gdGhlIENBQ0hFRCByZWdpb25cblxuXHRcdFx0XHRjb25zdCBsYXN0Q2FjaGVkSW5kZXggPSBuQ2FjaGVkT2JqZWN0cyArKyxcblx0XHRcdFx0XHRmaXJzdEFjdGl2ZU9iamVjdCA9IG9iamVjdHNbIGxhc3RDYWNoZWRJbmRleCBdO1xuXG5cdFx0XHRcdGluZGljZXNCeVVVSURbIGZpcnN0QWN0aXZlT2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRvYmplY3RzWyBpbmRleCBdID0gZmlyc3RBY3RpdmVPYmplY3Q7XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgdXVpZCBdID0gbGFzdENhY2hlZEluZGV4O1xuXHRcdFx0XHRvYmplY3RzWyBsYXN0Q2FjaGVkSW5kZXggXSA9IG9iamVjdDtcblxuXHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXSxcblx0XHRcdFx0XHRcdGZpcnN0QWN0aXZlID0gYmluZGluZ3NGb3JQYXRoWyBsYXN0Q2FjaGVkSW5kZXggXSxcblx0XHRcdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF07XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBmaXJzdEFjdGl2ZTtcblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGxhc3RDYWNoZWRJbmRleCBdID0gYmluZGluZztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcblxuXHR9XG5cblx0Ly8gcmVtb3ZlICYgZm9yZ2V0XG5cdHVuY2FjaGUoKSB7XG5cblx0XHRjb25zdCBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGxldCBuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0bk9iamVjdHMgPSBvYmplY3RzLmxlbmd0aDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLFxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQsXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGVsZXRlIGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgbkNhY2hlZE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgY2FjaGVkLCBzaHJpbmsgdGhlIENBQ0hFRCByZWdpb25cblxuXHRcdFx0XHRcdGNvbnN0IGZpcnN0QWN0aXZlSW5kZXggPSAtLSBuQ2FjaGVkT2JqZWN0cyxcblx0XHRcdFx0XHRcdGxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0sXG5cdFx0XHRcdFx0XHRsYXN0SW5kZXggPSAtLSBuT2JqZWN0cyxcblx0XHRcdFx0XHRcdGxhc3RPYmplY3QgPSBvYmplY3RzWyBsYXN0SW5kZXggXTtcblxuXHRcdFx0XHRcdC8vIGxhc3QgY2FjaGVkIG9iamVjdCB0YWtlcyB0aGlzIG9iamVjdCdzIHBsYWNlXG5cdFx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdENhY2hlZE9iamVjdC51dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0XHRvYmplY3RzWyBpbmRleCBdID0gbGFzdENhY2hlZE9iamVjdDtcblxuXHRcdFx0XHRcdC8vIGxhc3Qgb2JqZWN0IGdvZXMgdG8gdGhlIGFjdGl2YXRlZCBzbG90IGFuZCBwb3Bcblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0T2JqZWN0LnV1aWQgXSA9IGZpcnN0QWN0aXZlSW5kZXg7XG5cdFx0XHRcdFx0b2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdID0gbGFzdE9iamVjdDtcblx0XHRcdFx0XHRvYmplY3RzLnBvcCgpO1xuXG5cdFx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0XHRsYXN0Q2FjaGVkID0gYmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0sXG5cdFx0XHRcdFx0XHRcdGxhc3QgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBsYXN0Q2FjaGVkO1xuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBsYXN0O1xuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoLnBvcCgpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgYWN0aXZlLCBqdXN0IHN3YXAgd2l0aCB0aGUgbGFzdCBhbmQgcG9wXG5cblx0XHRcdFx0XHRjb25zdCBsYXN0SW5kZXggPSAtLSBuT2JqZWN0cyxcblx0XHRcdFx0XHRcdGxhc3RPYmplY3QgPSBvYmplY3RzWyBsYXN0SW5kZXggXTtcblxuXHRcdFx0XHRcdGlmICggbGFzdEluZGV4ID4gMCApIHtcblxuXHRcdFx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdE9iamVjdC51dWlkIF0gPSBpbmRleDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBsYXN0T2JqZWN0O1xuXHRcdFx0XHRcdG9iamVjdHMucG9wKCk7XG5cblx0XHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF07XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGgucG9wKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSAvLyBjYWNoZWQgb3IgYWN0aXZlXG5cblx0XHRcdH0gLy8gaWYgb2JqZWN0IGlzIGtub3duXG5cblx0XHR9IC8vIGZvciBhcmd1bWVudHNcblxuXHRcdHRoaXMubkNhY2hlZE9iamVjdHNfID0gbkNhY2hlZE9iamVjdHM7XG5cblx0fVxuXG5cdC8vIEludGVybmFsIGludGVyZmFjZSB1c2VkIGJ5IGJlZnJpZW5kZWQgUHJvcGVydHlCaW5kaW5nLkNvbXBvc2l0ZTpcblxuXHRzdWJzY3JpYmVfKCBwYXRoLCBwYXJzZWRQYXRoICkge1xuXG5cdFx0Ly8gcmV0dXJucyBhbiBhcnJheSBvZiBiaW5kaW5ncyBmb3IgdGhlIGdpdmVuIHBhdGggdGhhdCBpcyBjaGFuZ2VkXG5cdFx0Ly8gYWNjb3JkaW5nIHRvIHRoZSBjb250YWluZWQgb2JqZWN0cyBpbiB0aGUgZ3JvdXBcblxuXHRcdGNvbnN0IGluZGljZXNCeVBhdGggPSB0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGg7XG5cdFx0bGV0IGluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdO1xuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSByZXR1cm4gYmluZGluZ3NbIGluZGV4IF07XG5cblx0XHRjb25zdCBwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0bk9iamVjdHMgPSBvYmplY3RzLmxlbmd0aCxcblx0XHRcdG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRiaW5kaW5nc0ZvclBhdGggPSBuZXcgQXJyYXkoIG5PYmplY3RzICk7XG5cblx0XHRpbmRleCA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGluZGljZXNCeVBhdGhbIHBhdGggXSA9IGluZGV4O1xuXG5cdFx0cGF0aHMucHVzaCggcGF0aCApO1xuXHRcdHBhcnNlZFBhdGhzLnB1c2goIHBhcnNlZFBhdGggKTtcblx0XHRiaW5kaW5ncy5wdXNoKCBiaW5kaW5nc0ZvclBhdGggKTtcblxuXHRcdGZvciAoIGxldCBpID0gbkNhY2hlZE9iamVjdHMsIG4gPSBvYmplY3RzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0Y29uc3Qgb2JqZWN0ID0gb2JqZWN0c1sgaSBdO1xuXHRcdFx0YmluZGluZ3NGb3JQYXRoWyBpIF0gPSBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBiaW5kaW5nc0ZvclBhdGg7XG5cblx0fVxuXG5cdHVuc3Vic2NyaWJlXyggcGF0aCApIHtcblxuXHRcdC8vIHRlbGxzIHRoZSBncm91cCB0byBmb3JnZXQgYWJvdXQgYSBwcm9wZXJ0eSBwYXRoIGFuZCBubyBsb25nZXJcblx0XHQvLyB1cGRhdGUgdGhlIGFycmF5IHByZXZpb3VzbHkgb2J0YWluZWQgd2l0aCAnc3Vic2NyaWJlXydcblxuXHRcdGNvbnN0IGluZGljZXNCeVBhdGggPSB0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGgsXG5cdFx0XHRpbmRleCA9IGluZGljZXNCeVBhdGhbIHBhdGggXTtcblxuXHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgcGF0aHMgPSB0aGlzLl9wYXRocyxcblx0XHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdFx0bGFzdEJpbmRpbmdzSW5kZXggPSBiaW5kaW5ncy5sZW5ndGggLSAxLFxuXHRcdFx0XHRsYXN0QmluZGluZ3MgPSBiaW5kaW5nc1sgbGFzdEJpbmRpbmdzSW5kZXggXSxcblx0XHRcdFx0bGFzdEJpbmRpbmdzUGF0aCA9IHBhdGhbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cblx0XHRcdGluZGljZXNCeVBhdGhbIGxhc3RCaW5kaW5nc1BhdGggXSA9IGluZGV4O1xuXG5cdFx0XHRiaW5kaW5nc1sgaW5kZXggXSA9IGxhc3RCaW5kaW5ncztcblx0XHRcdGJpbmRpbmdzLnBvcCgpO1xuXG5cdFx0XHRwYXJzZWRQYXRoc1sgaW5kZXggXSA9IHBhcnNlZFBhdGhzWyBsYXN0QmluZGluZ3NJbmRleCBdO1xuXHRcdFx0cGFyc2VkUGF0aHMucG9wKCk7XG5cblx0XHRcdHBhdGhzWyBpbmRleCBdID0gcGF0aHNbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cdFx0XHRwYXRocy5wb3AoKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQW5pbWF0aW9uT2JqZWN0R3JvdXAgfTtcbiIsImltcG9ydCB7IFdyYXBBcm91bmRFbmRpbmcsIFplcm9DdXJ2YXR1cmVFbmRpbmcsIFplcm9TbG9wZUVuZGluZywgTG9vcFBpbmdQb25nLCBMb29wT25jZSwgTG9vcFJlcGVhdCwgTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlLCBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cblxuY2xhc3MgQW5pbWF0aW9uQWN0aW9uIHtcblxuXHRjb25zdHJ1Y3RvciggbWl4ZXIsIGNsaXAsIGxvY2FsUm9vdCA9IG51bGwsIGJsZW5kTW9kZSA9IGNsaXAuYmxlbmRNb2RlICkge1xuXG5cdFx0dGhpcy5fbWl4ZXIgPSBtaXhlcjtcblx0XHR0aGlzLl9jbGlwID0gY2xpcDtcblx0XHR0aGlzLl9sb2NhbFJvb3QgPSBsb2NhbFJvb3Q7XG5cdFx0dGhpcy5ibGVuZE1vZGUgPSBibGVuZE1vZGU7XG5cblx0XHRjb25zdCB0cmFja3MgPSBjbGlwLnRyYWNrcyxcblx0XHRcdG5UcmFja3MgPSB0cmFja3MubGVuZ3RoLFxuXHRcdFx0aW50ZXJwb2xhbnRzID0gbmV3IEFycmF5KCBuVHJhY2tzICk7XG5cblx0XHRjb25zdCBpbnRlcnBvbGFudFNldHRpbmdzID0ge1xuXHRcdFx0ZW5kaW5nU3RhcnQ6IFplcm9DdXJ2YXR1cmVFbmRpbmcsXG5cdFx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcblx0XHR9O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuVHJhY2tzOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBpbnRlcnBvbGFudCA9IHRyYWNrc1sgaSBdLmNyZWF0ZUludGVycG9sYW50KCBudWxsICk7XG5cdFx0XHRpbnRlcnBvbGFudHNbIGkgXSA9IGludGVycG9sYW50O1xuXHRcdFx0aW50ZXJwb2xhbnQuc2V0dGluZ3MgPSBpbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5faW50ZXJwb2xhbnRTZXR0aW5ncyA9IGludGVycG9sYW50U2V0dGluZ3M7XG5cblx0XHR0aGlzLl9pbnRlcnBvbGFudHMgPSBpbnRlcnBvbGFudHM7IC8vIGJvdW5kIGJ5IHRoZSBtaXhlclxuXG5cdFx0Ly8gaW5zaWRlOiBQcm9wZXJ0eU1peGVyIChtYW5hZ2VkIGJ5IHRoZSBtaXhlcilcblx0XHR0aGlzLl9wcm9wZXJ0eUJpbmRpbmdzID0gbmV3IEFycmF5KCBuVHJhY2tzICk7XG5cblx0XHR0aGlzLl9jYWNoZUluZGV4ID0gbnVsbDsgLy8gZm9yIHRoZSBtZW1vcnkgbWFuYWdlclxuXHRcdHRoaXMuX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsOyAvLyBmb3IgdGhlIG1lbW9yeSBtYW5hZ2VyXG5cblx0XHR0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCA9IG51bGw7XG5cdFx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBudWxsO1xuXG5cdFx0dGhpcy5sb29wID0gTG9vcFJlcGVhdDtcblx0XHR0aGlzLl9sb29wQ291bnQgPSAtIDE7XG5cblx0XHQvLyBnbG9iYWwgbWl4ZXIgdGltZSB3aGVuIHRoZSBhY3Rpb24gaXMgdG8gYmUgc3RhcnRlZFxuXHRcdC8vIGl0J3Mgc2V0IGJhY2sgdG8gJ251bGwnIHVwb24gc3RhcnQgb2YgdGhlIGFjdGlvblxuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7XG5cblx0XHQvLyBzY2FsZWQgbG9jYWwgdGltZSBvZiB0aGUgYWN0aW9uXG5cdFx0Ly8gZ2V0cyBjbGFtcGVkIG9yIHdyYXBwZWQgdG8gMC4uY2xpcC5kdXJhdGlvbiBhY2NvcmRpbmcgdG8gbG9vcFxuXHRcdHRoaXMudGltZSA9IDA7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IDE7XG5cdFx0dGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlID0gMTtcblxuXHRcdHRoaXMud2VpZ2h0ID0gMTtcblx0XHR0aGlzLl9lZmZlY3RpdmVXZWlnaHQgPSAxO1xuXG5cdFx0dGhpcy5yZXBldGl0aW9ucyA9IEluZmluaXR5OyAvLyBuby4gb2YgcmVwZXRpdGlvbnMgd2hlbiBsb29waW5nXG5cblx0XHR0aGlzLnBhdXNlZCA9IGZhbHNlOyAvLyB0cnVlIC0+IHplcm8gZWZmZWN0aXZlIHRpbWUgc2NhbGVcblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlOyAvLyBmYWxzZSAtPiB6ZXJvIGVmZmVjdGl2ZSB3ZWlnaHRcblxuXHRcdHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgPSBmYWxzZTsvLyBrZWVwIGZlZWRpbmcgdGhlIGxhc3QgZnJhbWU/XG5cblx0XHR0aGlzLnplcm9TbG9wZUF0U3RhcnQgPSB0cnVlOy8vIGZvciBzbW9vdGggaW50ZXJwb2xhdGlvbiB3L28gc2VwYXJhdGVcblx0XHR0aGlzLnplcm9TbG9wZUF0RW5kID0gdHJ1ZTsvLyBjbGlwcyBmb3Igc3RhcnQsIGxvb3AgYW5kIGVuZFxuXG5cdH1cblxuXHQvLyBTdGF0ZSAmIFNjaGVkdWxpbmdcblxuXHRwbGF5KCkge1xuXG5cdFx0dGhpcy5fbWl4ZXIuX2FjdGl2YXRlQWN0aW9uKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3RvcCgpIHtcblxuXHRcdHRoaXMuX21peGVyLl9kZWFjdGl2YXRlQWN0aW9uKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcy5yZXNldCgpO1xuXG5cdH1cblxuXHRyZXNldCgpIHtcblxuXHRcdHRoaXMucGF1c2VkID0gZmFsc2U7XG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHRcdHRoaXMudGltZSA9IDA7IC8vIHJlc3RhcnQgY2xpcFxuXHRcdHRoaXMuX2xvb3BDb3VudCA9IC0gMTsvLyBmb3JnZXQgcHJldmlvdXMgbG9vcHNcblx0XHR0aGlzLl9zdGFydFRpbWUgPSBudWxsOy8vIGZvcmdldCBzY2hlZHVsaW5nXG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCkuc3RvcFdhcnBpbmcoKTtcblxuXHR9XG5cblx0aXNSdW5uaW5nKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZW5hYmxlZCAmJiAhIHRoaXMucGF1c2VkICYmIHRoaXMudGltZVNjYWxlICE9PSAwICYmXG5cdFx0XHR0aGlzLl9zdGFydFRpbWUgPT09IG51bGwgJiYgdGhpcy5fbWl4ZXIuX2lzQWN0aXZlQWN0aW9uKCB0aGlzICk7XG5cblx0fVxuXG5cdC8vIHJldHVybiB0cnVlIHdoZW4gcGxheSBoYXMgYmVlbiBjYWxsZWRcblx0aXNTY2hlZHVsZWQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fbWl4ZXIuX2lzQWN0aXZlQWN0aW9uKCB0aGlzICk7XG5cblx0fVxuXG5cdHN0YXJ0QXQoIHRpbWUgKSB7XG5cblx0XHR0aGlzLl9zdGFydFRpbWUgPSB0aW1lO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldExvb3AoIG1vZGUsIHJlcGV0aXRpb25zICkge1xuXG5cdFx0dGhpcy5sb29wID0gbW9kZTtcblx0XHR0aGlzLnJlcGV0aXRpb25zID0gcmVwZXRpdGlvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Ly8gV2VpZ2h0XG5cblx0Ly8gc2V0IHRoZSB3ZWlnaHQgc3RvcHBpbmcgYW55IHNjaGVkdWxlZCBmYWRpbmdcblx0Ly8gYWx0aG91Z2ggLmVuYWJsZWQgPSBmYWxzZSB5aWVsZHMgYW4gZWZmZWN0aXZlIHdlaWdodCBvZiB6ZXJvLCB0aGlzXG5cdC8vIG1ldGhvZCBkb2VzICpub3QqIGNoYW5nZSAuZW5hYmxlZCwgYmVjYXVzZSBpdCB3b3VsZCBiZSBjb25mdXNpbmdcblx0c2V0RWZmZWN0aXZlV2VpZ2h0KCB3ZWlnaHQgKSB7XG5cblx0XHR0aGlzLndlaWdodCA9IHdlaWdodDtcblxuXHRcdC8vIG5vdGU6IHNhbWUgbG9naWMgYXMgd2hlbiB1cGRhdGVkIGF0IHJ1bnRpbWVcblx0XHR0aGlzLl9lZmZlY3RpdmVXZWlnaHQgPSB0aGlzLmVuYWJsZWQgPyB3ZWlnaHQgOiAwO1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RvcEZhZGluZygpO1xuXG5cdH1cblxuXHQvLyByZXR1cm4gdGhlIHdlaWdodCBjb25zaWRlcmluZyBmYWRpbmcgYW5kIC5lbmFibGVkXG5cdGdldEVmZmVjdGl2ZVdlaWdodCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9lZmZlY3RpdmVXZWlnaHQ7XG5cblx0fVxuXG5cdGZhZGVJbiggZHVyYXRpb24gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fc2NoZWR1bGVGYWRpbmcoIGR1cmF0aW9uLCAwLCAxICk7XG5cblx0fVxuXG5cdGZhZGVPdXQoIGR1cmF0aW9uICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3NjaGVkdWxlRmFkaW5nKCBkdXJhdGlvbiwgMSwgMCApO1xuXG5cdH1cblxuXHRjcm9zc0ZhZGVGcm9tKCBmYWRlT3V0QWN0aW9uLCBkdXJhdGlvbiwgd2FycCApIHtcblxuXHRcdGZhZGVPdXRBY3Rpb24uZmFkZU91dCggZHVyYXRpb24gKTtcblx0XHR0aGlzLmZhZGVJbiggZHVyYXRpb24gKTtcblxuXHRcdGlmICggd2FycCApIHtcblxuXHRcdFx0Y29uc3QgZmFkZUluRHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uLFxuXHRcdFx0XHRmYWRlT3V0RHVyYXRpb24gPSBmYWRlT3V0QWN0aW9uLl9jbGlwLmR1cmF0aW9uLFxuXG5cdFx0XHRcdHN0YXJ0RW5kUmF0aW8gPSBmYWRlT3V0RHVyYXRpb24gLyBmYWRlSW5EdXJhdGlvbixcblx0XHRcdFx0ZW5kU3RhcnRSYXRpbyA9IGZhZGVJbkR1cmF0aW9uIC8gZmFkZU91dER1cmF0aW9uO1xuXG5cdFx0XHRmYWRlT3V0QWN0aW9uLndhcnAoIDEuMCwgc3RhcnRFbmRSYXRpbywgZHVyYXRpb24gKTtcblx0XHRcdHRoaXMud2FycCggZW5kU3RhcnRSYXRpbywgMS4wLCBkdXJhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNyb3NzRmFkZVRvKCBmYWRlSW5BY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkge1xuXG5cdFx0cmV0dXJuIGZhZGVJbkFjdGlvbi5jcm9zc0ZhZGVGcm9tKCB0aGlzLCBkdXJhdGlvbiwgd2FycCApO1xuXG5cdH1cblxuXHRzdG9wRmFkaW5nKCkge1xuXG5cdFx0Y29uc3Qgd2VpZ2h0SW50ZXJwb2xhbnQgPSB0aGlzLl93ZWlnaHRJbnRlcnBvbGFudDtcblxuXHRcdGlmICggd2VpZ2h0SW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX3dlaWdodEludGVycG9sYW50ID0gbnVsbDtcblx0XHRcdHRoaXMuX21peGVyLl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudCggd2VpZ2h0SW50ZXJwb2xhbnQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvLyBUaW1lIFNjYWxlIENvbnRyb2xcblxuXHQvLyBzZXQgdGhlIHRpbWUgc2NhbGUgc3RvcHBpbmcgYW55IHNjaGVkdWxlZCB3YXJwaW5nXG5cdC8vIGFsdGhvdWdoIC5wYXVzZWQgPSB0cnVlIHlpZWxkcyBhbiBlZmZlY3RpdmUgdGltZSBzY2FsZSBvZiB6ZXJvLCB0aGlzXG5cdC8vIG1ldGhvZCBkb2VzICpub3QqIGNoYW5nZSAucGF1c2VkLCBiZWNhdXNlIGl0IHdvdWxkIGJlIGNvbmZ1c2luZ1xuXHRzZXRFZmZlY3RpdmVUaW1lU2NhbGUoIHRpbWVTY2FsZSApIHtcblxuXHRcdHRoaXMudGltZVNjYWxlID0gdGltZVNjYWxlO1xuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRoaXMucGF1c2VkID8gMCA6IHRpbWVTY2FsZTtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fVxuXG5cdC8vIHJldHVybiB0aGUgdGltZSBzY2FsZSBjb25zaWRlcmluZyB3YXJwaW5nIGFuZCAucGF1c2VkXG5cdGdldEVmZmVjdGl2ZVRpbWVTY2FsZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGU7XG5cblx0fVxuXG5cdHNldER1cmF0aW9uKCBkdXJhdGlvbiApIHtcblxuXHRcdHRoaXMudGltZVNjYWxlID0gdGhpcy5fY2xpcC5kdXJhdGlvbiAvIGR1cmF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RvcFdhcnBpbmcoKTtcblxuXHR9XG5cblx0c3luY1dpdGgoIGFjdGlvbiApIHtcblxuXHRcdHRoaXMudGltZSA9IGFjdGlvbi50aW1lO1xuXHRcdHRoaXMudGltZVNjYWxlID0gYWN0aW9uLnRpbWVTY2FsZTtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fVxuXG5cdGhhbHQoIGR1cmF0aW9uICkge1xuXG5cdFx0cmV0dXJuIHRoaXMud2FycCggdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlLCAwLCBkdXJhdGlvbiApO1xuXG5cdH1cblxuXHR3YXJwKCBzdGFydFRpbWVTY2FsZSwgZW5kVGltZVNjYWxlLCBkdXJhdGlvbiApIHtcblxuXHRcdGNvbnN0IG1peGVyID0gdGhpcy5fbWl4ZXIsXG5cdFx0XHRub3cgPSBtaXhlci50aW1lLFxuXHRcdFx0dGltZVNjYWxlID0gdGhpcy50aW1lU2NhbGU7XG5cblx0XHRsZXQgaW50ZXJwb2xhbnQgPSB0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudDtcblxuXHRcdGlmICggaW50ZXJwb2xhbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdGludGVycG9sYW50ID0gbWl4ZXIuX2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKTtcblx0XHRcdHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50ID0gaW50ZXJwb2xhbnQ7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0aW1lcyA9IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9ucyxcblx0XHRcdHZhbHVlcyA9IGludGVycG9sYW50LnNhbXBsZVZhbHVlcztcblxuXHRcdHRpbWVzWyAwIF0gPSBub3c7XG5cdFx0dGltZXNbIDEgXSA9IG5vdyArIGR1cmF0aW9uO1xuXG5cdFx0dmFsdWVzWyAwIF0gPSBzdGFydFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcblx0XHR2YWx1ZXNbIDEgXSA9IGVuZFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdG9wV2FycGluZygpIHtcblxuXHRcdGNvbnN0IHRpbWVTY2FsZUludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIHRpbWVTY2FsZUludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCA9IG51bGw7XG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIHRpbWVTY2FsZUludGVycG9sYW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Ly8gT2JqZWN0IEFjY2Vzc29yc1xuXG5cdGdldE1peGVyKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX21peGVyO1xuXG5cdH1cblxuXHRnZXRDbGlwKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2NsaXA7XG5cblx0fVxuXG5cdGdldFJvb3QoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fbG9jYWxSb290IHx8IHRoaXMuX21peGVyLl9yb290O1xuXG5cdH1cblxuXHQvLyBJbnRlcm5hXG5cblx0X3VwZGF0ZSggdGltZSwgZGVsdGFUaW1lLCB0aW1lRGlyZWN0aW9uLCBhY2N1SW5kZXggKSB7XG5cblx0XHQvLyBjYWxsZWQgYnkgdGhlIG1peGVyXG5cblx0XHRpZiAoICEgdGhpcy5lbmFibGVkICkge1xuXG5cdFx0XHQvLyBjYWxsIC5fdXBkYXRlV2VpZ2h0KCkgdG8gdXBkYXRlIC5fZWZmZWN0aXZlV2VpZ2h0XG5cblx0XHRcdHRoaXMuX3VwZGF0ZVdlaWdodCggdGltZSApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3RhcnRUaW1lID0gdGhpcy5fc3RhcnRUaW1lO1xuXG5cdFx0aWYgKCBzdGFydFRpbWUgIT09IG51bGwgKSB7XG5cblx0XHRcdC8vIGNoZWNrIGZvciBzY2hlZHVsZWQgc3RhcnQgb2YgYWN0aW9uXG5cblx0XHRcdGNvbnN0IHRpbWVSdW5uaW5nID0gKCB0aW1lIC0gc3RhcnRUaW1lICkgKiB0aW1lRGlyZWN0aW9uO1xuXHRcdFx0aWYgKCB0aW1lUnVubmluZyA8IDAgfHwgdGltZURpcmVjdGlvbiA9PT0gMCApIHtcblxuXHRcdFx0XHRkZWx0YVRpbWUgPSAwO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cblx0XHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDsgLy8gdW5zY2hlZHVsZVxuXHRcdFx0XHRkZWx0YVRpbWUgPSB0aW1lRGlyZWN0aW9uICogdGltZVJ1bm5pbmc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGFwcGx5IHRpbWUgc2NhbGUgYW5kIGFkdmFuY2UgdGltZVxuXG5cdFx0ZGVsdGFUaW1lICo9IHRoaXMuX3VwZGF0ZVRpbWVTY2FsZSggdGltZSApO1xuXHRcdGNvbnN0IGNsaXBUaW1lID0gdGhpcy5fdXBkYXRlVGltZSggZGVsdGFUaW1lICk7XG5cblx0XHQvLyBub3RlOiBfdXBkYXRlVGltZSBtYXkgZGlzYWJsZSB0aGUgYWN0aW9uIHJlc3VsdGluZyBpblxuXHRcdC8vIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgMFxuXG5cdFx0Y29uc3Qgd2VpZ2h0ID0gdGhpcy5fdXBkYXRlV2VpZ2h0KCB0aW1lICk7XG5cblx0XHRpZiAoIHdlaWdodCA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IGludGVycG9sYW50cyA9IHRoaXMuX2ludGVycG9sYW50cztcblx0XHRcdGNvbnN0IHByb3BlcnR5TWl4ZXJzID0gdGhpcy5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0c3dpdGNoICggdGhpcy5ibGVuZE1vZGUgKSB7XG5cblx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZTpcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgbSA9IGludGVycG9sYW50cy5sZW5ndGg7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGludGVycG9sYW50c1sgaiBdLmV2YWx1YXRlKCBjbGlwVGltZSApO1xuXHRcdFx0XHRcdFx0cHJvcGVydHlNaXhlcnNbIGogXS5hY2N1bXVsYXRlQWRkaXRpdmUoIHdlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGU6XG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBpbnRlcnBvbGFudHMubGVuZ3RoOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0XHRpbnRlcnBvbGFudHNbIGogXS5ldmFsdWF0ZSggY2xpcFRpbWUgKTtcblx0XHRcdFx0XHRcdHByb3BlcnR5TWl4ZXJzWyBqIF0uYWNjdW11bGF0ZSggYWNjdUluZGV4LCB3ZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRfdXBkYXRlV2VpZ2h0KCB0aW1lICkge1xuXG5cdFx0bGV0IHdlaWdodCA9IDA7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlZCApIHtcblxuXHRcdFx0d2VpZ2h0ID0gdGhpcy53ZWlnaHQ7XG5cdFx0XHRjb25zdCBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0XHRpZiAoIGludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0d2VpZ2h0ICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BGYWRpbmcoKTtcblxuXHRcdFx0XHRcdGlmICggaW50ZXJwb2xhbnRWYWx1ZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gZmFkZWQgb3V0LCBkaXNhYmxlXG5cdFx0XHRcdFx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IHdlaWdodDtcblx0XHRyZXR1cm4gd2VpZ2h0O1xuXG5cdH1cblxuXHRfdXBkYXRlVGltZVNjYWxlKCB0aW1lICkge1xuXG5cdFx0bGV0IHRpbWVTY2FsZSA9IDA7XG5cblx0XHRpZiAoICEgdGhpcy5wYXVzZWQgKSB7XG5cblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0XHRjb25zdCBpbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O1xuXG5cdFx0XHRpZiAoIGludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0dGltZVNjYWxlICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIHRpbWVTY2FsZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbW90aW9uIGhhcyBoYWx0ZWQsIHBhdXNlXG5cdFx0XHRcdFx0XHR0aGlzLnBhdXNlZCA9IHRydWU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyB3YXJwIGRvbmUgLSBhcHBseSBmaW5hbCB0aW1lIHNjYWxlXG5cdFx0XHRcdFx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHRyZXR1cm4gdGltZVNjYWxlO1xuXG5cdH1cblxuXHRfdXBkYXRlVGltZSggZGVsdGFUaW1lICkge1xuXG5cdFx0Y29uc3QgZHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uO1xuXHRcdGNvbnN0IGxvb3AgPSB0aGlzLmxvb3A7XG5cblx0XHRsZXQgdGltZSA9IHRoaXMudGltZSArIGRlbHRhVGltZTtcblx0XHRsZXQgbG9vcENvdW50ID0gdGhpcy5fbG9vcENvdW50O1xuXG5cdFx0Y29uc3QgcGluZ1BvbmcgPSAoIGxvb3AgPT09IExvb3BQaW5nUG9uZyApO1xuXG5cdFx0aWYgKCBkZWx0YVRpbWUgPT09IDAgKSB7XG5cblx0XHRcdGlmICggbG9vcENvdW50ID09PSAtIDEgKSByZXR1cm4gdGltZTtcblxuXHRcdFx0cmV0dXJuICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGxvb3AgPT09IExvb3BPbmNlICkge1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdHRoaXMuX2xvb3BDb3VudCA9IDA7XG5cdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIHRydWUsIHRydWUsIGZhbHNlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aGFuZGxlX3N0b3A6IHtcblxuXHRcdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gKSB7XG5cblx0XHRcdFx0XHR0aW1lID0gZHVyYXRpb247XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0XHR0aW1lID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHRcdGJyZWFrIGhhbmRsZV9zdG9wO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgKSB0aGlzLnBhdXNlZCA9IHRydWU7XG5cdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxuXHRcdFx0XHRcdGRpcmVjdGlvbjogZGVsdGFUaW1lIDwgMCA/IC0gMSA6IDFcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgeyAvLyByZXBldGl0aXZlIFJlcGVhdCBvciBQaW5nUG9uZ1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdGlmICggZGVsdGFUaW1lID49IDAgKSB7XG5cblx0XHRcdFx0XHRsb29wQ291bnQgPSAwO1xuXG5cdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggdHJ1ZSwgdGhpcy5yZXBldGl0aW9ucyA9PT0gMCwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gd2hlbiBsb29waW5nIGluIHJldmVyc2UgZGlyZWN0aW9uLCB0aGUgaW5pdGlhbFxuXHRcdFx0XHRcdC8vIHRyYW5zaXRpb24gdGhyb3VnaCB6ZXJvIGNvdW50cyBhcyBhIHJlcGV0aXRpb24sXG5cdFx0XHRcdFx0Ly8gc28gbGVhdmUgbG9vcENvdW50IGF0IC0xXG5cblx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0aGlzLnJlcGV0aXRpb25zID09PSAwLCB0cnVlLCBwaW5nUG9uZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gfHwgdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0Ly8gd3JhcCBhcm91bmRcblxuXHRcdFx0XHRjb25zdCBsb29wRGVsdGEgPSBNYXRoLmZsb29yKCB0aW1lIC8gZHVyYXRpb24gKTsgLy8gc2lnbmVkXG5cdFx0XHRcdHRpbWUgLT0gZHVyYXRpb24gKiBsb29wRGVsdGE7XG5cblx0XHRcdFx0bG9vcENvdW50ICs9IE1hdGguYWJzKCBsb29wRGVsdGEgKTtcblxuXHRcdFx0XHRjb25zdCBwZW5kaW5nID0gdGhpcy5yZXBldGl0aW9ucyAtIGxvb3BDb3VudDtcblxuXHRcdFx0XHRpZiAoIHBlbmRpbmcgPD0gMCApIHtcblxuXHRcdFx0XHRcdC8vIGhhdmUgdG8gc3RvcCAoc3dpdGNoIHN0YXRlLCBjbGFtcCB0aW1lLCBmaXJlIGV2ZW50KVxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmNsYW1wV2hlbkZpbmlzaGVkICkgdGhpcy5wYXVzZWQgPSB0cnVlO1xuXHRcdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0XHR0aW1lID0gZGVsdGFUaW1lID4gMCA/IGR1cmF0aW9uIDogMDtcblxuXHRcdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XG5cblx0XHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnZmluaXNoZWQnLCBhY3Rpb246IHRoaXMsXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IGRlbHRhVGltZSA+IDAgPyAxIDogLSAxXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBrZWVwIHJ1bm5pbmdcblxuXHRcdFx0XHRcdGlmICggcGVuZGluZyA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gZW50ZXJpbmcgdGhlIGxhc3Qgcm91bmRcblxuXHRcdFx0XHRcdFx0Y29uc3QgYXRTdGFydCA9IGRlbHRhVGltZSA8IDA7XG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBhdFN0YXJ0LCAhIGF0U3RhcnQsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBmYWxzZSwgZmFsc2UsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLl9sb29wQ291bnQgPSBsb29wQ291bnQ7XG5cblx0XHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ2xvb3AnLCBhY3Rpb246IHRoaXMsIGxvb3BEZWx0YTogbG9vcERlbHRhXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gaW52ZXJ0IHRpbWUgZm9yIHRoZSBcInBvbmcgcm91bmRcIlxuXG5cdFx0XHRcdHJldHVybiBkdXJhdGlvbiAtIHRpbWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aW1lO1xuXG5cdH1cblxuXHRfc2V0RW5kaW5ncyggYXRTdGFydCwgYXRFbmQsIHBpbmdQb25nICkge1xuXG5cdFx0Y29uc3Qgc2V0dGluZ3MgPSB0aGlzLl9pbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdFx0aWYgKCBwaW5nUG9uZyApIHtcblxuXHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSBaZXJvU2xvcGVFbmRpbmc7XG5cdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgPSBaZXJvU2xvcGVFbmRpbmc7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBhc3N1bWluZyBmb3IgTG9vcE9uY2UgYXRTdGFydCA9PSBhdEVuZCA9PSB0cnVlXG5cblx0XHRcdGlmICggYXRTdGFydCApIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdTdGFydCA9IHRoaXMuemVyb1Nsb3BlQXRTdGFydCA/IFplcm9TbG9wZUVuZGluZyA6IFplcm9DdXJ2YXR1cmVFbmRpbmc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSBXcmFwQXJvdW5kRW5kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYXRFbmQgKSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kID0gdGhpcy56ZXJvU2xvcGVBdEVuZCA/IFplcm9TbG9wZUVuZGluZyA6IFplcm9DdXJ2YXR1cmVFbmRpbmc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kIFx0ID0gV3JhcEFyb3VuZEVuZGluZztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRfc2NoZWR1bGVGYWRpbmcoIGR1cmF0aW9uLCB3ZWlnaHROb3csIHdlaWdodFRoZW4gKSB7XG5cblx0XHRjb25zdCBtaXhlciA9IHRoaXMuX21peGVyLCBub3cgPSBtaXhlci50aW1lO1xuXHRcdGxldCBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xuXHRcdFx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHRpbWVzID0gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zLFxuXHRcdFx0dmFsdWVzID0gaW50ZXJwb2xhbnQuc2FtcGxlVmFsdWVzO1xuXG5cdFx0dGltZXNbIDAgXSA9IG5vdztcblx0XHR2YWx1ZXNbIDAgXSA9IHdlaWdodE5vdztcblx0XHR0aW1lc1sgMSBdID0gbm93ICsgZHVyYXRpb247XG5cdFx0dmFsdWVzWyAxIF0gPSB3ZWlnaHRUaGVuO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgQW5pbWF0aW9uQWN0aW9uIH07XG4iLCJpbXBvcnQgeyBBbmltYXRpb25BY3Rpb24gfSBmcm9tICcuL0FuaW1hdGlvbkFjdGlvbi5qcyc7XG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuLi9jb3JlL0V2ZW50RGlzcGF0Y2hlci5qcyc7XG5pbXBvcnQgeyBMaW5lYXJJbnRlcnBvbGFudCB9IGZyb20gJy4uL21hdGgvaW50ZXJwb2xhbnRzL0xpbmVhckludGVycG9sYW50LmpzJztcbmltcG9ydCB7IFByb3BlcnR5QmluZGluZyB9IGZyb20gJy4vUHJvcGVydHlCaW5kaW5nLmpzJztcbmltcG9ydCB7IFByb3BlcnR5TWl4ZXIgfSBmcm9tICcuL1Byb3BlcnR5TWl4ZXIuanMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uQ2xpcCB9IGZyb20gJy4vQW5pbWF0aW9uQ2xpcC5qcyc7XG5pbXBvcnQgeyBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGUgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuXG5cbmNvbnN0IF9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheSggMSApO1xuXG5cbmNsYXNzIEFuaW1hdGlvbk1peGVyIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuXHRjb25zdHJ1Y3Rvciggcm9vdCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9yb290ID0gcm9vdDtcblx0XHR0aGlzLl9pbml0TWVtb3J5TWFuYWdlcigpO1xuXHRcdHRoaXMuX2FjY3VJbmRleCA9IDA7XG5cdFx0dGhpcy50aW1lID0gMDtcblx0XHR0aGlzLnRpbWVTY2FsZSA9IDEuMDtcblxuXHR9XG5cblx0X2JpbmRBY3Rpb24oIGFjdGlvbiwgcHJvdG90eXBlQWN0aW9uICkge1xuXG5cdFx0Y29uc3Qgcm9vdCA9IGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHR0cmFja3MgPSBhY3Rpb24uX2NsaXAudHJhY2tzLFxuXHRcdFx0blRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsXG5cdFx0XHRiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncyxcblx0XHRcdGludGVycG9sYW50cyA9IGFjdGlvbi5faW50ZXJwb2xhbnRzLFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQsXG5cdFx0XHRiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZTtcblxuXHRcdGxldCBiaW5kaW5nc0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nc0J5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRiaW5kaW5nc0J5TmFtZSA9IHt9O1xuXHRcdFx0YmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0gPSBiaW5kaW5nc0J5TmFtZTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgdHJhY2sgPSB0cmFja3NbIGkgXSxcblx0XHRcdFx0dHJhY2tOYW1lID0gdHJhY2submFtZTtcblxuXHRcdFx0bGV0IGJpbmRpbmcgPSBiaW5kaW5nc0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cblx0XHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdCsrIGJpbmRpbmcucmVmZXJlbmNlQ291bnQ7XG5cdFx0XHRcdGJpbmRpbmdzWyBpIF0gPSBiaW5kaW5nO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gZXhpc3RpbmcgYmluZGluZywgbWFrZSBzdXJlIHRoZSBjYWNoZSBrbm93c1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nLl9jYWNoZUluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHQrKyBiaW5kaW5nLnJlZmVyZW5jZUNvdW50O1xuXHRcdFx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgcGF0aCA9IHByb3RvdHlwZUFjdGlvbiAmJiBwcm90b3R5cGVBY3Rpb24uXG5cdFx0XHRcdFx0X3Byb3BlcnR5QmluZGluZ3NbIGkgXS5iaW5kaW5nLnBhcnNlZFBhdGg7XG5cblx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eU1peGVyKFxuXHRcdFx0XHRcdFByb3BlcnR5QmluZGluZy5jcmVhdGUoIHJvb3QsIHRyYWNrTmFtZSwgcGF0aCApLFxuXHRcdFx0XHRcdHRyYWNrLlZhbHVlVHlwZU5hbWUsIHRyYWNrLmdldFZhbHVlU2l6ZSgpICk7XG5cblx0XHRcdFx0KysgYmluZGluZy5yZWZlcmVuY2VDb3VudDtcblx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XG5cblx0XHRcdFx0YmluZGluZ3NbIGkgXSA9IGJpbmRpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0aW50ZXJwb2xhbnRzWyBpIF0ucmVzdWx0QnVmZmVyID0gYmluZGluZy5idWZmZXI7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9hY3RpdmF0ZUFjdGlvbiggYWN0aW9uICkge1xuXG5cdFx0aWYgKCAhIHRoaXMuX2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSApIHtcblxuXHRcdFx0aWYgKCBhY3Rpb24uX2NhY2hlSW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gdGhpcyBhY3Rpb24gaGFzIGJlZW4gZm9yZ290dGVuIGJ5IHRoZSBjYWNoZSwgYnV0IHRoZSB1c2VyXG5cdFx0XHRcdC8vIGFwcGVhcnMgdG8gYmUgc3RpbGwgdXNpbmcgaXQgLT4gcmViaW5kXG5cblx0XHRcdFx0Y29uc3Qgcm9vdFV1aWQgPSAoIGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QgKS51dWlkLFxuXHRcdFx0XHRcdGNsaXBVdWlkID0gYWN0aW9uLl9jbGlwLnV1aWQsXG5cdFx0XHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0XHRcdHRoaXMuX2JpbmRBY3Rpb24oIGFjdGlvbixcblx0XHRcdFx0XHRhY3Rpb25zRm9yQ2xpcCAmJiBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnNbIDAgXSApO1xuXG5cdFx0XHRcdHRoaXMuX2FkZEluYWN0aXZlQWN0aW9uKCBhY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHQvLyBpbmNyZW1lbnQgcmVmZXJlbmNlIGNvdW50cyAvIHNvcnQgb3V0IHN0YXRlXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCBiaW5kaW5nLnVzZUNvdW50ICsrID09PSAwICkge1xuXG5cdFx0XHRcdFx0dGhpcy5fbGVuZEJpbmRpbmcoIGJpbmRpbmcgKTtcblx0XHRcdFx0XHRiaW5kaW5nLnNhdmVPcmlnaW5hbFN0YXRlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2xlbmRBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfZGVhY3RpdmF0ZUFjdGlvbiggYWN0aW9uICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkgKSB7XG5cblx0XHRcdGNvbnN0IGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHQvLyBkZWNyZW1lbnQgcmVmZXJlbmNlIGNvdW50cyAvIHNvcnQgb3V0IHN0YXRlXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCAtLSBiaW5kaW5nLnVzZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xuXHRcdFx0XHRcdHRoaXMuX3Rha2VCYWNrQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl90YWtlQmFja0FjdGlvbiggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VyXG5cblx0X2luaXRNZW1vcnlNYW5hZ2VyKCkge1xuXG5cdFx0dGhpcy5fYWN0aW9ucyA9IFtdOyAvLyAnbkFjdGl2ZUFjdGlvbnMnIGZvbGxvd2VkIGJ5IGluYWN0aXZlIG9uZXNcblx0XHR0aGlzLl9uQWN0aXZlQWN0aW9ucyA9IDA7XG5cblx0XHR0aGlzLl9hY3Rpb25zQnlDbGlwID0ge307XG5cdFx0Ly8gaW5zaWRlOlxuXHRcdC8vIHtcblx0XHQvLyBcdGtub3duQWN0aW9uczogQXJyYXk8IEFuaW1hdGlvbkFjdGlvbiA+IC0gdXNlZCBhcyBwcm90b3R5cGVzXG5cdFx0Ly8gXHRhY3Rpb25CeVJvb3Q6IEFuaW1hdGlvbkFjdGlvbiAtIGxvb2t1cFxuXHRcdC8vIH1cblxuXG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gJ25BY3RpdmVCaW5kaW5ncycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xuXHRcdHRoaXMuX25BY3RpdmVCaW5kaW5ncyA9IDA7XG5cblx0XHR0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUgPSB7fTsgLy8gaW5zaWRlOiBNYXA8IG5hbWUsIFByb3BlcnR5TWl4ZXIgPlxuXG5cblx0XHR0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzID0gW107IC8vIHNhbWUgZ2FtZSBhcyBhYm92ZVxuXHRcdHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzID0gMDtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdHRoaXMuc3RhdHMgPSB7XG5cblx0XHRcdGFjdGlvbnM6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9hY3Rpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVBY3Rpb25zO1xuXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRiaW5kaW5nczoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Y29udHJvbEludGVycG9sYW50czoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2NvbnRyb2xJbnRlcnBvbGFudHMubGVuZ3RoO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHM7XG5cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIEFuaW1hdGlvbkFjdGlvbiBvYmplY3RzXG5cblx0X2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHRjb25zdCBpbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleDtcblx0XHRyZXR1cm4gaW5kZXggIT09IG51bGwgJiYgaW5kZXggPCB0aGlzLl9uQWN0aXZlQWN0aW9ucztcblxuXHR9XG5cblx0X2FkZEluYWN0aXZlQWN0aW9uKCBhY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApIHtcblxuXHRcdGNvbnN0IGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXA7XG5cblx0XHRsZXQgYWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0aWYgKCBhY3Rpb25zRm9yQ2xpcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHtcblxuXHRcdFx0XHRrbm93bkFjdGlvbnM6IFsgYWN0aW9uIF0sXG5cdFx0XHRcdGFjdGlvbkJ5Um9vdDoge31cblxuXHRcdFx0fTtcblxuXHRcdFx0YWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gMDtcblxuXHRcdFx0YWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXSA9IGFjdGlvbnNGb3JDbGlwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3Qga25vd25BY3Rpb25zID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xuXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBrbm93bkFjdGlvbnMubGVuZ3RoO1xuXHRcdFx0a25vd25BY3Rpb25zLnB1c2goIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gYWN0aW9ucy5sZW5ndGg7XG5cdFx0YWN0aW9ucy5wdXNoKCBhY3Rpb24gKTtcblxuXHRcdGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXSA9IGFjdGlvbjtcblxuXHR9XG5cblx0X3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdLFxuXHRcdFx0Y2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleDtcblxuXHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0YWN0aW9uc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQWN0aW9uO1xuXHRcdGFjdGlvbnMucG9wKCk7XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsO1xuXG5cblx0XHRjb25zdCBjbGlwVXVpZCA9IGFjdGlvbi5fY2xpcC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF0sXG5cdFx0XHRrbm93bkFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zLFxuXG5cdFx0XHRsYXN0S25vd25BY3Rpb24gPVxuXHRcdFx0XHRrbm93bkFjdGlvbnNGb3JDbGlwWyBrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCAtIDEgXSxcblxuXHRcdFx0YnlDbGlwQ2FjaGVJbmRleCA9IGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleDtcblxuXHRcdGxhc3RLbm93bkFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IGJ5Q2xpcENhY2hlSW5kZXg7XG5cdFx0a25vd25BY3Rpb25zRm9yQ2xpcFsgYnlDbGlwQ2FjaGVJbmRleCBdID0gbGFzdEtub3duQWN0aW9uO1xuXHRcdGtub3duQWN0aW9uc0ZvckNsaXAucG9wKCk7XG5cblx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xuXG5cblx0XHRjb25zdCBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3QsXG5cdFx0XHRyb290VXVpZCA9ICggYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCApLnV1aWQ7XG5cblx0XHRkZWxldGUgYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0ZGVsZXRlIGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHR9XG5cblx0X3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0aWYgKCAtLSBiaW5kaW5nLnJlZmVyZW5jZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdF9sZW5kQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHwgIGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyA+fCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyAgICAgICAgICAgICAgICAgcyAgICAgICAgYVxuXHRcdC8vICAgICAgICAgICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgICAgICAgICAgYSAgICAgICAgc1xuXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsXG5cblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVBY3Rpb25zICsrLFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XG5cdFx0YWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBhY3Rpb247XG5cblx0XHRmaXJzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGFjdGlvbnNbIHByZXZJbmRleCBdID0gZmlyc3RJbmFjdGl2ZUFjdGlvbjtcblxuXHR9XG5cblx0X3Rha2VCYWNrQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyAgfCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHw8IGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyAgICAgICAgYSAgICAgICAgc1xuXHRcdC8vICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgcyAgICAgICAgYVxuXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVBY3Rpb25zLFxuXG5cdFx0XHRsYXN0QWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0YWN0aW9uc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF0gPSBhY3Rpb247XG5cblx0XHRsYXN0QWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGFjdGlvbnNbIHByZXZJbmRleCBdID0gbGFzdEFjdGl2ZUFjdGlvbjtcblxuXHR9XG5cblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIFByb3BlcnR5TWl4ZXIgb2JqZWN0c1xuXG5cdF9hZGRJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUgKSB7XG5cblx0XHRjb25zdCBiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRsZXQgYmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nQnlOYW1lID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJpbmRpbmdCeU5hbWUgPSB7fTtcblx0XHRcdGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdID0gYmluZGluZ0J5TmFtZTtcblxuXHRcdH1cblxuXHRcdGJpbmRpbmdCeU5hbWVbIHRyYWNrTmFtZSBdID0gYmluZGluZztcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBiaW5kaW5ncy5sZW5ndGg7XG5cdFx0YmluZGluZ3MucHVzaCggYmluZGluZyApO1xuXG5cdH1cblxuXHRfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdHByb3BCaW5kaW5nID0gYmluZGluZy5iaW5kaW5nLFxuXHRcdFx0cm9vdFV1aWQgPSBwcm9wQmluZGluZy5yb290Tm9kZS51dWlkLFxuXHRcdFx0dHJhY2tOYW1lID0gcHJvcEJpbmRpbmcucGF0aCxcblx0XHRcdGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdLFxuXG5cdFx0XHRsYXN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGJpbmRpbmdzLmxlbmd0aCAtIDEgXSxcblx0XHRcdGNhY2hlSW5kZXggPSBiaW5kaW5nLl9jYWNoZUluZGV4O1xuXG5cdFx0bGFzdEluYWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUJpbmRpbmc7XG5cdFx0YmluZGluZ3MucG9wKCk7XG5cblx0XHRkZWxldGUgYmluZGluZ0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCBiaW5kaW5nQnlOYW1lICkubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRkZWxldGUgYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdF9sZW5kQmluZGluZyggYmluZGluZyApIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRwcmV2SW5kZXggPSBiaW5kaW5nLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQmluZGluZ3MgKyssXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0YmluZGluZy5fY2FjaGVJbmRleCA9IGxhc3RBY3RpdmVJbmRleDtcblx0XHRiaW5kaW5nc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0Zmlyc3RJbmFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0YmluZGluZ3NbIHByZXZJbmRleCBdID0gZmlyc3RJbmFjdGl2ZUJpbmRpbmc7XG5cblx0fVxuXG5cdF90YWtlQmFja0JpbmRpbmcoIGJpbmRpbmcgKSB7XG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJldkluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzLFxuXG5cdFx0XHRsYXN0QWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gYmluZGluZztcblxuXHRcdGxhc3RBY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGJpbmRpbmdzWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVCaW5kaW5nO1xuXG5cdH1cblxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VtZW50IG9mIEludGVycG9sYW50cyBmb3Igd2VpZ2h0IGFuZCB0aW1lIHNjYWxlXG5cblx0X2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKSB7XG5cblx0XHRjb25zdCBpbnRlcnBvbGFudHMgPSB0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzLFxuXHRcdFx0bGFzdEFjdGl2ZUluZGV4ID0gdGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMgKys7XG5cblx0XHRsZXQgaW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpbnRlcnBvbGFudCA9IG5ldyBMaW5lYXJJbnRlcnBvbGFudChcblx0XHRcdFx0bmV3IEZsb2F0MzJBcnJheSggMiApLCBuZXcgRmxvYXQzMkFycmF5KCAyICksXG5cdFx0XHRcdDEsIF9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyICk7XG5cblx0XHRcdGludGVycG9sYW50Ll9fY2FjaGVJbmRleCA9IGxhc3RBY3RpdmVJbmRleDtcblx0XHRcdGludGVycG9sYW50c1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBpbnRlcnBvbGFudDtcblxuXHR9XG5cblx0X3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50KCBpbnRlcnBvbGFudCApIHtcblxuXHRcdGNvbnN0IGludGVycG9sYW50cyA9IHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMsXG5cdFx0XHRwcmV2SW5kZXggPSBpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXgsXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzLFxuXG5cdFx0XHRsYXN0QWN0aXZlSW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGZpcnN0SW5hY3RpdmVJbmRleCBdO1xuXG5cdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xuXHRcdGludGVycG9sYW50c1sgZmlyc3RJbmFjdGl2ZUluZGV4IF0gPSBpbnRlcnBvbGFudDtcblxuXHRcdGxhc3RBY3RpdmVJbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0aW50ZXJwb2xhbnRzWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVJbnRlcnBvbGFudDtcblxuXHR9XG5cblx0Ly8gcmV0dXJuIGFuIGFjdGlvbiBmb3IgYSBjbGlwIG9wdGlvbmFsbHkgdXNpbmcgYSBjdXN0b20gcm9vdCB0YXJnZXRcblx0Ly8gb2JqZWN0ICh0aGlzIG1ldGhvZCBhbGxvY2F0ZXMgYSBsb3Qgb2YgZHluYW1pYyBtZW1vcnkgaW4gY2FzZSBhXG5cdC8vIHByZXZpb3VzbHkgdW5rbm93biBjbGlwL3Jvb3QgY29tYmluYXRpb24gaXMgc3BlY2lmaWVkKVxuXHRjbGlwQWN0aW9uKCBjbGlwLCBvcHRpb25hbFJvb3QsIGJsZW5kTW9kZSApIHtcblxuXHRcdGNvbnN0IHJvb3QgPSBvcHRpb25hbFJvb3QgfHwgdGhpcy5fcm9vdCxcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkO1xuXG5cdFx0bGV0IGNsaXBPYmplY3QgPSB0eXBlb2YgY2xpcCA9PT0gJ3N0cmluZycgPyBBbmltYXRpb25DbGlwLmZpbmRCeU5hbWUoIHJvb3QsIGNsaXAgKSA6IGNsaXA7XG5cblx0XHRjb25zdCBjbGlwVXVpZCA9IGNsaXBPYmplY3QgIT09IG51bGwgPyBjbGlwT2JqZWN0LnV1aWQgOiBjbGlwO1xuXG5cdFx0Y29uc3QgYWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXHRcdGxldCBwcm90b3R5cGVBY3Rpb24gPSBudWxsO1xuXG5cdFx0aWYgKCBibGVuZE1vZGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBjbGlwT2JqZWN0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGJsZW5kTW9kZSA9IGNsaXBPYmplY3QuYmxlbmRNb2RlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGJsZW5kTW9kZSA9IE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBhY3Rpb25zRm9yQ2xpcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBleGlzdGluZ0FjdGlvbiA9IGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdFx0aWYgKCBleGlzdGluZ0FjdGlvbiAhPT0gdW5kZWZpbmVkICYmIGV4aXN0aW5nQWN0aW9uLmJsZW5kTW9kZSA9PT0gYmxlbmRNb2RlICkge1xuXG5cdFx0XHRcdHJldHVybiBleGlzdGluZ0FjdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB3ZSBrbm93IHRoZSBjbGlwLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHBhcnNlIGFsbFxuXHRcdFx0Ly8gdGhlIGJpbmRpbmdzIGFnYWluIGJ1dCBjYW4ganVzdCBjb3B5XG5cdFx0XHRwcm90b3R5cGVBY3Rpb24gPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnNbIDAgXTtcblxuXHRcdFx0Ly8gYWxzbywgdGFrZSB0aGUgY2xpcCBmcm9tIHRoZSBwcm90b3R5cGUgYWN0aW9uXG5cdFx0XHRpZiAoIGNsaXBPYmplY3QgPT09IG51bGwgKVxuXHRcdFx0XHRjbGlwT2JqZWN0ID0gcHJvdG90eXBlQWN0aW9uLl9jbGlwO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY2xpcCBtdXN0IGJlIGtub3duIHdoZW4gc3BlY2lmaWVkIHZpYSBzdHJpbmdcblx0XHRpZiAoIGNsaXBPYmplY3QgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcblxuXHRcdC8vIGFsbG9jYXRlIGFsbCByZXNvdXJjZXMgcmVxdWlyZWQgdG8gcnVuIGl0XG5cdFx0Y29uc3QgbmV3QWN0aW9uID0gbmV3IEFuaW1hdGlvbkFjdGlvbiggdGhpcywgY2xpcE9iamVjdCwgb3B0aW9uYWxSb290LCBibGVuZE1vZGUgKTtcblxuXHRcdHRoaXMuX2JpbmRBY3Rpb24oIG5ld0FjdGlvbiwgcHJvdG90eXBlQWN0aW9uICk7XG5cblx0XHQvLyBhbmQgbWFrZSB0aGUgYWN0aW9uIGtub3duIHRvIHRoZSBtZW1vcnkgbWFuYWdlclxuXHRcdHRoaXMuX2FkZEluYWN0aXZlQWN0aW9uKCBuZXdBY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApO1xuXG5cdFx0cmV0dXJuIG5ld0FjdGlvbjtcblxuXHR9XG5cblx0Ly8gZ2V0IGFuIGV4aXN0aW5nIGFjdGlvblxuXHRleGlzdGluZ0FjdGlvbiggY2xpcCwgb3B0aW9uYWxSb290ICkge1xuXG5cdFx0Y29uc3Qgcm9vdCA9IG9wdGlvbmFsUm9vdCB8fCB0aGlzLl9yb290LFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQsXG5cblx0XHRcdGNsaXBPYmplY3QgPSB0eXBlb2YgY2xpcCA9PT0gJ3N0cmluZycgP1xuXHRcdFx0XHRBbmltYXRpb25DbGlwLmZpbmRCeU5hbWUoIHJvb3QsIGNsaXAgKSA6IGNsaXAsXG5cblx0XHRcdGNsaXBVdWlkID0gY2xpcE9iamVjdCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXAsXG5cblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXSB8fCBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdC8vIGRlYWN0aXZhdGVzIGFsbCBwcmV2aW91c2x5IHNjaGVkdWxlZCBhY3Rpb25zXG5cdHN0b3BBbGxBY3Rpb24oKSB7XG5cblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdG5BY3Rpb25zID0gdGhpcy5fbkFjdGl2ZUFjdGlvbnM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IG5BY3Rpb25zIC0gMTsgaSA+PSAwOyAtLSBpICkge1xuXG5cdFx0XHRhY3Rpb25zWyBpIF0uc3RvcCgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIGFkdmFuY2UgdGhlIHRpbWUgYW5kIHVwZGF0ZSBhcHBseSB0aGUgYW5pbWF0aW9uXG5cdHVwZGF0ZSggZGVsdGFUaW1lICkge1xuXG5cdFx0ZGVsdGFUaW1lICo9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRuQWN0aW9ucyA9IHRoaXMuX25BY3RpdmVBY3Rpb25zLFxuXG5cdFx0XHR0aW1lID0gdGhpcy50aW1lICs9IGRlbHRhVGltZSxcblx0XHRcdHRpbWVEaXJlY3Rpb24gPSBNYXRoLnNpZ24oIGRlbHRhVGltZSApLFxuXG5cdFx0XHRhY2N1SW5kZXggPSB0aGlzLl9hY2N1SW5kZXggXj0gMTtcblxuXHRcdC8vIHJ1biBhY3RpdmUgYWN0aW9uc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuQWN0aW9uczsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgYWN0aW9uID0gYWN0aW9uc1sgaSBdO1xuXG5cdFx0XHRhY3Rpb24uX3VwZGF0ZSggdGltZSwgZGVsdGFUaW1lLCB0aW1lRGlyZWN0aW9uLCBhY2N1SW5kZXggKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBzY2VuZSBncmFwaFxuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbkJpbmRpbmdzOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLmFwcGx5KCBhY2N1SW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvLyBBbGxvd3MgeW91IHRvIHNlZWsgdG8gYSBzcGVjaWZpYyB0aW1lIGluIGFuIGFuaW1hdGlvbi5cblx0c2V0VGltZSggdGltZUluU2Vjb25kcyApIHtcblxuXHRcdHRoaXMudGltZSA9IDA7IC8vIFplcm8gb3V0IHRpbWUgYXR0cmlidXRlIGZvciBBbmltYXRpb25NaXhlciBvYmplY3Q7XG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5fYWN0aW9ucy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuX2FjdGlvbnNbIGkgXS50aW1lID0gMDsgLy8gWmVybyBvdXQgdGltZSBhdHRyaWJ1dGUgZm9yIGFsbCBhc3NvY2lhdGVkIEFuaW1hdGlvbkFjdGlvbiBvYmplY3RzLlxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKCB0aW1lSW5TZWNvbmRzICk7IC8vIFVwZGF0ZSB1c2VkIHRvIHNldCBleGFjdCB0aW1lLiBSZXR1cm5zIFwidGhpc1wiIEFuaW1hdGlvbk1peGVyIG9iamVjdC5cblxuXHR9XG5cblx0Ly8gcmV0dXJuIHRoaXMgbWl4ZXIncyByb290IHRhcmdldCBvYmplY3Rcblx0Z2V0Um9vdCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9yb290O1xuXG5cdH1cblxuXHQvLyBmcmVlIGFsbCByZXNvdXJjZXMgc3BlY2lmaWMgdG8gYSBwYXJ0aWN1bGFyIGNsaXBcblx0dW5jYWNoZUNsaXAoIGNsaXAgKSB7XG5cblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGNsaXBVdWlkID0gY2xpcC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG5vdGU6IGp1c3QgY2FsbGluZyBfcmVtb3ZlSW5hY3RpdmVBY3Rpb24gd291bGQgbWVzcyB1cCB0aGVcblx0XHRcdC8vIGl0ZXJhdGlvbiBzdGF0ZSBhbmQgYWxzbyByZXF1aXJlIHVwZGF0aW5nIHRoZSBzdGF0ZSB3ZSBjYW5cblx0XHRcdC8vIGp1c3QgdGhyb3cgYXdheVxuXG5cdFx0XHRjb25zdCBhY3Rpb25zVG9SZW1vdmUgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGFjdGlvbnNUb1JlbW92ZS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0Y29uc3QgYWN0aW9uID0gYWN0aW9uc1RvUmVtb3ZlWyBpIF07XG5cblx0XHRcdFx0dGhpcy5fZGVhY3RpdmF0ZUFjdGlvbiggYWN0aW9uICk7XG5cblx0XHRcdFx0Y29uc3QgY2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCxcblx0XHRcdFx0XHRsYXN0SW5hY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBhY3Rpb25zLmxlbmd0aCAtIDEgXTtcblxuXHRcdFx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsO1xuXHRcdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xuXG5cdFx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0XHRcdGFjdGlvbnNbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjtcblx0XHRcdFx0YWN0aW9ucy5wb3AoKTtcblxuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gZnJlZSBhbGwgcmVzb3VyY2VzIHNwZWNpZmljIHRvIGEgcGFydGljdWxhciByb290IHRhcmdldCBvYmplY3Rcblx0dW5jYWNoZVJvb3QoIHJvb3QgKSB7XG5cblx0XHRjb25zdCByb290VXVpZCA9IHJvb3QudXVpZCxcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwO1xuXG5cdFx0Zm9yICggY29uc3QgY2xpcFV1aWQgaW4gYWN0aW9uc0J5Q2xpcCApIHtcblxuXHRcdFx0Y29uc3QgYWN0aW9uQnlSb290ID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXS5hY3Rpb25CeVJvb3QsXG5cdFx0XHRcdGFjdGlvbiA9IGFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdFx0aWYgKCBhY3Rpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdGlmICggYmluZGluZ0J5TmFtZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBjb25zdCB0cmFja05hbWUgaW4gYmluZGluZ0J5TmFtZSApIHtcblxuXHRcdFx0XHRjb25zdCBiaW5kaW5nID0gYmluZGluZ0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cdFx0XHRcdGJpbmRpbmcucmVzdG9yZU9yaWdpbmFsU3RhdGUoKTtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gcmVtb3ZlIGEgdGFyZ2V0ZWQgY2xpcCBmcm9tIHRoZSBjYWNoZVxuXHR1bmNhY2hlQWN0aW9uKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7XG5cblx0XHRjb25zdCBhY3Rpb24gPSB0aGlzLmV4aXN0aW5nQWN0aW9uKCBjbGlwLCBvcHRpb25hbFJvb3QgKTtcblxuXHRcdGlmICggYWN0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQW5pbWF0aW9uTWl4ZXIgfTtcbiIsImNsYXNzIFVuaWZvcm0ge1xuXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IFVuaWZvcm0oIHRoaXMudmFsdWUuY2xvbmUgPT09IHVuZGVmaW5lZCA/IHRoaXMudmFsdWUgOiB0aGlzLnZhbHVlLmNsb25lKCkgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgVW5pZm9ybSB9O1xuIiwiaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi9FdmVudERpc3BhdGNoZXIuanMnO1xuaW1wb3J0IHsgU3RhdGljRHJhd1VzYWdlIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxubGV0IF9pZCA9IDA7XG5cbmNsYXNzIFVuaWZvcm1zR3JvdXAgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNVbmlmb3Jtc0dyb3VwID0gdHJ1ZTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX2lkICsrIH0gKTtcblxuXHRcdHRoaXMubmFtZSA9ICcnO1xuXG5cdFx0dGhpcy51c2FnZSA9IFN0YXRpY0RyYXdVc2FnZTtcblx0XHR0aGlzLnVuaWZvcm1zID0gW107XG5cblx0fVxuXG5cdGFkZCggdW5pZm9ybSApIHtcblxuXHRcdHRoaXMudW5pZm9ybXMucHVzaCggdW5pZm9ybSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJlbW92ZSggdW5pZm9ybSApIHtcblxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy51bmlmb3Jtcy5pbmRleE9mKCB1bmlmb3JtICk7XG5cblx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB0aGlzLnVuaWZvcm1zLnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXROYW1lKCBuYW1lICkge1xuXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRVc2FnZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnVzYWdlID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXHRcdHRoaXMudXNhZ2UgPSBzb3VyY2UudXNhZ2U7XG5cblx0XHRjb25zdCB1bmlmb3Jtc1NvdXJjZSA9IHNvdXJjZS51bmlmb3JtcztcblxuXHRcdHRoaXMudW5pZm9ybXMubGVuZ3RoID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHVuaWZvcm1zU291cmNlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHVuaWZvcm1zID0gQXJyYXkuaXNBcnJheSggdW5pZm9ybXNTb3VyY2VbIGkgXSApID8gdW5pZm9ybXNTb3VyY2VbIGkgXSA6IFsgdW5pZm9ybXNTb3VyY2VbIGkgXSBdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCB1bmlmb3Jtcy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0dGhpcy51bmlmb3Jtcy5wdXNoKCB1bmlmb3Jtc1sgaiBdLmNsb25lKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBVbmlmb3Jtc0dyb3VwIH07XG4iLCJpbXBvcnQgeyBJbnRlcmxlYXZlZEJ1ZmZlciB9IGZyb20gJy4vSW50ZXJsZWF2ZWRCdWZmZXIuanMnO1xuXG5jbGFzcyBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciBleHRlbmRzIEludGVybGVhdmVkQnVmZmVyIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIHN0cmlkZSwgbWVzaFBlckF0dHJpYnV0ZSA9IDEgKSB7XG5cblx0XHRzdXBlciggYXJyYXksIHN0cmlkZSApO1xuXG5cdFx0dGhpcy5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyID0gdHJ1ZTtcblxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gc291cmNlLm1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoIGRhdGEgKSB7XG5cblx0XHRjb25zdCBpYiA9IHN1cGVyLmNsb25lKCBkYXRhICk7XG5cblx0XHRpYi5tZXNoUGVyQXR0cmlidXRlID0gdGhpcy5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIGliO1xuXG5cdH1cblxuXHR0b0pTT04oIGRhdGEgKSB7XG5cblx0XHRjb25zdCBqc29uID0gc3VwZXIudG9KU09OKCBkYXRhICk7XG5cblx0XHRqc29uLmlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIgPSB0cnVlO1xuXHRcdGpzb24ubWVzaFBlckF0dHJpYnV0ZSA9IHRoaXMubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiBqc29uO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciB9O1xuIiwiY2xhc3MgR0xCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBidWZmZXIsIHR5cGUsIGl0ZW1TaXplLCBlbGVtZW50U2l6ZSwgY291bnQgKSB7XG5cblx0XHR0aGlzLmlzR0xCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cblx0XHR0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0XHR0aGlzLmVsZW1lbnRTaXplID0gZWxlbWVudFNpemU7XG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXG5cdFx0dGhpcy52ZXJzaW9uID0gMDtcblxuXHR9XG5cblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG5cdHNldEJ1ZmZlciggYnVmZmVyICkge1xuXG5cdFx0dGhpcy5idWZmZXIgPSBidWZmZXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0VHlwZSggdHlwZSwgZWxlbWVudFNpemUgKSB7XG5cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuZWxlbWVudFNpemUgPSBlbGVtZW50U2l6ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRJdGVtU2l6ZSggaXRlbVNpemUgKSB7XG5cblx0XHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0Q291bnQoIGNvdW50ICkge1xuXG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEdMQnVmZmVyQXR0cmlidXRlIH07XG4iLCJpbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCB7IFJheSB9IGZyb20gJy4uL21hdGgvUmF5LmpzJztcbmltcG9ydCB7IExheWVycyB9IGZyb20gJy4vTGF5ZXJzLmpzJztcblxuY29uc3QgX21hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuY2xhc3MgUmF5Y2FzdGVyIHtcblxuXHRjb25zdHJ1Y3Rvciggb3JpZ2luLCBkaXJlY3Rpb24sIG5lYXIgPSAwLCBmYXIgPSBJbmZpbml0eSApIHtcblxuXHRcdHRoaXMucmF5ID0gbmV3IFJheSggb3JpZ2luLCBkaXJlY3Rpb24gKTtcblx0XHQvLyBkaXJlY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkIChmb3IgYWNjdXJhdGUgZGlzdGFuY2UgY2FsY3VsYXRpb25zKVxuXG5cdFx0dGhpcy5uZWFyID0gbmVhcjtcblx0XHR0aGlzLmZhciA9IGZhcjtcblx0XHR0aGlzLmNhbWVyYSA9IG51bGw7XG5cdFx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cblx0XHR0aGlzLnBhcmFtcyA9IHtcblx0XHRcdE1lc2g6IHt9LFxuXHRcdFx0TGluZTogeyB0aHJlc2hvbGQ6IDEgfSxcblx0XHRcdExPRDoge30sXG5cdFx0XHRQb2ludHM6IHsgdGhyZXNob2xkOiAxIH0sXG5cdFx0XHRTcHJpdGU6IHt9XG5cdFx0fTtcblxuXHR9XG5cblx0c2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcblxuXHRcdC8vIGRpcmVjdGlvbiBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQgKGZvciBhY2N1cmF0ZSBkaXN0YW5jZSBjYWxjdWxhdGlvbnMpXG5cblx0XHR0aGlzLnJheS5zZXQoIG9yaWdpbiwgZGlyZWN0aW9uICk7XG5cblx0fVxuXG5cdHNldEZyb21DYW1lcmEoIGNvb3JkcywgY2FtZXJhICkge1xuXG5cdFx0aWYgKCBjYW1lcmEuaXNQZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0dGhpcy5yYXkub3JpZ2luLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLnJheS5kaXJlY3Rpb24uc2V0KCBjb29yZHMueCwgY29vcmRzLnksIDAuNSApLnVucHJvamVjdCggY2FtZXJhICkuc3ViKCB0aGlzLnJheS5vcmlnaW4gKS5ub3JtYWxpemUoKTtcblx0XHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0fSBlbHNlIGlmICggY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHR0aGlzLnJheS5vcmlnaW4uc2V0KCBjb29yZHMueCwgY29vcmRzLnksICggY2FtZXJhLm5lYXIgKyBjYW1lcmEuZmFyICkgLyAoIGNhbWVyYS5uZWFyIC0gY2FtZXJhLmZhciApICkudW5wcm9qZWN0KCBjYW1lcmEgKTsgLy8gc2V0IG9yaWdpbiBpbiBwbGFuZSBvZiBjYW1lcmFcblx0XHRcdHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5SYXljYXN0ZXI6IFVuc3VwcG9ydGVkIGNhbWVyYSB0eXBlOiAnICsgY2FtZXJhLnR5cGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0c2V0RnJvbVhSQ29udHJvbGxlciggY29udHJvbGxlciApIHtcblxuXHRcdF9tYXRyaXguaWRlbnRpdHkoKS5leHRyYWN0Um90YXRpb24oIGNvbnRyb2xsZXIubWF0cml4V29ybGQgKTtcblxuXHRcdHRoaXMucmF5Lm9yaWdpbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNvbnRyb2xsZXIubWF0cml4V29ybGQgKTtcblx0XHR0aGlzLnJheS5kaXJlY3Rpb24uc2V0KCAwLCAwLCAtIDEgKS5hcHBseU1hdHJpeDQoIF9tYXRyaXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RPYmplY3QoIG9iamVjdCwgcmVjdXJzaXZlID0gdHJ1ZSwgaW50ZXJzZWN0cyA9IFtdICkge1xuXG5cdFx0aW50ZXJzZWN0KCBvYmplY3QsIHRoaXMsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0aW50ZXJzZWN0cy5zb3J0KCBhc2NTb3J0ICk7XG5cblx0XHRyZXR1cm4gaW50ZXJzZWN0cztcblxuXHR9XG5cblx0aW50ZXJzZWN0T2JqZWN0cyggb2JqZWN0cywgcmVjdXJzaXZlID0gdHJ1ZSwgaW50ZXJzZWN0cyA9IFtdICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gb2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpbnRlcnNlY3QoIG9iamVjdHNbIGkgXSwgdGhpcywgaW50ZXJzZWN0cywgcmVjdXJzaXZlICk7XG5cblx0XHR9XG5cblx0XHRpbnRlcnNlY3RzLnNvcnQoIGFzY1NvcnQgKTtcblxuXHRcdHJldHVybiBpbnRlcnNlY3RzO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBhc2NTb3J0KCBhLCBiICkge1xuXG5cdHJldHVybiBhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZTtcblxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3QoIG9iamVjdCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKSB7XG5cblx0bGV0IHByb3BhZ2F0ZSA9IHRydWU7XG5cblx0aWYgKCBvYmplY3QubGF5ZXJzLnRlc3QoIHJheWNhc3Rlci5sYXllcnMgKSApIHtcblxuXHRcdGNvbnN0IHJlc3VsdCA9IG9iamVjdC5yYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKTtcblxuXHRcdGlmICggcmVzdWx0ID09PSBmYWxzZSApIHByb3BhZ2F0ZSA9IGZhbHNlO1xuXG5cdH1cblxuXHRpZiAoIHByb3BhZ2F0ZSA9PT0gdHJ1ZSAmJiByZWN1cnNpdmUgPT09IHRydWUgKSB7XG5cblx0XHRjb25zdCBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGludGVyc2VjdCggY2hpbGRyZW5bIGkgXSwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCB0cnVlICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFJheWNhc3RlciB9O1xuIiwiaW1wb3J0ICogYXMgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzLmpzJztcblxuLyoqXG4gKiBSZWY6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NwaGVyaWNhbF9jb29yZGluYXRlX3N5c3RlbVxuICpcbiAqIHBoaSAodGhlIHBvbGFyIGFuZ2xlKSBpcyBtZWFzdXJlZCBmcm9tIHRoZSBwb3NpdGl2ZSB5LWF4aXMuIFRoZSBwb3NpdGl2ZSB5LWF4aXMgaXMgdXAuXG4gKiB0aGV0YSAodGhlIGF6aW11dGhhbCBhbmdsZSkgaXMgbWVhc3VyZWQgZnJvbSB0aGUgcG9zaXRpdmUgei1heGlzLlxuICovXG5jbGFzcyBTcGhlcmljYWwge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBwaGkgPSAwLCB0aGV0YSA9IDAgKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHR0aGlzLnBoaSA9IHBoaTsgLy8gcG9sYXIgYW5nbGVcblx0XHR0aGlzLnRoZXRhID0gdGhldGE7IC8vIGF6aW11dGhhbCBhbmdsZVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldCggcmFkaXVzLCBwaGksIHRoZXRhICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cdFx0dGhpcy5waGkgPSBwaGk7XG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIG90aGVyICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBvdGhlci5yYWRpdXM7XG5cdFx0dGhpcy5waGkgPSBvdGhlci5waGk7XG5cdFx0dGhpcy50aGV0YSA9IG90aGVyLnRoZXRhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIHJlc3RyaWN0IHBoaSB0byBiZSBiZXR3ZWVuIEVQUyBhbmQgUEktRVBTXG5cdG1ha2VTYWZlKCkge1xuXG5cdFx0Y29uc3QgRVBTID0gMC4wMDAwMDE7XG5cdFx0dGhpcy5waGkgPSBNYXRoLm1heCggRVBTLCBNYXRoLm1pbiggTWF0aC5QSSAtIEVQUywgdGhpcy5waGkgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21WZWN0b3IzKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUNhcnRlc2lhbkNvb3Jkcyggdi54LCB2LnksIHYueiApO1xuXG5cdH1cblxuXHRzZXRGcm9tQ2FydGVzaWFuQ29vcmRzKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIHggKiB4ICsgeSAqIHkgKyB6ICogeiApO1xuXG5cdFx0aWYgKCB0aGlzLnJhZGl1cyA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy50aGV0YSA9IDA7XG5cdFx0XHR0aGlzLnBoaSA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnRoZXRhID0gTWF0aC5hdGFuMiggeCwgeiApO1xuXHRcdFx0dGhpcy5waGkgPSBNYXRoLmFjb3MoIE1hdGhVdGlscy5jbGFtcCggeSAvIHRoaXMucmFkaXVzLCAtIDEsIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBTcGhlcmljYWwgfTtcbiIsIi8qKlxuICogUmVmOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DeWxpbmRyaWNhbF9jb29yZGluYXRlX3N5c3RlbVxuICovXG5cbmNsYXNzIEN5bGluZHJpY2FsIHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgdGhldGEgPSAwLCB5ID0gMCApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzOyAvLyBkaXN0YW5jZSBmcm9tIHRoZSBvcmlnaW4gdG8gYSBwb2ludCBpbiB0aGUgeC16IHBsYW5lXG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhOyAvLyBjb3VudGVyY2xvY2t3aXNlIGFuZ2xlIGluIHRoZSB4LXogcGxhbmUgbWVhc3VyZWQgaW4gcmFkaWFucyBmcm9tIHRoZSBwb3NpdGl2ZSB6LWF4aXNcblx0XHR0aGlzLnkgPSB5OyAvLyBoZWlnaHQgYWJvdmUgdGhlIHgteiBwbGFuZVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldCggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIG90aGVyICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBvdGhlci5yYWRpdXM7XG5cdFx0dGhpcy50aGV0YSA9IG90aGVyLnRoZXRhO1xuXHRcdHRoaXMueSA9IG90aGVyLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVZlY3RvcjMoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tQ2FydGVzaWFuQ29vcmRzKCB2LngsIHYueSwgdi56ICk7XG5cblx0fVxuXG5cdHNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggeCAqIHggKyB6ICogeiApO1xuXHRcdHRoaXMudGhldGEgPSBNYXRoLmF0YW4yKCB4LCB6ICk7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQ3lsaW5kcmljYWwgfTtcbiIsImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuL1ZlY3RvcjIuanMnO1xuXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuXG5jbGFzcyBCb3gyIHtcblxuXHRjb25zdHJ1Y3RvciggbWluID0gbmV3IFZlY3RvcjIoICsgSW5maW5pdHksICsgSW5maW5pdHkgKSwgbWF4ID0gbmV3IFZlY3RvcjIoIC0gSW5maW5pdHksIC0gSW5maW5pdHkgKSApIHtcblxuXHRcdHRoaXMuaXNCb3gyID0gdHJ1ZTtcblxuXHRcdHRoaXMubWluID0gbWluO1xuXHRcdHRoaXMubWF4ID0gbWF4O1xuXG5cdH1cblxuXHRzZXQoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVBvaW50cyggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tQ2VudGVyQW5kU2l6ZSggY2VudGVyLCBzaXplICkge1xuXG5cdFx0Y29uc3QgaGFsZlNpemUgPSBfdmVjdG9yLmNvcHkoIHNpemUgKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGNlbnRlciApLmFkZCggaGFsZlNpemUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggYm94ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlRW1wdHkoKSB7XG5cblx0XHR0aGlzLm1pbi54ID0gdGhpcy5taW4ueSA9ICsgSW5maW5pdHk7XG5cdFx0dGhpcy5tYXgueCA9IHRoaXMubWF4LnkgPSAtIEluZmluaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGlzRW1wdHkoKSB7XG5cblx0XHQvLyB0aGlzIGlzIGEgbW9yZSByb2J1c3QgY2hlY2sgZm9yIGVtcHR5IHRoYW4gKCB2b2x1bWUgPD0gMCApIGJlY2F1c2Ugdm9sdW1lIGNhbiBnZXQgcG9zaXRpdmUgd2l0aCB0d28gbmVnYXRpdmUgYXhlc1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXgueCA8IHRoaXMubWluLnggKSB8fCAoIHRoaXMubWF4LnkgPCB0aGlzLm1pbi55ICk7XG5cblx0fVxuXG5cdGdldENlbnRlciggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCApIDogdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMubWluLCB0aGlzLm1heCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHR9XG5cblx0Z2V0U2l6ZSggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCApIDogdGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMubWF4LCB0aGlzLm1pbiApO1xuXG5cdH1cblxuXHRleHBhbmRCeVBvaW50KCBwb2ludCApIHtcblxuXHRcdHRoaXMubWluLm1pbiggcG9pbnQgKTtcblx0XHR0aGlzLm1heC5tYXgoIHBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXhwYW5kQnlWZWN0b3IoIHZlY3RvciApIHtcblxuXHRcdHRoaXMubWluLnN1YiggdmVjdG9yICk7XG5cdFx0dGhpcy5tYXguYWRkKCB2ZWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHBhbmRCeVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy5taW4uYWRkU2NhbGFyKCAtIHNjYWxhciApO1xuXHRcdHRoaXMubWF4LmFkZFNjYWxhciggc2NhbGFyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29udGFpbnNQb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gcG9pbnQueCA8IHRoaXMubWluLnggfHwgcG9pbnQueCA+IHRoaXMubWF4LnggfHxcblx0XHRcdHBvaW50LnkgPCB0aGlzLm1pbi55IHx8IHBvaW50LnkgPiB0aGlzLm1heC55ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH1cblxuXHRjb250YWluc0JveCggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWluLnggPD0gYm94Lm1pbi54ICYmIGJveC5tYXgueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueTtcblxuXHR9XG5cblx0Z2V0UGFyYW1ldGVyKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0Ly8gVGhpcyBjYW4gcG90ZW50aWFsbHkgaGF2ZSBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBib3hcblx0XHQvLyBoYXMgYSBzaXplIGRpbWVuc2lvbiBvZiAwLlxuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoXG5cdFx0XHQoIHBvaW50LnggLSB0aGlzLm1pbi54ICkgLyAoIHRoaXMubWF4LnggLSB0aGlzLm1pbi54ICksXG5cdFx0XHQoIHBvaW50LnkgLSB0aGlzLm1pbi55ICkgLyAoIHRoaXMubWF4LnkgLSB0aGlzLm1pbi55IClcblx0XHQpO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHQvLyB1c2luZyA0IHNwbGl0dGluZyBwbGFuZXMgdG8gcnVsZSBvdXQgaW50ZXJzZWN0aW9uc1xuXG5cdFx0cmV0dXJuIGJveC5tYXgueCA8IHRoaXMubWluLnggfHwgYm94Lm1pbi54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0Ym94Lm1heC55IDwgdGhpcy5taW4ueSB8fCBib3gubWluLnkgPiB0aGlzLm1heC55ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH1cblxuXHRjbGFtcFBvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiB0aGlzLmNsYW1wUG9pbnQoIHBvaW50LCBfdmVjdG9yICkuZGlzdGFuY2VUbyggcG9pbnQgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0KCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5tYXgoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5taW4oIGJveC5tYXggKTtcblxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVuaW9uKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5tYXgoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc2xhdGUoIG9mZnNldCApIHtcblxuXHRcdHRoaXMubWluLmFkZCggb2Zmc2V0ICk7XG5cdFx0dGhpcy5tYXguYWRkKCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIGJveCApIHtcblxuXHRcdHJldHVybiBib3gubWluLmVxdWFscyggdGhpcy5taW4gKSAmJiBib3gubWF4LmVxdWFscyggdGhpcy5tYXggKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQm94MiB9O1xuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMy5qcyc7XG5pbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi9NYXRoVXRpbHMuanMnO1xuXG5jb25zdCBfc3RhcnRQID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3N0YXJ0RW5kID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBMaW5lMyB7XG5cblx0Y29uc3RydWN0b3IoIHN0YXJ0ID0gbmV3IFZlY3RvcjMoKSwgZW5kID0gbmV3IFZlY3RvcjMoKSApIHtcblxuXHRcdHRoaXMuc3RhcnQgPSBzdGFydDtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblxuXHR9XG5cblx0c2V0KCBzdGFydCwgZW5kICkge1xuXG5cdFx0dGhpcy5zdGFydC5jb3B5KCBzdGFydCApO1xuXHRcdHRoaXMuZW5kLmNvcHkoIGVuZCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIGxpbmUgKSB7XG5cblx0XHR0aGlzLnN0YXJ0LmNvcHkoIGxpbmUuc3RhcnQgKTtcblx0XHR0aGlzLmVuZC5jb3B5KCBsaW5lLmVuZCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldENlbnRlciggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLnN0YXJ0LCB0aGlzLmVuZCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHR9XG5cblx0ZGVsdGEoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5lbmQsIHRoaXMuc3RhcnQgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLmVuZCApO1xuXG5cdH1cblxuXHRkaXN0YW5jZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG8oIHRoaXMuZW5kICk7XG5cblx0fVxuXG5cdGF0KCB0LCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kZWx0YSggdGFyZ2V0ICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMuc3RhcnQgKTtcblxuXHR9XG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlciggcG9pbnQsIGNsYW1wVG9MaW5lICkge1xuXG5cdFx0X3N0YXJ0UC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5zdGFydCApO1xuXHRcdF9zdGFydEVuZC5zdWJWZWN0b3JzKCB0aGlzLmVuZCwgdGhpcy5zdGFydCApO1xuXG5cdFx0Y29uc3Qgc3RhcnRFbmQyID0gX3N0YXJ0RW5kLmRvdCggX3N0YXJ0RW5kICk7XG5cdFx0Y29uc3Qgc3RhcnRFbmRfc3RhcnRQID0gX3N0YXJ0RW5kLmRvdCggX3N0YXJ0UCApO1xuXG5cdFx0bGV0IHQgPSBzdGFydEVuZF9zdGFydFAgLyBzdGFydEVuZDI7XG5cblx0XHRpZiAoIGNsYW1wVG9MaW5lICkge1xuXG5cdFx0XHR0ID0gTWF0aFV0aWxzLmNsYW1wKCB0LCAwLCAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdDtcblxuXHR9XG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludCggcG9pbnQsIGNsYW1wVG9MaW5lLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ID0gdGhpcy5jbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyKCBwb2ludCwgY2xhbXBUb0xpbmUgKTtcblxuXHRcdHJldHVybiB0aGlzLmRlbHRhKCB0YXJnZXQgKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5zdGFydCApO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMuc3RhcnQuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblx0XHR0aGlzLmVuZC5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggbGluZSApIHtcblxuXHRcdHJldHVybiBsaW5lLnN0YXJ0LmVxdWFscyggdGhpcy5zdGFydCApICYmIGxpbmUuZW5kLmVxdWFscyggdGhpcy5lbmQgKTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IExpbmUzIH07XG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XG5pbXBvcnQgeyBMaW5lU2VnbWVudHMgfSBmcm9tICcuLi9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyc7XG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcblxuY29uc3QgX3ZlY3RvciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgU3BvdExpZ2h0SGVscGVyIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCBsaWdodCwgY29sb3IgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3BvdExpZ2h0SGVscGVyJztcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHRjb25zdCBwb3NpdGlvbnMgPSBbXG5cdFx0XHQwLCAwLCAwLCBcdDAsIDAsIDEsXG5cdFx0XHQwLCAwLCAwLCBcdDEsIDAsIDEsXG5cdFx0XHQwLCAwLCAwLFx0LSAxLCAwLCAxLFxuXHRcdFx0MCwgMCwgMCwgXHQwLCAxLCAxLFxuXHRcdFx0MCwgMCwgMCwgXHQwLCAtIDEsIDFcblx0XHRdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMSwgbCA9IDMyOyBpIDwgbDsgaSArKywgaiArKyApIHtcblxuXHRcdFx0Y29uc3QgcDEgPSAoIGkgLyBsICkgKiBNYXRoLlBJICogMjtcblx0XHRcdGNvbnN0IHAyID0gKCBqIC8gbCApICogTWF0aC5QSSAqIDI7XG5cblx0XHRcdHBvc2l0aW9ucy5wdXNoKFxuXHRcdFx0XHRNYXRoLmNvcyggcDEgKSwgTWF0aC5zaW4oIHAxICksIDEsXG5cdFx0XHRcdE1hdGguY29zKCBwMiApLCBNYXRoLnNpbiggcDIgKSwgMVxuXHRcdFx0KTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBmb2c6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHR0aGlzLmNvbmUgPSBuZXcgTGluZVNlZ21lbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0XHR0aGlzLmFkZCggdGhpcy5jb25lICk7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5jb25lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLmNvbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cblx0XHR0aGlzLmxpZ2h0LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXHRcdHRoaXMubGlnaHQudGFyZ2V0LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0Ly8gdXBkYXRlIHRoZSBsb2NhbCBtYXRyaXggYmFzZWQgb24gdGhlIHBhcmVudCBhbmQgbGlnaHQgdGFyZ2V0IHRyYW5zZm9ybXNcblx0XHRpZiAoIHRoaXMucGFyZW50ICkge1xuXG5cdFx0XHR0aGlzLnBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSApO1xuXG5cdFx0XHR0aGlzLm1hdHJpeFxuXHRcdFx0XHQuY29weSggdGhpcy5wYXJlbnQubWF0cml4V29ybGQgKVxuXHRcdFx0XHQuaW52ZXJ0KClcblx0XHRcdFx0Lm11bHRpcGx5KCB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLm1hdHJpeC5jb3B5KCB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubGlnaHQubWF0cml4V29ybGQgKTtcblxuXHRcdGNvbnN0IGNvbmVMZW5ndGggPSB0aGlzLmxpZ2h0LmRpc3RhbmNlID8gdGhpcy5saWdodC5kaXN0YW5jZSA6IDEwMDA7XG5cdFx0Y29uc3QgY29uZVdpZHRoID0gY29uZUxlbmd0aCAqIE1hdGgudGFuKCB0aGlzLmxpZ2h0LmFuZ2xlICk7XG5cblx0XHR0aGlzLmNvbmUuc2NhbGUuc2V0KCBjb25lV2lkdGgsIGNvbmVXaWR0aCwgY29uZUxlbmd0aCApO1xuXG5cdFx0X3ZlY3Rvci5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR0aGlzLmNvbmUubG9va0F0KCBfdmVjdG9yICk7XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBTcG90TGlnaHRIZWxwZXIgfTtcbiIsImltcG9ydCB7IExpbmVTZWdtZW50cyB9IGZyb20gJy4uL29iamVjdHMvTGluZVNlZ21lbnRzLmpzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXRoL01hdHJpeDQuanMnO1xuaW1wb3J0IHsgTGluZUJhc2ljTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvTGluZUJhc2ljTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XG5cbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfYm9uZU1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9tYXRyaXhXb3JsZEludiA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuXG5jbGFzcyBTa2VsZXRvbkhlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0Y29uc3RydWN0b3IoIG9iamVjdCApIHtcblxuXHRcdGNvbnN0IGJvbmVzID0gZ2V0Qm9uZUxpc3QoIG9iamVjdCApO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3QgY29sb3JzID0gW107XG5cblx0XHRjb25zdCBjb2xvcjEgPSBuZXcgQ29sb3IoIDAsIDAsIDEgKTtcblx0XHRjb25zdCBjb2xvcjIgPSBuZXcgQ29sb3IoIDAsIDEsIDAgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYm9uZSA9IGJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkge1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0XHRjb2xvcnMucHVzaCggY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYiApO1xuXHRcdFx0XHRjb2xvcnMucHVzaCggY29sb3IyLnIsIGNvbG9yMi5nLCBjb2xvcjIuYiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogdHJ1ZSwgZGVwdGhUZXN0OiBmYWxzZSwgZGVwdGhXcml0ZTogZmFsc2UsIHRvbmVNYXBwZWQ6IGZhbHNlLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLmlzU2tlbGV0b25IZWxwZXIgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ1NrZWxldG9uSGVscGVyJztcblxuXHRcdHRoaXMucm9vdCA9IG9iamVjdDtcblx0XHR0aGlzLmJvbmVzID0gYm9uZXM7XG5cblx0XHR0aGlzLm1hdHJpeCA9IG9iamVjdC5tYXRyaXhXb3JsZDtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0Y29uc3QgYm9uZXMgPSB0aGlzLmJvbmVzO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRfbWF0cml4V29ybGRJbnYuY29weSggdGhpcy5yb290Lm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGogPSAwOyBpIDwgYm9uZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBib25lID0gYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0X2JvbmVNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggX21hdHJpeFdvcmxkSW52LCBib25lLm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdF92ZWN0b3Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBfYm9uZU1hdHJpeCApO1xuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGosIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcblxuXHRcdFx0XHRfYm9uZU1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBfbWF0cml4V29ybGRJbnYsIGJvbmUucGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdF92ZWN0b3Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBfYm9uZU1hdHJpeCApO1xuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGogKyAxLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XG5cblx0XHRcdFx0aiArPSAyO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxufVxuXG5cbmZ1bmN0aW9uIGdldEJvbmVMaXN0KCBvYmplY3QgKSB7XG5cblx0Y29uc3QgYm9uZUxpc3QgPSBbXTtcblxuXHRpZiAoIG9iamVjdC5pc0JvbmUgPT09IHRydWUgKSB7XG5cblx0XHRib25lTGlzdC5wdXNoKCBvYmplY3QgKTtcblxuXHR9XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGJvbmVMaXN0LnB1c2guYXBwbHkoIGJvbmVMaXN0LCBnZXRCb25lTGlzdCggb2JqZWN0LmNoaWxkcmVuWyBpIF0gKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gYm9uZUxpc3Q7XG5cbn1cblxuXG5leHBvcnQgeyBTa2VsZXRvbkhlbHBlciB9O1xuIiwiaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL29iamVjdHMvTWVzaC5qcyc7XG5pbXBvcnQgeyBNZXNoQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9NZXNoQmFzaWNNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBTcGhlcmVHZW9tZXRyeSB9IGZyb20gJy4uL2dlb21ldHJpZXMvU3BoZXJlR2VvbWV0cnkuanMnO1xuXG5jbGFzcyBQb2ludExpZ2h0SGVscGVyIGV4dGVuZHMgTWVzaCB7XG5cblx0Y29uc3RydWN0b3IoIGxpZ2h0LCBzcGhlcmVTaXplLCBjb2xvciApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IFNwaGVyZUdlb21ldHJ5KCBzcGhlcmVTaXplLCA0LCAyICk7XG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgd2lyZWZyYW1lOiB0cnVlLCBmb2c6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cblx0XHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0XHR0aGlzLnR5cGUgPSAnUG9pbnRMaWdodEhlbHBlcic7XG5cblx0XHR0aGlzLm1hdHJpeCA9IHRoaXMubGlnaHQubWF0cml4V29ybGQ7XG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cblx0XHQvKlxuXHQvLyBUT0RPOiBkZWxldGUgdGhpcyBjb21tZW50P1xuXHRjb25zdCBkaXN0YW5jZUdlb21ldHJ5ID0gbmV3IFRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnkoIDEsIDIgKTtcblx0Y29uc3QgZGlzdGFuY2VNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4Q29sb3IsIGZvZzogZmFsc2UsIHdpcmVmcmFtZTogdHJ1ZSwgb3BhY2l0eTogMC4xLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XG5cblx0dGhpcy5saWdodFNwaGVyZSA9IG5ldyBUSFJFRS5NZXNoKCBidWxiR2VvbWV0cnksIGJ1bGJNYXRlcmlhbCApO1xuXHR0aGlzLmxpZ2h0RGlzdGFuY2UgPSBuZXcgVEhSRUUuTWVzaCggZGlzdGFuY2VHZW9tZXRyeSwgZGlzdGFuY2VNYXRlcmlhbCApO1xuXG5cdGNvbnN0IGQgPSBsaWdodC5kaXN0YW5jZTtcblxuXHRpZiAoIGQgPT09IDAuMCApIHtcblxuXHRcdHRoaXMubGlnaHREaXN0YW5jZS52aXNpYmxlID0gZmFsc2U7XG5cblx0fSBlbHNlIHtcblxuXHRcdHRoaXMubGlnaHREaXN0YW5jZS5zY2FsZS5zZXQoIGQsIGQsIGQgKTtcblxuXHR9XG5cblx0dGhpcy5hZGQoIHRoaXMubGlnaHREaXN0YW5jZSApO1xuXHQqL1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdHVwZGF0ZSgpIHtcblxuXHRcdHRoaXMubGlnaHQudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXG5cdFx0fVxuXG5cdFx0Lypcblx0XHRjb25zdCBkID0gdGhpcy5saWdodC5kaXN0YW5jZTtcblxuXHRcdGlmICggZCA9PT0gMC4wICkge1xuXG5cdFx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSB0cnVlO1xuXHRcdFx0dGhpcy5saWdodERpc3RhbmNlLnNjYWxlLnNldCggZCwgZCwgZCApO1xuXG5cdFx0fVxuXHRcdCovXG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgUG9pbnRMaWdodEhlbHBlciB9O1xuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi9vYmplY3RzL01lc2guanMnO1xuaW1wb3J0IHsgTWVzaEJhc2ljTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvTWVzaEJhc2ljTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgT2N0YWhlZHJvbkdlb21ldHJ5IH0gZnJvbSAnLi4vZ2VvbWV0cmllcy9PY3RhaGVkcm9uR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2NvbG9yMSA9IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCk7XG5jb25zdCBfY29sb3IyID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTtcblxuY2xhc3MgSGVtaXNwaGVyZUxpZ2h0SGVscGVyIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCBsaWdodCwgc2l6ZSwgY29sb3IgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXG5cdFx0dGhpcy5tYXRyaXggPSBsaWdodC5tYXRyaXhXb3JsZDtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHRcdHRoaXMudHlwZSA9ICdIZW1pc3BoZXJlTGlnaHRIZWxwZXInO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgT2N0YWhlZHJvbkdlb21ldHJ5KCBzaXplICk7XG5cdFx0Z2VvbWV0cnkucm90YXRlWSggTWF0aC5QSSAqIDAuNSApO1xuXG5cdFx0dGhpcy5tYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyB3aXJlZnJhbWU6IHRydWUsIGZvZzogZmFsc2UsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblx0XHRpZiAoIHRoaXMuY29sb3IgPT09IHVuZGVmaW5lZCApIHRoaXMubWF0ZXJpYWwudmVydGV4Q29sb3JzID0gdHJ1ZTtcblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cdFx0Y29uc3QgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSggcG9zaXRpb24uY291bnQgKiAzICk7XG5cblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0XHR0aGlzLmFkZCggbmV3IE1lc2goIGdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkgKTtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmNoaWxkcmVuWyAwIF0uZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdHVwZGF0ZSgpIHtcblxuXHRcdGNvbnN0IG1lc2ggPSB0aGlzLmNoaWxkcmVuWyAwIF07XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IGNvbG9ycyA9IG1lc2guZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAnY29sb3InICk7XG5cblx0XHRcdF9jb2xvcjEuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXHRcdFx0X2NvbG9yMi5jb3B5KCB0aGlzLmxpZ2h0Lmdyb3VuZENvbG9yICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNvbG9ycy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgY29sb3IgPSAoIGkgPCAoIGwgLyAyICkgKSA/IF9jb2xvcjEgOiBfY29sb3IyO1xuXG5cdFx0XHRcdGNvbG9ycy5zZXRYWVooIGksIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb2xvcnMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5saWdodC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdG1lc2gubG9va0F0KCBfdmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApLm5lZ2F0ZSgpICk7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgSGVtaXNwaGVyZUxpZ2h0SGVscGVyIH07XG4iLCJpbXBvcnQgeyBMaW5lU2VnbWVudHMgfSBmcm9tICcuLi9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyc7XG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5cbmNsYXNzIEdyaWRIZWxwZXIgZXh0ZW5kcyBMaW5lU2VnbWVudHMge1xuXG5cdGNvbnN0cnVjdG9yKCBzaXplID0gMTAsIGRpdmlzaW9ucyA9IDEwLCBjb2xvcjEgPSAweDQ0NDQ0NCwgY29sb3IyID0gMHg4ODg4ODggKSB7XG5cblx0XHRjb2xvcjEgPSBuZXcgQ29sb3IoIGNvbG9yMSApO1xuXHRcdGNvbG9yMiA9IG5ldyBDb2xvciggY29sb3IyICk7XG5cblx0XHRjb25zdCBjZW50ZXIgPSBkaXZpc2lvbnMgLyAyO1xuXHRcdGNvbnN0IHN0ZXAgPSBzaXplIC8gZGl2aXNpb25zO1xuXHRcdGNvbnN0IGhhbGZTaXplID0gc2l6ZSAvIDI7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdLCBjb2xvcnMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaiA9IDAsIGsgPSAtIGhhbGZTaXplOyBpIDw9IGRpdmlzaW9uczsgaSArKywgayArPSBzdGVwICkge1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCAtIGhhbGZTaXplLCAwLCBrLCBoYWxmU2l6ZSwgMCwgayApO1xuXHRcdFx0dmVydGljZXMucHVzaCggaywgMCwgLSBoYWxmU2l6ZSwgaywgMCwgaGFsZlNpemUgKTtcblxuXHRcdFx0Y29uc3QgY29sb3IgPSBpID09PSBjZW50ZXIgPyBjb2xvcjEgOiBjb2xvcjI7XG5cblx0XHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cdFx0XHRjb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzO1xuXHRcdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblx0XHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiB0cnVlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnR3JpZEhlbHBlcic7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBHcmlkSGVscGVyIH07XG4iLCJpbXBvcnQgeyBMaW5lU2VnbWVudHMgfSBmcm9tICcuLi9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyc7XG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vbWF0aC9Db2xvci5qcyc7XG5cbmNsYXNzIFBvbGFyR3JpZEhlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEwLCBzZWN0b3JzID0gMTYsIHJpbmdzID0gOCwgZGl2aXNpb25zID0gNjQsIGNvbG9yMSA9IDB4NDQ0NDQ0LCBjb2xvcjIgPSAweDg4ODg4OCApIHtcblxuXHRcdGNvbG9yMSA9IG5ldyBDb2xvciggY29sb3IxICk7XG5cdFx0Y29sb3IyID0gbmV3IENvbG9yKCBjb2xvcjIgKTtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3QgY29sb3JzID0gW107XG5cblx0XHQvLyBjcmVhdGUgdGhlIHNlY3RvcnNcblxuXHRcdGlmICggc2VjdG9ycyA+IDEgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNlY3RvcnM7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdiA9ICggaSAvIHNlY3RvcnMgKSAqICggTWF0aC5QSSAqIDIgKTtcblxuXHRcdFx0XHRjb25zdCB4ID0gTWF0aC5zaW4oIHYgKSAqIHJhZGl1cztcblx0XHRcdFx0Y29uc3QgeiA9IE1hdGguY29zKCB2ICkgKiByYWRpdXM7XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XG5cblx0XHRcdFx0Y29uc3QgY29sb3IgPSAoIGkgJiAxICkgPyBjb2xvcjEgOiBjb2xvcjI7XG5cblx0XHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblx0XHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY3JlYXRlIHRoZSByaW5nc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcmluZ3M7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGNvbG9yID0gKCBpICYgMSApID8gY29sb3IxIDogY29sb3IyO1xuXG5cdFx0XHRjb25zdCByID0gcmFkaXVzIC0gKCByYWRpdXMgLyByaW5ncyAqIGkgKTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgZGl2aXNpb25zOyBqICsrICkge1xuXG5cdFx0XHRcdC8vIGZpcnN0IHZlcnRleFxuXG5cdFx0XHRcdGxldCB2ID0gKCBqIC8gZGl2aXNpb25zICkgKiAoIE1hdGguUEkgKiAyICk7XG5cblx0XHRcdFx0bGV0IHggPSBNYXRoLnNpbiggdiApICogcjtcblx0XHRcdFx0bGV0IHogPSBNYXRoLmNvcyggdiApICogcjtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XG5cdFx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRcdFx0Ly8gc2Vjb25kIHZlcnRleFxuXG5cdFx0XHRcdHYgPSAoICggaiArIDEgKSAvIGRpdmlzaW9ucyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0XHRcdHggPSBNYXRoLnNpbiggdiApICogcjtcblx0XHRcdFx0eiA9IE1hdGguY29zKCB2ICkgKiByO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIDAsIHogKTtcblx0XHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogdHJ1ZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BvbGFyR3JpZEhlbHBlcic7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBQb2xhckdyaWRIZWxwZXIgfTtcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tICcuLi9jb3JlL09iamVjdDNELmpzJztcbmltcG9ydCB7IExpbmUgfSBmcm9tICcuLi9vYmplY3RzL0xpbmUuanMnO1xuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9CdWZmZXJHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XG5cbmNvbnN0IF92MSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgRGlyZWN0aW9uYWxMaWdodEhlbHBlciBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggbGlnaHQsIHNpemUsIGNvbG9yICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMubGlnaHQgPSBsaWdodDtcblxuXHRcdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0XHR0aGlzLnR5cGUgPSAnRGlyZWN0aW9uYWxMaWdodEhlbHBlcic7XG5cblx0XHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHNpemUgPSAxO1xuXG5cdFx0bGV0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggW1xuXHRcdFx0LSBzaXplLCBzaXplLCAwLFxuXHRcdFx0c2l6ZSwgc2l6ZSwgMCxcblx0XHRcdHNpemUsIC0gc2l6ZSwgMCxcblx0XHRcdC0gc2l6ZSwgLSBzaXplLCAwLFxuXHRcdFx0LSBzaXplLCBzaXplLCAwXG5cdFx0XSwgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBmb2c6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHR0aGlzLmxpZ2h0UGxhbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdFx0dGhpcy5hZGQoIHRoaXMubGlnaHRQbGFuZSApO1xuXG5cdFx0Z2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbIDAsIDAsIDAsIDAsIDAsIDEgXSwgMyApICk7XG5cblx0XHR0aGlzLnRhcmdldExpbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdFx0dGhpcy5hZGQoIHRoaXMudGFyZ2V0TGluZSApO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMubGlnaHRQbGFuZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHR0aGlzLnRhcmdldExpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdHVwZGF0ZSgpIHtcblxuXHRcdHRoaXMubGlnaHQudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cdFx0dGhpcy5saWdodC50YXJnZXQudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRfdjEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0X3YyLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRfdjMuc3ViVmVjdG9ycyggX3YyLCBfdjEgKTtcblxuXHRcdHRoaXMubGlnaHRQbGFuZS5sb29rQXQoIF92MiApO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblx0XHRcdHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cdFx0XHR0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy50YXJnZXRMaW5lLmxvb2tBdCggX3YyICk7XG5cdFx0dGhpcy50YXJnZXRMaW5lLnNjYWxlLnogPSBfdjMubGVuZ3RoKCk7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgRGlyZWN0aW9uYWxMaWdodEhlbHBlciB9O1xuIiwiaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSAnLi4vY2FtZXJhcy9DYW1lcmEuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBMaW5lU2VnbWVudHMgfSBmcm9tICcuLi9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uL21hdGgvQ29sb3IuanMnO1xuaW1wb3J0IHsgTGluZUJhc2ljTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvTGluZUJhc2ljTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XG5cbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfY2FtZXJhID0gLypAX19QVVJFX18qLyBuZXcgQ2FtZXJhKCk7XG5cbi8qKlxuICpcdC0gc2hvd3MgZnJ1c3R1bSwgbGluZSBvZiBzaWdodCBhbmQgdXAgb2YgdGhlIGNhbWVyYVxuICpcdC0gc3VpdGFibGUgZm9yIGZhc3QgdXBkYXRlc1xuICogXHQtIGJhc2VkIG9uIGZydXN0dW0gdmlzdWFsaXphdGlvbiBpbiBsaWdodGdsLmpzIHNoYWRvd21hcCBleGFtcGxlXG4gKlx0XHRodHRwczovL2dpdGh1Yi5jb20vZXZhbncvbGlnaHRnbC5qcy9ibG9iL21hc3Rlci90ZXN0cy9zaGFkb3dtYXAuaHRtbFxuICovXG5cbmNsYXNzIENhbWVyYUhlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0Y29uc3RydWN0b3IoIGNhbWVyYSApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZmZmLCB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3QgY29sb3JzID0gW107XG5cblx0XHRjb25zdCBwb2ludE1hcCA9IHt9O1xuXG5cdFx0Ly8gbmVhclxuXG5cdFx0YWRkTGluZSggJ24xJywgJ24yJyApO1xuXHRcdGFkZExpbmUoICduMicsICduNCcgKTtcblx0XHRhZGRMaW5lKCAnbjQnLCAnbjMnICk7XG5cdFx0YWRkTGluZSggJ24zJywgJ24xJyApO1xuXG5cdFx0Ly8gZmFyXG5cblx0XHRhZGRMaW5lKCAnZjEnLCAnZjInICk7XG5cdFx0YWRkTGluZSggJ2YyJywgJ2Y0JyApO1xuXHRcdGFkZExpbmUoICdmNCcsICdmMycgKTtcblx0XHRhZGRMaW5lKCAnZjMnLCAnZjEnICk7XG5cblx0XHQvLyBzaWRlc1xuXG5cdFx0YWRkTGluZSggJ24xJywgJ2YxJyApO1xuXHRcdGFkZExpbmUoICduMicsICdmMicgKTtcblx0XHRhZGRMaW5lKCAnbjMnLCAnZjMnICk7XG5cdFx0YWRkTGluZSggJ240JywgJ2Y0JyApO1xuXG5cdFx0Ly8gY29uZVxuXG5cdFx0YWRkTGluZSggJ3AnLCAnbjEnICk7XG5cdFx0YWRkTGluZSggJ3AnLCAnbjInICk7XG5cdFx0YWRkTGluZSggJ3AnLCAnbjMnICk7XG5cdFx0YWRkTGluZSggJ3AnLCAnbjQnICk7XG5cblx0XHQvLyB1cFxuXG5cdFx0YWRkTGluZSggJ3UxJywgJ3UyJyApO1xuXHRcdGFkZExpbmUoICd1MicsICd1MycgKTtcblx0XHRhZGRMaW5lKCAndTMnLCAndTEnICk7XG5cblx0XHQvLyB0YXJnZXRcblxuXHRcdGFkZExpbmUoICdjJywgJ3QnICk7XG5cdFx0YWRkTGluZSggJ3AnLCAnYycgKTtcblxuXHRcdC8vIGNyb3NzXG5cblx0XHRhZGRMaW5lKCAnY24xJywgJ2NuMicgKTtcblx0XHRhZGRMaW5lKCAnY24zJywgJ2NuNCcgKTtcblxuXHRcdGFkZExpbmUoICdjZjEnLCAnY2YyJyApO1xuXHRcdGFkZExpbmUoICdjZjMnLCAnY2Y0JyApO1xuXG5cdFx0ZnVuY3Rpb24gYWRkTGluZSggYSwgYiApIHtcblxuXHRcdFx0YWRkUG9pbnQoIGEgKTtcblx0XHRcdGFkZFBvaW50KCBiICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhZGRQb2ludCggaWQgKSB7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHRcdGNvbG9ycy5wdXNoKCAwLCAwLCAwICk7XG5cblx0XHRcdGlmICggcG9pbnRNYXBbIGlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwb2ludE1hcFsgaWQgXSA9IFtdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHBvaW50TWFwWyBpZCBdLnB1c2goICggdmVydGljZXMubGVuZ3RoIC8gMyApIC0gMSApO1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2FtZXJhSGVscGVyJztcblxuXHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXHRcdGlmICggdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCApIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdHRoaXMubWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkO1xuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5wb2ludE1hcCA9IHBvaW50TWFwO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdC8vIGNvbG9yc1xuXG5cdFx0Y29uc3QgY29sb3JGcnVzdHVtID0gbmV3IENvbG9yKCAweGZmYWEwMCApO1xuXHRcdGNvbnN0IGNvbG9yQ29uZSA9IG5ldyBDb2xvciggMHhmZjAwMDAgKTtcblx0XHRjb25zdCBjb2xvclVwID0gbmV3IENvbG9yKCAweDAwYWFmZiApO1xuXHRcdGNvbnN0IGNvbG9yVGFyZ2V0ID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXHRcdGNvbnN0IGNvbG9yQ3Jvc3MgPSBuZXcgQ29sb3IoIDB4MzMzMzMzICk7XG5cblx0XHR0aGlzLnNldENvbG9ycyggY29sb3JGcnVzdHVtLCBjb2xvckNvbmUsIGNvbG9yVXAsIGNvbG9yVGFyZ2V0LCBjb2xvckNyb3NzICk7XG5cblx0fVxuXG5cdHNldENvbG9ycyggZnJ1c3R1bSwgY29uZSwgdXAsIHRhcmdldCwgY3Jvc3MgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRjb25zdCBjb2xvckF0dHJpYnV0ZSA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ2NvbG9yJyApO1xuXG5cdFx0Ly8gbmVhclxuXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAwLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuMSwgbjJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDIsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IC8vIG4yLCBuNFxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggNCwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDUsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgLy8gbjQsIG4zXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA2LCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggNywgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuMywgbjFcblxuXHRcdC8vIGZhclxuXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA4LCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggOSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBmMSwgZjJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDEwLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTEsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgLy8gZjIsIGY0XG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxMiwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDEzLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IC8vIGY0LCBmM1xuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTQsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxNSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBmMywgZjFcblxuXHRcdC8vIHNpZGVzXG5cblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDE2LCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTcsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgLy8gbjEsIGYxXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxOCwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDE5LCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IC8vIG4yLCBmMlxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjAsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAyMSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuMywgZjNcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDIyLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjMsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgLy8gbjQsIGY0XG5cblx0XHQvLyBjb25lXG5cblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDI0LCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjUsIGNvbmUuciwgY29uZS5nLCBjb25lLmIgKTsgLy8gcCwgbjFcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDI2LCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjcsIGNvbmUuciwgY29uZS5nLCBjb25lLmIgKTsgLy8gcCwgbjJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDI4LCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjksIGNvbmUuciwgY29uZS5nLCBjb25lLmIgKTsgLy8gcCwgbjNcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDMwLCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMzEsIGNvbmUuciwgY29uZS5nLCBjb25lLmIgKTsgLy8gcCwgbjRcblxuXHRcdC8vIHVwXG5cblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDMyLCB1cC5yLCB1cC5nLCB1cC5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMzMsIHVwLnIsIHVwLmcsIHVwLmIgKTsgLy8gdTEsIHUyXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzNCwgdXAuciwgdXAuZywgdXAuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDM1LCB1cC5yLCB1cC5nLCB1cC5iICk7IC8vIHUyLCB1M1xuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMzYsIHVwLnIsIHVwLmcsIHVwLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzNywgdXAuciwgdXAuZywgdXAuYiApOyAvLyB1MywgdTFcblxuXHRcdC8vIHRhcmdldFxuXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzOCwgdGFyZ2V0LnIsIHRhcmdldC5nLCB0YXJnZXQuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDM5LCB0YXJnZXQuciwgdGFyZ2V0LmcsIHRhcmdldC5iICk7IC8vIGMsIHRcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDQwLCBjcm9zcy5yLCBjcm9zcy5nLCBjcm9zcy5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggNDEsIGNyb3NzLnIsIGNyb3NzLmcsIGNyb3NzLmIgKTsgLy8gcCwgY1xuXG5cdFx0Ly8gY3Jvc3NcblxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggNDIsIGNyb3NzLnIsIGNyb3NzLmcsIGNyb3NzLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0MywgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyAvLyBjbjEsIGNuMlxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggNDQsIGNyb3NzLnIsIGNyb3NzLmcsIGNyb3NzLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0NSwgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyAvLyBjbjMsIGNuNFxuXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0NiwgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDQ3LCBjcm9zcy5yLCBjcm9zcy5nLCBjcm9zcy5iICk7IC8vIGNmMSwgY2YyXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0OCwgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDQ5LCBjcm9zcy5yLCBjcm9zcy5nLCBjcm9zcy5iICk7IC8vIGNmMywgY2Y0XG5cblx0XHRjb2xvckF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdHVwZGF0ZSgpIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBwb2ludE1hcCA9IHRoaXMucG9pbnRNYXA7XG5cblx0XHRjb25zdCB3ID0gMSwgaCA9IDE7XG5cblx0XHQvLyB3ZSBuZWVkIGp1c3QgY2FtZXJhIHByb2plY3Rpb24gbWF0cml4IGludmVyc2Vcblx0XHQvLyB3b3JsZCBtYXRyaXggbXVzdCBiZSBpZGVudGl0eVxuXG5cdFx0X2NhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0Ly8gY2VudGVyIC8gdGFyZ2V0XG5cblx0XHRzZXRQb2ludCggJ2MnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIDAsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndCcsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgMCwgMSApO1xuXG5cdFx0Ly8gbmVhclxuXG5cdFx0c2V0UG9pbnQoICduMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAtIGgsIC0gMSApO1xuXHRcdHNldFBvaW50KCAnbjInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCBoLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ240JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCBoLCAtIDEgKTtcblxuXHRcdC8vIGZhclxuXG5cdFx0c2V0UG9pbnQoICdmMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAtIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2YyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAtIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2YzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2Y0JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCBoLCAxICk7XG5cblx0XHQvLyB1cFxuXG5cdFx0c2V0UG9pbnQoICd1MScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdyAqIDAuNywgaCAqIDEuMSwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICd1MicsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3ICogMC43LCBoICogMS4xLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ3UzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoICogMiwgLSAxICk7XG5cblx0XHQvLyBjcm9zc1xuXG5cdFx0c2V0UG9pbnQoICdjZjEnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0gdywgMCwgMSApO1xuXHRcdHNldFBvaW50KCAnY2YyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAwLCAxICk7XG5cdFx0c2V0UG9pbnQoICdjZjMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIC0gaCwgMSApO1xuXHRcdHNldFBvaW50KCAnY2Y0JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoLCAxICk7XG5cblx0XHRzZXRQb2ludCggJ2NuMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAwLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ2NuMicsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdywgMCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICdjbjMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICdjbjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIGgsIC0gMSApO1xuXG5cdFx0Z2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICkubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG59XG5cblxuZnVuY3Rpb24gc2V0UG9pbnQoIHBvaW50LCBwb2ludE1hcCwgZ2VvbWV0cnksIGNhbWVyYSwgeCwgeSwgeiApIHtcblxuXHRfdmVjdG9yLnNldCggeCwgeSwgeiApLnVucHJvamVjdCggY2FtZXJhICk7XG5cblx0Y29uc3QgcG9pbnRzID0gcG9pbnRNYXBbIHBvaW50IF07XG5cblx0aWYgKCBwb2ludHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0cG9zaXRpb24uc2V0WFlaKCBwb2ludHNbIGkgXSwgX3ZlY3Rvci54LCBfdmVjdG9yLnksIF92ZWN0b3IueiApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgeyBDYW1lcmFIZWxwZXIgfTtcbiIsImltcG9ydCB7IEJveDMgfSBmcm9tICcuLi9tYXRoL0JveDMuanMnO1xuaW1wb3J0IHsgTGluZVNlZ21lbnRzIH0gZnJvbSAnLi4vb2JqZWN0cy9MaW5lU2VnbWVudHMuanMnO1xuaW1wb3J0IHsgTGluZUJhc2ljTWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvTGluZUJhc2ljTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcblxuY29uc3QgX2JveCA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcblxuY2xhc3MgQm94SGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcblxuXHRjb25zdHJ1Y3Rvciggb2JqZWN0LCBjb2xvciA9IDB4ZmZmZjAwICkge1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSggWyAwLCAxLCAxLCAyLCAyLCAzLCAzLCAwLCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA0LCAwLCA0LCAxLCA1LCAyLCA2LCAzLCA3IF0gKTtcblx0XHRjb25zdCBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KCA4ICogMyApO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeS5zZXRJbmRleCggbmV3IEJ1ZmZlckF0dHJpYnV0ZSggaW5kaWNlcywgMSApICk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKTtcblxuXHRcdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXHRcdHRoaXMudHlwZSA9ICdCb3hIZWxwZXInO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHR1cGRhdGUoIG9iamVjdCApIHtcblxuXHRcdGlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveEhlbHBlcjogLnVwZGF0ZSgpIGhhcyBubyBsb25nZXIgYXJndW1lbnRzLicgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5vYmplY3QgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2JveC5zZXRGcm9tT2JqZWN0KCB0aGlzLm9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBfYm94LmlzRW1wdHkoKSApIHJldHVybjtcblxuXHRcdGNvbnN0IG1pbiA9IF9ib3gubWluO1xuXHRcdGNvbnN0IG1heCA9IF9ib3gubWF4O1xuXG5cdFx0Lypcblx0XHRcdDVfX19fNFxuXHRcdDEvX19fMC98XG5cdFx0fCA2X198Xzdcblx0XHQyL19fXzMvXG5cblx0XHQwOiBtYXgueCwgbWF4LnksIG1heC56XG5cdFx0MTogbWluLngsIG1heC55LCBtYXguelxuXHRcdDI6IG1pbi54LCBtaW4ueSwgbWF4Lnpcblx0XHQzOiBtYXgueCwgbWluLnksIG1heC56XG5cdFx0NDogbWF4LngsIG1heC55LCBtaW4uelxuXHRcdDU6IG1pbi54LCBtYXgueSwgbWluLnpcblx0XHQ2OiBtaW4ueCwgbWluLnksIG1pbi56XG5cdFx0NzogbWF4LngsIG1pbi55LCBtaW4uelxuXHRcdCovXG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRjb25zdCBhcnJheSA9IHBvc2l0aW9uLmFycmF5O1xuXG5cdFx0YXJyYXlbIDAgXSA9IG1heC54OyBhcnJheVsgMSBdID0gbWF4Lnk7IGFycmF5WyAyIF0gPSBtYXguejtcblx0XHRhcnJheVsgMyBdID0gbWluLng7IGFycmF5WyA0IF0gPSBtYXgueTsgYXJyYXlbIDUgXSA9IG1heC56O1xuXHRcdGFycmF5WyA2IF0gPSBtaW4ueDsgYXJyYXlbIDcgXSA9IG1pbi55OyBhcnJheVsgOCBdID0gbWF4Lno7XG5cdFx0YXJyYXlbIDkgXSA9IG1heC54OyBhcnJheVsgMTAgXSA9IG1pbi55OyBhcnJheVsgMTEgXSA9IG1heC56O1xuXHRcdGFycmF5WyAxMiBdID0gbWF4Lng7IGFycmF5WyAxMyBdID0gbWF4Lnk7IGFycmF5WyAxNCBdID0gbWluLno7XG5cdFx0YXJyYXlbIDE1IF0gPSBtaW4ueDsgYXJyYXlbIDE2IF0gPSBtYXgueTsgYXJyYXlbIDE3IF0gPSBtaW4uejtcblx0XHRhcnJheVsgMTggXSA9IG1pbi54OyBhcnJheVsgMTkgXSA9IG1pbi55OyBhcnJheVsgMjAgXSA9IG1pbi56O1xuXHRcdGFycmF5WyAyMSBdID0gbWF4Lng7IGFycmF5WyAyMiBdID0gbWluLnk7IGFycmF5WyAyMyBdID0gbWluLno7XG5cblx0XHRwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdH1cblxuXHRzZXRGcm9tT2JqZWN0KCBvYmplY3QgKSB7XG5cblx0XHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMub2JqZWN0ID0gc291cmNlLm9iamVjdDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgQm94SGVscGVyIH07XG4iLCJpbXBvcnQgeyBMaW5lU2VnbWVudHMgfSBmcm9tICcuLi9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyc7XG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBCdWZmZXJBdHRyaWJ1dGUsIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuXG5jbGFzcyBCb3gzSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcblxuXHRjb25zdHJ1Y3RvciggYm94LCBjb2xvciA9IDB4ZmZmZjAwICkge1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSggWyAwLCAxLCAxLCAyLCAyLCAzLCAzLCAwLCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA0LCAwLCA0LCAxLCA1LCAyLCA2LCAzLCA3IF0gKTtcblxuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IFsgMSwgMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAxLCAtIDEsIC0gMSBdO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTtcblxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXG5cdFx0dGhpcy5ib3ggPSBib3g7XG5cblx0XHR0aGlzLnR5cGUgPSAnQm94M0hlbHBlcic7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRjb25zdCBib3ggPSB0aGlzLmJveDtcblxuXHRcdGlmICggYm94LmlzRW1wdHkoKSApIHJldHVybjtcblxuXHRcdGJveC5nZXRDZW50ZXIoIHRoaXMucG9zaXRpb24gKTtcblxuXHRcdGJveC5nZXRTaXplKCB0aGlzLnNjYWxlICk7XG5cblx0XHR0aGlzLnNjYWxlLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEJveDNIZWxwZXIgfTtcbiIsImltcG9ydCB7IExpbmUgfSBmcm9tICcuLi9vYmplY3RzL0xpbmUuanMnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL29iamVjdHMvTWVzaC5qcyc7XG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9MaW5lQmFzaWNNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBNZXNoQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9NZXNoQmFzaWNNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcblxuY2xhc3MgUGxhbmVIZWxwZXIgZXh0ZW5kcyBMaW5lIHtcblxuXHRjb25zdHJ1Y3RvciggcGxhbmUsIHNpemUgPSAxLCBoZXggPSAweGZmZmYwMCApIHtcblxuXHRcdGNvbnN0IGNvbG9yID0gaGV4O1xuXG5cdFx0Y29uc3QgcG9zaXRpb25zID0gWyAxLCAtIDEsIDAsIC0gMSwgMSwgMCwgLSAxLCAtIDEsIDAsIDEsIDEsIDAsIC0gMSwgMSwgMCwgLSAxLCAtIDEsIDAsIDEsIC0gMSwgMCwgMSwgMSwgMCBdO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXHRcdGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdQbGFuZUhlbHBlcic7XG5cblx0XHR0aGlzLnBsYW5lID0gcGxhbmU7XG5cblx0XHR0aGlzLnNpemUgPSBzaXplO1xuXG5cdFx0Y29uc3QgcG9zaXRpb25zMiA9IFsgMSwgMSwgMCwgLSAxLCAxLCAwLCAtIDEsIC0gMSwgMCwgMSwgMSwgMCwgLSAxLCAtIDEsIDAsIDEsIC0gMSwgMCBdO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkyLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uczIsIDMgKSApO1xuXHRcdGdlb21ldHJ5Mi5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdHRoaXMuYWRkKCBuZXcgTWVzaCggZ2VvbWV0cnkyLCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCBvcGFjaXR5OiAwLjIsIHRyYW5zcGFyZW50OiB0cnVlLCBkZXB0aFdyaXRlOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApICkgKTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdHRoaXMuc2NhbGUuc2V0KCAwLjUgKiB0aGlzLnNpemUsIDAuNSAqIHRoaXMuc2l6ZSwgMSApO1xuXG5cdFx0dGhpcy5sb29rQXQoIHRoaXMucGxhbmUubm9ybWFsICk7XG5cblx0XHR0aGlzLnRyYW5zbGF0ZVooIC0gdGhpcy5wbGFuZS5jb25zdGFudCApO1xuXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHR0aGlzLmNoaWxkcmVuWyAwIF0uZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFBsYW5lSGVscGVyIH07XG4iLCJpbXBvcnQgeyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9CdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vY29yZS9PYmplY3QzRC5qcyc7XG5pbXBvcnQgeyBDeWxpbmRlckdlb21ldHJ5IH0gZnJvbSAnLi4vZ2VvbWV0cmllcy9DeWxpbmRlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IE1lc2hCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL01lc2hCYXNpY01hdGVyaWFsLmpzJztcbmltcG9ydCB7IExpbmVCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL0xpbmVCYXNpY01hdGVyaWFsLmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi9vYmplY3RzL01lc2guanMnO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gJy4uL29iamVjdHMvTGluZS5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vbWF0aC9WZWN0b3IzLmpzJztcblxuY29uc3QgX2F4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5sZXQgX2xpbmVHZW9tZXRyeSwgX2NvbmVHZW9tZXRyeTtcblxuY2xhc3MgQXJyb3dIZWxwZXIgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Ly8gZGlyIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdGNvbnN0cnVjdG9yKCBkaXIgPSBuZXcgVmVjdG9yMyggMCwgMCwgMSApLCBvcmlnaW4gPSBuZXcgVmVjdG9yMyggMCwgMCwgMCApLCBsZW5ndGggPSAxLCBjb2xvciA9IDB4ZmZmZjAwLCBoZWFkTGVuZ3RoID0gbGVuZ3RoICogMC4yLCBoZWFkV2lkdGggPSBoZWFkTGVuZ3RoICogMC4yICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdBcnJvd0hlbHBlcic7XG5cblx0XHRpZiAoIF9saW5lR2VvbWV0cnkgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2xpbmVHZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdFx0X2xpbmVHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbIDAsIDAsIDAsIDAsIDEsIDAgXSwgMyApICk7XG5cblx0XHRcdF9jb25lR2VvbWV0cnkgPSBuZXcgQ3lsaW5kZXJHZW9tZXRyeSggMCwgMC41LCAxLCA1LCAxICk7XG5cdFx0XHRfY29uZUdlb21ldHJ5LnRyYW5zbGF0ZSggMCwgLSAwLjUsIDAgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMucG9zaXRpb24uY29weSggb3JpZ2luICk7XG5cblx0XHR0aGlzLmxpbmUgPSBuZXcgTGluZSggX2xpbmVHZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgdG9uZU1hcHBlZDogZmFsc2UgfSApICk7XG5cdFx0dGhpcy5saW5lLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHR0aGlzLmFkZCggdGhpcy5saW5lICk7XG5cblx0XHR0aGlzLmNvbmUgPSBuZXcgTWVzaCggX2NvbmVHZW9tZXRyeSwgbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgdG9uZU1hcHBlZDogZmFsc2UgfSApICk7XG5cdFx0dGhpcy5jb25lLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHR0aGlzLmFkZCggdGhpcy5jb25lICk7XG5cblx0XHR0aGlzLnNldERpcmVjdGlvbiggZGlyICk7XG5cdFx0dGhpcy5zZXRMZW5ndGgoIGxlbmd0aCwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICk7XG5cblx0fVxuXG5cdHNldERpcmVjdGlvbiggZGlyICkge1xuXG5cdFx0Ly8gZGlyIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0aWYgKCBkaXIueSA+IDAuOTk5OTkgKSB7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5zZXQoIDAsIDAsIDAsIDEgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGRpci55IDwgLSAwLjk5OTk5ICkge1xuXG5cdFx0XHR0aGlzLnF1YXRlcm5pb24uc2V0KCAxLCAwLCAwLCAwICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfYXhpcy5zZXQoIGRpci56LCAwLCAtIGRpci54ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdGNvbnN0IHJhZGlhbnMgPSBNYXRoLmFjb3MoIGRpci55ICk7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBfYXhpcywgcmFkaWFucyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXRMZW5ndGgoIGxlbmd0aCwgaGVhZExlbmd0aCA9IGxlbmd0aCAqIDAuMiwgaGVhZFdpZHRoID0gaGVhZExlbmd0aCAqIDAuMiApIHtcblxuXHRcdHRoaXMubGluZS5zY2FsZS5zZXQoIDEsIE1hdGgubWF4KCAwLjAwMDEsIGxlbmd0aCAtIGhlYWRMZW5ndGggKSwgMSApOyAvLyBzZWUgIzE3NDU4XG5cdFx0dGhpcy5saW5lLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy5jb25lLnNjYWxlLnNldCggaGVhZFdpZHRoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKTtcblx0XHR0aGlzLmNvbmUucG9zaXRpb24ueSA9IGxlbmd0aDtcblx0XHR0aGlzLmNvbmUudXBkYXRlTWF0cml4KCk7XG5cblx0fVxuXG5cdHNldENvbG9yKCBjb2xvciApIHtcblxuXHRcdHRoaXMubGluZS5tYXRlcmlhbC5jb2xvci5zZXQoIGNvbG9yICk7XG5cdFx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldCggY29sb3IgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCBmYWxzZSApO1xuXG5cdFx0dGhpcy5saW5lLmNvcHkoIHNvdXJjZS5saW5lICk7XG5cdFx0dGhpcy5jb25lLmNvcHkoIHNvdXJjZS5jb25lICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMubGluZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5saW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHR0aGlzLmNvbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMuY29uZS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgQXJyb3dIZWxwZXIgfTtcbiIsImltcG9ydCB7IExpbmVTZWdtZW50cyB9IGZyb20gJy4uL29iamVjdHMvTGluZVNlZ21lbnRzLmpzJztcbmltcG9ydCB7IExpbmVCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL0xpbmVCYXNpY01hdGVyaWFsLmpzJztcbmltcG9ydCB7IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0J1ZmZlckF0dHJpYnV0ZS5qcyc7XG5pbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tYXRoL0NvbG9yLmpzJztcblxuY2xhc3MgQXhlc0hlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0Y29uc3RydWN0b3IoIHNpemUgPSAxICkge1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXG5cdFx0XHQwLCAwLCAwLFx0c2l6ZSwgMCwgMCxcblx0XHRcdDAsIDAsIDAsXHQwLCBzaXplLCAwLFxuXHRcdFx0MCwgMCwgMCxcdDAsIDAsIHNpemVcblx0XHRdO1xuXG5cdFx0Y29uc3QgY29sb3JzID0gW1xuXHRcdFx0MSwgMCwgMCxcdDEsIDAuNiwgMCxcblx0XHRcdDAsIDEsIDAsXHQwLjYsIDEsIDAsXG5cdFx0XHQwLCAwLCAxLFx0MCwgMC42LCAxXG5cdFx0XTtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdBeGVzSGVscGVyJztcblxuXHR9XG5cblx0c2V0Q29sb3JzKCB4QXhpc0NvbG9yLCB5QXhpc0NvbG9yLCB6QXhpc0NvbG9yICkge1xuXG5cdFx0Y29uc3QgY29sb3IgPSBuZXcgQ29sb3IoKTtcblx0XHRjb25zdCBhcnJheSA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5hcnJheTtcblxuXHRcdGNvbG9yLnNldCggeEF4aXNDb2xvciApO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCAwICk7XG5cdFx0Y29sb3IudG9BcnJheSggYXJyYXksIDMgKTtcblxuXHRcdGNvbG9yLnNldCggeUF4aXNDb2xvciApO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCA2ICk7XG5cdFx0Y29sb3IudG9BcnJheSggYXJyYXksIDkgKTtcblxuXHRcdGNvbG9yLnNldCggekF4aXNDb2xvciApO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCAxMiApO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCAxNSApO1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgQXhlc0hlbHBlciB9O1xuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yLmpzJztcbmltcG9ydCB7IFBhdGggfSBmcm9tICcuL1BhdGguanMnO1xuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuL1NoYXBlLmpzJztcbmltcG9ydCB7IFNoYXBlVXRpbHMgfSBmcm9tICcuLi9TaGFwZVV0aWxzLmpzJztcblxuY2xhc3MgU2hhcGVQYXRoIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMudHlwZSA9ICdTaGFwZVBhdGgnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdFx0dGhpcy5zdWJQYXRocyA9IFtdO1xuXHRcdHRoaXMuY3VycmVudFBhdGggPSBudWxsO1xuXG5cdH1cblxuXHRtb3ZlVG8oIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoID0gbmV3IFBhdGgoKTtcblx0XHR0aGlzLnN1YlBhdGhzLnB1c2goIHRoaXMuY3VycmVudFBhdGggKTtcblx0XHR0aGlzLmN1cnJlbnRQYXRoLm1vdmVUbyggeCwgeSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxpbmVUbyggeCwgeSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGgubGluZVRvKCB4LCB5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5xdWFkcmF0aWNDdXJ2ZVRvKCBhQ1B4LCBhQ1B5LCBhWCwgYVkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRiZXppZXJDdXJ2ZVRvKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5iZXppZXJDdXJ2ZVRvKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3BsaW5lVGhydSggcHRzICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5zcGxpbmVUaHJ1KCBwdHMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b1NoYXBlcyggaXNDQ1cgKSB7XG5cblx0XHRmdW5jdGlvbiB0b1NoYXBlc05vSG9sZXMoIGluU3VicGF0aHMgKSB7XG5cblx0XHRcdGNvbnN0IHNoYXBlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBpblN1YnBhdGhzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdG1wUGF0aCA9IGluU3VicGF0aHNbIGkgXTtcblxuXHRcdFx0XHRjb25zdCB0bXBTaGFwZSA9IG5ldyBTaGFwZSgpO1xuXHRcdFx0XHR0bXBTaGFwZS5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcblxuXHRcdFx0XHRzaGFwZXMucHVzaCggdG1wU2hhcGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaXNQb2ludEluc2lkZVBvbHlnb24oIGluUHQsIGluUG9seWdvbiApIHtcblxuXHRcdFx0Y29uc3QgcG9seUxlbiA9IGluUG9seWdvbi5sZW5ndGg7XG5cblx0XHRcdC8vIGluUHQgb24gcG9seWdvbiBjb250b3VyID0+IGltbWVkaWF0ZSBzdWNjZXNzICAgIG9yXG5cdFx0XHQvLyB0b2dnbGluZyBvZiBpbnNpZGUvb3V0c2lkZSBhdCBldmVyeSBzaW5nbGUhIGludGVyc2VjdGlvbiBwb2ludCBvZiBhbiBlZGdlXG5cdFx0XHQvLyAgd2l0aCB0aGUgaG9yaXpvbnRhbCBsaW5lIHRocm91Z2ggaW5QdCwgbGVmdCBvZiBpblB0XG5cdFx0XHQvLyAgbm90IGNvdW50aW5nIGxvd2VyWSBlbmRwb2ludHMgb2YgZWRnZXMgYW5kIHdob2xlIGVkZ2VzIG9uIHRoYXQgbGluZVxuXHRcdFx0bGV0IGluc2lkZSA9IGZhbHNlO1xuXHRcdFx0Zm9yICggbGV0IHAgPSBwb2x5TGVuIC0gMSwgcSA9IDA7IHEgPCBwb2x5TGVuOyBwID0gcSArKyApIHtcblxuXHRcdFx0XHRsZXQgZWRnZUxvd1B0ID0gaW5Qb2x5Z29uWyBwIF07XG5cdFx0XHRcdGxldCBlZGdlSGlnaFB0ID0gaW5Qb2x5Z29uWyBxIF07XG5cblx0XHRcdFx0bGV0IGVkZ2VEeCA9IGVkZ2VIaWdoUHQueCAtIGVkZ2VMb3dQdC54O1xuXHRcdFx0XHRsZXQgZWRnZUR5ID0gZWRnZUhpZ2hQdC55IC0gZWRnZUxvd1B0Lnk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggZWRnZUR5ICkgPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdC8vIG5vdCBwYXJhbGxlbFxuXHRcdFx0XHRcdGlmICggZWRnZUR5IDwgMCApIHtcblxuXHRcdFx0XHRcdFx0ZWRnZUxvd1B0ID0gaW5Qb2x5Z29uWyBxIF07IGVkZ2VEeCA9IC0gZWRnZUR4O1xuXHRcdFx0XHRcdFx0ZWRnZUhpZ2hQdCA9IGluUG9seWdvblsgcCBdOyBlZGdlRHkgPSAtIGVkZ2VEeTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggKCBpblB0LnkgPCBlZGdlTG93UHQueSApIHx8ICggaW5QdC55ID4gZWRnZUhpZ2hQdC55ICkgKSBcdFx0Y29udGludWU7XG5cblx0XHRcdFx0XHRpZiAoIGluUHQueSA9PT0gZWRnZUxvd1B0LnkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggaW5QdC54ID09PSBlZGdlTG93UHQueCApXHRcdHJldHVyblx0dHJ1ZTtcdFx0Ly8gaW5QdCBpcyBvbiBjb250b3VyID9cblx0XHRcdFx0XHRcdC8vIGNvbnRpbnVlO1x0XHRcdFx0Ly8gbm8gaW50ZXJzZWN0aW9uIG9yIGVkZ2VMb3dQdCA9PiBkb2Vzbid0IGNvdW50ICEhIVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgcGVycEVkZ2UgPSBlZGdlRHkgKiAoIGluUHQueCAtIGVkZ2VMb3dQdC54ICkgLSBlZGdlRHggKiAoIGluUHQueSAtIGVkZ2VMb3dQdC55ICk7XG5cdFx0XHRcdFx0XHRpZiAoIHBlcnBFZGdlID09PSAwIClcdFx0XHRcdHJldHVyblx0dHJ1ZTtcdFx0Ly8gaW5QdCBpcyBvbiBjb250b3VyID9cblx0XHRcdFx0XHRcdGlmICggcGVycEVkZ2UgPCAwICkgXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdGluc2lkZSA9ICEgaW5zaWRlO1x0XHQvLyB0cnVlIGludGVyc2VjdGlvbiBsZWZ0IG9mIGluUHRcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gcGFyYWxsZWwgb3IgY29sbGluZWFyXG5cdFx0XHRcdFx0aWYgKCBpblB0LnkgIT09IGVkZ2VMb3dQdC55ICkgXHRcdGNvbnRpbnVlO1x0XHRcdC8vIHBhcmFsbGVsXG5cdFx0XHRcdFx0Ly8gZWRnZSBsaWVzIG9uIHRoZSBzYW1lIGhvcml6b250YWwgbGluZSBhcyBpblB0XG5cdFx0XHRcdFx0aWYgKCAoICggZWRnZUhpZ2hQdC54IDw9IGluUHQueCApICYmICggaW5QdC54IDw9IGVkZ2VMb3dQdC54ICkgKSB8fFxuXHRcdFx0XHRcdFx0ICggKCBlZGdlTG93UHQueCA8PSBpblB0LnggKSAmJiAoIGluUHQueCA8PSBlZGdlSGlnaFB0LnggKSApIClcdFx0cmV0dXJuXHR0cnVlO1x0Ly8gaW5QdDogUG9pbnQgb24gY29udG91ciAhXG5cdFx0XHRcdFx0Ly8gY29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVyblx0aW5zaWRlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgaXNDbG9ja1dpc2UgPSBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlO1xuXG5cdFx0Y29uc3Qgc3ViUGF0aHMgPSB0aGlzLnN1YlBhdGhzO1xuXHRcdGlmICggc3ViUGF0aHMubGVuZ3RoID09PSAwICkgcmV0dXJuIFtdO1xuXG5cdFx0bGV0IHNvbGlkLCB0bXBQYXRoLCB0bXBTaGFwZTtcblx0XHRjb25zdCBzaGFwZXMgPSBbXTtcblxuXHRcdGlmICggc3ViUGF0aHMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHR0bXBQYXRoID0gc3ViUGF0aHNbIDAgXTtcblx0XHRcdHRtcFNoYXBlID0gbmV3IFNoYXBlKCk7XG5cdFx0XHR0bXBTaGFwZS5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcblx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXHRcdFx0cmV0dXJuIHNoYXBlcztcblxuXHRcdH1cblxuXHRcdGxldCBob2xlc0ZpcnN0ID0gISBpc0Nsb2NrV2lzZSggc3ViUGF0aHNbIDAgXS5nZXRQb2ludHMoKSApO1xuXHRcdGhvbGVzRmlyc3QgPSBpc0NDVyA/ICEgaG9sZXNGaXJzdCA6IGhvbGVzRmlyc3Q7XG5cblx0XHQvLyBjb25zb2xlLmxvZyhcIkhvbGVzIGZpcnN0XCIsIGhvbGVzRmlyc3QpO1xuXG5cdFx0Y29uc3QgYmV0dGVyU2hhcGVIb2xlcyA9IFtdO1xuXHRcdGNvbnN0IG5ld1NoYXBlcyA9IFtdO1xuXHRcdGxldCBuZXdTaGFwZUhvbGVzID0gW107XG5cdFx0bGV0IG1haW5JZHggPSAwO1xuXHRcdGxldCB0bXBQb2ludHM7XG5cblx0XHRuZXdTaGFwZXNbIG1haW5JZHggXSA9IHVuZGVmaW5lZDtcblx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0gPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHN1YlBhdGhzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRtcFBhdGggPSBzdWJQYXRoc1sgaSBdO1xuXHRcdFx0dG1wUG9pbnRzID0gdG1wUGF0aC5nZXRQb2ludHMoKTtcblx0XHRcdHNvbGlkID0gaXNDbG9ja1dpc2UoIHRtcFBvaW50cyApO1xuXHRcdFx0c29saWQgPSBpc0NDVyA/ICEgc29saWQgOiBzb2xpZDtcblxuXHRcdFx0aWYgKCBzb2xpZCApIHtcblxuXHRcdFx0XHRpZiAoICggISBob2xlc0ZpcnN0ICkgJiYgKCBuZXdTaGFwZXNbIG1haW5JZHggXSApIClcdG1haW5JZHggKys7XG5cblx0XHRcdFx0bmV3U2hhcGVzWyBtYWluSWR4IF0gPSB7IHM6IG5ldyBTaGFwZSgpLCBwOiB0bXBQb2ludHMgfTtcblx0XHRcdFx0bmV3U2hhcGVzWyBtYWluSWR4IF0ucy5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcblxuXHRcdFx0XHRpZiAoIGhvbGVzRmlyc3QgKVx0bWFpbklkeCArKztcblx0XHRcdFx0bmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdID0gW107XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnY3cnLCBpKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0ucHVzaCggeyBoOiB0bXBQYXRoLCBwOiB0bXBQb2ludHNbIDAgXSB9ICk7XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnY2N3JywgaSk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIG9ubHkgSG9sZXM/IC0+IHByb2JhYmx5IGFsbCBTaGFwZXMgd2l0aCB3cm9uZyBvcmllbnRhdGlvblxuXHRcdGlmICggISBuZXdTaGFwZXNbIDAgXSApXHRyZXR1cm5cdHRvU2hhcGVzTm9Ib2xlcyggc3ViUGF0aHMgKTtcblxuXG5cdFx0aWYgKCBuZXdTaGFwZXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0bGV0IGFtYmlndW91cyA9IGZhbHNlO1xuXHRcdFx0bGV0IHRvQ2hhbmdlID0gMDtcblxuXHRcdFx0Zm9yICggbGV0IHNJZHggPSAwLCBzTGVuID0gbmV3U2hhcGVzLmxlbmd0aDsgc0lkeCA8IHNMZW47IHNJZHggKysgKSB7XG5cblx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgc0lkeCBdID0gW107XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggbGV0IHNJZHggPSAwLCBzTGVuID0gbmV3U2hhcGVzLmxlbmd0aDsgc0lkeCA8IHNMZW47IHNJZHggKysgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2hvID0gbmV3U2hhcGVIb2xlc1sgc0lkeCBdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBoSWR4ID0gMDsgaElkeCA8IHNoby5sZW5ndGg7IGhJZHggKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBobyA9IHNob1sgaElkeCBdO1xuXHRcdFx0XHRcdGxldCBob2xlX3VuYXNzaWduZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IHMySWR4ID0gMDsgczJJZHggPCBuZXdTaGFwZXMubGVuZ3RoOyBzMklkeCArKyApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBpc1BvaW50SW5zaWRlUG9seWdvbiggaG8ucCwgbmV3U2hhcGVzWyBzMklkeCBdLnAgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHNJZHggIT09IHMySWR4IClcdHRvQ2hhbmdlICsrO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggaG9sZV91bmFzc2lnbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aG9sZV91bmFzc2lnbmVkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgczJJZHggXS5wdXNoKCBobyApO1xuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRhbWJpZ3VvdXMgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBob2xlX3VuYXNzaWduZWQgKSB7XG5cblx0XHRcdFx0XHRcdGJldHRlclNoYXBlSG9sZXNbIHNJZHggXS5wdXNoKCBobyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRvQ2hhbmdlID4gMCAmJiBhbWJpZ3VvdXMgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdG5ld1NoYXBlSG9sZXMgPSBiZXR0ZXJTaGFwZUhvbGVzO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRsZXQgdG1wSG9sZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbmV3U2hhcGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0bXBTaGFwZSA9IG5ld1NoYXBlc1sgaSBdLnM7XG5cdFx0XHRzaGFwZXMucHVzaCggdG1wU2hhcGUgKTtcblx0XHRcdHRtcEhvbGVzID0gbmV3U2hhcGVIb2xlc1sgaSBdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDAsIGpsID0gdG1wSG9sZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0dG1wU2hhcGUuaG9sZXMucHVzaCggdG1wSG9sZXNbIGogXS5oICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vY29uc29sZS5sb2coXCJzaGFwZVwiLCBzaGFwZXMpO1xuXG5cdFx0cmV0dXJuIHNoYXBlcztcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBTaGFwZVBhdGggfTtcbiIsImltcG9ydCB7IFdlYkdMUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi9yZW5kZXJlcnMvV2ViR0xSZW5kZXJUYXJnZXQuanMnO1xuXG5leHBvcnQgY2xhc3MgV2ViR0xNdWx0aXBsZVJlbmRlclRhcmdldHMgZXh0ZW5kcyBXZWJHTFJlbmRlclRhcmdldCB7IC8vIEBkZXByZWNhdGVkLCByMTYyXG5cblx0Y29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgY291bnQgPSAxLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gcjE3Mi4gVXNlIFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0IGFuZCBzZXQgdGhlIFwiY291bnRcIiBwYXJhbWV0ZXIgdG8gZW5hYmxlIE1SVC4nICk7XG5cblx0XHRzdXBlciggd2lkdGgsIGhlaWdodCwgeyAuLi5vcHRpb25zLCBjb3VudCB9ICk7XG5cblx0XHR0aGlzLmlzV2ViR0xNdWx0aXBsZVJlbmRlclRhcmdldHMgPSB0cnVlO1xuXG5cdH1cblxuXHRnZXQgdGV4dHVyZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnRleHR1cmVzO1xuXG5cdH1cblxufVxuIiwiaW1wb3J0IHsgUkVWSVNJT04gfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmV4cG9ydCB7IFdlYkdMQXJyYXlSZW5kZXJUYXJnZXQgfSBmcm9tICcuL3JlbmRlcmVycy9XZWJHTEFycmF5UmVuZGVyVGFyZ2V0LmpzJztcbmV4cG9ydCB7IFdlYkdMM0RSZW5kZXJUYXJnZXQgfSBmcm9tICcuL3JlbmRlcmVycy9XZWJHTDNEUmVuZGVyVGFyZ2V0LmpzJztcbmV4cG9ydCB7IFdlYkdMQ3ViZVJlbmRlclRhcmdldCB9IGZyb20gJy4vcmVuZGVyZXJzL1dlYkdMQ3ViZVJlbmRlclRhcmdldC5qcyc7XG5leHBvcnQgeyBXZWJHTFJlbmRlclRhcmdldCB9IGZyb20gJy4vcmVuZGVyZXJzL1dlYkdMUmVuZGVyVGFyZ2V0LmpzJztcbmV4cG9ydCB7IFdlYkdMUmVuZGVyZXIgfSBmcm9tICcuL3JlbmRlcmVycy9XZWJHTFJlbmRlcmVyLmpzJztcbmV4cG9ydCB7IFNoYWRlckxpYiB9IGZyb20gJy4vcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyTGliLmpzJztcbmV4cG9ydCB7IFVuaWZvcm1zTGliIH0gZnJvbSAnLi9yZW5kZXJlcnMvc2hhZGVycy9Vbmlmb3Jtc0xpYi5qcyc7XG5leHBvcnQgeyBVbmlmb3Jtc1V0aWxzIH0gZnJvbSAnLi9yZW5kZXJlcnMvc2hhZGVycy9Vbmlmb3Jtc1V0aWxzLmpzJztcbmV4cG9ydCB7IFNoYWRlckNodW5rIH0gZnJvbSAnLi9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJDaHVuay5qcyc7XG5leHBvcnQgeyBGb2dFeHAyIH0gZnJvbSAnLi9zY2VuZXMvRm9nRXhwMi5qcyc7XG5leHBvcnQgeyBGb2cgfSBmcm9tICcuL3NjZW5lcy9Gb2cuanMnO1xuZXhwb3J0IHsgU2NlbmUgfSBmcm9tICcuL3NjZW5lcy9TY2VuZS5qcyc7XG5leHBvcnQgeyBTcHJpdGUgfSBmcm9tICcuL29iamVjdHMvU3ByaXRlLmpzJztcbmV4cG9ydCB7IExPRCB9IGZyb20gJy4vb2JqZWN0cy9MT0QuanMnO1xuZXhwb3J0IHsgU2tpbm5lZE1lc2ggfSBmcm9tICcuL29iamVjdHMvU2tpbm5lZE1lc2guanMnO1xuZXhwb3J0IHsgU2tlbGV0b24gfSBmcm9tICcuL29iamVjdHMvU2tlbGV0b24uanMnO1xuZXhwb3J0IHsgQm9uZSB9IGZyb20gJy4vb2JqZWN0cy9Cb25lLmpzJztcbmV4cG9ydCB7IE1lc2ggfSBmcm9tICcuL29iamVjdHMvTWVzaC5qcyc7XG5leHBvcnQgeyBJbnN0YW5jZWRNZXNoIH0gZnJvbSAnLi9vYmplY3RzL0luc3RhbmNlZE1lc2guanMnO1xuZXhwb3J0IHsgQmF0Y2hlZE1lc2ggfSBmcm9tICcuL29iamVjdHMvQmF0Y2hlZE1lc2guanMnO1xuZXhwb3J0IHsgTGluZVNlZ21lbnRzIH0gZnJvbSAnLi9vYmplY3RzL0xpbmVTZWdtZW50cy5qcyc7XG5leHBvcnQgeyBMaW5lTG9vcCB9IGZyb20gJy4vb2JqZWN0cy9MaW5lTG9vcC5qcyc7XG5leHBvcnQgeyBMaW5lIH0gZnJvbSAnLi9vYmplY3RzL0xpbmUuanMnO1xuZXhwb3J0IHsgUG9pbnRzIH0gZnJvbSAnLi9vYmplY3RzL1BvaW50cy5qcyc7XG5leHBvcnQgeyBHcm91cCB9IGZyb20gJy4vb2JqZWN0cy9Hcm91cC5qcyc7XG5leHBvcnQgeyBWaWRlb1RleHR1cmUgfSBmcm9tICcuL3RleHR1cmVzL1ZpZGVvVGV4dHVyZS5qcyc7XG5leHBvcnQgeyBGcmFtZWJ1ZmZlclRleHR1cmUgfSBmcm9tICcuL3RleHR1cmVzL0ZyYW1lYnVmZmVyVGV4dHVyZS5qcyc7XG5leHBvcnQgeyBTb3VyY2UgfSBmcm9tICcuL3RleHR1cmVzL1NvdXJjZS5qcyc7XG5leHBvcnQgeyBEYXRhVGV4dHVyZSB9IGZyb20gJy4vdGV4dHVyZXMvRGF0YVRleHR1cmUuanMnO1xuZXhwb3J0IHsgRGF0YUFycmF5VGV4dHVyZSB9IGZyb20gJy4vdGV4dHVyZXMvRGF0YUFycmF5VGV4dHVyZS5qcyc7XG5leHBvcnQgeyBEYXRhM0RUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9EYXRhM0RUZXh0dXJlLmpzJztcbmV4cG9ydCB7IENvbXByZXNzZWRUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9Db21wcmVzc2VkVGV4dHVyZS5qcyc7XG5leHBvcnQgeyBDb21wcmVzc2VkQXJyYXlUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9Db21wcmVzc2VkQXJyYXlUZXh0dXJlLmpzJztcbmV4cG9ydCB7IENvbXByZXNzZWRDdWJlVGV4dHVyZSB9IGZyb20gJy4vdGV4dHVyZXMvQ29tcHJlc3NlZEN1YmVUZXh0dXJlLmpzJztcbmV4cG9ydCB7IEN1YmVUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9DdWJlVGV4dHVyZS5qcyc7XG5leHBvcnQgeyBDYW52YXNUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlcy9DYW52YXNUZXh0dXJlLmpzJztcbmV4cG9ydCB7IERlcHRoVGV4dHVyZSB9IGZyb20gJy4vdGV4dHVyZXMvRGVwdGhUZXh0dXJlLmpzJztcbmV4cG9ydCB7IFRleHR1cmUgfSBmcm9tICcuL3RleHR1cmVzL1RleHR1cmUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9nZW9tZXRyaWVzL0dlb21ldHJpZXMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9tYXRlcmlhbHMvTWF0ZXJpYWxzLmpzJztcbmV4cG9ydCB7IEFuaW1hdGlvbkxvYWRlciB9IGZyb20gJy4vbG9hZGVycy9BbmltYXRpb25Mb2FkZXIuanMnO1xuZXhwb3J0IHsgQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIuanMnO1xuZXhwb3J0IHsgQ3ViZVRleHR1cmVMb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvQ3ViZVRleHR1cmVMb2FkZXIuanMnO1xuZXhwb3J0IHsgRGF0YVRleHR1cmVMb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvRGF0YVRleHR1cmVMb2FkZXIuanMnO1xuZXhwb3J0IHsgVGV4dHVyZUxvYWRlciB9IGZyb20gJy4vbG9hZGVycy9UZXh0dXJlTG9hZGVyLmpzJztcbmV4cG9ydCB7IE9iamVjdExvYWRlciB9IGZyb20gJy4vbG9hZGVycy9PYmplY3RMb2FkZXIuanMnO1xuZXhwb3J0IHsgTWF0ZXJpYWxMb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvTWF0ZXJpYWxMb2FkZXIuanMnO1xuZXhwb3J0IHsgQnVmZmVyR2VvbWV0cnlMb2FkZXIgfSBmcm9tICcuL2xvYWRlcnMvQnVmZmVyR2VvbWV0cnlMb2FkZXIuanMnO1xuZXhwb3J0IHsgRGVmYXVsdExvYWRpbmdNYW5hZ2VyLCBMb2FkaW5nTWFuYWdlciB9IGZyb20gJy4vbG9hZGVycy9Mb2FkaW5nTWFuYWdlci5qcyc7XG5leHBvcnQgeyBJbWFnZUxvYWRlciB9IGZyb20gJy4vbG9hZGVycy9JbWFnZUxvYWRlci5qcyc7XG5leHBvcnQgeyBJbWFnZUJpdG1hcExvYWRlciB9IGZyb20gJy4vbG9hZGVycy9JbWFnZUJpdG1hcExvYWRlci5qcyc7XG5leHBvcnQgeyBGaWxlTG9hZGVyIH0gZnJvbSAnLi9sb2FkZXJzL0ZpbGVMb2FkZXIuanMnO1xuZXhwb3J0IHsgTG9hZGVyIH0gZnJvbSAnLi9sb2FkZXJzL0xvYWRlci5qcyc7XG5leHBvcnQgeyBMb2FkZXJVdGlscyB9IGZyb20gJy4vbG9hZGVycy9Mb2FkZXJVdGlscy5qcyc7XG5leHBvcnQgeyBDYWNoZSB9IGZyb20gJy4vbG9hZGVycy9DYWNoZS5qcyc7XG5leHBvcnQgeyBBdWRpb0xvYWRlciB9IGZyb20gJy4vbG9hZGVycy9BdWRpb0xvYWRlci5qcyc7XG5leHBvcnQgeyBTcG90TGlnaHQgfSBmcm9tICcuL2xpZ2h0cy9TcG90TGlnaHQuanMnO1xuZXhwb3J0IHsgUG9pbnRMaWdodCB9IGZyb20gJy4vbGlnaHRzL1BvaW50TGlnaHQuanMnO1xuZXhwb3J0IHsgUmVjdEFyZWFMaWdodCB9IGZyb20gJy4vbGlnaHRzL1JlY3RBcmVhTGlnaHQuanMnO1xuZXhwb3J0IHsgSGVtaXNwaGVyZUxpZ2h0IH0gZnJvbSAnLi9saWdodHMvSGVtaXNwaGVyZUxpZ2h0LmpzJztcbmV4cG9ydCB7IERpcmVjdGlvbmFsTGlnaHQgfSBmcm9tICcuL2xpZ2h0cy9EaXJlY3Rpb25hbExpZ2h0LmpzJztcbmV4cG9ydCB7IEFtYmllbnRMaWdodCB9IGZyb20gJy4vbGlnaHRzL0FtYmllbnRMaWdodC5qcyc7XG5leHBvcnQgeyBMaWdodCB9IGZyb20gJy4vbGlnaHRzL0xpZ2h0LmpzJztcbmV4cG9ydCB7IExpZ2h0UHJvYmUgfSBmcm9tICcuL2xpZ2h0cy9MaWdodFByb2JlLmpzJztcbmV4cG9ydCB7IFN0ZXJlb0NhbWVyYSB9IGZyb20gJy4vY2FtZXJhcy9TdGVyZW9DYW1lcmEuanMnO1xuZXhwb3J0IHsgUGVyc3BlY3RpdmVDYW1lcmEgfSBmcm9tICcuL2NhbWVyYXMvUGVyc3BlY3RpdmVDYW1lcmEuanMnO1xuZXhwb3J0IHsgT3J0aG9ncmFwaGljQ2FtZXJhIH0gZnJvbSAnLi9jYW1lcmFzL09ydGhvZ3JhcGhpY0NhbWVyYS5qcyc7XG5leHBvcnQgeyBDdWJlQ2FtZXJhIH0gZnJvbSAnLi9jYW1lcmFzL0N1YmVDYW1lcmEuanMnO1xuZXhwb3J0IHsgQXJyYXlDYW1lcmEgfSBmcm9tICcuL2NhbWVyYXMvQXJyYXlDYW1lcmEuanMnO1xuZXhwb3J0IHsgQ2FtZXJhIH0gZnJvbSAnLi9jYW1lcmFzL0NhbWVyYS5qcyc7XG5leHBvcnQgeyBBdWRpb0xpc3RlbmVyIH0gZnJvbSAnLi9hdWRpby9BdWRpb0xpc3RlbmVyLmpzJztcbmV4cG9ydCB7IFBvc2l0aW9uYWxBdWRpbyB9IGZyb20gJy4vYXVkaW8vUG9zaXRpb25hbEF1ZGlvLmpzJztcbmV4cG9ydCB7IEF1ZGlvQ29udGV4dCB9IGZyb20gJy4vYXVkaW8vQXVkaW9Db250ZXh0LmpzJztcbmV4cG9ydCB7IEF1ZGlvQW5hbHlzZXIgfSBmcm9tICcuL2F1ZGlvL0F1ZGlvQW5hbHlzZXIuanMnO1xuZXhwb3J0IHsgQXVkaW8gfSBmcm9tICcuL2F1ZGlvL0F1ZGlvLmpzJztcbmV4cG9ydCB7IFZlY3RvcktleWZyYW1lVHJhY2sgfSBmcm9tICcuL2FuaW1hdGlvbi90cmFja3MvVmVjdG9yS2V5ZnJhbWVUcmFjay5qcyc7XG5leHBvcnQgeyBTdHJpbmdLZXlmcmFtZVRyYWNrIH0gZnJvbSAnLi9hbmltYXRpb24vdHJhY2tzL1N0cmluZ0tleWZyYW1lVHJhY2suanMnO1xuZXhwb3J0IHsgUXVhdGVybmlvbktleWZyYW1lVHJhY2sgfSBmcm9tICcuL2FuaW1hdGlvbi90cmFja3MvUXVhdGVybmlvbktleWZyYW1lVHJhY2suanMnO1xuZXhwb3J0IHsgTnVtYmVyS2V5ZnJhbWVUcmFjayB9IGZyb20gJy4vYW5pbWF0aW9uL3RyYWNrcy9OdW1iZXJLZXlmcmFtZVRyYWNrLmpzJztcbmV4cG9ydCB7IENvbG9yS2V5ZnJhbWVUcmFjayB9IGZyb20gJy4vYW5pbWF0aW9uL3RyYWNrcy9Db2xvcktleWZyYW1lVHJhY2suanMnO1xuZXhwb3J0IHsgQm9vbGVhbktleWZyYW1lVHJhY2sgfSBmcm9tICcuL2FuaW1hdGlvbi90cmFja3MvQm9vbGVhbktleWZyYW1lVHJhY2suanMnO1xuZXhwb3J0IHsgUHJvcGVydHlNaXhlciB9IGZyb20gJy4vYW5pbWF0aW9uL1Byb3BlcnR5TWl4ZXIuanMnO1xuZXhwb3J0IHsgUHJvcGVydHlCaW5kaW5nIH0gZnJvbSAnLi9hbmltYXRpb24vUHJvcGVydHlCaW5kaW5nLmpzJztcbmV4cG9ydCB7IEtleWZyYW1lVHJhY2sgfSBmcm9tICcuL2FuaW1hdGlvbi9LZXlmcmFtZVRyYWNrLmpzJztcbmV4cG9ydCB7IEFuaW1hdGlvblV0aWxzIH0gZnJvbSAnLi9hbmltYXRpb24vQW5pbWF0aW9uVXRpbHMuanMnO1xuZXhwb3J0IHsgQW5pbWF0aW9uT2JqZWN0R3JvdXAgfSBmcm9tICcuL2FuaW1hdGlvbi9BbmltYXRpb25PYmplY3RHcm91cC5qcyc7XG5leHBvcnQgeyBBbmltYXRpb25NaXhlciB9IGZyb20gJy4vYW5pbWF0aW9uL0FuaW1hdGlvbk1peGVyLmpzJztcbmV4cG9ydCB7IEFuaW1hdGlvbkNsaXAgfSBmcm9tICcuL2FuaW1hdGlvbi9BbmltYXRpb25DbGlwLmpzJztcbmV4cG9ydCB7IEFuaW1hdGlvbkFjdGlvbiB9IGZyb20gJy4vYW5pbWF0aW9uL0FuaW1hdGlvbkFjdGlvbi5qcyc7XG5leHBvcnQgeyBSZW5kZXJUYXJnZXQgfSBmcm9tICcuL2NvcmUvUmVuZGVyVGFyZ2V0LmpzJztcbmV4cG9ydCB7IFVuaWZvcm0gfSBmcm9tICcuL2NvcmUvVW5pZm9ybS5qcyc7XG5leHBvcnQgeyBVbmlmb3Jtc0dyb3VwIH0gZnJvbSAnLi9jb3JlL1VuaWZvcm1zR3JvdXAuanMnO1xuZXhwb3J0IHsgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuL2NvcmUvSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkuanMnO1xuZXhwb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuZXhwb3J0IHsgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuL2NvcmUvSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUuanMnO1xuZXhwb3J0IHsgSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIgfSBmcm9tICcuL2NvcmUvSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIuanMnO1xuZXhwb3J0IHsgSW50ZXJsZWF2ZWRCdWZmZXIgfSBmcm9tICcuL2NvcmUvSW50ZXJsZWF2ZWRCdWZmZXIuanMnO1xuZXhwb3J0IHsgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi9jb3JlL0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZS5qcyc7XG5leHBvcnQgeyBHTEJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4vY29yZS9HTEJ1ZmZlckF0dHJpYnV0ZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcbmV4cG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi9jb3JlL09iamVjdDNELmpzJztcbmV4cG9ydCB7IFJheWNhc3RlciB9IGZyb20gJy4vY29yZS9SYXljYXN0ZXIuanMnO1xuZXhwb3J0IHsgTGF5ZXJzIH0gZnJvbSAnLi9jb3JlL0xheWVycy5qcyc7XG5leHBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuL2NvcmUvRXZlbnREaXNwYXRjaGVyLmpzJztcbmV4cG9ydCB7IENsb2NrIH0gZnJvbSAnLi9jb3JlL0Nsb2NrLmpzJztcbmV4cG9ydCB7IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCB9IGZyb20gJy4vbWF0aC9pbnRlcnBvbGFudHMvUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LmpzJztcbmV4cG9ydCB7IExpbmVhckludGVycG9sYW50IH0gZnJvbSAnLi9tYXRoL2ludGVycG9sYW50cy9MaW5lYXJJbnRlcnBvbGFudC5qcyc7XG5leHBvcnQgeyBEaXNjcmV0ZUludGVycG9sYW50IH0gZnJvbSAnLi9tYXRoL2ludGVycG9sYW50cy9EaXNjcmV0ZUludGVycG9sYW50LmpzJztcbmV4cG9ydCB7IEN1YmljSW50ZXJwb2xhbnQgfSBmcm9tICcuL21hdGgvaW50ZXJwb2xhbnRzL0N1YmljSW50ZXJwb2xhbnQuanMnO1xuZXhwb3J0IHsgSW50ZXJwb2xhbnQgfSBmcm9tICcuL21hdGgvSW50ZXJwb2xhbnQuanMnO1xuZXhwb3J0IHsgVHJpYW5nbGUgfSBmcm9tICcuL21hdGgvVHJpYW5nbGUuanMnO1xuZXhwb3J0IHsgTWF0aFV0aWxzIH0gZnJvbSAnLi9tYXRoL01hdGhVdGlscy5qcyc7XG5leHBvcnQgeyBTcGhlcmljYWwgfSBmcm9tICcuL21hdGgvU3BoZXJpY2FsLmpzJztcbmV4cG9ydCB7IEN5bGluZHJpY2FsIH0gZnJvbSAnLi9tYXRoL0N5bGluZHJpY2FsLmpzJztcbmV4cG9ydCB7IFBsYW5lIH0gZnJvbSAnLi9tYXRoL1BsYW5lLmpzJztcbmV4cG9ydCB7IEZydXN0dW0gfSBmcm9tICcuL21hdGgvRnJ1c3R1bS5qcyc7XG5leHBvcnQgeyBTcGhlcmUgfSBmcm9tICcuL21hdGgvU3BoZXJlLmpzJztcbmV4cG9ydCB7IFJheSB9IGZyb20gJy4vbWF0aC9SYXkuanMnO1xuZXhwb3J0IHsgTWF0cml4NCB9IGZyb20gJy4vbWF0aC9NYXRyaXg0LmpzJztcbmV4cG9ydCB7IE1hdHJpeDMgfSBmcm9tICcuL21hdGgvTWF0cml4My5qcyc7XG5leHBvcnQgeyBCb3gzIH0gZnJvbSAnLi9tYXRoL0JveDMuanMnO1xuZXhwb3J0IHsgQm94MiB9IGZyb20gJy4vbWF0aC9Cb3gyLmpzJztcbmV4cG9ydCB7IExpbmUzIH0gZnJvbSAnLi9tYXRoL0xpbmUzLmpzJztcbmV4cG9ydCB7IEV1bGVyIH0gZnJvbSAnLi9tYXRoL0V1bGVyLmpzJztcbmV4cG9ydCB7IFZlY3RvcjQgfSBmcm9tICcuL21hdGgvVmVjdG9yNC5qcyc7XG5leHBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9tYXRoL1ZlY3RvcjMuanMnO1xuZXhwb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4vbWF0aC9WZWN0b3IyLmpzJztcbmV4cG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuL21hdGgvUXVhdGVybmlvbi5qcyc7XG5leHBvcnQgeyBDb2xvciB9IGZyb20gJy4vbWF0aC9Db2xvci5qcyc7XG5leHBvcnQgeyBDb2xvck1hbmFnZW1lbnQgfSBmcm9tICcuL21hdGgvQ29sb3JNYW5hZ2VtZW50LmpzJztcbmV4cG9ydCB7IFNwaGVyaWNhbEhhcm1vbmljczMgfSBmcm9tICcuL21hdGgvU3BoZXJpY2FsSGFybW9uaWNzMy5qcyc7XG5leHBvcnQgeyBTcG90TGlnaHRIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvU3BvdExpZ2h0SGVscGVyLmpzJztcbmV4cG9ydCB7IFNrZWxldG9uSGVscGVyIH0gZnJvbSAnLi9oZWxwZXJzL1NrZWxldG9uSGVscGVyLmpzJztcbmV4cG9ydCB7IFBvaW50TGlnaHRIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvUG9pbnRMaWdodEhlbHBlci5qcyc7XG5leHBvcnQgeyBIZW1pc3BoZXJlTGlnaHRIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvSGVtaXNwaGVyZUxpZ2h0SGVscGVyLmpzJztcbmV4cG9ydCB7IEdyaWRIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvR3JpZEhlbHBlci5qcyc7XG5leHBvcnQgeyBQb2xhckdyaWRIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvUG9sYXJHcmlkSGVscGVyLmpzJztcbmV4cG9ydCB7IERpcmVjdGlvbmFsTGlnaHRIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvRGlyZWN0aW9uYWxMaWdodEhlbHBlci5qcyc7XG5leHBvcnQgeyBDYW1lcmFIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvQ2FtZXJhSGVscGVyLmpzJztcbmV4cG9ydCB7IEJveEhlbHBlciB9IGZyb20gJy4vaGVscGVycy9Cb3hIZWxwZXIuanMnO1xuZXhwb3J0IHsgQm94M0hlbHBlciB9IGZyb20gJy4vaGVscGVycy9Cb3gzSGVscGVyLmpzJztcbmV4cG9ydCB7IFBsYW5lSGVscGVyIH0gZnJvbSAnLi9oZWxwZXJzL1BsYW5lSGVscGVyLmpzJztcbmV4cG9ydCB7IEFycm93SGVscGVyIH0gZnJvbSAnLi9oZWxwZXJzL0Fycm93SGVscGVyLmpzJztcbmV4cG9ydCB7IEF4ZXNIZWxwZXIgfSBmcm9tICcuL2hlbHBlcnMvQXhlc0hlbHBlci5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2V4dHJhcy9jdXJ2ZXMvQ3VydmVzLmpzJztcbmV4cG9ydCB7IFNoYXBlIH0gZnJvbSAnLi9leHRyYXMvY29yZS9TaGFwZS5qcyc7XG5leHBvcnQgeyBQYXRoIH0gZnJvbSAnLi9leHRyYXMvY29yZS9QYXRoLmpzJztcbmV4cG9ydCB7IFNoYXBlUGF0aCB9IGZyb20gJy4vZXh0cmFzL2NvcmUvU2hhcGVQYXRoLmpzJztcbmV4cG9ydCB7IEN1cnZlUGF0aCB9IGZyb20gJy4vZXh0cmFzL2NvcmUvQ3VydmVQYXRoLmpzJztcbmV4cG9ydCB7IEN1cnZlIH0gZnJvbSAnLi9leHRyYXMvY29yZS9DdXJ2ZS5qcyc7XG5leHBvcnQgeyBEYXRhVXRpbHMgfSBmcm9tICcuL2V4dHJhcy9EYXRhVXRpbHMuanMnO1xuZXhwb3J0IHsgSW1hZ2VVdGlscyB9IGZyb20gJy4vZXh0cmFzL0ltYWdlVXRpbHMuanMnO1xuZXhwb3J0IHsgU2hhcGVVdGlscyB9IGZyb20gJy4vZXh0cmFzL1NoYXBlVXRpbHMuanMnO1xuZXhwb3J0IHsgVGV4dHVyZVV0aWxzIH0gZnJvbSAnLi9leHRyYXMvVGV4dHVyZVV0aWxzLmpzJztcbmV4cG9ydCB7IFBNUkVNR2VuZXJhdG9yIH0gZnJvbSAnLi9leHRyYXMvUE1SRU1HZW5lcmF0b3IuanMnO1xuZXhwb3J0IHsgV2ViR0xVdGlscyB9IGZyb20gJy4vcmVuZGVyZXJzL3dlYmdsL1dlYkdMVXRpbHMuanMnO1xuZXhwb3J0IHsgY3JlYXRlQ2FudmFzRWxlbWVudCB9IGZyb20gJy4vdXRpbHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb25zdGFudHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9UaHJlZS5MZWdhY3kuanMnO1xuXG5pZiAoIHR5cGVvZiBfX1RIUkVFX0RFVlRPT0xTX18gIT09ICd1bmRlZmluZWQnICkge1xuXG5cdF9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdyZWdpc3RlcicsIHsgZGV0YWlsOiB7XG5cdFx0cmV2aXNpb246IFJFVklTSU9OLFxuXHR9IH0gKSApO1xuXG59XG5cbmlmICggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0aWYgKCB3aW5kb3cuX19USFJFRV9fICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnV0FSTklORzogTXVsdGlwbGUgaW5zdGFuY2VzIG9mIFRocmVlLmpzIGJlaW5nIGltcG9ydGVkLicgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0d2luZG93Ll9fVEhSRUVfXyA9IFJFVklTSU9OO1xuXG5cdH1cblxufVxuIl0sIm5hbWVzIjpbIlJFVklTSU9OIiwiTU9VU0UiLCJMRUZUIiwiTUlERExFIiwiUklHSFQiLCJST1RBVEUiLCJET0xMWSIsIlBBTiIsIlRPVUNIIiwiRE9MTFlfUEFOIiwiRE9MTFlfUk9UQVRFIiwiQ3VsbEZhY2VOb25lIiwiQ3VsbEZhY2VCYWNrIiwiQ3VsbEZhY2VGcm9udCIsIkN1bGxGYWNlRnJvbnRCYWNrIiwiQmFzaWNTaGFkb3dNYXAiLCJQQ0ZTaGFkb3dNYXAiLCJQQ0ZTb2Z0U2hhZG93TWFwIiwiVlNNU2hhZG93TWFwIiwiRnJvbnRTaWRlIiwiQmFja1NpZGUiLCJEb3VibGVTaWRlIiwiTm9CbGVuZGluZyIsIk5vcm1hbEJsZW5kaW5nIiwiQWRkaXRpdmVCbGVuZGluZyIsIlN1YnRyYWN0aXZlQmxlbmRpbmciLCJNdWx0aXBseUJsZW5kaW5nIiwiQ3VzdG9tQmxlbmRpbmciLCJBZGRFcXVhdGlvbiIsIlN1YnRyYWN0RXF1YXRpb24iLCJSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiIsIk1pbkVxdWF0aW9uIiwiTWF4RXF1YXRpb24iLCJaZXJvRmFjdG9yIiwiT25lRmFjdG9yIiwiU3JjQ29sb3JGYWN0b3IiLCJPbmVNaW51c1NyY0NvbG9yRmFjdG9yIiwiU3JjQWxwaGFGYWN0b3IiLCJPbmVNaW51c1NyY0FscGhhRmFjdG9yIiwiRHN0QWxwaGFGYWN0b3IiLCJPbmVNaW51c0RzdEFscGhhRmFjdG9yIiwiRHN0Q29sb3JGYWN0b3IiLCJPbmVNaW51c0RzdENvbG9yRmFjdG9yIiwiU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciIsIkNvbnN0YW50Q29sb3JGYWN0b3IiLCJPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3IiLCJDb25zdGFudEFscGhhRmFjdG9yIiwiT25lTWludXNDb25zdGFudEFscGhhRmFjdG9yIiwiTmV2ZXJEZXB0aCIsIkFsd2F5c0RlcHRoIiwiTGVzc0RlcHRoIiwiTGVzc0VxdWFsRGVwdGgiLCJFcXVhbERlcHRoIiwiR3JlYXRlckVxdWFsRGVwdGgiLCJHcmVhdGVyRGVwdGgiLCJOb3RFcXVhbERlcHRoIiwiTXVsdGlwbHlPcGVyYXRpb24iLCJNaXhPcGVyYXRpb24iLCJBZGRPcGVyYXRpb24iLCJOb1RvbmVNYXBwaW5nIiwiTGluZWFyVG9uZU1hcHBpbmciLCJSZWluaGFyZFRvbmVNYXBwaW5nIiwiQ2luZW9uVG9uZU1hcHBpbmciLCJBQ0VTRmlsbWljVG9uZU1hcHBpbmciLCJDdXN0b21Ub25lTWFwcGluZyIsIkFnWFRvbmVNYXBwaW5nIiwiTmV1dHJhbFRvbmVNYXBwaW5nIiwiQXR0YWNoZWRCaW5kTW9kZSIsIkRldGFjaGVkQmluZE1vZGUiLCJVVk1hcHBpbmciLCJDdWJlUmVmbGVjdGlvbk1hcHBpbmciLCJDdWJlUmVmcmFjdGlvbk1hcHBpbmciLCJFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyIsIkVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nIiwiQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmciLCJSZXBlYXRXcmFwcGluZyIsIkNsYW1wVG9FZGdlV3JhcHBpbmciLCJNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIiwiTmVhcmVzdEZpbHRlciIsIk5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIiLCJOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyIiwiTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciIsIkxpbmVhckZpbHRlciIsIkxpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIiLCJMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyIiwiTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyIiwiTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyIiwiVW5zaWduZWRCeXRlVHlwZSIsIkJ5dGVUeXBlIiwiU2hvcnRUeXBlIiwiVW5zaWduZWRTaG9ydFR5cGUiLCJJbnRUeXBlIiwiVW5zaWduZWRJbnRUeXBlIiwiRmxvYXRUeXBlIiwiSGFsZkZsb2F0VHlwZSIsIlVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSIsIlVuc2lnbmVkU2hvcnQ1NTUxVHlwZSIsIlVuc2lnbmVkSW50MjQ4VHlwZSIsIlVuc2lnbmVkSW50NTk5OVR5cGUiLCJBbHBoYUZvcm1hdCIsIlJHQkZvcm1hdCIsIlJHQkFGb3JtYXQiLCJMdW1pbmFuY2VGb3JtYXQiLCJMdW1pbmFuY2VBbHBoYUZvcm1hdCIsIkRlcHRoRm9ybWF0IiwiRGVwdGhTdGVuY2lsRm9ybWF0IiwiUmVkRm9ybWF0IiwiUmVkSW50ZWdlckZvcm1hdCIsIlJHRm9ybWF0IiwiUkdJbnRlZ2VyRm9ybWF0IiwiUkdCSW50ZWdlckZvcm1hdCIsIlJHQkFJbnRlZ2VyRm9ybWF0IiwiUkdCX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUM19Gb3JtYXQiLCJSR0JBX1MzVENfRFhUNV9Gb3JtYXQiLCJSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCIsIlJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCX0VUQzFfRm9ybWF0IiwiUkdCX0VUQzJfRm9ybWF0IiwiUkdCQV9FVEMyX0VBQ19Gb3JtYXQiLCJSR0JBX0FTVENfNHg0X0Zvcm1hdCIsIlJHQkFfQVNUQ181eDRfRm9ybWF0IiwiUkdCQV9BU1RDXzV4NV9Gb3JtYXQiLCJSR0JBX0FTVENfNng1X0Zvcm1hdCIsIlJHQkFfQVNUQ182eDZfRm9ybWF0IiwiUkdCQV9BU1RDXzh4NV9Gb3JtYXQiLCJSR0JBX0FTVENfOHg2X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDVfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDZfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCIsIlJHQkFfQVNUQ18xMngxMF9Gb3JtYXQiLCJSR0JBX0FTVENfMTJ4MTJfRm9ybWF0IiwiUkdCQV9CUFRDX0Zvcm1hdCIsIlJHQl9CUFRDX1NJR05FRF9Gb3JtYXQiLCJSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQiLCJSRURfUkdUQzFfRm9ybWF0IiwiU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQiLCJSRURfR1JFRU5fUkdUQzJfRm9ybWF0IiwiU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQiLCJMb29wT25jZSIsIkxvb3BSZXBlYXQiLCJMb29wUGluZ1BvbmciLCJJbnRlcnBvbGF0ZURpc2NyZXRlIiwiSW50ZXJwb2xhdGVMaW5lYXIiLCJJbnRlcnBvbGF0ZVNtb290aCIsIlplcm9DdXJ2YXR1cmVFbmRpbmciLCJaZXJvU2xvcGVFbmRpbmciLCJXcmFwQXJvdW5kRW5kaW5nIiwiTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlIiwiQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUiLCJUcmlhbmdsZXNEcmF3TW9kZSIsIlRyaWFuZ2xlU3RyaXBEcmF3TW9kZSIsIlRyaWFuZ2xlRmFuRHJhd01vZGUiLCJCYXNpY0RlcHRoUGFja2luZyIsIlJHQkFEZXB0aFBhY2tpbmciLCJUYW5nZW50U3BhY2VOb3JtYWxNYXAiLCJPYmplY3RTcGFjZU5vcm1hbE1hcCIsIk5vQ29sb3JTcGFjZSIsIlNSR0JDb2xvclNwYWNlIiwiTGluZWFyU1JHQkNvbG9yU3BhY2UiLCJEaXNwbGF5UDNDb2xvclNwYWNlIiwiTGluZWFyRGlzcGxheVAzQ29sb3JTcGFjZSIsIkxpbmVhclRyYW5zZmVyIiwiU1JHQlRyYW5zZmVyIiwiUmVjNzA5UHJpbWFyaWVzIiwiUDNQcmltYXJpZXMiLCJaZXJvU3RlbmNpbE9wIiwiS2VlcFN0ZW5jaWxPcCIsIlJlcGxhY2VTdGVuY2lsT3AiLCJJbmNyZW1lbnRTdGVuY2lsT3AiLCJEZWNyZW1lbnRTdGVuY2lsT3AiLCJJbmNyZW1lbnRXcmFwU3RlbmNpbE9wIiwiRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCIsIkludmVydFN0ZW5jaWxPcCIsIk5ldmVyU3RlbmNpbEZ1bmMiLCJMZXNzU3RlbmNpbEZ1bmMiLCJFcXVhbFN0ZW5jaWxGdW5jIiwiTGVzc0VxdWFsU3RlbmNpbEZ1bmMiLCJHcmVhdGVyU3RlbmNpbEZ1bmMiLCJOb3RFcXVhbFN0ZW5jaWxGdW5jIiwiR3JlYXRlckVxdWFsU3RlbmNpbEZ1bmMiLCJBbHdheXNTdGVuY2lsRnVuYyIsIk5ldmVyQ29tcGFyZSIsIkxlc3NDb21wYXJlIiwiRXF1YWxDb21wYXJlIiwiTGVzc0VxdWFsQ29tcGFyZSIsIkdyZWF0ZXJDb21wYXJlIiwiTm90RXF1YWxDb21wYXJlIiwiR3JlYXRlckVxdWFsQ29tcGFyZSIsIkFsd2F5c0NvbXBhcmUiLCJTdGF0aWNEcmF3VXNhZ2UiLCJEeW5hbWljRHJhd1VzYWdlIiwiU3RyZWFtRHJhd1VzYWdlIiwiU3RhdGljUmVhZFVzYWdlIiwiRHluYW1pY1JlYWRVc2FnZSIsIlN0cmVhbVJlYWRVc2FnZSIsIlN0YXRpY0NvcHlVc2FnZSIsIkR5bmFtaWNDb3B5VXNhZ2UiLCJTdHJlYW1Db3B5VXNhZ2UiLCJHTFNMMSIsIkdMU0wzIiwiV2ViR0xDb29yZGluYXRlU3lzdGVtIiwiV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSIsIkV2ZW50RGlzcGF0Y2hlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJ1bmRlZmluZWQiLCJ0aGlzIiwiX2xpc3RlbmVycyIsImxpc3RlbmVycyIsImluZGV4T2YiLCJwdXNoIiwiaGFzRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lckFycmF5IiwiaW5kZXgiLCJzcGxpY2UiLCJkaXNwYXRjaEV2ZW50IiwiZXZlbnQiLCJ0YXJnZXQiLCJhcnJheSIsInNsaWNlIiwiaSIsImwiLCJsZW5ndGgiLCJjYWxsIiwiX2x1dCIsIl9zZWVkIiwiREVHMlJBRCIsIk1hdGgiLCJQSSIsIlJBRDJERUciLCJnZW5lcmF0ZVVVSUQiLCJkMCIsInJhbmRvbSIsImQxIiwiZDIiLCJkMyIsInRvTG93ZXJDYXNlIiwiY2xhbXAiLCJ2YWx1ZSIsIm1pbiIsIm1heCIsImV1Y2xpZGVhbk1vZHVsbyIsIm4iLCJtIiwibGVycCIsIngiLCJ5IiwidCIsImRlbm9ybWFsaXplIiwiY29uc3RydWN0b3IiLCJGbG9hdDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDhBcnJheSIsIkludDMyQXJyYXkiLCJJbnQxNkFycmF5IiwiSW50OEFycmF5IiwiRXJyb3IiLCJub3JtYWxpemUiLCJyb3VuZCIsIk1hdGhVdGlscyIsIm1hcExpbmVhciIsImExIiwiYTIiLCJiMSIsImIyIiwiaW52ZXJzZUxlcnAiLCJkYW1wIiwibGFtYmRhIiwiZHQiLCJleHAiLCJwaW5ncG9uZyIsImFicyIsInNtb290aHN0ZXAiLCJzbW9vdGhlcnN0ZXAiLCJyYW5kSW50IiwibG93IiwiaGlnaCIsImZsb29yIiwicmFuZEZsb2F0IiwicmFuZEZsb2F0U3ByZWFkIiwicmFuZ2UiLCJzZWVkZWRSYW5kb20iLCJzIiwiaW11bCIsImRlZ1RvUmFkIiwiZGVncmVlcyIsInJhZFRvRGVnIiwicmFkaWFucyIsImlzUG93ZXJPZlR3byIsImNlaWxQb3dlck9mVHdvIiwicG93IiwiY2VpbCIsImxvZyIsIkxOMiIsImZsb29yUG93ZXJPZlR3byIsInNldFF1YXRlcm5pb25Gcm9tUHJvcGVyRXVsZXIiLCJxIiwiYSIsImIiLCJjIiwib3JkZXIiLCJjb3MiLCJzaW4iLCJjMiIsInMyIiwiYzEzIiwiczEzIiwiYzFfMyIsInMxXzMiLCJjM18xIiwiczNfMSIsInNldCIsImNvbnNvbGUiLCJ3YXJuIiwiVmVjdG9yMiIsInByb3RvdHlwZSIsImlzVmVjdG9yMiIsIndpZHRoIiwiaGVpZ2h0Iiwic2V0U2NhbGFyIiwic2NhbGFyIiwic2V0WCIsInNldFkiLCJzZXRDb21wb25lbnQiLCJnZXRDb21wb25lbnQiLCJjbG9uZSIsImNvcHkiLCJ2IiwiYWRkIiwiYWRkU2NhbGFyIiwiYWRkVmVjdG9ycyIsImFkZFNjYWxlZFZlY3RvciIsInN1YiIsInN1YlNjYWxhciIsInN1YlZlY3RvcnMiLCJtdWx0aXBseSIsIm11bHRpcGx5U2NhbGFyIiwiZGl2aWRlIiwiZGl2aWRlU2NhbGFyIiwiYXBwbHlNYXRyaXgzIiwiZSIsImVsZW1lbnRzIiwiY2xhbXBTY2FsYXIiLCJtaW5WYWwiLCJtYXhWYWwiLCJjbGFtcExlbmd0aCIsInJvdW5kVG9aZXJvIiwidHJ1bmMiLCJuZWdhdGUiLCJkb3QiLCJjcm9zcyIsImxlbmd0aFNxIiwic3FydCIsIm1hbmhhdHRhbkxlbmd0aCIsImFuZ2xlIiwiYXRhbjIiLCJhbmdsZVRvIiwiZGVub21pbmF0b3IiLCJ0aGV0YSIsImFjb3MiLCJkaXN0YW5jZVRvIiwiZGlzdGFuY2VUb1NxdWFyZWQiLCJkeCIsImR5IiwibWFuaGF0dGFuRGlzdGFuY2VUbyIsInNldExlbmd0aCIsImFscGhhIiwibGVycFZlY3RvcnMiLCJ2MSIsInYyIiwiZXF1YWxzIiwiZnJvbUFycmF5Iiwib2Zmc2V0IiwidG9BcnJheSIsImZyb21CdWZmZXJBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJnZXRYIiwiZ2V0WSIsInJvdGF0ZUFyb3VuZCIsImNlbnRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiTWF0cml4MyIsIm4xMSIsIm4xMiIsIm4xMyIsIm4yMSIsIm4yMiIsIm4yMyIsIm4zMSIsIm4zMiIsIm4zMyIsImlzTWF0cml4MyIsInRlIiwiaWRlbnRpdHkiLCJtZSIsImV4dHJhY3RCYXNpcyIsInhBeGlzIiwieUF4aXMiLCJ6QXhpcyIsInNldEZyb21NYXRyaXgzQ29sdW1uIiwic2V0RnJvbU1hdHJpeDQiLCJtdWx0aXBseU1hdHJpY2VzIiwicHJlbXVsdGlwbHkiLCJhZSIsImJlIiwiYTExIiwiYTEyIiwiYTEzIiwiYTIxIiwiYTIyIiwiYTIzIiwiYTMxIiwiYTMyIiwiYTMzIiwiYjExIiwiYjEyIiwiYjEzIiwiYjIxIiwiYjIyIiwiYjIzIiwiYjMxIiwiYjMyIiwiYjMzIiwiZGV0ZXJtaW5hbnQiLCJkIiwiZiIsImciLCJoIiwiaW52ZXJ0IiwidDExIiwidDEyIiwidDEzIiwiZGV0IiwiZGV0SW52IiwidHJhbnNwb3NlIiwidG1wIiwiZ2V0Tm9ybWFsTWF0cml4IiwibWF0cml4NCIsInRyYW5zcG9zZUludG9BcnJheSIsInIiLCJzZXRVdlRyYW5zZm9ybSIsInR4IiwidHkiLCJzeCIsInN5Iiwicm90YXRpb24iLCJjeCIsImN5Iiwic2NhbGUiLCJfbTMiLCJtYWtlU2NhbGUiLCJyb3RhdGUiLCJtYWtlUm90YXRpb24iLCJ0cmFuc2xhdGUiLCJtYWtlVHJhbnNsYXRpb24iLCJtYXRyaXgiLCJhcnJheU5lZWRzVWludDMyIiwiVFlQRURfQVJSQVlTIiwiVWludDhDbGFtcGVkQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJnZXRUeXBlZEFycmF5IiwiYnVmZmVyIiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZSIsImRvY3VtZW50IiwiY3JlYXRlQ2FudmFzRWxlbWVudCIsImNhbnZhcyIsInN0eWxlIiwiZGlzcGxheSIsIl9jYWNoZSIsIndhcm5PbmNlIiwibWVzc2FnZSIsIkxJTkVBUl9TUkdCX1RPX0xJTkVBUl9ESVNQTEFZX1AzIiwiTElORUFSX0RJU1BMQVlfUDNfVE9fTElORUFSX1NSR0IiLCJDT0xPUl9TUEFDRVMiLCJ0cmFuc2ZlciIsInByaW1hcmllcyIsInRvUmVmZXJlbmNlIiwiY29sb3IiLCJmcm9tUmVmZXJlbmNlIiwiY29udmVydFNSR0JUb0xpbmVhciIsImNvbnZlcnRMaW5lYXJUb1NSR0IiLCJTVVBQT1JURURfV09SS0lOR19DT0xPUl9TUEFDRVMiLCJTZXQiLCJDb2xvck1hbmFnZW1lbnQiLCJlbmFibGVkIiwiX3dvcmtpbmdDb2xvclNwYWNlIiwid29ya2luZ0NvbG9yU3BhY2UiLCJjb2xvclNwYWNlIiwiaGFzIiwiY29udmVydCIsInNvdXJjZUNvbG9yU3BhY2UiLCJ0YXJnZXRDb2xvclNwYWNlIiwic291cmNlVG9SZWZlcmVuY2UiLCJ0YXJnZXRGcm9tUmVmZXJlbmNlIiwiZnJvbVdvcmtpbmdDb2xvclNwYWNlIiwidG9Xb3JraW5nQ29sb3JTcGFjZSIsImdldFByaW1hcmllcyIsImdldFRyYW5zZmVyIiwiU1JHQlRvTGluZWFyIiwiTGluZWFyVG9TUkdCIiwiX2NhbnZhcyIsIkltYWdlVXRpbHMiLCJnZXREYXRhVVJMIiwiaW1hZ2UiLCJ0ZXN0Iiwic3JjIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsIkltYWdlRGF0YSIsInB1dEltYWdlRGF0YSIsImRyYXdJbWFnZSIsInRvRGF0YVVSTCIsInNSR0JUb0xpbmVhciIsIkhUTUxJbWFnZUVsZW1lbnQiLCJJbWFnZUJpdG1hcCIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsImRhdGEiLCJfc291cmNlSWQiLCJTb3VyY2UiLCJpc1NvdXJjZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidXVpZCIsImRhdGFSZWFkeSIsInZlcnNpb24iLCJuZWVkc1VwZGF0ZSIsInRvSlNPTiIsIm1ldGEiLCJpc1Jvb3RPYmplY3QiLCJpbWFnZXMiLCJvdXRwdXQiLCJ1cmwiLCJBcnJheSIsImlzQXJyYXkiLCJpc0RhdGFUZXh0dXJlIiwic2VyaWFsaXplSW1hZ2UiLCJmcm9tIiwiX3RleHR1cmVJZCIsIlRleHR1cmUiLCJERUZBVUxUX0lNQUdFIiwibWFwcGluZyIsIkRFRkFVTFRfTUFQUElORyIsIndyYXBTIiwid3JhcFQiLCJtYWdGaWx0ZXIiLCJtaW5GaWx0ZXIiLCJmb3JtYXQiLCJhbmlzb3Ryb3B5IiwiREVGQVVMVF9BTklTT1RST1BZIiwic3VwZXIiLCJpc1RleHR1cmUiLCJzb3VyY2UiLCJtaXBtYXBzIiwiY2hhbm5lbCIsImludGVybmFsRm9ybWF0IiwicmVwZWF0IiwibWF0cml4QXV0b1VwZGF0ZSIsImdlbmVyYXRlTWlwbWFwcyIsInByZW11bHRpcGx5QWxwaGEiLCJmbGlwWSIsInVucGFja0FsaWdubWVudCIsInVzZXJEYXRhIiwib25VcGRhdGUiLCJpc1JlbmRlclRhcmdldFRleHR1cmUiLCJwbXJlbVZlcnNpb24iLCJ1cGRhdGVNYXRyaXgiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJ0ZXh0dXJlcyIsIm1ldGFkYXRhIiwiZ2VuZXJhdG9yIiwid3JhcCIsImtleXMiLCJkaXNwb3NlIiwidHJhbnNmb3JtVXYiLCJ1diIsIm5lZWRzUE1SRU1VcGRhdGUiLCJWZWN0b3I0IiwieiIsInciLCJpc1ZlY3RvcjQiLCJzZXRaIiwic2V0VyIsImFwcGx5TWF0cml4NCIsInNldEF4aXNBbmdsZUZyb21RdWF0ZXJuaW9uIiwic2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4IiwiZXBzaWxvbiIsImVwc2lsb24yIiwibTExIiwibTEyIiwibTEzIiwibTIxIiwibTIyIiwibTIzIiwibTMxIiwibTMyIiwibTMzIiwieHgiLCJ5eSIsInp6IiwieHkiLCJ4eiIsInl6Iiwic2V0RnJvbU1hdHJpeFBvc2l0aW9uIiwiZ2V0WiIsImdldFciLCJSZW5kZXJUYXJnZXQiLCJvcHRpb25zIiwiaXNSZW5kZXJUYXJnZXQiLCJkZXB0aCIsInNjaXNzb3IiLCJzY2lzc29yVGVzdCIsInZpZXdwb3J0IiwiYXNzaWduIiwiZGVwdGhCdWZmZXIiLCJzdGVuY2lsQnVmZmVyIiwicmVzb2x2ZURlcHRoQnVmZmVyIiwicmVzb2x2ZVN0ZW5jaWxCdWZmZXIiLCJkZXB0aFRleHR1cmUiLCJzYW1wbGVzIiwiY291bnQiLCJ0ZXh0dXJlIiwic2V0U2l6ZSIsImlsIiwiV2ViR0xSZW5kZXJUYXJnZXQiLCJpc1dlYkdMUmVuZGVyVGFyZ2V0IiwiRGF0YUFycmF5VGV4dHVyZSIsImlzRGF0YUFycmF5VGV4dHVyZSIsIndyYXBSIiwibGF5ZXJVcGRhdGVzIiwiYWRkTGF5ZXJVcGRhdGUiLCJsYXllckluZGV4IiwiY2xlYXJMYXllclVwZGF0ZXMiLCJjbGVhciIsIldlYkdMQXJyYXlSZW5kZXJUYXJnZXQiLCJpc1dlYkdMQXJyYXlSZW5kZXJUYXJnZXQiLCJEYXRhM0RUZXh0dXJlIiwiaXNEYXRhM0RUZXh0dXJlIiwiV2ViR0wzRFJlbmRlclRhcmdldCIsImlzV2ViR0wzRFJlbmRlclRhcmdldCIsIlF1YXRlcm5pb24iLCJpc1F1YXRlcm5pb24iLCJfeCIsIl95IiwiX3oiLCJfdyIsInNsZXJwRmxhdCIsImRzdCIsImRzdE9mZnNldCIsInNyYzAiLCJzcmNPZmZzZXQwIiwic3JjMSIsInNyY09mZnNldDEiLCJ4MCIsInkwIiwiejAiLCJ3MCIsIngxIiwieTEiLCJ6MSIsIncxIiwiZGlyIiwic3FyU2luIiwiTnVtYmVyIiwiRVBTSUxPTiIsImxlbiIsInREaXIiLCJtdWx0aXBseVF1YXRlcm5pb25zRmxhdCIsIl9vbkNoYW5nZUNhbGxiYWNrIiwicXVhdGVybmlvbiIsInNldEZyb21FdWxlciIsImV1bGVyIiwidXBkYXRlIiwiX29yZGVyIiwiYzEiLCJjMyIsInMxIiwiczMiLCJzZXRGcm9tQXhpc0FuZ2xlIiwiYXhpcyIsImhhbGZBbmdsZSIsInNldEZyb21Sb3RhdGlvbk1hdHJpeCIsInRyYWNlIiwic2V0RnJvbVVuaXRWZWN0b3JzIiwidkZyb20iLCJ2VG8iLCJyb3RhdGVUb3dhcmRzIiwic3RlcCIsInNsZXJwIiwiY29uanVnYXRlIiwibXVsdGlwbHlRdWF0ZXJuaW9ucyIsInFheCIsInFheSIsInFheiIsInFhdyIsInFieCIsInFieSIsInFieiIsInFidyIsInFiIiwiY29zSGFsZlRoZXRhIiwic3FyU2luSGFsZlRoZXRhIiwic2luSGFsZlRoZXRhIiwiaGFsZlRoZXRhIiwicmF0aW9BIiwicmF0aW9CIiwic2xlcnBRdWF0ZXJuaW9ucyIsInFhIiwidGhldGExIiwidGhldGEyIiwicjEiLCJyMiIsIl9vbkNoYW5nZSIsImNhbGxiYWNrIiwiVmVjdG9yMyIsImlzVmVjdG9yMyIsIm11bHRpcGx5VmVjdG9ycyIsImFwcGx5RXVsZXIiLCJhcHBseVF1YXRlcm5pb24iLCJfcXVhdGVybmlvbiQ0IiwiYXBwbHlBeGlzQW5nbGUiLCJhcHBseU5vcm1hbE1hdHJpeCIsInZ4IiwidnkiLCJ2eiIsInF4IiwicXkiLCJxeiIsInF3IiwidHoiLCJwcm9qZWN0IiwiY2FtZXJhIiwibWF0cml4V29ybGRJbnZlcnNlIiwicHJvamVjdGlvbk1hdHJpeCIsInVucHJvamVjdCIsInByb2plY3Rpb25NYXRyaXhJbnZlcnNlIiwibWF0cml4V29ybGQiLCJ0cmFuc2Zvcm1EaXJlY3Rpb24iLCJjcm9zc1ZlY3RvcnMiLCJheCIsImF5IiwiYXoiLCJieCIsImJ5IiwiYnoiLCJwcm9qZWN0T25WZWN0b3IiLCJwcm9qZWN0T25QbGFuZSIsInBsYW5lTm9ybWFsIiwiX3ZlY3RvciRjIiwicmVmbGVjdCIsIm5vcm1hbCIsImR6Iiwic2V0RnJvbVNwaGVyaWNhbCIsInNldEZyb21TcGhlcmljYWxDb29yZHMiLCJyYWRpdXMiLCJwaGkiLCJzaW5QaGlSYWRpdXMiLCJzZXRGcm9tQ3lsaW5kcmljYWwiLCJzZXRGcm9tQ3lsaW5kcmljYWxDb29yZHMiLCJzZXRGcm9tTWF0cml4U2NhbGUiLCJzZXRGcm9tTWF0cml4Q29sdW1uIiwic3oiLCJzZXRGcm9tQ29sb3IiLCJyYW5kb21EaXJlY3Rpb24iLCJ1IiwiQm94MyIsIkluZmluaXR5IiwiaXNCb3gzIiwic2V0RnJvbUFycmF5IiwibWFrZUVtcHR5IiwiZXhwYW5kQnlQb2ludCIsIl92ZWN0b3IkYiIsInNldEZyb21CdWZmZXJBdHRyaWJ1dGUiLCJzZXRGcm9tUG9pbnRzIiwicG9pbnRzIiwic2V0RnJvbUNlbnRlckFuZFNpemUiLCJzaXplIiwiaGFsZlNpemUiLCJzZXRGcm9tT2JqZWN0Iiwib2JqZWN0IiwicHJlY2lzZSIsImV4cGFuZEJ5T2JqZWN0IiwiYm94IiwiaXNFbXB0eSIsImdldENlbnRlciIsImdldFNpemUiLCJwb2ludCIsImV4cGFuZEJ5VmVjdG9yIiwidmVjdG9yIiwiZXhwYW5kQnlTY2FsYXIiLCJ1cGRhdGVXb3JsZE1hdHJpeCIsImdlb21ldHJ5IiwicG9zaXRpb25BdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJpc0luc3RhbmNlZE1lc2giLCJpc01lc2giLCJnZXRWZXJ0ZXhQb3NpdGlvbiIsImJvdW5kaW5nQm94IiwiY29tcHV0ZUJvdW5kaW5nQm94IiwiX2JveCQ0IiwidW5pb24iLCJjaGlsZHJlbiIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0JveCIsImdldFBhcmFtZXRlciIsImludGVyc2VjdHNCb3giLCJpbnRlcnNlY3RzU3BoZXJlIiwic3BoZXJlIiwiY2xhbXBQb2ludCIsImludGVyc2VjdHNQbGFuZSIsInBsYW5lIiwiY29uc3RhbnQiLCJpbnRlcnNlY3RzVHJpYW5nbGUiLCJ0cmlhbmdsZSIsIl9jZW50ZXIiLCJfZXh0ZW50cyIsIl92MCQyIiwiX3YxJDciLCJfdjIkNCIsIl9mMCIsIl9mMSIsIl9mMiIsImF4ZXMiLCJzYXRGb3JBeGVzIiwiX3RyaWFuZ2xlTm9ybWFsIiwiZGlzdGFuY2VUb1BvaW50IiwiZ2V0Qm91bmRpbmdTcGhlcmUiLCJpbnRlcnNlY3QiLCJfcG9pbnRzIiwiX3Rlc3RBeGlzIiwidjAiLCJleHRlbnRzIiwiaiIsInAwIiwicDEiLCJwMiIsIl9ib3gkMyIsIl92MSQ2IiwiX3YyJDMiLCJTcGhlcmUiLCJpc1NwaGVyZSIsIm9wdGlvbmFsQ2VudGVyIiwibWF4UmFkaXVzU3EiLCJyYWRpdXNTdW0iLCJkZWx0YUxlbmd0aFNxIiwiZ2V0Qm91bmRpbmdCb3giLCJnZXRNYXhTY2FsZU9uQXhpcyIsImRlbHRhIiwiX3ZlY3RvciRhIiwiX3NlZ0NlbnRlciIsIl9zZWdEaXIiLCJfZGlmZiIsIl9lZGdlMSIsIl9lZGdlMiIsIl9ub3JtYWwkMSIsIlJheSIsIm9yaWdpbiIsImRpcmVjdGlvbiIsInJheSIsImF0IiwibG9va0F0IiwicmVjYXN0IiwiY2xvc2VzdFBvaW50VG9Qb2ludCIsImRpcmVjdGlvbkRpc3RhbmNlIiwiZGlzdGFuY2VTcVRvUG9pbnQiLCJkaXN0YW5jZVNxVG9TZWdtZW50Iiwib3B0aW9uYWxQb2ludE9uUmF5Iiwib3B0aW9uYWxQb2ludE9uU2VnbWVudCIsInNlZ0V4dGVudCIsImEwMSIsImIwIiwiczAiLCJzcXJEaXN0IiwiZXh0RGV0IiwiaW52RGV0IiwiaW50ZXJzZWN0U3BoZXJlIiwidGNhIiwicmFkaXVzMiIsInRoYyIsInQwIiwidDEiLCJkaXN0YW5jZVRvUGxhbmUiLCJpbnRlcnNlY3RQbGFuZSIsImRpc3RUb1BvaW50IiwiaW50ZXJzZWN0Qm94IiwidG1pbiIsInRtYXgiLCJ0eW1pbiIsInR5bWF4IiwidHptaW4iLCJ0em1heCIsImludmRpcngiLCJpbnZkaXJ5IiwiaW52ZGlyeiIsImlzTmFOIiwiaW50ZXJzZWN0VHJpYW5nbGUiLCJiYWNrZmFjZUN1bGxpbmciLCJzaWduIiwiRGROIiwiRGRReEUyIiwiRGRFMXhRIiwiUWROIiwiTWF0cml4NCIsIm4xNCIsIm4yNCIsIm4zNCIsIm40MSIsIm40MiIsIm40MyIsIm40NCIsImlzTWF0cml4NCIsImNvcHlQb3NpdGlvbiIsInNldEZyb21NYXRyaXgzIiwibWFrZUJhc2lzIiwiZXh0cmFjdFJvdGF0aW9uIiwic2NhbGVYIiwiX3YxJDUiLCJzY2FsZVkiLCJzY2FsZVoiLCJtYWtlUm90YXRpb25Gcm9tRXVsZXIiLCJhZiIsImJmIiwiY2UiLCJjZiIsImRlIiwiZGYiLCJhYyIsImFkIiwiYmMiLCJiZCIsIm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uIiwiY29tcG9zZSIsIl96ZXJvIiwiX29uZSIsImV5ZSIsInVwIiwiYTE0IiwiYTI0IiwiYTM0IiwiYTQxIiwiYTQyIiwiYTQzIiwiYTQ0IiwiYjE0IiwiYjI0IiwiYjM0IiwiYjQxIiwiYjQyIiwiYjQzIiwiYjQ0Iiwic2V0UG9zaXRpb24iLCJ0MTQiLCJzY2FsZVhTcSIsInNjYWxlWVNxIiwic2NhbGVaU3EiLCJtYWtlUm90YXRpb25YIiwibWFrZVJvdGF0aW9uWSIsIm1ha2VSb3RhdGlvbloiLCJtYWtlUm90YXRpb25BeGlzIiwibWFrZVNoZWFyIiwieXgiLCJ6eCIsInp5IiwicG9zaXRpb24iLCJ4MiIsInkyIiwiejIiLCJ3eCIsInd5Iiwid3oiLCJkZWNvbXBvc2UiLCJfbTEkNCIsImludlNYIiwiaW52U1kiLCJpbnZTWiIsIm1ha2VQZXJzcGVjdGl2ZSIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIm5lYXIiLCJmYXIiLCJjb29yZGluYXRlU3lzdGVtIiwibWFrZU9ydGhvZ3JhcGhpYyIsInAiLCJ6SW52IiwiX21hdHJpeCQyIiwiX3F1YXRlcm5pb24kMyIsIkV1bGVyIiwiREVGQVVMVF9PUkRFUiIsImlzRXVsZXIiLCJhc2luIiwic2V0RnJvbVF1YXRlcm5pb24iLCJzZXRGcm9tVmVjdG9yMyIsInJlb3JkZXIiLCJuZXdPcmRlciIsIkxheWVycyIsIm1hc2siLCJlbmFibGUiLCJlbmFibGVBbGwiLCJ0b2dnbGUiLCJkaXNhYmxlIiwiZGlzYWJsZUFsbCIsImxheWVycyIsImlzRW5hYmxlZCIsIl9vYmplY3QzRElkIiwiX3YxJDQiLCJfcTEiLCJfbTEkMyIsIl90YXJnZXQiLCJfcG9zaXRpb24kMyIsIl9zY2FsZSQyIiwiX3F1YXRlcm5pb24kMiIsIl94QXhpcyIsIl95QXhpcyIsIl96QXhpcyIsIl9hZGRlZEV2ZW50IiwiX3JlbW92ZWRFdmVudCIsIl9jaGlsZGFkZGVkRXZlbnQiLCJjaGlsZCIsIl9jaGlsZHJlbW92ZWRFdmVudCIsIk9iamVjdDNEIiwiaXNPYmplY3QzRCIsInBhcmVudCIsIkRFRkFVTFRfVVAiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIm1vZGVsVmlld01hdHJpeCIsIm5vcm1hbE1hdHJpeCIsIkRFRkFVTFRfTUFUUklYX0FVVE9fVVBEQVRFIiwibWF0cml4V29ybGRBdXRvVXBkYXRlIiwiREVGQVVMVF9NQVRSSVhfV09STERfQVVUT19VUERBVEUiLCJtYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwidmlzaWJsZSIsImNhc3RTaGFkb3ciLCJyZWNlaXZlU2hhZG93IiwiZnJ1c3R1bUN1bGxlZCIsInJlbmRlck9yZGVyIiwiYW5pbWF0aW9ucyIsIm9uQmVmb3JlU2hhZG93Iiwib25BZnRlclNoYWRvdyIsIm9uQmVmb3JlUmVuZGVyIiwib25BZnRlclJlbmRlciIsInNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZSIsInNldFJvdGF0aW9uRnJvbUV1bGVyIiwic2V0Um90YXRpb25Gcm9tTWF0cml4Iiwic2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbiIsInJvdGF0ZU9uQXhpcyIsInJvdGF0ZU9uV29ybGRBeGlzIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwidHJhbnNsYXRlT25BeGlzIiwiZGlzdGFuY2UiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJsb2NhbFRvV29ybGQiLCJ3b3JsZFRvTG9jYWwiLCJpc0NhbWVyYSIsImlzTGlnaHQiLCJhcmd1bWVudHMiLCJlcnJvciIsInJlbW92ZUZyb21QYXJlbnQiLCJyZW1vdmUiLCJhdHRhY2giLCJnZXRPYmplY3RCeUlkIiwiaWQiLCJnZXRPYmplY3RCeVByb3BlcnR5IiwiZ2V0T2JqZWN0QnlOYW1lIiwiZ2V0T2JqZWN0c0J5UHJvcGVydHkiLCJyZXN1bHQiLCJnZXRXb3JsZFBvc2l0aW9uIiwiZ2V0V29ybGRRdWF0ZXJuaW9uIiwiZ2V0V29ybGRTY2FsZSIsImdldFdvcmxkRGlyZWN0aW9uIiwicmF5Y2FzdCIsInRyYXZlcnNlIiwidHJhdmVyc2VWaXNpYmxlIiwidHJhdmVyc2VBbmNlc3RvcnMiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsImZvcmNlIiwidXBkYXRlUGFyZW50cyIsInVwZGF0ZUNoaWxkcmVuIiwiZ2VvbWV0cmllcyIsIm1hdGVyaWFscyIsInNoYXBlcyIsInNrZWxldG9ucyIsIm5vZGVzIiwic2VyaWFsaXplIiwibGlicmFyeSIsImVsZW1lbnQiLCJpbnN0YW5jZU1hdHJpeCIsImluc3RhbmNlQ29sb3IiLCJpc0JhdGNoZWRNZXNoIiwicGVyT2JqZWN0RnJ1c3R1bUN1bGxlZCIsInNvcnRPYmplY3RzIiwiZHJhd1JhbmdlcyIsIl9kcmF3UmFuZ2VzIiwicmVzZXJ2ZWRSYW5nZXMiLCJfcmVzZXJ2ZWRSYW5nZXMiLCJ2aXNpYmlsaXR5IiwiX3Zpc2liaWxpdHkiLCJhY3RpdmUiLCJfYWN0aXZlIiwiYm91bmRzIiwiX2JvdW5kcyIsIm1hcCIsImJvdW5kIiwiYm94SW5pdGlhbGl6ZWQiLCJib3hNaW4iLCJib3hNYXgiLCJzcGhlcmVJbml0aWFsaXplZCIsInNwaGVyZVJhZGl1cyIsInNwaGVyZUNlbnRlciIsIm1heEluc3RhbmNlQ291bnQiLCJfbWF4SW5zdGFuY2VDb3VudCIsIm1heFZlcnRleENvdW50IiwiX21heFZlcnRleENvdW50IiwibWF4SW5kZXhDb3VudCIsIl9tYXhJbmRleENvdW50IiwiZ2VvbWV0cnlJbml0aWFsaXplZCIsIl9nZW9tZXRyeUluaXRpYWxpemVkIiwiZ2VvbWV0cnlDb3VudCIsIl9nZW9tZXRyeUNvdW50IiwibWF0cmljZXNUZXh0dXJlIiwiX21hdHJpY2VzVGV4dHVyZSIsIl9jb2xvcnNUZXh0dXJlIiwiY29sb3JzVGV4dHVyZSIsImJvdW5kaW5nU3BoZXJlIiwiaXNTY2VuZSIsImJhY2tncm91bmQiLCJpc0NvbG9yIiwiZW52aXJvbm1lbnQiLCJpc0xpbmUiLCJpc1BvaW50cyIsInBhcmFtZXRlcnMiLCJzaGFwZSIsImlzU2tpbm5lZE1lc2giLCJiaW5kTW9kZSIsImJpbmRNYXRyaXgiLCJza2VsZXRvbiIsIm1hdGVyaWFsIiwidXVpZHMiLCJhbmltYXRpb24iLCJleHRyYWN0RnJvbUNhY2hlIiwiY2FjaGUiLCJ2YWx1ZXMiLCJrZXkiLCJyZWN1cnNpdmUiLCJfdjAkMSIsIl92MSQzIiwiX3YyJDIiLCJfdjMkMiIsIl92YWIiLCJfdmFjIiwiX3ZiYyIsIl92YXAiLCJfdmJwIiwiX3ZjcCIsIlRyaWFuZ2xlIiwiZ2V0Tm9ybWFsIiwidGFyZ2V0TGVuZ3RoU3EiLCJnZXRCYXJ5Y29vcmQiLCJkb3QwMCIsImRvdDAxIiwiZG90MDIiLCJkb3QxMSIsImRvdDEyIiwiZGVub20iLCJpbnZEZW5vbSIsImdldEludGVycG9sYXRpb24iLCJwMyIsInYzIiwiaXNGcm9udEZhY2luZyIsInNldEZyb21Qb2ludHNBbmRJbmRpY2VzIiwiaTAiLCJpMSIsImkyIiwic2V0RnJvbUF0dHJpYnV0ZUFuZEluZGljZXMiLCJnZXRBcmVhIiwiZ2V0TWlkcG9pbnQiLCJnZXRQbGFuZSIsInNldEZyb21Db3BsYW5hclBvaW50cyIsImQ0IiwidmMiLCJkNSIsImQ2IiwidmIiLCJ2YSIsIl9jb2xvcktleXdvcmRzIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJfaHNsQSIsIl9oc2xCIiwiaHVlMnJnYiIsIkNvbG9yIiwic2V0SGV4Iiwic2V0U3R5bGUiLCJzZXRSR0IiLCJoZXgiLCJzZXRIU0wiLCJoYW5kbGVBbHBoYSIsInN0cmluZyIsInBhcnNlRmxvYXQiLCJleGVjIiwiY29tcG9uZW50cyIsInBhcnNlSW50IiwiY2hhckF0Iiwic2V0Q29sb3JOYW1lIiwiY29weVNSR0JUb0xpbmVhciIsImNvcHlMaW5lYXJUb1NSR0IiLCJnZXRIZXgiLCJfY29sb3IiLCJnZXRIZXhTdHJpbmciLCJ0b1N0cmluZyIsImdldEhTTCIsImh1ZSIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJnZXRSR0IiLCJnZXRTdHlsZSIsInRvRml4ZWQiLCJvZmZzZXRIU0wiLCJhZGRDb2xvcnMiLCJjb2xvcjEiLCJjb2xvcjIiLCJsZXJwQ29sb3JzIiwibGVycEhTTCIsIk5BTUVTIiwiX21hdGVyaWFsSWQiLCJNYXRlcmlhbCIsImlzTWF0ZXJpYWwiLCJibGVuZGluZyIsInNpZGUiLCJ2ZXJ0ZXhDb2xvcnMiLCJvcGFjaXR5IiwidHJhbnNwYXJlbnQiLCJhbHBoYUhhc2giLCJibGVuZFNyYyIsImJsZW5kRHN0IiwiYmxlbmRFcXVhdGlvbiIsImJsZW5kU3JjQWxwaGEiLCJibGVuZERzdEFscGhhIiwiYmxlbmRFcXVhdGlvbkFscGhhIiwiYmxlbmRDb2xvciIsImJsZW5kQWxwaGEiLCJkZXB0aEZ1bmMiLCJkZXB0aFRlc3QiLCJkZXB0aFdyaXRlIiwic3RlbmNpbFdyaXRlTWFzayIsInN0ZW5jaWxGdW5jIiwic3RlbmNpbFJlZiIsInN0ZW5jaWxGdW5jTWFzayIsInN0ZW5jaWxGYWlsIiwic3RlbmNpbFpGYWlsIiwic3RlbmNpbFpQYXNzIiwic3RlbmNpbFdyaXRlIiwiY2xpcHBpbmdQbGFuZXMiLCJjbGlwSW50ZXJzZWN0aW9uIiwiY2xpcFNoYWRvd3MiLCJzaGFkb3dTaWRlIiwiY29sb3JXcml0ZSIsInByZWNpc2lvbiIsInBvbHlnb25PZmZzZXQiLCJwb2x5Z29uT2Zmc2V0RmFjdG9yIiwicG9seWdvbk9mZnNldFVuaXRzIiwiZGl0aGVyaW5nIiwiYWxwaGFUb0NvdmVyYWdlIiwicHJlbXVsdGlwbGllZEFscGhhIiwiZm9yY2VTaW5nbGVQYXNzIiwidG9uZU1hcHBlZCIsIl9hbHBoYVRlc3QiLCJhbHBoYVRlc3QiLCJvbkJlZm9yZUNvbXBpbGUiLCJjdXN0b21Qcm9ncmFtQ2FjaGVLZXkiLCJzZXRWYWx1ZXMiLCJuZXdWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsInJvdWdobmVzcyIsIm1ldGFsbmVzcyIsInNoZWVuIiwic2hlZW5Db2xvciIsInNoZWVuUm91Z2huZXNzIiwiZW1pc3NpdmUiLCJlbWlzc2l2ZUludGVuc2l0eSIsInNwZWN1bGFyIiwic3BlY3VsYXJJbnRlbnNpdHkiLCJzcGVjdWxhckNvbG9yIiwic2hpbmluZXNzIiwiY2xlYXJjb2F0IiwiY2xlYXJjb2F0Um91Z2huZXNzIiwiY2xlYXJjb2F0TWFwIiwiY2xlYXJjb2F0Um91Z2huZXNzTWFwIiwiY2xlYXJjb2F0Tm9ybWFsTWFwIiwiY2xlYXJjb2F0Tm9ybWFsU2NhbGUiLCJkaXNwZXJzaW9uIiwiaXJpZGVzY2VuY2UiLCJpcmlkZXNjZW5jZUlPUiIsImlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2UiLCJpcmlkZXNjZW5jZU1hcCIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwIiwiYW5pc290cm9weVJvdGF0aW9uIiwiYW5pc290cm9weU1hcCIsIm1hdGNhcCIsImFscGhhTWFwIiwibGlnaHRNYXAiLCJsaWdodE1hcEludGVuc2l0eSIsImFvTWFwIiwiYW9NYXBJbnRlbnNpdHkiLCJidW1wTWFwIiwiYnVtcFNjYWxlIiwibm9ybWFsTWFwIiwibm9ybWFsTWFwVHlwZSIsIm5vcm1hbFNjYWxlIiwiZGlzcGxhY2VtZW50TWFwIiwiZGlzcGxhY2VtZW50U2NhbGUiLCJkaXNwbGFjZW1lbnRCaWFzIiwicm91Z2huZXNzTWFwIiwibWV0YWxuZXNzTWFwIiwiZW1pc3NpdmVNYXAiLCJzcGVjdWxhck1hcCIsInNwZWN1bGFySW50ZW5zaXR5TWFwIiwic3BlY3VsYXJDb2xvck1hcCIsImVudk1hcCIsImNvbWJpbmUiLCJlbnZNYXBSb3RhdGlvbiIsImVudk1hcEludGVuc2l0eSIsInJlZmxlY3Rpdml0eSIsInJlZnJhY3Rpb25SYXRpbyIsImdyYWRpZW50TWFwIiwidHJhbnNtaXNzaW9uIiwidHJhbnNtaXNzaW9uTWFwIiwidGhpY2tuZXNzIiwidGhpY2tuZXNzTWFwIiwiYXR0ZW51YXRpb25EaXN0YW5jZSIsImF0dGVudWF0aW9uQ29sb3IiLCJzaXplQXR0ZW51YXRpb24iLCJsaW5ld2lkdGgiLCJkYXNoU2l6ZSIsImdhcFNpemUiLCJ3aXJlZnJhbWUiLCJ3aXJlZnJhbWVMaW5ld2lkdGgiLCJ3aXJlZnJhbWVMaW5lY2FwIiwid2lyZWZyYW1lTGluZWpvaW4iLCJmbGF0U2hhZGluZyIsImZvZyIsInNyY1BsYW5lcyIsImRzdFBsYW5lcyIsIm9uQnVpbGQiLCJNZXNoQmFzaWNNYXRlcmlhbCIsImlzTWVzaEJhc2ljTWF0ZXJpYWwiLCJfdGFibGVzIiwiX2dlbmVyYXRlVGFibGVzIiwiQXJyYXlCdWZmZXIiLCJmbG9hdFZpZXciLCJ1aW50MzJWaWV3IiwiYmFzZVRhYmxlIiwic2hpZnRUYWJsZSIsIm1hbnRpc3NhVGFibGUiLCJleHBvbmVudFRhYmxlIiwib2Zmc2V0VGFibGUiLCJ0b0hhbGZGbG9hdCIsInZhbCIsImZyb21IYWxmRmxvYXQiLCJEYXRhVXRpbHMiLCJfdmVjdG9yJDkiLCJfdmVjdG9yMiQxIiwiQnVmZmVyQXR0cmlidXRlIiwiaXRlbVNpemUiLCJub3JtYWxpemVkIiwiVHlwZUVycm9yIiwiaXNCdWZmZXJBdHRyaWJ1dGUiLCJ1c2FnZSIsIl91cGRhdGVSYW5nZSIsInVwZGF0ZVJhbmdlcyIsImdwdVR5cGUiLCJvblVwbG9hZENhbGxiYWNrIiwidXBkYXRlUmFuZ2UiLCJzZXRVc2FnZSIsImFkZFVwZGF0ZVJhbmdlIiwic3RhcnQiLCJjbGVhclVwZGF0ZVJhbmdlcyIsImNvcHlBdCIsImluZGV4MSIsImluZGV4MiIsImNvcHlBcnJheSIsInNldFhZIiwic2V0WFlaIiwiY29tcG9uZW50Iiwic2V0WFlaVyIsIm9uVXBsb2FkIiwiSW50OEJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQ4QnVmZmVyQXR0cmlidXRlIiwiVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlIiwiSW50MTZCdWZmZXJBdHRyaWJ1dGUiLCJVaW50MTZCdWZmZXJBdHRyaWJ1dGUiLCJJbnQzMkJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSIsIkZsb2F0MTZCdWZmZXJBdHRyaWJ1dGUiLCJpc0Zsb2F0MTZCdWZmZXJBdHRyaWJ1dGUiLCJGbG9hdDMyQnVmZmVyQXR0cmlidXRlIiwiX2lkJDIiLCJfbTEkMiIsIl9vYmoiLCJfb2Zmc2V0IiwiX2JveCQyIiwiX2JveE1vcnBoVGFyZ2V0cyIsIl92ZWN0b3IkOCIsIkJ1ZmZlckdlb21ldHJ5IiwiaXNCdWZmZXJHZW9tZXRyeSIsImF0dHJpYnV0ZXMiLCJtb3JwaEF0dHJpYnV0ZXMiLCJtb3JwaFRhcmdldHNSZWxhdGl2ZSIsImdyb3VwcyIsImRyYXdSYW5nZSIsImdldEluZGV4Iiwic2V0SW5kZXgiLCJzZXRBdHRyaWJ1dGUiLCJkZWxldGVBdHRyaWJ1dGUiLCJoYXNBdHRyaWJ1dGUiLCJhZGRHcm91cCIsIm1hdGVyaWFsSW5kZXgiLCJjbGVhckdyb3VwcyIsInNldERyYXdSYW5nZSIsInRhbmdlbnQiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiIsImlzR0xCdWZmZXJBdHRyaWJ1dGUiLCJtb3JwaEF0dHJpYnV0ZSIsImpsIiwiY29tcHV0ZVRhbmdlbnRzIiwibm9ybWFsQXR0cmlidXRlIiwidXZBdHRyaWJ1dGUiLCJ0YW5nZW50QXR0cmlidXRlIiwidGFuMSIsInRhbjIiLCJ2QSIsInZCIiwidkMiLCJ1dkEiLCJ1dkIiLCJ1dkMiLCJzZGlyIiwidGRpciIsImhhbmRsZVRyaWFuZ2xlIiwiaXNGaW5pdGUiLCJncm91cCIsInRtcDIiLCJuMiIsImhhbmRsZVZlcnRleCIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwicEEiLCJwQiIsInBDIiwibkEiLCJuQiIsIm5DIiwiY2IiLCJhYiIsIm5vcm1hbGl6ZU5vcm1hbHMiLCJub3JtYWxzIiwidG9Ob25JbmRleGVkIiwiY29udmVydEJ1ZmZlckF0dHJpYnV0ZSIsImluZGljZXMiLCJhcnJheTIiLCJpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwic3RyaWRlIiwiZ2VvbWV0cnkyIiwibmV3QXR0cmlidXRlIiwibW9ycGhBcnJheSIsImhhc01vcnBoQXR0cmlidXRlcyIsImF0dHJpYnV0ZUFycmF5IiwiX2ludmVyc2VNYXRyaXgkMyIsIl9yYXkkMyIsIl9zcGhlcmUkNiIsIl9zcGhlcmVIaXRBdCIsIl92QSQxIiwiX3ZCJDEiLCJfdkMkMSIsIl90ZW1wQSIsIl9tb3JwaEEiLCJfdXZBJDEiLCJfdXZCJDEiLCJfdXZDJDEiLCJfbm9ybWFsQSIsIl9ub3JtYWxCIiwiX25vcm1hbEMiLCJfaW50ZXJzZWN0aW9uUG9pbnQiLCJfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCIsIk1lc2giLCJ1cGRhdGVNb3JwaFRhcmdldHMiLCJtb3JwaFRhcmdldEluZmx1ZW5jZXMiLCJtb3JwaFRhcmdldERpY3Rpb25hcnkiLCJtbCIsIlN0cmluZyIsIm1vcnBoUG9zaXRpb24iLCJtb3JwaEluZmx1ZW5jZXMiLCJpbmZsdWVuY2UiLCJyYXljYXN0ZXIiLCJpbnRlcnNlY3RzIiwiX2NvbXB1dGVJbnRlcnNlY3Rpb25zIiwicmF5TG9jYWxTcGFjZSIsImludGVyc2VjdGlvbiIsInV2MSIsImdyb3VwTWF0ZXJpYWwiLCJjaGVja0dlb21ldHJ5SW50ZXJzZWN0aW9uIiwiZmFjZUluZGV4IiwiZmFjZSIsImNoZWNrSW50ZXJzZWN0aW9uJDEiLCJCb3hHZW9tZXRyeSIsIndpZHRoU2VnbWVudHMiLCJoZWlnaHRTZWdtZW50cyIsImRlcHRoU2VnbWVudHMiLCJzY29wZSIsInZlcnRpY2VzIiwidXZzIiwibnVtYmVyT2ZWZXJ0aWNlcyIsImdyb3VwU3RhcnQiLCJidWlsZFBsYW5lIiwidWRpciIsInZkaXIiLCJncmlkWCIsImdyaWRZIiwic2VnbWVudFdpZHRoIiwic2VnbWVudEhlaWdodCIsIndpZHRoSGFsZiIsImhlaWdodEhhbGYiLCJkZXB0aEhhbGYiLCJncmlkWDEiLCJncmlkWTEiLCJ2ZXJ0ZXhDb3VudGVyIiwiZ3JvdXBDb3VudCIsIml5IiwiaXgiLCJmcm9tSlNPTiIsImNsb25lVW5pZm9ybXMiLCJwcm9wZXJ0eSIsIm1lcmdlVW5pZm9ybXMiLCJ1bmlmb3JtcyIsIm1lcmdlZCIsImdldFVubGl0VW5pZm9ybUNvbG9yU3BhY2UiLCJyZW5kZXJlciIsImN1cnJlbnRSZW5kZXJUYXJnZXQiLCJnZXRSZW5kZXJUYXJnZXQiLCJvdXRwdXRDb2xvclNwYWNlIiwiaXNYUlJlbmRlclRhcmdldCIsIlVuaWZvcm1zVXRpbHMiLCJtZXJnZSIsIlNoYWRlck1hdGVyaWFsIiwiaXNTaGFkZXJNYXRlcmlhbCIsImRlZmluZXMiLCJ1bmlmb3Jtc0dyb3VwcyIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwibGlnaHRzIiwiY2xpcHBpbmciLCJleHRlbnNpb25zIiwiY2xpcEN1bGxEaXN0YW5jZSIsIm11bHRpRHJhdyIsImRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJpbmRleDBBdHRyaWJ1dGVOYW1lIiwidW5pZm9ybXNOZWVkVXBkYXRlIiwiZ2xzbFZlcnNpb24iLCJjbG9uZVVuaWZvcm1zR3JvdXBzIiwiQ2FtZXJhIiwiX3YzJDEiLCJfbWluVGFyZ2V0IiwiX21heFRhcmdldCIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiZm92IiwiYXNwZWN0IiwiaXNQZXJzcGVjdGl2ZUNhbWVyYSIsInpvb20iLCJmb2N1cyIsInZpZXciLCJmaWxtR2F1Z2UiLCJmaWxtT2Zmc2V0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsInNldEZvY2FsTGVuZ3RoIiwiZm9jYWxMZW5ndGgiLCJ2RXh0ZW50U2xvcGUiLCJnZXRGaWxtSGVpZ2h0IiwiYXRhbiIsImdldEZvY2FsTGVuZ3RoIiwiZ2V0RWZmZWN0aXZlRk9WIiwiZ2V0RmlsbVdpZHRoIiwiZ2V0Vmlld0JvdW5kcyIsIm1pblRhcmdldCIsIm1heFRhcmdldCIsImdldFZpZXdTaXplIiwic2V0Vmlld09mZnNldCIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNsZWFyVmlld09mZnNldCIsInNrZXciLCJDdWJlQ2FtZXJhIiwicmVuZGVyVGFyZ2V0IiwiYWN0aXZlTWlwbWFwTGV2ZWwiLCJjYW1lcmFQWCIsImNhbWVyYU5YIiwiY2FtZXJhUFkiLCJjYW1lcmFOWSIsImNhbWVyYVBaIiwiY2FtZXJhTloiLCJ1cGRhdGVDb29yZGluYXRlU3lzdGVtIiwiY2FtZXJhcyIsImNvbmNhdCIsInNjZW5lIiwiY3VycmVudEFjdGl2ZUN1YmVGYWNlIiwiZ2V0QWN0aXZlQ3ViZUZhY2UiLCJjdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwiLCJnZXRBY3RpdmVNaXBtYXBMZXZlbCIsImN1cnJlbnRYckVuYWJsZWQiLCJ4ciIsInNldFJlbmRlclRhcmdldCIsInJlbmRlciIsIkN1YmVUZXh0dXJlIiwiaXNDdWJlVGV4dHVyZSIsIldlYkdMQ3ViZVJlbmRlclRhcmdldCIsImlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IiwiZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUiLCJzaGFkZXIiLCJ0RXF1aXJlY3QiLCJtZXNoIiwiY3VycmVudE1pbkZpbHRlciIsInN0ZW5jaWwiLCJfdmVjdG9yMSIsIl92ZWN0b3IyIiwiX25vcm1hbE1hdHJpeCIsIlBsYW5lIiwiaXNQbGFuZSIsInNldENvbXBvbmVudHMiLCJzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCIsImludmVyc2VOb3JtYWxMZW5ndGgiLCJkaXN0YW5jZVRvU3BoZXJlIiwicHJvamVjdFBvaW50IiwiaW50ZXJzZWN0TGluZSIsImxpbmUiLCJpbnRlcnNlY3RzTGluZSIsInN0YXJ0U2lnbiIsImVuZFNpZ24iLCJlbmQiLCJjb3BsYW5hclBvaW50Iiwib3B0aW9uYWxOb3JtYWxNYXRyaXgiLCJyZWZlcmVuY2VQb2ludCIsIl9zcGhlcmUkNSIsIl92ZWN0b3IkNyIsIkZydXN0dW0iLCJwNCIsInA1IiwicGxhbmVzIiwiZnJ1c3R1bSIsInNldEZyb21Qcm9qZWN0aW9uTWF0cml4IiwibWUwIiwibWUxIiwibWUyIiwibWUzIiwibWU0IiwibWU1IiwibWU2IiwibWU3IiwibWU4IiwibWU5IiwibWUxMCIsIm1lMTEiLCJtZTEyIiwibWUxMyIsIm1lMTQiLCJtZTE1IiwiaW50ZXJzZWN0c09iamVjdCIsImludGVyc2VjdHNTcHJpdGUiLCJzcHJpdGUiLCJuZWdSYWRpdXMiLCJXZWJHTEFuaW1hdGlvbiIsImlzQW5pbWF0aW5nIiwiYW5pbWF0aW9uTG9vcCIsInJlcXVlc3RJZCIsIm9uQW5pbWF0aW9uRnJhbWUiLCJ0aW1lIiwiZnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdG9wIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzZXRBbmltYXRpb25Mb29wIiwic2V0Q29udGV4dCIsIldlYkdMQXR0cmlidXRlcyIsImdsIiwiYnVmZmVycyIsIldlYWtNYXAiLCJnZXQiLCJkZWxldGVCdWZmZXIiLCJkZWxldGUiLCJidWZmZXJUeXBlIiwiY2FjaGVkIiwiYnl0ZXNQZXJFbGVtZW50IiwiZWxlbWVudFNpemUiLCJieXRlTGVuZ3RoIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJGTE9BVCIsIkhBTEZfRkxPQVQiLCJVTlNJR05FRF9TSE9SVCIsIlNIT1JUIiwiVU5TSUdORURfSU5UIiwiSU5UIiwiQllURSIsIlVOU0lHTkVEX0JZVEUiLCJCWVRFU19QRVJfRUxFTUVOVCIsImJ1ZmZlclN1YkRhdGEiLCJ1cGRhdGVCdWZmZXIiLCJQbGFuZUdlb21ldHJ5Iiwid2lkdGhfaGFsZiIsImhlaWdodF9oYWxmIiwic2VnbWVudF93aWR0aCIsInNlZ21lbnRfaGVpZ2h0IiwiU2hhZGVyQ2h1bmsiLCJhbHBoYWhhc2hfZnJhZ21lbnQiLCJhbHBoYWhhc2hfcGFyc19mcmFnbWVudCIsImFscGhhbWFwX2ZyYWdtZW50IiwiYWxwaGFtYXBfcGFyc19mcmFnbWVudCIsImFscGhhdGVzdF9mcmFnbWVudCIsImFscGhhdGVzdF9wYXJzX2ZyYWdtZW50IiwiYW9tYXBfZnJhZ21lbnQiLCJhb21hcF9wYXJzX2ZyYWdtZW50IiwiYmF0Y2hpbmdfcGFyc192ZXJ0ZXgiLCJiYXRjaGluZ192ZXJ0ZXgiLCJiZWdpbl92ZXJ0ZXgiLCJiZWdpbm5vcm1hbF92ZXJ0ZXgiLCJic2RmcyIsImlyaWRlc2NlbmNlX2ZyYWdtZW50IiwiYnVtcG1hcF9wYXJzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgiLCJjbGlwcGluZ19wbGFuZXNfdmVydGV4IiwiY29sb3JfZnJhZ21lbnQiLCJjb2xvcl9wYXJzX2ZyYWdtZW50IiwiY29sb3JfcGFyc192ZXJ0ZXgiLCJjb2xvcl92ZXJ0ZXgiLCJjb21tb24iLCJjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQiLCJkZWZhdWx0bm9ybWFsX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF92ZXJ0ZXgiLCJlbWlzc2l2ZW1hcF9mcmFnbWVudCIsImVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQiLCJjb2xvcnNwYWNlX2ZyYWdtZW50IiwiY29sb3JzcGFjZV9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX2ZyYWdtZW50IiwiZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfcGFyc192ZXJ0ZXgiLCJlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCIsImVudm1hcF92ZXJ0ZXgiLCJmb2dfdmVydGV4IiwiZm9nX3BhcnNfdmVydGV4IiwiZm9nX2ZyYWdtZW50IiwiZm9nX3BhcnNfZnJhZ21lbnQiLCJncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50IiwibGlnaHRtYXBfcGFyc19mcmFnbWVudCIsImxpZ2h0c19sYW1iZXJ0X2ZyYWdtZW50IiwibGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudCIsImxpZ2h0c19wYXJzX2JlZ2luIiwibGlnaHRzX3Rvb25fZnJhZ21lbnQiLCJsaWdodHNfdG9vbl9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX3Bob25nX2ZyYWdtZW50IiwibGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCIsImxpZ2h0c19mcmFnbWVudF9iZWdpbiIsImxpZ2h0c19mcmFnbWVudF9tYXBzIiwibGlnaHRzX2ZyYWdtZW50X2VuZCIsImxvZ2RlcHRoYnVmX2ZyYWdtZW50IiwibG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCIsImxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4IiwibG9nZGVwdGhidWZfdmVydGV4IiwibWFwX2ZyYWdtZW50IiwibWFwX3BhcnNfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50IiwibW9ycGhpbnN0YW5jZV92ZXJ0ZXgiLCJtb3JwaGNvbG9yX3ZlcnRleCIsIm1vcnBobm9ybWFsX3ZlcnRleCIsIm1vcnBodGFyZ2V0X3BhcnNfdmVydGV4IiwibW9ycGh0YXJnZXRfdmVydGV4Iiwibm9ybWFsX2ZyYWdtZW50X2JlZ2luIiwibm9ybWFsX2ZyYWdtZW50X21hcHMiLCJub3JtYWxfcGFyc19mcmFnbWVudCIsIm5vcm1hbF9wYXJzX3ZlcnRleCIsIm5vcm1hbF92ZXJ0ZXgiLCJub3JtYWxtYXBfcGFyc19mcmFnbWVudCIsImNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4iLCJjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHMiLCJjbGVhcmNvYXRfcGFyc19mcmFnbWVudCIsImlyaWRlc2NlbmNlX3BhcnNfZnJhZ21lbnQiLCJvcGFxdWVfZnJhZ21lbnQiLCJwYWNraW5nIiwicHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudCIsInByb2plY3RfdmVydGV4IiwiZGl0aGVyaW5nX2ZyYWdtZW50IiwiZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQiLCJyb3VnaG5lc3NtYXBfZnJhZ21lbnQiLCJyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCIsInNoYWRvd21hcF9wYXJzX2ZyYWdtZW50Iiwic2hhZG93bWFwX3BhcnNfdmVydGV4Iiwic2hhZG93bWFwX3ZlcnRleCIsInNoYWRvd21hc2tfcGFyc19mcmFnbWVudCIsInNraW5iYXNlX3ZlcnRleCIsInNraW5uaW5nX3BhcnNfdmVydGV4Iiwic2tpbm5pbmdfdmVydGV4Iiwic2tpbm5vcm1hbF92ZXJ0ZXgiLCJzcGVjdWxhcm1hcF9mcmFnbWVudCIsInNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQiLCJ0b25lbWFwcGluZ19mcmFnbWVudCIsInRvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQiLCJ0cmFuc21pc3Npb25fZnJhZ21lbnQiLCJ0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudCIsInV2X3BhcnNfZnJhZ21lbnQiLCJ1dl9wYXJzX3ZlcnRleCIsInV2X3ZlcnRleCIsIndvcmxkcG9zX3ZlcnRleCIsImJhY2tncm91bmRfdmVydCIsImJhY2tncm91bmRfZnJhZyIsImJhY2tncm91bmRDdWJlX3ZlcnQiLCJiYWNrZ3JvdW5kQ3ViZV9mcmFnIiwiY3ViZV92ZXJ0IiwiY3ViZV9mcmFnIiwiZGVwdGhfdmVydCIsImRlcHRoX2ZyYWciLCJkaXN0YW5jZVJHQkFfdmVydCIsImRpc3RhbmNlUkdCQV9mcmFnIiwiZXF1aXJlY3RfdmVydCIsImVxdWlyZWN0X2ZyYWciLCJsaW5lZGFzaGVkX3ZlcnQiLCJsaW5lZGFzaGVkX2ZyYWciLCJtZXNoYmFzaWNfdmVydCIsIm1lc2hiYXNpY19mcmFnIiwibWVzaGxhbWJlcnRfdmVydCIsIm1lc2hsYW1iZXJ0X2ZyYWciLCJtZXNobWF0Y2FwX3ZlcnQiLCJtZXNobWF0Y2FwX2ZyYWciLCJtZXNobm9ybWFsX3ZlcnQiLCJtZXNobm9ybWFsX2ZyYWciLCJtZXNocGhvbmdfdmVydCIsIm1lc2hwaG9uZ19mcmFnIiwibWVzaHBoeXNpY2FsX3ZlcnQiLCJtZXNocGh5c2ljYWxfZnJhZyIsIm1lc2h0b29uX3ZlcnQiLCJtZXNodG9vbl9mcmFnIiwicG9pbnRzX3ZlcnQiLCJwb2ludHNfZnJhZyIsInNoYWRvd192ZXJ0Iiwic2hhZG93X2ZyYWciLCJzcHJpdGVfdmVydCIsInNwcml0ZV9mcmFnIiwiVW5pZm9ybXNMaWIiLCJkaWZmdXNlIiwibWFwVHJhbnNmb3JtIiwiYWxwaGFNYXBUcmFuc2Zvcm0iLCJzcGVjdWxhcm1hcCIsInNwZWN1bGFyTWFwVHJhbnNmb3JtIiwiZW52bWFwIiwiZmxpcEVudk1hcCIsImlvciIsImFvbWFwIiwiYW9NYXBUcmFuc2Zvcm0iLCJsaWdodG1hcCIsImxpZ2h0TWFwVHJhbnNmb3JtIiwiYnVtcG1hcCIsImJ1bXBNYXBUcmFuc2Zvcm0iLCJub3JtYWxtYXAiLCJub3JtYWxNYXBUcmFuc2Zvcm0iLCJkaXNwbGFjZW1lbnRtYXAiLCJkaXNwbGFjZW1lbnRNYXBUcmFuc2Zvcm0iLCJlbWlzc2l2ZW1hcCIsImVtaXNzaXZlTWFwVHJhbnNmb3JtIiwibWV0YWxuZXNzbWFwIiwibWV0YWxuZXNzTWFwVHJhbnNmb3JtIiwicm91Z2huZXNzbWFwIiwicm91Z2huZXNzTWFwVHJhbnNmb3JtIiwiZ3JhZGllbnRtYXAiLCJmb2dEZW5zaXR5IiwiZm9nTmVhciIsImZvZ0ZhciIsImZvZ0NvbG9yIiwiYW1iaWVudExpZ2h0Q29sb3IiLCJsaWdodFByb2JlIiwiZGlyZWN0aW9uYWxMaWdodHMiLCJwcm9wZXJ0aWVzIiwiZGlyZWN0aW9uYWxMaWdodFNoYWRvd3MiLCJzaGFkb3dJbnRlbnNpdHkiLCJzaGFkb3dCaWFzIiwic2hhZG93Tm9ybWFsQmlhcyIsInNoYWRvd1JhZGl1cyIsInNoYWRvd01hcFNpemUiLCJkaXJlY3Rpb25hbFNoYWRvd01hcCIsImRpcmVjdGlvbmFsU2hhZG93TWF0cml4Iiwic3BvdExpZ2h0cyIsImNvbmVDb3MiLCJwZW51bWJyYUNvcyIsImRlY2F5Iiwic3BvdExpZ2h0U2hhZG93cyIsInNwb3RMaWdodE1hcCIsInNwb3RTaGFkb3dNYXAiLCJzcG90TGlnaHRNYXRyaXgiLCJwb2ludExpZ2h0cyIsInBvaW50TGlnaHRTaGFkb3dzIiwic2hhZG93Q2FtZXJhTmVhciIsInNoYWRvd0NhbWVyYUZhciIsInBvaW50U2hhZG93TWFwIiwicG9pbnRTaGFkb3dNYXRyaXgiLCJoZW1pc3BoZXJlTGlnaHRzIiwic2t5Q29sb3IiLCJncm91bmRDb2xvciIsInJlY3RBcmVhTGlnaHRzIiwibHRjXzEiLCJsdGNfMiIsInV2VHJhbnNmb3JtIiwiU2hhZGVyTGliIiwiYmFzaWMiLCJsYW1iZXJ0IiwicGhvbmciLCJzdGFuZGFyZCIsInRvb24iLCJkYXNoZWQiLCJ0b3RhbFNpemUiLCJ0MkQiLCJiYWNrZ3JvdW5kSW50ZW5zaXR5IiwiYmFja2dyb3VuZEN1YmUiLCJiYWNrZ3JvdW5kQmx1cnJpbmVzcyIsImJhY2tncm91bmRSb3RhdGlvbiIsImN1YmUiLCJ0Q3ViZSIsInRGbGlwIiwiZXF1aXJlY3QiLCJkaXN0YW5jZVJHQkEiLCJyZWZlcmVuY2VQb3NpdGlvbiIsIm5lYXJEaXN0YW5jZSIsImZhckRpc3RhbmNlIiwic2hhZG93IiwicGh5c2ljYWwiLCJjbGVhcmNvYXRNYXBUcmFuc2Zvcm0iLCJjbGVhcmNvYXROb3JtYWxNYXBUcmFuc2Zvcm0iLCJjbGVhcmNvYXRSb3VnaG5lc3NNYXBUcmFuc2Zvcm0iLCJpcmlkZXNjZW5jZU1hcFRyYW5zZm9ybSIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTWluaW11bSIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bSIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVHJhbnNmb3JtIiwic2hlZW5Db2xvck1hcCIsInNoZWVuQ29sb3JNYXBUcmFuc2Zvcm0iLCJzaGVlblJvdWdobmVzc01hcCIsInNoZWVuUm91Z2huZXNzTWFwVHJhbnNmb3JtIiwidHJhbnNtaXNzaW9uTWFwVHJhbnNmb3JtIiwidHJhbnNtaXNzaW9uU2FtcGxlclNpemUiLCJ0cmFuc21pc3Npb25TYW1wbGVyTWFwIiwidGhpY2tuZXNzTWFwVHJhbnNmb3JtIiwic3BlY3VsYXJDb2xvck1hcFRyYW5zZm9ybSIsInNwZWN1bGFySW50ZW5zaXR5TWFwVHJhbnNmb3JtIiwiYW5pc290cm9weVZlY3RvciIsImFuaXNvdHJvcHlNYXBUcmFuc2Zvcm0iLCJfcmdiIiwiX2UxJDEiLCJfbTEkMSIsIldlYkdMQmFja2dyb3VuZCIsImN1YmVtYXBzIiwiY3ViZXV2bWFwcyIsInN0YXRlIiwib2JqZWN0cyIsImNsZWFyQ29sb3IiLCJwbGFuZU1lc2giLCJib3hNZXNoIiwiY2xlYXJBbHBoYSIsImN1cnJlbnRCYWNrZ3JvdW5kIiwiY3VycmVudEJhY2tncm91bmRWZXJzaW9uIiwiY3VycmVudFRvbmVtYXBwaW5nIiwiZ2V0QmFja2dyb3VuZCIsInNldENsZWFyIiwiZ2V0Q2xlYXJDb2xvciIsInNldENsZWFyQ29sb3IiLCJnZXRDbGVhckFscGhhIiwic2V0Q2xlYXJBbHBoYSIsImZvcmNlQ2xlYXIiLCJlbnZpcm9ubWVudEJsZW5kTW9kZSIsImdldEVudmlyb25tZW50QmxlbmRNb2RlIiwiYXV0b0NsZWFyIiwic2V0VGVzdCIsInNldE1hc2siLCJhdXRvQ2xlYXJDb2xvciIsImF1dG9DbGVhckRlcHRoIiwiYXV0b0NsZWFyU3RlbmNpbCIsImFkZFRvUmVuZGVyTGlzdCIsInJlbmRlckxpc3QiLCJ0b25lTWFwcGluZyIsInVuc2hpZnQiLCJXZWJHTEJpbmRpbmdTdGF0ZXMiLCJtYXhWZXJ0ZXhBdHRyaWJ1dGVzIiwiTUFYX1ZFUlRFWF9BVFRSSUJTIiwiYmluZGluZ1N0YXRlcyIsImRlZmF1bHRTdGF0ZSIsImNyZWF0ZUJpbmRpbmdTdGF0ZSIsImN1cnJlbnRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiYmluZFZlcnRleEFycmF5T2JqZWN0IiwidmFvIiwiYmluZFZlcnRleEFycmF5IiwiZGVsZXRlVmVydGV4QXJyYXlPYmplY3QiLCJkZWxldGVWZXJ0ZXhBcnJheSIsIm5ld0F0dHJpYnV0ZXMiLCJlbmFibGVkQXR0cmlidXRlcyIsImF0dHJpYnV0ZURpdmlzb3JzIiwicHJvZ3JhbSIsImluaXRBdHRyaWJ1dGVzIiwiZW5hYmxlQXR0cmlidXRlIiwiZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciIsIm1lc2hQZXJBdHRyaWJ1dGUiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYkRpdmlzb3IiLCJkaXNhYmxlVW51c2VkQXR0cmlidXRlcyIsImRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJpbnRlZ2VyIiwidmVydGV4QXR0cmliSVBvaW50ZXIiLCJyZXNldCIsInJlc2V0RGVmYXVsdFN0YXRlIiwic2V0dXAiLCJ1cGRhdGVCdWZmZXJzIiwicHJvZ3JhbU1hcCIsInN0YXRlTWFwIiwiY3JlYXRlVmVydGV4QXJyYXkiLCJnZXRCaW5kaW5nU3RhdGUiLCJjYWNoZWRBdHRyaWJ1dGVzIiwiZ2VvbWV0cnlBdHRyaWJ1dGVzIiwiYXR0cmlidXRlc051bSIsInByb2dyYW1BdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlcyIsImxvY2F0aW9uIiwiY2FjaGVkQXR0cmlidXRlIiwiZ2VvbWV0cnlBdHRyaWJ1dGUiLCJzYXZlQ2FjaGUiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIm1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsInByb2dyYW1BdHRyaWJ1dGUiLCJpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwibG9jYXRpb25TaXplIiwiQVJSQVlfQlVGRkVSIiwiaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJ2ZXJ0ZXhBdHRyaWIyZnYiLCJ2ZXJ0ZXhBdHRyaWIzZnYiLCJ2ZXJ0ZXhBdHRyaWI0ZnYiLCJ2ZXJ0ZXhBdHRyaWIxZnYiLCJzZXR1cFZlcnRleEF0dHJpYnV0ZXMiLCJnZW9tZXRyeUlkIiwicHJvZ3JhbUlkIiwicmVsZWFzZVN0YXRlc09mR2VvbWV0cnkiLCJyZWxlYXNlU3RhdGVzT2ZQcm9ncmFtIiwiV2ViR0xCdWZmZXJSZW5kZXJlciIsImluZm8iLCJtb2RlIiwicmVuZGVySW5zdGFuY2VzIiwicHJpbWNvdW50IiwiZHJhd0FycmF5c0luc3RhbmNlZCIsInNldE1vZGUiLCJkcmF3QXJyYXlzIiwicmVuZGVyTXVsdGlEcmF3Iiwic3RhcnRzIiwiY291bnRzIiwiZHJhd0NvdW50IiwibXVsdGlEcmF3QXJyYXlzV0VCR0wiLCJlbGVtZW50Q291bnQiLCJyZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMiLCJleHRlbnNpb24iLCJtdWx0aURyYXdBcnJheXNJbnN0YW5jZWRXRUJHTCIsIldlYkdMQ2FwYWJpbGl0aWVzIiwidXRpbHMiLCJtYXhBbmlzb3Ryb3B5IiwiZ2V0TWF4UHJlY2lzaW9uIiwiZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0IiwiVkVSVEVYX1NIQURFUiIsIkhJR0hfRkxPQVQiLCJGUkFHTUVOVF9TSEFERVIiLCJNRURJVU1fRkxPQVQiLCJtYXhQcmVjaXNpb24iLCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwibWF4VGV4dHVyZXMiLCJNQVhfVEVYVFVSRV9JTUFHRV9VTklUUyIsIm1heFZlcnRleFRleHR1cmVzIiwiTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiaXNXZWJHTDIiLCJnZXRNYXhBbmlzb3Ryb3B5IiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwidGV4dHVyZUZvcm1hdFJlYWRhYmxlIiwidGV4dHVyZUZvcm1hdCIsIklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfRk9STUFUIiwidGV4dHVyZVR5cGVSZWFkYWJsZSIsInRleHR1cmVUeXBlIiwiaGFsZkZsb2F0U3VwcG9ydGVkQnlFeHQiLCJJTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX1RZUEUiLCJtYXhUZXh0dXJlU2l6ZSIsIk1BWF9URVhUVVJFX1NJWkUiLCJtYXhDdWJlbWFwU2l6ZSIsIk1BWF9DVUJFX01BUF9URVhUVVJFX1NJWkUiLCJtYXhBdHRyaWJ1dGVzIiwibWF4VmVydGV4VW5pZm9ybXMiLCJNQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyIsIm1heFZhcnlpbmdzIiwiTUFYX1ZBUllJTkdfVkVDVE9SUyIsIm1heEZyYWdtZW50VW5pZm9ybXMiLCJNQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTIiwidmVydGV4VGV4dHVyZXMiLCJtYXhTYW1wbGVzIiwiTUFYX1NBTVBMRVMiLCJXZWJHTENsaXBwaW5nIiwiZ2xvYmFsU3RhdGUiLCJudW1HbG9iYWxQbGFuZXMiLCJsb2NhbENsaXBwaW5nRW5hYmxlZCIsInJlbmRlcmluZ1NoYWRvd3MiLCJ2aWV3Tm9ybWFsTWF0cml4IiwidW5pZm9ybSIsInByb2plY3RQbGFuZXMiLCJza2lwVHJhbnNmb3JtIiwiblBsYW5lcyIsImRzdEFycmF5IiwiZmxhdFNpemUiLCJ2aWV3TWF0cml4IiwiaTQiLCJudW1QbGFuZXMiLCJudW1JbnRlcnNlY3Rpb24iLCJpbml0IiwiZW5hYmxlTG9jYWxDbGlwcGluZyIsImJlZ2luU2hhZG93cyIsImVuZFNoYWRvd3MiLCJzZXRHbG9iYWxTdGF0ZSIsInNldFN0YXRlIiwidXNlQ2FjaGUiLCJtYXRlcmlhbFByb3BlcnRpZXMiLCJyZXNldEdsb2JhbFN0YXRlIiwibkdsb2JhbCIsImxHbG9iYWwiLCJjbGlwcGluZ1N0YXRlIiwiV2ViR0xDdWJlTWFwcyIsIm1hcFRleHR1cmVNYXBwaW5nIiwib25UZXh0dXJlRGlzcG9zZSIsImN1YmVtYXAiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJpc09ydGhvZ3JhcGhpY0NhbWVyYSIsInNjYWxlVyIsInNjYWxlSCIsIkVYVFJBX0xPRF9TSUdNQSIsIl9mbGF0Q2FtZXJhIiwiX2NsZWFyQ29sb3IiLCJfb2xkVGFyZ2V0IiwiX29sZEFjdGl2ZUN1YmVGYWNlIiwiX29sZEFjdGl2ZU1pcG1hcExldmVsIiwiX29sZFhyRW5hYmxlZCIsIlBISSIsIklOVl9QSEkiLCJfYXhpc0RpcmVjdGlvbnMiLCJQTVJFTUdlbmVyYXRvciIsIl9yZW5kZXJlciIsIl9waW5nUG9uZ1JlbmRlclRhcmdldCIsIl9sb2RNYXgiLCJfY3ViZVNpemUiLCJfbG9kUGxhbmVzIiwiX3NpemVMb2RzIiwiX3NpZ21hcyIsIl9ibHVyTWF0ZXJpYWwiLCJfY3ViZW1hcE1hdGVyaWFsIiwiX2VxdWlyZWN0TWF0ZXJpYWwiLCJfY29tcGlsZU1hdGVyaWFsIiwiZnJvbVNjZW5lIiwic2lnbWEiLCJfc2V0U2l6ZSIsImN1YmVVVlJlbmRlclRhcmdldCIsIl9hbGxvY2F0ZVRhcmdldHMiLCJfc2NlbmVUb0N1YmVVViIsIl9ibHVyIiwiX2FwcGx5UE1SRU0iLCJfY2xlYW51cCIsImZyb21FcXVpcmVjdGFuZ3VsYXIiLCJlcXVpcmVjdGFuZ3VsYXIiLCJfZnJvbVRleHR1cmUiLCJmcm9tQ3ViZW1hcCIsImNvbXBpbGVDdWJlbWFwU2hhZGVyIiwiX2dldEN1YmVtYXBNYXRlcmlhbCIsImNvbXBpbGVFcXVpcmVjdGFuZ3VsYXJTaGFkZXIiLCJfZ2V0RXF1aXJlY3RNYXRlcmlhbCIsIl9kaXNwb3NlIiwiY3ViZVNpemUiLCJsb2cyIiwib3V0cHV0VGFyZ2V0IiwiX3NldFZpZXdwb3J0IiwiX3RleHR1cmVUb0N1YmVVViIsInBhcmFtcyIsIl9jcmVhdGVSZW5kZXJUYXJnZXQiLCJzaXplTG9kcyIsImxvZFBsYW5lcyIsInNpZ21hcyIsImxvZE1heCIsImxvZCIsInRvdGFsTG9kcyIsInNpemVMb2QiLCJ0ZXhlbFNpemUiLCJjdWJlRmFjZXMiLCJwb3NpdGlvblNpemUiLCJ1dlNpemUiLCJmYWNlSW5kZXhTaXplIiwiY29vcmRpbmF0ZXMiLCJmaWxsIiwiX2NyZWF0ZVBsYW5lcyIsIndlaWdodHMiLCJwb2xlQXhpcyIsInNoYWRlck1hdGVyaWFsIiwiQ1VCRVVWX1RFWEVMX1dJRFRIIiwiQ1VCRVVWX1RFWEVMX0hFSUdIVCIsIkNVQkVVVl9NQVhfTUlQIiwibGF0aXR1ZGluYWwiLCJkVGhldGEiLCJtaXBJbnQiLCJfZ2V0Q29tbW9uVmVydGV4U2hhZGVyIiwiX2dldEJsdXJTaGFkZXIiLCJ0bXBNZXNoIiwiY29tcGlsZSIsImN1YmVDYW1lcmEiLCJ1cFNpZ24iLCJmb3J3YXJkU2lnbiIsIm9yaWdpbmFsQXV0b0NsZWFyIiwiYmFja2dyb3VuZE1hdGVyaWFsIiwiYmFja2dyb3VuZEJveCIsInVzZVNvbGlkQ29sb3IiLCJjb2wiLCJsb2RJbiIsImxvZE91dCIsInBpbmdQb25nUmVuZGVyVGFyZ2V0IiwiX2hhbGZCbHVyIiwidGFyZ2V0SW4iLCJ0YXJnZXRPdXQiLCJzaWdtYVJhZGlhbnMiLCJibHVyTWF0ZXJpYWwiLCJibHVyTWVzaCIsImJsdXJVbmlmb3JtcyIsInBpeGVscyIsInJhZGlhbnNQZXJQaXhlbCIsInNpZ21hUGl4ZWxzIiwic3VtIiwid2VpZ2h0Iiwib3V0cHV0U2l6ZSIsIldlYkdMQ3ViZVVWTWFwcyIsImN1YmVVVm1hcHMiLCJwbXJlbUdlbmVyYXRvciIsImN1YmVtYXBVViIsImlzRXF1aXJlY3RNYXAiLCJpc0N1YmVNYXAiLCJjdXJyZW50UE1SRU1WZXJzaW9uIiwiaXNDdWJlVGV4dHVyZUNvbXBsZXRlIiwiV2ViR0xFeHRlbnNpb25zIiwiZ2V0RXh0ZW5zaW9uIiwiV2ViR0xHZW9tZXRyaWVzIiwid2lyZWZyYW1lQXR0cmlidXRlcyIsIm9uR2VvbWV0cnlEaXNwb3NlIiwiaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSIsIm1lbW9yeSIsInVwZGF0ZVdpcmVmcmFtZUF0dHJpYnV0ZSIsImdlb21ldHJ5SW5kZXgiLCJnZW9tZXRyeVBvc2l0aW9uIiwicHJldmlvdXNBdHRyaWJ1dGUiLCJnZXRXaXJlZnJhbWVBdHRyaWJ1dGUiLCJjdXJyZW50QXR0cmlidXRlIiwiV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIiLCJkcmF3RWxlbWVudHNJbnN0YW5jZWQiLCJkcmF3RWxlbWVudHMiLCJtdWx0aURyYXdFbGVtZW50c1dFQkdMIiwibXVsdGlEcmF3RWxlbWVudHNJbnN0YW5jZWRXRUJHTCIsIldlYkdMSW5mbyIsImNhbGxzIiwidHJpYW5nbGVzIiwibGluZXMiLCJwcm9ncmFtcyIsImF1dG9SZXNldCIsImluc3RhbmNlQ291bnQiLCJUUklBTkdMRVMiLCJMSU5FUyIsIkxJTkVfU1RSSVAiLCJMSU5FX0xPT1AiLCJQT0lOVFMiLCJXZWJHTE1vcnBodGFyZ2V0cyIsImNhcGFiaWxpdGllcyIsIm1vcnBoVGV4dHVyZXMiLCJtb3JwaCIsIm9iamVjdEluZmx1ZW5jZXMiLCJtb3JwaFRhcmdldHNDb3VudCIsImVudHJ5IiwiaGFzTW9ycGhQb3NpdGlvbiIsImhhc01vcnBoTm9ybWFscyIsImhhc01vcnBoQ29sb3JzIiwibW9ycGhUYXJnZXRzIiwibW9ycGhOb3JtYWxzIiwibW9ycGhDb2xvcnMiLCJ2ZXJ0ZXhEYXRhQ291bnQiLCJ2ZXJ0ZXhEYXRhU3RyaWRlIiwibW9ycGhUYXJnZXQiLCJtb3JwaE5vcm1hbCIsIm1vcnBoQ29sb3IiLCJkaXNwb3NlVGV4dHVyZSIsIm1vcnBoVGV4dHVyZSIsImdldFVuaWZvcm1zIiwic2V0VmFsdWUiLCJtb3JwaEluZmx1ZW5jZXNTdW0iLCJtb3JwaEJhc2VJbmZsdWVuY2UiLCJXZWJHTE9iamVjdHMiLCJ1cGRhdGVNYXAiLCJvbkluc3RhbmNlZE1lc2hEaXNwb3NlIiwiaW5zdGFuY2VkTWVzaCIsImJ1ZmZlcmdlb21ldHJ5IiwiRGVwdGhUZXh0dXJlIiwiaXNEZXB0aFRleHR1cmUiLCJjb21wYXJlRnVuY3Rpb24iLCJlbXB0eVRleHR1cmUiLCJlbXB0eVNoYWRvd1RleHR1cmUiLCJlbXB0eUFycmF5VGV4dHVyZSIsImVtcHR5M2RUZXh0dXJlIiwiZW1wdHlDdWJlVGV4dHVyZSIsImFycmF5Q2FjaGVGMzIiLCJhcnJheUNhY2hlSTMyIiwibWF0NGFycmF5IiwibWF0M2FycmF5IiwibWF0MmFycmF5IiwiZmxhdHRlbiIsIm5CbG9ja3MiLCJibG9ja1NpemUiLCJmaXJzdEVsZW0iLCJhcnJheXNFcXVhbCIsImFsbG9jVGV4VW5pdHMiLCJhbGxvY2F0ZVRleHR1cmVVbml0Iiwic2V0VmFsdWVWMWYiLCJ1bmlmb3JtMWYiLCJhZGRyIiwic2V0VmFsdWVWMmYiLCJ1bmlmb3JtMmYiLCJ1bmlmb3JtMmZ2Iiwic2V0VmFsdWVWM2YiLCJ1bmlmb3JtM2YiLCJ1bmlmb3JtM2Z2Iiwic2V0VmFsdWVWNGYiLCJ1bmlmb3JtNGYiLCJ1bmlmb3JtNGZ2Iiwic2V0VmFsdWVNMiIsInVuaWZvcm1NYXRyaXgyZnYiLCJzZXRWYWx1ZU0zIiwidW5pZm9ybU1hdHJpeDNmdiIsInNldFZhbHVlTTQiLCJ1bmlmb3JtTWF0cml4NGZ2Iiwic2V0VmFsdWVWMWkiLCJ1bmlmb3JtMWkiLCJzZXRWYWx1ZVYyaSIsInVuaWZvcm0yaSIsInVuaWZvcm0yaXYiLCJzZXRWYWx1ZVYzaSIsInVuaWZvcm0zaSIsInVuaWZvcm0zaXYiLCJzZXRWYWx1ZVY0aSIsInVuaWZvcm00aSIsInVuaWZvcm00aXYiLCJzZXRWYWx1ZVYxdWkiLCJ1bmlmb3JtMXVpIiwic2V0VmFsdWVWMnVpIiwidW5pZm9ybTJ1aSIsInVuaWZvcm0ydWl2Iiwic2V0VmFsdWVWM3VpIiwidW5pZm9ybTN1aSIsInVuaWZvcm0zdWl2Iiwic2V0VmFsdWVWNHVpIiwidW5pZm9ybTR1aSIsInVuaWZvcm00dWl2Iiwic2V0VmFsdWVUMSIsInVuaXQiLCJlbXB0eVRleHR1cmUyRCIsIlNBTVBMRVJfMkRfU0hBRE9XIiwic2V0VGV4dHVyZTJEIiwic2V0VmFsdWVUM0QxIiwic2V0VGV4dHVyZTNEIiwic2V0VmFsdWVUNiIsInNldFRleHR1cmVDdWJlIiwic2V0VmFsdWVUMkRBcnJheTEiLCJzZXRUZXh0dXJlMkRBcnJheSIsInNldFZhbHVlVjFmQXJyYXkiLCJ1bmlmb3JtMWZ2Iiwic2V0VmFsdWVWMmZBcnJheSIsInNldFZhbHVlVjNmQXJyYXkiLCJzZXRWYWx1ZVY0ZkFycmF5Iiwic2V0VmFsdWVNMkFycmF5Iiwic2V0VmFsdWVNM0FycmF5Iiwic2V0VmFsdWVNNEFycmF5Iiwic2V0VmFsdWVWMWlBcnJheSIsInVuaWZvcm0xaXYiLCJzZXRWYWx1ZVYyaUFycmF5Iiwic2V0VmFsdWVWM2lBcnJheSIsInNldFZhbHVlVjRpQXJyYXkiLCJzZXRWYWx1ZVYxdWlBcnJheSIsInVuaWZvcm0xdWl2Iiwic2V0VmFsdWVWMnVpQXJyYXkiLCJzZXRWYWx1ZVYzdWlBcnJheSIsInNldFZhbHVlVjR1aUFycmF5Iiwic2V0VmFsdWVUMUFycmF5IiwidW5pdHMiLCJzZXRWYWx1ZVQzREFycmF5Iiwic2V0VmFsdWVUNkFycmF5Iiwic2V0VmFsdWVUMkRBcnJheUFycmF5IiwiU2luZ2xlVW5pZm9ybSIsImFjdGl2ZUluZm8iLCJnZXRTaW5ndWxhclNldHRlciIsIlB1cmVBcnJheVVuaWZvcm0iLCJnZXRQdXJlQXJyYXlTZXR0ZXIiLCJTdHJ1Y3R1cmVkVW5pZm9ybSIsInNlcSIsIlJlUGF0aFBhcnQiLCJhZGRVbmlmb3JtIiwiY29udGFpbmVyIiwidW5pZm9ybU9iamVjdCIsInBhcnNlVW5pZm9ybSIsInBhdGgiLCJwYXRoTGVuZ3RoIiwibGFzdEluZGV4IiwibWF0Y2giLCJtYXRjaEVuZCIsImlkSXNJbmRleCIsInN1YnNjcmlwdCIsIm5leHQiLCJXZWJHTFVuaWZvcm1zIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkFDVElWRV9VTklGT1JNUyIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJzZXRPcHRpb25hbCIsInVwbG9hZCIsInNlcVdpdGhWYWx1ZSIsIldlYkdMU2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsIkNPTVBMRVRJT05fU1RBVFVTX0tIUiIsInByb2dyYW1JZENvdW50IiwiZ2V0U2hhZGVyRXJyb3JzIiwic3RhdHVzIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJlcnJvcnMiLCJnZXRTaGFkZXJJbmZvTG9nIiwidHJpbSIsImVycm9yTWF0Y2hlcyIsImVycm9yTGluZSIsInRvVXBwZXJDYXNlIiwic3BsaXQiLCJsaW5lczIiLCJ0byIsImpvaW4iLCJoYW5kbGVTb3VyY2UiLCJnZXRTaGFkZXJTb3VyY2UiLCJnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24iLCJmdW5jdGlvbk5hbWUiLCJ3b3JraW5nUHJpbWFyaWVzIiwiZW5jb2RpbmdQcmltYXJpZXMiLCJnYW11dE1hcHBpbmciLCJnZXRFbmNvZGluZ0NvbXBvbmVudHMiLCJnZXRUb25lTWFwcGluZ0Z1bmN0aW9uIiwidG9uZU1hcHBpbmdOYW1lIiwiZmlsdGVyRW1wdHlMaW5lIiwicmVwbGFjZUxpZ2h0TnVtcyIsIm51bVNwb3RMaWdodENvb3JkcyIsIm51bVNwb3RMaWdodFNoYWRvd3MiLCJudW1TcG90TGlnaHRNYXBzIiwibnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzIiwicmVwbGFjZSIsIm51bURpckxpZ2h0cyIsIm51bVNwb3RMaWdodHMiLCJudW1SZWN0QXJlYUxpZ2h0cyIsIm51bVBvaW50TGlnaHRzIiwibnVtSGVtaUxpZ2h0cyIsIm51bURpckxpZ2h0U2hhZG93cyIsIm51bVBvaW50TGlnaHRTaGFkb3dzIiwicmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zIiwibnVtQ2xpcHBpbmdQbGFuZXMiLCJudW1DbGlwSW50ZXJzZWN0aW9uIiwiaW5jbHVkZVBhdHRlcm4iLCJyZXNvbHZlSW5jbHVkZXMiLCJpbmNsdWRlUmVwbGFjZXIiLCJzaGFkZXJDaHVua01hcCIsIk1hcCIsImluY2x1ZGUiLCJuZXdJbmNsdWRlIiwidW5yb2xsTG9vcFBhdHRlcm4iLCJ1bnJvbGxMb29wcyIsImxvb3BSZXBsYWNlciIsInNuaXBwZXQiLCJnZW5lcmF0ZVByZWNpc2lvbiIsInByZWNpc2lvbnN0cmluZyIsIldlYkdMUHJvZ3JhbSIsImNhY2hlS2V5Iiwic2hhZG93TWFwVHlwZURlZmluZSIsInNoYWRvd01hcFR5cGUiLCJnZW5lcmF0ZVNoYWRvd01hcFR5cGVEZWZpbmUiLCJlbnZNYXBUeXBlRGVmaW5lIiwiZW52TWFwTW9kZSIsImdlbmVyYXRlRW52TWFwVHlwZURlZmluZSIsImVudk1hcE1vZGVEZWZpbmUiLCJnZW5lcmF0ZUVudk1hcE1vZGVEZWZpbmUiLCJlbnZNYXBCbGVuZGluZ0RlZmluZSIsImdlbmVyYXRlRW52TWFwQmxlbmRpbmdEZWZpbmUiLCJlbnZNYXBDdWJlVVZTaXplIiwiaW1hZ2VIZWlnaHQiLCJlbnZNYXBDdWJlVVZIZWlnaHQiLCJtYXhNaXAiLCJ0ZXhlbEhlaWdodCIsInRleGVsV2lkdGgiLCJnZW5lcmF0ZUN1YmVVVlNpemUiLCJjdXN0b21WZXJ0ZXhFeHRlbnNpb25zIiwiZXh0ZW5zaW9uQ2xpcEN1bGxEaXN0YW5jZSIsImV4dGVuc2lvbk11bHRpRHJhdyIsImZpbHRlciIsImdlbmVyYXRlVmVydGV4RXh0ZW5zaW9ucyIsImN1c3RvbURlZmluZXMiLCJjaHVua3MiLCJnZW5lcmF0ZURlZmluZXMiLCJjcmVhdGVQcm9ncmFtIiwicHJlZml4VmVydGV4IiwicHJlZml4RnJhZ21lbnQiLCJ2ZXJzaW9uU3RyaW5nIiwiaXNSYXdTaGFkZXJNYXRlcmlhbCIsInNoYWRlclR5cGUiLCJzaGFkZXJOYW1lIiwiYmF0Y2hpbmciLCJiYXRjaGluZ0NvbG9yIiwiaW5zdGFuY2luZyIsImluc3RhbmNpbmdDb2xvciIsImluc3RhbmNpbmdNb3JwaCIsInVzZUZvZyIsImZvZ0V4cDIiLCJub3JtYWxNYXBPYmplY3RTcGFjZSIsIm5vcm1hbE1hcFRhbmdlbnRTcGFjZSIsIm1hcFV2IiwiYWxwaGFNYXBVdiIsImxpZ2h0TWFwVXYiLCJhb01hcFV2IiwiZW1pc3NpdmVNYXBVdiIsImJ1bXBNYXBVdiIsIm5vcm1hbE1hcFV2IiwiZGlzcGxhY2VtZW50TWFwVXYiLCJtZXRhbG5lc3NNYXBVdiIsInJvdWdobmVzc01hcFV2IiwiYW5pc290cm9weU1hcFV2IiwiY2xlYXJjb2F0TWFwVXYiLCJjbGVhcmNvYXROb3JtYWxNYXBVdiIsImNsZWFyY29hdFJvdWdobmVzc01hcFV2IiwiaXJpZGVzY2VuY2VNYXBVdiIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXYiLCJzaGVlbkNvbG9yTWFwVXYiLCJzaGVlblJvdWdobmVzc01hcFV2Iiwic3BlY3VsYXJNYXBVdiIsInNwZWN1bGFyQ29sb3JNYXBVdiIsInNwZWN1bGFySW50ZW5zaXR5TWFwVXYiLCJ0cmFuc21pc3Npb25NYXBVdiIsInRoaWNrbmVzc01hcFV2IiwidmVydGV4VGFuZ2VudHMiLCJ2ZXJ0ZXhBbHBoYXMiLCJ2ZXJ0ZXhVdjFzIiwidmVydGV4VXYycyIsInZlcnRleFV2M3MiLCJwb2ludHNVdnMiLCJza2lubmluZyIsIm1vcnBoVGV4dHVyZVN0cmlkZSIsImRvdWJsZVNpZGVkIiwiZmxpcFNpZGVkIiwic2hhZG93TWFwRW5hYmxlZCIsIm51bUxpZ2h0UHJvYmVzIiwiZGVjb2RlVmlkZW9UZXh0dXJlIiwib3BhcXVlIiwidXNlRGVwdGhQYWNraW5nIiwiZGVwdGhQYWNraW5nIiwidmVydGV4R2xzbCIsImZyYWdtZW50R2xzbCIsImdsVmVydGV4U2hhZGVyIiwiZ2xGcmFnbWVudFNoYWRlciIsIm9uRmlyc3RVc2UiLCJzZWxmIiwiZGVidWciLCJjaGVja1NoYWRlckVycm9ycyIsInByb2dyYW1Mb2ciLCJnZXRQcm9ncmFtSW5mb0xvZyIsInZlcnRleExvZyIsImZyYWdtZW50TG9nIiwicnVubmFibGUiLCJoYXZlRGlhZ25vc3RpY3MiLCJMSU5LX1NUQVRVUyIsIm9uU2hhZGVyRXJyb3IiLCJ2ZXJ0ZXhFcnJvcnMiLCJmcmFnbWVudEVycm9ycyIsImdldEVycm9yIiwiVkFMSURBVEVfU1RBVFVTIiwiZGlhZ25vc3RpY3MiLCJwcmVmaXgiLCJkZWxldGVTaGFkZXIiLCJjYWNoZWRVbmlmb3JtcyIsIkFDVElWRV9BVFRSSUJVVEVTIiwiZ2V0QWN0aXZlQXR0cmliIiwiRkxPQVRfTUFUMiIsIkZMT0FUX01BVDMiLCJGTE9BVF9NQVQ0IiwiZ2V0QXR0cmliTG9jYXRpb24iLCJmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyIsImF0dGFjaFNoYWRlciIsImJpbmRBdHRyaWJMb2NhdGlvbiIsImxpbmtQcm9ncmFtIiwicHJvZ3JhbVJlYWR5IiwicmVuZGVyZXJFeHRlbnNpb25QYXJhbGxlbFNoYWRlckNvbXBpbGUiLCJpc1JlYWR5IiwiZGVzdHJveSIsImRlbGV0ZVByb2dyYW0iLCJ1c2VkVGltZXMiLCJfaWQkMSIsIldlYkdMU2hhZGVyQ2FjaGUiLCJzaGFkZXJDYWNoZSIsIm1hdGVyaWFsQ2FjaGUiLCJ2ZXJ0ZXhTaGFkZXJTdGFnZSIsIl9nZXRTaGFkZXJTdGFnZSIsImZyYWdtZW50U2hhZGVyU3RhZ2UiLCJtYXRlcmlhbFNoYWRlcnMiLCJfZ2V0U2hhZGVyQ2FjaGVGb3JNYXRlcmlhbCIsInNoYWRlclN0YWdlIiwiY29kZSIsImdldFZlcnRleFNoYWRlcklEIiwiZ2V0RnJhZ21lbnRTaGFkZXJJRCIsInN0YWdlIiwiV2ViR0xTaGFkZXJTdGFnZSIsIldlYkdMUHJvZ3JhbXMiLCJfcHJvZ3JhbUxheWVycyIsIl9jdXN0b21TaGFkZXJzIiwiX2FjdGl2ZUNoYW5uZWxzIiwiU1VQUE9SVFNfVkVSVEVYX1RFWFRVUkVTIiwic2hhZGVySURzIiwiTWVzaERlcHRoTWF0ZXJpYWwiLCJNZXNoRGlzdGFuY2VNYXRlcmlhbCIsIk1lc2hOb3JtYWxNYXRlcmlhbCIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJNZXNoUGhvbmdNYXRlcmlhbCIsIk1lc2hUb29uTWF0ZXJpYWwiLCJNZXNoU3RhbmRhcmRNYXRlcmlhbCIsIk1lc2hQaHlzaWNhbE1hdGVyaWFsIiwiTWVzaE1hdGNhcE1hdGVyaWFsIiwiTGluZUJhc2ljTWF0ZXJpYWwiLCJMaW5lRGFzaGVkTWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsIlNoYWRvd01hdGVyaWFsIiwiU3ByaXRlTWF0ZXJpYWwiLCJnZXRDaGFubmVsIiwiZ2V0UGFyYW1ldGVycyIsInNoYWRvd3MiLCJpc01lc2hTdGFuZGFyZE1hdGVyaWFsIiwic2hhZGVySUQiLCJjdXN0b21WZXJ0ZXhTaGFkZXJJRCIsImN1c3RvbUZyYWdtZW50U2hhZGVySUQiLCJJU19JTlNUQU5DRURNRVNIIiwiSVNfQkFUQ0hFRE1FU0giLCJIQVNfTUFQIiwiSEFTX01BVENBUCIsIkhBU19FTlZNQVAiLCJIQVNfQU9NQVAiLCJIQVNfTElHSFRNQVAiLCJIQVNfQlVNUE1BUCIsIkhBU19OT1JNQUxNQVAiLCJIQVNfRElTUExBQ0VNRU5UTUFQIiwiSEFTX0VNSVNTSVZFTUFQIiwiSEFTX01FVEFMTkVTU01BUCIsIkhBU19ST1VHSE5FU1NNQVAiLCJIQVNfQU5JU09UUk9QWSIsIkhBU19DTEVBUkNPQVQiLCJIQVNfRElTUEVSU0lPTiIsIkhBU19JUklERVNDRU5DRSIsIkhBU19TSEVFTiIsIkhBU19UUkFOU01JU1NJT04iLCJIQVNfQU5JU09UUk9QWU1BUCIsIkhBU19DTEVBUkNPQVRNQVAiLCJIQVNfQ0xFQVJDT0FUX05PUk1BTE1BUCIsIkhBU19DTEVBUkNPQVRfUk9VR0hORVNTTUFQIiwiSEFTX0lSSURFU0NFTkNFTUFQIiwiSEFTX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUCIsIkhBU19TSEVFTl9DT0xPUk1BUCIsIkhBU19TSEVFTl9ST1VHSE5FU1NNQVAiLCJIQVNfU1BFQ1VMQVJNQVAiLCJIQVNfU1BFQ1VMQVJfQ09MT1JNQVAiLCJIQVNfU1BFQ1VMQVJfSU5URU5TSVRZTUFQIiwiSEFTX1RSQU5TTUlTU0lPTk1BUCIsIkhBU19USElDS05FU1NNQVAiLCJIQVNfR1JBRElFTlRNQVAiLCJIQVNfQUxQSEFNQVAiLCJIQVNfQUxQSEFURVNUIiwiSEFTX0FMUEhBSEFTSCIsIkhBU19FWFRFTlNJT05TIiwic3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyIsImlzRm9nRXhwMiIsImRpcmVjdGlvbmFsIiwic3BvdCIsInJlY3RBcmVhIiwiaGVtaSIsInNoYWRvd01hcCIsImlzVmlkZW9UZXh0dXJlIiwiZ2V0UHJvZ3JhbUNhY2hlS2V5IiwibW9ycGhBdHRyaWJ1dGVDb3VudCIsImdldFByb2dyYW1DYWNoZUtleVBhcmFtZXRlcnMiLCJnZXRQcm9ncmFtQ2FjaGVLZXlCb29sZWFucyIsImFjcXVpcmVQcm9ncmFtIiwicGwiLCJwcmVleGlzdGluZ1Byb2dyYW0iLCJyZWxlYXNlUHJvZ3JhbSIsInBvcCIsInJlbGVhc2VTaGFkZXJDYWNoZSIsIldlYkdMUHJvcGVydGllcyIsInBhaW50ZXJTb3J0U3RhYmxlIiwiZ3JvdXBPcmRlciIsInJldmVyc2VQYWludGVyU29ydFN0YWJsZSIsIldlYkdMUmVuZGVyTGlzdCIsInJlbmRlckl0ZW1zIiwicmVuZGVySXRlbXNJbmRleCIsInRyYW5zbWlzc2l2ZSIsImdldE5leHRSZW5kZXJJdGVtIiwicmVuZGVySXRlbSIsImZpbmlzaCIsInNvcnQiLCJjdXN0b21PcGFxdWVTb3J0IiwiY3VzdG9tVHJhbnNwYXJlbnRTb3J0IiwiV2ViR0xSZW5kZXJMaXN0cyIsImxpc3RzIiwicmVuZGVyQ2FsbERlcHRoIiwibGlzdEFycmF5IiwibGlzdCIsIlVuaWZvcm1zQ2FjaGUiLCJsaWdodCIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJuZXh0VmVyc2lvbiIsInNoYWRvd0Nhc3RpbmdBbmRUZXh0dXJpbmdMaWdodHNGaXJzdCIsImxpZ2h0QSIsImxpZ2h0QiIsIldlYkdMTGlnaHRzIiwic2hhZG93Q2FjaGUiLCJTaGFkb3dVbmlmb3Jtc0NhY2hlIiwiaGFzaCIsImRpcmVjdGlvbmFsTGVuZ3RoIiwicG9pbnRMZW5ndGgiLCJzcG90TGVuZ3RoIiwicmVjdEFyZWFMZW5ndGgiLCJoZW1pTGVuZ3RoIiwibnVtRGlyZWN0aW9uYWxTaGFkb3dzIiwibnVtUG9pbnRTaGFkb3dzIiwibnVtU3BvdFNoYWRvd3MiLCJudW1TcG90TWFwcyIsImFtYmllbnQiLCJwcm9iZSIsImRpcmVjdGlvbmFsU2hhZG93Iiwic3BvdFNoYWRvdyIsInJlY3RBcmVhTFRDMSIsInJlY3RBcmVhTFRDMiIsInBvaW50U2hhZG93IiwidmVjdG9yMyIsIm1hdHJpeDQyIiwibnVtU3BvdFNoYWRvd3NXaXRoTWFwcyIsImludGVuc2l0eSIsImlzQW1iaWVudExpZ2h0IiwiaXNMaWdodFByb2JlIiwic2giLCJjb2VmZmljaWVudHMiLCJpc0RpcmVjdGlvbmFsTGlnaHQiLCJzaGFkb3dVbmlmb3JtcyIsImJpYXMiLCJub3JtYWxCaWFzIiwibWFwU2l6ZSIsImlzU3BvdExpZ2h0IiwicGVudW1icmEiLCJ1cGRhdGVNYXRyaWNlcyIsImlzUmVjdEFyZWFMaWdodCIsImlzUG9pbnRMaWdodCIsImlzSGVtaXNwaGVyZUxpZ2h0IiwiTFRDX0ZMT0FUXzEiLCJMVENfRkxPQVRfMiIsIkxUQ19IQUxGXzEiLCJMVENfSEFMRl8yIiwic2V0dXBWaWV3IiwiV2ViR0xSZW5kZXJTdGF0ZSIsImxpZ2h0c0FycmF5Iiwic2hhZG93c0FycmF5IiwidHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0Iiwic2V0dXBMaWdodHMiLCJzZXR1cExpZ2h0c1ZpZXciLCJwdXNoTGlnaHQiLCJwdXNoU2hhZG93Iiwic2hhZG93TGlnaHQiLCJXZWJHTFJlbmRlclN0YXRlcyIsInJlbmRlclN0YXRlcyIsInJlbmRlclN0YXRlQXJyYXkiLCJyZW5kZXJTdGF0ZSIsImlzTWVzaERlcHRoTWF0ZXJpYWwiLCJpc01lc2hEaXN0YW5jZU1hdGVyaWFsIiwiV2ViR0xTaGFkb3dNYXAiLCJfZnJ1c3R1bSIsIl9zaGFkb3dNYXBTaXplIiwiX3ZpZXdwb3J0U2l6ZSIsIl92aWV3cG9ydCIsIl9kZXB0aE1hdGVyaWFsIiwiX2Rpc3RhbmNlTWF0ZXJpYWwiLCJfbWF0ZXJpYWxDYWNoZSIsIl9tYXhUZXh0dXJlU2l6ZSIsInNoYWRvd01hdGVyaWFsVmVydGljYWwiLCJWU01fU0FNUExFUyIsInNoYWRvd19wYXNzIiwicmVzb2x1dGlvbiIsInNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbCIsIkhPUklaT05UQUxfUEFTUyIsImZ1bGxTY3JlZW5UcmkiLCJmdWxsU2NyZWVuTWVzaCIsImF1dG9VcGRhdGUiLCJfcHJldmlvdXNUeXBlIiwiVlNNUGFzcyIsImJsdXJTYW1wbGVzIiwibWFwUGFzcyIsInJlbmRlckJ1ZmZlckRpcmVjdCIsImdldERlcHRoTWF0ZXJpYWwiLCJjdXN0b21NYXRlcmlhbCIsImN1c3RvbURpc3RhbmNlTWF0ZXJpYWwiLCJjdXN0b21EZXB0aE1hdGVyaWFsIiwia2V5QSIsImtleUIiLCJtYXRlcmlhbHNGb3JWYXJpYW50IiwiY2FjaGVkTWF0ZXJpYWwiLCJvbk1hdGVyaWFsRGlzcG9zZSIsInJlbmRlck9iamVjdCIsInNoYWRvd0NhbWVyYSIsImsiLCJrbCIsImRlcHRoTWF0ZXJpYWwiLCJhY3RpdmVDdWJlRmFjZSIsIl9zdGF0ZSIsInNldEJsZW5kaW5nIiwic2V0U2Npc3NvclRlc3QiLCJ0b1ZTTSIsImZyb21WU00iLCJzaGFkb3dGcmFtZUV4dGVudHMiLCJnZXRGcmFtZUV4dGVudHMiLCJwYXJzIiwidmlld3BvcnRDb3VudCIsImdldFZpZXdwb3J0Q291bnQiLCJ2cCIsImdldFZpZXdwb3J0IiwiZ2V0RnJ1c3R1bSIsImlzUG9pbnRMaWdodFNoYWRvdyIsIldlYkdMU3RhdGUiLCJjb2xvckJ1ZmZlciIsImxvY2tlZCIsImN1cnJlbnRDb2xvck1hc2siLCJjdXJyZW50Q29sb3JDbGVhciIsImNvbG9yTWFzayIsInNldExvY2tlZCIsImxvY2siLCJjdXJyZW50RGVwdGhNYXNrIiwiY3VycmVudERlcHRoRnVuYyIsImN1cnJlbnREZXB0aENsZWFyIiwiREVQVEhfVEVTVCIsImRlcHRoTWFzayIsInNldEZ1bmMiLCJORVZFUiIsIkFMV0FZUyIsIkxFU1MiLCJMRVFVQUwiLCJFUVVBTCIsIkdFUVVBTCIsIkdSRUFURVIiLCJOT1RFUVVBTCIsImNsZWFyRGVwdGgiLCJjdXJyZW50U3RlbmNpbE1hc2siLCJjdXJyZW50U3RlbmNpbEZ1bmMiLCJjdXJyZW50U3RlbmNpbFJlZiIsImN1cnJlbnRTdGVuY2lsRnVuY01hc2siLCJjdXJyZW50U3RlbmNpbEZhaWwiLCJjdXJyZW50U3RlbmNpbFpGYWlsIiwiY3VycmVudFN0ZW5jaWxaUGFzcyIsImN1cnJlbnRTdGVuY2lsQ2xlYXIiLCJzdGVuY2lsVGVzdCIsIlNURU5DSUxfVEVTVCIsInN0ZW5jaWxNYXNrIiwic2V0T3AiLCJzdGVuY2lsT3AiLCJjbGVhclN0ZW5jaWwiLCJ1Ym9CaW5kaW5ncyIsInVib1Byb2dyYW1NYXAiLCJlbmFibGVkQ2FwYWJpbGl0aWVzIiwiY3VycmVudEJvdW5kRnJhbWVidWZmZXJzIiwiY3VycmVudERyYXdidWZmZXJzIiwiZGVmYXVsdERyYXdidWZmZXJzIiwiY3VycmVudFByb2dyYW0iLCJjdXJyZW50QmxlbmRpbmdFbmFibGVkIiwiY3VycmVudEJsZW5kaW5nIiwiY3VycmVudEJsZW5kRXF1YXRpb24iLCJjdXJyZW50QmxlbmRTcmMiLCJjdXJyZW50QmxlbmREc3QiLCJjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhIiwiY3VycmVudEJsZW5kU3JjQWxwaGEiLCJjdXJyZW50QmxlbmREc3RBbHBoYSIsImN1cnJlbnRCbGVuZENvbG9yIiwiY3VycmVudEJsZW5kQWxwaGEiLCJjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEiLCJjdXJyZW50RmxpcFNpZGVkIiwiY3VycmVudEN1bGxGYWNlIiwiY3VycmVudExpbmVXaWR0aCIsImN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yIiwiY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyIsIk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTIiwibGluZVdpZHRoQXZhaWxhYmxlIiwiZ2xWZXJzaW9uIiwiVkVSU0lPTiIsImN1cnJlbnRUZXh0dXJlU2xvdCIsImN1cnJlbnRCb3VuZFRleHR1cmVzIiwic2Npc3NvclBhcmFtIiwiU0NJU1NPUl9CT1giLCJ2aWV3cG9ydFBhcmFtIiwiVklFV1BPUlQiLCJjdXJyZW50U2Npc3NvciIsImN1cnJlbnRWaWV3cG9ydCIsImNyZWF0ZVRleHR1cmUiLCJkaW1lbnNpb25zIiwiYmluZFRleHR1cmUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTkVBUkVTVCIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIlRFWFRVUkVfM0QiLCJURVhUVVJFXzJEX0FSUkFZIiwidGV4SW1hZ2UzRCIsIlJHQkEiLCJ0ZXhJbWFnZTJEIiwiZW1wdHlUZXh0dXJlcyIsIlRFWFRVUkVfMkQiLCJURVhUVVJFX0NVQkVfTUFQIiwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YIiwic2V0RmxpcFNpZGVkIiwic2V0Q3VsbEZhY2UiLCJDVUxMX0ZBQ0UiLCJlcXVhdGlvblRvR0wiLCJGVU5DX0FERCIsIkZVTkNfU1VCVFJBQ1QiLCJGVU5DX1JFVkVSU0VfU1VCVFJBQ1QiLCJNSU4iLCJNQVgiLCJmYWN0b3JUb0dMIiwiWkVSTyIsIk9ORSIsIlNSQ19DT0xPUiIsIlNSQ19BTFBIQSIsIlNSQ19BTFBIQV9TQVRVUkFURSIsIkRTVF9DT0xPUiIsIkRTVF9BTFBIQSIsIk9ORV9NSU5VU19TUkNfQ09MT1IiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwiT05FX01JTlVTX0RTVF9DT0xPUiIsIk9ORV9NSU5VU19EU1RfQUxQSEEiLCJDT05TVEFOVF9DT0xPUiIsIk9ORV9NSU5VU19DT05TVEFOVF9DT0xPUiIsIkNPTlNUQU5UX0FMUEhBIiwiT05FX01JTlVTX0NPTlNUQU5UX0FMUEhBIiwiQkxFTkQiLCJibGVuZEVxdWF0aW9uU2VwYXJhdGUiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRnVuYyIsImZyb250RmFjZSIsIkNXIiwiQ0NXIiwiY3VsbEZhY2UiLCJCQUNLIiwiRlJPTlQiLCJGUk9OVF9BTkRfQkFDSyIsInNldFBvbHlnb25PZmZzZXQiLCJmYWN0b3IiLCJQT0xZR09OX09GRlNFVF9GSUxMIiwiYmluZEZyYW1lYnVmZmVyIiwiZnJhbWVidWZmZXIiLCJEUkFXX0ZSQU1FQlVGRkVSIiwiRlJBTUVCVUZGRVIiLCJkcmF3QnVmZmVycyIsIkNPTE9SX0FUVEFDSE1FTlQwIiwidXNlUHJvZ3JhbSIsInNldE1hdGVyaWFsIiwiZnJvbnRGYWNlQ1ciLCJTQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UiLCJzZXRMaW5lV2lkdGgiLCJsaW5lV2lkdGgiLCJTQ0lTU09SX1RFU1QiLCJhY3RpdmVUZXh0dXJlIiwid2ViZ2xTbG90IiwiVEVYVFVSRTAiLCJ3ZWJnbFR5cGUiLCJ3ZWJnbFRleHR1cmUiLCJib3VuZFRleHR1cmUiLCJ1bmJpbmRUZXh0dXJlIiwiY29tcHJlc3NlZFRleEltYWdlMkQiLCJhcHBseSIsImNvbXByZXNzZWRUZXhJbWFnZTNEIiwidXBkYXRlVUJPTWFwcGluZyIsInVuaWZvcm1zR3JvdXAiLCJibG9ja0luZGV4IiwiZ2V0VW5pZm9ybUJsb2NrSW5kZXgiLCJ1bmlmb3JtQmxvY2tCaW5kaW5nIiwiX19iaW5kaW5nUG9pbnRJbmRleCIsInRleFN0b3JhZ2UyRCIsInRleFN0b3JhZ2UzRCIsInRleFN1YkltYWdlMkQiLCJ0ZXhTdWJJbWFnZTNEIiwiY29tcHJlc3NlZFRleFN1YkltYWdlMkQiLCJjb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCIsIktFRVAiLCJSRUFEX0ZSQU1FQlVGRkVSIiwiZ2V0Qnl0ZUxlbmd0aCIsInR5cGVCeXRlTGVuZ3RoIiwiZ2V0VGV4dHVyZVR5cGVCeXRlTGVuZ3RoIiwiVGV4dHVyZVV0aWxzIiwiY29udGFpbiIsImltYWdlQXNwZWN0IiwiY292ZXIiLCJXZWJHTFRleHR1cmVzIiwiX2dsIiwibXVsdGlzYW1wbGVkUlRURXh0Iiwic3VwcG9ydHNJbnZhbGlkYXRlRnJhbWVidWZmZXIiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfaW1hZ2VEaW1lbnNpb25zIiwiX3ZpZGVvVGV4dHVyZXMiLCJfc291cmNlcyIsInVzZU9mZnNjcmVlbkNhbnZhcyIsIk9mZnNjcmVlbkNhbnZhcyIsImVyciIsImNyZWF0ZUNhbnZhcyIsInJlc2l6ZUltYWdlIiwibmVlZHNOZXdDYW52YXMiLCJtYXhTaXplIiwiZ2V0RGltZW5zaW9ucyIsIlZpZGVvRnJhbWUiLCJ0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMiLCJnZW5lcmF0ZU1pcG1hcCIsImdldEludGVybmFsRm9ybWF0IiwiaW50ZXJuYWxGb3JtYXROYW1lIiwiZ2xGb3JtYXQiLCJnbFR5cGUiLCJmb3JjZUxpbmVhclRyYW5zZmVyIiwiUkVEIiwiUjMyRiIsIlIxNkYiLCJSOCIsIlJFRF9JTlRFR0VSIiwiUjhVSSIsIlIxNlVJIiwiUjMyVUkiLCJSOEkiLCJSMTZJIiwiUjMySSIsIlJHIiwiUkczMkYiLCJSRzE2RiIsIlJHOCIsIlJHX0lOVEVHRVIiLCJSRzhVSSIsIlJHMTZVSSIsIlJHMzJVSSIsIlJHOEkiLCJSRzE2SSIsIlJHMzJJIiwiUkdCIiwiVU5TSUdORURfSU5UXzVfOV85XzlfUkVWIiwiUkdCOV9FNSIsIlJHQkEzMkYiLCJSR0JBMTZGIiwiU1JHQjhfQUxQSEE4IiwiUkdCQTgiLCJVTlNJR05FRF9TSE9SVF80XzRfNF80IiwiUkdCQTQiLCJVTlNJR05FRF9TSE9SVF81XzVfNV8xIiwiUkdCNV9BMSIsImdldEludGVybmFsRGVwdGhGb3JtYXQiLCJ1c2VTdGVuY2lsIiwiZGVwdGhUeXBlIiwiZ2xJbnRlcm5hbEZvcm1hdCIsIkRFUFRIMjRfU1RFTkNJTDgiLCJERVBUSDMyRl9TVEVOQ0lMOCIsIkRFUFRIX0NPTVBPTkVOVDI0IiwiREVQVEhfQ09NUE9ORU5UMzJGIiwiREVQVEhfQ09NUE9ORU5UMTYiLCJnZXRNaXBMZXZlbHMiLCJpc0ZyYW1lYnVmZmVyVGV4dHVyZSIsImlzQ29tcHJlc3NlZFRleHR1cmUiLCJ0ZXh0dXJlUHJvcGVydGllcyIsIl9fd2ViZ2xJbml0Iiwid2ViZ2xUZXh0dXJlcyIsIl9fY2FjaGVLZXkiLCJkZWxldGVUZXh0dXJlIiwiZGVhbGxvY2F0ZVRleHR1cmUiLCJvblJlbmRlclRhcmdldERpc3Bvc2UiLCJyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzIiwiX193ZWJnbEZyYW1lYnVmZmVyIiwibGV2ZWwiLCJkZWxldGVGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xEZXB0aGJ1ZmZlciIsImRlbGV0ZVJlbmRlcmJ1ZmZlciIsIl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciIsIl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciIsImF0dGFjaG1lbnRQcm9wZXJ0aWVzIiwiX193ZWJnbFRleHR1cmUiLCJkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0IiwidGV4dHVyZVVuaXRzIiwic2xvdCIsInVwZGF0ZVZpZGVvVGV4dHVyZSIsIl9fdmVyc2lvbiIsImNvbXBsZXRlIiwidXBsb2FkVGV4dHVyZSIsIndyYXBwaW5nVG9HTCIsIlJFUEVBVCIsIkNMQU1QX1RPX0VER0UiLCJNSVJST1JFRF9SRVBFQVQiLCJmaWx0ZXJUb0dMIiwiTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCIsIk5FQVJFU1RfTUlQTUFQX0xJTkVBUiIsIkxJTkVBUiIsIkxJTkVBUl9NSVBNQVBfTkVBUkVTVCIsIkxJTkVBUl9NSVBNQVBfTElORUFSIiwiY29tcGFyZVRvR0wiLCJzZXRUZXh0dXJlUGFyYW1ldGVycyIsIlRFWFRVUkVfV1JBUF9TIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX1dSQVBfUiIsIlRFWFRVUkVfQ09NUEFSRV9NT0RFIiwiQ09NUEFSRV9SRUZfVE9fVEVYVFVSRSIsIlRFWFRVUkVfQ09NUEFSRV9GVU5DIiwiX19jdXJyZW50QW5pc290cm9weSIsInRleFBhcmFtZXRlcmYiLCJURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsImluaXRUZXh0dXJlIiwiZm9yY2VVcGxvYWQiLCJ0ZXh0dXJlQ2FjaGVLZXkiLCJnZXRUZXh0dXJlQ2FjaGVLZXkiLCJpc0NvbXByZXNzZWRBcnJheVRleHR1cmUiLCJzb3VyY2VQcm9wZXJ0aWVzIiwidGV4dHVyZVByaW1hcmllcyIsInVucGFja0NvbnZlcnNpb24iLCJOT05FIiwiQlJPV1NFUl9ERUZBVUxUX1dFQkdMIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwiVU5QQUNLX0FMSUdOTUVOVCIsIlVOUEFDS19DT0xPUlNQQUNFX0NPTlZFUlNJT05fV0VCR0wiLCJ2ZXJpZnlDb2xvclNwYWNlIiwibWlwbWFwIiwidXNlVGV4U3RvcmFnZSIsImFsbG9jYXRlTWVtb3J5IiwibGV2ZWxzIiwibGF5ZXJCeXRlTGVuZ3RoIiwibGF5ZXJEYXRhIiwic3ViYXJyYXkiLCJzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSIsImF0dGFjaG1lbnQiLCJ0ZXh0dXJlVGFyZ2V0IiwiX19oYXNFeHRlcm5hbFRleHR1cmVzIiwidXNlTXVsdGlzYW1wbGVkUlRUIiwiZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCIsImdldFJlbmRlclRhcmdldFNhbXBsZXMiLCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1oiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsInNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSIsInJlbmRlcmJ1ZmZlciIsImlzTXVsdGlzYW1wbGUiLCJiaW5kUmVuZGVyYnVmZmVyIiwiUkVOREVSQlVGRkVSIiwiZ2xBdHRhY2htZW50VHlwZSIsIkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCIsIkRFUFRIX0FUVEFDSE1FTlQiLCJyZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGVFWFQiLCJyZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUiLCJyZW5kZXJidWZmZXJTdG9yYWdlIiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJzZXR1cERlcHRoUmVuZGVyYnVmZmVyIiwiaXNDdWJlIiwiX19hdXRvQWxsb2NhdGVEZXB0aEJ1ZmZlciIsIndlYmdsRGVwdGhUZXh0dXJlIiwic2V0dXBEZXB0aFRleHR1cmUiLCJjcmVhdGVSZW5kZXJidWZmZXIiLCJpbnZhbGlkYXRpb25BcnJheVJlYWQiLCJpbnZhbGlkYXRpb25BcnJheURyYXciLCJfX3VzZVJlbmRlclRvVGV4dHVyZSIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJkaXNwbGF5V2lkdGgiLCJkaXNwbGF5SGVpZ2h0IiwidGV4dHVyZVVuaXQiLCJyZXNldFRleHR1cmVVbml0cyIsImlzQ29tcHJlc3NlZCIsImN1YmVJbWFnZSIsIm1pcG1hcEltYWdlIiwidXBsb2FkQ3ViZVRleHR1cmUiLCJyZWJpbmRUZXh0dXJlcyIsImNvbG9yVGV4dHVyZSIsInNldHVwUmVuZGVyVGFyZ2V0IiwiaXNNdWx0aXBsZVJlbmRlclRhcmdldHMiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImdsVGV4dHVyZVR5cGUiLCJ1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAiLCJ1cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCIsIkNPTE9SX0JVRkZFUl9CSVQiLCJkZXB0aFN0eWxlIiwiREVQVEhfQlVGRkVSX0JJVCIsIlNURU5DSUxfQlVGRkVSX0JJVCIsImJsaXRGcmFtZWJ1ZmZlciIsImludmFsaWRhdGVGcmFtZWJ1ZmZlciIsIldlYkdMVXRpbHMiLCJBTFBIQSIsIkxVTUlOQU5DRSIsIkxVTUlOQU5DRV9BTFBIQSIsIkRFUFRIX0NPTVBPTkVOVCIsIkRFUFRIX1NURU5DSUwiLCJSR0JBX0lOVEVHRVIiLCJDT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUM19FWFQiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVCIsIkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQiLCJDT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1NSR0I4X0VUQzIiLCJDT01QUkVTU0VEX1JHQjhfRVRDMiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDIiwiQ09NUFJFU1NFRF9SR0JBOF9FVEMyX0VBQyIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNHg0X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzR4NF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ181eDRfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDVfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg1X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNng1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzZ4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4Nl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ182eDZfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDVfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg1X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg2X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzh4Nl9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4OF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ184eDhfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDVfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg2X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDZfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg4X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDhfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHgxMF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHgxMF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEwX0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEwX0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTJfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJ4MTJfS0hSIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX0JQVENfVU5PUk1fRVhUIiwiQ09NUFJFU1NFRF9SR0JBX0JQVENfVU5PUk1fRVhUIiwiQ09NUFJFU1NFRF9SR0JfQlBUQ19TSUdORURfRkxPQVRfRVhUIiwiQ09NUFJFU1NFRF9SR0JfQlBUQ19VTlNJR05FRF9GTE9BVF9FWFQiLCJDT01QUkVTU0VEX1JFRF9SR1RDMV9FWFQiLCJDT01QUkVTU0VEX1NJR05FRF9SRURfUkdUQzFfRVhUIiwiQ09NUFJFU1NFRF9SRURfR1JFRU5fUkdUQzJfRVhUIiwiQ09NUFJFU1NFRF9TSUdORURfUkVEX0dSRUVOX1JHVEMyX0VYVCIsIlVOU0lHTkVEX0lOVF8yNF84IiwiQXJyYXlDYW1lcmEiLCJpc0FycmF5Q2FtZXJhIiwiR3JvdXAiLCJpc0dyb3VwIiwiX21vdmVFdmVudCIsIldlYlhSQ29udHJvbGxlciIsIl90YXJnZXRSYXkiLCJfZ3JpcCIsIl9oYW5kIiwiZ2V0SGFuZFNwYWNlIiwiam9pbnRzIiwiaW5wdXRTdGF0ZSIsInBpbmNoaW5nIiwiZ2V0VGFyZ2V0UmF5U3BhY2UiLCJoYXNMaW5lYXJWZWxvY2l0eSIsImxpbmVhclZlbG9jaXR5IiwiaGFzQW5ndWxhclZlbG9jaXR5IiwiYW5ndWxhclZlbG9jaXR5IiwiZ2V0R3JpcFNwYWNlIiwiY29ubmVjdCIsImlucHV0U291cmNlIiwiaGFuZCIsImlucHV0am9pbnQiLCJfZ2V0SGFuZEpvaW50IiwiZGlzY29ubmVjdCIsInJlZmVyZW5jZVNwYWNlIiwiaW5wdXRQb3NlIiwiZ3JpcFBvc2UiLCJoYW5kUG9zZSIsInRhcmdldFJheSIsImdyaXAiLCJzZXNzaW9uIiwidmlzaWJpbGl0eVN0YXRlIiwiam9pbnRQb3NlIiwiZ2V0Sm9pbnRQb3NlIiwiam9pbnQiLCJ0cmFuc2Zvcm0iLCJqb2ludFJhZGl1cyIsImluZGV4VGlwIiwidGh1bWJUaXAiLCJkaXN0YW5jZVRvUGluY2giLCJ0aHJlc2hvbGQiLCJoYW5kZWRuZXNzIiwiZ3JpcFNwYWNlIiwiZ2V0UG9zZSIsInRhcmdldFJheVNwYWNlIiwiam9pbnROYW1lIiwiV2ViWFJEZXB0aFNlbnNpbmciLCJkZXB0aE5lYXIiLCJkZXB0aEZhciIsImRlcHRoRGF0YSIsImdldE1lc2giLCJjYW1lcmFYUiIsImRlcHRoQ29sb3IiLCJkZXB0aFdpZHRoIiwiZGVwdGhIZWlnaHQiLCJnZXREZXB0aFRleHR1cmUiLCJXZWJYUk1hbmFnZXIiLCJmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yIiwicmVmZXJlbmNlU3BhY2VUeXBlIiwiZm92ZWF0aW9uIiwiY3VzdG9tUmVmZXJlbmNlU3BhY2UiLCJwb3NlIiwiZ2xCaW5kaW5nIiwiZ2xQcm9qTGF5ZXIiLCJnbEJhc2VMYXllciIsInhyRnJhbWUiLCJkZXB0aFNlbnNpbmciLCJnZXRDb250ZXh0QXR0cmlidXRlcyIsImluaXRpYWxSZW5kZXJUYXJnZXQiLCJuZXdSZW5kZXJUYXJnZXQiLCJjb250cm9sbGVycyIsImNvbnRyb2xsZXJJbnB1dFNvdXJjZXMiLCJjdXJyZW50U2l6ZSIsImN1cnJlbnRQaXhlbFJhdGlvIiwiY2FtZXJhTCIsImNhbWVyYVIiLCJfY3VycmVudERlcHRoTmVhciIsIl9jdXJyZW50RGVwdGhGYXIiLCJvblNlc3Npb25FdmVudCIsImNvbnRyb2xsZXJJbmRleCIsImNvbnRyb2xsZXIiLCJvblNlc3Npb25FbmQiLCJvbklucHV0U291cmNlc0NoYW5nZSIsImlzUHJlc2VudGluZyIsInNldFBpeGVsUmF0aW8iLCJyZW1vdmVkIiwiYWRkZWQiLCJjYW1lcmFBdXRvVXBkYXRlIiwiZ2V0Q29udHJvbGxlciIsImdldENvbnRyb2xsZXJHcmlwIiwiZ2V0SGFuZCIsInNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJzZXRSZWZlcmVuY2VTcGFjZVR5cGUiLCJnZXRSZWZlcmVuY2VTcGFjZSIsInNldFJlZmVyZW5jZVNwYWNlIiwic3BhY2UiLCJnZXRCYXNlTGF5ZXIiLCJnZXRCaW5kaW5nIiwiZ2V0RnJhbWUiLCJnZXRTZXNzaW9uIiwic2V0U2Vzc2lvbiIsImFzeW5jIiwieHJDb21wYXRpYmxlIiwibWFrZVhSQ29tcGF0aWJsZSIsImdldFBpeGVsUmF0aW8iLCJsYXllckluaXQiLCJhbnRpYWxpYXMiLCJYUldlYkdMTGF5ZXIiLCJ1cGRhdGVSZW5kZXJTdGF0ZSIsImJhc2VMYXllciIsImZyYW1lYnVmZmVyV2lkdGgiLCJmcmFtZWJ1ZmZlckhlaWdodCIsImRlcHRoRm9ybWF0IiwiZ2xEZXB0aEZvcm1hdCIsInByb2plY3Rpb25sYXllckluaXQiLCJjb2xvckZvcm1hdCIsInNjYWxlRmFjdG9yIiwiWFJXZWJHTEJpbmRpbmciLCJjcmVhdGVQcm9qZWN0aW9uTGF5ZXIiLCJ0ZXh0dXJlV2lkdGgiLCJ0ZXh0dXJlSGVpZ2h0IiwiaWdub3JlRGVwdGhWYWx1ZXMiLCJzZXRGb3ZlYXRpb24iLCJyZXF1ZXN0UmVmZXJlbmNlU3BhY2UiLCJjYW1lcmFMUG9zIiwiY2FtZXJhUlBvcyIsInVwZGF0ZUNhbWVyYSIsImlwZCIsInByb2pMIiwicHJvalIiLCJ0b3BGb3YiLCJib3R0b21Gb3YiLCJsZWZ0Rm92IiwicmlnaHRGb3YiLCJ6T2Zmc2V0IiwieE9mZnNldCIsIm5lYXIyIiwiZmFyMiIsImxlZnQyIiwicmlnaHQyIiwidG9wMiIsImJvdHRvbTIiLCJzZXRQcm9qZWN0aW9uRnJvbVVuaW9uIiwidXBkYXRlVXNlckNhbWVyYSIsImdldENhbWVyYSIsImdldEZvdmVhdGlvbiIsImZpeGVkRm92ZWF0aW9uIiwiaGFzRGVwdGhTZW5zaW5nIiwiZ2V0RGVwdGhTZW5zaW5nTWVzaCIsIm9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayIsImdldFZpZXdlclBvc2UiLCJ2aWV3cyIsInNldFJlbmRlclRhcmdldEZyYW1lYnVmZmVyIiwiY2FtZXJhWFJOZWVkc1VwZGF0ZSIsImdsU3ViSW1hZ2UiLCJnZXRWaWV3U3ViSW1hZ2UiLCJzZXRSZW5kZXJUYXJnZXRUZXh0dXJlcyIsImRlcHRoU3RlbmNpbFRleHR1cmUiLCJlbmFibGVkRmVhdHVyZXMiLCJpbmNsdWRlcyIsImdldERlcHRoSW5mb3JtYXRpb24iLCJpc1ZhbGlkIiwiZGV0ZWN0ZWRQbGFuZXMiLCJfZTEiLCJfbTEiLCJXZWJHTE1hdGVyaWFscyIsInJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtIiwicmVmcmVzaFVuaWZvcm1zQ29tbW9uIiwicmVmcmVzaEZvZ1VuaWZvcm1zIiwiaXNGb2ciLCJkZW5zaXR5IiwicmVmcmVzaE1hdGVyaWFsVW5pZm9ybXMiLCJwaXhlbFJhdGlvIiwiaXNNZXNoTGFtYmVydE1hdGVyaWFsIiwiaXNNZXNoVG9vbk1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zVG9vbiIsImlzTWVzaFBob25nTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNQaG9uZyIsInJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkIiwiaXNNZXNoUGh5c2ljYWxNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1BoeXNpY2FsIiwiaXNNZXNoTWF0Y2FwTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNNYXRjYXAiLCJyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSIsImlzTWVzaE5vcm1hbE1hdGVyaWFsIiwiaXNMaW5lQmFzaWNNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0xpbmUiLCJpc0xpbmVEYXNoZWRNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0Rhc2giLCJpc1BvaW50c01hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zUG9pbnRzIiwiaXNTcHJpdGVNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1Nwcml0ZXMiLCJpc1NoYWRvd01hdGVyaWFsIiwiV2ViR0xVbmlmb3Jtc0dyb3VwcyIsInVwZGF0ZUxpc3QiLCJhbGxvY2F0ZWRCaW5kaW5nUG9pbnRzIiwibWF4QmluZGluZ1BvaW50cyIsIk1BWF9VTklGT1JNX0JVRkZFUl9CSU5ESU5HUyIsImhhc1VuaWZvcm1DaGFuZ2VkIiwiaW5kZXhBcnJheSIsImluZGV4U3RyaW5nIiwiY2FjaGVkT2JqZWN0IiwiZ2V0VW5pZm9ybVNpemUiLCJib3VuZGFyeSIsInN0b3JhZ2UiLCJvblVuaWZvcm1zR3JvdXBzRGlzcG9zZSIsImJpbmQiLCJ3ZWJnbFByb2dyYW0iLCJjaHVua1NpemUiLCJ1bmlmb3JtQXJyYXkiLCJjaHVua09mZnNldFVuaWZvcm0iLCJfX2RhdGEiLCJfX29mZnNldCIsImNodW5rT2Zmc2V0IiwiX19zaXplIiwiX19jYWNoZSIsInByZXBhcmVVbmlmb3Jtc0dyb3VwIiwiYmluZGluZ1BvaW50SW5kZXgiLCJhbGxvY2F0ZUJpbmRpbmdQb2ludEluZGV4IiwiVU5JRk9STV9CVUZGRVIiLCJiaW5kQnVmZmVyQmFzZSIsImFycmF5T2Zmc2V0IiwidXBkYXRlQnVmZmVyRGF0YSIsIldlYkdMUmVuZGVyZXIiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJwb3dlclByZWZlcmVuY2UiLCJmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0IiwiX2FscGhhIiwiaXNXZWJHTFJlbmRlcmVyIiwiV2ViR0xSZW5kZXJpbmdDb250ZXh0IiwidWludENsZWFyQ29sb3IiLCJpbnRDbGVhckNvbG9yIiwiY3VycmVudFJlbmRlckxpc3QiLCJjdXJyZW50UmVuZGVyU3RhdGUiLCJyZW5kZXJMaXN0U3RhY2siLCJyZW5kZXJTdGF0ZVN0YWNrIiwiZG9tRWxlbWVudCIsIl9vdXRwdXRDb2xvclNwYWNlIiwidG9uZU1hcHBpbmdFeHBvc3VyZSIsIl90aGlzIiwiX2lzQ29udGV4dExvc3QiLCJfY3VycmVudEFjdGl2ZUN1YmVGYWNlIiwiX2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCIsIl9jdXJyZW50UmVuZGVyVGFyZ2V0IiwiX2N1cnJlbnRNYXRlcmlhbElkIiwiX2N1cnJlbnRDYW1lcmEiLCJfY3VycmVudFZpZXdwb3J0IiwiX2N1cnJlbnRTY2lzc29yIiwiX2N1cnJlbnRTY2lzc29yVGVzdCIsIl9jdXJyZW50Q2xlYXJDb2xvciIsIl9jdXJyZW50Q2xlYXJBbHBoYSIsIl93aWR0aCIsIl9oZWlnaHQiLCJfcGl4ZWxSYXRpbyIsIl9vcGFxdWVTb3J0IiwiX3RyYW5zcGFyZW50U29ydCIsIl9zY2lzc29yIiwiX3NjaXNzb3JUZXN0IiwiX2NsaXBwaW5nRW5hYmxlZCIsIl9sb2NhbENsaXBwaW5nRW5hYmxlZCIsIl9wcm9qU2NyZWVuTWF0cml4IiwiX3ZlY3RvcjMiLCJfdmVjdG9yNCIsIl9lbXB0eVNjZW5lIiwib3ZlcnJpZGVNYXRlcmlhbCIsIl9yZW5kZXJCYWNrZ3JvdW5kIiwiZ2V0VGFyZ2V0UGl4ZWxSYXRpbyIsInByb2dyYW1DYWNoZSIsInJlbmRlckxpc3RzIiwibW9ycGh0YXJnZXRzIiwiYnVmZmVyUmVuZGVyZXIiLCJpbmRleGVkQnVmZmVyUmVuZGVyZXIiLCJjb250ZXh0TmFtZSIsImNvbnRleHRBdHRyaWJ1dGVzIiwib25Db250ZXh0TG9zdCIsIm9uQ29udGV4dFJlc3RvcmUiLCJvbkNvbnRleHRDcmVhdGlvbkVycm9yIiwiaW5pdEdMQ29udGV4dCIsInByZXZlbnREZWZhdWx0IiwiaW5mb0F1dG9SZXNldCIsInNoYWRvd01hcEF1dG9VcGRhdGUiLCJzaGFkb3dNYXBOZWVkc1VwZGF0ZSIsInN0YXR1c01lc3NhZ2UiLCJmb3JFYWNoIiwicmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZXMiLCJkZWFsbG9jYXRlTWF0ZXJpYWwiLCJwcmVwYXJlTWF0ZXJpYWwiLCJnZXRQcm9ncmFtIiwiZm9yY2VDb250ZXh0TG9zcyIsImxvc2VDb250ZXh0IiwiZm9yY2VDb250ZXh0UmVzdG9yZSIsInJlc3RvcmVDb250ZXh0IiwidXBkYXRlU3R5bGUiLCJzZXRWaWV3cG9ydCIsImdldERyYXdpbmdCdWZmZXJTaXplIiwic2V0RHJhd2luZ0J1ZmZlclNpemUiLCJnZXRDdXJyZW50Vmlld3BvcnQiLCJnZXRTY2lzc29yIiwic2V0U2Npc3NvciIsImdldFNjaXNzb3JUZXN0IiwiYm9vbGVhbiIsInNldE9wYXF1ZVNvcnQiLCJtZXRob2QiLCJzZXRUcmFuc3BhcmVudFNvcnQiLCJiaXRzIiwiaXNJbnRlZ2VyRm9ybWF0IiwidGFyZ2V0Rm9ybWF0IiwidGFyZ2V0VHlwZSIsImlzVW5zaWduZWRUeXBlIiwiY2xlYXJCdWZmZXJ1aXYiLCJDT0xPUiIsImNsZWFyQnVmZmVyaXYiLCJvblhSU2Vzc2lvblN0YXJ0Iiwib25YUlNlc3Npb25FbmQiLCJuZWVkc1Byb2dyYW1DaGFuZ2UiLCJuZWVkc0xpZ2h0cyIsImxpZ2h0c1N0YXRlVmVyc2lvbiIsInJlZnJlc2hQcm9ncmFtIiwicmVmcmVzaE1hdGVyaWFsIiwicmVmcmVzaExpZ2h0cyIsInBfdW5pZm9ybXMiLCJtX3VuaWZvcm1zIiwidUNhbVBvcyIsImNhbWVyYVBvc2l0aW9uIiwiYm9uZVRleHR1cmUiLCJjb21wdXRlQm9uZVRleHR1cmUiLCJfaW5kaXJlY3RUZXh0dXJlIiwiaXNNZXNoR291cmF1ZE1hdGVyaWFsIiwiZW52aXJvbm1lbnRJbnRlbnNpdHkiLCJnZXRVbmlmb3JtTGlzdCIsInNldFByb2dyYW0iLCJyYW5nZUZhY3RvciIsImRyYXdTdGFydCIsImRyYXdFbmQiLCJpc0xpbmVTZWdtZW50cyIsImlzTGluZUxvb3AiLCJpc1Nwcml0ZSIsIl9tdWx0aURyYXdJbnN0YW5jZXMiLCJfbXVsdGlEcmF3U3RhcnRzIiwiX211bHRpRHJhd0NvdW50cyIsIl9tdWx0aURyYXdDb3VudCIsInRhcmdldFNjZW5lIiwibWF0ZXJpYWwyIiwiY29tcGlsZUFzeW5jIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjaGVja01hdGVyaWFsc1JlYWR5Iiwic2V0VGltZW91dCIsInByb2plY3RPYmplY3QiLCJpc0xPRCIsInJlbmRlclNjZW5lIiwib3BhcXVlT2JqZWN0cyIsInRyYW5zbWlzc2l2ZU9iamVjdHMiLCJ0cmFuc3BhcmVudE9iamVjdHMiLCJyZW5kZXJPYmplY3RzIiwicmVuZGVyVHJhbnNtaXNzaW9uUGFzcyIsImFjdGl2ZVZpZXdwb3J0IiwiY3VycmVudFRvbmVNYXBwaW5nIiwiY3VycmVudENhbWVyYVZpZXdwb3J0IiwicmVuZGVyVGFyZ2V0TmVlZHNVcGRhdGUiLCJjdXJyZW50U2lkZSIsInByb2dyYW1DYWNoZUtleSIsImVudmlyb25tZW50Um90YXRpb24iLCJ1cGRhdGVDb21tb25NYXRlcmlhbFByb3BlcnRpZXMiLCJtYXRlcmlhbE5lZWRzTGlnaHRzIiwidW5pZm9ybXNMaXN0IiwicHJvZ1VuaWZvcm1zIiwiZGVwdGhTZW5zaW5nTWVzaCIsImNhbWVyYTIiLCJkZWZhdWx0RnJhbWVidWZmZXIiLCJfX3VzZURlZmF1bHRGcmFtZWJ1ZmZlciIsInVzZURlZmF1bHRGcmFtZWJ1ZmZlciIsImlzUmVuZGVyVGFyZ2V0M0QiLCJsYXllciIsImZyYW1lYnVmZmVyVGV4dHVyZUxheWVyIiwicmVhZFJlbmRlclRhcmdldFBpeGVscyIsImFjdGl2ZUN1YmVGYWNlSW5kZXgiLCJyZWFkUGl4ZWxzIiwicmVhZFJlbmRlclRhcmdldFBpeGVsc0FzeW5jIiwiZ2xCdWZmZXIiLCJQSVhFTF9QQUNLX0JVRkZFUiIsIlNUUkVBTV9SRUFEIiwiZmx1c2giLCJzeW5jIiwiZmVuY2VTeW5jIiwiU1lOQ19HUFVfQ09NTUFORFNfQ09NUExFVEUiLCJpbnRlcnZhbCIsInJlamVjdCIsImNsaWVudFdhaXRTeW5jIiwiU1lOQ19GTFVTSF9DT01NQU5EU19CSVQiLCJXQUlUX0ZBSUxFRCIsIlRJTUVPVVRfRVhQSVJFRCIsInByb2JlQXN5bmMiLCJnZXRCdWZmZXJTdWJEYXRhIiwiZGVsZXRlU3luYyIsImNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSIsImxldmVsU2NhbGUiLCJjb3B5VGV4U3ViSW1hZ2UyRCIsImNvcHlUZXh0dXJlVG9UZXh0dXJlIiwic3JjVGV4dHVyZSIsImRzdFRleHR1cmUiLCJzcmNSZWdpb24iLCJkc3RQb3NpdGlvbiIsIm1pblgiLCJtaW5ZIiwiZHN0WCIsImRzdFkiLCJjdXJyZW50VW5wYWNrUm93TGVuIiwiVU5QQUNLX1JPV19MRU5HVEgiLCJjdXJyZW50VW5wYWNrSW1hZ2VIZWlnaHQiLCJVTlBBQ0tfSU1BR0VfSEVJR0hUIiwiY3VycmVudFVucGFja1NraXBQaXhlbHMiLCJVTlBBQ0tfU0tJUF9QSVhFTFMiLCJjdXJyZW50VW5wYWNrU2tpcFJvd3MiLCJVTlBBQ0tfU0tJUF9ST1dTIiwiY3VycmVudFVucGFja1NraXBJbWFnZXMiLCJVTlBBQ0tfU0tJUF9JTUFHRVMiLCJjb3B5VGV4dHVyZVRvVGV4dHVyZTNEIiwibWluWiIsImRzdFoiLCJnbFRhcmdldCIsImluaXRSZW5kZXJUYXJnZXQiLCJyZXNldFN0YXRlIiwiX19USFJFRV9ERVZUT09MU19fIiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJkcmF3aW5nQnVmZmVyQ29sb3JTcGFjZSIsInVucGFja0NvbG9yU3BhY2UiLCJGb2dFeHAyIiwiRm9nIiwiU2NlbmUiLCJJbnRlcmxlYXZlZEJ1ZmZlciIsImlzSW50ZXJsZWF2ZWRCdWZmZXIiLCJhcnJheUJ1ZmZlcnMiLCJfdXVpZCIsImliIiwiX3ZlY3RvciQ2IiwiSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUiLCJpbnRlcmxlYXZlZEJ1ZmZlciIsImludGVybGVhdmVkQnVmZmVycyIsIl9nZW9tZXRyeSIsIl9pbnRlcnNlY3RQb2ludCIsIl93b3JsZFNjYWxlIiwiX212UG9zaXRpb24iLCJfYWxpZ25lZFBvc2l0aW9uIiwiX3JvdGF0ZWRQb3NpdGlvbiIsIl92aWV3V29ybGRNYXRyaXgiLCJfdkEiLCJfdkIiLCJfdkMiLCJfdXZBIiwiX3V2QiIsIl91dkMiLCJTcHJpdGUiLCJmbG9hdDMyQXJyYXkiLCJ0cmFuc2Zvcm1WZXJ0ZXgiLCJ2ZXJ0ZXhQb3NpdGlvbiIsIm12UG9zaXRpb24iLCJfdjEkMiIsIl92MiQxIiwiTE9EIiwiX2N1cnJlbnRMZXZlbCIsImFkZExldmVsIiwiaHlzdGVyZXNpcyIsImdldEN1cnJlbnRMZXZlbCIsImdldE9iamVjdEZvckRpc3RhbmNlIiwibGV2ZWxEaXN0YW5jZSIsIl9iYXNlUG9zaXRpb24iLCJfc2tpbkluZGV4IiwiX3NraW5XZWlnaHQiLCJfbWF0cml4NCIsIl92ZXJ0ZXgiLCJfc3BoZXJlJDQiLCJfaW52ZXJzZU1hdHJpeCQyIiwiX3JheSQyIiwiU2tpbm5lZE1lc2giLCJiaW5kTWF0cml4SW52ZXJzZSIsImFwcGx5Qm9uZVRyYW5zZm9ybSIsImNhbGN1bGF0ZUludmVyc2VzIiwibm9ybWFsaXplU2tpbldlaWdodHMiLCJza2luV2VpZ2h0Iiwic2tpbkluZGV4IiwiYm9uZUluZGV4IiwiYm9uZXMiLCJib25lSW52ZXJzZXMiLCJCb25lIiwiaXNCb25lIiwiRGF0YVRleHR1cmUiLCJfb2Zmc2V0TWF0cml4IiwiX2lkZW50aXR5TWF0cml4JDEiLCJTa2VsZXRvbiIsImJvbmVNYXRyaWNlcyIsImludmVyc2UiLCJib25lIiwiZ2V0Qm9uZUJ5TmFtZSIsImpzb24iLCJib25lSW52ZXJzZSIsIkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsIl9pbnN0YW5jZUxvY2FsTWF0cml4IiwiX2luc3RhbmNlV29ybGRNYXRyaXgiLCJfaW5zdGFuY2VJbnRlcnNlY3RzIiwiX2JveDMiLCJfaWRlbnRpdHkiLCJfbWVzaCQxIiwiX3NwaGVyZSQzIiwiSW5zdGFuY2VkTWVzaCIsInNldE1hdHJpeEF0IiwiZ2V0TWF0cml4QXQiLCJnZXRDb2xvckF0IiwiZ2V0TW9ycGhBdCIsImRhdGFJbmRleCIsInJheWNhc3RUaW1lcyIsImluc3RhbmNlSWQiLCJzZXRDb2xvckF0Iiwic2V0TW9ycGhBdCIsInNvcnRPcGFxdWUiLCJzb3J0VHJhbnNwYXJlbnQiLCJNdWx0aURyYXdSZW5kZXJMaXN0IiwicG9vbCIsIml0ZW0iLCJfbWF0cml4JDEiLCJfaW52TWF0cml4V29ybGQiLCJfaWRlbnRpdHlNYXRyaXgiLCJfd2hpdGVDb2xvciIsIl9wcm9qU2NyZWVuTWF0cml4JDIiLCJfYm94JDEiLCJfc3BoZXJlJDIiLCJfdmVjdG9yJDUiLCJfZm9yd2FyZCIsIl90ZW1wIiwiX3JlbmRlckxpc3QiLCJfbWVzaCIsIl9iYXRjaEludGVyc2VjdHMiLCJjb3B5QXR0cmlidXRlRGF0YSIsInRhcmdldE9mZnNldCIsInZlcnRleENvdW50IiwiQmF0Y2hlZE1lc2giLCJjdXN0b21Tb3J0IiwiX2RyYXdJbmZvIiwiX3Zpc2liaWxpdHlDaGFuZ2VkIiwiX2luaXRNYXRyaWNlc1RleHR1cmUiLCJfaW5pdEluZGlyZWN0VGV4dHVyZSIsIm1hdHJpY2VzQXJyYXkiLCJpbmRpcmVjdEFycmF5IiwiaW5kaXJlY3RUZXh0dXJlIiwiX2luaXRDb2xvcnNUZXh0dXJlIiwiY29sb3JzQXJyYXkiLCJfaW5pdGlhbGl6ZUdlb21ldHJ5IiwicmVmZXJlbmNlIiwiYXR0cmlidXRlTmFtZSIsInNyY0F0dHJpYnV0ZSIsImRzdEF0dHJpYnV0ZSIsIl92YWxpZGF0ZUdlb21ldHJ5IiwiYmF0Y2hHZW9tZXRyeSIsIkJvb2xlYW4iLCJzZXRDdXN0b21Tb3J0IiwiZnVuYyIsImRyYXdJbmZvIiwiZ2V0Qm91bmRpbmdCb3hBdCIsImdldEJvdW5kaW5nU3BoZXJlQXQiLCJhZGRJbnN0YW5jZSIsImRyYXdJZCIsImFkZEdlb21ldHJ5IiwiaW5kZXhDb3VudCIsInJlc2VydmVkUmFuZ2UiLCJ2ZXJ0ZXhTdGFydCIsImluZGV4U3RhcnQiLCJsYXN0UmFuZ2UiLCJoYXNJbmRleCIsInNldEdlb21ldHJ5QXQiLCJkc3RJbmRleCIsInNyY0luZGV4IiwicG9zQXR0ciIsIml2Iiwic2V0VmlzaWJsZUF0IiwiZ2V0VmlzaWJsZUF0IiwiYmF0Y2hJZCIsImluZiIsIm11bHRpRHJhd1N0YXJ0cyIsIm11bHRpRHJhd0NvdW50cyIsImN1bGxlZCIsImxpbmVjYXAiLCJsaW5lam9pbiIsIl92U3RhcnQiLCJfdkVuZCIsIl9pbnZlcnNlTWF0cml4JDEiLCJfcmF5JDEiLCJfc3BoZXJlJDEiLCJfaW50ZXJzZWN0UG9pbnRPblJheSIsIl9pbnRlcnNlY3RQb2ludE9uU2VnbWVudCIsIkxpbmUiLCJjb21wdXRlTGluZURpc3RhbmNlcyIsImxpbmVEaXN0YW5jZXMiLCJsb2NhbFRocmVzaG9sZCIsImxvY2FsVGhyZXNob2xkU3EiLCJjaGVja0ludGVyc2VjdGlvbiIsInRocmVzaG9sZFNxIiwiX3N0YXJ0IiwiX2VuZCIsIkxpbmVTZWdtZW50cyIsIkxpbmVMb29wIiwiX2ludmVyc2VNYXRyaXgiLCJfcmF5IiwiX3NwaGVyZSIsIl9wb3NpdGlvbiQyIiwiUG9pbnRzIiwidGVzdFBvaW50IiwicmF5UG9pbnREaXN0YW5jZVNxIiwiaW50ZXJzZWN0UG9pbnQiLCJkaXN0YW5jZVRvUmF5IiwiVmlkZW9UZXh0dXJlIiwidmlkZW8iLCJyZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrIiwidXBkYXRlVmlkZW8iLCJyZWFkeVN0YXRlIiwiSEFWRV9DVVJSRU5UX0RBVEEiLCJGcmFtZWJ1ZmZlclRleHR1cmUiLCJDb21wcmVzc2VkVGV4dHVyZSIsIkNvbXByZXNzZWRBcnJheVRleHR1cmUiLCJDb21wcmVzc2VkQ3ViZVRleHR1cmUiLCJpc0NvbXByZXNzZWRDdWJlVGV4dHVyZSIsIkNhbnZhc1RleHR1cmUiLCJpc0NhbnZhc1RleHR1cmUiLCJDdXJ2ZSIsImFyY0xlbmd0aERpdmlzaW9ucyIsImdldFBvaW50IiwiZ2V0UG9pbnRBdCIsIm9wdGlvbmFsVGFyZ2V0IiwiZ2V0VXRvVG1hcHBpbmciLCJnZXRQb2ludHMiLCJkaXZpc2lvbnMiLCJnZXRTcGFjZWRQb2ludHMiLCJnZXRMZW5ndGgiLCJsZW5ndGhzIiwiZ2V0TGVuZ3RocyIsImNhY2hlQXJjTGVuZ3RocyIsImN1cnJlbnQiLCJsYXN0IiwidXBkYXRlQXJjTGVuZ3RocyIsImFyY0xlbmd0aHMiLCJ0YXJnZXRBcmNMZW5ndGgiLCJjb21wYXJpc29uIiwibGVuZ3RoQmVmb3JlIiwiZ2V0VGFuZ2VudCIsInQyIiwicHQxIiwicHQyIiwiZ2V0VGFuZ2VudEF0IiwiY29tcHV0ZUZyZW5ldEZyYW1lcyIsInNlZ21lbnRzIiwiY2xvc2VkIiwidGFuZ2VudHMiLCJiaW5vcm1hbHMiLCJ2ZWMiLCJtYXQiLCJNQVhfVkFMVUUiLCJFbGxpcHNlQ3VydmUiLCJhWCIsImFZIiwieFJhZGl1cyIsInlSYWRpdXMiLCJhU3RhcnRBbmdsZSIsImFFbmRBbmdsZSIsImFDbG9ja3dpc2UiLCJhUm90YXRpb24iLCJpc0VsbGlwc2VDdXJ2ZSIsInR3b1BpIiwiZGVsdGFBbmdsZSIsInNhbWVQb2ludHMiLCJBcmNDdXJ2ZSIsImFSYWRpdXMiLCJpc0FyY0N1cnZlIiwiQ3ViaWNQb2x5IiwiYzAiLCJpbml0Q2F0bXVsbFJvbSIsIngzIiwidGVuc2lvbiIsImluaXROb251bmlmb3JtQ2F0bXVsbFJvbSIsImR0MCIsImR0MSIsImR0MiIsImNhbGMiLCJweCIsInB5IiwicHoiLCJDYXRtdWxsUm9tQ3VydmUzIiwiY3VydmVUeXBlIiwiaXNDYXRtdWxsUm9tQ3VydmUzIiwiaW50UG9pbnQiLCJDYXRtdWxsUm9tIiwiUXVhZHJhdGljQmV6aWVyIiwiUXVhZHJhdGljQmV6aWVyUDAiLCJRdWFkcmF0aWNCZXppZXJQMSIsIlF1YWRyYXRpY0JlemllclAyIiwiQ3ViaWNCZXppZXIiLCJDdWJpY0JlemllclAwIiwiQ3ViaWNCZXppZXJQMSIsIkN1YmljQmV6aWVyUDIiLCJDdWJpY0JlemllclAzIiwiQ3ViaWNCZXppZXJDdXJ2ZSIsImlzQ3ViaWNCZXppZXJDdXJ2ZSIsIkN1YmljQmV6aWVyQ3VydmUzIiwiaXNDdWJpY0JlemllckN1cnZlMyIsIkxpbmVDdXJ2ZSIsImlzTGluZUN1cnZlIiwiTGluZUN1cnZlMyIsImlzTGluZUN1cnZlMyIsIlF1YWRyYXRpY0JlemllckN1cnZlIiwiaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZSIsIlF1YWRyYXRpY0JlemllckN1cnZlMyIsImlzUXVhZHJhdGljQmV6aWVyQ3VydmUzIiwiU3BsaW5lQ3VydmUiLCJpc1NwbGluZUN1cnZlIiwiQ3VydmVQYXRoIiwiY3VydmVzIiwiYXV0b0Nsb3NlIiwiY3VydmUiLCJjbG9zZVBhdGgiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJsaW5lVHlwZSIsIkN1cnZlcyIsImN1cnZlTGVuZ3RocyIsImdldEN1cnZlTGVuZ3RocyIsImRpZmYiLCJzZWdtZW50TGVuZ3RoIiwibGVucyIsImNhY2hlTGVuZ3RocyIsInN1bXMiLCJwdHMiLCJQYXRoIiwiY3VycmVudFBvaW50IiwibW92ZVRvIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImFDUHgiLCJhQ1B5IiwiYmV6aWVyQ3VydmVUbyIsImFDUDF4IiwiYUNQMXkiLCJhQ1AyeCIsImFDUDJ5Iiwic3BsaW5lVGhydSIsIm5wdHMiLCJhcmMiLCJhYnNhcmMiLCJhYnNlbGxpcHNlIiwiZWxsaXBzZSIsImZpcnN0UG9pbnQiLCJsYXN0UG9pbnQiLCJMYXRoZUdlb21ldHJ5IiwicGhpU3RhcnQiLCJwaGlMZW5ndGgiLCJpbml0Tm9ybWFscyIsImludmVyc2VTZWdtZW50cyIsInZlcnRleCIsImN1ck5vcm1hbCIsInByZXZOb3JtYWwiLCJiYXNlIiwiQ2Fwc3VsZUdlb21ldHJ5IiwiY2FwU2VnbWVudHMiLCJyYWRpYWxTZWdtZW50cyIsIkNpcmNsZUdlb21ldHJ5IiwidGhldGFTdGFydCIsInRoZXRhTGVuZ3RoIiwic2VnbWVudCIsIkN5bGluZGVyR2VvbWV0cnkiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJvcGVuRW5kZWQiLCJnZW5lcmF0ZUNhcCIsImNlbnRlckluZGV4U3RhcnQiLCJjZW50ZXJJbmRleEVuZCIsImNvc1RoZXRhIiwic2luVGhldGEiLCJzbG9wZSIsImluZGV4Um93IiwiZ2VuZXJhdGVUb3JzbyIsIkNvbmVHZW9tZXRyeSIsIlBvbHloZWRyb25HZW9tZXRyeSIsInZlcnRleEJ1ZmZlciIsInV2QnVmZmVyIiwic3ViZGl2aWRlRmFjZSIsImNvbHMiLCJhaiIsImJqIiwicm93cyIsInB1c2hWZXJ0ZXgiLCJnZXRWZXJ0ZXhCeUluZGV4IiwiY29ycmVjdFVWIiwiYXppbXV0aCIsInN1YmRpdmlkZSIsImFwcGx5UmFkaXVzIiwiY2VudHJvaWQiLCJhemkiLCJjb3JyZWN0VVZzIiwiY29ycmVjdFNlYW0iLCJnZW5lcmF0ZVVWcyIsImRldGFpbHMiLCJEb2RlY2FoZWRyb25HZW9tZXRyeSIsIl92MCIsIl92MSQxIiwiX25vcm1hbCIsIl90cmlhbmdsZSIsIkVkZ2VzR2VvbWV0cnkiLCJ0aHJlc2hvbGRBbmdsZSIsInByZWNpc2lvblBvaW50cyIsInRocmVzaG9sZERvdCIsImluZGV4QXR0ciIsInBvc2l0aW9uQXR0ciIsImluZGV4QXJyIiwidmVydEtleXMiLCJoYXNoZXMiLCJlZGdlRGF0YSIsImpOZXh0IiwidmVjSGFzaDAiLCJ2ZWNIYXNoMSIsInJldmVyc2VIYXNoIiwiaW5kZXgwIiwiU2hhcGUiLCJob2xlcyIsImdldFBvaW50c0hvbGVzIiwiaG9sZXNQdHMiLCJleHRyYWN0UG9pbnRzIiwiaG9sZSIsIkVhcmN1dCIsImhvbGVJbmRpY2VzIiwiZGltIiwiaGFzSG9sZXMiLCJvdXRlckxlbiIsIm91dGVyTm9kZSIsImxpbmtlZExpc3QiLCJwcmV2IiwibWF4WCIsIm1heFkiLCJpbnZTaXplIiwicXVldWUiLCJzdGVpbmVyIiwiZ2V0TGVmdG1vc3QiLCJjb21wYXJlWCIsImVsaW1pbmF0ZUhvbGUiLCJlbGltaW5hdGVIb2xlcyIsImVhcmN1dExpbmtlZCIsImNsb2Nrd2lzZSIsInNpZ25lZEFyZWEiLCJpbnNlcnROb2RlIiwicmVtb3ZlTm9kZSIsImZpbHRlclBvaW50cyIsImFnYWluIiwiYXJlYSIsImVhciIsInBhc3MiLCJ6T3JkZXIiLCJwcmV2WiIsIm5leHRaIiwidGFpbCIsIm51bU1lcmdlcyIsInBTaXplIiwicVNpemUiLCJpblNpemUiLCJzb3J0TGlua2VkIiwiaW5kZXhDdXJ2ZSIsImlzRWFySGFzaGVkIiwiaXNFYXIiLCJjdXJlTG9jYWxJbnRlcnNlY3Rpb25zIiwic3BsaXRFYXJjdXQiLCJwb2ludEluVHJpYW5nbGUiLCJtYXhaIiwibG9jYWxseUluc2lkZSIsImlzVmFsaWREaWFnb25hbCIsInNwbGl0UG9seWdvbiIsImJyaWRnZSIsImh4IiwiaHkiLCJteCIsIm15IiwidGFuTWluIiwic2VjdG9yQ29udGFpbnNTZWN0b3IiLCJmaW5kSG9sZUJyaWRnZSIsImJyaWRnZVJldmVyc2UiLCJsZWZ0bW9zdCIsImludGVyc2VjdHNQb2x5Z29uIiwiaW5zaWRlIiwibWlkZGxlSW5zaWRlIiwicTEiLCJxMiIsIm8xIiwibzIiLCJvMyIsIm80Iiwib25TZWdtZW50IiwibnVtIiwiTm9kZSIsImFuIiwiYnAiLCJTaGFwZVV0aWxzIiwiY29udG91ciIsImlzQ2xvY2tXaXNlIiwidHJpYW5ndWxhdGVTaGFwZSIsImZhY2VzIiwicmVtb3ZlRHVwRW5kUHRzIiwiYWRkQ29udG91ciIsImhvbGVJbmRleCIsIkV4dHJ1ZGVHZW9tZXRyeSIsInZlcnRpY2VzQXJyYXkiLCJ1dkFycmF5IiwiYWRkU2hhcGUiLCJwbGFjZWhvbGRlciIsImN1cnZlU2VnbWVudHMiLCJzdGVwcyIsImJldmVsRW5hYmxlZCIsImJldmVsVGhpY2tuZXNzIiwiYmV2ZWxTaXplIiwiYmV2ZWxPZmZzZXQiLCJiZXZlbFNlZ21lbnRzIiwiZXh0cnVkZVBhdGgiLCJ1dmdlbiIsIlVWR2VuZXJhdG9yIiwiV29ybGRVVkdlbmVyYXRvciIsImV4dHJ1ZGVQdHMiLCJzcGxpbmVUdWJlIiwiYmlub3JtYWwiLCJwb3NpdGlvbjIiLCJleHRydWRlQnlQYXRoIiwic2hhcGVQb2ludHMiLCJyZXZlcnNlIiwiaGwiLCJhaG9sZSIsInNjYWxlUHQyIiwicHQiLCJ2bGVuIiwiZmxlbiIsImdldEJldmVsVmVjIiwiaW5QdCIsImluUHJldiIsImluTmV4dCIsInZfdHJhbnNfeCIsInZfdHJhbnNfeSIsInNocmlua19ieSIsInZfcHJldl94Iiwidl9wcmV2X3kiLCJ2X25leHRfeCIsInZfbmV4dF95Iiwidl9wcmV2X2xlbnNxIiwiY29sbGluZWFyMCIsInZfcHJldl9sZW4iLCJ2X25leHRfbGVuIiwicHRQcmV2U2hpZnRfeCIsInB0UHJldlNoaWZ0X3kiLCJzZiIsInZfdHJhbnNfbGVuc3EiLCJkaXJlY3Rpb25fZXEiLCJjb250b3VyTW92ZW1lbnRzIiwiaG9sZXNNb3ZlbWVudHMiLCJvbmVIb2xlTW92ZW1lbnRzIiwidmVydGljZXNNb3ZlbWVudHMiLCJicyIsInZlcnQiLCJzaWRld2FsbHMiLCJsYXllcm9mZnNldCIsInNsIiwic2xlbjEiLCJzbGVuMiIsImY0IiwiZjMiLCJhZGRWZXJ0ZXgiLCJuZXh0SW5kZXgiLCJnZW5lcmF0ZVRvcFVWIiwiYWRkVVYiLCJnZW5lcmF0ZVNpZGVXYWxsVVYiLCJ2ZWN0b3IyIiwiYnVpbGRMaWRGYWNlcyIsImJ1aWxkU2lkZUZhY2VzIiwidG9KU09OJDEiLCJnZW9tZXRyeVNoYXBlcyIsImluZGV4QSIsImluZGV4QiIsImluZGV4QyIsImFfeCIsImFfeSIsImJfeCIsImJfeSIsImNfeCIsImNfeSIsImluZGV4RCIsImFfeiIsImJfeiIsImNfeiIsImRfeCIsImRfeSIsImRfeiIsIkljb3NhaGVkcm9uR2VvbWV0cnkiLCJPY3RhaGVkcm9uR2VvbWV0cnkiLCJSaW5nR2VvbWV0cnkiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwidGhldGFTZWdtZW50cyIsInBoaVNlZ21lbnRzIiwicmFkaXVzU3RlcCIsInRoZXRhU2VnbWVudExldmVsIiwiU2hhcGVHZW9tZXRyeSIsImluZGV4T2Zmc2V0Iiwic2hhcGVWZXJ0aWNlcyIsInNoYXBlSG9sZXMiLCJzaGFwZUhvbGUiLCJTcGhlcmVHZW9tZXRyeSIsInRoZXRhRW5kIiwiZ3JpZCIsInZlcnRpY2VzUm93IiwidU9mZnNldCIsIlRldHJhaGVkcm9uR2VvbWV0cnkiLCJUb3J1c0dlb21ldHJ5IiwidHViZSIsInR1YnVsYXJTZWdtZW50cyIsIlRvcnVzS25vdEdlb21ldHJ5IiwiUDEiLCJQMiIsIkIiLCJUIiwiTiIsImNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSIsImN1Iiwic3UiLCJxdU92ZXJQIiwiY3MiLCJUdWJlR2VvbWV0cnkiLCJmcmFtZXMiLCJQIiwiZ2VuZXJhdGVTZWdtZW50IiwiZ2VuZXJhdGVJbmRpY2VzIiwiZ2VuZXJhdGVCdWZmZXJEYXRhIiwiV2lyZWZyYW1lR2VvbWV0cnkiLCJlZGdlcyIsIm8iLCJvbCIsImlzVW5pcXVlRWRnZSIsImhhc2gxIiwiaGFzaDIiLCJSYXdTaGFkZXJNYXRlcmlhbCIsIlNUQU5EQVJEIiwiUEhZU0lDQUwiLCJfYW5pc290cm9weSIsIl9jbGVhcmNvYXQiLCJfZGlzcGVyc2lvbiIsIl9pcmlkZXNjZW5jZSIsIl9zaGVlbiIsIl90cmFuc21pc3Npb24iLCJUT09OIiwiTUFUQ0FQIiwiY29udmVydEFycmF5IiwiZm9yY2VDbG9uZSIsImlzVHlwZWRBcnJheSIsImlzVmlldyIsIkRhdGFWaWV3IiwiZ2V0S2V5ZnJhbWVPcmRlciIsInRpbWVzIiwic29ydGVkQXJyYXkiLCJuVmFsdWVzIiwic3JjT2Zmc2V0IiwiZmxhdHRlbkpTT04iLCJqc29uS2V5cyIsInZhbHVlUHJvcGVydHlOYW1lIiwiQW5pbWF0aW9uVXRpbHMiLCJzdWJjbGlwIiwic291cmNlQ2xpcCIsInN0YXJ0RnJhbWUiLCJlbmRGcmFtZSIsImZwcyIsImNsaXAiLCJ0cmFja3MiLCJ0cmFjayIsInZhbHVlU2l6ZSIsImdldFZhbHVlU2l6ZSIsIm1pblN0YXJ0VGltZSIsInNoaWZ0IiwicmVzZXREdXJhdGlvbiIsIm1ha2VDbGlwQWRkaXRpdmUiLCJ0YXJnZXRDbGlwIiwicmVmZXJlbmNlRnJhbWUiLCJyZWZlcmVuY2VDbGlwIiwibnVtVHJhY2tzIiwicmVmZXJlbmNlVGltZSIsInJlZmVyZW5jZVRyYWNrIiwicmVmZXJlbmNlVHJhY2tUeXBlIiwiVmFsdWVUeXBlTmFtZSIsInRhcmdldFRyYWNrIiwiZmluZCIsInJlZmVyZW5jZU9mZnNldCIsInJlZmVyZW5jZVZhbHVlU2l6ZSIsImNyZWF0ZUludGVycG9sYW50IiwiaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUiLCJ0YXJnZXRWYWx1ZVNpemUiLCJyZWZlcmVuY2VWYWx1ZSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImludGVycG9sYW50IiwiZXZhbHVhdGUiLCJyZXN1bHRCdWZmZXIiLCJudW1UaW1lcyIsInZhbHVlU3RhcnQiLCJ2YWx1ZUVuZCIsImJsZW5kTW9kZSIsIkludGVycG9sYW50IiwicGFyYW1ldGVyUG9zaXRpb25zIiwic2FtcGxlVmFsdWVzIiwic2FtcGxlU2l6ZSIsIl9jYWNoZWRJbmRleCIsInNldHRpbmdzIiwiRGVmYXVsdFNldHRpbmdzXyIsInBwIiwidmFsaWRhdGVfaW50ZXJ2YWwiLCJzZWVrIiwibGluZWFyX3NjYW4iLCJmb3J3YXJkX3NjYW4iLCJnaXZlVXBBdCIsImNvcHlTYW1wbGVWYWx1ZV8iLCJ0MWdsb2JhbCIsIm1pZCIsImludGVydmFsQ2hhbmdlZF8iLCJpbnRlcnBvbGF0ZV8iLCJnZXRTZXR0aW5nc18iLCJDdWJpY0ludGVycG9sYW50IiwiX3dlaWdodFByZXYiLCJfb2Zmc2V0UHJldiIsIl93ZWlnaHROZXh0IiwiX29mZnNldE5leHQiLCJlbmRpbmdTdGFydCIsImVuZGluZ0VuZCIsImlQcmV2IiwiaU5leHQiLCJ0UHJldiIsInROZXh0IiwiaGFsZkR0IiwibzAiLCJvUCIsIm9OIiwid1AiLCJ3TiIsInBwcCIsInNQIiwic04iLCJMaW5lYXJJbnRlcnBvbGFudCIsIm9mZnNldDEiLCJvZmZzZXQwIiwid2VpZ2h0MSIsIndlaWdodDAiLCJEaXNjcmV0ZUludGVycG9sYW50IiwiS2V5ZnJhbWVUcmFjayIsImludGVycG9sYXRpb24iLCJUaW1lQnVmZmVyVHlwZSIsIlZhbHVlQnVmZmVyVHlwZSIsInNldEludGVycG9sYXRpb24iLCJEZWZhdWx0SW50ZXJwb2xhdGlvbiIsInRyYWNrVHlwZSIsIkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoIiwiZmFjdG9yeU1ldGhvZCIsInRpbWVPZmZzZXQiLCJ0aW1lU2NhbGUiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwibktleXMiLCJ2YWxpZGF0ZSIsInZhbGlkIiwicHJldlRpbWUiLCJjdXJyVGltZSIsIm9wdGltaXplIiwic21vb3RoSW50ZXJwb2xhdGlvbiIsIndyaXRlSW5kZXgiLCJrZWVwIiwib2Zmc2V0UCIsIm9mZnNldE4iLCJyZWFkT2Zmc2V0Iiwid3JpdGVPZmZzZXQiLCJUeXBlZEtleWZyYW1lVHJhY2siLCJCb29sZWFuS2V5ZnJhbWVUcmFjayIsIkNvbG9yS2V5ZnJhbWVUcmFjayIsIk51bWJlcktleWZyYW1lVHJhY2siLCJRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQiLCJRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayIsIlN0cmluZ0tleWZyYW1lVHJhY2siLCJWZWN0b3JLZXlmcmFtZVRyYWNrIiwiQW5pbWF0aW9uQ2xpcCIsImR1cmF0aW9uIiwianNvblRyYWNrcyIsImZyYW1lVGltZSIsInBhcnNlS2V5ZnJhbWVUcmFjayIsImNsaXBUcmFja3MiLCJDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSIsIm1vcnBoVGFyZ2V0U2VxdWVuY2UiLCJub0xvb3AiLCJudW1Nb3JwaFRhcmdldHMiLCJmaW5kQnlOYW1lIiwib2JqZWN0T3JDbGlwQXJyYXkiLCJjbGlwQXJyYXkiLCJDcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlcyIsImFuaW1hdGlvblRvTW9ycGhUYXJnZXRzIiwicGF0dGVybiIsInBhcnRzIiwiYW5pbWF0aW9uTW9ycGhUYXJnZXRzIiwiY2xpcHMiLCJwYXJzZUFuaW1hdGlvbiIsImFkZE5vbmVtcHR5VHJhY2siLCJ0cmFja05hbWUiLCJhbmltYXRpb25LZXlzIiwicHJvcGVydHlOYW1lIiwiZGVzdFRyYWNrcyIsImNsaXBOYW1lIiwiaGllcmFyY2h5VHJhY2tzIiwiaGllcmFyY2h5IiwibW9ycGhUYXJnZXROYW1lcyIsIm1vcnBoVGFyZ2V0TmFtZSIsImFuaW1hdGlvbktleSIsImJvbmVOYW1lIiwidHlwZU5hbWUiLCJnZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lIiwiQ2FjaGUiLCJmaWxlcyIsImZpbGUiLCJMb2FkaW5nTWFuYWdlciIsIm9uTG9hZCIsIm9uUHJvZ3Jlc3MiLCJvbkVycm9yIiwidXJsTW9kaWZpZXIiLCJpc0xvYWRpbmciLCJpdGVtc0xvYWRlZCIsIml0ZW1zVG90YWwiLCJoYW5kbGVycyIsIm9uU3RhcnQiLCJpdGVtU3RhcnQiLCJpdGVtRW5kIiwiaXRlbUVycm9yIiwicmVzb2x2ZVVSTCIsInNldFVSTE1vZGlmaWVyIiwiYWRkSGFuZGxlciIsInJlZ2V4IiwibG9hZGVyIiwicmVtb3ZlSGFuZGxlciIsImdldEhhbmRsZXIiLCJnbG9iYWwiLCJEZWZhdWx0TG9hZGluZ01hbmFnZXIiLCJMb2FkZXIiLCJtYW5hZ2VyIiwiY3Jvc3NPcmlnaW4iLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNvdXJjZVBhdGgiLCJyZXF1ZXN0SGVhZGVyIiwibG9hZCIsImxvYWRBc3luYyIsInNldENyb3NzT3JpZ2luIiwic2V0V2l0aENyZWRlbnRpYWxzIiwic2V0UGF0aCIsInNldFJlc291cmNlUGF0aCIsInNldFJlcXVlc3RIZWFkZXIiLCJERUZBVUxUX01BVEVSSUFMX05BTUUiLCJsb2FkaW5nIiwiSHR0cEVycm9yIiwicmVzcG9uc2UiLCJGaWxlTG9hZGVyIiwicmVxIiwiUmVxdWVzdCIsImhlYWRlcnMiLCJIZWFkZXJzIiwiY3JlZGVudGlhbHMiLCJtaW1lVHlwZSIsInJlc3BvbnNlVHlwZSIsImZldGNoIiwidGhlbiIsIlJlYWRhYmxlU3RyZWFtIiwiYm9keSIsImdldFJlYWRlciIsImNhbGxiYWNrcyIsInJlYWRlciIsImNvbnRlbnRMZW5ndGgiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJsb2FkZWQiLCJzdHJlYW0iLCJyZWFkRGF0YSIsInJlYWQiLCJkb25lIiwiY2xvc2UiLCJQcm9ncmVzc0V2ZW50IiwiZW5xdWV1ZSIsIlJlc3BvbnNlIiwic3RhdHVzVGV4dCIsImFycmF5QnVmZmVyIiwiYmxvYiIsInRleHQiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJsYWJlbCIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImNhdGNoIiwiZmluYWxseSIsInNldFJlc3BvbnNlVHlwZSIsInNldE1pbWVUeXBlIiwiQW5pbWF0aW9uTG9hZGVyIiwiQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIiLCJsb2FkVGV4dHVyZSIsInRleERhdGFzIiwibWlwbWFwQ291bnQiLCJpc0N1YmVtYXAiLCJJbWFnZUxvYWRlciIsIm9uSW1hZ2VMb2FkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJvbkltYWdlRXJyb3IiLCJDdWJlVGV4dHVyZUxvYWRlciIsInVybHMiLCJEYXRhVGV4dHVyZUxvYWRlciIsInRleERhdGEiLCJUZXh0dXJlTG9hZGVyIiwiTGlnaHQiLCJIZW1pc3BoZXJlTGlnaHQiLCJfcHJvalNjcmVlbk1hdHJpeCQxIiwiX2xpZ2h0UG9zaXRpb25Xb3JsZCQxIiwiX2xvb2tUYXJnZXQkMSIsIkxpZ2h0U2hhZG93IiwiX2ZyYW1lRXh0ZW50cyIsIl92aWV3cG9ydENvdW50IiwiX3ZpZXdwb3J0cyIsInNoYWRvd01hdHJpeCIsInZpZXdwb3J0SW5kZXgiLCJTcG90TGlnaHRTaGFkb3ciLCJpc1Nwb3RMaWdodFNoYWRvdyIsIlNwb3RMaWdodCIsInBvd2VyIiwiX2xpZ2h0UG9zaXRpb25Xb3JsZCIsIl9sb29rVGFyZ2V0IiwiUG9pbnRMaWdodFNoYWRvdyIsIl9jdWJlRGlyZWN0aW9ucyIsIl9jdWJlVXBzIiwiUG9pbnRMaWdodCIsIkRpcmVjdGlvbmFsTGlnaHRTaGFkb3ciLCJpc0RpcmVjdGlvbmFsTGlnaHRTaGFkb3ciLCJEaXJlY3Rpb25hbExpZ2h0IiwiQW1iaWVudExpZ2h0IiwiUmVjdEFyZWFMaWdodCIsIlNwaGVyaWNhbEhhcm1vbmljczMiLCJpc1NwaGVyaWNhbEhhcm1vbmljczMiLCJ6ZXJvIiwiZ2V0QXQiLCJjb2VmZiIsImdldElycmFkaWFuY2VBdCIsImFkZFNjYWxlZFNIIiwiZ2V0QmFzaXNBdCIsInNoQmFzaXMiLCJMaWdodFByb2JlIiwiTWF0ZXJpYWxMb2FkZXIiLCJnZXRUZXh0dXJlIiwiY3JlYXRlTWF0ZXJpYWxGcm9tVHlwZSIsInNldFRleHR1cmVzIiwiTG9hZGVyVXRpbHMiLCJkZWNvZGVUZXh0IiwiZnJvbUNoYXJDb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwiZXh0cmFjdFVybEJhc2UiLCJsYXN0SW5kZXhPZiIsIkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IiwiQnVmZmVyR2VvbWV0cnlMb2FkZXIiLCJpbnRlcmxlYXZlZEJ1ZmZlck1hcCIsImFycmF5QnVmZmVyTWFwIiwiZ2V0SW50ZXJsZWF2ZWRCdWZmZXIiLCJnZXRBcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJidWZmZXJBdHRyaWJ1dGUiLCJkcmF3Y2FsbHMiLCJvZmZzZXRzIiwiT2JqZWN0TG9hZGVyIiwicGFyc2VBc3luYyIsInBhcnNlQW5pbWF0aW9ucyIsInBhcnNlU2hhcGVzIiwicGFyc2VHZW9tZXRyaWVzIiwicGFyc2VJbWFnZXMiLCJwYXJzZVRleHR1cmVzIiwicGFyc2VNYXRlcmlhbHMiLCJwYXJzZU9iamVjdCIsInBhcnNlU2tlbGV0b25zIiwiYmluZFNrZWxldG9ucyIsImJpbmRMaWdodFRhcmdldHMiLCJoYXNJbWFnZXMiLCJwYXJzZUltYWdlc0FzeW5jIiwiYnVmZmVyR2VvbWV0cnlMb2FkZXIiLCJHZW9tZXRyaWVzIiwiZGVzZXJpYWxpemVJbWFnZSIsImxvYWRJbWFnZSIsImltYWdlQXJyYXkiLCJkZXNlcmlhbGl6ZWRJbWFnZSIsImN1cnJlbnRVcmwiLCJwYXJzZUNvbnN0YW50IiwiVEVYVFVSRV9NQVBQSU5HIiwiVEVYVFVSRV9XUkFQUElORyIsIlRFWFRVUkVfRklMVEVSIiwiZ2V0R2VvbWV0cnkiLCJnZXRNYXRlcmlhbCIsImlzSW50ZWdlciIsIm9iamVjdEFuaW1hdGlvbnMiLCJJbWFnZUJpdG1hcExvYWRlciIsImlzSW1hZ2VCaXRtYXBMb2FkZXIiLCJjcmVhdGVJbWFnZUJpdG1hcCIsInNldE9wdGlvbnMiLCJpbWFnZUJpdG1hcCIsImZldGNoT3B0aW9ucyIsInByb21pc2UiLCJyZXMiLCJjb2xvclNwYWNlQ29udmVyc2lvbiIsIl9jb250ZXh0IiwiQXVkaW9Db250ZXh0Iiwid2luZG93Iiwid2Via2l0QXVkaW9Db250ZXh0IiwiQXVkaW9Mb2FkZXIiLCJoYW5kbGVFcnJvciIsImJ1ZmZlckNvcHkiLCJkZWNvZGVBdWRpb0RhdGEiLCJhdWRpb0J1ZmZlciIsIl9leWVSaWdodCIsIl9leWVMZWZ0IiwiX3Byb2plY3Rpb25NYXRyaXgiLCJTdGVyZW9DYW1lcmEiLCJleWVTZXAiLCJleWVTZXBIYWxmIiwiZXllU2VwT25Qcm9qZWN0aW9uIiwieW1heCIsInhtaW4iLCJ4bWF4IiwiQ2xvY2siLCJhdXRvU3RhcnQiLCJvbGRUaW1lIiwiZWxhcHNlZFRpbWUiLCJydW5uaW5nIiwibm93IiwiZ2V0RWxhcHNlZFRpbWUiLCJnZXREZWx0YSIsIm5ld1RpbWUiLCJwZXJmb3JtYW5jZSIsIkRhdGUiLCJfcG9zaXRpb24kMSIsIl9xdWF0ZXJuaW9uJDEiLCJfc2NhbGUkMSIsIl9vcmllbnRhdGlvbiQxIiwiQXVkaW9MaXN0ZW5lciIsImdhaW4iLCJjcmVhdGVHYWluIiwiZGVzdGluYXRpb24iLCJ0aW1lRGVsdGEiLCJfY2xvY2siLCJnZXRJbnB1dCIsInJlbW92ZUZpbHRlciIsImdldEZpbHRlciIsInNldEZpbHRlciIsImdldE1hc3RlclZvbHVtZSIsInNldE1hc3RlclZvbHVtZSIsInNldFRhcmdldEF0VGltZSIsImN1cnJlbnRUaW1lIiwicG9zaXRpb25YIiwibGluZWFyUmFtcFRvVmFsdWVBdFRpbWUiLCJwb3NpdGlvblkiLCJwb3NpdGlvbloiLCJmb3J3YXJkWCIsImZvcndhcmRZIiwiZm9yd2FyZFoiLCJ1cFgiLCJ1cFkiLCJ1cFoiLCJzZXRPcmllbnRhdGlvbiIsIkF1ZGlvIiwiYXV0b3BsYXkiLCJkZXR1bmUiLCJsb29wIiwibG9vcFN0YXJ0IiwibG9vcEVuZCIsInBsYXliYWNrUmF0ZSIsImlzUGxheWluZyIsImhhc1BsYXliYWNrQ29udHJvbCIsInNvdXJjZVR5cGUiLCJfc3RhcnRlZEF0IiwiX3Byb2dyZXNzIiwiX2Nvbm5lY3RlZCIsImZpbHRlcnMiLCJnZXRPdXRwdXQiLCJzZXROb2RlU291cmNlIiwiYXVkaW9Ob2RlIiwic2V0TWVkaWFFbGVtZW50U291cmNlIiwibWVkaWFFbGVtZW50IiwiY3JlYXRlTWVkaWFFbGVtZW50U291cmNlIiwic2V0TWVkaWFTdHJlYW1Tb3VyY2UiLCJtZWRpYVN0cmVhbSIsImNyZWF0ZU1lZGlhU3RyZWFtU291cmNlIiwic2V0QnVmZmVyIiwicGxheSIsImRlbGF5IiwiY3JlYXRlQnVmZmVyU291cmNlIiwib25lbmRlZCIsIm9uRW5kZWQiLCJzZXREZXR1bmUiLCJzZXRQbGF5YmFja1JhdGUiLCJwYXVzZSIsImdldEZpbHRlcnMiLCJzZXRGaWx0ZXJzIiwiZ2V0RGV0dW5lIiwiZ2V0UGxheWJhY2tSYXRlIiwiZ2V0TG9vcCIsInNldExvb3AiLCJzZXRMb29wU3RhcnQiLCJzZXRMb29wRW5kIiwiZ2V0Vm9sdW1lIiwic2V0Vm9sdW1lIiwiX3Bvc2l0aW9uIiwiX3F1YXRlcm5pb24iLCJfc2NhbGUiLCJfb3JpZW50YXRpb24iLCJQb3NpdGlvbmFsQXVkaW8iLCJwYW5uZXIiLCJjcmVhdGVQYW5uZXIiLCJwYW5uaW5nTW9kZWwiLCJnZXRSZWZEaXN0YW5jZSIsInJlZkRpc3RhbmNlIiwic2V0UmVmRGlzdGFuY2UiLCJnZXRSb2xsb2ZmRmFjdG9yIiwicm9sbG9mZkZhY3RvciIsInNldFJvbGxvZmZGYWN0b3IiLCJnZXREaXN0YW5jZU1vZGVsIiwiZGlzdGFuY2VNb2RlbCIsInNldERpc3RhbmNlTW9kZWwiLCJnZXRNYXhEaXN0YW5jZSIsIm1heERpc3RhbmNlIiwic2V0TWF4RGlzdGFuY2UiLCJzZXREaXJlY3Rpb25hbENvbmUiLCJjb25lSW5uZXJBbmdsZSIsImNvbmVPdXRlckFuZ2xlIiwiY29uZU91dGVyR2FpbiIsIm9yaWVudGF0aW9uWCIsIm9yaWVudGF0aW9uWSIsIm9yaWVudGF0aW9uWiIsIkF1ZGlvQW5hbHlzZXIiLCJhdWRpbyIsImZmdFNpemUiLCJhbmFseXNlciIsImNyZWF0ZUFuYWx5c2VyIiwiZnJlcXVlbmN5QmluQ291bnQiLCJnZXRGcmVxdWVuY3lEYXRhIiwiZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEiLCJnZXRBdmVyYWdlRnJlcXVlbmN5IiwiUHJvcGVydHlNaXhlciIsImJpbmRpbmciLCJtaXhGdW5jdGlvbiIsIm1peEZ1bmN0aW9uQWRkaXRpdmUiLCJzZXRJZGVudGl0eSIsIl9zbGVycCIsIl9zbGVycEFkZGl0aXZlIiwiX3NldEFkZGl0aXZlSWRlbnRpdHlRdWF0ZXJuaW9uIiwiX3dvcmtJbmRleCIsIl9zZWxlY3QiLCJfc2V0QWRkaXRpdmVJZGVudGl0eU90aGVyIiwiX2xlcnAiLCJfbGVycEFkZGl0aXZlIiwiX3NldEFkZGl0aXZlSWRlbnRpdHlOdW1lcmljIiwiX21peEJ1ZmZlclJlZ2lvbiIsIl9taXhCdWZmZXJSZWdpb25BZGRpdGl2ZSIsIl9zZXRJZGVudGl0eSIsIl9vcmlnSW5kZXgiLCJfYWRkSW5kZXgiLCJjdW11bGF0aXZlV2VpZ2h0IiwiY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlIiwidXNlQ291bnQiLCJyZWZlcmVuY2VDb3VudCIsImFjY3VtdWxhdGUiLCJhY2N1SW5kZXgiLCJjdXJyZW50V2VpZ2h0IiwibWl4IiwiYWNjdW11bGF0ZUFkZGl0aXZlIiwid2VpZ2h0QWRkaXRpdmUiLCJvcmlnaW5hbFZhbHVlT2Zmc2V0Iiwic2F2ZU9yaWdpbmFsU3RhdGUiLCJnZXRWYWx1ZSIsInJlc3RvcmVPcmlnaW5hbFN0YXRlIiwidGFyZ2V0SW5kZXgiLCJ3b3JrT2Zmc2V0IiwiX1JFU0VSVkVEX0NIQVJTX1JFIiwiX3Jlc2VydmVkUmUiLCJSZWdFeHAiLCJfd29yZENoYXIiLCJfd29yZENoYXJPckRvdCIsIl90cmFja1JlIiwiX3N1cHBvcnRlZE9iamVjdE5hbWVzIiwiUHJvcGVydHlCaW5kaW5nIiwicm9vdE5vZGUiLCJwYXJzZWRQYXRoIiwicGFyc2VUcmFja05hbWUiLCJub2RlIiwiZmluZE5vZGUiLCJub2RlTmFtZSIsIl9nZXRWYWx1ZV91bmJvdW5kIiwiX3NldFZhbHVlX3VuYm91bmQiLCJjcmVhdGUiLCJyb290IiwiaXNBbmltYXRpb25PYmplY3RHcm91cCIsIkNvbXBvc2l0ZSIsInNhbml0aXplTm9kZU5hbWUiLCJtYXRjaGVzIiwicmVzdWx0cyIsIm9iamVjdE5hbWUiLCJvYmplY3RJbmRleCIsInByb3BlcnR5SW5kZXgiLCJsYXN0RG90Iiwic3Vic3RyaW5nIiwic2VhcmNoTm9kZVN1YnRyZWUiLCJjaGlsZE5vZGUiLCJzdWJUcmVlTm9kZSIsIl9nZXRWYWx1ZV91bmF2YWlsYWJsZSIsIl9zZXRWYWx1ZV91bmF2YWlsYWJsZSIsIl9nZXRWYWx1ZV9kaXJlY3QiLCJ0YXJnZXRPYmplY3QiLCJfZ2V0VmFsdWVfYXJyYXkiLCJyZXNvbHZlZFByb3BlcnR5IiwiX2dldFZhbHVlX2FycmF5RWxlbWVudCIsIl9nZXRWYWx1ZV90b0FycmF5IiwiX3NldFZhbHVlX2RpcmVjdCIsIl9zZXRWYWx1ZV9kaXJlY3Rfc2V0TmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfZGlyZWN0X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfYXJyYXkiLCJkZXN0IiwiX3NldFZhbHVlX2FycmF5X3NldE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2FycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfYXJyYXlFbGVtZW50IiwiX3NldFZhbHVlX2FycmF5RWxlbWVudF9zZXROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9mcm9tQXJyYXkiLCJfc2V0VmFsdWVfZnJvbUFycmF5X3NldE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2Zyb21BcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwidGFyZ2V0QXJyYXkiLCJzb3VyY2VBcnJheSIsIm5vZGVQcm9wZXJ0eSIsInZlcnNpb25pbmciLCJWZXJzaW9uaW5nIiwiTm9uZSIsIk5lZWRzVXBkYXRlIiwiTWF0cml4V29ybGROZWVkc1VwZGF0ZSIsImJpbmRpbmdUeXBlIiwiQmluZGluZ1R5cGUiLCJEaXJlY3QiLCJBcnJheUVsZW1lbnQiLCJIYXNGcm9tVG9BcnJheSIsIkVudGlyZUFycmF5IiwiR2V0dGVyQnlCaW5kaW5nVHlwZSIsIlNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nIiwidW5iaW5kIiwidGFyZ2V0R3JvdXAiLCJvcHRpb25hbFBhcnNlZFBhdGgiLCJfdGFyZ2V0R3JvdXAiLCJfYmluZGluZ3MiLCJzdWJzY3JpYmVfIiwiZmlyc3RWYWxpZEluZGV4IiwibkNhY2hlZE9iamVjdHNfIiwiYmluZGluZ3MiLCJBbmltYXRpb25PYmplY3RHcm91cCIsIl9vYmplY3RzIiwiX2luZGljZXNCeVVVSUQiLCJfcGF0aHMiLCJfcGFyc2VkUGF0aHMiLCJfYmluZGluZ3NJbmRpY2VzQnlQYXRoIiwic3RhdHMiLCJpblVzZSIsImJpbmRpbmdzUGVyT2JqZWN0IiwiaW5kaWNlc0J5VVVJRCIsInBhdGhzIiwicGFyc2VkUGF0aHMiLCJuQmluZGluZ3MiLCJrbm93bk9iamVjdCIsIm5PYmplY3RzIiwibkNhY2hlZE9iamVjdHMiLCJmaXJzdEFjdGl2ZUluZGV4IiwibGFzdENhY2hlZE9iamVjdCIsImJpbmRpbmdzRm9yUGF0aCIsImxhc3RDYWNoZWQiLCJsYXN0Q2FjaGVkSW5kZXgiLCJmaXJzdEFjdGl2ZU9iamVjdCIsImZpcnN0QWN0aXZlIiwidW5jYWNoZSIsImxhc3RPYmplY3QiLCJpbmRpY2VzQnlQYXRoIiwidW5zdWJzY3JpYmVfIiwibGFzdEJpbmRpbmdzSW5kZXgiLCJsYXN0QmluZGluZ3MiLCJBbmltYXRpb25BY3Rpb24iLCJtaXhlciIsImxvY2FsUm9vdCIsIl9taXhlciIsIl9jbGlwIiwiX2xvY2FsUm9vdCIsIm5UcmFja3MiLCJpbnRlcnBvbGFudHMiLCJpbnRlcnBvbGFudFNldHRpbmdzIiwiX2ludGVycG9sYW50U2V0dGluZ3MiLCJfaW50ZXJwb2xhbnRzIiwiX3Byb3BlcnR5QmluZGluZ3MiLCJfY2FjaGVJbmRleCIsIl9ieUNsaXBDYWNoZUluZGV4IiwiX3RpbWVTY2FsZUludGVycG9sYW50IiwiX3dlaWdodEludGVycG9sYW50IiwiX2xvb3BDb3VudCIsIl9zdGFydFRpbWUiLCJfZWZmZWN0aXZlVGltZVNjYWxlIiwiX2VmZmVjdGl2ZVdlaWdodCIsInJlcGV0aXRpb25zIiwicGF1c2VkIiwiY2xhbXBXaGVuRmluaXNoZWQiLCJ6ZXJvU2xvcGVBdFN0YXJ0IiwiemVyb1Nsb3BlQXRFbmQiLCJfYWN0aXZhdGVBY3Rpb24iLCJfZGVhY3RpdmF0ZUFjdGlvbiIsInN0b3BGYWRpbmciLCJzdG9wV2FycGluZyIsImlzUnVubmluZyIsIl9pc0FjdGl2ZUFjdGlvbiIsImlzU2NoZWR1bGVkIiwic3RhcnRBdCIsInNldEVmZmVjdGl2ZVdlaWdodCIsImdldEVmZmVjdGl2ZVdlaWdodCIsImZhZGVJbiIsIl9zY2hlZHVsZUZhZGluZyIsImZhZGVPdXQiLCJjcm9zc0ZhZGVGcm9tIiwiZmFkZU91dEFjdGlvbiIsIndhcnAiLCJmYWRlSW5EdXJhdGlvbiIsImZhZGVPdXREdXJhdGlvbiIsInN0YXJ0RW5kUmF0aW8iLCJlbmRTdGFydFJhdGlvIiwiY3Jvc3NGYWRlVG8iLCJmYWRlSW5BY3Rpb24iLCJ3ZWlnaHRJbnRlcnBvbGFudCIsIl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudCIsInNldEVmZmVjdGl2ZVRpbWVTY2FsZSIsImdldEVmZmVjdGl2ZVRpbWVTY2FsZSIsInNldER1cmF0aW9uIiwic3luY1dpdGgiLCJhY3Rpb24iLCJoYWx0Iiwic3RhcnRUaW1lU2NhbGUiLCJlbmRUaW1lU2NhbGUiLCJfbGVuZENvbnRyb2xJbnRlcnBvbGFudCIsInRpbWVTY2FsZUludGVycG9sYW50IiwiZ2V0TWl4ZXIiLCJnZXRDbGlwIiwiZ2V0Um9vdCIsIl9yb290IiwiX3VwZGF0ZSIsImRlbHRhVGltZSIsInRpbWVEaXJlY3Rpb24iLCJfdXBkYXRlV2VpZ2h0IiwidGltZVJ1bm5pbmciLCJfdXBkYXRlVGltZVNjYWxlIiwiY2xpcFRpbWUiLCJfdXBkYXRlVGltZSIsInByb3BlcnR5TWl4ZXJzIiwiaW50ZXJwb2xhbnRWYWx1ZSIsImxvb3BDb3VudCIsInBpbmdQb25nIiwiX3NldEVuZGluZ3MiLCJoYW5kbGVfc3RvcCIsImxvb3BEZWx0YSIsInBlbmRpbmciLCJhdFN0YXJ0IiwiYXRFbmQiLCJ3ZWlnaHROb3ciLCJ3ZWlnaHRUaGVuIiwiX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIiLCJBbmltYXRpb25NaXhlciIsIl9pbml0TWVtb3J5TWFuYWdlciIsIl9hY2N1SW5kZXgiLCJfYmluZEFjdGlvbiIsInByb3RvdHlwZUFjdGlvbiIsInJvb3RVdWlkIiwiYmluZGluZ3NCeVJvb3QiLCJfYmluZGluZ3NCeVJvb3RBbmROYW1lIiwiYmluZGluZ3NCeU5hbWUiLCJfYWRkSW5hY3RpdmVCaW5kaW5nIiwiY2xpcFV1aWQiLCJhY3Rpb25zRm9yQ2xpcCIsIl9hY3Rpb25zQnlDbGlwIiwia25vd25BY3Rpb25zIiwiX2FkZEluYWN0aXZlQWN0aW9uIiwiX2xlbmRCaW5kaW5nIiwiX2xlbmRBY3Rpb24iLCJfdGFrZUJhY2tCaW5kaW5nIiwiX3Rha2VCYWNrQWN0aW9uIiwiX2FjdGlvbnMiLCJfbkFjdGl2ZUFjdGlvbnMiLCJfbkFjdGl2ZUJpbmRpbmdzIiwiX2NvbnRyb2xJbnRlcnBvbGFudHMiLCJfbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMiLCJhY3Rpb25zIiwiY29udHJvbEludGVycG9sYW50cyIsImFjdGlvbnNCeUNsaXAiLCJhY3Rpb25CeVJvb3QiLCJfcmVtb3ZlSW5hY3RpdmVBY3Rpb24iLCJsYXN0SW5hY3RpdmVBY3Rpb24iLCJjYWNoZUluZGV4Iiwia25vd25BY3Rpb25zRm9yQ2xpcCIsImxhc3RLbm93bkFjdGlvbiIsImJ5Q2xpcENhY2hlSW5kZXgiLCJfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbiIsIl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmciLCJwcmV2SW5kZXgiLCJsYXN0QWN0aXZlSW5kZXgiLCJmaXJzdEluYWN0aXZlQWN0aW9uIiwiZmlyc3RJbmFjdGl2ZUluZGV4IiwibGFzdEFjdGl2ZUFjdGlvbiIsImJpbmRpbmdCeU5hbWUiLCJwcm9wQmluZGluZyIsImxhc3RJbmFjdGl2ZUJpbmRpbmciLCJmaXJzdEluYWN0aXZlQmluZGluZyIsImxhc3RBY3RpdmVCaW5kaW5nIiwiX19jYWNoZUluZGV4IiwibGFzdEFjdGl2ZUludGVycG9sYW50IiwiY2xpcEFjdGlvbiIsIm9wdGlvbmFsUm9vdCIsImNsaXBPYmplY3QiLCJleGlzdGluZ0FjdGlvbiIsIm5ld0FjdGlvbiIsInN0b3BBbGxBY3Rpb24iLCJuQWN0aW9ucyIsInNldFRpbWUiLCJ0aW1lSW5TZWNvbmRzIiwidW5jYWNoZUNsaXAiLCJhY3Rpb25zVG9SZW1vdmUiLCJ1bmNhY2hlUm9vdCIsInVuY2FjaGVBY3Rpb24iLCJVbmlmb3JtIiwiX2lkIiwiVW5pZm9ybXNHcm91cCIsImlzVW5pZm9ybXNHcm91cCIsInNldE5hbWUiLCJ1bmlmb3Jtc1NvdXJjZSIsIkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwiR0xCdWZmZXJBdHRyaWJ1dGUiLCJzZXRUeXBlIiwic2V0SXRlbVNpemUiLCJzZXRDb3VudCIsIl9tYXRyaXgiLCJSYXljYXN0ZXIiLCJzZXRGcm9tQ2FtZXJhIiwiY29vcmRzIiwic2V0RnJvbVhSQ29udHJvbGxlciIsImludGVyc2VjdE9iamVjdCIsImFzY1NvcnQiLCJpbnRlcnNlY3RPYmplY3RzIiwicHJvcGFnYXRlIiwiU3BoZXJpY2FsIiwib3RoZXIiLCJtYWtlU2FmZSIsIkVQUyIsInNldEZyb21DYXJ0ZXNpYW5Db29yZHMiLCJDeWxpbmRyaWNhbCIsIl92ZWN0b3IkNCIsIkJveDIiLCJpc0JveDIiLCJfc3RhcnRQIiwiX3N0YXJ0RW5kIiwiTGluZTMiLCJkaXN0YW5jZVNxIiwiY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlciIsImNsYW1wVG9MaW5lIiwic3RhcnRFbmQyIiwiX3ZlY3RvciQzIiwiU3BvdExpZ2h0SGVscGVyIiwicG9zaXRpb25zIiwiY29uZSIsImNvbmVMZW5ndGgiLCJjb25lV2lkdGgiLCJfdmVjdG9yJDIiLCJfYm9uZU1hdHJpeCIsIl9tYXRyaXhXb3JsZEludiIsIlNrZWxldG9uSGVscGVyIiwiZ2V0Qm9uZUxpc3QiLCJjb2xvcnMiLCJpc1NrZWxldG9uSGVscGVyIiwiYm9uZUxpc3QiLCJQb2ludExpZ2h0SGVscGVyIiwic3BoZXJlU2l6ZSIsIl92ZWN0b3IkMSIsIl9jb2xvcjEiLCJfY29sb3IyIiwiSGVtaXNwaGVyZUxpZ2h0SGVscGVyIiwiR3JpZEhlbHBlciIsIlBvbGFyR3JpZEhlbHBlciIsInNlY3RvcnMiLCJyaW5ncyIsIl92MSIsIl92MiIsIl92MyIsIkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIiLCJsaWdodFBsYW5lIiwidGFyZ2V0TGluZSIsIl92ZWN0b3IiLCJfY2FtZXJhIiwiQ2FtZXJhSGVscGVyIiwicG9pbnRNYXAiLCJhZGRMaW5lIiwiYWRkUG9pbnQiLCJjb2xvckZydXN0dW0iLCJjb2xvckNvbmUiLCJjb2xvclVwIiwiY29sb3JUYXJnZXQiLCJjb2xvckNyb3NzIiwic2V0Q29sb3JzIiwiY29sb3JBdHRyaWJ1dGUiLCJzZXRQb2ludCIsIl9ib3giLCJCb3hIZWxwZXIiLCJCb3gzSGVscGVyIiwiUGxhbmVIZWxwZXIiLCJfYXhpcyIsIl9saW5lR2VvbWV0cnkiLCJfY29uZUdlb21ldHJ5IiwiQXJyb3dIZWxwZXIiLCJoZWFkTGVuZ3RoIiwiaGVhZFdpZHRoIiwic2V0RGlyZWN0aW9uIiwic2V0Q29sb3IiLCJBeGVzSGVscGVyIiwieEF4aXNDb2xvciIsInlBeGlzQ29sb3IiLCJ6QXhpc0NvbG9yIiwiU2hhcGVQYXRoIiwic3ViUGF0aHMiLCJjdXJyZW50UGF0aCIsInRvU2hhcGVzIiwiaXNDQ1ciLCJpc1BvaW50SW5zaWRlUG9seWdvbiIsImluUG9seWdvbiIsInBvbHlMZW4iLCJlZGdlTG93UHQiLCJlZGdlSGlnaFB0IiwiZWRnZUR4IiwiZWRnZUR5IiwicGVycEVkZ2UiLCJzb2xpZCIsInRtcFBhdGgiLCJ0bXBTaGFwZSIsImhvbGVzRmlyc3QiLCJiZXR0ZXJTaGFwZUhvbGVzIiwibmV3U2hhcGVzIiwidG1wUG9pbnRzIiwidG1wSG9sZXMiLCJuZXdTaGFwZUhvbGVzIiwibWFpbklkeCIsImluU3VicGF0aHMiLCJ0b1NoYXBlc05vSG9sZXMiLCJhbWJpZ3VvdXMiLCJ0b0NoYW5nZSIsInNJZHgiLCJzTGVuIiwic2hvIiwiaElkeCIsImhvIiwiaG9sZV91bmFzc2lnbmVkIiwiczJJZHgiLCJXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyIsImlzV2ViR0xNdWx0aXBsZVJlbmRlclRhcmdldHMiLCJyZXZpc2lvbiIsIl9fVEhSRUVfXyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBWSxNQUFBQSxFQUFBLE1BRUFDLEVBQUEsQ0FBQUMsS0FBQSxFQUFBQyxPQUFBLEVBQUFDLE1BQUEsRUFBQUMsT0FBQSxFQUFBQyxNQUFBLEVBQUFDLElBQUEsR0FDQUMsRUFBQSxDQUFBSCxPQUFBLEVBQUFFLElBQUEsRUFBQUUsVUFBQSxFQUFBQyxhQUFBLEdBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLFdBQ0FDLEdBQUEsV0FFQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxNQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBRUFDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUdBQyxHQUFBLEdBQ0FDLEdBQUEsT0FDQUMsR0FBQSxjQUNBQyxHQUFBLGFBQ0FDLEdBQUEsb0JBRUFDLEdBQUEsU0FDQUMsR0FBQSxPQUVBQyxHQUFBLFNBQ0FDLEdBQUEsS0FFQUMsR0FBQSxFQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLEtBRUFDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUVBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFFQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFFQUMsR0FBQSxNQUNBQyxHQUFBLFNBRUFDLEdBQUEsSUFDQUMsR0FBQSxLQ2pOWixNQUFBQyxHQUVBLGdCQUFBQyxDQUFBQyxFQUFBQyxRQUVBQyxJQUFBQyxLQUFBQyxhQUFBRCxLQUFBQyxXQUFBLENBQUEsR0FFQSxNQUFBQyxFQUFBRixLQUFBQyxnQkFFQUYsSUFBQUcsRUFBQUwsS0FFQUssRUFBQUwsR0FBQSxLQUlBLElBQUFLLEVBQUFMLEdBQUFNLFFBQUFMLElBRUFJLEVBQUFMLEdBQUFPLEtBQUFOLEVBSUEsQ0FFQSxnQkFBQU8sQ0FBQVIsRUFBQUMsR0FFQSxRQUFBQyxJQUFBQyxLQUFBQyxXQUFBLE9BQUEsRUFFQSxNQUFBQyxFQUFBRixLQUFBQyxXQUVBLFlBQUFGLElBQUFHLEVBQUFMLEtBQUEsSUFBQUssRUFBQUwsR0FBQU0sUUFBQUwsRUFFQSxDQUVBLG1CQUFBUSxDQUFBVCxFQUFBQyxHQUVBLFFBQUFDLElBQUFDLEtBQUFDLFdBQUEsT0FFQSxNQUNBTSxFQURBUCxLQUFBQyxXQUNBSixHQUVBLFFBQUFFLElBQUFRLEVBQUEsQ0FFQSxNQUFBQyxFQUFBRCxFQUFBSixRQUFBTCxJQUVBLElBQUFVLEdBRUFELEVBQUFFLE9BQUFELEVBQUEsRUFJQSxDQUVBLENBRUEsYUFBQUUsQ0FBQUMsR0FFQSxRQUFBWixJQUFBQyxLQUFBQyxXQUFBLE9BRUEsTUFDQU0sRUFEQVAsS0FBQUMsV0FDQVUsRUFBQWQsTUFFQSxRQUFBRSxJQUFBUSxFQUFBLENBRUFJLEVBQUFDLE9BQUFaLEtBR0EsTUFBQWEsRUFBQU4sRUFBQU8sTUFBQSxHQUVBLElBQUEsSUFBQUMsRUFBQSxFQUFBQyxFQUFBSCxFQUFBSSxPQUFBRixFQUFBQyxFQUFBRCxJQUVBRixFQUFBRSxHQUFBRyxLQUFBbEIsS0FBQVcsR0FJQUEsRUFBQUMsT0FBQSxJQUVBLENBRUEsRUNqRkEsTUFBQU8sR0FBQSxDQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLE1BRUEsSUFBQUMsR0FBQSxRQUdBLE1BQUFDLEdBQUFDLEtBQUFDLEdBQUEsSUFDQUMsR0FBQSxJQUFBRixLQUFBQyxHQUdBLFNBQUFFLEtBRUEsTUFBQUMsRUFBQSxXQUFBSixLQUFBSyxTQUFBLEVBQ0FDLEVBQUEsV0FBQU4sS0FBQUssU0FBQSxFQUNBRSxFQUFBLFdBQUFQLEtBQUFLLFNBQUEsRUFDQUcsRUFBQSxXQUFBUixLQUFBSyxTQUFBLEVBT0EsT0FOQVIsR0FBQSxJQUFBTyxHQUFBUCxHQUFBTyxHQUFBLEVBQUEsS0FBQVAsR0FBQU8sR0FBQSxHQUFBLEtBQUFQLEdBQUFPLEdBQUEsR0FBQSxLQUFBLElBQ0FQLEdBQUEsSUFBQVMsR0FBQVQsR0FBQVMsR0FBQSxFQUFBLEtBQUEsSUFBQVQsR0FBQVMsR0FBQSxHQUFBLEdBQUEsSUFBQVQsR0FBQVMsR0FBQSxHQUFBLEtBQUEsSUFDQVQsR0FBQSxHQUFBVSxFQUFBLEtBQUFWLEdBQUFVLEdBQUEsRUFBQSxLQUFBLElBQUFWLEdBQUFVLEdBQUEsR0FBQSxLQUFBVixHQUFBVSxHQUFBLEdBQUEsS0FDQVYsR0FBQSxJQUFBVyxHQUFBWCxHQUFBVyxHQUFBLEVBQUEsS0FBQVgsR0FBQVcsR0FBQSxHQUFBLEtBQUFYLEdBQUFXLEdBQUEsR0FBQSxNQUdBQyxhQUVBLENBRUEsU0FBQUMsR0FBQUMsRUFBQUMsRUFBQUMsR0FFQSxPQUFBYixLQUFBYSxJQUFBRCxFQUFBWixLQUFBWSxJQUFBQyxFQUFBRixHQUVBLENBSUEsU0FBQUcsR0FBQUMsRUFBQUMsR0FFQSxPQUFBRCxFQUFBQyxFQUFBQSxHQUFBQSxDQUVBLENBeUJBLFNBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEdBRUEsT0FBQSxFQUFBQSxHQUFBRixFQUFBRSxFQUFBRCxDQUVBLENBbUtBLFNBQUFFLEdBQUFWLEVBQUFwQixHQUVBLE9BQUFBLEVBQUErQixhQUVBLEtBQUFDLGFBRUEsT0FBQVosRUFFQSxLQUFBYSxZQUVBLE9BQUFiLEVBQUEsV0FFQSxLQUFBYyxZQUVBLE9BQUFkLEVBQUEsTUFFQSxLQUFBZSxXQUVBLE9BQUFmLEVBQUEsSUFFQSxLQUFBZ0IsV0FFQSxPQUFBM0IsS0FBQWEsSUFBQUYsRUFBQSxZQUFBLEdBRUEsS0FBQWlCLFdBRUEsT0FBQTVCLEtBQUFhLElBQUFGLEVBQUEsT0FBQSxHQUVBLEtBQUFrQixVQUVBLE9BQUE3QixLQUFBYSxJQUFBRixFQUFBLEtBQUEsR0FFQSxRQUVBLE1BQUEsSUFBQW1CLE1BQUEsMkJBSUEsQ0FFQSxTQUFBQyxHQUFBcEIsRUFBQXBCLEdBRUEsT0FBQUEsRUFBQStCLGFBRUEsS0FBQUMsYUFFQSxPQUFBWixFQUVBLEtBQUFhLFlBRUEsT0FBQXhCLEtBQUFnQyxNQUFBLFdBQUFyQixHQUVBLEtBQUFjLFlBRUEsT0FBQXpCLEtBQUFnQyxNQUFBLE1BQUFyQixHQUVBLEtBQUFlLFdBRUEsT0FBQTFCLEtBQUFnQyxNQUFBLElBQUFyQixHQUVBLEtBQUFnQixXQUVBLE9BQUEzQixLQUFBZ0MsTUFBQSxXQUFBckIsR0FFQSxLQUFBaUIsV0FFQSxPQUFBNUIsS0FBQWdDLE1BQUEsTUFBQXJCLEdBRUEsS0FBQWtCLFVBRUEsT0FBQTdCLEtBQUFnQyxNQUFBLElBQUFyQixHQUVBLFFBRUEsTUFBQSxJQUFBbUIsTUFBQSwyQkFJQSxDQUVLLE1BQUFHLEdBQUEsQ0FDTGxDLFFBQUFBLEdBQ0FHLFFBQUFBLEdBQ0FDLGFBQUFBLEdBQ0FPLE1BQUFBLEdBQ0FJLGdCQUFBQSxHQUNBb0IsVUFuUkEsU0FBQWhCLEVBQUFpQixFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLE9BQUFELEdBQUFuQixFQUFBaUIsSUFBQUcsRUFBQUQsSUFBQUQsRUFBQUQsRUFFQSxFQWdSQUksWUE3UUEsU0FBQXJCLEVBQUFDLEVBQUFSLEdBRUEsT0FBQU8sSUFBQUMsR0FFQVIsRUFBQU8sSUFBQUMsRUFBQUQsR0FJQSxDQUlBLEVBa1FBRCxLQUFBQSxHQUNBdUIsS0F6UEEsU0FBQXRCLEVBQUFDLEVBQUFzQixFQUFBQyxHQUVBLE9BQUF6QixHQUFBQyxFQUFBQyxFQUFBLEVBQUFuQixLQUFBMkMsS0FBQUYsRUFBQUMsR0FFQSxFQXNQQUUsU0FuUEEsU0FBQTFCLEVBQUF2QixFQUFBLEdBRUEsT0FBQUEsRUFBQUssS0FBQTZDLElBQUEvQixHQUFBSSxFQUFBLEVBQUF2QixHQUFBQSxFQUVBLEVBZ1BBbUQsV0E3T0EsU0FBQTVCLEVBQUFOLEVBQUFDLEdBRUEsT0FBQUssR0FBQU4sRUFBQSxFQUNBTSxHQUFBTCxFQUFBLEdBRUFLLEdBQUFBLEVBQUFOLElBQUFDLEVBQUFELElBRUFNLEdBQUEsRUFBQSxFQUFBQSxFQUVBLEVBcU9BNkIsYUFuT0EsU0FBQTdCLEVBQUFOLEVBQUFDLEdBRUEsT0FBQUssR0FBQU4sRUFBQSxFQUNBTSxHQUFBTCxFQUFBLEdBRUFLLEdBQUFBLEVBQUFOLElBQUFDLEVBQUFELElBRUFNLEVBQUFBLEdBQUFBLEdBQUEsRUFBQUEsRUFBQSxJQUFBLEdBRUEsRUEyTkE4QixRQXhOQSxTQUFBQyxFQUFBQyxHQUVBLE9BQUFELEVBQUFqRCxLQUFBbUQsTUFBQW5ELEtBQUFLLFVBQUE2QyxFQUFBRCxFQUFBLEdBRUEsRUFxTkFHLFVBbE5BLFNBQUFILEVBQUFDLEdBRUEsT0FBQUQsRUFBQWpELEtBQUFLLFVBQUE2QyxFQUFBRCxFQUVBLEVBK01BSSxnQkE1TUEsU0FBQUMsR0FFQSxPQUFBQSxHQUFBLEdBQUF0RCxLQUFBSyxTQUVBLEVBeU1Ba0QsYUF0TUEsU0FBQUMsUUFFQS9FLElBQUErRSxJQUFBMUQsR0FBQTBELEdBSUEsSUFBQXBDLEVBQUF0QixJQUFBLFdBTUEsT0FKQXNCLEVBQUFwQixLQUFBeUQsS0FBQXJDLEVBQUFBLElBQUEsR0FBQSxFQUFBQSxHQUVBQSxHQUFBQSxFQUFBcEIsS0FBQXlELEtBQUFyQyxFQUFBQSxJQUFBLEVBQUEsR0FBQUEsS0FFQUEsRUFBQUEsSUFBQSxNQUFBLEdBQUEsVUFFQSxFQXlMQXNDLFNBdkxBLFNBQUFDLEdBRUEsT0FBQUEsRUFBQTVELEVBRUEsRUFvTEE2RCxTQWxMQSxTQUFBQyxHQUVBLE9BQUFBLEVBQUEzRCxFQUVBLEVBK0tBNEQsYUE3S0EsU0FBQW5ELEdBRUEsT0FBQSxJQUFBQSxFQUFBQSxFQUFBLElBQUEsSUFBQUEsQ0FFQSxFQTBLQW9ELGVBeEtBLFNBQUFwRCxHQUVBLE9BQUFYLEtBQUFnRSxJQUFBLEVBQUFoRSxLQUFBaUUsS0FBQWpFLEtBQUFrRSxJQUFBdkQsR0FBQVgsS0FBQW1FLEtBRUEsRUFxS0FDLGdCQW5LQSxTQUFBekQsR0FFQSxPQUFBWCxLQUFBZ0UsSUFBQSxFQUFBaEUsS0FBQW1ELE1BQUFuRCxLQUFBa0UsSUFBQXZELEdBQUFYLEtBQUFtRSxLQUVBLEVBZ0tBRSw2QkE5SkEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FRQSxNQUFBQyxFQUFBM0UsS0FBQTJFLElBQ0FDLEVBQUE1RSxLQUFBNEUsSUFFQUMsRUFBQUYsRUFBQUgsRUFBQSxHQUNBTSxFQUFBRixFQUFBSixFQUFBLEdBRUFPLEVBQUFKLEdBQUFKLEVBQUFFLEdBQUEsR0FDQU8sRUFBQUosR0FBQUwsRUFBQUUsR0FBQSxHQUVBUSxFQUFBTixHQUFBSixFQUFBRSxHQUFBLEdBQ0FTLEVBQUFOLEdBQUFMLEVBQUFFLEdBQUEsR0FFQVUsRUFBQVIsR0FBQUYsRUFBQUYsR0FBQSxHQUNBYSxFQUFBUixHQUFBSCxFQUFBRixHQUFBLEdBRUEsT0FBQUcsR0FFQSxJQUFBLE1BQ0FKLEVBQUFlLElBQUFSLEVBQUFHLEVBQUFGLEVBQUFHLEVBQUFILEVBQUFJLEVBQUFMLEVBQUFFLEdBQ0EsTUFFQSxJQUFBLE1BQ0FULEVBQUFlLElBQUFQLEVBQUFJLEVBQUFMLEVBQUFHLEVBQUFGLEVBQUFHLEVBQUFKLEVBQUFFLEdBQ0EsTUFFQSxJQUFBLE1BQ0FULEVBQUFlLElBQUFQLEVBQUFHLEVBQUFILEVBQUFJLEVBQUFMLEVBQUFHLEVBQUFILEVBQUFFLEdBQ0EsTUFFQSxJQUFBLE1BQ0FULEVBQUFlLElBQUFSLEVBQUFHLEVBQUFGLEVBQUFNLEVBQUFOLEVBQUFLLEVBQUFOLEVBQUFFLEdBQ0EsTUFFQSxJQUFBLE1BQ0FULEVBQUFlLElBQUFQLEVBQUFLLEVBQUFOLEVBQUFHLEVBQUFGLEVBQUFNLEVBQUFQLEVBQUFFLEdBQ0EsTUFFQSxJQUFBLE1BQ0FULEVBQUFlLElBQUFQLEVBQUFNLEVBQUFOLEVBQUFLLEVBQUFOLEVBQUFHLEVBQUFILEVBQUFFLEdBQ0EsTUFFQSxRQUNBTyxRQUFBQyxLQUFBLGtGQUFBYixHQUlBLEVBeUdBM0MsVUFBQUEsR0FDQVYsWUFBQUEsSUMzVUEsTUFBQW1FLEdBRUEsV0FBQWxFLENBQUFKLEVBQUEsRUFBQUMsRUFBQSxHQUVBcUUsR0FBQUMsVUFBQUMsV0FBQSxFQUVBaEgsS0FBQXdDLEVBQUFBLEVBQ0F4QyxLQUFBeUMsRUFBQUEsQ0FFQSxDQUVBLFNBQUF3RSxHQUVBLE9BQUFqSCxLQUFBd0MsQ0FFQSxDQUVBLFNBQUF5RSxDQUFBaEYsR0FFQWpDLEtBQUF3QyxFQUFBUCxDQUVBLENBRUEsVUFBQWlGLEdBRUEsT0FBQWxILEtBQUF5QyxDQUVBLENBRUEsVUFBQXlFLENBQUFqRixHQUVBakMsS0FBQXlDLEVBQUFSLENBRUEsQ0FFQSxHQUFBMEUsQ0FBQW5FLEVBQUFDLEdBS0EsT0FIQXpDLEtBQUF3QyxFQUFBQSxFQUNBeEMsS0FBQXlDLEVBQUFBLEVBRUF6QyxJQUVBLENBRUEsU0FBQW1ILENBQUFDLEdBS0EsT0FIQXBILEtBQUF3QyxFQUFBNEUsRUFDQXBILEtBQUF5QyxFQUFBMkUsRUFFQXBILElBRUEsQ0FFQSxJQUFBcUgsQ0FBQTdFLEdBSUEsT0FGQXhDLEtBQUF3QyxFQUFBQSxFQUVBeEMsSUFFQSxDQUVBLElBQUFzSCxDQUFBN0UsR0FJQSxPQUZBekMsS0FBQXlDLEVBQUFBLEVBRUF6QyxJQUVBLENBRUEsWUFBQXVILENBQUEvRyxFQUFBeUIsR0FFQSxPQUFBekIsR0FFQSxLQUFBLEVBQUFSLEtBQUF3QyxFQUFBUCxFQUFBLE1BQ0EsS0FBQSxFQUFBakMsS0FBQXlDLEVBQUFSLEVBQUEsTUFDQSxRQUFBLE1BQUEsSUFBQW1CLE1BQUEsMEJBQUE1QyxHQUlBLE9BQUFSLElBRUEsQ0FFQSxZQUFBd0gsQ0FBQWhILEdBRUEsT0FBQUEsR0FFQSxLQUFBLEVBQUEsT0FBQVIsS0FBQXdDLEVBQ0EsS0FBQSxFQUFBLE9BQUF4QyxLQUFBeUMsRUFDQSxRQUFBLE1BQUEsSUFBQVcsTUFBQSwwQkFBQTVDLEdBSUEsQ0FFQSxLQUFBaUgsR0FFQSxPQUFBLElBQUF6SCxLQUFBNEMsWUFBQTVDLEtBQUF3QyxFQUFBeEMsS0FBQXlDLEVBRUEsQ0FFQSxJQUFBaUYsQ0FBQUMsR0FLQSxPQUhBM0gsS0FBQXdDLEVBQUFtRixFQUFBbkYsRUFDQXhDLEtBQUF5QyxFQUFBa0YsRUFBQWxGLEVBRUF6QyxJQUVBLENBRUEsR0FBQTRILENBQUFELEdBS0EsT0FIQTNILEtBQUF3QyxHQUFBbUYsRUFBQW5GLEVBQ0F4QyxLQUFBeUMsR0FBQWtGLEVBQUFsRixFQUVBekMsSUFFQSxDQUVBLFNBQUE2SCxDQUFBL0MsR0FLQSxPQUhBOUUsS0FBQXdDLEdBQUFzQyxFQUNBOUUsS0FBQXlDLEdBQUFxQyxFQUVBOUUsSUFFQSxDQUVBLFVBQUE4SCxDQUFBakMsRUFBQUMsR0FLQSxPQUhBOUYsS0FBQXdDLEVBQUFxRCxFQUFBckQsRUFBQXNELEVBQUF0RCxFQUNBeEMsS0FBQXlDLEVBQUFvRCxFQUFBcEQsRUFBQXFELEVBQUFyRCxFQUVBekMsSUFFQSxDQUVBLGVBQUErSCxDQUFBSixFQUFBN0MsR0FLQSxPQUhBOUUsS0FBQXdDLEdBQUFtRixFQUFBbkYsRUFBQXNDLEVBQ0E5RSxLQUFBeUMsR0FBQWtGLEVBQUFsRixFQUFBcUMsRUFFQTlFLElBRUEsQ0FFQSxHQUFBZ0ksQ0FBQUwsR0FLQSxPQUhBM0gsS0FBQXdDLEdBQUFtRixFQUFBbkYsRUFDQXhDLEtBQUF5QyxHQUFBa0YsRUFBQWxGLEVBRUF6QyxJQUVBLENBRUEsU0FBQWlJLENBQUFuRCxHQUtBLE9BSEE5RSxLQUFBd0MsR0FBQXNDLEVBQ0E5RSxLQUFBeUMsR0FBQXFDLEVBRUE5RSxJQUVBLENBRUEsVUFBQWtJLENBQUFyQyxFQUFBQyxHQUtBLE9BSEE5RixLQUFBd0MsRUFBQXFELEVBQUFyRCxFQUFBc0QsRUFBQXRELEVBQ0F4QyxLQUFBeUMsRUFBQW9ELEVBQUFwRCxFQUFBcUQsRUFBQXJELEVBRUF6QyxJQUVBLENBRUEsUUFBQW1JLENBQUFSLEdBS0EsT0FIQTNILEtBQUF3QyxHQUFBbUYsRUFBQW5GLEVBQ0F4QyxLQUFBeUMsR0FBQWtGLEVBQUFsRixFQUVBekMsSUFFQSxDQUVBLGNBQUFvSSxDQUFBaEIsR0FLQSxPQUhBcEgsS0FBQXdDLEdBQUE0RSxFQUNBcEgsS0FBQXlDLEdBQUEyRSxFQUVBcEgsSUFFQSxDQUVBLE1BQUFxSSxDQUFBVixHQUtBLE9BSEEzSCxLQUFBd0MsR0FBQW1GLEVBQUFuRixFQUNBeEMsS0FBQXlDLEdBQUFrRixFQUFBbEYsRUFFQXpDLElBRUEsQ0FFQSxZQUFBc0ksQ0FBQWxCLEdBRUEsT0FBQXBILEtBQUFvSSxlQUFBLEVBQUFoQixFQUVBLENBRUEsWUFBQW1CLENBQUFqRyxHQUVBLE1BQUFFLEVBQUF4QyxLQUFBd0MsRUFBQUMsRUFBQXpDLEtBQUF5QyxFQUNBK0YsRUFBQWxHLEVBQUFtRyxTQUtBLE9BSEF6SSxLQUFBd0MsRUFBQWdHLEVBQUEsR0FBQWhHLEVBQUFnRyxFQUFBLEdBQUEvRixFQUFBK0YsRUFBQSxHQUNBeEksS0FBQXlDLEVBQUErRixFQUFBLEdBQUFoRyxFQUFBZ0csRUFBQSxHQUFBL0YsRUFBQStGLEVBQUEsR0FFQXhJLElBRUEsQ0FFQSxHQUFBa0MsQ0FBQXlGLEdBS0EsT0FIQTNILEtBQUF3QyxFQUFBbEIsS0FBQVksSUFBQWxDLEtBQUF3QyxFQUFBbUYsRUFBQW5GLEdBQ0F4QyxLQUFBeUMsRUFBQW5CLEtBQUFZLElBQUFsQyxLQUFBeUMsRUFBQWtGLEVBQUFsRixHQUVBekMsSUFFQSxDQUVBLEdBQUFtQyxDQUFBd0YsR0FLQSxPQUhBM0gsS0FBQXdDLEVBQUFsQixLQUFBYSxJQUFBbkMsS0FBQXdDLEVBQUFtRixFQUFBbkYsR0FDQXhDLEtBQUF5QyxFQUFBbkIsS0FBQWEsSUFBQW5DLEtBQUF5QyxFQUFBa0YsRUFBQWxGLEdBRUF6QyxJQUVBLENBRUEsS0FBQWdDLENBQUFFLEVBQUFDLEdBT0EsT0FIQW5DLEtBQUF3QyxFQUFBbEIsS0FBQWEsSUFBQUQsRUFBQU0sRUFBQWxCLEtBQUFZLElBQUFDLEVBQUFLLEVBQUF4QyxLQUFBd0MsSUFDQXhDLEtBQUF5QyxFQUFBbkIsS0FBQWEsSUFBQUQsRUFBQU8sRUFBQW5CLEtBQUFZLElBQUFDLEVBQUFNLEVBQUF6QyxLQUFBeUMsSUFFQXpDLElBRUEsQ0FFQSxXQUFBMEksQ0FBQUMsRUFBQUMsR0FLQSxPQUhBNUksS0FBQXdDLEVBQUFsQixLQUFBYSxJQUFBd0csRUFBQXJILEtBQUFZLElBQUEwRyxFQUFBNUksS0FBQXdDLElBQ0F4QyxLQUFBeUMsRUFBQW5CLEtBQUFhLElBQUF3RyxFQUFBckgsS0FBQVksSUFBQTBHLEVBQUE1SSxLQUFBeUMsSUFFQXpDLElBRUEsQ0FFQSxXQUFBNkksQ0FBQTNHLEVBQUFDLEdBRUEsTUFBQWxCLEVBQUFqQixLQUFBaUIsU0FFQSxPQUFBakIsS0FBQXNJLGFBQUFySCxHQUFBLEdBQUFtSCxlQUFBOUcsS0FBQWEsSUFBQUQsRUFBQVosS0FBQVksSUFBQUMsRUFBQWxCLElBRUEsQ0FFQSxLQUFBd0QsR0FLQSxPQUhBekUsS0FBQXdDLEVBQUFsQixLQUFBbUQsTUFBQXpFLEtBQUF3QyxHQUNBeEMsS0FBQXlDLEVBQUFuQixLQUFBbUQsTUFBQXpFLEtBQUF5QyxHQUVBekMsSUFFQSxDQUVBLElBQUF1RixHQUtBLE9BSEF2RixLQUFBd0MsRUFBQWxCLEtBQUFpRSxLQUFBdkYsS0FBQXdDLEdBQ0F4QyxLQUFBeUMsRUFBQW5CLEtBQUFpRSxLQUFBdkYsS0FBQXlDLEdBRUF6QyxJQUVBLENBRUEsS0FBQXNELEdBS0EsT0FIQXRELEtBQUF3QyxFQUFBbEIsS0FBQWdDLE1BQUF0RCxLQUFBd0MsR0FDQXhDLEtBQUF5QyxFQUFBbkIsS0FBQWdDLE1BQUF0RCxLQUFBeUMsR0FFQXpDLElBRUEsQ0FFQSxXQUFBOEksR0FLQSxPQUhBOUksS0FBQXdDLEVBQUFsQixLQUFBeUgsTUFBQS9JLEtBQUF3QyxHQUNBeEMsS0FBQXlDLEVBQUFuQixLQUFBeUgsTUFBQS9JLEtBQUF5QyxHQUVBekMsSUFFQSxDQUVBLE1BQUFnSixHQUtBLE9BSEFoSixLQUFBd0MsR0FBQXhDLEtBQUF3QyxFQUNBeEMsS0FBQXlDLEdBQUF6QyxLQUFBeUMsRUFFQXpDLElBRUEsQ0FFQSxHQUFBaUosQ0FBQXRCLEdBRUEsT0FBQTNILEtBQUF3QyxFQUFBbUYsRUFBQW5GLEVBQUF4QyxLQUFBeUMsRUFBQWtGLEVBQUFsRixDQUVBLENBRUEsS0FBQXlHLENBQUF2QixHQUVBLE9BQUEzSCxLQUFBd0MsRUFBQW1GLEVBQUFsRixFQUFBekMsS0FBQXlDLEVBQUFrRixFQUFBbkYsQ0FFQSxDQUVBLFFBQUEyRyxHQUVBLE9BQUFuSixLQUFBd0MsRUFBQXhDLEtBQUF3QyxFQUFBeEMsS0FBQXlDLEVBQUF6QyxLQUFBeUMsQ0FFQSxDQUVBLE1BQUF4QixHQUVBLE9BQUFLLEtBQUE4SCxLQUFBcEosS0FBQXdDLEVBQUF4QyxLQUFBd0MsRUFBQXhDLEtBQUF5QyxFQUFBekMsS0FBQXlDLEVBRUEsQ0FFQSxlQUFBNEcsR0FFQSxPQUFBL0gsS0FBQTZDLElBQUFuRSxLQUFBd0MsR0FBQWxCLEtBQUE2QyxJQUFBbkUsS0FBQXlDLEVBRUEsQ0FFQSxTQUFBWSxHQUVBLE9BQUFyRCxLQUFBc0ksYUFBQXRJLEtBQUFpQixVQUFBLEVBRUEsQ0FFQSxLQUFBcUksR0FNQSxPQUZBaEksS0FBQWlJLE9BQUF2SixLQUFBeUMsR0FBQXpDLEtBQUF3QyxHQUFBbEIsS0FBQUMsRUFJQSxDQUVBLE9BQUFpSSxDQUFBN0IsR0FFQSxNQUFBOEIsRUFBQW5JLEtBQUE4SCxLQUFBcEosS0FBQW1KLFdBQUF4QixFQUFBd0IsWUFFQSxHQUFBLElBQUFNLEVBQUEsT0FBQW5JLEtBQUFDLEdBQUEsRUFFQSxNQUFBbUksRUFBQTFKLEtBQUFpSixJQUFBdEIsR0FBQThCLEVBSUEsT0FBQW5JLEtBQUFxSSxLQUFBM0gsR0FBQTBILEdBQUEsRUFBQSxHQUVBLENBRUEsVUFBQUUsQ0FBQWpDLEdBRUEsT0FBQXJHLEtBQUE4SCxLQUFBcEosS0FBQTZKLGtCQUFBbEMsR0FFQSxDQUVBLGlCQUFBa0MsQ0FBQWxDLEdBRUEsTUFBQW1DLEVBQUE5SixLQUFBd0MsRUFBQW1GLEVBQUFuRixFQUFBdUgsRUFBQS9KLEtBQUF5QyxFQUFBa0YsRUFBQWxGLEVBQ0EsT0FBQXFILEVBQUFBLEVBQUFDLEVBQUFBLENBRUEsQ0FFQSxtQkFBQUMsQ0FBQXJDLEdBRUEsT0FBQXJHLEtBQUE2QyxJQUFBbkUsS0FBQXdDLEVBQUFtRixFQUFBbkYsR0FBQWxCLEtBQUE2QyxJQUFBbkUsS0FBQXlDLEVBQUFrRixFQUFBbEYsRUFFQSxDQUVBLFNBQUF3SCxDQUFBaEosR0FFQSxPQUFBakIsS0FBQXFELFlBQUErRSxlQUFBbkgsRUFFQSxDQUVBLElBQUFzQixDQUFBb0YsRUFBQXVDLEdBS0EsT0FIQWxLLEtBQUF3QyxJQUFBbUYsRUFBQW5GLEVBQUF4QyxLQUFBd0MsR0FBQTBILEVBQ0FsSyxLQUFBeUMsSUFBQWtGLEVBQUFsRixFQUFBekMsS0FBQXlDLEdBQUF5SCxFQUVBbEssSUFFQSxDQUVBLFdBQUFtSyxDQUFBQyxFQUFBQyxFQUFBSCxHQUtBLE9BSEFsSyxLQUFBd0MsRUFBQTRILEVBQUE1SCxHQUFBNkgsRUFBQTdILEVBQUE0SCxFQUFBNUgsR0FBQTBILEVBQ0FsSyxLQUFBeUMsRUFBQTJILEVBQUEzSCxHQUFBNEgsRUFBQTVILEVBQUEySCxFQUFBM0gsR0FBQXlILEVBRUFsSyxJQUVBLENBRUEsTUFBQXNLLENBQUEzQyxHQUVBLE9BQUFBLEVBQUFuRixJQUFBeEMsS0FBQXdDLEdBQUFtRixFQUFBbEYsSUFBQXpDLEtBQUF5QyxDQUVBLENBRUEsU0FBQThILENBQUExSixFQUFBMkosRUFBQSxHQUtBLE9BSEF4SyxLQUFBd0MsRUFBQTNCLEVBQUEySixHQUNBeEssS0FBQXlDLEVBQUE1QixFQUFBMkosRUFBQSxHQUVBeEssSUFFQSxDQUVBLE9BQUF5SyxDQUFBNUosRUFBQSxHQUFBMkosRUFBQSxHQUtBLE9BSEEzSixFQUFBMkosR0FBQXhLLEtBQUF3QyxFQUNBM0IsRUFBQTJKLEVBQUEsR0FBQXhLLEtBQUF5QyxFQUVBNUIsQ0FFQSxDQUVBLG1CQUFBNkosQ0FBQUMsRUFBQW5LLEdBS0EsT0FIQVIsS0FBQXdDLEVBQUFtSSxFQUFBQyxLQUFBcEssR0FDQVIsS0FBQXlDLEVBQUFrSSxFQUFBRSxLQUFBckssR0FFQVIsSUFFQSxDQUVBLFlBQUE4SyxDQUFBQyxFQUFBekIsR0FFQSxNQUFBdkQsRUFBQXpFLEtBQUEyRSxJQUFBcUQsR0FBQXhFLEVBQUF4RCxLQUFBNEUsSUFBQW9ELEdBRUE5RyxFQUFBeEMsS0FBQXdDLEVBQUF1SSxFQUFBdkksRUFDQUMsRUFBQXpDLEtBQUF5QyxFQUFBc0ksRUFBQXRJLEVBS0EsT0FIQXpDLEtBQUF3QyxFQUFBQSxFQUFBdUQsRUFBQXRELEVBQUFxQyxFQUFBaUcsRUFBQXZJLEVBQ0F4QyxLQUFBeUMsRUFBQUQsRUFBQXNDLEVBQUFyQyxFQUFBc0QsRUFBQWdGLEVBQUF0SSxFQUVBekMsSUFFQSxDQUVBLE1BQUEyQixHQUtBLE9BSEEzQixLQUFBd0MsRUFBQWxCLEtBQUFLLFNBQ0EzQixLQUFBeUMsRUFBQW5CLEtBQUFLLFNBRUEzQixJQUVBLENBRUEsRUFBQWdMLE9BQUFDLGtCQUVBakwsS0FBQXdDLFFBQ0F4QyxLQUFBeUMsQ0FFQSxFQzNkQSxNQUFBeUksR0FFQSxXQUFBdEksQ0FBQXVJLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBRUFULEdBQUFuRSxVQUFBNkUsV0FBQSxFQUVBNUwsS0FBQXlJLFNBQUEsQ0FFQSxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsUUFJQTFJLElBQUFvTCxHQUVBbkwsS0FBQTJHLElBQUF3RSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUlBLENBRUEsR0FBQWhGLENBQUF3RSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLE1BQUFFLEVBQUE3TCxLQUFBeUksU0FNQSxPQUpBb0QsRUFBQSxHQUFBVixFQUFBVSxFQUFBLEdBQUFQLEVBQUFPLEVBQUEsR0FBQUosRUFDQUksRUFBQSxHQUFBVCxFQUFBUyxFQUFBLEdBQUFOLEVBQUFNLEVBQUEsR0FBQUgsRUFDQUcsRUFBQSxHQUFBUixFQUFBUSxFQUFBLEdBQUFMLEVBQUFLLEVBQUEsR0FBQUYsRUFFQTNMLElBRUEsQ0FFQSxRQUFBOEwsR0FVQSxPQVJBOUwsS0FBQTJHLElBRUEsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEdBSUEzRyxJQUVBLENBRUEsSUFBQTBILENBQUFwRixHQUVBLE1BQUF1SixFQUFBN0wsS0FBQXlJLFNBQ0FzRCxFQUFBekosRUFBQW1HLFNBTUEsT0FKQW9ELEVBQUEsR0FBQUUsRUFBQSxHQUFBRixFQUFBLEdBQUFFLEVBQUEsR0FBQUYsRUFBQSxHQUFBRSxFQUFBLEdBQ0FGLEVBQUEsR0FBQUUsRUFBQSxHQUFBRixFQUFBLEdBQUFFLEVBQUEsR0FBQUYsRUFBQSxHQUFBRSxFQUFBLEdBQ0FGLEVBQUEsR0FBQUUsRUFBQSxHQUFBRixFQUFBLEdBQUFFLEVBQUEsR0FBQUYsRUFBQSxHQUFBRSxFQUFBLEdBRUEvTCxJQUVBLENBRUEsWUFBQWdNLENBQUFDLEVBQUFDLEVBQUFDLEdBTUEsT0FKQUYsRUFBQUcscUJBQUFwTSxLQUFBLEdBQ0FrTSxFQUFBRSxxQkFBQXBNLEtBQUEsR0FDQW1NLEVBQUFDLHFCQUFBcE0sS0FBQSxHQUVBQSxJQUVBLENBRUEsY0FBQXFNLENBQUEvSixHQUVBLE1BQUF5SixFQUFBekosRUFBQW1HLFNBVUEsT0FSQXpJLEtBQUEyRyxJQUVBb0YsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FDQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FDQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsS0FJQS9MLElBRUEsQ0FFQSxRQUFBbUksQ0FBQTdGLEdBRUEsT0FBQXRDLEtBQUFzTSxpQkFBQXRNLEtBQUFzQyxFQUVBLENBRUEsV0FBQWlLLENBQUFqSyxHQUVBLE9BQUF0QyxLQUFBc00saUJBQUFoSyxFQUFBdEMsS0FFQSxDQUVBLGdCQUFBc00sQ0FBQXpHLEVBQUFDLEdBRUEsTUFBQTBHLEVBQUEzRyxFQUFBNEMsU0FDQWdFLEVBQUEzRyxFQUFBMkMsU0FDQW9ELEVBQUE3TCxLQUFBeUksU0FFQWlFLEVBQUFGLEVBQUEsR0FBQUcsRUFBQUgsRUFBQSxHQUFBSSxFQUFBSixFQUFBLEdBQ0FLLEVBQUFMLEVBQUEsR0FBQU0sRUFBQU4sRUFBQSxHQUFBTyxFQUFBUCxFQUFBLEdBQ0FRLEVBQUFSLEVBQUEsR0FBQVMsRUFBQVQsRUFBQSxHQUFBVSxFQUFBVixFQUFBLEdBRUFXLEVBQUFWLEVBQUEsR0FBQVcsRUFBQVgsRUFBQSxHQUFBWSxFQUFBWixFQUFBLEdBQ0FhLEVBQUFiLEVBQUEsR0FBQWMsRUFBQWQsRUFBQSxHQUFBZSxFQUFBZixFQUFBLEdBQ0FnQixFQUFBaEIsRUFBQSxHQUFBaUIsRUFBQWpCLEVBQUEsR0FBQWtCLEVBQUFsQixFQUFBLEdBY0EsT0FaQVosRUFBQSxHQUFBYSxFQUFBUyxFQUFBUixFQUFBVyxFQUFBVixFQUFBYSxFQUNBNUIsRUFBQSxHQUFBYSxFQUFBVSxFQUFBVCxFQUFBWSxFQUFBWCxFQUFBYyxFQUNBN0IsRUFBQSxHQUFBYSxFQUFBVyxFQUFBVixFQUFBYSxFQUFBWixFQUFBZSxFQUVBOUIsRUFBQSxHQUFBZ0IsRUFBQU0sRUFBQUwsRUFBQVEsRUFBQVAsRUFBQVUsRUFDQTVCLEVBQUEsR0FBQWdCLEVBQUFPLEVBQUFOLEVBQUFTLEVBQUFSLEVBQUFXLEVBQ0E3QixFQUFBLEdBQUFnQixFQUFBUSxFQUFBUCxFQUFBVSxFQUFBVCxFQUFBWSxFQUVBOUIsRUFBQSxHQUFBbUIsRUFBQUcsRUFBQUYsRUFBQUssRUFBQUosRUFBQU8sRUFDQTVCLEVBQUEsR0FBQW1CLEVBQUFJLEVBQUFILEVBQUFNLEVBQUFMLEVBQUFRLEVBQ0E3QixFQUFBLEdBQUFtQixFQUFBSyxFQUFBSixFQUFBTyxFQUFBTixFQUFBUyxFQUVBM04sSUFFQSxDQUVBLGNBQUFvSSxDQUFBdEQsR0FFQSxNQUFBK0csRUFBQTdMLEtBQUF5SSxTQU1BLE9BSkFvRCxFQUFBLElBQUEvRyxFQUFBK0csRUFBQSxJQUFBL0csRUFBQStHLEVBQUEsSUFBQS9HLEVBQ0ErRyxFQUFBLElBQUEvRyxFQUFBK0csRUFBQSxJQUFBL0csRUFBQStHLEVBQUEsSUFBQS9HLEVBQ0ErRyxFQUFBLElBQUEvRyxFQUFBK0csRUFBQSxJQUFBL0csRUFBQStHLEVBQUEsSUFBQS9HLEVBRUE5RSxJQUVBLENBRUEsV0FBQTROLEdBRUEsTUFBQS9CLEVBQUE3TCxLQUFBeUksU0FFQTVDLEVBQUFnRyxFQUFBLEdBQUEvRixFQUFBK0YsRUFBQSxHQUFBOUYsRUFBQThGLEVBQUEsR0FDQWdDLEVBQUFoQyxFQUFBLEdBQUFyRCxFQUFBcUQsRUFBQSxHQUFBaUMsRUFBQWpDLEVBQUEsR0FDQWtDLEVBQUFsQyxFQUFBLEdBQUFtQyxFQUFBbkMsRUFBQSxHQUFBOUssRUFBQThLLEVBQUEsR0FFQSxPQUFBaEcsRUFBQTJDLEVBQUF6SCxFQUFBOEUsRUFBQWlJLEVBQUFFLEVBQUFsSSxFQUFBK0gsRUFBQTlNLEVBQUErRSxFQUFBZ0ksRUFBQUMsRUFBQWhJLEVBQUE4SCxFQUFBRyxFQUFBakksRUFBQXlDLEVBQUF1RixDQUVBLENBRUEsTUFBQUUsR0FFQSxNQUFBcEMsRUFBQTdMLEtBQUF5SSxTQUVBMEMsRUFBQVUsRUFBQSxHQUFBUCxFQUFBTyxFQUFBLEdBQUFKLEVBQUFJLEVBQUEsR0FDQVQsRUFBQVMsRUFBQSxHQUFBTixFQUFBTSxFQUFBLEdBQUFILEVBQUFHLEVBQUEsR0FDQVIsRUFBQVEsRUFBQSxHQUFBTCxFQUFBSyxFQUFBLEdBQUFGLEVBQUFFLEVBQUEsR0FFQXFDLEVBQUF2QyxFQUFBSixFQUFBRyxFQUFBRixFQUNBMkMsRUFBQXpDLEVBQUFMLEVBQUFNLEVBQUFQLEVBQ0FnRCxFQUFBNUMsRUFBQUosRUFBQUcsRUFBQUYsRUFFQWdELEVBQUFsRCxFQUFBK0MsRUFBQTVDLEVBQUE2QyxFQUFBMUMsRUFBQTJDLEVBRUEsR0FBQSxJQUFBQyxFQUFBLE9BQUFyTyxLQUFBMkcsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQSxNQUFBMkgsRUFBQSxFQUFBRCxFQWNBLE9BWkF4QyxFQUFBLEdBQUFxQyxFQUFBSSxFQUNBekMsRUFBQSxJQUFBSixFQUFBRCxFQUFBRyxFQUFBTCxHQUFBZ0QsRUFDQXpDLEVBQUEsSUFBQUgsRUFBQUosRUFBQUcsRUFBQUYsR0FBQStDLEVBRUF6QyxFQUFBLEdBQUFzQyxFQUFBRyxFQUNBekMsRUFBQSxJQUFBRixFQUFBUixFQUFBTSxFQUFBSixHQUFBaUQsRUFDQXpDLEVBQUEsSUFBQUosRUFBQUwsRUFBQU0sRUFBQVAsR0FBQW1ELEVBRUF6QyxFQUFBLEdBQUF1QyxFQUFBRSxFQUNBekMsRUFBQSxJQUFBUCxFQUFBRCxFQUFBRyxFQUFBTCxHQUFBbUQsRUFDQXpDLEVBQUEsSUFBQU4sRUFBQUosRUFBQUcsRUFBQUYsR0FBQWtELEVBRUF0TyxJQUVBLENBRUEsU0FBQXVPLEdBRUEsSUFBQUMsRUFDQSxNQUFBbE0sRUFBQXRDLEtBQUF5SSxTQU1BLE9BSkErRixFQUFBbE0sRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBa00sRUFDQUEsRUFBQWxNLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQWtNLEVBQ0FBLEVBQUFsTSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFrTSxFQUVBeE8sSUFFQSxDQUVBLGVBQUF5TyxDQUFBQyxHQUVBLE9BQUExTyxLQUFBcU0sZUFBQXFDLEdBQUFULFNBQUFNLFdBRUEsQ0FFQSxrQkFBQUksQ0FBQUMsR0FFQSxNQUFBdE0sRUFBQXRDLEtBQUF5SSxTQVlBLE9BVkFtRyxFQUFBLEdBQUF0TSxFQUFBLEdBQ0FzTSxFQUFBLEdBQUF0TSxFQUFBLEdBQ0FzTSxFQUFBLEdBQUF0TSxFQUFBLEdBQ0FzTSxFQUFBLEdBQUF0TSxFQUFBLEdBQ0FzTSxFQUFBLEdBQUF0TSxFQUFBLEdBQ0FzTSxFQUFBLEdBQUF0TSxFQUFBLEdBQ0FzTSxFQUFBLEdBQUF0TSxFQUFBLEdBQ0FzTSxFQUFBLEdBQUF0TSxFQUFBLEdBQ0FzTSxFQUFBLEdBQUF0TSxFQUFBLEdBRUF0QyxJQUVBLENBRUEsY0FBQTZPLENBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBRUEsTUFBQXJKLEVBQUF6RSxLQUFBMkUsSUFBQWlKLEdBQ0FwSyxFQUFBeEQsS0FBQTRFLElBQUFnSixHQVFBLE9BTkFsUCxLQUFBMkcsSUFDQXFJLEVBQUFqSixFQUFBaUosRUFBQWxLLEdBQUFrSyxHQUFBakosRUFBQW9KLEVBQUFySyxFQUFBc0ssR0FBQUQsRUFBQUwsR0FDQUcsRUFBQW5LLEVBQUFtSyxFQUFBbEosR0FBQWtKLElBQUFuSyxFQUFBcUssRUFBQXBKLEVBQUFxSixHQUFBQSxFQUFBTCxFQUNBLEVBQUEsRUFBQSxHQUdBL08sSUFFQSxDQUlBLEtBQUFxUCxDQUFBTCxFQUFBQyxHQUlBLE9BRkFqUCxLQUFBdU0sWUFBQStDLEdBQUFDLFVBQUFQLEVBQUFDLElBRUFqUCxJQUVBLENBRUEsTUFBQXdQLENBQUE5RixHQUlBLE9BRkExSixLQUFBdU0sWUFBQStDLEdBQUFHLGNBQUEvRixJQUVBMUosSUFFQSxDQUVBLFNBQUEwUCxDQUFBWixFQUFBQyxHQUlBLE9BRkEvTyxLQUFBdU0sWUFBQStDLEdBQUFLLGdCQUFBYixFQUFBQyxJQUVBL08sSUFFQSxDQUlBLGVBQUEyUCxDQUFBbk4sRUFBQUMsR0F3QkEsT0F0QkFELEVBQUF3RSxVQUVBaEgsS0FBQTJHLElBRUEsRUFBQSxFQUFBbkUsRUFBQUEsRUFDQSxFQUFBLEVBQUFBLEVBQUFDLEVBQ0EsRUFBQSxFQUFBLEdBTUF6QyxLQUFBMkcsSUFFQSxFQUFBLEVBQUFuRSxFQUNBLEVBQUEsRUFBQUMsRUFDQSxFQUFBLEVBQUEsR0FNQXpDLElBRUEsQ0FFQSxZQUFBeVAsQ0FBQS9GLEdBSUEsTUFBQTNELEVBQUF6RSxLQUFBMkUsSUFBQXlELEdBQ0E1RSxFQUFBeEQsS0FBQTRFLElBQUF3RCxHQVVBLE9BUkExSixLQUFBMkcsSUFFQVosR0FBQWpCLEVBQUEsRUFDQUEsRUFBQWlCLEVBQUEsRUFDQSxFQUFBLEVBQUEsR0FJQS9GLElBRUEsQ0FFQSxTQUFBdVAsQ0FBQS9NLEVBQUFDLEdBVUEsT0FSQXpDLEtBQUEyRyxJQUVBbkUsRUFBQSxFQUFBLEVBQ0EsRUFBQUMsRUFBQSxFQUNBLEVBQUEsRUFBQSxHQUlBekMsSUFFQSxDQUlBLE1BQUFzSyxDQUFBc0YsR0FFQSxNQUFBL0QsRUFBQTdMLEtBQUF5SSxTQUNBc0QsRUFBQTZELEVBQUFuSCxTQUVBLElBQUEsSUFBQTFILEVBQUEsRUFBQUEsRUFBQSxFQUFBQSxJQUVBLEdBQUE4SyxFQUFBOUssS0FBQWdMLEVBQUFoTCxHQUFBLE9BQUEsRUFJQSxPQUFBLENBRUEsQ0FFQSxTQUFBd0osQ0FBQTFKLEVBQUEySixFQUFBLEdBRUEsSUFBQSxJQUFBekosRUFBQSxFQUFBQSxFQUFBLEVBQUFBLElBRUFmLEtBQUF5SSxTQUFBMUgsR0FBQUYsRUFBQUUsRUFBQXlKLEdBSUEsT0FBQXhLLElBRUEsQ0FFQSxPQUFBeUssQ0FBQTVKLEVBQUEsR0FBQTJKLEVBQUEsR0FFQSxNQUFBcUIsRUFBQTdMLEtBQUF5SSxTQWNBLE9BWkE1SCxFQUFBMkosR0FBQXFCLEVBQUEsR0FDQWhMLEVBQUEySixFQUFBLEdBQUFxQixFQUFBLEdBQ0FoTCxFQUFBMkosRUFBQSxHQUFBcUIsRUFBQSxHQUVBaEwsRUFBQTJKLEVBQUEsR0FBQXFCLEVBQUEsR0FDQWhMLEVBQUEySixFQUFBLEdBQUFxQixFQUFBLEdBQ0FoTCxFQUFBMkosRUFBQSxHQUFBcUIsRUFBQSxHQUVBaEwsRUFBQTJKLEVBQUEsR0FBQXFCLEVBQUEsR0FDQWhMLEVBQUEySixFQUFBLEdBQUFxQixFQUFBLEdBQ0FoTCxFQUFBMkosRUFBQSxHQUFBcUIsRUFBQSxHQUVBaEwsQ0FFQSxDQUVBLEtBQUE0RyxHQUVBLE9BQUEsSUFBQXpILEtBQUE0QyxhQUFBMkgsVUFBQXZLLEtBQUF5SSxTQUVBLEVBSUEsTUFBQTZHLEdBQUEsSUFBQXBFLEdDaldBLFNBQUEyRSxHQUFBaFAsR0FJQSxJQUFBLElBQUFFLEVBQUFGLEVBQUFJLE9BQUEsRUFBQUYsR0FBQSxJQUFBQSxFQUVBLEdBQUFGLEVBQUFFLElBQUEsTUFBQSxPQUFBLEVBSUEsT0FBQSxDQUVBLENBRUEsTUFBQStPLEdBQUEsQ0FDQTNNLFVBQUFBLFVBQ0FILFdBQUFBLFdBQ0ErTSxrQkFBQUEsa0JBQ0E3TSxXQUFBQSxXQUNBSCxZQUFBQSxZQUNBRSxXQUFBQSxXQUNBSCxZQUFBQSxZQUNBRCxhQUFBQSxhQUNBbU4sYUFBQUEsY0FHQSxTQUFBQyxHQUFBcFEsRUFBQXFRLEdBRUEsT0FBQSxJQUFBSixHQUFBalEsR0FBQXFRLEVBRUEsQ0FFQSxTQUFBQyxHQUFBQyxHQUVBLE9BQUFDLFNBQUFGLGdCQUFBLCtCQUFBQyxFQUVBLENBRUEsU0FBQUUsS0FFQSxNQUFBQyxFQUFBSixHQUFBLFVBRUEsT0FEQUksRUFBQUMsTUFBQUMsUUFBQSxRQUNBRixDQUVBLENBRUEsTUFBQUcsR0FBQSxDQUFBLEVBRUEsU0FBQUMsR0FBQUMsR0FFQUEsS0FBQUYsS0FFQUEsR0FBQUUsSUFBQSxFQUVBaEssUUFBQUMsS0FBQStKLEdBRUEsQ0N6RUEsTUFBQUMsSUFBQSxJQUFBM0YsSUFBQXZFLElBQ0EsU0FBQSxRQUFBLEVBQ0EsU0FBQSxTQUFBLEVBQ0EsU0FBQSxTQUFBLFVBR0FtSyxJQUFBLElBQUE1RixJQUFBdkUsSUFDQSxXQUFBLFNBQUEsR0FDQSxTQUFBLFVBQUEsR0FDQSxVQUFBLFNBQUEsV0FPQW9LLEdBQUEsQ0FDQWhVLENBQUFBLElBQUEsQ0FDQWlVLFNBQUE5VCxHQUNBK1QsVUFBQTdULEdBQ0E4VCxZQUFBQyxHQUFBQSxFQUNBQyxjQUFBRCxHQUFBQSxHQUVBclUsQ0FBQUEsSUFBQSxDQUNBa1UsU0FBQTdULEdBQ0E4VCxVQUFBN1QsR0FDQThULFlBQUFDLEdBQUFBLEVBQUFFLHNCQUNBRCxjQUFBRCxHQUFBQSxFQUFBRyx1QkFFQXJVLENBQUFBLElBQUEsQ0FDQStULFNBQUE5VCxHQUNBK1QsVUFBQTVULEdBQ0E2VCxZQUFBQyxHQUFBQSxFQUFBNUksYUFBQXVJLElBQ0FNLGNBQUFELEdBQUFBLEVBQUE1SSxhQUFBc0ksS0FFQTdULENBQUFBLElBQUEsQ0FDQWdVLFNBQUE3VCxHQUNBOFQsVUFBQTVULEdBQ0E2VCxZQUFBQyxHQUFBQSxFQUFBRSxzQkFBQTlJLGFBQUF1SSxJQUNBTSxjQUFBRCxHQUFBQSxFQUFBNUksYUFBQXNJLElBQUFTLHdCQUlBQyxHQUFBLElBQUFDLElBQUEsQ0FBQXpVLEdBQUFFLEtBRVl3VSxHQUFBLENBRVpDLFNBQUEsRUFFQUMsbUJBQUE1VSxHQUVBLHFCQUFBNlUsR0FFQSxPQUFBNVIsS0FBQTJSLGtCQUVBLEVBRUEscUJBQUFDLENBQUFDLEdBRUEsSUFBQU4sR0FBQU8sSUFBQUQsR0FFQSxNQUFBLElBQUF6TyxNQUFBLHFDQUFBeU8sT0FJQTdSLEtBQUEyUixtQkFBQUUsQ0FFQSxFQUVBRSxRQUFBLFNBQUFaLEVBQUFhLEVBQUFDLEdBRUEsSUFBQSxJQUFBalMsS0FBQTBSLFNBQUFNLElBQUFDLElBQUFELElBQUFDLEVBRUEsT0FBQWQsRUFJQSxNQUFBZSxFQUFBbkIsR0FBQWlCLEdBQUFkLFlBR0EsT0FBQWlCLEVBRkFwQixHQUFBa0IsR0FBQWIsZUFFQWMsRUFBQWYsR0FFQSxFQUVBaUIsc0JBQUEsU0FBQWpCLEVBQUFjLEdBRUEsT0FBQWpTLEtBQUErUixRQUFBWixFQUFBblIsS0FBQTJSLG1CQUFBTSxFQUVBLEVBRUFJLG9CQUFBLFNBQUFsQixFQUFBYSxHQUVBLE9BQUFoUyxLQUFBK1IsUUFBQVosRUFBQWEsRUFBQWhTLEtBQUEyUixtQkFFQSxFQUVBVyxhQUFBLFNBQUFULEdBRUEsT0FBQWQsR0FBQWMsR0FBQVosU0FFQSxFQUVBc0IsWUFBQSxTQUFBVixHQUVBLE9BQUFBLElBQUFoVixHQUFBSyxHQUVBNlQsR0FBQWMsR0FBQWIsUUFFQSxHQUtPLFNBQUF3QixHQUFBek0sR0FFUCxPQUFBQSxFQUFBLE9BQUEsWUFBQUEsRUFBQXpFLEtBQUFnRSxJQUFBLFlBQUFTLEVBQUEsWUFBQSxJQUVBLENBRU8sU0FBQTBNLEdBQUExTSxHQUVQLE9BQUFBLEVBQUEsU0FBQSxNQUFBQSxFQUFBLE1BQUF6RSxLQUFBZ0UsSUFBQVMsRUFBQSxRQUFBLElBRUEsQ0N2SUEsSUFBQTJNLEdBRUEsTUFBQUMsR0FFQSxpQkFBQUMsQ0FBQUMsR0FFQSxHQUFBLFVBQUFDLEtBQUFELEVBQUFFLEtBRUEsT0FBQUYsRUFBQUUsSUFJQSxHQUFBLG9CQUFBQyxrQkFFQSxPQUFBSCxFQUFBRSxJQUlBLElBQUF4QyxFQUVBLEdBQUFzQyxhQUFBRyxrQkFFQXpDLEVBQUFzQyxNQUVBLE1BRUE5UyxJQUFBMlMsS0FBQUEsR0FBQXZDLEdBQUEsV0FFQXVDLEdBQUF6TCxNQUFBNEwsRUFBQTVMLE1BQ0F5TCxHQUFBeEwsT0FBQTJMLEVBQUEzTCxPQUVBLE1BQUErTCxFQUFBUCxHQUFBUSxXQUFBLE1BRUFMLGFBQUFNLFVBRUFGLEVBQUFHLGFBQUFQLEVBQUEsRUFBQSxHQUlBSSxFQUFBSSxVQUFBUixFQUFBLEVBQUEsRUFBQUEsRUFBQTVMLE1BQUE0TCxFQUFBM0wsUUFJQXFKLEVBQUFtQyxFQUVBLENBRUEsT0FBQW5DLEVBQUF0SixNQUFBLE1BQUFzSixFQUFBckosT0FBQSxNQUVBTixRQUFBQyxLQUFBLDhFQUFBZ00sR0FFQXRDLEVBQUErQyxVQUFBLGFBQUEsS0FJQS9DLEVBQUErQyxVQUFBLFlBSUEsQ0FFQSxtQkFBQUMsQ0FBQVYsR0FFQSxHQUFBLG9CQUFBVyxrQkFBQVgsYUFBQVcsa0JBQ0Esb0JBQUFSLG1CQUFBSCxhQUFBRyxtQkFDQSxvQkFBQVMsYUFBQVosYUFBQVksWUFBQSxDQUVBLE1BQUFsRCxFQUFBSixHQUFBLFVBRUFJLEVBQUF0SixNQUFBNEwsRUFBQTVMLE1BQ0FzSixFQUFBckosT0FBQTJMLEVBQUEzTCxPQUVBLE1BQUErTCxFQUFBMUMsRUFBQTJDLFdBQUEsTUFDQUQsRUFBQUksVUFBQVIsRUFBQSxFQUFBLEVBQUFBLEVBQUE1TCxNQUFBNEwsRUFBQTNMLFFBRUEsTUFBQXdNLEVBQUFULEVBQUFVLGFBQUEsRUFBQSxFQUFBZCxFQUFBNUwsTUFBQTRMLEVBQUEzTCxRQUNBME0sRUFBQUYsRUFBQUUsS0FFQSxJQUFBLElBQUE3UyxFQUFBLEVBQUFBLEVBQUE2UyxFQUFBM1MsT0FBQUYsSUFFQTZTLEVBQUE3UyxHQUFBLElBQUF5UixHQUFBb0IsRUFBQTdTLEdBQUEsS0FNQSxPQUZBa1MsRUFBQUcsYUFBQU0sRUFBQSxFQUFBLEdBRUFuRCxDQUVBLENBQUEsR0FBQXNDLEVBQUFlLEtBQUEsQ0FFQSxNQUFBQSxFQUFBZixFQUFBZSxLQUFBOVMsTUFBQSxHQUVBLElBQUEsSUFBQUMsRUFBQSxFQUFBQSxFQUFBNlMsRUFBQTNTLE9BQUFGLElBRUE2UyxhQUFBNVEsWUFBQTRRLGFBQUE3RCxrQkFFQTZELEVBQUE3UyxHQUFBTyxLQUFBbUQsTUFBQSxJQUFBK04sR0FBQW9CLEVBQUE3UyxHQUFBLE1BTUE2UyxFQUFBN1MsR0FBQXlSLEdBQUFvQixFQUFBN1MsSUFNQSxNQUFBLENBQ0E2UyxLQUFBQSxFQUNBM00sTUFBQTRMLEVBQUE1TCxNQUNBQyxPQUFBMkwsRUFBQTNMLE9BR0EsQ0FHQSxPQURBTixRQUFBQyxLQUFBLCtGQUNBZ00sQ0FJQSxFQ3pIQSxJQUFBZ0IsR0FBQSxFQUVBLE1BQUFDLEdBRUEsV0FBQWxSLENBQUFnUixFQUFBLE1BRUE1VCxLQUFBK1QsVUFBQSxFQUVBQyxPQUFBQyxlQUFBalUsS0FBQSxLQUFBLENBQUFpQyxNQUFBNFIsT0FFQTdULEtBQUFrVSxLQUFBelMsS0FFQXpCLEtBQUE0VCxLQUFBQSxFQUNBNVQsS0FBQW1VLFdBQUEsRUFFQW5VLEtBQUFvVSxRQUFBLENBRUEsQ0FFQSxlQUFBQyxDQUFBcFMsSUFFQSxJQUFBQSxHQUFBakMsS0FBQW9VLFNBRUEsQ0FFQSxNQUFBRSxDQUFBQyxHQUVBLE1BQUFDLE9BQUF6VSxJQUFBd1UsR0FBQSxpQkFBQUEsRUFFQSxJQUFBQyxRQUFBelUsSUFBQXdVLEVBQUFFLE9BQUF6VSxLQUFBa1UsTUFFQSxPQUFBSyxFQUFBRSxPQUFBelUsS0FBQWtVLE1BSUEsTUFBQVEsRUFBQSxDQUNBUixLQUFBbFUsS0FBQWtVLEtBQ0FTLElBQUEsSUFHQWYsRUFBQTVULEtBQUE0VCxLQUVBLEdBQUEsT0FBQUEsRUFBQSxDQUVBLElBQUFlLEVBRUEsR0FBQUMsTUFBQUMsUUFBQWpCLEdBQUEsQ0FJQWUsRUFBQSxHQUVBLElBQUEsSUFBQTVULEVBQUEsRUFBQUMsRUFBQTRTLEVBQUEzUyxPQUFBRixFQUFBQyxFQUFBRCxJQUVBNlMsRUFBQTdTLEdBQUErVCxjQUVBSCxFQUFBdlUsS0FBQTJVLEdBQUFuQixFQUFBN1MsR0FBQThSLFFBSUE4QixFQUFBdlUsS0FBQTJVLEdBQUFuQixFQUFBN1MsSUFNQSxNQUlBNFQsRUFBQUksR0FBQW5CLEdBSUFjLEVBQUFDLElBQUFBLENBRUEsQ0FRQSxPQU5BSCxJQUVBRCxFQUFBRSxPQUFBelUsS0FBQWtVLE1BQUFRLEdBSUFBLENBRUEsRUFJQSxTQUFBSyxHQUFBbEMsR0FFQSxNQUFBLG9CQUFBVyxrQkFBQVgsYUFBQVcsa0JBQ0Esb0JBQUFSLG1CQUFBSCxhQUFBRyxtQkFDQSxvQkFBQVMsYUFBQVosYUFBQVksWUFJQWQsR0FBQUMsV0FBQUMsR0FJQUEsRUFBQWUsS0FJQSxDQUNBQSxLQUFBZ0IsTUFBQUksS0FBQW5DLEVBQUFlLE1BQ0EzTSxNQUFBNEwsRUFBQTVMLE1BQ0FDLE9BQUEyTCxFQUFBM0wsT0FDQXJILEtBQUFnVCxFQUFBZSxLQUFBaFIsWUFBQXdOLE9BS0F4SixRQUFBQyxLQUFBLCtDQUNBLENBQUEsRUFNQSxDQzVHQSxJQUFBb08sR0FBQSxFQUVBLE1BQUFDLFdBQUF2VixHQUVBLFdBQUFpRCxDQUFBaVEsRUFBQXFDLEdBQUFDLGNBQUFDLEVBQUFGLEdBQUFHLGdCQUFBQyxFQUFBaGUsS0FBQWllLEVBQUFqZSxLQUFBa2UsRUFBQTNkLEtBQUE0ZCxFQUFBemQsS0FBQTBkLEVBQUExYyxHQUFBNkcsRUFBQTNILEdBQUF5ZCxFQUFBVCxHQUFBVSxtQkFBQS9ELEVBQUFoVixJQUVBZ1osUUFFQTdWLEtBQUE4VixXQUFBLEVBRUE5QixPQUFBQyxlQUFBalUsS0FBQSxLQUFBLENBQUFpQyxNQUFBZ1QsT0FFQWpWLEtBQUFrVSxLQUFBelMsS0FFQXpCLEtBQUFvUSxLQUFBLEdBRUFwUSxLQUFBK1YsT0FBQSxJQUFBakMsR0FBQWpCLEdBQ0E3UyxLQUFBZ1csUUFBQSxHQUVBaFcsS0FBQW9WLFFBQUFBLEVBQ0FwVixLQUFBaVcsUUFBQSxFQUVBalcsS0FBQXNWLE1BQUFBLEVBQ0F0VixLQUFBdVYsTUFBQUEsRUFFQXZWLEtBQUF3VixVQUFBQSxFQUNBeFYsS0FBQXlWLFVBQUFBLEVBRUF6VixLQUFBMlYsV0FBQUEsRUFFQTNWLEtBQUEwVixPQUFBQSxFQUNBMVYsS0FBQWtXLGVBQUEsS0FDQWxXLEtBQUFILEtBQUFBLEVBRUFHLEtBQUF3SyxPQUFBLElBQUExRCxHQUFBLEVBQUEsR0FDQTlHLEtBQUFtVyxPQUFBLElBQUFyUCxHQUFBLEVBQUEsR0FDQTlHLEtBQUErSyxPQUFBLElBQUFqRSxHQUFBLEVBQUEsR0FDQTlHLEtBQUFrUCxTQUFBLEVBRUFsUCxLQUFBb1csa0JBQUEsRUFDQXBXLEtBQUE0UCxPQUFBLElBQUExRSxHQUVBbEwsS0FBQXFXLGlCQUFBLEVBQ0FyVyxLQUFBc1csa0JBQUEsRUFDQXRXLEtBQUF1VyxPQUFBLEVBQ0F2VyxLQUFBd1csZ0JBQUEsRUFFQXhXLEtBQUE2UixXQUFBQSxFQUVBN1IsS0FBQXlXLFNBQUEsQ0FBQSxFQUVBelcsS0FBQW9VLFFBQUEsRUFDQXBVLEtBQUEwVyxTQUFBLEtBRUExVyxLQUFBMlcsdUJBQUEsRUFDQTNXLEtBQUE0VyxhQUFBLENBRUEsQ0FFQSxTQUFBL0QsR0FFQSxPQUFBN1MsS0FBQStWLE9BQUFuQyxJQUVBLENBRUEsU0FBQWYsQ0FBQTVRLEVBQUEsTUFFQWpDLEtBQUErVixPQUFBbkMsS0FBQTNSLENBRUEsQ0FFQSxZQUFBNFUsR0FFQTdXLEtBQUE0UCxPQUFBZixlQUFBN08sS0FBQXdLLE9BQUFoSSxFQUFBeEMsS0FBQXdLLE9BQUEvSCxFQUFBekMsS0FBQW1XLE9BQUEzVCxFQUFBeEMsS0FBQW1XLE9BQUExVCxFQUFBekMsS0FBQWtQLFNBQUFsUCxLQUFBK0ssT0FBQXZJLEVBQUF4QyxLQUFBK0ssT0FBQXRJLEVBRUEsQ0FFQSxLQUFBZ0YsR0FFQSxPQUFBLElBQUF6SCxLQUFBNEMsYUFBQThFLEtBQUExSCxLQUVBLENBRUEsSUFBQTBILENBQUFxTyxHQXdDQSxPQXRDQS9WLEtBQUFvUSxLQUFBMkYsRUFBQTNGLEtBRUFwUSxLQUFBK1YsT0FBQUEsRUFBQUEsT0FDQS9WLEtBQUFnVyxRQUFBRCxFQUFBQyxRQUFBbFYsTUFBQSxHQUVBZCxLQUFBb1YsUUFBQVcsRUFBQVgsUUFDQXBWLEtBQUFpVyxRQUFBRixFQUFBRSxRQUVBalcsS0FBQXNWLE1BQUFTLEVBQUFULE1BQ0F0VixLQUFBdVYsTUFBQVEsRUFBQVIsTUFFQXZWLEtBQUF3VixVQUFBTyxFQUFBUCxVQUNBeFYsS0FBQXlWLFVBQUFNLEVBQUFOLFVBRUF6VixLQUFBMlYsV0FBQUksRUFBQUosV0FFQTNWLEtBQUEwVixPQUFBSyxFQUFBTCxPQUNBMVYsS0FBQWtXLGVBQUFILEVBQUFHLGVBQ0FsVyxLQUFBSCxLQUFBa1csRUFBQWxXLEtBRUFHLEtBQUF3SyxPQUFBOUMsS0FBQXFPLEVBQUF2TCxRQUNBeEssS0FBQW1XLE9BQUF6TyxLQUFBcU8sRUFBQUksUUFDQW5XLEtBQUErSyxPQUFBckQsS0FBQXFPLEVBQUFoTCxRQUNBL0ssS0FBQWtQLFNBQUE2RyxFQUFBN0csU0FFQWxQLEtBQUFvVyxpQkFBQUwsRUFBQUssaUJBQ0FwVyxLQUFBNFAsT0FBQWxJLEtBQUFxTyxFQUFBbkcsUUFFQTVQLEtBQUFxVyxnQkFBQU4sRUFBQU0sZ0JBQ0FyVyxLQUFBc1csaUJBQUFQLEVBQUFPLGlCQUNBdFcsS0FBQXVXLE1BQUFSLEVBQUFRLE1BQ0F2VyxLQUFBd1csZ0JBQUFULEVBQUFTLGdCQUNBeFcsS0FBQTZSLFdBQUFrRSxFQUFBbEUsV0FFQTdSLEtBQUF5VyxTQUFBSyxLQUFBQyxNQUFBRCxLQUFBRSxVQUFBakIsRUFBQVUsV0FFQXpXLEtBQUFxVSxhQUFBLEVBRUFyVSxJQUVBLENBRUEsTUFBQXNVLENBQUFDLEdBRUEsTUFBQUMsT0FBQXpVLElBQUF3VSxHQUFBLGlCQUFBQSxFQUVBLElBQUFDLFFBQUF6VSxJQUFBd1UsRUFBQTBDLFNBQUFqWCxLQUFBa1UsTUFFQSxPQUFBSyxFQUFBMEMsU0FBQWpYLEtBQUFrVSxNQUlBLE1BQUFRLEVBQUEsQ0FFQXdDLFNBQUEsQ0FDQTlDLFFBQUEsSUFDQXZVLEtBQUEsVUFDQXNYLFVBQUEsa0JBR0FqRCxLQUFBbFUsS0FBQWtVLEtBQ0E5RCxLQUFBcFEsS0FBQW9RLEtBRUF5QyxNQUFBN1MsS0FBQStWLE9BQUF6QixPQUFBQyxHQUFBTCxLQUVBa0IsUUFBQXBWLEtBQUFvVixRQUNBYSxRQUFBalcsS0FBQWlXLFFBRUFFLE9BQUEsQ0FBQW5XLEtBQUFtVyxPQUFBM1QsRUFBQXhDLEtBQUFtVyxPQUFBMVQsR0FDQStILE9BQUEsQ0FBQXhLLEtBQUF3SyxPQUFBaEksRUFBQXhDLEtBQUF3SyxPQUFBL0gsR0FDQXNJLE9BQUEsQ0FBQS9LLEtBQUErSyxPQUFBdkksRUFBQXhDLEtBQUErSyxPQUFBdEksR0FDQXlNLFNBQUFsUCxLQUFBa1AsU0FFQWtJLEtBQUEsQ0FBQXBYLEtBQUFzVixNQUFBdFYsS0FBQXVWLE9BRUFHLE9BQUExVixLQUFBMFYsT0FDQVEsZUFBQWxXLEtBQUFrVyxlQUNBclcsS0FBQUcsS0FBQUgsS0FDQWdTLFdBQUE3UixLQUFBNlIsV0FFQTRELFVBQUF6VixLQUFBeVYsVUFDQUQsVUFBQXhWLEtBQUF3VixVQUNBRyxXQUFBM1YsS0FBQTJWLFdBRUFZLE1BQUF2VyxLQUFBdVcsTUFFQUYsZ0JBQUFyVyxLQUFBcVcsZ0JBQ0FDLGlCQUFBdFcsS0FBQXNXLGlCQUNBRSxnQkFBQXhXLEtBQUF3VyxpQkFZQSxPQVJBeEMsT0FBQXFELEtBQUFyWCxLQUFBeVcsVUFBQXhWLE9BQUEsSUFBQXlULEVBQUErQixTQUFBelcsS0FBQXlXLFVBRUFqQyxJQUVBRCxFQUFBMEMsU0FBQWpYLEtBQUFrVSxNQUFBUSxHQUlBQSxDQUVBLENBRUEsT0FBQTRDLEdBRUF0WCxLQUFBVSxjQUFBLENBQUFiLEtBQUEsV0FFQSxDQUVBLFdBQUEwWCxDQUFBQyxHQUVBLEdBQUF4WCxLQUFBb1YsVUFBQXJlLEdBQUEsT0FBQXlnQixFQUlBLEdBRkFBLEVBQUFqUCxhQUFBdkksS0FBQTRQLFFBRUE0SCxFQUFBaFYsRUFBQSxHQUFBZ1YsRUFBQWhWLEVBQUEsRUFFQSxPQUFBeEMsS0FBQXNWLE9BRUEsS0FBQWplLEdBRUFtZ0IsRUFBQWhWLEVBQUFnVixFQUFBaFYsRUFBQWxCLEtBQUFtRCxNQUFBK1MsRUFBQWhWLEdBQ0EsTUFFQSxLQUFBbEwsR0FFQWtnQixFQUFBaFYsRUFBQWdWLEVBQUFoVixFQUFBLEVBQUEsRUFBQSxFQUNBLE1BRUEsS0FBQWpMLEdBRUEsSUFBQStKLEtBQUE2QyxJQUFBN0MsS0FBQW1ELE1BQUErUyxFQUFBaFYsR0FBQSxHQUVBZ1YsRUFBQWhWLEVBQUFsQixLQUFBaUUsS0FBQWlTLEVBQUFoVixHQUFBZ1YsRUFBQWhWLEVBSUFnVixFQUFBaFYsRUFBQWdWLEVBQUFoVixFQUFBbEIsS0FBQW1ELE1BQUErUyxFQUFBaFYsR0FVQSxHQUFBZ1YsRUFBQS9VLEVBQUEsR0FBQStVLEVBQUEvVSxFQUFBLEVBRUEsT0FBQXpDLEtBQUF1VixPQUVBLEtBQUFsZSxHQUVBbWdCLEVBQUEvVSxFQUFBK1UsRUFBQS9VLEVBQUFuQixLQUFBbUQsTUFBQStTLEVBQUEvVSxHQUNBLE1BRUEsS0FBQW5MLEdBRUFrZ0IsRUFBQS9VLEVBQUErVSxFQUFBL1UsRUFBQSxFQUFBLEVBQUEsRUFDQSxNQUVBLEtBQUFsTCxHQUVBLElBQUErSixLQUFBNkMsSUFBQTdDLEtBQUFtRCxNQUFBK1MsRUFBQS9VLEdBQUEsR0FFQStVLEVBQUEvVSxFQUFBbkIsS0FBQWlFLEtBQUFpUyxFQUFBL1UsR0FBQStVLEVBQUEvVSxFQUlBK1UsRUFBQS9VLEVBQUErVSxFQUFBL1UsRUFBQW5CLEtBQUFtRCxNQUFBK1MsRUFBQS9VLEdBZ0JBLE9BTkF6QyxLQUFBdVcsUUFFQWlCLEVBQUEvVSxFQUFBLEVBQUErVSxFQUFBL1UsR0FJQStVLENBRUEsQ0FFQSxlQUFBbkQsQ0FBQXBTLElBRUEsSUFBQUEsSUFFQWpDLEtBQUFvVSxVQUNBcFUsS0FBQStWLE9BQUExQixhQUFBLEVBSUEsQ0FFQSxvQkFBQW9ELENBQUF4VixJQUVBLElBQUFBLEdBRUFqQyxLQUFBNFcsY0FJQSxFQUlBMUIsR0FBQUMsY0FBQSxLQUNBRCxHQUFBRyxnQkFBQXRlLEdBQ0FtZSxHQUFBVSxtQkFBQSxFQzdUQSxNQUFBOEIsR0FFQSxXQUFBOVUsQ0FBQUosRUFBQSxFQUFBQyxFQUFBLEVBQUFrVixFQUFBLEVBQUFDLEVBQUEsR0FFQUYsR0FBQTNRLFVBQUE4USxXQUFBLEVBRUE3WCxLQUFBd0MsRUFBQUEsRUFDQXhDLEtBQUF5QyxFQUFBQSxFQUNBekMsS0FBQTJYLEVBQUFBLEVBQ0EzWCxLQUFBNFgsRUFBQUEsQ0FFQSxDQUVBLFNBQUEzUSxHQUVBLE9BQUFqSCxLQUFBMlgsQ0FFQSxDQUVBLFNBQUExUSxDQUFBaEYsR0FFQWpDLEtBQUEyWCxFQUFBMVYsQ0FFQSxDQUVBLFVBQUFpRixHQUVBLE9BQUFsSCxLQUFBNFgsQ0FFQSxDQUVBLFVBQUExUSxDQUFBakYsR0FFQWpDLEtBQUE0WCxFQUFBM1YsQ0FFQSxDQUVBLEdBQUEwRSxDQUFBbkUsRUFBQUMsRUFBQWtWLEVBQUFDLEdBT0EsT0FMQTVYLEtBQUF3QyxFQUFBQSxFQUNBeEMsS0FBQXlDLEVBQUFBLEVBQ0F6QyxLQUFBMlgsRUFBQUEsRUFDQTNYLEtBQUE0WCxFQUFBQSxFQUVBNVgsSUFFQSxDQUVBLFNBQUFtSCxDQUFBQyxHQU9BLE9BTEFwSCxLQUFBd0MsRUFBQTRFLEVBQ0FwSCxLQUFBeUMsRUFBQTJFLEVBQ0FwSCxLQUFBMlgsRUFBQXZRLEVBQ0FwSCxLQUFBNFgsRUFBQXhRLEVBRUFwSCxJQUVBLENBRUEsSUFBQXFILENBQUE3RSxHQUlBLE9BRkF4QyxLQUFBd0MsRUFBQUEsRUFFQXhDLElBRUEsQ0FFQSxJQUFBc0gsQ0FBQTdFLEdBSUEsT0FGQXpDLEtBQUF5QyxFQUFBQSxFQUVBekMsSUFFQSxDQUVBLElBQUE4WCxDQUFBSCxHQUlBLE9BRkEzWCxLQUFBMlgsRUFBQUEsRUFFQTNYLElBRUEsQ0FFQSxJQUFBK1gsQ0FBQUgsR0FJQSxPQUZBNVgsS0FBQTRYLEVBQUFBLEVBRUE1WCxJQUVBLENBRUEsWUFBQXVILENBQUEvRyxFQUFBeUIsR0FFQSxPQUFBekIsR0FFQSxLQUFBLEVBQUFSLEtBQUF3QyxFQUFBUCxFQUFBLE1BQ0EsS0FBQSxFQUFBakMsS0FBQXlDLEVBQUFSLEVBQUEsTUFDQSxLQUFBLEVBQUFqQyxLQUFBMlgsRUFBQTFWLEVBQUEsTUFDQSxLQUFBLEVBQUFqQyxLQUFBNFgsRUFBQTNWLEVBQUEsTUFDQSxRQUFBLE1BQUEsSUFBQW1CLE1BQUEsMEJBQUE1QyxHQUlBLE9BQUFSLElBRUEsQ0FFQSxZQUFBd0gsQ0FBQWhILEdBRUEsT0FBQUEsR0FFQSxLQUFBLEVBQUEsT0FBQVIsS0FBQXdDLEVBQ0EsS0FBQSxFQUFBLE9BQUF4QyxLQUFBeUMsRUFDQSxLQUFBLEVBQUEsT0FBQXpDLEtBQUEyWCxFQUNBLEtBQUEsRUFBQSxPQUFBM1gsS0FBQTRYLEVBQ0EsUUFBQSxNQUFBLElBQUF4VSxNQUFBLDBCQUFBNUMsR0FJQSxDQUVBLEtBQUFpSCxHQUVBLE9BQUEsSUFBQXpILEtBQUE0QyxZQUFBNUMsS0FBQXdDLEVBQUF4QyxLQUFBeUMsRUFBQXpDLEtBQUEyWCxFQUFBM1gsS0FBQTRYLEVBRUEsQ0FFQSxJQUFBbFEsQ0FBQUMsR0FPQSxPQUxBM0gsS0FBQXdDLEVBQUFtRixFQUFBbkYsRUFDQXhDLEtBQUF5QyxFQUFBa0YsRUFBQWxGLEVBQ0F6QyxLQUFBMlgsRUFBQWhRLEVBQUFnUSxFQUNBM1gsS0FBQTRYLE9BQUE3WCxJQUFBNEgsRUFBQWlRLEVBQUFqUSxFQUFBaVEsRUFBQSxFQUVBNVgsSUFFQSxDQUVBLEdBQUE0SCxDQUFBRCxHQU9BLE9BTEEzSCxLQUFBd0MsR0FBQW1GLEVBQUFuRixFQUNBeEMsS0FBQXlDLEdBQUFrRixFQUFBbEYsRUFDQXpDLEtBQUEyWCxHQUFBaFEsRUFBQWdRLEVBQ0EzWCxLQUFBNFgsR0FBQWpRLEVBQUFpUSxFQUVBNVgsSUFFQSxDQUVBLFNBQUE2SCxDQUFBL0MsR0FPQSxPQUxBOUUsS0FBQXdDLEdBQUFzQyxFQUNBOUUsS0FBQXlDLEdBQUFxQyxFQUNBOUUsS0FBQTJYLEdBQUE3UyxFQUNBOUUsS0FBQTRYLEdBQUE5UyxFQUVBOUUsSUFFQSxDQUVBLFVBQUE4SCxDQUFBakMsRUFBQUMsR0FPQSxPQUxBOUYsS0FBQXdDLEVBQUFxRCxFQUFBckQsRUFBQXNELEVBQUF0RCxFQUNBeEMsS0FBQXlDLEVBQUFvRCxFQUFBcEQsRUFBQXFELEVBQUFyRCxFQUNBekMsS0FBQTJYLEVBQUE5UixFQUFBOFIsRUFBQTdSLEVBQUE2UixFQUNBM1gsS0FBQTRYLEVBQUEvUixFQUFBK1IsRUFBQTlSLEVBQUE4UixFQUVBNVgsSUFFQSxDQUVBLGVBQUErSCxDQUFBSixFQUFBN0MsR0FPQSxPQUxBOUUsS0FBQXdDLEdBQUFtRixFQUFBbkYsRUFBQXNDLEVBQ0E5RSxLQUFBeUMsR0FBQWtGLEVBQUFsRixFQUFBcUMsRUFDQTlFLEtBQUEyWCxHQUFBaFEsRUFBQWdRLEVBQUE3UyxFQUNBOUUsS0FBQTRYLEdBQUFqUSxFQUFBaVEsRUFBQTlTLEVBRUE5RSxJQUVBLENBRUEsR0FBQWdJLENBQUFMLEdBT0EsT0FMQTNILEtBQUF3QyxHQUFBbUYsRUFBQW5GLEVBQ0F4QyxLQUFBeUMsR0FBQWtGLEVBQUFsRixFQUNBekMsS0FBQTJYLEdBQUFoUSxFQUFBZ1EsRUFDQTNYLEtBQUE0WCxHQUFBalEsRUFBQWlRLEVBRUE1WCxJQUVBLENBRUEsU0FBQWlJLENBQUFuRCxHQU9BLE9BTEE5RSxLQUFBd0MsR0FBQXNDLEVBQ0E5RSxLQUFBeUMsR0FBQXFDLEVBQ0E5RSxLQUFBMlgsR0FBQTdTLEVBQ0E5RSxLQUFBNFgsR0FBQTlTLEVBRUE5RSxJQUVBLENBRUEsVUFBQWtJLENBQUFyQyxFQUFBQyxHQU9BLE9BTEE5RixLQUFBd0MsRUFBQXFELEVBQUFyRCxFQUFBc0QsRUFBQXRELEVBQ0F4QyxLQUFBeUMsRUFBQW9ELEVBQUFwRCxFQUFBcUQsRUFBQXJELEVBQ0F6QyxLQUFBMlgsRUFBQTlSLEVBQUE4UixFQUFBN1IsRUFBQTZSLEVBQ0EzWCxLQUFBNFgsRUFBQS9SLEVBQUErUixFQUFBOVIsRUFBQThSLEVBRUE1WCxJQUVBLENBRUEsUUFBQW1JLENBQUFSLEdBT0EsT0FMQTNILEtBQUF3QyxHQUFBbUYsRUFBQW5GLEVBQ0F4QyxLQUFBeUMsR0FBQWtGLEVBQUFsRixFQUNBekMsS0FBQTJYLEdBQUFoUSxFQUFBZ1EsRUFDQTNYLEtBQUE0WCxHQUFBalEsRUFBQWlRLEVBRUE1WCxJQUVBLENBRUEsY0FBQW9JLENBQUFoQixHQU9BLE9BTEFwSCxLQUFBd0MsR0FBQTRFLEVBQ0FwSCxLQUFBeUMsR0FBQTJFLEVBQ0FwSCxLQUFBMlgsR0FBQXZRLEVBQ0FwSCxLQUFBNFgsR0FBQXhRLEVBRUFwSCxJQUVBLENBRUEsWUFBQWdZLENBQUExVixHQUVBLE1BQUFFLEVBQUF4QyxLQUFBd0MsRUFBQUMsRUFBQXpDLEtBQUF5QyxFQUFBa1YsRUFBQTNYLEtBQUEyWCxFQUFBQyxFQUFBNVgsS0FBQTRYLEVBQ0FwUCxFQUFBbEcsRUFBQW1HLFNBT0EsT0FMQXpJLEtBQUF3QyxFQUFBZ0csRUFBQSxHQUFBaEcsRUFBQWdHLEVBQUEsR0FBQS9GLEVBQUErRixFQUFBLEdBQUFtUCxFQUFBblAsRUFBQSxJQUFBb1AsRUFDQTVYLEtBQUF5QyxFQUFBK0YsRUFBQSxHQUFBaEcsRUFBQWdHLEVBQUEsR0FBQS9GLEVBQUErRixFQUFBLEdBQUFtUCxFQUFBblAsRUFBQSxJQUFBb1AsRUFDQTVYLEtBQUEyWCxFQUFBblAsRUFBQSxHQUFBaEcsRUFBQWdHLEVBQUEsR0FBQS9GLEVBQUErRixFQUFBLElBQUFtUCxFQUFBblAsRUFBQSxJQUFBb1AsRUFDQTVYLEtBQUE0WCxFQUFBcFAsRUFBQSxHQUFBaEcsRUFBQWdHLEVBQUEsR0FBQS9GLEVBQUErRixFQUFBLElBQUFtUCxFQUFBblAsRUFBQSxJQUFBb1AsRUFFQTVYLElBRUEsQ0FFQSxZQUFBc0ksQ0FBQWxCLEdBRUEsT0FBQXBILEtBQUFvSSxlQUFBLEVBQUFoQixFQUVBLENBRUEsMEJBQUE2USxDQUFBclMsR0FNQTVGLEtBQUE0WCxFQUFBLEVBQUF0VyxLQUFBcUksS0FBQS9ELEVBQUFnUyxHQUVBLE1BQUE5UyxFQUFBeEQsS0FBQThILEtBQUEsRUFBQXhELEVBQUFnUyxFQUFBaFMsRUFBQWdTLEdBZ0JBLE9BZEE5UyxFQUFBLE1BRUE5RSxLQUFBd0MsRUFBQSxFQUNBeEMsS0FBQXlDLEVBQUEsRUFDQXpDLEtBQUEyWCxFQUFBLElBSUEzWCxLQUFBd0MsRUFBQW9ELEVBQUFwRCxFQUFBc0MsRUFDQTlFLEtBQUF5QyxFQUFBbUQsRUFBQW5ELEVBQUFxQyxFQUNBOUUsS0FBQTJYLEVBQUEvUixFQUFBK1IsRUFBQTdTLEdBSUE5RSxJQUVBLENBRUEsOEJBQUFrWSxDQUFBNVYsR0FNQSxJQUFBZ0gsRUFBQTlHLEVBQUFDLEVBQUFrVixFQUNBLE1BQUFRLEVBQUEsSUFDQUMsRUFBQSxHQUVBdk0sRUFBQXZKLEVBQUFtRyxTQUVBNFAsRUFBQXhNLEVBQUEsR0FBQXlNLEVBQUF6TSxFQUFBLEdBQUEwTSxFQUFBMU0sRUFBQSxHQUNBMk0sRUFBQTNNLEVBQUEsR0FBQTRNLEVBQUE1TSxFQUFBLEdBQUE2TSxFQUFBN00sRUFBQSxHQUNBOE0sRUFBQTlNLEVBQUEsR0FBQStNLEVBQUEvTSxFQUFBLEdBQUFnTixFQUFBaE4sRUFBQSxJQUVBLEdBQUF2SyxLQUFBNkMsSUFBQW1VLEVBQUFFLEdBQUFMLEdBQ0E3VyxLQUFBNkMsSUFBQW9VLEVBQUFJLEdBQUFSLEdBQ0E3VyxLQUFBNkMsSUFBQXVVLEVBQUFFLEdBQUFULEVBQUEsQ0FNQSxHQUFBN1csS0FBQTZDLElBQUFtVSxFQUFBRSxHQUFBSixHQUNBOVcsS0FBQTZDLElBQUFvVSxFQUFBSSxHQUFBUCxHQUNBOVcsS0FBQTZDLElBQUF1VSxFQUFBRSxHQUFBUixHQUNBOVcsS0FBQTZDLElBQUFrVSxFQUFBSSxFQUFBSSxFQUFBLEdBQUFULEVBTUEsT0FGQXBZLEtBQUEyRyxJQUFBLEVBQUEsRUFBQSxFQUFBLEdBRUEzRyxLQU1Bc0osRUFBQWhJLEtBQUFDLEdBRUEsTUFBQXVYLEdBQUFULEVBQUEsR0FBQSxFQUNBVSxHQUFBTixFQUFBLEdBQUEsRUFDQU8sR0FBQUgsRUFBQSxHQUFBLEVBQ0FJLEdBQUFYLEVBQUFFLEdBQUEsRUFDQVUsR0FBQVgsRUFBQUksR0FBQSxFQUNBUSxHQUFBVCxFQUFBRSxHQUFBLEVBNERBLE9BMURBRSxFQUFBQyxHQUFBRCxFQUFBRSxFQUlBRixFQUFBWCxHQUVBM1YsRUFBQSxFQUNBQyxFQUFBLFdBQ0FrVixFQUFBLGFBSUFuVixFQUFBbEIsS0FBQThILEtBQUEwUCxHQUNBclcsRUFBQXdXLEVBQUF6VyxFQUNBbVYsRUFBQXVCLEVBQUExVyxHQUlBdVcsRUFBQUMsRUFJQUQsRUFBQVosR0FFQTNWLEVBQUEsV0FDQUMsRUFBQSxFQUNBa1YsRUFBQSxhQUlBbFYsRUFBQW5CLEtBQUE4SCxLQUFBMlAsR0FDQXZXLEVBQUF5VyxFQUFBeFcsRUFDQWtWLEVBQUF3QixFQUFBMVcsR0FRQXVXLEVBQUFiLEdBRUEzVixFQUFBLFdBQ0FDLEVBQUEsV0FDQWtWLEVBQUEsSUFJQUEsRUFBQXJXLEtBQUE4SCxLQUFBNFAsR0FDQXhXLEVBQUEwVyxFQUFBdkIsRUFDQWxWLEVBQUEwVyxFQUFBeEIsR0FNQTNYLEtBQUEyRyxJQUFBbkUsRUFBQUMsRUFBQWtWLEVBQUFyTyxHQUVBdEosSUFFQSxDQUlBLElBQUE4RSxFQUFBeEQsS0FBQThILE1BQUF3UCxFQUFBRixJQUFBRSxFQUFBRixJQUNBSCxFQUFBSSxJQUFBSixFQUFBSSxJQUNBSCxFQUFBRixJQUFBRSxFQUFBRixJQVlBLE9BVkFoWCxLQUFBNkMsSUFBQVcsR0FBQSxPQUFBQSxFQUFBLEdBS0E5RSxLQUFBd0MsR0FBQW9XLEVBQUFGLEdBQUE1VCxFQUNBOUUsS0FBQXlDLEdBQUE4VixFQUFBSSxHQUFBN1QsRUFDQTlFLEtBQUEyWCxHQUFBYSxFQUFBRixHQUFBeFQsRUFDQTlFLEtBQUE0WCxFQUFBdFcsS0FBQXFJLE1BQUEwTyxFQUFBSSxFQUFBSSxFQUFBLEdBQUEsR0FFQTdZLElBRUEsQ0FFQSxxQkFBQW9aLENBQUE5VyxHQUVBLE1BQUFrRyxFQUFBbEcsRUFBQW1HLFNBT0EsT0FMQXpJLEtBQUF3QyxFQUFBZ0csRUFBQSxJQUNBeEksS0FBQXlDLEVBQUErRixFQUFBLElBQ0F4SSxLQUFBMlgsRUFBQW5QLEVBQUEsSUFDQXhJLEtBQUE0WCxFQUFBcFAsRUFBQSxJQUVBeEksSUFFQSxDQUVBLEdBQUFrQyxDQUFBeUYsR0FPQSxPQUxBM0gsS0FBQXdDLEVBQUFsQixLQUFBWSxJQUFBbEMsS0FBQXdDLEVBQUFtRixFQUFBbkYsR0FDQXhDLEtBQUF5QyxFQUFBbkIsS0FBQVksSUFBQWxDLEtBQUF5QyxFQUFBa0YsRUFBQWxGLEdBQ0F6QyxLQUFBMlgsRUFBQXJXLEtBQUFZLElBQUFsQyxLQUFBMlgsRUFBQWhRLEVBQUFnUSxHQUNBM1gsS0FBQTRYLEVBQUF0VyxLQUFBWSxJQUFBbEMsS0FBQTRYLEVBQUFqUSxFQUFBaVEsR0FFQTVYLElBRUEsQ0FFQSxHQUFBbUMsQ0FBQXdGLEdBT0EsT0FMQTNILEtBQUF3QyxFQUFBbEIsS0FBQWEsSUFBQW5DLEtBQUF3QyxFQUFBbUYsRUFBQW5GLEdBQ0F4QyxLQUFBeUMsRUFBQW5CLEtBQUFhLElBQUFuQyxLQUFBeUMsRUFBQWtGLEVBQUFsRixHQUNBekMsS0FBQTJYLEVBQUFyVyxLQUFBYSxJQUFBbkMsS0FBQTJYLEVBQUFoUSxFQUFBZ1EsR0FDQTNYLEtBQUE0WCxFQUFBdFcsS0FBQWEsSUFBQW5DLEtBQUE0WCxFQUFBalEsRUFBQWlRLEdBRUE1WCxJQUVBLENBRUEsS0FBQWdDLENBQUFFLEVBQUFDLEdBU0EsT0FMQW5DLEtBQUF3QyxFQUFBbEIsS0FBQWEsSUFBQUQsRUFBQU0sRUFBQWxCLEtBQUFZLElBQUFDLEVBQUFLLEVBQUF4QyxLQUFBd0MsSUFDQXhDLEtBQUF5QyxFQUFBbkIsS0FBQWEsSUFBQUQsRUFBQU8sRUFBQW5CLEtBQUFZLElBQUFDLEVBQUFNLEVBQUF6QyxLQUFBeUMsSUFDQXpDLEtBQUEyWCxFQUFBclcsS0FBQWEsSUFBQUQsRUFBQXlWLEVBQUFyVyxLQUFBWSxJQUFBQyxFQUFBd1YsRUFBQTNYLEtBQUEyWCxJQUNBM1gsS0FBQTRYLEVBQUF0VyxLQUFBYSxJQUFBRCxFQUFBMFYsRUFBQXRXLEtBQUFZLElBQUFDLEVBQUF5VixFQUFBNVgsS0FBQTRYLElBRUE1WCxJQUVBLENBRUEsV0FBQTBJLENBQUFDLEVBQUFDLEdBT0EsT0FMQTVJLEtBQUF3QyxFQUFBbEIsS0FBQWEsSUFBQXdHLEVBQUFySCxLQUFBWSxJQUFBMEcsRUFBQTVJLEtBQUF3QyxJQUNBeEMsS0FBQXlDLEVBQUFuQixLQUFBYSxJQUFBd0csRUFBQXJILEtBQUFZLElBQUEwRyxFQUFBNUksS0FBQXlDLElBQ0F6QyxLQUFBMlgsRUFBQXJXLEtBQUFhLElBQUF3RyxFQUFBckgsS0FBQVksSUFBQTBHLEVBQUE1SSxLQUFBMlgsSUFDQTNYLEtBQUE0WCxFQUFBdFcsS0FBQWEsSUFBQXdHLEVBQUFySCxLQUFBWSxJQUFBMEcsRUFBQTVJLEtBQUE0WCxJQUVBNVgsSUFFQSxDQUVBLFdBQUE2SSxDQUFBM0csRUFBQUMsR0FFQSxNQUFBbEIsRUFBQWpCLEtBQUFpQixTQUVBLE9BQUFqQixLQUFBc0ksYUFBQXJILEdBQUEsR0FBQW1ILGVBQUE5RyxLQUFBYSxJQUFBRCxFQUFBWixLQUFBWSxJQUFBQyxFQUFBbEIsSUFFQSxDQUVBLEtBQUF3RCxHQU9BLE9BTEF6RSxLQUFBd0MsRUFBQWxCLEtBQUFtRCxNQUFBekUsS0FBQXdDLEdBQ0F4QyxLQUFBeUMsRUFBQW5CLEtBQUFtRCxNQUFBekUsS0FBQXlDLEdBQ0F6QyxLQUFBMlgsRUFBQXJXLEtBQUFtRCxNQUFBekUsS0FBQTJYLEdBQ0EzWCxLQUFBNFgsRUFBQXRXLEtBQUFtRCxNQUFBekUsS0FBQTRYLEdBRUE1WCxJQUVBLENBRUEsSUFBQXVGLEdBT0EsT0FMQXZGLEtBQUF3QyxFQUFBbEIsS0FBQWlFLEtBQUF2RixLQUFBd0MsR0FDQXhDLEtBQUF5QyxFQUFBbkIsS0FBQWlFLEtBQUF2RixLQUFBeUMsR0FDQXpDLEtBQUEyWCxFQUFBclcsS0FBQWlFLEtBQUF2RixLQUFBMlgsR0FDQTNYLEtBQUE0WCxFQUFBdFcsS0FBQWlFLEtBQUF2RixLQUFBNFgsR0FFQTVYLElBRUEsQ0FFQSxLQUFBc0QsR0FPQSxPQUxBdEQsS0FBQXdDLEVBQUFsQixLQUFBZ0MsTUFBQXRELEtBQUF3QyxHQUNBeEMsS0FBQXlDLEVBQUFuQixLQUFBZ0MsTUFBQXRELEtBQUF5QyxHQUNBekMsS0FBQTJYLEVBQUFyVyxLQUFBZ0MsTUFBQXRELEtBQUEyWCxHQUNBM1gsS0FBQTRYLEVBQUF0VyxLQUFBZ0MsTUFBQXRELEtBQUE0WCxHQUVBNVgsSUFFQSxDQUVBLFdBQUE4SSxHQU9BLE9BTEE5SSxLQUFBd0MsRUFBQWxCLEtBQUF5SCxNQUFBL0ksS0FBQXdDLEdBQ0F4QyxLQUFBeUMsRUFBQW5CLEtBQUF5SCxNQUFBL0ksS0FBQXlDLEdBQ0F6QyxLQUFBMlgsRUFBQXJXLEtBQUF5SCxNQUFBL0ksS0FBQTJYLEdBQ0EzWCxLQUFBNFgsRUFBQXRXLEtBQUF5SCxNQUFBL0ksS0FBQTRYLEdBRUE1WCxJQUVBLENBRUEsTUFBQWdKLEdBT0EsT0FMQWhKLEtBQUF3QyxHQUFBeEMsS0FBQXdDLEVBQ0F4QyxLQUFBeUMsR0FBQXpDLEtBQUF5QyxFQUNBekMsS0FBQTJYLEdBQUEzWCxLQUFBMlgsRUFDQTNYLEtBQUE0WCxHQUFBNVgsS0FBQTRYLEVBRUE1WCxJQUVBLENBRUEsR0FBQWlKLENBQUF0QixHQUVBLE9BQUEzSCxLQUFBd0MsRUFBQW1GLEVBQUFuRixFQUFBeEMsS0FBQXlDLEVBQUFrRixFQUFBbEYsRUFBQXpDLEtBQUEyWCxFQUFBaFEsRUFBQWdRLEVBQUEzWCxLQUFBNFgsRUFBQWpRLEVBQUFpUSxDQUVBLENBRUEsUUFBQXpPLEdBRUEsT0FBQW5KLEtBQUF3QyxFQUFBeEMsS0FBQXdDLEVBQUF4QyxLQUFBeUMsRUFBQXpDLEtBQUF5QyxFQUFBekMsS0FBQTJYLEVBQUEzWCxLQUFBMlgsRUFBQTNYLEtBQUE0WCxFQUFBNVgsS0FBQTRYLENBRUEsQ0FFQSxNQUFBM1csR0FFQSxPQUFBSyxLQUFBOEgsS0FBQXBKLEtBQUF3QyxFQUFBeEMsS0FBQXdDLEVBQUF4QyxLQUFBeUMsRUFBQXpDLEtBQUF5QyxFQUFBekMsS0FBQTJYLEVBQUEzWCxLQUFBMlgsRUFBQTNYLEtBQUE0WCxFQUFBNVgsS0FBQTRYLEVBRUEsQ0FFQSxlQUFBdk8sR0FFQSxPQUFBL0gsS0FBQTZDLElBQUFuRSxLQUFBd0MsR0FBQWxCLEtBQUE2QyxJQUFBbkUsS0FBQXlDLEdBQUFuQixLQUFBNkMsSUFBQW5FLEtBQUEyWCxHQUFBclcsS0FBQTZDLElBQUFuRSxLQUFBNFgsRUFFQSxDQUVBLFNBQUF2VSxHQUVBLE9BQUFyRCxLQUFBc0ksYUFBQXRJLEtBQUFpQixVQUFBLEVBRUEsQ0FFQSxTQUFBZ0osQ0FBQWhKLEdBRUEsT0FBQWpCLEtBQUFxRCxZQUFBK0UsZUFBQW5ILEVBRUEsQ0FFQSxJQUFBc0IsQ0FBQW9GLEVBQUF1QyxHQU9BLE9BTEFsSyxLQUFBd0MsSUFBQW1GLEVBQUFuRixFQUFBeEMsS0FBQXdDLEdBQUEwSCxFQUNBbEssS0FBQXlDLElBQUFrRixFQUFBbEYsRUFBQXpDLEtBQUF5QyxHQUFBeUgsRUFDQWxLLEtBQUEyWCxJQUFBaFEsRUFBQWdRLEVBQUEzWCxLQUFBMlgsR0FBQXpOLEVBQ0FsSyxLQUFBNFgsSUFBQWpRLEVBQUFpUSxFQUFBNVgsS0FBQTRYLEdBQUExTixFQUVBbEssSUFFQSxDQUVBLFdBQUFtSyxDQUFBQyxFQUFBQyxFQUFBSCxHQU9BLE9BTEFsSyxLQUFBd0MsRUFBQTRILEVBQUE1SCxHQUFBNkgsRUFBQTdILEVBQUE0SCxFQUFBNUgsR0FBQTBILEVBQ0FsSyxLQUFBeUMsRUFBQTJILEVBQUEzSCxHQUFBNEgsRUFBQTVILEVBQUEySCxFQUFBM0gsR0FBQXlILEVBQ0FsSyxLQUFBMlgsRUFBQXZOLEVBQUF1TixHQUFBdE4sRUFBQXNOLEVBQUF2TixFQUFBdU4sR0FBQXpOLEVBQ0FsSyxLQUFBNFgsRUFBQXhOLEVBQUF3TixHQUFBdk4sRUFBQXVOLEVBQUF4TixFQUFBd04sR0FBQTFOLEVBRUFsSyxJQUVBLENBRUEsTUFBQXNLLENBQUEzQyxHQUVBLE9BQUFBLEVBQUFuRixJQUFBeEMsS0FBQXdDLEdBQUFtRixFQUFBbEYsSUFBQXpDLEtBQUF5QyxHQUFBa0YsRUFBQWdRLElBQUEzWCxLQUFBMlgsR0FBQWhRLEVBQUFpUSxJQUFBNVgsS0FBQTRYLENBRUEsQ0FFQSxTQUFBck4sQ0FBQTFKLEVBQUEySixFQUFBLEdBT0EsT0FMQXhLLEtBQUF3QyxFQUFBM0IsRUFBQTJKLEdBQ0F4SyxLQUFBeUMsRUFBQTVCLEVBQUEySixFQUFBLEdBQ0F4SyxLQUFBMlgsRUFBQTlXLEVBQUEySixFQUFBLEdBQ0F4SyxLQUFBNFgsRUFBQS9XLEVBQUEySixFQUFBLEdBRUF4SyxJQUVBLENBRUEsT0FBQXlLLENBQUE1SixFQUFBLEdBQUEySixFQUFBLEdBT0EsT0FMQTNKLEVBQUEySixHQUFBeEssS0FBQXdDLEVBQ0EzQixFQUFBMkosRUFBQSxHQUFBeEssS0FBQXlDLEVBQ0E1QixFQUFBMkosRUFBQSxHQUFBeEssS0FBQTJYLEVBQ0E5VyxFQUFBMkosRUFBQSxHQUFBeEssS0FBQTRYLEVBRUEvVyxDQUVBLENBRUEsbUJBQUE2SixDQUFBQyxFQUFBbkssR0FPQSxPQUxBUixLQUFBd0MsRUFBQW1JLEVBQUFDLEtBQUFwSyxHQUNBUixLQUFBeUMsRUFBQWtJLEVBQUFFLEtBQUFySyxHQUNBUixLQUFBMlgsRUFBQWhOLEVBQUEwTyxLQUFBN1ksR0FDQVIsS0FBQTRYLEVBQUFqTixFQUFBMk8sS0FBQTlZLEdBRUFSLElBRUEsQ0FFQSxNQUFBMkIsR0FPQSxPQUxBM0IsS0FBQXdDLEVBQUFsQixLQUFBSyxTQUNBM0IsS0FBQXlDLEVBQUFuQixLQUFBSyxTQUNBM0IsS0FBQTJYLEVBQUFyVyxLQUFBSyxTQUNBM0IsS0FBQTRYLEVBQUF0VyxLQUFBSyxTQUVBM0IsSUFFQSxDQUVBLEVBQUFnTCxPQUFBQyxrQkFFQWpMLEtBQUF3QyxRQUNBeEMsS0FBQXlDLFFBQ0F6QyxLQUFBMlgsUUFDQTNYLEtBQUE0WCxDQUVBLEVDam9CQSxNQUFBMkIsV0FBQTVaLEdBRUEsV0FBQWlELENBQUFxRSxFQUFBLEVBQUFDLEVBQUEsRUFBQXNTLEVBQUEsQ0FBQSxHQUVBM0QsUUFFQTdWLEtBQUF5WixnQkFBQSxFQUVBelosS0FBQWlILE1BQUFBLEVBQ0FqSCxLQUFBa0gsT0FBQUEsRUFDQWxILEtBQUEwWixNQUFBLEVBRUExWixLQUFBMlosUUFBQSxJQUFBakMsR0FBQSxFQUFBLEVBQUF6USxFQUFBQyxHQUNBbEgsS0FBQTRaLGFBQUEsRUFFQTVaLEtBQUE2WixTQUFBLElBQUFuQyxHQUFBLEVBQUEsRUFBQXpRLEVBQUFDLEdBRUEsTUFBQTJMLEVBQUEsQ0FBQTVMLE1BQUFBLEVBQUFDLE9BQUFBLEVBQUF3UyxNQUFBLEdBRUFGLEVBQUF4RixPQUFBOEYsT0FBQSxDQUNBekQsaUJBQUEsRUFDQUgsZUFBQSxLQUNBVCxVQUFBNWQsR0FDQWtpQixhQUFBLEVBQ0FDLGVBQUEsRUFDQUMsb0JBQUEsRUFDQUMsc0JBQUEsRUFDQUMsYUFBQSxLQUNBQyxRQUFBLEVBQ0FDLE1BQUEsR0FDQWIsR0FFQSxNQUFBYyxFQUFBLElBQUFwRixHQUFBckMsRUFBQTJHLEVBQUFwRSxRQUFBb0UsRUFBQWxFLE1BQUFrRSxFQUFBakUsTUFBQWlFLEVBQUFoRSxVQUFBZ0UsRUFBQS9ELFVBQUErRCxFQUFBOUQsT0FBQThELEVBQUEzWixLQUFBMlosRUFBQTdELFdBQUE2RCxFQUFBM0gsWUFFQXlJLEVBQUEvRCxPQUFBLEVBQ0ErRCxFQUFBakUsZ0JBQUFtRCxFQUFBbkQsZ0JBQ0FpRSxFQUFBcEUsZUFBQXNELEVBQUF0RCxlQUVBbFcsS0FBQWlYLFNBQUEsR0FFQSxNQUFBb0QsRUFBQWIsRUFBQWEsTUFDQSxJQUFBLElBQUF0WixFQUFBLEVBQUFBLEVBQUFzWixFQUFBdFosSUFFQWYsS0FBQWlYLFNBQUFsVyxHQUFBdVosRUFBQTdTLFFBQ0F6SCxLQUFBaVgsU0FBQWxXLEdBQUE0Vix1QkFBQSxFQUlBM1csS0FBQStaLFlBQUFQLEVBQUFPLFlBQ0EvWixLQUFBZ2EsY0FBQVIsRUFBQVEsY0FFQWhhLEtBQUFpYSxtQkFBQVQsRUFBQVMsbUJBQ0FqYSxLQUFBa2EscUJBQUFWLEVBQUFVLHFCQUVBbGEsS0FBQW1hLGFBQUFYLEVBQUFXLGFBRUFuYSxLQUFBb2EsUUFBQVosRUFBQVksT0FFQSxDQUVBLFdBQUFFLEdBRUEsT0FBQXRhLEtBQUFpWCxTQUFBLEVBRUEsQ0FFQSxXQUFBcUQsQ0FBQXJZLEdBRUFqQyxLQUFBaVgsU0FBQSxHQUFBaFYsQ0FFQSxDQUVBLE9BQUFzWSxDQUFBdFQsRUFBQUMsRUFBQXdTLEVBQUEsR0FFQSxHQUFBMVosS0FBQWlILFFBQUFBLEdBQUFqSCxLQUFBa0gsU0FBQUEsR0FBQWxILEtBQUEwWixRQUFBQSxFQUFBLENBRUExWixLQUFBaUgsTUFBQUEsRUFDQWpILEtBQUFrSCxPQUFBQSxFQUNBbEgsS0FBQTBaLE1BQUFBLEVBRUEsSUFBQSxJQUFBM1ksRUFBQSxFQUFBeVosRUFBQXhhLEtBQUFpWCxTQUFBaFcsT0FBQUYsRUFBQXlaLEVBQUF6WixJQUVBZixLQUFBaVgsU0FBQWxXLEdBQUE4UixNQUFBNUwsTUFBQUEsRUFDQWpILEtBQUFpWCxTQUFBbFcsR0FBQThSLE1BQUEzTCxPQUFBQSxFQUNBbEgsS0FBQWlYLFNBQUFsVyxHQUFBOFIsTUFBQTZHLE1BQUFBLEVBSUExWixLQUFBc1gsU0FFQSxDQUVBdFgsS0FBQTZaLFNBQUFsVCxJQUFBLEVBQUEsRUFBQU0sRUFBQUMsR0FDQWxILEtBQUEyWixRQUFBaFQsSUFBQSxFQUFBLEVBQUFNLEVBQUFDLEVBRUEsQ0FFQSxLQUFBTyxHQUVBLE9BQUEsSUFBQXpILEtBQUE0QyxhQUFBOEUsS0FBQTFILEtBRUEsQ0FFQSxJQUFBMEgsQ0FBQXFPLEdBRUEvVixLQUFBaUgsTUFBQThPLEVBQUE5TyxNQUNBakgsS0FBQWtILE9BQUE2TyxFQUFBN08sT0FDQWxILEtBQUEwWixNQUFBM0QsRUFBQTJELE1BRUExWixLQUFBMlosUUFBQWpTLEtBQUFxTyxFQUFBNEQsU0FDQTNaLEtBQUE0WixZQUFBN0QsRUFBQTZELFlBRUE1WixLQUFBNlosU0FBQW5TLEtBQUFxTyxFQUFBOEQsVUFFQTdaLEtBQUFpWCxTQUFBaFcsT0FBQSxFQUVBLElBQUEsSUFBQUYsRUFBQSxFQUFBeVosRUFBQXpFLEVBQUFrQixTQUFBaFcsT0FBQUYsRUFBQXlaLEVBQUF6WixJQUVBZixLQUFBaVgsU0FBQWxXLEdBQUFnVixFQUFBa0IsU0FBQWxXLEdBQUEwRyxRQUNBekgsS0FBQWlYLFNBQUFsVyxHQUFBNFYsdUJBQUEsRUFNQSxNQUFBOUQsRUFBQW1CLE9BQUE4RixPQUFBLENBQUEsRUFBQS9ELEVBQUF1RSxRQUFBekgsT0FhQSxPQVpBN1MsS0FBQXNhLFFBQUF2RSxPQUFBLElBQUFqQyxHQUFBakIsR0FFQTdTLEtBQUErWixZQUFBaEUsRUFBQWdFLFlBQ0EvWixLQUFBZ2EsY0FBQWpFLEVBQUFpRSxjQUVBaGEsS0FBQWlhLG1CQUFBbEUsRUFBQWtFLG1CQUNBamEsS0FBQWthLHFCQUFBbkUsRUFBQW1FLHFCQUVBLE9BQUFuRSxFQUFBb0UsZUFBQW5hLEtBQUFtYSxhQUFBcEUsRUFBQW9FLGFBQUExUyxTQUVBekgsS0FBQW9hLFFBQUFyRSxFQUFBcUUsUUFFQXBhLElBRUEsQ0FFQSxPQUFBc1gsR0FFQXRYLEtBQUFVLGNBQUEsQ0FBQWIsS0FBQSxXQUVBLEVDM0pBLE1BQUE0YSxXQUFBbEIsR0FFQSxXQUFBM1csQ0FBQXFFLEVBQUEsRUFBQUMsRUFBQSxFQUFBc1MsRUFBQSxDQUFBLEdBRUEzRCxNQUFBNU8sRUFBQUMsRUFBQXNTLEdBRUF4WixLQUFBMGEscUJBQUEsQ0FFQSxFQ1BBLE1BQUFDLFdBQUF6RixHQUVBLFdBQUF0UyxDQUFBZ1IsRUFBQSxLQUFBM00sRUFBQSxFQUFBQyxFQUFBLEVBQUF3UyxFQUFBLEdBRUE3RCxNQUFBLE1BRUE3VixLQUFBNGEsb0JBQUEsRUFFQTVhLEtBQUE2UyxNQUFBLENBQUFlLE9BQUEzTSxRQUFBQyxTQUFBd1MsU0FFQTFaLEtBQUF3VixVQUFBaGUsR0FDQXdJLEtBQUF5VixVQUFBamUsR0FFQXdJLEtBQUE2YSxNQUFBdmpCLEdBRUEwSSxLQUFBcVcsaUJBQUEsRUFDQXJXLEtBQUF1VyxPQUFBLEVBQ0F2VyxLQUFBd1csZ0JBQUEsRUFFQXhXLEtBQUE4YSxhQUFBLElBQUF0SixHQUVBLENBRUEsY0FBQXVKLENBQUFDLEdBRUFoYixLQUFBOGEsYUFBQWxULElBQUFvVCxFQUVBLENBRUEsaUJBQUFDLEdBRUFqYixLQUFBOGEsYUFBQUksT0FFQSxFQ2pDQSxNQUFBQyxXQUFBVixHQUVBLFdBQUE3WCxDQUFBcUUsRUFBQSxFQUFBQyxFQUFBLEVBQUF3UyxFQUFBLEVBQUFGLEVBQUEsQ0FBQSxHQUVBM0QsTUFBQTVPLEVBQUFDLEVBQUFzUyxHQUVBeFosS0FBQW9iLDBCQUFBLEVBRUFwYixLQUFBMFosTUFBQUEsRUFFQTFaLEtBQUFzYSxRQUFBLElBQUFLLEdBQUEsS0FBQTFULEVBQUFDLEVBQUF3UyxHQUVBMVosS0FBQXNhLFFBQUEzRCx1QkFBQSxDQUVBLEVDZEEsTUFBQTBFLFdBQUFuRyxHQUVBLFdBQUF0UyxDQUFBZ1IsRUFBQSxLQUFBM00sRUFBQSxFQUFBQyxFQUFBLEVBQUF3UyxFQUFBLEdBVUE3RCxNQUFBLE1BRUE3VixLQUFBc2IsaUJBQUEsRUFFQXRiLEtBQUE2UyxNQUFBLENBQUFlLE9BQUEzTSxRQUFBQyxTQUFBd1MsU0FFQTFaLEtBQUF3VixVQUFBaGUsR0FDQXdJLEtBQUF5VixVQUFBamUsR0FFQXdJLEtBQUE2YSxNQUFBdmpCLEdBRUEwSSxLQUFBcVcsaUJBQUEsRUFDQXJXLEtBQUF1VyxPQUFBLEVBQ0F2VyxLQUFBd1csZ0JBQUEsQ0FFQSxFQzNCQSxNQUFBK0UsV0FBQWQsR0FFQSxXQUFBN1gsQ0FBQXFFLEVBQUEsRUFBQUMsRUFBQSxFQUFBd1MsRUFBQSxFQUFBRixFQUFBLENBQUEsR0FFQTNELE1BQUE1TyxFQUFBQyxFQUFBc1MsR0FFQXhaLEtBQUF3Yix1QkFBQSxFQUVBeGIsS0FBQTBaLE1BQUFBLEVBRUExWixLQUFBc2EsUUFBQSxJQUFBZSxHQUFBLEtBQUFwVSxFQUFBQyxFQUFBd1MsR0FFQTFaLEtBQUFzYSxRQUFBM0QsdUJBQUEsQ0FFQSxFQ2ZBLE1BQUE4RSxHQUVBLFdBQUE3WSxDQUFBSixFQUFBLEVBQUFDLEVBQUEsRUFBQWtWLEVBQUEsRUFBQUMsRUFBQSxHQUVBNVgsS0FBQTBiLGNBQUEsRUFFQTFiLEtBQUEyYixHQUFBblosRUFDQXhDLEtBQUE0YixHQUFBblosRUFDQXpDLEtBQUE2YixHQUFBbEUsRUFDQTNYLEtBQUE4YixHQUFBbEUsQ0FFQSxDQUVBLGdCQUFBbUUsQ0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQTNaLEdBSUEsSUFBQTRaLEVBQUFKLEVBQUFDLEVBQUEsR0FDQUksRUFBQUwsRUFBQUMsRUFBQSxHQUNBSyxFQUFBTixFQUFBQyxFQUFBLEdBQ0FNLEVBQUFQLEVBQUFDLEVBQUEsR0FFQSxNQUFBTyxFQUFBTixFQUFBQyxFQUFBLEdBQ0FNLEVBQUFQLEVBQUFDLEVBQUEsR0FDQU8sRUFBQVIsRUFBQUMsRUFBQSxHQUNBUSxFQUFBVCxFQUFBQyxFQUFBLEdBRUEsR0FBQSxJQUFBM1osRUFNQSxPQUpBc1osRUFBQUMsRUFBQSxHQUFBSyxFQUNBTixFQUFBQyxFQUFBLEdBQUFNLEVBQ0FQLEVBQUFDLEVBQUEsR0FBQU8sT0FDQVIsRUFBQUMsRUFBQSxHQUFBUSxHQUtBLEdBQUEsSUFBQS9aLEVBTUEsT0FKQXNaLEVBQUFDLEVBQUEsR0FBQVMsRUFDQVYsRUFBQUMsRUFBQSxHQUFBVSxFQUNBWCxFQUFBQyxFQUFBLEdBQUFXLE9BQ0FaLEVBQUFDLEVBQUEsR0FBQVksR0FLQSxHQUFBSixJQUFBSSxHQUFBUCxJQUFBSSxHQUFBSCxJQUFBSSxHQUFBSCxJQUFBSSxFQUFBLENBRUEsSUFBQTlYLEVBQUEsRUFBQXBDLEVBQ0EsTUFBQXVELEVBQUFxVyxFQUFBSSxFQUFBSCxFQUFBSSxFQUFBSCxFQUFBSSxFQUFBSCxFQUFBSSxFQUNBQyxFQUFBN1csR0FBQSxFQUFBLEdBQUEsRUFDQThXLEVBQUEsRUFBQTlXLEVBQUFBLEVBR0EsR0FBQThXLEVBQUFDLE9BQUFDLFFBQUEsQ0FFQSxNQUFBL1csRUFBQTVFLEtBQUE4SCxLQUFBMlQsR0FDQUcsRUFBQTViLEtBQUFpSSxNQUFBckQsRUFBQUQsRUFBQTZXLEdBRUFoWSxFQUFBeEQsS0FBQTRFLElBQUFwQixFQUFBb1ksR0FBQWhYLEVBQ0F4RCxFQUFBcEIsS0FBQTRFLElBQUF4RCxFQUFBd2EsR0FBQWhYLENBRUEsQ0FFQSxNQUFBaVgsRUFBQXphLEVBQUFvYSxFQVFBLEdBTkFSLEVBQUFBLEVBQUF4WCxFQUFBNFgsRUFBQVMsRUFDQVosRUFBQUEsRUFBQXpYLEVBQUE2WCxFQUFBUSxFQUNBWCxFQUFBQSxFQUFBMVgsRUFBQThYLEVBQUFPLEVBQ0FWLEVBQUFBLEVBQUEzWCxFQUFBK1gsRUFBQU0sRUFHQXJZLElBQUEsRUFBQXBDLEVBQUEsQ0FFQSxNQUFBb0wsRUFBQSxFQUFBeE0sS0FBQThILEtBQUFrVCxFQUFBQSxFQUFBQyxFQUFBQSxFQUFBQyxFQUFBQSxFQUFBQyxFQUFBQSxHQUVBSCxHQUFBeE8sRUFDQXlPLEdBQUF6TyxFQUNBME8sR0FBQTFPLEVBQ0EyTyxHQUFBM08sQ0FFQSxDQUVBLENBRUFrTyxFQUFBQyxHQUFBSyxFQUNBTixFQUFBQyxFQUFBLEdBQUFNLEVBQ0FQLEVBQUFDLEVBQUEsR0FBQU8sRUFDQVIsRUFBQUMsRUFBQSxHQUFBUSxDQUVBLENBRUEsOEJBQUFXLENBQUFwQixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLE1BQUFDLEVBQUFKLEVBQUFDLEdBQ0FJLEVBQUFMLEVBQUFDLEVBQUEsR0FDQUssRUFBQU4sRUFBQUMsRUFBQSxHQUNBTSxFQUFBUCxFQUFBQyxFQUFBLEdBRUFPLEVBQUFOLEVBQUFDLEdBQ0FNLEVBQUFQLEVBQUFDLEVBQUEsR0FDQU8sRUFBQVIsRUFBQUMsRUFBQSxHQUNBUSxFQUFBVCxFQUFBQyxFQUFBLEdBT0EsT0FMQUwsRUFBQUMsR0FBQUssRUFBQU8sRUFBQUosRUFBQUMsRUFBQUgsRUFBQUssRUFBQUosRUFBQUcsRUFDQVgsRUFBQUMsRUFBQSxHQUFBTSxFQUFBTSxFQUFBSixFQUFBRSxFQUFBSCxFQUFBRSxFQUFBSixFQUFBTSxFQUNBWixFQUFBQyxFQUFBLEdBQUFPLEVBQUFLLEVBQUFKLEVBQUFHLEVBQUFOLEVBQUFLLEVBQUFKLEVBQUFHLEVBQ0FWLEVBQUFDLEVBQUEsR0FBQVEsRUFBQUksRUFBQVAsRUFBQUksRUFBQUgsRUFBQUksRUFBQUgsRUFBQUksRUFFQVosQ0FFQSxDQUVBLEtBQUF4WixHQUVBLE9BQUF4QyxLQUFBMmIsRUFFQSxDQUVBLEtBQUFuWixDQUFBUCxHQUVBakMsS0FBQTJiLEdBQUExWixFQUNBakMsS0FBQXFkLG1CQUVBLENBRUEsS0FBQTVhLEdBRUEsT0FBQXpDLEtBQUE0YixFQUVBLENBRUEsS0FBQW5aLENBQUFSLEdBRUFqQyxLQUFBNGIsR0FBQTNaLEVBQ0FqQyxLQUFBcWQsbUJBRUEsQ0FFQSxLQUFBMUYsR0FFQSxPQUFBM1gsS0FBQTZiLEVBRUEsQ0FFQSxLQUFBbEUsQ0FBQTFWLEdBRUFqQyxLQUFBNmIsR0FBQTVaLEVBQ0FqQyxLQUFBcWQsbUJBRUEsQ0FFQSxLQUFBekYsR0FFQSxPQUFBNVgsS0FBQThiLEVBRUEsQ0FFQSxLQUFBbEUsQ0FBQTNWLEdBRUFqQyxLQUFBOGIsR0FBQTdaLEVBQ0FqQyxLQUFBcWQsbUJBRUEsQ0FFQSxHQUFBMVcsQ0FBQW5FLEVBQUFDLEVBQUFrVixFQUFBQyxHQVNBLE9BUEE1WCxLQUFBMmIsR0FBQW5aLEVBQ0F4QyxLQUFBNGIsR0FBQW5aLEVBQ0F6QyxLQUFBNmIsR0FBQWxFLEVBQ0EzWCxLQUFBOGIsR0FBQWxFLEVBRUE1WCxLQUFBcWQsb0JBRUFyZCxJQUVBLENBRUEsS0FBQXlILEdBRUEsT0FBQSxJQUFBekgsS0FBQTRDLFlBQUE1QyxLQUFBMmIsR0FBQTNiLEtBQUE0YixHQUFBNWIsS0FBQTZiLEdBQUE3YixLQUFBOGIsR0FFQSxDQUVBLElBQUFwVSxDQUFBNFYsR0FTQSxPQVBBdGQsS0FBQTJiLEdBQUEyQixFQUFBOWEsRUFDQXhDLEtBQUE0YixHQUFBMEIsRUFBQTdhLEVBQ0F6QyxLQUFBNmIsR0FBQXlCLEVBQUEzRixFQUNBM1gsS0FBQThiLEdBQUF3QixFQUFBMUYsRUFFQTVYLEtBQUFxZCxvQkFFQXJkLElBRUEsQ0FFQSxZQUFBdWQsQ0FBQUMsRUFBQUMsR0FBQSxHQUVBLE1BQUFqYixFQUFBZ2IsRUFBQTdCLEdBQUFsWixFQUFBK2EsRUFBQTVCLEdBQUFqRSxFQUFBNkYsRUFBQTNCLEdBQUE3VixFQUFBd1gsRUFBQUUsT0FNQXpYLEVBQUEzRSxLQUFBMkUsSUFDQUMsRUFBQTVFLEtBQUE0RSxJQUVBeVgsRUFBQTFYLEVBQUF6RCxFQUFBLEdBQ0EyRCxFQUFBRixFQUFBeEQsRUFBQSxHQUNBbWIsRUFBQTNYLEVBQUEwUixFQUFBLEdBRUFrRyxFQUFBM1gsRUFBQTFELEVBQUEsR0FDQTRELEVBQUFGLEVBQUF6RCxFQUFBLEdBQ0FxYixFQUFBNVgsRUFBQXlSLEVBQUEsR0FFQSxPQUFBM1IsR0FFQSxJQUFBLE1BQ0FoRyxLQUFBMmIsR0FBQWtDLEVBQUExWCxFQUFBeVgsRUFBQUQsRUFBQXZYLEVBQUEwWCxFQUNBOWQsS0FBQTRiLEdBQUErQixFQUFBdlgsRUFBQXdYLEVBQUFDLEVBQUExWCxFQUFBMlgsRUFDQTlkLEtBQUE2YixHQUFBOEIsRUFBQXhYLEVBQUEyWCxFQUFBRCxFQUFBelgsRUFBQXdYLEVBQ0E1ZCxLQUFBOGIsR0FBQTZCLEVBQUF4WCxFQUFBeVgsRUFBQUMsRUFBQXpYLEVBQUEwWCxFQUNBLE1BRUEsSUFBQSxNQUNBOWQsS0FBQTJiLEdBQUFrQyxFQUFBMVgsRUFBQXlYLEVBQUFELEVBQUF2WCxFQUFBMFgsRUFDQTlkLEtBQUE0YixHQUFBK0IsRUFBQXZYLEVBQUF3WCxFQUFBQyxFQUFBMVgsRUFBQTJYLEVBQ0E5ZCxLQUFBNmIsR0FBQThCLEVBQUF4WCxFQUFBMlgsRUFBQUQsRUFBQXpYLEVBQUF3WCxFQUNBNWQsS0FBQThiLEdBQUE2QixFQUFBeFgsRUFBQXlYLEVBQUFDLEVBQUF6WCxFQUFBMFgsRUFDQSxNQUVBLElBQUEsTUFDQTlkLEtBQUEyYixHQUFBa0MsRUFBQTFYLEVBQUF5WCxFQUFBRCxFQUFBdlgsRUFBQTBYLEVBQ0E5ZCxLQUFBNGIsR0FBQStCLEVBQUF2WCxFQUFBd1gsRUFBQUMsRUFBQTFYLEVBQUEyWCxFQUNBOWQsS0FBQTZiLEdBQUE4QixFQUFBeFgsRUFBQTJYLEVBQUFELEVBQUF6WCxFQUFBd1gsRUFDQTVkLEtBQUE4YixHQUFBNkIsRUFBQXhYLEVBQUF5WCxFQUFBQyxFQUFBelgsRUFBQTBYLEVBQ0EsTUFFQSxJQUFBLE1BQ0E5ZCxLQUFBMmIsR0FBQWtDLEVBQUExWCxFQUFBeVgsRUFBQUQsRUFBQXZYLEVBQUEwWCxFQUNBOWQsS0FBQTRiLEdBQUErQixFQUFBdlgsRUFBQXdYLEVBQUFDLEVBQUExWCxFQUFBMlgsRUFDQTlkLEtBQUE2YixHQUFBOEIsRUFBQXhYLEVBQUEyWCxFQUFBRCxFQUFBelgsRUFBQXdYLEVBQ0E1ZCxLQUFBOGIsR0FBQTZCLEVBQUF4WCxFQUFBeVgsRUFBQUMsRUFBQXpYLEVBQUEwWCxFQUNBLE1BRUEsSUFBQSxNQUNBOWQsS0FBQTJiLEdBQUFrQyxFQUFBMVgsRUFBQXlYLEVBQUFELEVBQUF2WCxFQUFBMFgsRUFDQTlkLEtBQUE0YixHQUFBK0IsRUFBQXZYLEVBQUF3WCxFQUFBQyxFQUFBMVgsRUFBQTJYLEVBQ0E5ZCxLQUFBNmIsR0FBQThCLEVBQUF4WCxFQUFBMlgsRUFBQUQsRUFBQXpYLEVBQUF3WCxFQUNBNWQsS0FBQThiLEdBQUE2QixFQUFBeFgsRUFBQXlYLEVBQUFDLEVBQUF6WCxFQUFBMFgsRUFDQSxNQUVBLElBQUEsTUFDQTlkLEtBQUEyYixHQUFBa0MsRUFBQTFYLEVBQUF5WCxFQUFBRCxFQUFBdlgsRUFBQTBYLEVBQ0E5ZCxLQUFBNGIsR0FBQStCLEVBQUF2WCxFQUFBd1gsRUFBQUMsRUFBQTFYLEVBQUEyWCxFQUNBOWQsS0FBQTZiLEdBQUE4QixFQUFBeFgsRUFBQTJYLEVBQUFELEVBQUF6WCxFQUFBd1gsRUFDQTVkLEtBQUE4YixHQUFBNkIsRUFBQXhYLEVBQUF5WCxFQUFBQyxFQUFBelgsRUFBQTBYLEVBQ0EsTUFFQSxRQUNBbFgsUUFBQUMsS0FBQSxtRUFBQWIsR0FNQSxPQUZBLElBQUF5WCxHQUFBemQsS0FBQXFkLG9CQUVBcmQsSUFFQSxDQUVBLGdCQUFBK2QsQ0FBQUMsRUFBQTFVLEdBTUEsTUFBQTJVLEVBQUEzVSxFQUFBLEVBQUF4RSxFQUFBeEQsS0FBQTRFLElBQUErWCxHQVNBLE9BUEFqZSxLQUFBMmIsR0FBQXFDLEVBQUF4YixFQUFBc0MsRUFDQTlFLEtBQUE0YixHQUFBb0MsRUFBQXZiLEVBQUFxQyxFQUNBOUUsS0FBQTZiLEdBQUFtQyxFQUFBckcsRUFBQTdTLEVBQ0E5RSxLQUFBOGIsR0FBQXhhLEtBQUEyRSxJQUFBZ1ksR0FFQWplLEtBQUFxZCxvQkFFQXJkLElBRUEsQ0FFQSxxQkFBQWtlLENBQUE1YixHQU1BLE1BQUF1SixFQUFBdkosRUFBQW1HLFNBRUE0UCxFQUFBeE0sRUFBQSxHQUFBeU0sRUFBQXpNLEVBQUEsR0FBQTBNLEVBQUExTSxFQUFBLEdBQ0EyTSxFQUFBM00sRUFBQSxHQUFBNE0sRUFBQTVNLEVBQUEsR0FBQTZNLEVBQUE3TSxFQUFBLEdBQ0E4TSxFQUFBOU0sRUFBQSxHQUFBK00sRUFBQS9NLEVBQUEsR0FBQWdOLEVBQUFoTixFQUFBLElBRUFzUyxFQUFBOUYsRUFBQUksRUFBQUksRUFFQSxHQUFBc0YsRUFBQSxFQUFBLENBRUEsTUFBQXJaLEVBQUEsR0FBQXhELEtBQUE4SCxLQUFBK1UsRUFBQSxHQUVBbmUsS0FBQThiLEdBQUEsSUFBQWhYLEVBQ0E5RSxLQUFBMmIsSUFBQS9DLEVBQUFGLEdBQUE1VCxFQUNBOUUsS0FBQTRiLElBQUFyRCxFQUFBSSxHQUFBN1QsRUFDQTlFLEtBQUE2YixJQUFBckQsRUFBQUYsR0FBQXhULENBRUEsTUFBQSxHQUFBdVQsRUFBQUksR0FBQUosRUFBQVEsRUFBQSxDQUVBLE1BQUEvVCxFQUFBLEVBQUF4RCxLQUFBOEgsS0FBQSxFQUFBaVAsRUFBQUksRUFBQUksR0FFQTdZLEtBQUE4YixJQUFBbEQsRUFBQUYsR0FBQTVULEVBQ0E5RSxLQUFBMmIsR0FBQSxJQUFBN1csRUFDQTlFLEtBQUE0YixJQUFBdEQsRUFBQUUsR0FBQTFULEVBQ0E5RSxLQUFBNmIsSUFBQXRELEVBQUFJLEdBQUE3VCxDQUVBLE1BQUEsR0FBQTJULEVBQUFJLEVBQUEsQ0FFQSxNQUFBL1QsRUFBQSxFQUFBeEQsS0FBQThILEtBQUEsRUFBQXFQLEVBQUFKLEVBQUFRLEdBRUE3WSxLQUFBOGIsSUFBQXZELEVBQUFJLEdBQUE3VCxFQUNBOUUsS0FBQTJiLElBQUFyRCxFQUFBRSxHQUFBMVQsRUFDQTlFLEtBQUE0YixHQUFBLElBQUE5VyxFQUNBOUUsS0FBQTZiLElBQUFuRCxFQUFBRSxHQUFBOVQsQ0FFQSxLQUFBLENBRUEsTUFBQUEsRUFBQSxFQUFBeEQsS0FBQThILEtBQUEsRUFBQXlQLEVBQUFSLEVBQUFJLEdBRUF6WSxLQUFBOGIsSUFBQXRELEVBQUFGLEdBQUF4VCxFQUNBOUUsS0FBQTJiLElBQUFwRCxFQUFBSSxHQUFBN1QsRUFDQTlFLEtBQUE0YixJQUFBbEQsRUFBQUUsR0FBQTlULEVBQ0E5RSxLQUFBNmIsR0FBQSxJQUFBL1csQ0FFQSxDQUlBLE9BRkE5RSxLQUFBcWQsb0JBRUFyZCxJQUVBLENBRUEsa0JBQUFvZSxDQUFBQyxFQUFBQyxHQUlBLElBQUExUCxFQUFBeVAsRUFBQXBWLElBQUFxVixHQUFBLEVBbUNBLE9BakNBMVAsRUFBQW9PLE9BQUFDLFNBSUFyTyxFQUFBLEVBRUF0TixLQUFBNkMsSUFBQWthLEVBQUE3YixHQUFBbEIsS0FBQTZDLElBQUFrYSxFQUFBMUcsSUFFQTNYLEtBQUEyYixJQUFBMEMsRUFBQTViLEVBQ0F6QyxLQUFBNGIsR0FBQXlDLEVBQUE3YixFQUNBeEMsS0FBQTZiLEdBQUEsRUFDQTdiLEtBQUE4YixHQUFBbE4sSUFJQTVPLEtBQUEyYixHQUFBLEVBQ0EzYixLQUFBNGIsSUFBQXlDLEVBQUExRyxFQUNBM1gsS0FBQTZiLEdBQUF3QyxFQUFBNWIsRUFDQXpDLEtBQUE4YixHQUFBbE4sS0FRQTVPLEtBQUEyYixHQUFBMEMsRUFBQTViLEVBQUE2YixFQUFBM0csRUFBQTBHLEVBQUExRyxFQUFBMkcsRUFBQTdiLEVBQ0F6QyxLQUFBNGIsR0FBQXlDLEVBQUExRyxFQUFBMkcsRUFBQTliLEVBQUE2YixFQUFBN2IsRUFBQThiLEVBQUEzRyxFQUNBM1gsS0FBQTZiLEdBQUF3QyxFQUFBN2IsRUFBQThiLEVBQUE3YixFQUFBNGIsRUFBQTViLEVBQUE2YixFQUFBOWIsRUFDQXhDLEtBQUE4YixHQUFBbE4sR0FJQTVPLEtBQUFxRCxXQUVBLENBRUEsT0FBQW1HLENBQUE1RCxHQUVBLE9BQUEsRUFBQXRFLEtBQUFxSSxLQUFBckksS0FBQTZDLElBQUFuQyxHQUFBaEMsS0FBQWlKLElBQUFyRCxJQUFBLEVBQUEsSUFFQSxDQUVBLGFBQUEyWSxDQUFBM1ksRUFBQTRZLEdBRUEsTUFBQWxWLEVBQUF0SixLQUFBd0osUUFBQTVELEdBRUEsR0FBQSxJQUFBMEQsRUFBQSxPQUFBdEosS0FFQSxNQUFBMEMsRUFBQXBCLEtBQUFZLElBQUEsRUFBQXNjLEVBQUFsVixHQUlBLE9BRkF0SixLQUFBeWUsTUFBQTdZLEVBQUFsRCxHQUVBMUMsSUFFQSxDQUVBLFFBQUE4TCxHQUVBLE9BQUE5TCxLQUFBMkcsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUVBLENBRUEsTUFBQXNILEdBSUEsT0FBQWpPLEtBQUEwZSxXQUVBLENBRUEsU0FBQUEsR0FRQSxPQU5BMWUsS0FBQTJiLEtBQUEsRUFDQTNiLEtBQUE0YixLQUFBLEVBQ0E1YixLQUFBNmIsS0FBQSxFQUVBN2IsS0FBQXFkLG9CQUVBcmQsSUFFQSxDQUVBLEdBQUFpSixDQUFBdEIsR0FFQSxPQUFBM0gsS0FBQTJiLEdBQUFoVSxFQUFBZ1UsR0FBQTNiLEtBQUE0YixHQUFBalUsRUFBQWlVLEdBQUE1YixLQUFBNmIsR0FBQWxVLEVBQUFrVSxHQUFBN2IsS0FBQThiLEdBQUFuVSxFQUFBbVUsRUFFQSxDQUVBLFFBQUEzUyxHQUVBLE9BQUFuSixLQUFBMmIsR0FBQTNiLEtBQUEyYixHQUFBM2IsS0FBQTRiLEdBQUE1YixLQUFBNGIsR0FBQTViLEtBQUE2YixHQUFBN2IsS0FBQTZiLEdBQUE3YixLQUFBOGIsR0FBQTliLEtBQUE4YixFQUVBLENBRUEsTUFBQTdhLEdBRUEsT0FBQUssS0FBQThILEtBQUFwSixLQUFBMmIsR0FBQTNiLEtBQUEyYixHQUFBM2IsS0FBQTRiLEdBQUE1YixLQUFBNGIsR0FBQTViLEtBQUE2YixHQUFBN2IsS0FBQTZiLEdBQUE3YixLQUFBOGIsR0FBQTliLEtBQUE4YixHQUVBLENBRUEsU0FBQXpZLEdBRUEsSUFBQXJDLEVBQUFoQixLQUFBaUIsU0FzQkEsT0FwQkEsSUFBQUQsR0FFQWhCLEtBQUEyYixHQUFBLEVBQ0EzYixLQUFBNGIsR0FBQSxFQUNBNWIsS0FBQTZiLEdBQUEsRUFDQTdiLEtBQUE4YixHQUFBLElBSUE5YSxFQUFBLEVBQUFBLEVBRUFoQixLQUFBMmIsR0FBQTNiLEtBQUEyYixHQUFBM2EsRUFDQWhCLEtBQUE0YixHQUFBNWIsS0FBQTRiLEdBQUE1YSxFQUNBaEIsS0FBQTZiLEdBQUE3YixLQUFBNmIsR0FBQTdhLEVBQ0FoQixLQUFBOGIsR0FBQTliLEtBQUE4YixHQUFBOWEsR0FJQWhCLEtBQUFxZCxvQkFFQXJkLElBRUEsQ0FFQSxRQUFBbUksQ0FBQXZDLEdBRUEsT0FBQTVGLEtBQUEyZSxvQkFBQTNlLEtBQUE0RixFQUVBLENBRUEsV0FBQTJHLENBQUEzRyxHQUVBLE9BQUE1RixLQUFBMmUsb0JBQUEvWSxFQUFBNUYsS0FFQSxDQUVBLG1CQUFBMmUsQ0FBQTlZLEVBQUFDLEdBSUEsTUFBQThZLEVBQUEvWSxFQUFBOFYsR0FBQWtELEVBQUFoWixFQUFBK1YsR0FBQWtELEVBQUFqWixFQUFBZ1csR0FBQWtELEVBQUFsWixFQUFBaVcsR0FDQWtELEVBQUFsWixFQUFBNlYsR0FBQXNELEVBQUFuWixFQUFBOFYsR0FBQXNELEVBQUFwWixFQUFBK1YsR0FBQXNELEVBQUFyWixFQUFBZ1csR0FTQSxPQVBBOWIsS0FBQTJiLEdBQUFpRCxFQUFBTyxFQUFBSixFQUFBQyxFQUFBSCxFQUFBSyxFQUFBSixFQUFBRyxFQUNBamYsS0FBQTRiLEdBQUFpRCxFQUFBTSxFQUFBSixFQUFBRSxFQUFBSCxFQUFBRSxFQUFBSixFQUFBTSxFQUNBbGYsS0FBQTZiLEdBQUFpRCxFQUFBSyxFQUFBSixFQUFBRyxFQUFBTixFQUFBSyxFQUFBSixFQUFBRyxFQUNBaGYsS0FBQThiLEdBQUFpRCxFQUFBSSxFQUFBUCxFQUFBSSxFQUFBSCxFQUFBSSxFQUFBSCxFQUFBSSxFQUVBbGYsS0FBQXFkLG9CQUVBcmQsSUFFQSxDQUVBLEtBQUF5ZSxDQUFBVyxFQUFBMWMsR0FFQSxHQUFBLElBQUFBLEVBQUEsT0FBQTFDLEtBQ0EsR0FBQSxJQUFBMEMsRUFBQSxPQUFBMUMsS0FBQTBILEtBQUEwWCxHQUVBLE1BQUE1YyxFQUFBeEMsS0FBQTJiLEdBQUFsWixFQUFBekMsS0FBQTRiLEdBQUFqRSxFQUFBM1gsS0FBQTZiLEdBQUFqRSxFQUFBNVgsS0FBQThiLEdBSUEsSUFBQXVELEVBQUF6SCxFQUFBd0gsRUFBQXRELEdBQUF0WixFQUFBNGMsRUFBQXpELEdBQUFsWixFQUFBMmMsRUFBQXhELEdBQUFqRSxFQUFBeUgsRUFBQXZELEdBaUJBLEdBZkF3RCxFQUFBLEdBRUFyZixLQUFBOGIsSUFBQXNELEVBQUF0RCxHQUNBOWIsS0FBQTJiLElBQUF5RCxFQUFBekQsR0FDQTNiLEtBQUE0YixJQUFBd0QsRUFBQXhELEdBQ0E1YixLQUFBNmIsSUFBQXVELEVBQUF2RCxHQUVBd0QsR0FBQUEsR0FJQXJmLEtBQUEwSCxLQUFBMFgsR0FJQUMsR0FBQSxFQU9BLE9BTEFyZixLQUFBOGIsR0FBQWxFLEVBQ0E1WCxLQUFBMmIsR0FBQW5aLEVBQ0F4QyxLQUFBNGIsR0FBQW5aLEVBQ0F6QyxLQUFBNmIsR0FBQWxFLEVBRUEzWCxLQUlBLE1BQUFzZixFQUFBLEVBQUFELEVBQUFBLEVBRUEsR0FBQUMsR0FBQXRDLE9BQUFDLFFBQUEsQ0FFQSxNQUFBblksRUFBQSxFQUFBcEMsRUFRQSxPQVBBMUMsS0FBQThiLEdBQUFoWCxFQUFBOFMsRUFBQWxWLEVBQUExQyxLQUFBOGIsR0FDQTliLEtBQUEyYixHQUFBN1csRUFBQXRDLEVBQUFFLEVBQUExQyxLQUFBMmIsR0FDQTNiLEtBQUE0YixHQUFBOVcsRUFBQXJDLEVBQUFDLEVBQUExQyxLQUFBNGIsR0FDQTViLEtBQUE2YixHQUFBL1csRUFBQTZTLEVBQUFqVixFQUFBMUMsS0FBQTZiLEdBRUE3YixLQUFBcUQsWUFFQXJELElBRUEsQ0FFQSxNQUFBdWYsRUFBQWplLEtBQUE4SCxLQUFBa1csR0FDQUUsRUFBQWxlLEtBQUFpSSxNQUFBZ1csRUFBQUYsR0FDQUksRUFBQW5lLEtBQUE0RSxLQUFBLEVBQUF4RCxHQUFBOGMsR0FBQUQsRUFDQUcsRUFBQXBlLEtBQUE0RSxJQUFBeEQsRUFBQThjLEdBQUFELEVBU0EsT0FQQXZmLEtBQUE4YixHQUFBbEUsRUFBQTZILEVBQUF6ZixLQUFBOGIsR0FBQTRELEVBQ0ExZixLQUFBMmIsR0FBQW5aLEVBQUFpZCxFQUFBemYsS0FBQTJiLEdBQUErRCxFQUNBMWYsS0FBQTRiLEdBQUFuWixFQUFBZ2QsRUFBQXpmLEtBQUE0YixHQUFBOEQsRUFDQTFmLEtBQUE2YixHQUFBbEUsRUFBQThILEVBQUF6ZixLQUFBNmIsR0FBQTZELEVBRUExZixLQUFBcWQsb0JBRUFyZCxJQUVBLENBRUEsZ0JBQUEyZixDQUFBQyxFQUFBUixFQUFBMWMsR0FFQSxPQUFBMUMsS0FBQTBILEtBQUFrWSxHQUFBbkIsTUFBQVcsRUFBQTFjLEVBRUEsQ0FFQSxNQUFBZixHQVFBLE1BQUFrZSxFQUFBLEVBQUF2ZSxLQUFBQyxHQUFBRCxLQUFBSyxTQUNBbWUsRUFBQSxFQUFBeGUsS0FBQUMsR0FBQUQsS0FBQUssU0FFQTJhLEVBQUFoYixLQUFBSyxTQUNBb2UsRUFBQXplLEtBQUE4SCxLQUFBLEVBQUFrVCxHQUNBMEQsRUFBQTFlLEtBQUE4SCxLQUFBa1QsR0FFQSxPQUFBdGMsS0FBQTJHLElBQ0FvWixFQUFBemUsS0FBQTRFLElBQUEyWixHQUNBRSxFQUFBemUsS0FBQTJFLElBQUE0WixHQUNBRyxFQUFBMWUsS0FBQTRFLElBQUE0WixHQUNBRSxFQUFBMWUsS0FBQTJFLElBQUE2WixHQUdBLENBRUEsTUFBQXhWLENBQUFnVCxHQUVBLE9BQUFBLEVBQUEzQixLQUFBM2IsS0FBQTJiLElBQUEyQixFQUFBMUIsS0FBQTViLEtBQUE0YixJQUFBMEIsRUFBQXpCLEtBQUE3YixLQUFBNmIsSUFBQXlCLEVBQUF4QixLQUFBOWIsS0FBQThiLEVBRUEsQ0FFQSxTQUFBdlIsQ0FBQTFKLEVBQUEySixFQUFBLEdBU0EsT0FQQXhLLEtBQUEyYixHQUFBOWEsRUFBQTJKLEdBQ0F4SyxLQUFBNGIsR0FBQS9hLEVBQUEySixFQUFBLEdBQ0F4SyxLQUFBNmIsR0FBQWhiLEVBQUEySixFQUFBLEdBQ0F4SyxLQUFBOGIsR0FBQWpiLEVBQUEySixFQUFBLEdBRUF4SyxLQUFBcWQsb0JBRUFyZCxJQUVBLENBRUEsT0FBQXlLLENBQUE1SixFQUFBLEdBQUEySixFQUFBLEdBT0EsT0FMQTNKLEVBQUEySixHQUFBeEssS0FBQTJiLEdBQ0E5YSxFQUFBMkosRUFBQSxHQUFBeEssS0FBQTRiLEdBQ0EvYSxFQUFBMkosRUFBQSxHQUFBeEssS0FBQTZiLEdBQ0FoYixFQUFBMkosRUFBQSxHQUFBeEssS0FBQThiLEdBRUFqYixDQUVBLENBRUEsbUJBQUE2SixDQUFBQyxFQUFBbkssR0FTQSxPQVBBUixLQUFBMmIsR0FBQWhSLEVBQUFDLEtBQUFwSyxHQUNBUixLQUFBNGIsR0FBQWpSLEVBQUFFLEtBQUFySyxHQUNBUixLQUFBNmIsR0FBQWxSLEVBQUEwTyxLQUFBN1ksR0FDQVIsS0FBQThiLEdBQUFuUixFQUFBMk8sS0FBQTlZLEdBRUFSLEtBQUFxZCxvQkFFQXJkLElBRUEsQ0FFQSxNQUFBc1UsR0FFQSxPQUFBdFUsS0FBQXlLLFNBRUEsQ0FFQSxTQUFBd1YsQ0FBQUMsR0FJQSxPQUZBbGdCLEtBQUFxZCxrQkFBQTZDLEVBRUFsZ0IsSUFFQSxDQUVBLGlCQUFBcWQsR0FBQSxDQUVBLEVBQUFyUyxPQUFBQyxrQkFFQWpMLEtBQUEyYixTQUNBM2IsS0FBQTRiLFNBQ0E1YixLQUFBNmIsU0FDQTdiLEtBQUE4YixFQUVBLEVDdHFCQSxNQUFBcUUsR0FFQSxXQUFBdmQsQ0FBQUosRUFBQSxFQUFBQyxFQUFBLEVBQUFrVixFQUFBLEdBRUF3SSxHQUFBcFosVUFBQXFaLFdBQUEsRUFFQXBnQixLQUFBd0MsRUFBQUEsRUFDQXhDLEtBQUF5QyxFQUFBQSxFQUNBekMsS0FBQTJYLEVBQUFBLENBRUEsQ0FFQSxHQUFBaFIsQ0FBQW5FLEVBQUFDLEVBQUFrVixHQVFBLFlBTkE1WCxJQUFBNFgsSUFBQUEsRUFBQTNYLEtBQUEyWCxHQUVBM1gsS0FBQXdDLEVBQUFBLEVBQ0F4QyxLQUFBeUMsRUFBQUEsRUFDQXpDLEtBQUEyWCxFQUFBQSxFQUVBM1gsSUFFQSxDQUVBLFNBQUFtSCxDQUFBQyxHQU1BLE9BSkFwSCxLQUFBd0MsRUFBQTRFLEVBQ0FwSCxLQUFBeUMsRUFBQTJFLEVBQ0FwSCxLQUFBMlgsRUFBQXZRLEVBRUFwSCxJQUVBLENBRUEsSUFBQXFILENBQUE3RSxHQUlBLE9BRkF4QyxLQUFBd0MsRUFBQUEsRUFFQXhDLElBRUEsQ0FFQSxJQUFBc0gsQ0FBQTdFLEdBSUEsT0FGQXpDLEtBQUF5QyxFQUFBQSxFQUVBekMsSUFFQSxDQUVBLElBQUE4WCxDQUFBSCxHQUlBLE9BRkEzWCxLQUFBMlgsRUFBQUEsRUFFQTNYLElBRUEsQ0FFQSxZQUFBdUgsQ0FBQS9HLEVBQUF5QixHQUVBLE9BQUF6QixHQUVBLEtBQUEsRUFBQVIsS0FBQXdDLEVBQUFQLEVBQUEsTUFDQSxLQUFBLEVBQUFqQyxLQUFBeUMsRUFBQVIsRUFBQSxNQUNBLEtBQUEsRUFBQWpDLEtBQUEyWCxFQUFBMVYsRUFBQSxNQUNBLFFBQUEsTUFBQSxJQUFBbUIsTUFBQSwwQkFBQTVDLEdBSUEsT0FBQVIsSUFFQSxDQUVBLFlBQUF3SCxDQUFBaEgsR0FFQSxPQUFBQSxHQUVBLEtBQUEsRUFBQSxPQUFBUixLQUFBd0MsRUFDQSxLQUFBLEVBQUEsT0FBQXhDLEtBQUF5QyxFQUNBLEtBQUEsRUFBQSxPQUFBekMsS0FBQTJYLEVBQ0EsUUFBQSxNQUFBLElBQUF2VSxNQUFBLDBCQUFBNUMsR0FJQSxDQUVBLEtBQUFpSCxHQUVBLE9BQUEsSUFBQXpILEtBQUE0QyxZQUFBNUMsS0FBQXdDLEVBQUF4QyxLQUFBeUMsRUFBQXpDLEtBQUEyWCxFQUVBLENBRUEsSUFBQWpRLENBQUFDLEdBTUEsT0FKQTNILEtBQUF3QyxFQUFBbUYsRUFBQW5GLEVBQ0F4QyxLQUFBeUMsRUFBQWtGLEVBQUFsRixFQUNBekMsS0FBQTJYLEVBQUFoUSxFQUFBZ1EsRUFFQTNYLElBRUEsQ0FFQSxHQUFBNEgsQ0FBQUQsR0FNQSxPQUpBM0gsS0FBQXdDLEdBQUFtRixFQUFBbkYsRUFDQXhDLEtBQUF5QyxHQUFBa0YsRUFBQWxGLEVBQ0F6QyxLQUFBMlgsR0FBQWhRLEVBQUFnUSxFQUVBM1gsSUFFQSxDQUVBLFNBQUE2SCxDQUFBL0MsR0FNQSxPQUpBOUUsS0FBQXdDLEdBQUFzQyxFQUNBOUUsS0FBQXlDLEdBQUFxQyxFQUNBOUUsS0FBQTJYLEdBQUE3UyxFQUVBOUUsSUFFQSxDQUVBLFVBQUE4SCxDQUFBakMsRUFBQUMsR0FNQSxPQUpBOUYsS0FBQXdDLEVBQUFxRCxFQUFBckQsRUFBQXNELEVBQUF0RCxFQUNBeEMsS0FBQXlDLEVBQUFvRCxFQUFBcEQsRUFBQXFELEVBQUFyRCxFQUNBekMsS0FBQTJYLEVBQUE5UixFQUFBOFIsRUFBQTdSLEVBQUE2UixFQUVBM1gsSUFFQSxDQUVBLGVBQUErSCxDQUFBSixFQUFBN0MsR0FNQSxPQUpBOUUsS0FBQXdDLEdBQUFtRixFQUFBbkYsRUFBQXNDLEVBQ0E5RSxLQUFBeUMsR0FBQWtGLEVBQUFsRixFQUFBcUMsRUFDQTlFLEtBQUEyWCxHQUFBaFEsRUFBQWdRLEVBQUE3UyxFQUVBOUUsSUFFQSxDQUVBLEdBQUFnSSxDQUFBTCxHQU1BLE9BSkEzSCxLQUFBd0MsR0FBQW1GLEVBQUFuRixFQUNBeEMsS0FBQXlDLEdBQUFrRixFQUFBbEYsRUFDQXpDLEtBQUEyWCxHQUFBaFEsRUFBQWdRLEVBRUEzWCxJQUVBLENBRUEsU0FBQWlJLENBQUFuRCxHQU1BLE9BSkE5RSxLQUFBd0MsR0FBQXNDLEVBQ0E5RSxLQUFBeUMsR0FBQXFDLEVBQ0E5RSxLQUFBMlgsR0FBQTdTLEVBRUE5RSxJQUVBLENBRUEsVUFBQWtJLENBQUFyQyxFQUFBQyxHQU1BLE9BSkE5RixLQUFBd0MsRUFBQXFELEVBQUFyRCxFQUFBc0QsRUFBQXRELEVBQ0F4QyxLQUFBeUMsRUFBQW9ELEVBQUFwRCxFQUFBcUQsRUFBQXJELEVBQ0F6QyxLQUFBMlgsRUFBQTlSLEVBQUE4UixFQUFBN1IsRUFBQTZSLEVBRUEzWCxJQUVBLENBRUEsUUFBQW1JLENBQUFSLEdBTUEsT0FKQTNILEtBQUF3QyxHQUFBbUYsRUFBQW5GLEVBQ0F4QyxLQUFBeUMsR0FBQWtGLEVBQUFsRixFQUNBekMsS0FBQTJYLEdBQUFoUSxFQUFBZ1EsRUFFQTNYLElBRUEsQ0FFQSxjQUFBb0ksQ0FBQWhCLEdBTUEsT0FKQXBILEtBQUF3QyxHQUFBNEUsRUFDQXBILEtBQUF5QyxHQUFBMkUsRUFDQXBILEtBQUEyWCxHQUFBdlEsRUFFQXBILElBRUEsQ0FFQSxlQUFBcWdCLENBQUF4YSxFQUFBQyxHQU1BLE9BSkE5RixLQUFBd0MsRUFBQXFELEVBQUFyRCxFQUFBc0QsRUFBQXRELEVBQ0F4QyxLQUFBeUMsRUFBQW9ELEVBQUFwRCxFQUFBcUQsRUFBQXJELEVBQ0F6QyxLQUFBMlgsRUFBQTlSLEVBQUE4UixFQUFBN1IsRUFBQTZSLEVBRUEzWCxJQUVBLENBRUEsVUFBQXNnQixDQUFBOUMsR0FFQSxPQUFBeGQsS0FBQXVnQixnQkFBQUMsR0FBQWpELGFBQUFDLEdBRUEsQ0FFQSxjQUFBaUQsQ0FBQXpDLEVBQUExVSxHQUVBLE9BQUF0SixLQUFBdWdCLGdCQUFBQyxHQUFBekMsaUJBQUFDLEVBQUExVSxHQUVBLENBRUEsWUFBQWYsQ0FBQWpHLEdBRUEsTUFBQUUsRUFBQXhDLEtBQUF3QyxFQUFBQyxFQUFBekMsS0FBQXlDLEVBQUFrVixFQUFBM1gsS0FBQTJYLEVBQ0FuUCxFQUFBbEcsRUFBQW1HLFNBTUEsT0FKQXpJLEtBQUF3QyxFQUFBZ0csRUFBQSxHQUFBaEcsRUFBQWdHLEVBQUEsR0FBQS9GLEVBQUErRixFQUFBLEdBQUFtUCxFQUNBM1gsS0FBQXlDLEVBQUErRixFQUFBLEdBQUFoRyxFQUFBZ0csRUFBQSxHQUFBL0YsRUFBQStGLEVBQUEsR0FBQW1QLEVBQ0EzWCxLQUFBMlgsRUFBQW5QLEVBQUEsR0FBQWhHLEVBQUFnRyxFQUFBLEdBQUEvRixFQUFBK0YsRUFBQSxHQUFBbVAsRUFFQTNYLElBRUEsQ0FFQSxpQkFBQTBnQixDQUFBcGUsR0FFQSxPQUFBdEMsS0FBQXVJLGFBQUFqRyxHQUFBZSxXQUVBLENBRUEsWUFBQTJVLENBQUExVixHQUVBLE1BQUFFLEVBQUF4QyxLQUFBd0MsRUFBQUMsRUFBQXpDLEtBQUF5QyxFQUFBa1YsRUFBQTNYLEtBQUEyWCxFQUNBblAsRUFBQWxHLEVBQUFtRyxTQUVBbVAsRUFBQSxHQUFBcFAsRUFBQSxHQUFBaEcsRUFBQWdHLEVBQUEsR0FBQS9GLEVBQUErRixFQUFBLElBQUFtUCxFQUFBblAsRUFBQSxLQU1BLE9BSkF4SSxLQUFBd0MsR0FBQWdHLEVBQUEsR0FBQWhHLEVBQUFnRyxFQUFBLEdBQUEvRixFQUFBK0YsRUFBQSxHQUFBbVAsRUFBQW5QLEVBQUEsS0FBQW9QLEVBQ0E1WCxLQUFBeUMsR0FBQStGLEVBQUEsR0FBQWhHLEVBQUFnRyxFQUFBLEdBQUEvRixFQUFBK0YsRUFBQSxHQUFBbVAsRUFBQW5QLEVBQUEsS0FBQW9QLEVBQ0E1WCxLQUFBMlgsR0FBQW5QLEVBQUEsR0FBQWhHLEVBQUFnRyxFQUFBLEdBQUEvRixFQUFBK0YsRUFBQSxJQUFBbVAsRUFBQW5QLEVBQUEsS0FBQW9QLEVBRUE1WCxJQUVBLENBRUEsZUFBQXVnQixDQUFBM2EsR0FJQSxNQUFBK2EsRUFBQTNnQixLQUFBd0MsRUFBQW9lLEVBQUE1Z0IsS0FBQXlDLEVBQUFvZSxFQUFBN2dCLEtBQUEyWCxFQUNBbUosRUFBQWxiLEVBQUFwRCxFQUFBdWUsRUFBQW5iLEVBQUFuRCxFQUFBdWUsRUFBQXBiLEVBQUErUixFQUFBc0osRUFBQXJiLEVBQUFnUyxFQUdBOUksRUFBQSxHQUFBaVMsRUFBQUYsRUFBQUcsRUFBQUosR0FDQTdSLEVBQUEsR0FBQWlTLEVBQUFMLEVBQUFHLEVBQUFELEdBQ0FLLEVBQUEsR0FBQUosRUFBQUYsRUFBQUcsRUFBQUosR0FPQSxPQUpBM2dCLEtBQUF3QyxFQUFBbWUsRUFBQU0sRUFBQW5TLEVBQUFpUyxFQUFBRyxFQUFBRixFQUFBalMsRUFDQS9PLEtBQUF5QyxFQUFBbWUsRUFBQUssRUFBQWxTLEVBQUFpUyxFQUFBbFMsRUFBQWdTLEVBQUFJLEVBQ0FsaEIsS0FBQTJYLEVBQUFrSixFQUFBSSxFQUFBQyxFQUFBSixFQUFBL1IsRUFBQWdTLEVBQUFqUyxFQUVBOU8sSUFFQSxDQUVBLE9BQUFtaEIsQ0FBQUMsR0FFQSxPQUFBcGhCLEtBQUFnWSxhQUFBb0osRUFBQUMsb0JBQUFySixhQUFBb0osRUFBQUUsaUJBRUEsQ0FFQSxTQUFBQyxDQUFBSCxHQUVBLE9BQUFwaEIsS0FBQWdZLGFBQUFvSixFQUFBSSx5QkFBQXhKLGFBQUFvSixFQUFBSyxZQUVBLENBRUEsa0JBQUFDLENBQUFwZixHQUtBLE1BQUFFLEVBQUF4QyxLQUFBd0MsRUFBQUMsRUFBQXpDLEtBQUF5QyxFQUFBa1YsRUFBQTNYLEtBQUEyWCxFQUNBblAsRUFBQWxHLEVBQUFtRyxTQU1BLE9BSkF6SSxLQUFBd0MsRUFBQWdHLEVBQUEsR0FBQWhHLEVBQUFnRyxFQUFBLEdBQUEvRixFQUFBK0YsRUFBQSxHQUFBbVAsRUFDQTNYLEtBQUF5QyxFQUFBK0YsRUFBQSxHQUFBaEcsRUFBQWdHLEVBQUEsR0FBQS9GLEVBQUErRixFQUFBLEdBQUFtUCxFQUNBM1gsS0FBQTJYLEVBQUFuUCxFQUFBLEdBQUFoRyxFQUFBZ0csRUFBQSxHQUFBL0YsRUFBQStGLEVBQUEsSUFBQW1QLEVBRUEzWCxLQUFBcUQsV0FFQSxDQUVBLE1BQUFnRixDQUFBVixHQU1BLE9BSkEzSCxLQUFBd0MsR0FBQW1GLEVBQUFuRixFQUNBeEMsS0FBQXlDLEdBQUFrRixFQUFBbEYsRUFDQXpDLEtBQUEyWCxHQUFBaFEsRUFBQWdRLEVBRUEzWCxJQUVBLENBRUEsWUFBQXNJLENBQUFsQixHQUVBLE9BQUFwSCxLQUFBb0ksZUFBQSxFQUFBaEIsRUFFQSxDQUVBLEdBQUFsRixDQUFBeUYsR0FNQSxPQUpBM0gsS0FBQXdDLEVBQUFsQixLQUFBWSxJQUFBbEMsS0FBQXdDLEVBQUFtRixFQUFBbkYsR0FDQXhDLEtBQUF5QyxFQUFBbkIsS0FBQVksSUFBQWxDLEtBQUF5QyxFQUFBa0YsRUFBQWxGLEdBQ0F6QyxLQUFBMlgsRUFBQXJXLEtBQUFZLElBQUFsQyxLQUFBMlgsRUFBQWhRLEVBQUFnUSxHQUVBM1gsSUFFQSxDQUVBLEdBQUFtQyxDQUFBd0YsR0FNQSxPQUpBM0gsS0FBQXdDLEVBQUFsQixLQUFBYSxJQUFBbkMsS0FBQXdDLEVBQUFtRixFQUFBbkYsR0FDQXhDLEtBQUF5QyxFQUFBbkIsS0FBQWEsSUFBQW5DLEtBQUF5QyxFQUFBa0YsRUFBQWxGLEdBQ0F6QyxLQUFBMlgsRUFBQXJXLEtBQUFhLElBQUFuQyxLQUFBMlgsRUFBQWhRLEVBQUFnUSxHQUVBM1gsSUFFQSxDQUVBLEtBQUFnQyxDQUFBRSxFQUFBQyxHQVFBLE9BSkFuQyxLQUFBd0MsRUFBQWxCLEtBQUFhLElBQUFELEVBQUFNLEVBQUFsQixLQUFBWSxJQUFBQyxFQUFBSyxFQUFBeEMsS0FBQXdDLElBQ0F4QyxLQUFBeUMsRUFBQW5CLEtBQUFhLElBQUFELEVBQUFPLEVBQUFuQixLQUFBWSxJQUFBQyxFQUFBTSxFQUFBekMsS0FBQXlDLElBQ0F6QyxLQUFBMlgsRUFBQXJXLEtBQUFhLElBQUFELEVBQUF5VixFQUFBclcsS0FBQVksSUFBQUMsRUFBQXdWLEVBQUEzWCxLQUFBMlgsSUFFQTNYLElBRUEsQ0FFQSxXQUFBMEksQ0FBQUMsRUFBQUMsR0FNQSxPQUpBNUksS0FBQXdDLEVBQUFsQixLQUFBYSxJQUFBd0csRUFBQXJILEtBQUFZLElBQUEwRyxFQUFBNUksS0FBQXdDLElBQ0F4QyxLQUFBeUMsRUFBQW5CLEtBQUFhLElBQUF3RyxFQUFBckgsS0FBQVksSUFBQTBHLEVBQUE1SSxLQUFBeUMsSUFDQXpDLEtBQUEyWCxFQUFBclcsS0FBQWEsSUFBQXdHLEVBQUFySCxLQUFBWSxJQUFBMEcsRUFBQTVJLEtBQUEyWCxJQUVBM1gsSUFFQSxDQUVBLFdBQUE2SSxDQUFBM0csRUFBQUMsR0FFQSxNQUFBbEIsRUFBQWpCLEtBQUFpQixTQUVBLE9BQUFqQixLQUFBc0ksYUFBQXJILEdBQUEsR0FBQW1ILGVBQUE5RyxLQUFBYSxJQUFBRCxFQUFBWixLQUFBWSxJQUFBQyxFQUFBbEIsSUFFQSxDQUVBLEtBQUF3RCxHQU1BLE9BSkF6RSxLQUFBd0MsRUFBQWxCLEtBQUFtRCxNQUFBekUsS0FBQXdDLEdBQ0F4QyxLQUFBeUMsRUFBQW5CLEtBQUFtRCxNQUFBekUsS0FBQXlDLEdBQ0F6QyxLQUFBMlgsRUFBQXJXLEtBQUFtRCxNQUFBekUsS0FBQTJYLEdBRUEzWCxJQUVBLENBRUEsSUFBQXVGLEdBTUEsT0FKQXZGLEtBQUF3QyxFQUFBbEIsS0FBQWlFLEtBQUF2RixLQUFBd0MsR0FDQXhDLEtBQUF5QyxFQUFBbkIsS0FBQWlFLEtBQUF2RixLQUFBeUMsR0FDQXpDLEtBQUEyWCxFQUFBclcsS0FBQWlFLEtBQUF2RixLQUFBMlgsR0FFQTNYLElBRUEsQ0FFQSxLQUFBc0QsR0FNQSxPQUpBdEQsS0FBQXdDLEVBQUFsQixLQUFBZ0MsTUFBQXRELEtBQUF3QyxHQUNBeEMsS0FBQXlDLEVBQUFuQixLQUFBZ0MsTUFBQXRELEtBQUF5QyxHQUNBekMsS0FBQTJYLEVBQUFyVyxLQUFBZ0MsTUFBQXRELEtBQUEyWCxHQUVBM1gsSUFFQSxDQUVBLFdBQUE4SSxHQU1BLE9BSkE5SSxLQUFBd0MsRUFBQWxCLEtBQUF5SCxNQUFBL0ksS0FBQXdDLEdBQ0F4QyxLQUFBeUMsRUFBQW5CLEtBQUF5SCxNQUFBL0ksS0FBQXlDLEdBQ0F6QyxLQUFBMlgsRUFBQXJXLEtBQUF5SCxNQUFBL0ksS0FBQTJYLEdBRUEzWCxJQUVBLENBRUEsTUFBQWdKLEdBTUEsT0FKQWhKLEtBQUF3QyxHQUFBeEMsS0FBQXdDLEVBQ0F4QyxLQUFBeUMsR0FBQXpDLEtBQUF5QyxFQUNBekMsS0FBQTJYLEdBQUEzWCxLQUFBMlgsRUFFQTNYLElBRUEsQ0FFQSxHQUFBaUosQ0FBQXRCLEdBRUEsT0FBQTNILEtBQUF3QyxFQUFBbUYsRUFBQW5GLEVBQUF4QyxLQUFBeUMsRUFBQWtGLEVBQUFsRixFQUFBekMsS0FBQTJYLEVBQUFoUSxFQUFBZ1EsQ0FFQSxDQUlBLFFBQUF4TyxHQUVBLE9BQUFuSixLQUFBd0MsRUFBQXhDLEtBQUF3QyxFQUFBeEMsS0FBQXlDLEVBQUF6QyxLQUFBeUMsRUFBQXpDLEtBQUEyWCxFQUFBM1gsS0FBQTJYLENBRUEsQ0FFQSxNQUFBMVcsR0FFQSxPQUFBSyxLQUFBOEgsS0FBQXBKLEtBQUF3QyxFQUFBeEMsS0FBQXdDLEVBQUF4QyxLQUFBeUMsRUFBQXpDLEtBQUF5QyxFQUFBekMsS0FBQTJYLEVBQUEzWCxLQUFBMlgsRUFFQSxDQUVBLGVBQUF0TyxHQUVBLE9BQUEvSCxLQUFBNkMsSUFBQW5FLEtBQUF3QyxHQUFBbEIsS0FBQTZDLElBQUFuRSxLQUFBeUMsR0FBQW5CLEtBQUE2QyxJQUFBbkUsS0FBQTJYLEVBRUEsQ0FFQSxTQUFBdFUsR0FFQSxPQUFBckQsS0FBQXNJLGFBQUF0SSxLQUFBaUIsVUFBQSxFQUVBLENBRUEsU0FBQWdKLENBQUFoSixHQUVBLE9BQUFqQixLQUFBcUQsWUFBQStFLGVBQUFuSCxFQUVBLENBRUEsSUFBQXNCLENBQUFvRixFQUFBdUMsR0FNQSxPQUpBbEssS0FBQXdDLElBQUFtRixFQUFBbkYsRUFBQXhDLEtBQUF3QyxHQUFBMEgsRUFDQWxLLEtBQUF5QyxJQUFBa0YsRUFBQWxGLEVBQUF6QyxLQUFBeUMsR0FBQXlILEVBQ0FsSyxLQUFBMlgsSUFBQWhRLEVBQUFnUSxFQUFBM1gsS0FBQTJYLEdBQUF6TixFQUVBbEssSUFFQSxDQUVBLFdBQUFtSyxDQUFBQyxFQUFBQyxFQUFBSCxHQU1BLE9BSkFsSyxLQUFBd0MsRUFBQTRILEVBQUE1SCxHQUFBNkgsRUFBQTdILEVBQUE0SCxFQUFBNUgsR0FBQTBILEVBQ0FsSyxLQUFBeUMsRUFBQTJILEVBQUEzSCxHQUFBNEgsRUFBQTVILEVBQUEySCxFQUFBM0gsR0FBQXlILEVBQ0FsSyxLQUFBMlgsRUFBQXZOLEVBQUF1TixHQUFBdE4sRUFBQXNOLEVBQUF2TixFQUFBdU4sR0FBQXpOLEVBRUFsSyxJQUVBLENBRUEsS0FBQWtKLENBQUF2QixHQUVBLE9BQUEzSCxLQUFBMmhCLGFBQUEzaEIsS0FBQTJILEVBRUEsQ0FFQSxZQUFBZ2EsQ0FBQTliLEVBQUFDLEdBRUEsTUFBQThiLEVBQUEvYixFQUFBckQsRUFBQXFmLEVBQUFoYyxFQUFBcEQsRUFBQXFmLEVBQUFqYyxFQUFBOFIsRUFDQW9LLEVBQUFqYyxFQUFBdEQsRUFBQXdmLEVBQUFsYyxFQUFBckQsRUFBQXdmLEVBQUFuYyxFQUFBNlIsRUFNQSxPQUpBM1gsS0FBQXdDLEVBQUFxZixFQUFBSSxFQUFBSCxFQUFBRSxFQUNBaGlCLEtBQUF5QyxFQUFBcWYsRUFBQUMsRUFBQUgsRUFBQUssRUFDQWppQixLQUFBMlgsRUFBQWlLLEVBQUFJLEVBQUFILEVBQUFFLEVBRUEvaEIsSUFFQSxDQUVBLGVBQUFraUIsQ0FBQXZhLEdBRUEsTUFBQThCLEVBQUE5QixFQUFBd0IsV0FFQSxHQUFBLElBQUFNLEVBQUEsT0FBQXpKLEtBQUEyRyxJQUFBLEVBQUEsRUFBQSxHQUVBLE1BQUFTLEVBQUFPLEVBQUFzQixJQUFBakosTUFBQXlKLEVBRUEsT0FBQXpKLEtBQUEwSCxLQUFBQyxHQUFBUyxlQUFBaEIsRUFFQSxDQUVBLGNBQUErYSxDQUFBQyxHQUlBLE9BRkFDLEdBQUEzYSxLQUFBMUgsTUFBQWtpQixnQkFBQUUsR0FFQXBpQixLQUFBZ0ksSUFBQXFhLEdBRUEsQ0FFQSxPQUFBQyxDQUFBQyxHQUtBLE9BQUF2aUIsS0FBQWdJLElBQUFxYSxHQUFBM2EsS0FBQTZhLEdBQUFuYSxlQUFBLEVBQUFwSSxLQUFBaUosSUFBQXNaLElBRUEsQ0FFQSxPQUFBL1ksQ0FBQTdCLEdBRUEsTUFBQThCLEVBQUFuSSxLQUFBOEgsS0FBQXBKLEtBQUFtSixXQUFBeEIsRUFBQXdCLFlBRUEsR0FBQSxJQUFBTSxFQUFBLE9BQUFuSSxLQUFBQyxHQUFBLEVBRUEsTUFBQW1JLEVBQUExSixLQUFBaUosSUFBQXRCLEdBQUE4QixFQUlBLE9BQUFuSSxLQUFBcUksS0FBQTNILEdBQUEwSCxHQUFBLEVBQUEsR0FFQSxDQUVBLFVBQUFFLENBQUFqQyxHQUVBLE9BQUFyRyxLQUFBOEgsS0FBQXBKLEtBQUE2SixrQkFBQWxDLEdBRUEsQ0FFQSxpQkFBQWtDLENBQUFsQyxHQUVBLE1BQUFtQyxFQUFBOUosS0FBQXdDLEVBQUFtRixFQUFBbkYsRUFBQXVILEVBQUEvSixLQUFBeUMsRUFBQWtGLEVBQUFsRixFQUFBK2YsRUFBQXhpQixLQUFBMlgsRUFBQWhRLEVBQUFnUSxFQUVBLE9BQUE3TixFQUFBQSxFQUFBQyxFQUFBQSxFQUFBeVksRUFBQUEsQ0FFQSxDQUVBLG1CQUFBeFksQ0FBQXJDLEdBRUEsT0FBQXJHLEtBQUE2QyxJQUFBbkUsS0FBQXdDLEVBQUFtRixFQUFBbkYsR0FBQWxCLEtBQUE2QyxJQUFBbkUsS0FBQXlDLEVBQUFrRixFQUFBbEYsR0FBQW5CLEtBQUE2QyxJQUFBbkUsS0FBQTJYLEVBQUFoUSxFQUFBZ1EsRUFFQSxDQUVBLGdCQUFBOEssQ0FBQTNkLEdBRUEsT0FBQTlFLEtBQUEwaUIsdUJBQUE1ZCxFQUFBNmQsT0FBQTdkLEVBQUE4ZCxJQUFBOWQsRUFBQTRFLE1BRUEsQ0FFQSxzQkFBQWdaLENBQUFDLEVBQUFDLEVBQUFsWixHQUVBLE1BQUFtWixFQUFBdmhCLEtBQUE0RSxJQUFBMGMsR0FBQUQsRUFNQSxPQUpBM2lCLEtBQUF3QyxFQUFBcWdCLEVBQUF2aEIsS0FBQTRFLElBQUF3RCxHQUNBMUosS0FBQXlDLEVBQUFuQixLQUFBMkUsSUFBQTJjLEdBQUFELEVBQ0EzaUIsS0FBQTJYLEVBQUFrTCxFQUFBdmhCLEtBQUEyRSxJQUFBeUQsR0FFQTFKLElBRUEsQ0FFQSxrQkFBQThpQixDQUFBL2MsR0FFQSxPQUFBL0YsS0FBQStpQix5QkFBQWhkLEVBQUE0YyxPQUFBNWMsRUFBQTJELE1BQUEzRCxFQUFBdEQsRUFFQSxDQUVBLHdCQUFBc2dCLENBQUFKLEVBQUFqWixFQUFBakgsR0FNQSxPQUpBekMsS0FBQXdDLEVBQUFtZ0IsRUFBQXJoQixLQUFBNEUsSUFBQXdELEdBQ0ExSixLQUFBeUMsRUFBQUEsRUFDQXpDLEtBQUEyWCxFQUFBZ0wsRUFBQXJoQixLQUFBMkUsSUFBQXlELEdBRUExSixJQUVBLENBRUEscUJBQUFvWixDQUFBOVcsR0FFQSxNQUFBa0csRUFBQWxHLEVBQUFtRyxTQU1BLE9BSkF6SSxLQUFBd0MsRUFBQWdHLEVBQUEsSUFDQXhJLEtBQUF5QyxFQUFBK0YsRUFBQSxJQUNBeEksS0FBQTJYLEVBQUFuUCxFQUFBLElBRUF4SSxJQUVBLENBRUEsa0JBQUFnakIsQ0FBQTFnQixHQUVBLE1BQUEwTSxFQUFBaFAsS0FBQWlqQixvQkFBQTNnQixFQUFBLEdBQUFyQixTQUNBZ08sRUFBQWpQLEtBQUFpakIsb0JBQUEzZ0IsRUFBQSxHQUFBckIsU0FDQWlpQixFQUFBbGpCLEtBQUFpakIsb0JBQUEzZ0IsRUFBQSxHQUFBckIsU0FNQSxPQUpBakIsS0FBQXdDLEVBQUF3TSxFQUNBaFAsS0FBQXlDLEVBQUF3TSxFQUNBalAsS0FBQTJYLEVBQUF1TCxFQUVBbGpCLElBRUEsQ0FFQSxtQkFBQWlqQixDQUFBM2dCLEVBQUE5QixHQUVBLE9BQUFSLEtBQUF1SyxVQUFBakksRUFBQW1HLFNBQUEsRUFBQWpJLEVBRUEsQ0FFQSxvQkFBQTRMLENBQUE5SixFQUFBOUIsR0FFQSxPQUFBUixLQUFBdUssVUFBQWpJLEVBQUFtRyxTQUFBLEVBQUFqSSxFQUVBLENBRUEsWUFBQStjLENBQUEvVSxHQU1BLE9BSkF4SSxLQUFBd0MsRUFBQWdHLEVBQUFtVCxHQUNBM2IsS0FBQXlDLEVBQUErRixFQUFBb1QsR0FDQTViLEtBQUEyWCxFQUFBblAsRUFBQXFULEdBRUE3YixJQUVBLENBRUEsWUFBQW1qQixDQUFBcGQsR0FNQSxPQUpBL0YsS0FBQXdDLEVBQUF1RCxFQUFBNkksRUFDQTVPLEtBQUF5QyxFQUFBc0QsRUFBQWdJLEVBQ0EvTixLQUFBMlgsRUFBQTVSLEVBQUFELEVBRUE5RixJQUVBLENBRUEsTUFBQXNLLENBQUEzQyxHQUVBLE9BQUFBLEVBQUFuRixJQUFBeEMsS0FBQXdDLEdBQUFtRixFQUFBbEYsSUFBQXpDLEtBQUF5QyxHQUFBa0YsRUFBQWdRLElBQUEzWCxLQUFBMlgsQ0FFQSxDQUVBLFNBQUFwTixDQUFBMUosRUFBQTJKLEVBQUEsR0FNQSxPQUpBeEssS0FBQXdDLEVBQUEzQixFQUFBMkosR0FDQXhLLEtBQUF5QyxFQUFBNUIsRUFBQTJKLEVBQUEsR0FDQXhLLEtBQUEyWCxFQUFBOVcsRUFBQTJKLEVBQUEsR0FFQXhLLElBRUEsQ0FFQSxPQUFBeUssQ0FBQTVKLEVBQUEsR0FBQTJKLEVBQUEsR0FNQSxPQUpBM0osRUFBQTJKLEdBQUF4SyxLQUFBd0MsRUFDQTNCLEVBQUEySixFQUFBLEdBQUF4SyxLQUFBeUMsRUFDQTVCLEVBQUEySixFQUFBLEdBQUF4SyxLQUFBMlgsRUFFQTlXLENBRUEsQ0FFQSxtQkFBQTZKLENBQUFDLEVBQUFuSyxHQU1BLE9BSkFSLEtBQUF3QyxFQUFBbUksRUFBQUMsS0FBQXBLLEdBQ0FSLEtBQUF5QyxFQUFBa0ksRUFBQUUsS0FBQXJLLEdBQ0FSLEtBQUEyWCxFQUFBaE4sRUFBQTBPLEtBQUE3WSxHQUVBUixJQUVBLENBRUEsTUFBQTJCLEdBTUEsT0FKQTNCLEtBQUF3QyxFQUFBbEIsS0FBQUssU0FDQTNCLEtBQUF5QyxFQUFBbkIsS0FBQUssU0FDQTNCLEtBQUEyWCxFQUFBclcsS0FBQUssU0FFQTNCLElBRUEsQ0FFQSxlQUFBb2pCLEdBSUEsTUFBQTFaLEVBQUFwSSxLQUFBSyxTQUFBTCxLQUFBQyxHQUFBLEVBQ0E4aEIsRUFBQSxFQUFBL2hCLEtBQUFLLFNBQUEsRUFDQW9FLEVBQUF6RSxLQUFBOEgsS0FBQSxFQUFBaWEsRUFBQUEsR0FNQSxPQUpBcmpCLEtBQUF3QyxFQUFBdUQsRUFBQXpFLEtBQUEyRSxJQUFBeUQsR0FDQTFKLEtBQUF5QyxFQUFBNGdCLEVBQ0FyakIsS0FBQTJYLEVBQUE1UixFQUFBekUsS0FBQTRFLElBQUF3RCxHQUVBMUosSUFFQSxDQUVBLEVBQUFnTCxPQUFBQyxrQkFFQWpMLEtBQUF3QyxRQUNBeEMsS0FBQXlDLFFBQ0F6QyxLQUFBMlgsQ0FFQSxFQUlBLE1BQUEwSyxHQUFBLElBQUFsQyxHQUNBSyxHQUFBLElBQUEvRSxHQy9zQkEsTUFBQTZILEdBRUEsV0FBQTFnQixDQUFBVixFQUFBLElBQUFpZSxHQUFBb0QsSUFBQUEsSUFBQUEsS0FBQXBoQixFQUFBLElBQUFnZSxJQUFBb0QsS0FBQUEsS0FBQUEsTUFFQXZqQixLQUFBd2pCLFFBQUEsRUFFQXhqQixLQUFBa0MsSUFBQUEsRUFDQWxDLEtBQUFtQyxJQUFBQSxDQUVBLENBRUEsR0FBQXdFLENBQUF6RSxFQUFBQyxHQUtBLE9BSEFuQyxLQUFBa0MsSUFBQXdGLEtBQUF4RixHQUNBbEMsS0FBQW1DLElBQUF1RixLQUFBdkYsR0FFQW5DLElBRUEsQ0FFQSxZQUFBeWpCLENBQUE1aUIsR0FFQWIsS0FBQTBqQixZQUVBLElBQUEsSUFBQTNpQixFQUFBLEVBQUF5WixFQUFBM1osRUFBQUksT0FBQUYsRUFBQXlaLEVBQUF6WixHQUFBLEVBRUFmLEtBQUEyakIsY0FBQUMsR0FBQXJaLFVBQUExSixFQUFBRSxJQUlBLE9BQUFmLElBRUEsQ0FFQSxzQkFBQTZqQixDQUFBbFosR0FFQTNLLEtBQUEwakIsWUFFQSxJQUFBLElBQUEzaUIsRUFBQSxFQUFBeVosRUFBQTdQLEVBQUEwUCxNQUFBdFosRUFBQXlaLEVBQUF6WixJQUVBZixLQUFBMmpCLGNBQUFDLEdBQUFsWixvQkFBQUMsRUFBQTVKLElBSUEsT0FBQWYsSUFFQSxDQUVBLGFBQUE4akIsQ0FBQUMsR0FFQS9qQixLQUFBMGpCLFlBRUEsSUFBQSxJQUFBM2lCLEVBQUEsRUFBQXlaLEVBQUF1SixFQUFBOWlCLE9BQUFGLEVBQUF5WixFQUFBelosSUFFQWYsS0FBQTJqQixjQUFBSSxFQUFBaGpCLElBSUEsT0FBQWYsSUFFQSxDQUVBLG9CQUFBZ2tCLENBQUFqWixFQUFBa1osR0FFQSxNQUFBQyxFQUFBTixHQUFBbGMsS0FBQXVjLEdBQUE3YixlQUFBLElBS0EsT0FIQXBJLEtBQUFrQyxJQUFBd0YsS0FBQXFELEdBQUEvQyxJQUFBa2MsR0FDQWxrQixLQUFBbUMsSUFBQXVGLEtBQUFxRCxHQUFBbkQsSUFBQXNjLEdBRUFsa0IsSUFFQSxDQUVBLGFBQUFta0IsQ0FBQUMsRUFBQUMsR0FBQSxHQUlBLE9BRkFya0IsS0FBQTBqQixZQUVBMWpCLEtBQUFza0IsZUFBQUYsRUFBQUMsRUFFQSxDQUVBLEtBQUE1YyxHQUVBLE9BQUEsSUFBQXpILEtBQUE0QyxhQUFBOEUsS0FBQTFILEtBRUEsQ0FFQSxJQUFBMEgsQ0FBQTZjLEdBS0EsT0FIQXZrQixLQUFBa0MsSUFBQXdGLEtBQUE2YyxFQUFBcmlCLEtBQ0FsQyxLQUFBbUMsSUFBQXVGLEtBQUE2YyxFQUFBcGlCLEtBRUFuQyxJQUVBLENBRUEsU0FBQTBqQixHQUtBLE9BSEExakIsS0FBQWtDLElBQUFNLEVBQUF4QyxLQUFBa0MsSUFBQU8sRUFBQXpDLEtBQUFrQyxJQUFBeVYsRUFBQTRMLElBQ0F2akIsS0FBQW1DLElBQUFLLEVBQUF4QyxLQUFBbUMsSUFBQU0sRUFBQXpDLEtBQUFtQyxJQUFBd1YsR0FBQTRMLElBRUF2akIsSUFFQSxDQUVBLE9BQUF3a0IsR0FJQSxPQUFBeGtCLEtBQUFtQyxJQUFBSyxFQUFBeEMsS0FBQWtDLElBQUFNLEdBQUF4QyxLQUFBbUMsSUFBQU0sRUFBQXpDLEtBQUFrQyxJQUFBTyxHQUFBekMsS0FBQW1DLElBQUF3VixFQUFBM1gsS0FBQWtDLElBQUF5VixDQUVBLENBRUEsU0FBQThNLENBQUE3akIsR0FFQSxPQUFBWixLQUFBd2tCLFVBQUE1akIsRUFBQStGLElBQUEsRUFBQSxFQUFBLEdBQUEvRixFQUFBa0gsV0FBQTlILEtBQUFrQyxJQUFBbEMsS0FBQW1DLEtBQUFpRyxlQUFBLEdBRUEsQ0FFQSxPQUFBc2MsQ0FBQTlqQixHQUVBLE9BQUFaLEtBQUF3a0IsVUFBQTVqQixFQUFBK0YsSUFBQSxFQUFBLEVBQUEsR0FBQS9GLEVBQUFzSCxXQUFBbEksS0FBQW1DLElBQUFuQyxLQUFBa0MsSUFFQSxDQUVBLGFBQUF5aEIsQ0FBQWdCLEdBS0EsT0FIQTNrQixLQUFBa0MsSUFBQUEsSUFBQXlpQixHQUNBM2tCLEtBQUFtQyxJQUFBQSxJQUFBd2lCLEdBRUEza0IsSUFFQSxDQUVBLGNBQUE0a0IsQ0FBQUMsR0FLQSxPQUhBN2tCLEtBQUFrQyxJQUFBOEYsSUFBQTZjLEdBQ0E3a0IsS0FBQW1DLElBQUF5RixJQUFBaWQsR0FFQTdrQixJQUVBLENBRUEsY0FBQThrQixDQUFBMWQsR0FLQSxPQUhBcEgsS0FBQWtDLElBQUEyRixXQUFBVCxHQUNBcEgsS0FBQW1DLElBQUEwRixVQUFBVCxHQUVBcEgsSUFFQSxDQUVBLGNBQUFza0IsQ0FBQUYsRUFBQUMsR0FBQSxHQUtBRCxFQUFBVyxtQkFBQSxHQUFBLEdBRUEsTUFBQUMsRUFBQVosRUFBQVksU0FFQSxRQUFBamxCLElBQUFpbEIsRUFBQSxDQUVBLE1BQUFDLEVBQUFELEVBQUFFLGFBQUEsWUFLQSxJQUFBLElBQUFiLFFBQUF0a0IsSUFBQWtsQixJQUFBLElBQUFiLEVBQUFlLGdCQUVBLElBQUEsSUFBQXBrQixFQUFBLEVBQUFDLEVBQUFpa0IsRUFBQTVLLE1BQUF0WixFQUFBQyxFQUFBRCxLQUVBLElBQUFxakIsRUFBQWdCLE9BRUFoQixFQUFBaUIsa0JBQUF0a0IsRUFBQTZpQixJQUlBQSxHQUFBbFosb0JBQUF1YSxFQUFBbGtCLEdBSUE2aUIsR0FBQTVMLGFBQUFvTSxFQUFBM0MsYUFDQXpoQixLQUFBMmpCLGNBQUFDLGNBTUE3akIsSUFBQXFrQixFQUFBa0IsYUFJQSxPQUFBbEIsRUFBQWtCLGFBRUFsQixFQUFBbUIscUJBSUFDLEdBQUE5ZCxLQUFBMGMsRUFBQWtCLGVBT0EsT0FBQU4sRUFBQU0sYUFFQU4sRUFBQU8scUJBSUFDLEdBQUE5ZCxLQUFBc2QsRUFBQU0sY0FJQUUsR0FBQXhOLGFBQUFvTSxFQUFBM0MsYUFFQXpoQixLQUFBeWxCLE1BQUFELEdBSUEsQ0FFQSxNQUFBRSxFQUFBdEIsRUFBQXNCLFNBRUEsSUFBQSxJQUFBM2tCLEVBQUEsRUFBQUMsRUFBQTBrQixFQUFBemtCLE9BQUFGLEVBQUFDLEVBQUFELElBRUFmLEtBQUFza0IsZUFBQW9CLEVBQUEza0IsR0FBQXNqQixHQUlBLE9BQUFya0IsSUFFQSxDQUVBLGFBQUEybEIsQ0FBQWhCLEdBRUEsUUFBQUEsRUFBQW5pQixFQUFBeEMsS0FBQWtDLElBQUFNLEdBQUFtaUIsRUFBQW5pQixFQUFBeEMsS0FBQW1DLElBQUFLLEdBQ0FtaUIsRUFBQWxpQixFQUFBekMsS0FBQWtDLElBQUFPLEdBQUFraUIsRUFBQWxpQixFQUFBekMsS0FBQW1DLElBQUFNLEdBQ0FraUIsRUFBQWhOLEVBQUEzWCxLQUFBa0MsSUFBQXlWLEdBQUFnTixFQUFBaE4sRUFBQTNYLEtBQUFtQyxJQUFBd1YsRUFFQSxDQUVBLFdBQUFpTyxDQUFBckIsR0FFQSxPQUFBdmtCLEtBQUFrQyxJQUFBTSxHQUFBK2hCLEVBQUFyaUIsSUFBQU0sR0FBQStoQixFQUFBcGlCLElBQUFLLEdBQUF4QyxLQUFBbUMsSUFBQUssR0FDQXhDLEtBQUFrQyxJQUFBTyxHQUFBOGhCLEVBQUFyaUIsSUFBQU8sR0FBQThoQixFQUFBcGlCLElBQUFNLEdBQUF6QyxLQUFBbUMsSUFBQU0sR0FDQXpDLEtBQUFrQyxJQUFBeVYsR0FBQTRNLEVBQUFyaUIsSUFBQXlWLEdBQUE0TSxFQUFBcGlCLElBQUF3VixHQUFBM1gsS0FBQW1DLElBQUF3VixDQUVBLENBRUEsWUFBQWtPLENBQUFsQixFQUFBL2pCLEdBS0EsT0FBQUEsRUFBQStGLEtBQ0FnZSxFQUFBbmlCLEVBQUF4QyxLQUFBa0MsSUFBQU0sSUFBQXhDLEtBQUFtQyxJQUFBSyxFQUFBeEMsS0FBQWtDLElBQUFNLElBQ0FtaUIsRUFBQWxpQixFQUFBekMsS0FBQWtDLElBQUFPLElBQUF6QyxLQUFBbUMsSUFBQU0sRUFBQXpDLEtBQUFrQyxJQUFBTyxJQUNBa2lCLEVBQUFoTixFQUFBM1gsS0FBQWtDLElBQUF5VixJQUFBM1gsS0FBQW1DLElBQUF3VixFQUFBM1gsS0FBQWtDLElBQUF5VixHQUdBLENBRUEsYUFBQW1PLENBQUF2QixHQUdBLFFBQUFBLEVBQUFwaUIsSUFBQUssRUFBQXhDLEtBQUFrQyxJQUFBTSxHQUFBK2hCLEVBQUFyaUIsSUFBQU0sRUFBQXhDLEtBQUFtQyxJQUFBSyxHQUNBK2hCLEVBQUFwaUIsSUFBQU0sRUFBQXpDLEtBQUFrQyxJQUFBTyxHQUFBOGhCLEVBQUFyaUIsSUFBQU8sRUFBQXpDLEtBQUFtQyxJQUFBTSxHQUNBOGhCLEVBQUFwaUIsSUFBQXdWLEVBQUEzWCxLQUFBa0MsSUFBQXlWLEdBQUE0TSxFQUFBcmlCLElBQUF5VixFQUFBM1gsS0FBQW1DLElBQUF3VixFQUVBLENBRUEsZ0JBQUFvTyxDQUFBQyxHQU1BLE9BSEFobUIsS0FBQWltQixXQUFBRCxFQUFBamIsT0FBQTZZLElBR0FBLEdBQUEvWixrQkFBQW1jLEVBQUFqYixTQUFBaWIsRUFBQXJELE9BQUFxRCxFQUFBckQsTUFFQSxDQUVBLGVBQUF1RCxDQUFBQyxHQUtBLElBQUFqa0IsRUFBQUMsRUFzQ0EsT0FwQ0Fna0IsRUFBQTVELE9BQUEvZixFQUFBLEdBRUFOLEVBQUFpa0IsRUFBQTVELE9BQUEvZixFQUFBeEMsS0FBQWtDLElBQUFNLEVBQ0FMLEVBQUFna0IsRUFBQTVELE9BQUEvZixFQUFBeEMsS0FBQW1DLElBQUFLLElBSUFOLEVBQUFpa0IsRUFBQTVELE9BQUEvZixFQUFBeEMsS0FBQW1DLElBQUFLLEVBQ0FMLEVBQUFna0IsRUFBQTVELE9BQUEvZixFQUFBeEMsS0FBQWtDLElBQUFNLEdBSUEyakIsRUFBQTVELE9BQUE5ZixFQUFBLEdBRUFQLEdBQUFpa0IsRUFBQTVELE9BQUE5ZixFQUFBekMsS0FBQWtDLElBQUFPLEVBQ0FOLEdBQUFna0IsRUFBQTVELE9BQUE5ZixFQUFBekMsS0FBQW1DLElBQUFNLElBSUFQLEdBQUFpa0IsRUFBQTVELE9BQUE5ZixFQUFBekMsS0FBQW1DLElBQUFNLEVBQ0FOLEdBQUFna0IsRUFBQTVELE9BQUE5ZixFQUFBekMsS0FBQWtDLElBQUFPLEdBSUEwakIsRUFBQTVELE9BQUE1SyxFQUFBLEdBRUF6VixHQUFBaWtCLEVBQUE1RCxPQUFBNUssRUFBQTNYLEtBQUFrQyxJQUFBeVYsRUFDQXhWLEdBQUFna0IsRUFBQTVELE9BQUE1SyxFQUFBM1gsS0FBQW1DLElBQUF3VixJQUlBelYsR0FBQWlrQixFQUFBNUQsT0FBQTVLLEVBQUEzWCxLQUFBbUMsSUFBQXdWLEVBQ0F4VixHQUFBZ2tCLEVBQUE1RCxPQUFBNUssRUFBQTNYLEtBQUFrQyxJQUFBeVYsR0FJQXpWLElBQUFpa0IsRUFBQUMsVUFBQWprQixJQUFBZ2tCLEVBQUFDLFFBRUEsQ0FFQSxrQkFBQUMsQ0FBQUMsR0FFQSxHQUFBdG1CLEtBQUF3a0IsVUFFQSxPQUFBLEVBS0F4a0IsS0FBQXlrQixVQUFBOEIsSUFDQUMsR0FBQXRlLFdBQUFsSSxLQUFBbUMsSUFBQW9rQixJQUdBRSxHQUFBdmUsV0FBQW9lLEVBQUF6Z0IsRUFBQTBnQixJQUNBRyxHQUFBeGUsV0FBQW9lLEVBQUF4Z0IsRUFBQXlnQixJQUNBSSxHQUFBemUsV0FBQW9lLEVBQUF2Z0IsRUFBQXdnQixJQUdBSyxHQUFBMWUsV0FBQXdlLEdBQUFELElBQ0FJLEdBQUEzZSxXQUFBeWUsR0FBQUQsSUFDQUksR0FBQTVlLFdBQUF1ZSxHQUFBRSxJQUtBLElBQUFJLEVBQUEsQ0FDQSxHQUFBSCxHQUFBalAsRUFBQWlQLEdBQUFua0IsRUFBQSxHQUFBb2tCLEdBQUFsUCxFQUFBa1AsR0FBQXBrQixFQUFBLEdBQUFxa0IsR0FBQW5QLEVBQUFtUCxHQUFBcmtCLEVBQ0Fta0IsR0FBQWpQLEVBQUEsR0FBQWlQLEdBQUFwa0IsRUFBQXFrQixHQUFBbFAsRUFBQSxHQUFBa1AsR0FBQXJrQixFQUFBc2tCLEdBQUFuUCxFQUFBLEdBQUFtUCxHQUFBdGtCLEdBQ0Fva0IsR0FBQW5rQixFQUFBbWtCLEdBQUFwa0IsRUFBQSxHQUFBcWtCLEdBQUFwa0IsRUFBQW9rQixHQUFBcmtCLEVBQUEsR0FBQXNrQixHQUFBcmtCLEVBQUFxa0IsR0FBQXRrQixFQUFBLEdBRUEsUUFBQXdrQixHQUFBRCxFQUFBTixHQUFBQyxHQUFBQyxHQUFBSCxNQU9BTyxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEtBQ0FDLEdBQUFELEVBQUFOLEdBQUFDLEdBQUFDLEdBQUFILE1BUUFTLEdBQUF0RixhQUFBaUYsR0FBQUMsSUFDQUUsRUFBQSxDQUFBRSxHQUFBemtCLEVBQUF5a0IsR0FBQXhrQixFQUFBd2tCLEdBQUF0UCxHQUVBcVAsR0FBQUQsRUFBQU4sR0FBQUMsR0FBQUMsR0FBQUgsS0FFQSxDQUVBLFVBQUFQLENBQUF0QixFQUFBL2pCLEdBRUEsT0FBQUEsRUFBQThHLEtBQUFpZCxHQUFBM2lCLE1BQUFoQyxLQUFBa0MsSUFBQWxDLEtBQUFtQyxJQUVBLENBRUEsZUFBQStrQixDQUFBdkMsR0FFQSxPQUFBM2tCLEtBQUFpbUIsV0FBQXRCLEVBQUFmLElBQUFoYSxXQUFBK2EsRUFFQSxDQUVBLGlCQUFBd0MsQ0FBQXZtQixHQWNBLE9BWkFaLEtBQUF3a0IsVUFFQTVqQixFQUFBOGlCLGFBSUExakIsS0FBQXlrQixVQUFBN2pCLEVBQUFtSyxRQUVBbkssRUFBQStoQixPQUFBLEdBQUEzaUIsS0FBQTBrQixRQUFBZCxJQUFBM2lCLFVBSUFMLENBRUEsQ0FFQSxTQUFBd21CLENBQUE3QyxHQVFBLE9BTkF2a0IsS0FBQWtDLElBQUFDLElBQUFvaUIsRUFBQXJpQixLQUNBbEMsS0FBQW1DLElBQUFELElBQUFxaUIsRUFBQXBpQixLQUdBbkMsS0FBQXdrQixXQUFBeGtCLEtBQUEwakIsWUFFQTFqQixJQUVBLENBRUEsS0FBQXlsQixDQUFBbEIsR0FLQSxPQUhBdmtCLEtBQUFrQyxJQUFBQSxJQUFBcWlCLEVBQUFyaUIsS0FDQWxDLEtBQUFtQyxJQUFBQSxJQUFBb2lCLEVBQUFwaUIsS0FFQW5DLElBRUEsQ0FFQSxZQUFBZ1ksQ0FBQXBJLEdBR0EsT0FBQTVQLEtBQUF3a0IsWUFHQTZDLEdBQUEsR0FBQTFnQixJQUFBM0csS0FBQWtDLElBQUFNLEVBQUF4QyxLQUFBa0MsSUFBQU8sRUFBQXpDLEtBQUFrQyxJQUFBeVYsR0FBQUssYUFBQXBJLEdBQ0F5WCxHQUFBLEdBQUExZ0IsSUFBQTNHLEtBQUFrQyxJQUFBTSxFQUFBeEMsS0FBQWtDLElBQUFPLEVBQUF6QyxLQUFBbUMsSUFBQXdWLEdBQUFLLGFBQUFwSSxHQUNBeVgsR0FBQSxHQUFBMWdCLElBQUEzRyxLQUFBa0MsSUFBQU0sRUFBQXhDLEtBQUFtQyxJQUFBTSxFQUFBekMsS0FBQWtDLElBQUF5VixHQUFBSyxhQUFBcEksR0FDQXlYLEdBQUEsR0FBQTFnQixJQUFBM0csS0FBQWtDLElBQUFNLEVBQUF4QyxLQUFBbUMsSUFBQU0sRUFBQXpDLEtBQUFtQyxJQUFBd1YsR0FBQUssYUFBQXBJLEdBQ0F5WCxHQUFBLEdBQUExZ0IsSUFBQTNHLEtBQUFtQyxJQUFBSyxFQUFBeEMsS0FBQWtDLElBQUFPLEVBQUF6QyxLQUFBa0MsSUFBQXlWLEdBQUFLLGFBQUFwSSxHQUNBeVgsR0FBQSxHQUFBMWdCLElBQUEzRyxLQUFBbUMsSUFBQUssRUFBQXhDLEtBQUFrQyxJQUFBTyxFQUFBekMsS0FBQW1DLElBQUF3VixHQUFBSyxhQUFBcEksR0FDQXlYLEdBQUEsR0FBQTFnQixJQUFBM0csS0FBQW1DLElBQUFLLEVBQUF4QyxLQUFBbUMsSUFBQU0sRUFBQXpDLEtBQUFrQyxJQUFBeVYsR0FBQUssYUFBQXBJLEdBQ0F5WCxHQUFBLEdBQUExZ0IsSUFBQTNHLEtBQUFtQyxJQUFBSyxFQUFBeEMsS0FBQW1DLElBQUFNLEVBQUF6QyxLQUFBbUMsSUFBQXdWLEdBQUFLLGFBQUFwSSxHQUVBNVAsS0FBQThqQixjQUFBdUQsS0FaQXJuQixJQWdCQSxDQUVBLFNBQUEwUCxDQUFBbEYsR0FLQSxPQUhBeEssS0FBQWtDLElBQUEwRixJQUFBNEMsR0FDQXhLLEtBQUFtQyxJQUFBeUYsSUFBQTRDLEdBRUF4SyxJQUVBLENBRUEsTUFBQXNLLENBQUFpYSxHQUVBLE9BQUFBLEVBQUFyaUIsSUFBQW9JLE9BQUF0SyxLQUFBa0MsTUFBQXFpQixFQUFBcGlCLElBQUFtSSxPQUFBdEssS0FBQW1DLElBRUEsRUFJQSxNQUFBa2xCLEdBQUEsQ0FDQSxJQUFBbEgsR0FDQSxJQUFBQSxHQUNBLElBQUFBLEdBQ0EsSUFBQUEsR0FDQSxJQUFBQSxHQUNBLElBQUFBLEdBQ0EsSUFBQUEsR0FDQSxJQUFBQSxJQUdBeUQsR0FBQSxJQUFBekQsR0FFQXFGLEdBQUEsSUFBQWxDLEdBSUFtRCxHQUFBLElBQUF0RyxHQUNBdUcsR0FBQSxJQUFBdkcsR0FDQXdHLEdBQUEsSUFBQXhHLEdBSUF5RyxHQUFBLElBQUF6RyxHQUNBMEcsR0FBQSxJQUFBMUcsR0FDQTJHLEdBQUEsSUFBQTNHLEdBRUFvRyxHQUFBLElBQUFwRyxHQUNBcUcsR0FBQSxJQUFBckcsR0FDQThHLEdBQUEsSUFBQTlHLEdBQ0FtSCxHQUFBLElBQUFuSCxHQUVBLFNBQUE2RyxHQUFBRCxFQUFBUSxFQUFBbmQsRUFBQUMsRUFBQW1kLEdBRUEsSUFBQSxJQUFBem1CLEVBQUEsRUFBQTBtQixFQUFBVixFQUFBOWxCLE9BQUEsRUFBQUYsR0FBQTBtQixFQUFBMW1CLEdBQUEsRUFBQSxDQUVBdW1CLEdBQUEvYyxVQUFBd2MsRUFBQWhtQixHQUVBLE1BQUE2TixFQUFBNFksRUFBQWhsQixFQUFBbEIsS0FBQTZDLElBQUFtakIsR0FBQTlrQixHQUFBZ2xCLEVBQUEva0IsRUFBQW5CLEtBQUE2QyxJQUFBbWpCLEdBQUE3a0IsR0FBQStrQixFQUFBN1AsRUFBQXJXLEtBQUE2QyxJQUFBbWpCLEdBQUEzUCxHQUVBK1AsRUFBQUgsRUFBQXRlLElBQUFxZSxJQUNBSyxFQUFBdmQsRUFBQW5CLElBQUFxZSxJQUNBTSxFQUFBdmQsRUFBQXBCLElBQUFxZSxJQUVBLEdBQUFobUIsS0FBQWEsS0FBQWIsS0FBQWEsSUFBQXVsQixFQUFBQyxFQUFBQyxHQUFBdG1CLEtBQUFZLElBQUF3bEIsRUFBQUMsRUFBQUMsSUFBQWhaLEVBSUEsT0FBQSxDQUlBLENBRUEsT0FBQSxDQUVBLENDaGhCQSxNQUFBaVosR0FBQSxJQUFBdkUsR0FDQXdFLEdBQUEsSUFBQTNILEdBQ0E0SCxHQUFBLElBQUE1SCxHQUVBLE1BQUE2SCxHQUVBLFdBQUFwbEIsQ0FBQW1JLEVBQUEsSUFBQW9WLEdBQUF3QyxHQUFBLEdBRUEzaUIsS0FBQWlvQixVQUFBLEVBRUFqb0IsS0FBQStLLE9BQUFBLEVBQ0EvSyxLQUFBMmlCLE9BQUFBLENBRUEsQ0FFQSxHQUFBaGMsQ0FBQW9FLEVBQUE0WCxHQUtBLE9BSEEzaUIsS0FBQStLLE9BQUFyRCxLQUFBcUQsR0FDQS9LLEtBQUEyaUIsT0FBQUEsRUFFQTNpQixJQUVBLENBRUEsYUFBQThqQixDQUFBQyxFQUFBbUUsR0FFQSxNQUFBbmQsRUFBQS9LLEtBQUErSyxZQUVBaEwsSUFBQW1vQixFQUVBbmQsRUFBQXJELEtBQUF3Z0IsR0FJQUwsR0FBQS9ELGNBQUFDLEdBQUFVLFVBQUExWixHQUlBLElBQUFvZCxFQUFBLEVBRUEsSUFBQSxJQUFBcG5CLEVBQUEsRUFBQXlaLEVBQUF1SixFQUFBOWlCLE9BQUFGLEVBQUF5WixFQUFBelosSUFFQW9uQixFQUFBN21CLEtBQUFhLElBQUFnbUIsRUFBQXBkLEVBQUFsQixrQkFBQWthLEVBQUFoakIsS0FNQSxPQUZBZixLQUFBMmlCLE9BQUFyaEIsS0FBQThILEtBQUErZSxHQUVBbm9CLElBRUEsQ0FFQSxJQUFBMEgsQ0FBQXNlLEdBS0EsT0FIQWhtQixLQUFBK0ssT0FBQXJELEtBQUFzZSxFQUFBamIsUUFDQS9LLEtBQUEyaUIsT0FBQXFELEVBQUFyRCxPQUVBM2lCLElBRUEsQ0FFQSxPQUFBd2tCLEdBRUEsT0FBQXhrQixLQUFBMmlCLE9BQUEsQ0FFQSxDQUVBLFNBQUFlLEdBS0EsT0FIQTFqQixLQUFBK0ssT0FBQXBFLElBQUEsRUFBQSxFQUFBLEdBQ0EzRyxLQUFBMmlCLFFBQUEsRUFFQTNpQixJQUVBLENBRUEsYUFBQTJsQixDQUFBaEIsR0FFQSxPQUFBQSxFQUFBOWEsa0JBQUE3SixLQUFBK0ssU0FBQS9LLEtBQUEyaUIsT0FBQTNpQixLQUFBMmlCLE1BRUEsQ0FFQSxlQUFBdUUsQ0FBQXZDLEdBRUEsT0FBQUEsRUFBQS9hLFdBQUE1SixLQUFBK0ssUUFBQS9LLEtBQUEyaUIsTUFFQSxDQUVBLGdCQUFBb0QsQ0FBQUMsR0FFQSxNQUFBb0MsRUFBQXBvQixLQUFBMmlCLE9BQUFxRCxFQUFBckQsT0FFQSxPQUFBcUQsRUFBQWpiLE9BQUFsQixrQkFBQTdKLEtBQUErSyxTQUFBcWQsRUFBQUEsQ0FFQSxDQUVBLGFBQUF0QyxDQUFBdkIsR0FFQSxPQUFBQSxFQUFBd0IsaUJBQUEvbEIsS0FFQSxDQUVBLGVBQUFrbUIsQ0FBQUMsR0FFQSxPQUFBN2tCLEtBQUE2QyxJQUFBZ2lCLEVBQUFlLGdCQUFBbG5CLEtBQUErSyxVQUFBL0ssS0FBQTJpQixNQUVBLENBRUEsVUFBQXNELENBQUF0QixFQUFBL2pCLEdBRUEsTUFBQXluQixFQUFBcm9CLEtBQUErSyxPQUFBbEIsa0JBQUE4YSxHQVdBLE9BVEEvakIsRUFBQThHLEtBQUFpZCxHQUVBMEQsRUFBQXJvQixLQUFBMmlCLE9BQUEzaUIsS0FBQTJpQixTQUVBL2hCLEVBQUFvSCxJQUFBaEksS0FBQStLLFFBQUExSCxZQUNBekMsRUFBQXdILGVBQUFwSSxLQUFBMmlCLFFBQUEvYSxJQUFBNUgsS0FBQStLLFNBSUFuSyxDQUVBLENBRUEsY0FBQTBuQixDQUFBMW5CLEdBRUEsT0FBQVosS0FBQXdrQixXQUdBNWpCLEVBQUE4aUIsWUFDQTlpQixJQUlBQSxFQUFBK0YsSUFBQTNHLEtBQUErSyxPQUFBL0ssS0FBQStLLFFBQ0FuSyxFQUFBa2tCLGVBQUE5a0IsS0FBQTJpQixRQUVBL2hCLEVBRUEsQ0FFQSxZQUFBb1gsQ0FBQXBJLEdBS0EsT0FIQTVQLEtBQUErSyxPQUFBaU4sYUFBQXBJLEdBQ0E1UCxLQUFBMmlCLE9BQUEzaUIsS0FBQTJpQixPQUFBL1MsRUFBQTJZLG9CQUVBdm9CLElBRUEsQ0FFQSxTQUFBMFAsQ0FBQWxGLEdBSUEsT0FGQXhLLEtBQUErSyxPQUFBbkQsSUFBQTRDLEdBRUF4SyxJQUVBLENBRUEsYUFBQTJqQixDQUFBZ0IsR0FFQSxHQUFBM2tCLEtBQUF3a0IsVUFNQSxPQUpBeGtCLEtBQUErSyxPQUFBckQsS0FBQWlkLEdBRUEza0IsS0FBQTJpQixPQUFBLEVBRUEzaUIsS0FJQThuQixHQUFBNWYsV0FBQXljLEVBQUEza0IsS0FBQStLLFFBRUEsTUFBQTVCLEVBQUEyZSxHQUFBM2UsV0FFQSxHQUFBQSxFQUFBbkosS0FBQTJpQixPQUFBM2lCLEtBQUEyaUIsT0FBQSxDQUlBLE1BQUExaEIsRUFBQUssS0FBQThILEtBQUFELEdBRUFxZixFQUFBLElBQUF2bkIsRUFBQWpCLEtBQUEyaUIsUUFFQTNpQixLQUFBK0ssT0FBQWhELGdCQUFBK2YsR0FBQVUsRUFBQXZuQixHQUVBakIsS0FBQTJpQixRQUFBNkYsQ0FFQSxDQUVBLE9BQUF4b0IsSUFFQSxDQUVBLEtBQUF5bEIsQ0FBQU8sR0FFQSxPQUFBQSxFQUFBeEIsVUFFQXhrQixLQUlBQSxLQUFBd2tCLFdBRUF4a0IsS0FBQTBILEtBQUFzZSxHQUVBaG1CLFFBSUEsSUFBQUEsS0FBQStLLE9BQUFULE9BQUEwYixFQUFBamIsUUFFQS9LLEtBQUEyaUIsT0FBQXJoQixLQUFBYSxJQUFBbkMsS0FBQTJpQixPQUFBcUQsRUFBQXJELFNBSUFvRixHQUFBN2YsV0FBQThkLEVBQUFqYixPQUFBL0ssS0FBQStLLFFBQUFkLFVBQUErYixFQUFBckQsUUFFQTNpQixLQUFBMmpCLGNBQUFtRSxHQUFBcGdCLEtBQUFzZSxFQUFBamIsUUFBQW5ELElBQUFtZ0IsS0FFQS9uQixLQUFBMmpCLGNBQUFtRSxHQUFBcGdCLEtBQUFzZSxFQUFBamIsUUFBQS9DLElBQUErZixNQUlBL25CLEtBRUEsQ0FFQSxNQUFBc0ssQ0FBQTBiLEdBRUEsT0FBQUEsRUFBQWpiLE9BQUFULE9BQUF0SyxLQUFBK0ssU0FBQWliLEVBQUFyRCxTQUFBM2lCLEtBQUEyaUIsTUFFQSxDQUVBLEtBQUFsYixHQUVBLE9BQUEsSUFBQXpILEtBQUE0QyxhQUFBOEUsS0FBQTFILEtBRUEsRUM5T0EsTUFBQXlvQixHQUFBLElBQUF0SSxHQUNBdUksR0FBQSxJQUFBdkksR0FDQXdJLEdBQUEsSUFBQXhJLEdBQ0F5SSxHQUFBLElBQUF6SSxHQUVBMEksR0FBQSxJQUFBMUksR0FDQTJJLEdBQUEsSUFBQTNJLEdBQ0E0SSxHQUFBLElBQUE1SSxHQUVBLE1BQUE2SSxHQUVBLFdBQUFwbUIsQ0FBQXFtQixFQUFBLElBQUE5SSxHQUFBK0ksRUFBQSxJQUFBL0ksR0FBQSxFQUFBLEdBQUEsSUFFQW5nQixLQUFBaXBCLE9BQUFBLEVBQ0FqcEIsS0FBQWtwQixVQUFBQSxDQUVBLENBRUEsR0FBQXZpQixDQUFBc2lCLEVBQUFDLEdBS0EsT0FIQWxwQixLQUFBaXBCLE9BQUF2aEIsS0FBQXVoQixHQUNBanBCLEtBQUFrcEIsVUFBQXhoQixLQUFBd2hCLEdBRUFscEIsSUFFQSxDQUVBLElBQUEwSCxDQUFBeWhCLEdBS0EsT0FIQW5wQixLQUFBaXBCLE9BQUF2aEIsS0FBQXloQixFQUFBRixRQUNBanBCLEtBQUFrcEIsVUFBQXhoQixLQUFBeWhCLEVBQUFELFdBRUFscEIsSUFFQSxDQUVBLEVBQUFvcEIsQ0FBQTFtQixFQUFBOUIsR0FFQSxPQUFBQSxFQUFBOEcsS0FBQTFILEtBQUFpcEIsUUFBQWxoQixnQkFBQS9ILEtBQUFrcEIsVUFBQXhtQixFQUVBLENBRUEsTUFBQTJtQixDQUFBMWhCLEdBSUEsT0FGQTNILEtBQUFrcEIsVUFBQXhoQixLQUFBQyxHQUFBSyxJQUFBaEksS0FBQWlwQixRQUFBNWxCLFlBRUFyRCxJQUVBLENBRUEsTUFBQXNwQixDQUFBNW1CLEdBSUEsT0FGQTFDLEtBQUFpcEIsT0FBQXZoQixLQUFBMUgsS0FBQW9wQixHQUFBMW1CLEVBQUErbEIsS0FFQXpvQixJQUVBLENBRUEsbUJBQUF1cEIsQ0FBQTVFLEVBQUEvakIsR0FFQUEsRUFBQXNILFdBQUF5YyxFQUFBM2tCLEtBQUFpcEIsUUFFQSxNQUFBTyxFQUFBNW9CLEVBQUFxSSxJQUFBakosS0FBQWtwQixXQUVBLE9BQUFNLEVBQUEsRUFFQTVvQixFQUFBOEcsS0FBQTFILEtBQUFpcEIsUUFJQXJvQixFQUFBOEcsS0FBQTFILEtBQUFpcEIsUUFBQWxoQixnQkFBQS9ILEtBQUFrcEIsVUFBQU0sRUFFQSxDQUVBLGVBQUF0QyxDQUFBdkMsR0FFQSxPQUFBcmpCLEtBQUE4SCxLQUFBcEosS0FBQXlwQixrQkFBQTlFLEdBRUEsQ0FFQSxpQkFBQThFLENBQUE5RSxHQUVBLE1BQUE2RSxFQUFBZixHQUFBdmdCLFdBQUF5YyxFQUFBM2tCLEtBQUFpcEIsUUFBQWhnQixJQUFBakosS0FBQWtwQixXQUlBLE9BQUFNLEVBQUEsRUFFQXhwQixLQUFBaXBCLE9BQUFwZixrQkFBQThhLElBSUE4RCxHQUFBL2dCLEtBQUExSCxLQUFBaXBCLFFBQUFsaEIsZ0JBQUEvSCxLQUFBa3BCLFVBQUFNLEdBRUFmLEdBQUE1ZSxrQkFBQThhLEdBRUEsQ0FFQSxtQkFBQStFLENBQUFuQyxFQUFBbmQsRUFBQXVmLEVBQUFDLEdBU0FsQixHQUFBaGhCLEtBQUE2ZixHQUFBM2YsSUFBQXdDLEdBQUFoQyxlQUFBLElBQ0F1Z0IsR0FBQWpoQixLQUFBMEMsR0FBQXBDLElBQUF1ZixHQUFBbGtCLFlBQ0F1bEIsR0FBQWxoQixLQUFBMUgsS0FBQWlwQixRQUFBamhCLElBQUEwZ0IsSUFFQSxNQUFBbUIsRUFBQSxHQUFBdEMsRUFBQTNkLFdBQUFRLEdBQ0EwZixHQUFBOXBCLEtBQUFrcEIsVUFBQWpnQixJQUFBMGYsSUFDQW9CLEVBQUFuQixHQUFBM2YsSUFBQWpKLEtBQUFrcEIsV0FDQXZsQixHQUFBaWxCLEdBQUEzZixJQUFBMGYsSUFDQTVpQixFQUFBNmlCLEdBQUF6ZixXQUNBa0YsRUFBQS9NLEtBQUE2QyxJQUFBLEVBQUEybEIsRUFBQUEsR0FDQSxJQUFBRSxFQUFBbk0sRUFBQW9NLEVBQUFDLEVBRUEsR0FBQTdiLEVBQUEsRUFRQSxHQUpBMmIsRUFBQUYsRUFBQW5tQixFQUFBb21CLEVBQ0FsTSxFQUFBaU0sRUFBQUMsRUFBQXBtQixFQUNBdW1CLEVBQUFMLEVBQUF4YixFQUVBMmIsR0FBQSxFQUVBLEdBQUFuTSxJQUFBcU0sRUFFQSxHQUFBck0sR0FBQXFNLEVBQUEsQ0FLQSxNQUFBQyxFQUFBLEVBQUE5YixFQUNBMmIsR0FBQUcsRUFDQXRNLEdBQUFzTSxFQUNBRixFQUFBRCxHQUFBQSxFQUFBRixFQUFBak0sRUFBQSxFQUFBa00sR0FBQWxNLEdBQUFpTSxFQUFBRSxFQUFBbk0sRUFBQSxFQUFBbGEsR0FBQW9DLENBRUEsTUFJQThYLEVBQUFnTSxFQUNBRyxFQUFBMW9CLEtBQUFhLElBQUEsSUFBQTJuQixFQUFBak0sRUFBQWtNLElBQ0FFLEdBQUFELEVBQUFBLEVBQUFuTSxHQUFBQSxFQUFBLEVBQUFsYSxHQUFBb0MsT0FRQThYLEdBQUFnTSxFQUNBRyxFQUFBMW9CLEtBQUFhLElBQUEsSUFBQTJuQixFQUFBak0sRUFBQWtNLElBQ0FFLEdBQUFELEVBQUFBLEVBQUFuTSxHQUFBQSxFQUFBLEVBQUFsYSxHQUFBb0MsT0FNQThYLElBQUFxTSxHQUlBRixFQUFBMW9CLEtBQUFhLElBQUEsS0FBQTJuQixFQUFBRCxFQUFBRSxJQUNBbE0sRUFBQW1NLEVBQUEsR0FBQUgsRUFBQXZvQixLQUFBWSxJQUFBWixLQUFBYSxLQUFBMG5CLEdBQUFsbUIsR0FBQWttQixHQUNBSSxHQUFBRCxFQUFBQSxFQUFBbk0sR0FBQUEsRUFBQSxFQUFBbGEsR0FBQW9DLEdBRUE4WCxHQUFBcU0sR0FJQUYsRUFBQSxFQUNBbk0sRUFBQXZjLEtBQUFZLElBQUFaLEtBQUFhLEtBQUEwbkIsR0FBQWxtQixHQUFBa21CLEdBQ0FJLEVBQUFwTSxHQUFBQSxFQUFBLEVBQUFsYSxHQUFBb0MsSUFNQWlrQixFQUFBMW9CLEtBQUFhLElBQUEsSUFBQTJuQixFQUFBRCxFQUFBRSxJQUNBbE0sRUFBQW1NLEVBQUEsRUFBQUgsRUFBQXZvQixLQUFBWSxJQUFBWixLQUFBYSxLQUFBMG5CLEdBQUFsbUIsR0FBQWttQixHQUNBSSxHQUFBRCxFQUFBQSxFQUFBbk0sR0FBQUEsRUFBQSxFQUFBbGEsR0FBQW9DLFFBVUE4WCxFQUFBaU0sRUFBQSxHQUFBRCxFQUFBQSxFQUNBRyxFQUFBMW9CLEtBQUFhLElBQUEsSUFBQTJuQixFQUFBak0sRUFBQWtNLElBQ0FFLEdBQUFELEVBQUFBLEVBQUFuTSxHQUFBQSxFQUFBLEVBQUFsYSxHQUFBb0MsRUFnQkEsT0FaQTRqQixHQUVBQSxFQUFBamlCLEtBQUExSCxLQUFBaXBCLFFBQUFsaEIsZ0JBQUEvSCxLQUFBa3BCLFVBQUFjLEdBSUFKLEdBRUFBLEVBQUFsaUIsS0FBQWdoQixJQUFBM2dCLGdCQUFBNGdCLEdBQUE5SyxHQUlBb00sQ0FFQSxDQUVBLGVBQUFHLENBQUFwRSxFQUFBcGxCLEdBRUE2bkIsR0FBQXZnQixXQUFBOGQsRUFBQWpiLE9BQUEvSyxLQUFBaXBCLFFBQ0EsTUFBQW9CLEVBQUE1QixHQUFBeGYsSUFBQWpKLEtBQUFrcEIsV0FDQXJuQixFQUFBNG1CLEdBQUF4ZixJQUFBd2YsSUFBQTRCLEVBQUFBLEVBQ0FDLEVBQUF0RSxFQUFBckQsT0FBQXFELEVBQUFyRCxPQUVBLEdBQUE5Z0IsRUFBQXlvQixFQUFBLE9BQUEsS0FFQSxNQUFBQyxFQUFBanBCLEtBQUE4SCxLQUFBa2hCLEVBQUF6b0IsR0FHQTJvQixFQUFBSCxFQUFBRSxFQUdBRSxFQUFBSixFQUFBRSxFQUdBLE9BQUFFLEVBQUEsRUFBQSxLQUtBRCxFQUFBLEVBQUF4cUIsS0FBQW9wQixHQUFBcUIsRUFBQTdwQixHQUdBWixLQUFBb3BCLEdBQUFvQixFQUFBNXBCLEVBRUEsQ0FFQSxnQkFBQW1sQixDQUFBQyxHQUVBLE9BQUFobUIsS0FBQXlwQixrQkFBQXpELEVBQUFqYixTQUFBaWIsRUFBQXJELE9BQUFxRCxFQUFBckQsTUFFQSxDQUVBLGVBQUErSCxDQUFBdkUsR0FFQSxNQUFBMWMsRUFBQTBjLEVBQUE1RCxPQUFBdFosSUFBQWpKLEtBQUFrcEIsV0FFQSxHQUFBLElBQUF6ZixFQUdBLE9BQUEsSUFBQTBjLEVBQUFlLGdCQUFBbG5CLEtBQUFpcEIsUUFFQSxFQU1BLEtBSUEsTUFBQXZtQixJQUFBMUMsS0FBQWlwQixPQUFBaGdCLElBQUFrZCxFQUFBNUQsUUFBQTRELEVBQUFDLFVBQUEzYyxFQUlBLE9BQUEvRyxHQUFBLEVBQUFBLEVBQUEsSUFFQSxDQUVBLGNBQUFpb0IsQ0FBQXhFLEVBQUF2bEIsR0FFQSxNQUFBOEIsRUFBQTFDLEtBQUEwcUIsZ0JBQUF2RSxHQUVBLE9BQUEsT0FBQXpqQixFQUVBLEtBSUExQyxLQUFBb3BCLEdBQUExbUIsRUFBQTlCLEVBRUEsQ0FFQSxlQUFBc2xCLENBQUFDLEdBSUEsTUFBQXlFLEVBQUF6RSxFQUFBZSxnQkFBQWxuQixLQUFBaXBCLFFBRUEsR0FBQSxJQUFBMkIsRUFFQSxPQUFBLEVBTUEsT0FGQXpFLEVBQUE1RCxPQUFBdFosSUFBQWpKLEtBQUFrcEIsV0FFQTBCLEVBQUEsQ0FVQSxDQUVBLFlBQUFDLENBQUF0RyxFQUFBM2pCLEdBRUEsSUFBQWtxQixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUVBLE1BQUFDLEVBQUEsRUFBQXByQixLQUFBa3BCLFVBQUExbUIsRUFDQTZvQixFQUFBLEVBQUFyckIsS0FBQWtwQixVQUFBem1CLEVBQ0E2b0IsRUFBQSxFQUFBdHJCLEtBQUFrcEIsVUFBQXZSLEVBRUFzUixFQUFBanBCLEtBQUFpcEIsT0EwQkEsT0F4QkFtQyxHQUFBLEdBRUFOLEdBQUF2RyxFQUFBcmlCLElBQUFNLEVBQUF5bUIsRUFBQXptQixHQUFBNG9CLEVBQ0FMLEdBQUF4RyxFQUFBcGlCLElBQUFLLEVBQUF5bUIsRUFBQXptQixHQUFBNG9CLElBSUFOLEdBQUF2RyxFQUFBcGlCLElBQUFLLEVBQUF5bUIsRUFBQXptQixHQUFBNG9CLEVBQ0FMLEdBQUF4RyxFQUFBcmlCLElBQUFNLEVBQUF5bUIsRUFBQXptQixHQUFBNG9CLEdBSUFDLEdBQUEsR0FFQUwsR0FBQXpHLEVBQUFyaUIsSUFBQU8sRUFBQXdtQixFQUFBeG1CLEdBQUE0b0IsRUFDQUosR0FBQTFHLEVBQUFwaUIsSUFBQU0sRUFBQXdtQixFQUFBeG1CLEdBQUE0b0IsSUFJQUwsR0FBQXpHLEVBQUFwaUIsSUFBQU0sRUFBQXdtQixFQUFBeG1CLEdBQUE0b0IsRUFDQUosR0FBQTFHLEVBQUFyaUIsSUFBQU8sRUFBQXdtQixFQUFBeG1CLEdBQUE0b0IsR0FJQVAsRUFBQUcsR0FBQUQsRUFBQUQsRUFBQSxPQUVBQyxFQUFBRixHQUFBUyxNQUFBVCxNQUFBQSxFQUFBRSxJQUVBQyxFQUFBRixHQUFBUSxNQUFBUixNQUFBQSxFQUFBRSxHQUVBSyxHQUFBLEdBRUFKLEdBQUEzRyxFQUFBcmlCLElBQUF5VixFQUFBc1IsRUFBQXRSLEdBQUEyVCxFQUNBSCxHQUFBNUcsRUFBQXBpQixJQUFBd1YsRUFBQXNSLEVBQUF0UixHQUFBMlQsSUFJQUosR0FBQTNHLEVBQUFwaUIsSUFBQXdWLEVBQUFzUixFQUFBdFIsR0FBQTJULEVBQ0FILEdBQUE1RyxFQUFBcmlCLElBQUF5VixFQUFBc1IsRUFBQXRSLEdBQUEyVCxHQUlBUixFQUFBSyxHQUFBRCxFQUFBSCxFQUFBLE9BRUFHLEVBQUFKLEdBQUFBLEdBQUFBLEtBQUFBLEVBQUFJLElBRUFDLEVBQUFKLEdBQUFBLEdBQUFBLEtBQUFBLEVBQUFJLEdBSUFKLEVBQUEsRUFBQSxLQUVBL3FCLEtBQUFvcEIsR0FBQTBCLEdBQUEsRUFBQUEsRUFBQUMsRUFBQW5xQixJQUVBLENBRUEsYUFBQWtsQixDQUFBdkIsR0FFQSxPQUFBLE9BQUF2a0IsS0FBQTZxQixhQUFBdEcsRUFBQWtFLEdBRUEsQ0FFQSxpQkFBQStDLENBQUEzbEIsRUFBQUMsRUFBQUMsRUFBQTBsQixFQUFBN3FCLEdBTUFpb0IsR0FBQTNnQixXQUFBcEMsRUFBQUQsR0FDQWlqQixHQUFBNWdCLFdBQUFuQyxFQUFBRixHQUNBa2pCLEdBQUFwSCxhQUFBa0gsR0FBQUMsSUFPQSxJQUNBNEMsRUFEQUMsRUFBQTNyQixLQUFBa3BCLFVBQUFqZ0IsSUFBQThmLElBR0EsR0FBQTRDLEVBQUEsRUFBQSxDQUVBLEdBQUFGLEVBQUEsT0FBQSxLQUNBQyxFQUFBLENBRUEsS0FBQSxNQUFBQyxFQUFBLEdBT0EsT0FBQSxLQUxBRCxHQUFBLEVBQ0FDLEdBQUFBLENBTUEsQ0FFQS9DLEdBQUExZ0IsV0FBQWxJLEtBQUFpcEIsT0FBQXBqQixHQUNBLE1BQUErbEIsRUFBQUYsRUFBQTFyQixLQUFBa3BCLFVBQUFqZ0IsSUFBQTZmLEdBQUFuSCxhQUFBaUgsR0FBQUUsS0FHQSxHQUFBOEMsRUFBQSxFQUVBLE9BQUEsS0FJQSxNQUFBQyxFQUFBSCxFQUFBMXJCLEtBQUFrcEIsVUFBQWpnQixJQUFBNGYsR0FBQTNmLE1BQUEwZixLQUdBLEdBQUFpRCxFQUFBLEVBRUEsT0FBQSxLQUtBLEdBQUFELEVBQUFDLEVBQUFGLEVBRUEsT0FBQSxLQUtBLE1BQUFHLEdBQUFKLEVBQUE5QyxHQUFBM2YsSUFBQThmLElBR0EsT0FBQStDLEVBQUEsRUFFQSxLQUtBOXJCLEtBQUFvcEIsR0FBQTBDLEVBQUFILEVBQUEvcUIsRUFFQSxDQUVBLFlBQUFvWCxDQUFBdEosR0FLQSxPQUhBMU8sS0FBQWlwQixPQUFBalIsYUFBQXRKLEdBQ0ExTyxLQUFBa3BCLFVBQUF4SCxtQkFBQWhULEdBRUExTyxJQUVBLENBRUEsTUFBQXNLLENBQUE2ZSxHQUVBLE9BQUFBLEVBQUFGLE9BQUEzZSxPQUFBdEssS0FBQWlwQixTQUFBRSxFQUFBRCxVQUFBNWUsT0FBQXRLLEtBQUFrcEIsVUFFQSxDQUVBLEtBQUF6aEIsR0FFQSxPQUFBLElBQUF6SCxLQUFBNEMsYUFBQThFLEtBQUExSCxLQUVBLEVDcmVBLE1BQUErckIsR0FFQSxXQUFBbnBCLENBQUF1SSxFQUFBQyxFQUFBQyxFQUFBMmdCLEVBQUExZ0IsRUFBQUMsRUFBQUMsRUFBQXlnQixFQUFBeGdCLEVBQUFDLEVBQUFDLEVBQUF1Z0IsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQVAsR0FBQWhsQixVQUFBd2xCLFdBQUEsRUFFQXZzQixLQUFBeUksU0FBQSxDQUVBLEVBQUEsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLFFBSUExSSxJQUFBb0wsR0FFQW5MLEtBQUEyRyxJQUFBd0UsRUFBQUMsRUFBQUMsRUFBQTJnQixFQUFBMWdCLEVBQUFDLEVBQUFDLEVBQUF5Z0IsRUFBQXhnQixFQUFBQyxFQUFBQyxFQUFBdWdCLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBSUEsQ0FFQSxHQUFBM2xCLENBQUF3RSxFQUFBQyxFQUFBQyxFQUFBMmdCLEVBQUExZ0IsRUFBQUMsRUFBQUMsRUFBQXlnQixFQUFBeGdCLEVBQUFDLEVBQUFDLEVBQUF1Z0IsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQSxNQUFBemdCLEVBQUE3TCxLQUFBeUksU0FPQSxPQUxBb0QsRUFBQSxHQUFBVixFQUFBVSxFQUFBLEdBQUFULEVBQUFTLEVBQUEsR0FBQVIsRUFBQVEsRUFBQSxJQUFBbWdCLEVBQ0FuZ0IsRUFBQSxHQUFBUCxFQUFBTyxFQUFBLEdBQUFOLEVBQUFNLEVBQUEsR0FBQUwsRUFBQUssRUFBQSxJQUFBb2dCLEVBQ0FwZ0IsRUFBQSxHQUFBSixFQUFBSSxFQUFBLEdBQUFILEVBQUFHLEVBQUEsSUFBQUYsRUFBQUUsRUFBQSxJQUFBcWdCLEVBQ0FyZ0IsRUFBQSxHQUFBc2dCLEVBQUF0Z0IsRUFBQSxHQUFBdWdCLEVBQUF2Z0IsRUFBQSxJQUFBd2dCLEVBQUF4Z0IsRUFBQSxJQUFBeWdCLEVBRUF0c0IsSUFFQSxDQUVBLFFBQUE4TCxHQVdBLE9BVEE5TCxLQUFBMkcsSUFFQSxFQUFBLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxHQUlBM0csSUFFQSxDQUVBLEtBQUF5SCxHQUVBLE9BQUEsSUFBQXNrQixJQUFBeGhCLFVBQUF2SyxLQUFBeUksU0FFQSxDQUVBLElBQUFmLENBQUFwRixHQUVBLE1BQUF1SixFQUFBN0wsS0FBQXlJLFNBQ0FzRCxFQUFBekosRUFBQW1HLFNBT0EsT0FMQW9ELEVBQUEsR0FBQUUsRUFBQSxHQUFBRixFQUFBLEdBQUFFLEVBQUEsR0FBQUYsRUFBQSxHQUFBRSxFQUFBLEdBQUFGLEVBQUEsR0FBQUUsRUFBQSxHQUNBRixFQUFBLEdBQUFFLEVBQUEsR0FBQUYsRUFBQSxHQUFBRSxFQUFBLEdBQUFGLEVBQUEsR0FBQUUsRUFBQSxHQUFBRixFQUFBLEdBQUFFLEVBQUEsR0FDQUYsRUFBQSxHQUFBRSxFQUFBLEdBQUFGLEVBQUEsR0FBQUUsRUFBQSxHQUFBRixFQUFBLElBQUFFLEVBQUEsSUFBQUYsRUFBQSxJQUFBRSxFQUFBLElBQ0FGLEVBQUEsSUFBQUUsRUFBQSxJQUFBRixFQUFBLElBQUFFLEVBQUEsSUFBQUYsRUFBQSxJQUFBRSxFQUFBLElBQUFGLEVBQUEsSUFBQUUsRUFBQSxJQUVBL0wsSUFFQSxDQUVBLFlBQUF3c0IsQ0FBQWxxQixHQUVBLE1BQUF1SixFQUFBN0wsS0FBQXlJLFNBQUFzRCxFQUFBekosRUFBQW1HLFNBTUEsT0FKQW9ELEVBQUEsSUFBQUUsRUFBQSxJQUNBRixFQUFBLElBQUFFLEVBQUEsSUFDQUYsRUFBQSxJQUFBRSxFQUFBLElBRUEvTCxJQUVBLENBRUEsY0FBQXlzQixDQUFBbnFCLEdBRUEsTUFBQXlKLEVBQUF6SixFQUFBbUcsU0FXQSxPQVRBekksS0FBQTJHLElBRUFvRixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBLEVBQ0FBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUEsRUFDQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEdBSUEvTCxJQUVBLENBRUEsWUFBQWdNLENBQUFDLEVBQUFDLEVBQUFDLEdBTUEsT0FKQUYsRUFBQWdYLG9CQUFBampCLEtBQUEsR0FDQWtNLEVBQUErVyxvQkFBQWpqQixLQUFBLEdBQ0FtTSxFQUFBOFcsb0JBQUFqakIsS0FBQSxHQUVBQSxJQUVBLENBRUEsU0FBQTBzQixDQUFBemdCLEVBQUFDLEVBQUFDLEdBU0EsT0FQQW5NLEtBQUEyRyxJQUNBc0YsRUFBQXpKLEVBQUEwSixFQUFBMUosRUFBQTJKLEVBQUEzSixFQUFBLEVBQ0F5SixFQUFBeEosRUFBQXlKLEVBQUF6SixFQUFBMEosRUFBQTFKLEVBQUEsRUFDQXdKLEVBQUEwTCxFQUFBekwsRUFBQXlMLEVBQUF4TCxFQUFBd0wsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEdBR0EzWCxJQUVBLENBRUEsZUFBQTJzQixDQUFBcnFCLEdBSUEsTUFBQXVKLEVBQUE3TCxLQUFBeUksU0FDQXNELEVBQUF6SixFQUFBbUcsU0FFQW1rQixFQUFBLEVBQUFDLEdBQUE1SixvQkFBQTNnQixFQUFBLEdBQUFyQixTQUNBNnJCLEVBQUEsRUFBQUQsR0FBQTVKLG9CQUFBM2dCLEVBQUEsR0FBQXJCLFNBQ0E4ckIsRUFBQSxFQUFBRixHQUFBNUosb0JBQUEzZ0IsRUFBQSxHQUFBckIsU0FzQkEsT0FwQkE0SyxFQUFBLEdBQUFFLEVBQUEsR0FBQTZnQixFQUNBL2dCLEVBQUEsR0FBQUUsRUFBQSxHQUFBNmdCLEVBQ0EvZ0IsRUFBQSxHQUFBRSxFQUFBLEdBQUE2Z0IsRUFDQS9nQixFQUFBLEdBQUEsRUFFQUEsRUFBQSxHQUFBRSxFQUFBLEdBQUErZ0IsRUFDQWpoQixFQUFBLEdBQUFFLEVBQUEsR0FBQStnQixFQUNBamhCLEVBQUEsR0FBQUUsRUFBQSxHQUFBK2dCLEVBQ0FqaEIsRUFBQSxHQUFBLEVBRUFBLEVBQUEsR0FBQUUsRUFBQSxHQUFBZ2hCLEVBQ0FsaEIsRUFBQSxHQUFBRSxFQUFBLEdBQUFnaEIsRUFDQWxoQixFQUFBLElBQUFFLEVBQUEsSUFBQWdoQixFQUNBbGhCLEVBQUEsSUFBQSxFQUVBQSxFQUFBLElBQUEsRUFDQUEsRUFBQSxJQUFBLEVBQ0FBLEVBQUEsSUFBQSxFQUNBQSxFQUFBLElBQUEsRUFFQTdMLElBRUEsQ0FFQSxxQkFBQWd0QixDQUFBeFAsR0FFQSxNQUFBM1IsRUFBQTdMLEtBQUF5SSxTQUVBakcsRUFBQWdiLEVBQUFoYixFQUFBQyxFQUFBK2EsRUFBQS9hLEVBQUFrVixFQUFBNkYsRUFBQTdGLEVBQ0E5UixFQUFBdkUsS0FBQTJFLElBQUF6RCxHQUFBc0QsRUFBQXhFLEtBQUE0RSxJQUFBMUQsR0FDQXVELEVBQUF6RSxLQUFBMkUsSUFBQXhELEdBQUFvTCxFQUFBdk0sS0FBQTRFLElBQUF6RCxHQUNBK0YsRUFBQWxILEtBQUEyRSxJQUFBMFIsR0FBQTdKLEVBQUF4TSxLQUFBNEUsSUFBQXlSLEdBRUEsR0FBQSxRQUFBNkYsRUFBQXhYLE1BQUEsQ0FFQSxNQUFBd0csRUFBQTNHLEVBQUEyQyxFQUFBeWtCLEVBQUFwbkIsRUFBQWlJLEVBQUFyQixFQUFBM0csRUFBQTBDLEVBQUEwa0IsRUFBQXBuQixFQUFBZ0ksRUFFQWpDLEVBQUEsR0FBQTlGLEVBQUF5QyxFQUNBcUQsRUFBQSxJQUFBOUYsRUFBQStILEVBQ0FqQyxFQUFBLEdBQUFnQyxFQUVBaEMsRUFBQSxHQUFBb2hCLEVBQUF4Z0IsRUFBQW9CLEVBQ0FoQyxFQUFBLEdBQUFXLEVBQUEwZ0IsRUFBQXJmLEVBQ0FoQyxFQUFBLElBQUEvRixFQUFBQyxFQUVBOEYsRUFBQSxHQUFBcWhCLEVBQUExZ0IsRUFBQXFCLEVBQ0FoQyxFQUFBLEdBQUFZLEVBQUF3Z0IsRUFBQXBmLEVBQ0FoQyxFQUFBLElBQUFoRyxFQUFBRSxDQUVBLE1BQUEsR0FBQSxRQUFBeVgsRUFBQXhYLE1BQUEsQ0FFQSxNQUFBbW5CLEVBQUFwbkIsRUFBQXlDLEVBQUE0a0IsRUFBQXJuQixFQUFBK0gsRUFBQXVmLEVBQUF4ZixFQUFBckYsRUFBQThrQixFQUFBemYsRUFBQUMsRUFFQWpDLEVBQUEsR0FBQXNoQixFQUFBRyxFQUFBeG5CLEVBQ0ErRixFQUFBLEdBQUF3aEIsRUFBQXZuQixFQUFBc25CLEVBQ0F2aEIsRUFBQSxHQUFBaEcsRUFBQWdJLEVBRUFoQyxFQUFBLEdBQUFoRyxFQUFBaUksRUFDQWpDLEVBQUEsR0FBQWhHLEVBQUEyQyxFQUNBcUQsRUFBQSxJQUFBL0YsRUFFQStGLEVBQUEsR0FBQXVoQixFQUFBdG5CLEVBQUF1bkIsRUFDQXhoQixFQUFBLEdBQUF5aEIsRUFBQUgsRUFBQXJuQixFQUNBK0YsRUFBQSxJQUFBaEcsRUFBQUUsQ0FFQSxNQUFBLEdBQUEsUUFBQXlYLEVBQUF4WCxNQUFBLENBRUEsTUFBQW1uQixFQUFBcG5CLEVBQUF5QyxFQUFBNGtCLEVBQUFybkIsRUFBQStILEVBQUF1ZixFQUFBeGYsRUFBQXJGLEVBQUE4a0IsRUFBQXpmLEVBQUFDLEVBRUFqQyxFQUFBLEdBQUFzaEIsRUFBQUcsRUFBQXhuQixFQUNBK0YsRUFBQSxJQUFBaEcsRUFBQWlJLEVBQ0FqQyxFQUFBLEdBQUF3aEIsRUFBQUQsRUFBQXRuQixFQUVBK0YsRUFBQSxHQUFBdWhCLEVBQUFDLEVBQUF2bkIsRUFDQStGLEVBQUEsR0FBQWhHLEVBQUEyQyxFQUNBcUQsRUFBQSxHQUFBeWhCLEVBQUFILEVBQUFybkIsRUFFQStGLEVBQUEsSUFBQWhHLEVBQUFnSSxFQUNBaEMsRUFBQSxHQUFBL0YsRUFDQStGLEVBQUEsSUFBQWhHLEVBQUFFLENBRUEsTUFBQSxHQUFBLFFBQUF5WCxFQUFBeFgsTUFBQSxDQUVBLE1BQUF3RyxFQUFBM0csRUFBQTJDLEVBQUF5a0IsRUFBQXBuQixFQUFBaUksRUFBQXJCLEVBQUEzRyxFQUFBMEMsRUFBQTBrQixFQUFBcG5CLEVBQUFnSSxFQUVBakMsRUFBQSxHQUFBOUYsRUFBQXlDLEVBQ0FxRCxFQUFBLEdBQUFZLEVBQUFvQixFQUFBb2YsRUFDQXBoQixFQUFBLEdBQUFXLEVBQUFxQixFQUFBcWYsRUFFQXJoQixFQUFBLEdBQUE5RixFQUFBK0gsRUFDQWpDLEVBQUEsR0FBQXFoQixFQUFBcmYsRUFBQXJCLEVBQ0FYLEVBQUEsR0FBQW9oQixFQUFBcGYsRUFBQXBCLEVBRUFaLEVBQUEsSUFBQWdDLEVBQ0FoQyxFQUFBLEdBQUEvRixFQUFBQyxFQUNBOEYsRUFBQSxJQUFBaEcsRUFBQUUsQ0FFQSxNQUFBLEdBQUEsUUFBQXlYLEVBQUF4WCxNQUFBLENBRUEsTUFBQXVuQixFQUFBMW5CLEVBQUFFLEVBQUF5bkIsRUFBQTNuQixFQUFBZ0ksRUFBQTRmLEVBQUEzbkIsRUFBQUMsRUFBQTJuQixFQUFBNW5CLEVBQUErSCxFQUVBaEMsRUFBQSxHQUFBOUYsRUFBQXlDLEVBQ0FxRCxFQUFBLEdBQUE2aEIsRUFBQUgsRUFBQXpmLEVBQ0FqQyxFQUFBLEdBQUE0aEIsRUFBQTNmLEVBQUEwZixFQUVBM2hCLEVBQUEsR0FBQWlDLEVBQ0FqQyxFQUFBLEdBQUFoRyxFQUFBMkMsRUFDQXFELEVBQUEsSUFBQS9GLEVBQUEwQyxFQUVBcUQsRUFBQSxJQUFBZ0MsRUFBQXJGLEVBQ0FxRCxFQUFBLEdBQUEyaEIsRUFBQTFmLEVBQUEyZixFQUNBNWhCLEVBQUEsSUFBQTBoQixFQUFBRyxFQUFBNWYsQ0FFQSxNQUFBLEdBQUEsUUFBQTBQLEVBQUF4WCxNQUFBLENBRUEsTUFBQXVuQixFQUFBMW5CLEVBQUFFLEVBQUF5bkIsRUFBQTNuQixFQUFBZ0ksRUFBQTRmLEVBQUEzbkIsRUFBQUMsRUFBQTJuQixFQUFBNW5CLEVBQUErSCxFQUVBaEMsRUFBQSxHQUFBOUYsRUFBQXlDLEVBQ0FxRCxFQUFBLElBQUFpQyxFQUNBakMsRUFBQSxHQUFBZ0MsRUFBQXJGLEVBRUFxRCxFQUFBLEdBQUEwaEIsRUFBQXpmLEVBQUE0ZixFQUNBN2hCLEVBQUEsR0FBQWhHLEVBQUEyQyxFQUNBcUQsRUFBQSxHQUFBMmhCLEVBQUExZixFQUFBMmYsRUFFQTVoQixFQUFBLEdBQUE0aEIsRUFBQTNmLEVBQUEwZixFQUNBM2hCLEVBQUEsR0FBQS9GLEVBQUEwQyxFQUNBcUQsRUFBQSxJQUFBNmhCLEVBQUE1ZixFQUFBeWYsQ0FFQSxDQWFBLE9BVkExaEIsRUFBQSxHQUFBLEVBQ0FBLEVBQUEsR0FBQSxFQUNBQSxFQUFBLElBQUEsRUFHQUEsRUFBQSxJQUFBLEVBQ0FBLEVBQUEsSUFBQSxFQUNBQSxFQUFBLElBQUEsRUFDQUEsRUFBQSxJQUFBLEVBRUE3TCxJQUVBLENBRUEsMEJBQUEydEIsQ0FBQS9uQixHQUVBLE9BQUE1RixLQUFBNHRCLFFBQUFDLEdBQUFqb0IsRUFBQWtvQixHQUVBLENBRUEsTUFBQXpFLENBQUEwRSxFQUFBbnRCLEVBQUFvdEIsR0FFQSxNQUFBbmlCLEVBQUE3TCxLQUFBeUksU0F5Q0EsT0F2Q0FvVCxHQUFBM1QsV0FBQTZsQixFQUFBbnRCLEdBRUEsSUFBQWliLEdBQUExUyxhQUlBMFMsR0FBQWxFLEVBQUEsR0FJQWtFLEdBQUF4WSxZQUNBc1ksR0FBQWdHLGFBQUFxTSxFQUFBblMsSUFFQSxJQUFBRixHQUFBeFMsYUFJQSxJQUFBN0gsS0FBQTZDLElBQUE2cEIsRUFBQXJXLEdBRUFrRSxHQUFBclosR0FBQSxLQUlBcVosR0FBQWxFLEdBQUEsS0FJQWtFLEdBQUF4WSxZQUNBc1ksR0FBQWdHLGFBQUFxTSxFQUFBblMsS0FJQUYsR0FBQXRZLFlBQ0F1WSxHQUFBK0YsYUFBQTlGLEdBQUFGLElBRUE5UCxFQUFBLEdBQUE4UCxHQUFBblosRUFBQXFKLEVBQUEsR0FBQStQLEdBQUFwWixFQUFBcUosRUFBQSxHQUFBZ1EsR0FBQXJaLEVBQ0FxSixFQUFBLEdBQUE4UCxHQUFBbFosRUFBQW9KLEVBQUEsR0FBQStQLEdBQUFuWixFQUFBb0osRUFBQSxHQUFBZ1EsR0FBQXBaLEVBQ0FvSixFQUFBLEdBQUE4UCxHQUFBaEUsRUFBQTlMLEVBQUEsR0FBQStQLEdBQUFqRSxFQUFBOUwsRUFBQSxJQUFBZ1EsR0FBQWxFLEVBRUEzWCxJQUVBLENBRUEsUUFBQW1JLENBQUE3RixHQUVBLE9BQUF0QyxLQUFBc00saUJBQUF0TSxLQUFBc0MsRUFFQSxDQUVBLFdBQUFpSyxDQUFBakssR0FFQSxPQUFBdEMsS0FBQXNNLGlCQUFBaEssRUFBQXRDLEtBRUEsQ0FFQSxnQkFBQXNNLENBQUF6RyxFQUFBQyxHQUVBLE1BQUEwRyxFQUFBM0csRUFBQTRDLFNBQ0FnRSxFQUFBM0csRUFBQTJDLFNBQ0FvRCxFQUFBN0wsS0FBQXlJLFNBRUFpRSxFQUFBRixFQUFBLEdBQUFHLEVBQUFILEVBQUEsR0FBQUksRUFBQUosRUFBQSxHQUFBeWhCLEVBQUF6aEIsRUFBQSxJQUNBSyxFQUFBTCxFQUFBLEdBQUFNLEVBQUFOLEVBQUEsR0FBQU8sRUFBQVAsRUFBQSxHQUFBMGhCLEVBQUExaEIsRUFBQSxJQUNBUSxFQUFBUixFQUFBLEdBQUFTLEVBQUFULEVBQUEsR0FBQVUsRUFBQVYsRUFBQSxJQUFBMmhCLEVBQUEzaEIsRUFBQSxJQUNBNGhCLEVBQUE1aEIsRUFBQSxHQUFBNmhCLEVBQUE3aEIsRUFBQSxHQUFBOGhCLEVBQUE5aEIsRUFBQSxJQUFBK2hCLEVBQUEvaEIsRUFBQSxJQUVBVyxFQUFBVixFQUFBLEdBQUFXLEVBQUFYLEVBQUEsR0FBQVksRUFBQVosRUFBQSxHQUFBK2hCLEVBQUEvaEIsRUFBQSxJQUNBYSxFQUFBYixFQUFBLEdBQUFjLEVBQUFkLEVBQUEsR0FBQWUsRUFBQWYsRUFBQSxHQUFBZ2lCLEVBQUFoaUIsRUFBQSxJQUNBZ0IsRUFBQWhCLEVBQUEsR0FBQWlCLEVBQUFqQixFQUFBLEdBQUFrQixFQUFBbEIsRUFBQSxJQUFBaWlCLEVBQUFqaUIsRUFBQSxJQUNBa2lCLEVBQUFsaUIsRUFBQSxHQUFBbWlCLEVBQUFuaUIsRUFBQSxHQUFBb2lCLEVBQUFwaUIsRUFBQSxJQUFBcWlCLEVBQUFyaUIsRUFBQSxJQXNCQSxPQXBCQVosRUFBQSxHQUFBYSxFQUFBUyxFQUFBUixFQUFBVyxFQUFBVixFQUFBYSxFQUFBd2dCLEVBQUFVLEVBQ0E5aUIsRUFBQSxHQUFBYSxFQUFBVSxFQUFBVCxFQUFBWSxFQUFBWCxFQUFBYyxFQUFBdWdCLEVBQUFXLEVBQ0EvaUIsRUFBQSxHQUFBYSxFQUFBVyxFQUFBVixFQUFBYSxFQUFBWixFQUFBZSxFQUFBc2dCLEVBQUFZLEVBQ0FoakIsRUFBQSxJQUFBYSxFQUFBOGhCLEVBQUE3aEIsRUFBQThoQixFQUFBN2hCLEVBQUE4aEIsRUFBQVQsRUFBQWEsRUFFQWpqQixFQUFBLEdBQUFnQixFQUFBTSxFQUFBTCxFQUFBUSxFQUFBUCxFQUFBVSxFQUFBeWdCLEVBQUFTLEVBQ0E5aUIsRUFBQSxHQUFBZ0IsRUFBQU8sRUFBQU4sRUFBQVMsRUFBQVIsRUFBQVcsRUFBQXdnQixFQUFBVSxFQUNBL2lCLEVBQUEsR0FBQWdCLEVBQUFRLEVBQUFQLEVBQUFVLEVBQUFULEVBQUFZLEVBQUF1Z0IsRUFBQVcsRUFDQWhqQixFQUFBLElBQUFnQixFQUFBMmhCLEVBQUExaEIsRUFBQTJoQixFQUFBMWhCLEVBQUEyaEIsRUFBQVIsRUFBQVksRUFFQWpqQixFQUFBLEdBQUFtQixFQUFBRyxFQUFBRixFQUFBSyxFQUFBSixFQUFBTyxFQUFBMGdCLEVBQUFRLEVBQ0E5aUIsRUFBQSxHQUFBbUIsRUFBQUksRUFBQUgsRUFBQU0sRUFBQUwsRUFBQVEsRUFBQXlnQixFQUFBUyxFQUNBL2lCLEVBQUEsSUFBQW1CLEVBQUFLLEVBQUFKLEVBQUFPLEVBQUFOLEVBQUFTLEVBQUF3Z0IsRUFBQVUsRUFDQWhqQixFQUFBLElBQUFtQixFQUFBd2hCLEVBQUF2aEIsRUFBQXdoQixFQUFBdmhCLEVBQUF3aEIsRUFBQVAsRUFBQVcsRUFFQWpqQixFQUFBLEdBQUF1aUIsRUFBQWpoQixFQUFBa2hCLEVBQUEvZ0IsRUFBQWdoQixFQUFBN2dCLEVBQUE4Z0IsRUFBQUksRUFDQTlpQixFQUFBLEdBQUF1aUIsRUFBQWhoQixFQUFBaWhCLEVBQUE5Z0IsRUFBQStnQixFQUFBNWdCLEVBQUE2Z0IsRUFBQUssRUFDQS9pQixFQUFBLElBQUF1aUIsRUFBQS9nQixFQUFBZ2hCLEVBQUE3Z0IsRUFBQThnQixFQUFBM2dCLEVBQUE0Z0IsRUFBQU0sRUFDQWhqQixFQUFBLElBQUF1aUIsRUFBQUksRUFBQUgsRUFBQUksRUFBQUgsRUFBQUksRUFBQUgsRUFBQU8sRUFFQTl1QixJQUVBLENBRUEsY0FBQW9JLENBQUF0RCxHQUVBLE1BQUErRyxFQUFBN0wsS0FBQXlJLFNBT0EsT0FMQW9ELEVBQUEsSUFBQS9HLEVBQUErRyxFQUFBLElBQUEvRyxFQUFBK0csRUFBQSxJQUFBL0csRUFBQStHLEVBQUEsS0FBQS9HLEVBQ0ErRyxFQUFBLElBQUEvRyxFQUFBK0csRUFBQSxJQUFBL0csRUFBQStHLEVBQUEsSUFBQS9HLEVBQUErRyxFQUFBLEtBQUEvRyxFQUNBK0csRUFBQSxJQUFBL0csRUFBQStHLEVBQUEsSUFBQS9HLEVBQUErRyxFQUFBLEtBQUEvRyxFQUFBK0csRUFBQSxLQUFBL0csRUFDQStHLEVBQUEsSUFBQS9HLEVBQUErRyxFQUFBLElBQUEvRyxFQUFBK0csRUFBQSxLQUFBL0csRUFBQStHLEVBQUEsS0FBQS9HLEVBRUE5RSxJQUVBLENBRUEsV0FBQTROLEdBRUEsTUFBQS9CLEVBQUE3TCxLQUFBeUksU0FFQTBDLEVBQUFVLEVBQUEsR0FBQVQsRUFBQVMsRUFBQSxHQUFBUixFQUFBUSxFQUFBLEdBQUFtZ0IsRUFBQW5nQixFQUFBLElBQ0FQLEVBQUFPLEVBQUEsR0FBQU4sRUFBQU0sRUFBQSxHQUFBTCxFQUFBSyxFQUFBLEdBQUFvZ0IsRUFBQXBnQixFQUFBLElBQ0FKLEVBQUFJLEVBQUEsR0FBQUgsRUFBQUcsRUFBQSxHQUFBRixFQUFBRSxFQUFBLElBQUFxZ0IsRUFBQXJnQixFQUFBLElBTUEsT0FMQUEsRUFBQSxLQU9BbWdCLEVBQUF4Z0IsRUFBQUUsRUFDQUwsRUFBQTRnQixFQUFBdmdCLEVBQ0FzZ0IsRUFBQXpnQixFQUFBSSxFQUNBUCxFQUFBNmdCLEVBQUF0Z0IsRUFDQU4sRUFBQUUsRUFBQTJnQixFQUNBOWdCLEVBQUFJLEVBQUEwZ0IsR0FaQXJnQixFQUFBLEtBZUFWLEVBQUFLLEVBQUEwZ0IsRUFDQS9nQixFQUFBOGdCLEVBQUF0Z0IsRUFDQXFnQixFQUFBMWdCLEVBQUFLLEVBQ0FOLEVBQUFDLEVBQUE0Z0IsRUFDQTdnQixFQUFBNGdCLEVBQUF4Z0IsRUFDQXVnQixFQUFBeGdCLEVBQUFDLEdBcEJBSSxFQUFBLE1BdUJBVixFQUFBOGdCLEVBQUF2Z0IsRUFDQVAsRUFBQUksRUFBQTJnQixFQUNBRixFQUFBMWdCLEVBQUFJLEVBQ0FOLEVBQUFFLEVBQUE0Z0IsRUFDQUYsRUFBQXpnQixFQUFBRSxFQUNBTCxFQUFBNmdCLEVBQUF4Z0IsR0E1QkFJLEVBQUEsTUErQkFSLEVBQUFFLEVBQUFFLEVBQ0FOLEVBQUFLLEVBQUFFLEVBQ0FQLEVBQUFJLEVBQUFJLEVBQ0FOLEVBQUFDLEVBQUFJLEVBQ0FOLEVBQUFFLEVBQUFLLEVBQ0FQLEVBQUFJLEVBQUFDLEVBS0EsQ0FFQSxTQUFBOEMsR0FFQSxNQUFBMUMsRUFBQTdMLEtBQUF5SSxTQUNBLElBQUErRixFQVVBLE9BUkFBLEVBQUEzQyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUEyQyxFQUNBQSxFQUFBM0MsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBMkMsRUFDQUEsRUFBQTNDLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQTJDLEVBRUFBLEVBQUEzQyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUEyQyxFQUNBQSxFQUFBM0MsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUFBMkMsRUFDQUEsRUFBQTNDLEVBQUEsSUFBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQTJDLEVBRUF4TyxJQUVBLENBRUEsV0FBQSt1QixDQUFBdnNCLEVBQUFDLEVBQUFrVixHQUVBLE1BQUE5TCxFQUFBN0wsS0FBQXlJLFNBZ0JBLE9BZEFqRyxFQUFBNGQsV0FFQXZVLEVBQUEsSUFBQXJKLEVBQUFBLEVBQ0FxSixFQUFBLElBQUFySixFQUFBQyxFQUNBb0osRUFBQSxJQUFBckosRUFBQW1WLElBSUE5TCxFQUFBLElBQUFySixFQUNBcUosRUFBQSxJQUFBcEosRUFDQW9KLEVBQUEsSUFBQThMLEdBSUEzWCxJQUVBLENBRUEsTUFBQWlPLEdBR0EsTUFBQXBDLEVBQUE3TCxLQUFBeUksU0FFQTBDLEVBQUFVLEVBQUEsR0FBQVAsRUFBQU8sRUFBQSxHQUFBSixFQUFBSSxFQUFBLEdBQUFzZ0IsRUFBQXRnQixFQUFBLEdBQ0FULEVBQUFTLEVBQUEsR0FBQU4sRUFBQU0sRUFBQSxHQUFBSCxFQUFBRyxFQUFBLEdBQUF1Z0IsRUFBQXZnQixFQUFBLEdBQ0FSLEVBQUFRLEVBQUEsR0FBQUwsRUFBQUssRUFBQSxHQUFBRixFQUFBRSxFQUFBLElBQUF3Z0IsRUFBQXhnQixFQUFBLElBQ0FtZ0IsRUFBQW5nQixFQUFBLElBQUFvZ0IsRUFBQXBnQixFQUFBLElBQUFxZ0IsRUFBQXJnQixFQUFBLElBQUF5Z0IsRUFBQXpnQixFQUFBLElBRUFxQyxFQUFBMUMsRUFBQTBnQixFQUFBRSxFQUFBSCxFQUFBdGdCLEVBQUF5Z0IsRUFBQUgsRUFBQXZnQixFQUFBMmdCLEVBQUE5Z0IsRUFBQTJnQixFQUFBRyxFQUFBN2dCLEVBQUFFLEVBQUE0Z0IsRUFBQS9nQixFQUFBSSxFQUFBMmdCLEVBQ0FuZSxFQUFBNmQsRUFBQXJnQixFQUFBeWdCLEVBQUEvZ0IsRUFBQTZnQixFQUFBRSxFQUFBSixFQUFBdGdCLEVBQUEyZ0IsRUFBQWpoQixFQUFBOGdCLEVBQUFHLEVBQUFoaEIsRUFBQUssRUFBQTRnQixFQUFBbGhCLEVBQUFPLEVBQUEyZ0IsRUFDQWxlLEVBQUEvQyxFQUFBNGdCLEVBQUFHLEVBQUFKLEVBQUF4Z0IsRUFBQTRnQixFQUFBSixFQUFBemdCLEVBQUE4Z0IsRUFBQWpoQixFQUFBNmdCLEVBQUFJLEVBQUFoaEIsRUFBQUUsRUFBQStnQixFQUFBbGhCLEVBQUFJLEVBQUE4Z0IsRUFDQTBDLEVBQUFoRCxFQUFBeGdCLEVBQUFFLEVBQUFMLEVBQUE0Z0IsRUFBQXZnQixFQUFBc2dCLEVBQUF6Z0IsRUFBQUksRUFBQVAsRUFBQTZnQixFQUFBdGdCLEVBQUFOLEVBQUFFLEVBQUEyZ0IsRUFBQTlnQixFQUFBSSxFQUFBMGdCLEVBRUE3ZCxFQUFBbEQsRUFBQStDLEVBQUE1QyxFQUFBNkMsRUFBQTFDLEVBQUEyQyxFQUFBK2QsRUFBQTZDLEVBRUEsR0FBQSxJQUFBM2dCLEVBQUEsT0FBQXJPLEtBQUEyRyxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBRUEsTUFBQTJILEVBQUEsRUFBQUQsRUFzQkEsT0FwQkF4QyxFQUFBLEdBQUFxQyxFQUFBSSxFQUNBekMsRUFBQSxJQUFBb2dCLEVBQUF0Z0IsRUFBQXdnQixFQUFBM2dCLEVBQUEwZ0IsRUFBQUMsRUFBQUYsRUFBQXhnQixFQUFBNGdCLEVBQUEvZ0IsRUFBQTRnQixFQUFBRyxFQUFBN2dCLEVBQUFDLEVBQUE2Z0IsRUFBQWhoQixFQUFBSyxFQUFBMmdCLEdBQUFoZSxFQUNBekMsRUFBQSxJQUFBTixFQUFBMmdCLEVBQUFDLEVBQUFGLEVBQUF2Z0IsRUFBQXlnQixFQUFBRixFQUFBeGdCLEVBQUEyZ0IsRUFBQTlnQixFQUFBNGdCLEVBQUFFLEVBQUE3Z0IsRUFBQUUsRUFBQTZnQixFQUFBaGhCLEVBQUFJLEVBQUE0Z0IsR0FBQWhlLEVBQ0F6QyxFQUFBLElBQUFMLEVBQUFFLEVBQUF5Z0IsRUFBQTVnQixFQUFBSSxFQUFBd2dCLEVBQUEzZ0IsRUFBQUMsRUFBQTJnQixFQUFBOWdCLEVBQUFLLEVBQUF5Z0IsRUFBQTdnQixFQUFBRSxFQUFBNGdCLEVBQUEvZ0IsRUFBQUksRUFBQTJnQixHQUFBL2QsRUFFQXpDLEVBQUEsR0FBQXNDLEVBQUFHLEVBQ0F6QyxFQUFBLElBQUFSLEVBQUE2Z0IsRUFBQUMsRUFBQUgsRUFBQXJnQixFQUFBd2dCLEVBQUFILEVBQUF2Z0IsRUFBQTRnQixFQUFBbGhCLEVBQUErZ0IsRUFBQUcsRUFBQWhoQixFQUFBSSxFQUFBNmdCLEVBQUFuaEIsRUFBQVEsRUFBQTJnQixHQUFBaGUsRUFDQXpDLEVBQUEsSUFBQW1nQixFQUFBdGdCLEVBQUF5Z0IsRUFBQS9nQixFQUFBOGdCLEVBQUFDLEVBQUFILEVBQUF2Z0IsRUFBQTJnQixFQUFBamhCLEVBQUErZ0IsRUFBQUUsRUFBQWhoQixFQUFBSyxFQUFBNmdCLEVBQUFuaEIsRUFBQU8sRUFBQTRnQixHQUFBaGUsRUFDQXpDLEVBQUEsSUFBQVQsRUFBQU8sRUFBQXdnQixFQUFBOWdCLEVBQUFLLEVBQUF5Z0IsRUFBQTlnQixFQUFBSSxFQUFBMmdCLEVBQUFqaEIsRUFBQVEsRUFBQXlnQixFQUFBaGhCLEVBQUFLLEVBQUE0Z0IsRUFBQWxoQixFQUFBTyxFQUFBMmdCLEdBQUEvZCxFQUVBekMsRUFBQSxHQUFBdUMsRUFBQUUsRUFDQXpDLEVBQUEsSUFBQW1nQixFQUFBeGdCLEVBQUEyZ0IsRUFBQTlnQixFQUFBNGdCLEVBQUFFLEVBQUFILEVBQUExZ0IsRUFBQStnQixFQUFBbGhCLEVBQUE4Z0IsRUFBQUksRUFBQWhoQixFQUFBQyxFQUFBZ2hCLEVBQUFuaEIsRUFBQUssRUFBQThnQixHQUFBaGUsRUFDQXpDLEVBQUEsS0FBQVQsRUFBQTZnQixFQUFBRSxFQUFBSCxFQUFBemdCLEVBQUE0Z0IsRUFBQUgsRUFBQTFnQixFQUFBOGdCLEVBQUFqaEIsRUFBQThnQixFQUFBRyxFQUFBaGhCLEVBQUFFLEVBQUFnaEIsRUFBQW5oQixFQUFBSSxFQUFBK2dCLEdBQUFoZSxFQUNBekMsRUFBQSxLQUFBUixFQUFBRSxFQUFBNGdCLEVBQUEvZ0IsRUFBQUksRUFBQTJnQixFQUFBOWdCLEVBQUFDLEVBQUE4Z0IsRUFBQWpoQixFQUFBSyxFQUFBNGdCLEVBQUFoaEIsRUFBQUUsRUFBQStnQixFQUFBbGhCLEVBQUFJLEVBQUE4Z0IsR0FBQS9kLEVBRUF6QyxFQUFBLElBQUFtakIsRUFBQTFnQixFQUNBekMsRUFBQSxLQUFBUixFQUFBNGdCLEVBQUF4Z0IsRUFBQXVnQixFQUFBeGdCLEVBQUFDLEVBQUF1Z0IsRUFBQTFnQixFQUFBSyxFQUFBUixFQUFBOGdCLEVBQUF0Z0IsRUFBQU4sRUFBQUMsRUFBQTRnQixFQUFBL2dCLEVBQUFLLEVBQUEwZ0IsR0FBQTVkLEVBQ0F6QyxFQUFBLEtBQUFtZ0IsRUFBQXpnQixFQUFBRSxFQUFBTCxFQUFBNmdCLEVBQUF4Z0IsRUFBQXVnQixFQUFBMWdCLEVBQUFJLEVBQUFQLEVBQUE4Z0IsRUFBQXZnQixFQUFBTixFQUFBRSxFQUFBNGdCLEVBQUEvZ0IsRUFBQUksRUFBQTJnQixHQUFBNWQsRUFDQXpDLEVBQUEsS0FBQVQsRUFBQUksRUFBQUMsRUFBQUosRUFBQUUsRUFBQUUsRUFBQUosRUFBQUMsRUFBQUksRUFBQVAsRUFBQUssRUFBQUUsRUFBQU4sRUFBQUUsRUFBQUssRUFBQVIsRUFBQUksRUFBQUksR0FBQTJDLEVBRUF0TyxJQUVBLENBRUEsS0FBQXFQLENBQUExSCxHQUVBLE1BQUFrRSxFQUFBN0wsS0FBQXlJLFNBQ0FqRyxFQUFBbUYsRUFBQW5GLEVBQUFDLEVBQUFrRixFQUFBbEYsRUFBQWtWLEVBQUFoUSxFQUFBZ1EsRUFPQSxPQUxBOUwsRUFBQSxJQUFBckosRUFBQXFKLEVBQUEsSUFBQXBKLEVBQUFvSixFQUFBLElBQUE4TCxFQUNBOUwsRUFBQSxJQUFBckosRUFBQXFKLEVBQUEsSUFBQXBKLEVBQUFvSixFQUFBLElBQUE4TCxFQUNBOUwsRUFBQSxJQUFBckosRUFBQXFKLEVBQUEsSUFBQXBKLEVBQUFvSixFQUFBLEtBQUE4TCxFQUNBOUwsRUFBQSxJQUFBckosRUFBQXFKLEVBQUEsSUFBQXBKLEVBQUFvSixFQUFBLEtBQUE4TCxFQUVBM1gsSUFFQSxDQUVBLGlCQUFBdW9CLEdBRUEsTUFBQTFjLEVBQUE3TCxLQUFBeUksU0FFQXdtQixFQUFBcGpCLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQ0FxakIsRUFBQXJqQixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUNBc2pCLEVBQUF0akIsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFFQSxPQUFBdkssS0FBQThILEtBQUE5SCxLQUFBYSxJQUFBOHNCLEVBQUFDLEVBQUFDLEdBRUEsQ0FFQSxlQUFBeGYsQ0FBQW5OLEVBQUFDLEVBQUFrVixHQTBCQSxPQXhCQW5WLEVBQUE0ZCxVQUVBcGdCLEtBQUEyRyxJQUVBLEVBQUEsRUFBQSxFQUFBbkUsRUFBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQUEsRUFBQUMsRUFDQSxFQUFBLEVBQUEsRUFBQUQsRUFBQW1WLEVBQ0EsRUFBQSxFQUFBLEVBQUEsR0FNQTNYLEtBQUEyRyxJQUVBLEVBQUEsRUFBQSxFQUFBbkUsRUFDQSxFQUFBLEVBQUEsRUFBQUMsRUFDQSxFQUFBLEVBQUEsRUFBQWtWLEVBQ0EsRUFBQSxFQUFBLEVBQUEsR0FNQTNYLElBRUEsQ0FFQSxhQUFBb3ZCLENBQUExbEIsR0FFQSxNQUFBM0QsRUFBQXpFLEtBQUEyRSxJQUFBeUQsR0FBQTVFLEVBQUF4RCxLQUFBNEUsSUFBQXdELEdBV0EsT0FUQTFKLEtBQUEyRyxJQUVBLEVBQUEsRUFBQSxFQUFBLEVBQ0EsRUFBQVosR0FBQWpCLEVBQUEsRUFDQSxFQUFBQSxFQUFBaUIsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEdBSUEvRixJQUVBLENBRUEsYUFBQXF2QixDQUFBM2xCLEdBRUEsTUFBQTNELEVBQUF6RSxLQUFBMkUsSUFBQXlELEdBQUE1RSxFQUFBeEQsS0FBQTRFLElBQUF3RCxHQVdBLE9BVEExSixLQUFBMkcsSUFFQVosRUFBQSxFQUFBakIsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEdBQ0FBLEVBQUEsRUFBQWlCLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxHQUlBL0YsSUFFQSxDQUVBLGFBQUFzdkIsQ0FBQTVsQixHQUVBLE1BQUEzRCxFQUFBekUsS0FBQTJFLElBQUF5RCxHQUFBNUUsRUFBQXhELEtBQUE0RSxJQUFBd0QsR0FXQSxPQVRBMUosS0FBQTJHLElBRUFaLEdBQUFqQixFQUFBLEVBQUEsRUFDQUEsRUFBQWlCLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsR0FJQS9GLElBRUEsQ0FFQSxnQkFBQXV2QixDQUFBdlIsRUFBQTFVLEdBSUEsTUFBQXZELEVBQUF6RSxLQUFBMkUsSUFBQXFELEdBQ0F4RSxFQUFBeEQsS0FBQTRFLElBQUFvRCxHQUNBNUcsRUFBQSxFQUFBcUQsRUFDQXZELEVBQUF3YixFQUFBeGIsRUFBQUMsRUFBQXViLEVBQUF2YixFQUFBa1YsRUFBQXFHLEVBQUFyRyxFQUNBN0ksRUFBQXBNLEVBQUFGLEVBQUF1TSxFQUFBck0sRUFBQUQsRUFXQSxPQVRBekMsS0FBQTJHLElBRUFtSSxFQUFBdE0sRUFBQXVELEVBQUErSSxFQUFBck0sRUFBQXFDLEVBQUE2UyxFQUFBN0ksRUFBQTZJLEVBQUE3UyxFQUFBckMsRUFBQSxFQUNBcU0sRUFBQXJNLEVBQUFxQyxFQUFBNlMsRUFBQTVJLEVBQUF0TSxFQUFBc0QsRUFBQWdKLEVBQUE0SSxFQUFBN1MsRUFBQXRDLEVBQUEsRUFDQXNNLEVBQUE2SSxFQUFBN1MsRUFBQXJDLEVBQUFzTSxFQUFBNEksRUFBQTdTLEVBQUF0QyxFQUFBRSxFQUFBaVYsRUFBQUEsRUFBQTVSLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxHQUlBL0YsSUFFQSxDQUVBLFNBQUF1UCxDQUFBL00sRUFBQUMsRUFBQWtWLEdBV0EsT0FUQTNYLEtBQUEyRyxJQUVBbkUsRUFBQSxFQUFBLEVBQUEsRUFDQSxFQUFBQyxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUFrVixFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsR0FJQTNYLElBRUEsQ0FFQSxTQUFBd3ZCLENBQUF2VyxFQUFBQyxFQUFBdVcsRUFBQXRXLEVBQUF1VyxFQUFBQyxHQVdBLE9BVEEzdkIsS0FBQTJHLElBRUEsRUFBQThvQixFQUFBQyxFQUFBLEVBQ0F6VyxFQUFBLEVBQUEwVyxFQUFBLEVBQ0F6VyxFQUFBQyxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxHQUlBblosSUFFQSxDQUVBLE9BQUE0dEIsQ0FBQWdDLEVBQUF0UyxFQUFBak8sR0FFQSxNQUFBeEQsRUFBQTdMLEtBQUF5SSxTQUVBakcsRUFBQThhLEVBQUEzQixHQUFBbFosRUFBQTZhLEVBQUExQixHQUFBakUsRUFBQTJGLEVBQUF6QixHQUFBakUsRUFBQTBGLEVBQUF4QixHQUNBK1QsRUFBQXJ0QixFQUFBQSxFQUFBc3RCLEVBQUFydEIsRUFBQUEsRUFBQXN0QixFQUFBcFksRUFBQUEsRUFDQW1CLEVBQUF0VyxFQUFBcXRCLEVBQUE1VyxFQUFBelcsRUFBQXN0QixFQUFBNVcsRUFBQTFXLEVBQUF1dEIsRUFDQWhYLEVBQUF0VyxFQUFBcXRCLEVBQUEzVyxFQUFBMVcsRUFBQXN0QixFQUFBL1csRUFBQXJCLEVBQUFvWSxFQUNBQyxFQUFBcFksRUFBQWlZLEVBQUFJLEVBQUFyWSxFQUFBa1ksRUFBQUksRUFBQXRZLEVBQUFtWSxFQUVBL2dCLEVBQUFLLEVBQUE3TSxFQUFBeU0sRUFBQUksRUFBQTVNLEVBQUF5Z0IsRUFBQTdULEVBQUFzSSxFQXNCQSxPQXBCQTlMLEVBQUEsSUFBQSxHQUFBa04sRUFBQUMsSUFBQWhLLEVBQ0FuRCxFQUFBLElBQUFvTixFQUFBaVgsR0FBQWxoQixFQUNBbkQsRUFBQSxJQUFBcU4sRUFBQStXLEdBQUFqaEIsRUFDQW5ELEVBQUEsR0FBQSxFQUVBQSxFQUFBLElBQUFvTixFQUFBaVgsR0FBQWpoQixFQUNBcEQsRUFBQSxJQUFBLEdBQUFpTixFQUFBRSxJQUFBL0osRUFDQXBELEVBQUEsSUFBQXNOLEVBQUE2VyxHQUFBL2dCLEVBQ0FwRCxFQUFBLEdBQUEsRUFFQUEsRUFBQSxJQUFBcU4sRUFBQStXLEdBQUEvTSxFQUNBclgsRUFBQSxJQUFBc04sRUFBQTZXLEdBQUE5TSxFQUNBclgsRUFBQSxLQUFBLEdBQUFpTixFQUFBQyxJQUFBbUssRUFDQXJYLEVBQUEsSUFBQSxFQUVBQSxFQUFBLElBQUErakIsRUFBQXB0QixFQUNBcUosRUFBQSxJQUFBK2pCLEVBQUFudEIsRUFDQW9KLEVBQUEsSUFBQStqQixFQUFBalksRUFDQTlMLEVBQUEsSUFBQSxFQUVBN0wsSUFFQSxDQUVBLFNBQUFtd0IsQ0FBQVAsRUFBQXRTLEVBQUFqTyxHQUVBLE1BQUF4RCxFQUFBN0wsS0FBQXlJLFNBRUEsSUFBQXVHLEVBQUE2ZCxHQUFBbG1CLElBQUFrRixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUFBNUssU0FDQSxNQUFBZ08sRUFBQTRkLEdBQUFsbUIsSUFBQWtGLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQUE1SyxTQUNBaWlCLEVBQUEySixHQUFBbG1CLElBQUFrRixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxLQUFBNUssU0FHQWpCLEtBQUE0TixjQUNBLElBQUFvQixHQUFBQSxHQUVBNGdCLEVBQUFwdEIsRUFBQXFKLEVBQUEsSUFDQStqQixFQUFBbnRCLEVBQUFvSixFQUFBLElBQ0ErakIsRUFBQWpZLEVBQUE5TCxFQUFBLElBR0F1a0IsR0FBQTFvQixLQUFBMUgsTUFFQSxNQUFBcXdCLEVBQUEsRUFBQXJoQixFQUNBc2hCLEVBQUEsRUFBQXJoQixFQUNBc2hCLEVBQUEsRUFBQXJOLEVBb0JBLE9BbEJBa04sR0FBQTNuQixTQUFBLElBQUE0bkIsRUFDQUQsR0FBQTNuQixTQUFBLElBQUE0bkIsRUFDQUQsR0FBQTNuQixTQUFBLElBQUE0bkIsRUFFQUQsR0FBQTNuQixTQUFBLElBQUE2bkIsRUFDQUYsR0FBQTNuQixTQUFBLElBQUE2bkIsRUFDQUYsR0FBQTNuQixTQUFBLElBQUE2bkIsRUFFQUYsR0FBQTNuQixTQUFBLElBQUE4bkIsRUFDQUgsR0FBQTNuQixTQUFBLElBQUE4bkIsRUFDQUgsR0FBQTNuQixTQUFBLEtBQUE4bkIsRUFFQWpULEVBQUFZLHNCQUFBa1MsSUFFQS9nQixFQUFBN00sRUFBQXdNLEVBQ0FLLEVBQUE1TSxFQUFBd00sRUFDQUksRUFBQXNJLEVBQUF1TCxFQUVBbGpCLElBRUEsQ0FFQSxlQUFBd3dCLENBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUF0eEIsS0FFQSxNQUFBb00sRUFBQTdMLEtBQUF5SSxTQUNBakcsRUFBQSxFQUFBcXVCLEdBQUFILEVBQUFELEdBQ0FodUIsRUFBQSxFQUFBb3VCLEdBQUFGLEVBQUFDLEdBRUEvcUIsR0FBQTZxQixFQUFBRCxJQUFBQyxFQUFBRCxHQUNBM3FCLEdBQUE2cUIsRUFBQUMsSUFBQUQsRUFBQUMsR0FFQSxJQUFBN3FCLEVBQUE4SCxFQUVBLEdBQUFrakIsSUFBQXR4QixHQUVBc0csSUFBQStxQixFQUFBRCxJQUFBQyxFQUFBRCxHQUNBaGpCLEdBQUEsRUFBQWlqQixFQUFBRCxHQUFBQyxFQUFBRCxPQUVBLElBQUFFLElBQUFyeEIsR0FPQSxNQUFBLElBQUEwRCxNQUFBLCtEQUFBMnRCLEdBTEFockIsR0FBQStxQixHQUFBQSxFQUFBRCxHQUNBaGpCLEdBQUFpakIsRUFBQUQsR0FBQUMsRUFBQUQsRUFNQSxDQU9BLE9BTEFobEIsRUFBQSxHQUFBckosRUFBQXFKLEVBQUEsR0FBQSxFQUFBQSxFQUFBLEdBQUFoRyxFQUFBZ0csRUFBQSxJQUFBLEVBQ0FBLEVBQUEsR0FBQSxFQUFBQSxFQUFBLEdBQUFwSixFQUFBb0osRUFBQSxHQUFBL0YsRUFBQStGLEVBQUEsSUFBQSxFQUNBQSxFQUFBLEdBQUEsRUFBQUEsRUFBQSxHQUFBLEVBQUFBLEVBQUEsSUFBQTlGLEVBQUE4RixFQUFBLElBQUFnQyxFQUNBaEMsRUFBQSxHQUFBLEVBQUFBLEVBQUEsR0FBQSxFQUFBQSxFQUFBLEtBQUEsRUFBQUEsRUFBQSxJQUFBLEVBRUE3TCxJQUVBLENBRUEsZ0JBQUFneEIsQ0FBQVAsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQXR4QixLQUVBLE1BQUFvTSxFQUFBN0wsS0FBQXlJLFNBQ0FtUCxFQUFBLEdBQUE4WSxFQUFBRCxHQUNBemlCLEVBQUEsR0FBQTJpQixFQUFBQyxHQUNBSyxFQUFBLEdBQUFILEVBQUFELEdBRUFydUIsR0FBQWt1QixFQUFBRCxHQUFBN1ksRUFDQW5WLEdBQUFrdUIsRUFBQUMsR0FBQTVpQixFQUVBLElBQUEySixFQUFBdVosRUFFQSxHQUFBSCxJQUFBdHhCLEdBRUFrWSxHQUFBbVosRUFBQUQsR0FBQUksRUFDQUMsR0FBQSxFQUFBRCxNQUVBLElBQUFGLElBQUFyeEIsR0FPQSxNQUFBLElBQUEwRCxNQUFBLGdFQUFBMnRCLEdBTEFwWixFQUFBa1osRUFBQUksRUFDQUMsR0FBQSxFQUFBRCxDQU1BLENBT0EsT0FMQXBsQixFQUFBLEdBQUEsRUFBQStMLEVBQUEvTCxFQUFBLEdBQUEsRUFBQUEsRUFBQSxHQUFBLEVBQUFBLEVBQUEsS0FBQXJKLEVBQ0FxSixFQUFBLEdBQUEsRUFBQUEsRUFBQSxHQUFBLEVBQUFtQyxFQUFBbkMsRUFBQSxHQUFBLEVBQUFBLEVBQUEsS0FBQXBKLEVBQ0FvSixFQUFBLEdBQUEsRUFBQUEsRUFBQSxHQUFBLEVBQUFBLEVBQUEsSUFBQXFsQixFQUFBcmxCLEVBQUEsS0FBQThMLEVBQ0E5TCxFQUFBLEdBQUEsRUFBQUEsRUFBQSxHQUFBLEVBQUFBLEVBQUEsSUFBQSxFQUFBQSxFQUFBLElBQUEsRUFFQTdMLElBRUEsQ0FFQSxNQUFBc0ssQ0FBQXNGLEdBRUEsTUFBQS9ELEVBQUE3TCxLQUFBeUksU0FDQXNELEVBQUE2RCxFQUFBbkgsU0FFQSxJQUFBLElBQUExSCxFQUFBLEVBQUFBLEVBQUEsR0FBQUEsSUFFQSxHQUFBOEssRUFBQTlLLEtBQUFnTCxFQUFBaEwsR0FBQSxPQUFBLEVBSUEsT0FBQSxDQUVBLENBRUEsU0FBQXdKLENBQUExSixFQUFBMkosRUFBQSxHQUVBLElBQUEsSUFBQXpKLEVBQUEsRUFBQUEsRUFBQSxHQUFBQSxJQUVBZixLQUFBeUksU0FBQTFILEdBQUFGLEVBQUFFLEVBQUF5SixHQUlBLE9BQUF4SyxJQUVBLENBRUEsT0FBQXlLLENBQUE1SixFQUFBLEdBQUEySixFQUFBLEdBRUEsTUFBQXFCLEVBQUE3TCxLQUFBeUksU0FzQkEsT0FwQkE1SCxFQUFBMkosR0FBQXFCLEVBQUEsR0FDQWhMLEVBQUEySixFQUFBLEdBQUFxQixFQUFBLEdBQ0FoTCxFQUFBMkosRUFBQSxHQUFBcUIsRUFBQSxHQUNBaEwsRUFBQTJKLEVBQUEsR0FBQXFCLEVBQUEsR0FFQWhMLEVBQUEySixFQUFBLEdBQUFxQixFQUFBLEdBQ0FoTCxFQUFBMkosRUFBQSxHQUFBcUIsRUFBQSxHQUNBaEwsRUFBQTJKLEVBQUEsR0FBQXFCLEVBQUEsR0FDQWhMLEVBQUEySixFQUFBLEdBQUFxQixFQUFBLEdBRUFoTCxFQUFBMkosRUFBQSxHQUFBcUIsRUFBQSxHQUNBaEwsRUFBQTJKLEVBQUEsR0FBQXFCLEVBQUEsR0FDQWhMLEVBQUEySixFQUFBLElBQUFxQixFQUFBLElBQ0FoTCxFQUFBMkosRUFBQSxJQUFBcUIsRUFBQSxJQUVBaEwsRUFBQTJKLEVBQUEsSUFBQXFCLEVBQUEsSUFDQWhMLEVBQUEySixFQUFBLElBQUFxQixFQUFBLElBQ0FoTCxFQUFBMkosRUFBQSxJQUFBcUIsRUFBQSxJQUNBaEwsRUFBQTJKLEVBQUEsSUFBQXFCLEVBQUEsSUFFQWhMLENBRUEsRUFJQSxNQUFBZ3NCLEdBQUEsSUFBQTFNLEdBQ0FpUSxHQUFBLElBQUFyRSxHQUNBOEIsR0FBQSxJQUFBMU4sR0FBQSxFQUFBLEVBQUEsR0FDQTJOLEdBQUEsSUFBQTNOLEdBQUEsRUFBQSxFQUFBLEdBQ0F4RSxHQUFBLElBQUF3RSxHQUNBdkUsR0FBQSxJQUFBdUUsR0FDQXRFLEdBQUEsSUFBQXNFLEdDNTRCQWdSLEdBQUEsSUFBQXBGLEdBQ0FxRixHQUFBLElBQUEzVixHQUVBLE1BQUE0VixHQUVBLFdBQUF6dUIsQ0FBQUosRUFBQSxFQUFBQyxFQUFBLEVBQUFrVixFQUFBLEVBQUEzUixFQUFBcXJCLEdBQUFDLGVBRUF0eEIsS0FBQXV4QixTQUFBLEVBRUF2eEIsS0FBQTJiLEdBQUFuWixFQUNBeEMsS0FBQTRiLEdBQUFuWixFQUNBekMsS0FBQTZiLEdBQUFsRSxFQUNBM1gsS0FBQTBkLE9BQUExWCxDQUVBLENBRUEsS0FBQXhELEdBRUEsT0FBQXhDLEtBQUEyYixFQUVBLENBRUEsS0FBQW5aLENBQUFQLEdBRUFqQyxLQUFBMmIsR0FBQTFaLEVBQ0FqQyxLQUFBcWQsbUJBRUEsQ0FFQSxLQUFBNWEsR0FFQSxPQUFBekMsS0FBQTRiLEVBRUEsQ0FFQSxLQUFBblosQ0FBQVIsR0FFQWpDLEtBQUE0YixHQUFBM1osRUFDQWpDLEtBQUFxZCxtQkFFQSxDQUVBLEtBQUExRixHQUVBLE9BQUEzWCxLQUFBNmIsRUFFQSxDQUVBLEtBQUFsRSxDQUFBMVYsR0FFQWpDLEtBQUE2YixHQUFBNVosRUFDQWpDLEtBQUFxZCxtQkFFQSxDQUVBLFNBQUFyWCxHQUVBLE9BQUFoRyxLQUFBMGQsTUFFQSxDQUVBLFNBQUExWCxDQUFBL0QsR0FFQWpDLEtBQUEwZCxPQUFBemIsRUFDQWpDLEtBQUFxZCxtQkFFQSxDQUVBLEdBQUExVyxDQUFBbkUsRUFBQUMsRUFBQWtWLEVBQUEzUixFQUFBaEcsS0FBQTBkLFFBU0EsT0FQQTFkLEtBQUEyYixHQUFBblosRUFDQXhDLEtBQUE0YixHQUFBblosRUFDQXpDLEtBQUE2YixHQUFBbEUsRUFDQTNYLEtBQUEwZCxPQUFBMVgsRUFFQWhHLEtBQUFxZCxvQkFFQXJkLElBRUEsQ0FFQSxLQUFBeUgsR0FFQSxPQUFBLElBQUF6SCxLQUFBNEMsWUFBQTVDLEtBQUEyYixHQUFBM2IsS0FBQTRiLEdBQUE1YixLQUFBNmIsR0FBQTdiLEtBQUEwZCxPQUVBLENBRUEsSUFBQWhXLENBQUE4VixHQVNBLE9BUEF4ZCxLQUFBMmIsR0FBQTZCLEVBQUE3QixHQUNBM2IsS0FBQTRiLEdBQUE0QixFQUFBNUIsR0FDQTViLEtBQUE2YixHQUFBMkIsRUFBQTNCLEdBQ0E3YixLQUFBMGQsT0FBQUYsRUFBQUUsT0FFQTFkLEtBQUFxZCxvQkFFQXJkLElBRUEsQ0FFQSxxQkFBQWtlLENBQUE1YixFQUFBMEQsRUFBQWhHLEtBQUEwZCxPQUFBRCxHQUFBLEdBSUEsTUFBQTVSLEVBQUF2SixFQUFBbUcsU0FDQTRQLEVBQUF4TSxFQUFBLEdBQUF5TSxFQUFBek0sRUFBQSxHQUFBME0sRUFBQTFNLEVBQUEsR0FDQTJNLEVBQUEzTSxFQUFBLEdBQUE0TSxFQUFBNU0sRUFBQSxHQUFBNk0sRUFBQTdNLEVBQUEsR0FDQThNLEVBQUE5TSxFQUFBLEdBQUErTSxFQUFBL00sRUFBQSxHQUFBZ04sRUFBQWhOLEVBQUEsSUFFQSxPQUFBN0YsR0FFQSxJQUFBLE1BRUFoRyxLQUFBNGIsR0FBQXRhLEtBQUFrd0IsS0FBQXh2QixHQUFBdVcsR0FBQSxFQUFBLElBRUFqWCxLQUFBNkMsSUFBQW9VLEdBQUEsVUFFQXZZLEtBQUEyYixHQUFBcmEsS0FBQWlJLE9BQUFtUCxFQUFBRyxHQUNBN1ksS0FBQTZiLEdBQUF2YSxLQUFBaUksT0FBQStPLEVBQUFELEtBSUFyWSxLQUFBMmIsR0FBQXJhLEtBQUFpSSxNQUFBcVAsRUFBQUgsR0FDQXpZLEtBQUE2YixHQUFBLEdBSUEsTUFFQSxJQUFBLE1BRUE3YixLQUFBMmIsR0FBQXJhLEtBQUFrd0IsTUFBQXh2QixHQUFBMFcsR0FBQSxFQUFBLElBRUFwWCxLQUFBNkMsSUFBQXVVLEdBQUEsVUFFQTFZLEtBQUE0YixHQUFBdGEsS0FBQWlJLE1BQUFnUCxFQUFBTSxHQUNBN1ksS0FBQTZiLEdBQUF2YSxLQUFBaUksTUFBQWlQLEVBQUFDLEtBSUF6WSxLQUFBNGIsR0FBQXRhLEtBQUFpSSxPQUFBb1AsRUFBQU4sR0FDQXJZLEtBQUE2YixHQUFBLEdBSUEsTUFFQSxJQUFBLE1BRUE3YixLQUFBMmIsR0FBQXJhLEtBQUFrd0IsS0FBQXh2QixHQUFBNFcsR0FBQSxFQUFBLElBRUF0WCxLQUFBNkMsSUFBQXlVLEdBQUEsVUFFQTVZLEtBQUE0YixHQUFBdGEsS0FBQWlJLE9BQUFvUCxFQUFBRSxHQUNBN1ksS0FBQTZiLEdBQUF2YSxLQUFBaUksT0FBQStPLEVBQUFHLEtBSUF6WSxLQUFBNGIsR0FBQSxFQUNBNWIsS0FBQTZiLEdBQUF2YSxLQUFBaUksTUFBQWlQLEVBQUFILElBSUEsTUFFQSxJQUFBLE1BRUFyWSxLQUFBNGIsR0FBQXRhLEtBQUFrd0IsTUFBQXh2QixHQUFBMlcsR0FBQSxFQUFBLElBRUFyWCxLQUFBNkMsSUFBQXdVLEdBQUEsVUFFQTNZLEtBQUEyYixHQUFBcmEsS0FBQWlJLE1BQUFxUCxFQUFBQyxHQUNBN1ksS0FBQTZiLEdBQUF2YSxLQUFBaUksTUFBQWlQLEVBQUFILEtBSUFyWSxLQUFBMmIsR0FBQSxFQUNBM2IsS0FBQTZiLEdBQUF2YSxLQUFBaUksT0FBQStPLEVBQUFHLElBSUEsTUFFQSxJQUFBLE1BRUF6WSxLQUFBNmIsR0FBQXZhLEtBQUFrd0IsS0FBQXh2QixHQUFBd1csR0FBQSxFQUFBLElBRUFsWCxLQUFBNkMsSUFBQXFVLEdBQUEsVUFFQXhZLEtBQUEyYixHQUFBcmEsS0FBQWlJLE9BQUFtUCxFQUFBRCxHQUNBelksS0FBQTRiLEdBQUF0YSxLQUFBaUksT0FBQW9QLEVBQUFOLEtBSUFyWSxLQUFBMmIsR0FBQSxFQUNBM2IsS0FBQTRiLEdBQUF0YSxLQUFBaUksTUFBQWdQLEVBQUFNLElBSUEsTUFFQSxJQUFBLE1BRUE3WSxLQUFBNmIsR0FBQXZhLEtBQUFrd0IsTUFBQXh2QixHQUFBc1csR0FBQSxFQUFBLElBRUFoWCxLQUFBNkMsSUFBQW1VLEdBQUEsVUFFQXRZLEtBQUEyYixHQUFBcmEsS0FBQWlJLE1BQUFxUCxFQUFBSCxHQUNBelksS0FBQTRiLEdBQUF0YSxLQUFBaUksTUFBQWdQLEVBQUFGLEtBSUFyWSxLQUFBMmIsR0FBQXJhLEtBQUFpSSxPQUFBbVAsRUFBQUcsR0FDQTdZLEtBQUE0YixHQUFBLEdBSUEsTUFFQSxRQUVBaFYsUUFBQUMsS0FBQSx1RUFBQWIsR0FRQSxPQUpBaEcsS0FBQTBkLE9BQUExWCxHQUVBLElBQUF5WCxHQUFBemQsS0FBQXFkLG9CQUVBcmQsSUFFQSxDQUVBLGlCQUFBeXhCLENBQUE3ckIsRUFBQUksRUFBQXlYLEdBSUEsT0FGQTBULEdBQUF4RCwyQkFBQS9uQixHQUVBNUYsS0FBQWtlLHNCQUFBaVQsR0FBQW5yQixFQUFBeVgsRUFFQSxDQUVBLGNBQUFpVSxDQUFBL3BCLEVBQUEzQixFQUFBaEcsS0FBQTBkLFFBRUEsT0FBQTFkLEtBQUEyRyxJQUFBZ0IsRUFBQW5GLEVBQUFtRixFQUFBbEYsRUFBQWtGLEVBQUFnUSxFQUFBM1IsRUFFQSxDQUVBLE9BQUEyckIsQ0FBQUMsR0FNQSxPQUZBUixHQUFBN1QsYUFBQXZkLE1BRUFBLEtBQUF5eEIsa0JBQUFMLEdBQUFRLEVBRUEsQ0FFQSxNQUFBdG5CLENBQUFrVCxHQUVBLE9BQUFBLEVBQUE3QixLQUFBM2IsS0FBQTJiLElBQUE2QixFQUFBNUIsS0FBQTViLEtBQUE0YixJQUFBNEIsRUFBQTNCLEtBQUE3YixLQUFBNmIsSUFBQTJCLEVBQUFFLFNBQUExZCxLQUFBMGQsTUFFQSxDQUVBLFNBQUFuVCxDQUFBMUosR0FTQSxPQVBBYixLQUFBMmIsR0FBQTlhLEVBQUEsR0FDQWIsS0FBQTRiLEdBQUEvYSxFQUFBLEdBQ0FiLEtBQUE2YixHQUFBaGIsRUFBQSxRQUNBZCxJQUFBYyxFQUFBLEtBQUFiLEtBQUEwZCxPQUFBN2MsRUFBQSxJQUVBYixLQUFBcWQsb0JBRUFyZCxJQUVBLENBRUEsT0FBQXlLLENBQUE1SixFQUFBLEdBQUEySixFQUFBLEdBT0EsT0FMQTNKLEVBQUEySixHQUFBeEssS0FBQTJiLEdBQ0E5YSxFQUFBMkosRUFBQSxHQUFBeEssS0FBQTRiLEdBQ0EvYSxFQUFBMkosRUFBQSxHQUFBeEssS0FBQTZiLEdBQ0FoYixFQUFBMkosRUFBQSxHQUFBeEssS0FBQTBkLE9BRUE3YyxDQUVBLENBRUEsU0FBQW9mLENBQUFDLEdBSUEsT0FGQWxnQixLQUFBcWQsa0JBQUE2QyxFQUVBbGdCLElBRUEsQ0FFQSxpQkFBQXFkLEdBQUEsQ0FFQSxFQUFBclMsT0FBQUMsa0JBRUFqTCxLQUFBMmIsU0FDQTNiLEtBQUE0YixTQUNBNWIsS0FBQTZiLFNBQ0E3YixLQUFBMGQsTUFFQSxFQUlBMlQsR0FBQUMsY0FBQSxNQ3hUQSxNQUFBTyxHQUVBLFdBQUFqdkIsR0FFQTVDLEtBQUE4eEIsS0FBQSxDQUVBLENBRUEsR0FBQW5yQixDQUFBc1AsR0FFQWpXLEtBQUE4eEIsTUFBQSxHQUFBN2IsRUFBQSxLQUFBLENBRUEsQ0FFQSxNQUFBOGIsQ0FBQTliLEdBRUFqVyxLQUFBOHhCLE1BQUEsR0FBQTdiLEVBQUEsQ0FFQSxDQUVBLFNBQUErYixHQUVBaHlCLEtBQUE4eEIsTUFBQSxDQUVBLENBRUEsTUFBQUcsQ0FBQWhjLEdBRUFqVyxLQUFBOHhCLE1BQUEsR0FBQTdiLEVBQUEsQ0FFQSxDQUVBLE9BQUFpYyxDQUFBamMsR0FFQWpXLEtBQUE4eEIsUUFBQSxHQUFBN2IsRUFBQSxFQUVBLENBRUEsVUFBQWtjLEdBRUFueUIsS0FBQTh4QixLQUFBLENBRUEsQ0FFQSxJQUFBaGYsQ0FBQXNmLEdBRUEsT0FBQSxJQUFBcHlCLEtBQUE4eEIsS0FBQU0sRUFBQU4sS0FFQSxDQUVBLFNBQUFPLENBQUFwYyxHQUVBLE9BQUEsSUFBQWpXLEtBQUE4eEIsTUFBQSxHQUFBN2IsRUFBQSxHQUVBLEVDN0NBLElBQUFxYyxHQUFBLEVBRUEsTUFBQUMsR0FBQSxJQUFBcFMsR0FDQXFTLEdBQUEsSUFBQS9XLEdBQ0FnWCxHQUFBLElBQUExRyxHQUNBMkcsR0FBQSxJQUFBdlMsR0FFQXdTLEdBQUEsSUFBQXhTLEdBQ0F5UyxHQUFBLElBQUF6UyxHQUNBMFMsR0FBQSxJQUFBcFgsR0FFQXFYLEdBQUEsSUFBQTNTLEdBQUEsRUFBQSxFQUFBLEdBQ0E0UyxHQUFBLElBQUE1UyxHQUFBLEVBQUEsRUFBQSxHQUNBNlMsR0FBQSxJQUFBN1MsR0FBQSxFQUFBLEVBQUEsR0FFQThTLEdBQUEsQ0FBQXB6QixLQUFBLFNBQ0FxekIsR0FBQSxDQUFBcnpCLEtBQUEsV0FFQXN6QixHQUFBLENBQUF0ekIsS0FBQSxhQUFBdXpCLE1BQUEsTUFDQUMsR0FBQSxDQUFBeHpCLEtBQUEsZUFBQXV6QixNQUFBLE1BRUEsTUFBQUUsV0FBQTN6QixHQUVBLFdBQUFpRCxHQUVBaVQsUUFFQTdWLEtBQUF1ekIsWUFBQSxFQUVBdmYsT0FBQUMsZUFBQWpVLEtBQUEsS0FBQSxDQUFBaUMsTUFBQXF3QixPQUVBdHlCLEtBQUFrVSxLQUFBelMsS0FFQXpCLEtBQUFvUSxLQUFBLEdBQ0FwUSxLQUFBSCxLQUFBLFdBRUFHLEtBQUF3ekIsT0FBQSxLQUNBeHpCLEtBQUEwbEIsU0FBQSxHQUVBMWxCLEtBQUFndUIsR0FBQXNGLEdBQUFHLFdBQUFoc0IsUUFFQSxNQUFBbW9CLEVBQUEsSUFBQXpQLEdBQ0FqUixFQUFBLElBQUFtaUIsR0FDQS9ULEVBQUEsSUFBQTdCLEdBQ0FwTSxFQUFBLElBQUE4USxHQUFBLEVBQUEsRUFBQSxHQWNBalIsRUFBQStRLFdBWkEsV0FFQTNDLEVBQUFDLGFBQUFyTyxHQUFBLEVBRUEsSUFTQW9PLEVBQUEyQyxXQVBBLFdBRUEvUSxFQUFBdWlCLGtCQUFBblUsT0FBQXZkLEdBQUEsRUFFQSxJQUtBaVUsT0FBQTBmLGlCQUFBMXpCLEtBQUEsQ0FDQTR2QixTQUFBLENBQ0ErRCxjQUFBLEVBQ0FDLFlBQUEsRUFDQTN4QixNQUFBMnRCLEdBRUExZ0IsU0FBQSxDQUNBeWtCLGNBQUEsRUFDQUMsWUFBQSxFQUNBM3hCLE1BQUFpTixHQUVBb08sV0FBQSxDQUNBcVcsY0FBQSxFQUNBQyxZQUFBLEVBQ0EzeEIsTUFBQXFiLEdBRUFqTyxNQUFBLENBQ0Fza0IsY0FBQSxFQUNBQyxZQUFBLEVBQ0EzeEIsTUFBQW9OLEdBRUF3a0IsZ0JBQUEsQ0FDQTV4QixNQUFBLElBQUE4cEIsSUFFQStILGFBQUEsQ0FDQTd4QixNQUFBLElBQUFpSixNQUlBbEwsS0FBQTRQLE9BQUEsSUFBQW1jLEdBQ0EvckIsS0FBQXloQixZQUFBLElBQUFzSyxHQUVBL3JCLEtBQUFvVyxpQkFBQWtkLEdBQUFTLDJCQUVBL3pCLEtBQUFnMEIsc0JBQUFWLEdBQUFXLGlDQUNBajBCLEtBQUFrMEIsd0JBQUEsRUFFQWwwQixLQUFBb3lCLE9BQUEsSUFBQVAsR0FDQTd4QixLQUFBbTBCLFNBQUEsRUFFQW4wQixLQUFBbzBCLFlBQUEsRUFDQXAwQixLQUFBcTBCLGVBQUEsRUFFQXIwQixLQUFBczBCLGVBQUEsRUFDQXQwQixLQUFBdTBCLFlBQUEsRUFFQXYwQixLQUFBdzBCLFdBQUEsR0FFQXgwQixLQUFBeVcsU0FBQSxDQUFBLENBRUEsQ0FFQSxjQUFBZ2UsR0FBQSxDQUVBLGFBQUFDLEdBQUEsQ0FFQSxjQUFBQyxHQUFBLENBRUEsYUFBQUMsR0FBQSxDQUVBLFlBQUE1YyxDQUFBcEksR0FFQTVQLEtBQUFvVyxrQkFBQXBXLEtBQUE2VyxlQUVBN1csS0FBQTRQLE9BQUFyRCxZQUFBcUQsR0FFQTVQLEtBQUE0UCxPQUFBdWdCLFVBQUFud0IsS0FBQTR2QixTQUFBNXZCLEtBQUFzZCxXQUFBdGQsS0FBQXFQLE1BRUEsQ0FFQSxlQUFBa1IsQ0FBQTNhLEdBSUEsT0FGQTVGLEtBQUFzZCxXQUFBL1EsWUFBQTNHLEdBRUE1RixJQUVBLENBRUEsd0JBQUE2MEIsQ0FBQTdXLEVBQUExVSxHQUlBdEosS0FBQXNkLFdBQUFTLGlCQUFBQyxFQUFBMVUsRUFFQSxDQUVBLG9CQUFBd3JCLENBQUF0WCxHQUVBeGQsS0FBQXNkLFdBQUFDLGFBQUFDLEdBQUEsRUFFQSxDQUVBLHFCQUFBdVgsQ0FBQXp5QixHQUlBdEMsS0FBQXNkLFdBQUFZLHNCQUFBNWIsRUFFQSxDQUVBLHlCQUFBMHlCLENBQUFwdkIsR0FJQTVGLEtBQUFzZCxXQUFBNVYsS0FBQTlCLEVBRUEsQ0FFQSxZQUFBcXZCLENBQUFqWCxFQUFBMVUsR0FTQSxPQUpBa3BCLEdBQUF6VSxpQkFBQUMsRUFBQTFVLEdBRUF0SixLQUFBc2QsV0FBQW5WLFNBQUFxcUIsSUFFQXh5QixJQUVBLENBRUEsaUJBQUFrMUIsQ0FBQWxYLEVBQUExVSxHQVVBLE9BSkFrcEIsR0FBQXpVLGlCQUFBQyxFQUFBMVUsR0FFQXRKLEtBQUFzZCxXQUFBL1EsWUFBQWltQixJQUVBeHlCLElBRUEsQ0FFQSxPQUFBbTFCLENBQUE3ckIsR0FFQSxPQUFBdEosS0FBQWkxQixhQUFBbkMsR0FBQXhwQixFQUVBLENBRUEsT0FBQThyQixDQUFBOXJCLEdBRUEsT0FBQXRKLEtBQUFpMUIsYUFBQWxDLEdBQUF6cEIsRUFFQSxDQUVBLE9BQUErckIsQ0FBQS9yQixHQUVBLE9BQUF0SixLQUFBaTFCLGFBQUFqQyxHQUFBMXBCLEVBRUEsQ0FFQSxlQUFBZ3NCLENBQUF0WCxFQUFBdVgsR0FTQSxPQUpBaEQsR0FBQTdxQixLQUFBc1csR0FBQXVDLGdCQUFBdmdCLEtBQUFzZCxZQUVBdGQsS0FBQTR2QixTQUFBaG9CLElBQUEycUIsR0FBQW5xQixlQUFBbXRCLElBRUF2MUIsSUFFQSxDQUVBLFVBQUF3MUIsQ0FBQUQsR0FFQSxPQUFBdjFCLEtBQUFzMUIsZ0JBQUF4QyxHQUFBeUMsRUFFQSxDQUVBLFVBQUFFLENBQUFGLEdBRUEsT0FBQXYxQixLQUFBczFCLGdCQUFBdkMsR0FBQXdDLEVBRUEsQ0FFQSxVQUFBRyxDQUFBSCxHQUVBLE9BQUF2MUIsS0FBQXMxQixnQkFBQXRDLEdBQUF1QyxFQUVBLENBRUEsWUFBQUksQ0FBQTlRLEdBSUEsT0FGQTdrQixLQUFBK2tCLG1CQUFBLEdBQUEsR0FFQUYsRUFBQTdNLGFBQUFoWSxLQUFBeWhCLFlBRUEsQ0FFQSxZQUFBbVUsQ0FBQS9RLEdBSUEsT0FGQTdrQixLQUFBK2tCLG1CQUFBLEdBQUEsR0FFQUYsRUFBQTdNLGFBQUF5YSxHQUFBL3FCLEtBQUExSCxLQUFBeWhCLGFBQUF4VCxTQUVBLENBRUEsTUFBQW9iLENBQUE3bUIsRUFBQUMsRUFBQWtWLEdBSUFuVixFQUFBNGQsVUFFQXNTLEdBQUFockIsS0FBQWxGLEdBSUFrd0IsR0FBQS9yQixJQUFBbkUsRUFBQUMsRUFBQWtWLEdBSUEsTUFBQTZiLEVBQUF4ekIsS0FBQXd6QixPQUVBeHpCLEtBQUEra0IsbUJBQUEsR0FBQSxHQUVBNE4sR0FBQXZaLHNCQUFBcFosS0FBQXloQixhQUVBemhCLEtBQUE2MUIsVUFBQTcxQixLQUFBODFCLFFBRUFyRCxHQUFBcEosT0FBQXNKLEdBQUFELEdBQUExeUIsS0FBQWd1QixJQUlBeUUsR0FBQXBKLE9BQUFxSixHQUFBQyxHQUFBM3lCLEtBQUFndUIsSUFJQWh1QixLQUFBc2QsV0FBQVksc0JBQUF1VSxJQUVBZSxJQUVBZixHQUFBOUYsZ0JBQUE2RyxFQUFBL1IsYUFDQStRLEdBQUF0VSxzQkFBQXVVLElBQ0F6eUIsS0FBQXNkLFdBQUEvUSxZQUFBaW1CLEdBQUF2a0IsVUFJQSxDQUVBLEdBQUFyRyxDQUFBd2MsR0FFQSxHQUFBMlIsVUFBQTkwQixPQUFBLEVBQUEsQ0FFQSxJQUFBLElBQUFGLEVBQUEsRUFBQUEsRUFBQWcxQixVQUFBOTBCLE9BQUFGLElBRUFmLEtBQUE0SCxJQUFBbXVCLFVBQUFoMUIsSUFJQSxPQUFBZixJQUVBLENBRUEsT0FBQW9rQixJQUFBcGtCLE1BRUE0RyxRQUFBb3ZCLE1BQUEsa0VBQUE1UixHQUNBcGtCLE9BSUFva0IsR0FBQUEsRUFBQW1QLFlBRUFuUCxFQUFBNlIsbUJBQ0E3UixFQUFBb1AsT0FBQXh6QixLQUNBQSxLQUFBMGxCLFNBQUF0bEIsS0FBQWdrQixHQUVBQSxFQUFBMWpCLGNBQUF1eUIsSUFFQUUsR0FBQUMsTUFBQWhQLEVBQ0Fwa0IsS0FBQVUsY0FBQXl5QixJQUNBQSxHQUFBQyxNQUFBLE1BSUF4c0IsUUFBQW92QixNQUFBLGdFQUFBNVIsR0FJQXBrQixLQUVBLENBRUEsTUFBQWsyQixDQUFBOVIsR0FFQSxHQUFBMlIsVUFBQTkwQixPQUFBLEVBQUEsQ0FFQSxJQUFBLElBQUFGLEVBQUEsRUFBQUEsRUFBQWcxQixVQUFBOTBCLE9BQUFGLElBRUFmLEtBQUFrMkIsT0FBQUgsVUFBQWgxQixJQUlBLE9BQUFmLElBRUEsQ0FFQSxNQUFBUSxFQUFBUixLQUFBMGxCLFNBQUF2bEIsUUFBQWlrQixHQWVBLE9BYkEsSUFBQTVqQixJQUVBNGpCLEVBQUFvUCxPQUFBLEtBQ0F4ekIsS0FBQTBsQixTQUFBamxCLE9BQUFELEVBQUEsR0FFQTRqQixFQUFBMWpCLGNBQUF3eUIsSUFFQUcsR0FBQUQsTUFBQWhQLEVBQ0Fwa0IsS0FBQVUsY0FBQTJ5QixJQUNBQSxHQUFBRCxNQUFBLE1BSUFwekIsSUFFQSxDQUVBLGdCQUFBaTJCLEdBRUEsTUFBQXpDLEVBQUF4ekIsS0FBQXd6QixPQVFBLE9BTkEsT0FBQUEsR0FFQUEsRUFBQTBDLE9BQUFsMkIsTUFJQUEsSUFFQSxDQUVBLEtBQUFrYixHQUVBLE9BQUFsYixLQUFBazJCLFVBQUFsMkIsS0FBQTBsQixTQUVBLENBRUEsTUFBQXlRLENBQUEvUixHQWdDQSxPQTFCQXBrQixLQUFBK2tCLG1CQUFBLEdBQUEsR0FFQTBOLEdBQUEvcUIsS0FBQTFILEtBQUF5aEIsYUFBQXhULFNBRUEsT0FBQW1XLEVBQUFvUCxTQUVBcFAsRUFBQW9QLE9BQUF6TyxtQkFBQSxHQUFBLEdBRUEwTixHQUFBdHFCLFNBQUFpYyxFQUFBb1AsT0FBQS9SLGNBSUEyQyxFQUFBcE0sYUFBQXlhLElBRUFyTyxFQUFBNlIsbUJBQ0E3UixFQUFBb1AsT0FBQXh6QixLQUNBQSxLQUFBMGxCLFNBQUF0bEIsS0FBQWdrQixHQUVBQSxFQUFBVyxtQkFBQSxHQUFBLEdBRUFYLEVBQUExakIsY0FBQXV5QixJQUVBRSxHQUFBQyxNQUFBaFAsRUFDQXBrQixLQUFBVSxjQUFBeXlCLElBQ0FBLEdBQUFDLE1BQUEsS0FFQXB6QixJQUVBLENBRUEsYUFBQW8yQixDQUFBQyxHQUVBLE9BQUFyMkIsS0FBQXMyQixvQkFBQSxLQUFBRCxFQUVBLENBRUEsZUFBQUUsQ0FBQW5tQixHQUVBLE9BQUFwUSxLQUFBczJCLG9CQUFBLE9BQUFsbUIsRUFFQSxDQUVBLG1CQUFBa21CLENBQUFsbUIsRUFBQW5PLEdBRUEsR0FBQWpDLEtBQUFvUSxLQUFBbk8sRUFBQSxPQUFBakMsS0FFQSxJQUFBLElBQUFlLEVBQUEsRUFBQUMsRUFBQWhCLEtBQUEwbEIsU0FBQXprQixPQUFBRixFQUFBQyxFQUFBRCxJQUFBLENBRUEsTUFDQXFqQixFQURBcGtCLEtBQUEwbEIsU0FBQTNrQixHQUNBdTFCLG9CQUFBbG1CLEVBQUFuTyxHQUVBLFFBQUFsQyxJQUFBcWtCLEVBRUEsT0FBQUEsQ0FJQSxDQUlBLENBRUEsb0JBQUFvUyxDQUFBcG1CLEVBQUFuTyxFQUFBdzBCLEVBQUEsSUFFQXoyQixLQUFBb1EsS0FBQW5PLEdBQUF3MEIsRUFBQXIyQixLQUFBSixNQUVBLE1BQUEwbEIsRUFBQTFsQixLQUFBMGxCLFNBRUEsSUFBQSxJQUFBM2tCLEVBQUEsRUFBQUMsRUFBQTBrQixFQUFBemtCLE9BQUFGLEVBQUFDLEVBQUFELElBRUEya0IsRUFBQTNrQixHQUFBeTFCLHFCQUFBcG1CLEVBQUFuTyxFQUFBdzBCLEdBSUEsT0FBQUEsQ0FFQSxDQUVBLGdCQUFBQyxDQUFBOTFCLEdBSUEsT0FGQVosS0FBQStrQixtQkFBQSxHQUFBLEdBRUFua0IsRUFBQXdZLHNCQUFBcFosS0FBQXloQixZQUVBLENBRUEsa0JBQUFrVixDQUFBLzFCLEdBTUEsT0FKQVosS0FBQStrQixtQkFBQSxHQUFBLEdBRUEva0IsS0FBQXloQixZQUFBME8sVUFBQXdDLEdBQUEveEIsRUFBQWd5QixJQUVBaHlCLENBRUEsQ0FFQSxhQUFBZzJCLENBQUFoMkIsR0FNQSxPQUpBWixLQUFBK2tCLG1CQUFBLEdBQUEsR0FFQS9rQixLQUFBeWhCLFlBQUEwTyxVQUFBd0MsR0FBQUUsR0FBQWp5QixHQUVBQSxDQUVBLENBRUEsaUJBQUFpMkIsQ0FBQWoyQixHQUVBWixLQUFBK2tCLG1CQUFBLEdBQUEsR0FFQSxNQUFBdmMsRUFBQXhJLEtBQUF5aEIsWUFBQWhaLFNBRUEsT0FBQTdILEVBQUErRixJQUFBNkIsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsS0FBQW5GLFdBRUEsQ0FFQSxPQUFBeXpCLEdBQUEsQ0FFQSxRQUFBQyxDQUFBN1csR0FFQUEsRUFBQWxnQixNQUVBLE1BQUEwbEIsRUFBQTFsQixLQUFBMGxCLFNBRUEsSUFBQSxJQUFBM2tCLEVBQUEsRUFBQUMsRUFBQTBrQixFQUFBemtCLE9BQUFGLEVBQUFDLEVBQUFELElBRUEya0IsRUFBQTNrQixHQUFBZzJCLFNBQUE3VyxFQUlBLENBRUEsZUFBQThXLENBQUE5VyxHQUVBLElBQUEsSUFBQWxnQixLQUFBbTBCLFFBQUEsT0FFQWpVLEVBQUFsZ0IsTUFFQSxNQUFBMGxCLEVBQUExbEIsS0FBQTBsQixTQUVBLElBQUEsSUFBQTNrQixFQUFBLEVBQUFDLEVBQUEwa0IsRUFBQXprQixPQUFBRixFQUFBQyxFQUFBRCxJQUVBMmtCLEVBQUEza0IsR0FBQWkyQixnQkFBQTlXLEVBSUEsQ0FFQSxpQkFBQStXLENBQUEvVyxHQUVBLE1BQUFzVCxFQUFBeHpCLEtBQUF3ekIsT0FFQSxPQUFBQSxJQUVBdFQsRUFBQXNULEdBRUFBLEVBQUF5RCxrQkFBQS9XLEdBSUEsQ0FFQSxZQUFBckosR0FFQTdXLEtBQUE0UCxPQUFBZ2UsUUFBQTV0QixLQUFBNHZCLFNBQUE1dkIsS0FBQXNkLFdBQUF0ZCxLQUFBcVAsT0FFQXJQLEtBQUFrMEIsd0JBQUEsQ0FFQSxDQUVBLGlCQUFBZ0QsQ0FBQUMsR0FFQW4zQixLQUFBb1csa0JBQUFwVyxLQUFBNlcsZ0JBRUE3VyxLQUFBazBCLHdCQUFBaUQsTUFFQSxJQUFBbjNCLEtBQUFnMEIsd0JBRUEsT0FBQWgwQixLQUFBd3pCLE9BRUF4ekIsS0FBQXloQixZQUFBL1osS0FBQTFILEtBQUE0UCxRQUlBNVAsS0FBQXloQixZQUFBblYsaUJBQUF0TSxLQUFBd3pCLE9BQUEvUixZQUFBemhCLEtBQUE0UCxTQU1BNVAsS0FBQWswQix3QkFBQSxFQUVBaUQsR0FBQSxHQU1BLE1BQUF6UixFQUFBMWxCLEtBQUEwbEIsU0FFQSxJQUFBLElBQUEza0IsRUFBQSxFQUFBQyxFQUFBMGtCLEVBQUF6a0IsT0FBQUYsRUFBQUMsRUFBQUQsSUFBQSxDQUVBMmtCLEVBQUEza0IsR0FFQW0yQixrQkFBQUMsRUFFQSxDQUVBLENBRUEsaUJBQUFwUyxDQUFBcVMsRUFBQUMsR0FFQSxNQUFBN0QsRUFBQXh6QixLQUFBd3pCLE9BMEJBLElBeEJBLElBQUE0RCxHQUFBLE9BQUE1RCxHQUVBQSxFQUFBek8sbUJBQUEsR0FBQSxHQUlBL2tCLEtBQUFvVyxrQkFBQXBXLEtBQUE2VyxnQkFFQSxJQUFBN1csS0FBQWcwQix3QkFFQSxPQUFBaDBCLEtBQUF3ekIsT0FFQXh6QixLQUFBeWhCLFlBQUEvWixLQUFBMUgsS0FBQTRQLFFBSUE1UCxLQUFBeWhCLFlBQUFuVixpQkFBQXRNLEtBQUF3ekIsT0FBQS9SLFlBQUF6aEIsS0FBQTRQLFVBUUEsSUFBQXluQixFQUFBLENBRUEsTUFBQTNSLEVBQUExbEIsS0FBQTBsQixTQUVBLElBQUEsSUFBQTNrQixFQUFBLEVBQUFDLEVBQUEwa0IsRUFBQXprQixPQUFBRixFQUFBQyxFQUFBRCxJQUFBLENBRUEya0IsRUFBQTNrQixHQUVBZ2tCLG1CQUFBLEdBQUEsRUFFQSxDQUVBLENBRUEsQ0FFQSxNQUFBelEsQ0FBQUMsR0FHQSxNQUFBQyxPQUFBelUsSUFBQXdVLEdBQUEsaUJBQUFBLEVBRUFHLEVBQUEsQ0FBQSxFQUtBRixJQUdBRCxFQUFBLENBQ0EraUIsV0FBQSxDQUFBLEVBQ0FDLFVBQUEsQ0FBQSxFQUNBdGdCLFNBQUEsQ0FBQSxFQUNBeEMsT0FBQSxDQUFBLEVBQ0EraUIsT0FBQSxDQUFBLEVBQ0FDLFVBQUEsQ0FBQSxFQUNBakQsV0FBQSxDQUFBLEVBQ0FrRCxNQUFBLENBQUEsR0FHQWhqQixFQUFBd0MsU0FBQSxDQUNBOUMsUUFBQSxJQUNBdlUsS0FBQSxTQUNBc1gsVUFBQSxvQkFPQSxNQUFBaU4sRUFBQSxDQUFBLEVBb0ZBLFNBQUF1VCxFQUFBQyxFQUFBQyxHQVFBLFlBTkE5M0IsSUFBQTYzQixFQUFBQyxFQUFBM2pCLFFBRUEwakIsRUFBQUMsRUFBQTNqQixNQUFBMmpCLEVBQUF2akIsT0FBQUMsSUFJQXNqQixFQUFBM2pCLElBRUEsQ0FFQSxHQTlGQWtRLEVBQUFsUSxLQUFBbFUsS0FBQWtVLEtBQ0FrUSxFQUFBdmtCLEtBQUFHLEtBQUFILEtBRUEsS0FBQUcsS0FBQW9RLE9BQUFnVSxFQUFBaFUsS0FBQXBRLEtBQUFvUSxPQUNBLElBQUFwUSxLQUFBbzBCLGFBQUFoUSxFQUFBZ1EsWUFBQSxJQUNBLElBQUFwMEIsS0FBQXEwQixnQkFBQWpRLEVBQUFpUSxlQUFBLElBQ0EsSUFBQXIwQixLQUFBbTBCLFVBQUEvUCxFQUFBK1AsU0FBQSxJQUNBLElBQUFuMEIsS0FBQXMwQixnQkFBQWxRLEVBQUFrUSxlQUFBLEdBQ0EsSUFBQXQwQixLQUFBdTBCLGNBQUFuUSxFQUFBbVEsWUFBQXYwQixLQUFBdTBCLGFBQ0F2Z0IsT0FBQXFELEtBQUFyWCxLQUFBeVcsVUFBQXhWLE9BQUEsSUFBQW1qQixFQUFBM04sU0FBQXpXLEtBQUF5VyxVQUVBMk4sRUFBQWdPLE9BQUFweUIsS0FBQW95QixPQUFBTixLQUNBMU4sRUFBQXhVLE9BQUE1UCxLQUFBNFAsT0FBQW5GLFVBQ0EyWixFQUFBNEosR0FBQWh1QixLQUFBZ3VCLEdBQUF2akIsV0FFQSxJQUFBekssS0FBQW9XLG1CQUFBZ08sRUFBQWhPLGtCQUFBLEdBSUFwVyxLQUFBbWxCLGtCQUVBZixFQUFBdmtCLEtBQUEsZ0JBQ0F1a0IsRUFBQS9KLE1BQUFyYSxLQUFBcWEsTUFDQStKLEVBQUEwVCxlQUFBOTNCLEtBQUE4M0IsZUFBQXhqQixTQUNBLE9BQUF0VSxLQUFBKzNCLGdCQUFBM1QsRUFBQTJULGNBQUEvM0IsS0FBQSszQixjQUFBempCLFdBSUF0VSxLQUFBZzRCLGdCQUVBNVQsRUFBQXZrQixLQUFBLGNBQ0F1a0IsRUFBQTZULHVCQUFBajRCLEtBQUFpNEIsdUJBQ0E3VCxFQUFBOFQsWUFBQWw0QixLQUFBazRCLFlBRUE5VCxFQUFBK1QsV0FBQW40QixLQUFBbzRCLFlBQ0FoVSxFQUFBaVUsZUFBQXI0QixLQUFBczRCLGdCQUVBbFUsRUFBQW1VLFdBQUF2NEIsS0FBQXc0QixZQUNBcFUsRUFBQXFVLE9BQUF6NEIsS0FBQTA0QixRQUNBdFUsRUFBQXVVLE9BQUEzNEIsS0FBQTQ0QixRQUFBQyxLQUFBQyxJQUFBLENBQ0FDLGVBQUFELEVBQUFDLGVBQ0FDLE9BQUFGLEVBQUF2VSxJQUFBcmlCLElBQUF1SSxVQUNBd3VCLE9BQUFILEVBQUF2VSxJQUFBcGlCLElBQUFzSSxVQUVBeXVCLGtCQUFBSixFQUFBSSxrQkFDQUMsYUFBQUwsRUFBQTlTLE9BQUFyRCxPQUNBeVcsYUFBQU4sRUFBQTlTLE9BQUFqYixPQUFBTixjQUdBMlosRUFBQWlWLGlCQUFBcjVCLEtBQUFzNUIsa0JBQ0FsVixFQUFBbVYsZUFBQXY1QixLQUFBdzVCLGdCQUNBcFYsRUFBQXFWLGNBQUF6NUIsS0FBQTA1QixlQUVBdFYsRUFBQXVWLG9CQUFBMzVCLEtBQUE0NUIscUJBQ0F4VixFQUFBeVYsY0FBQTc1QixLQUFBODVCLGVBRUExVixFQUFBMlYsZ0JBQUEvNUIsS0FBQWc2QixpQkFBQTFsQixPQUFBQyxHQUVBLE9BQUF2VSxLQUFBaTZCLGlCQUFBN1YsRUFBQThWLGNBQUFsNkIsS0FBQWk2QixlQUFBM2xCLE9BQUFDLElBRUEsT0FBQXZVLEtBQUFtNkIsaUJBRUEvVixFQUFBK1YsZUFBQSxDQUNBcHZCLE9BQUFxWixFQUFBK1YsZUFBQXB2QixPQUFBTixVQUNBa1ksT0FBQXlCLEVBQUErVixlQUFBeFgsU0FLQSxPQUFBM2lCLEtBQUFzbEIsY0FFQWxCLEVBQUFrQixZQUFBLENBQ0FwakIsSUFBQWtpQixFQUFBa0IsWUFBQXBqQixJQUFBdUksVUFDQXRJLElBQUFpaUIsRUFBQWtCLFlBQUFuakIsSUFBQXNJLGFBcUJBekssS0FBQW82QixRQUVBcDZCLEtBQUFxNkIsYUFFQXI2QixLQUFBcTZCLFdBQUFDLFFBRUFsVyxFQUFBaVcsV0FBQXI2QixLQUFBcTZCLFdBQUEvbEIsU0FFQXRVLEtBQUFxNkIsV0FBQXZrQixZQUVBc08sRUFBQWlXLFdBQUFyNkIsS0FBQXE2QixXQUFBL2xCLE9BQUFDLEdBQUFMLE9BTUFsVSxLQUFBdTZCLGFBQUF2NkIsS0FBQXU2QixZQUFBemtCLFlBQUEsSUFBQTlWLEtBQUF1NkIsWUFBQTVqQix3QkFFQXlOLEVBQUFtVyxZQUFBdjZCLEtBQUF1NkIsWUFBQWptQixPQUFBQyxHQUFBTCxXQUlBLEdBQUFsVSxLQUFBb2xCLFFBQUFwbEIsS0FBQXc2QixRQUFBeDZCLEtBQUF5NkIsU0FBQSxDQUVBclcsRUFBQVksU0FBQTJTLEVBQUFwakIsRUFBQStpQixXQUFBdDNCLEtBQUFnbEIsVUFFQSxNQUFBMFYsRUFBQTE2QixLQUFBZ2xCLFNBQUEwVixXQUVBLFFBQUEzNkIsSUFBQTI2QixRQUFBMzZCLElBQUEyNkIsRUFBQWxELE9BQUEsQ0FFQSxNQUFBQSxFQUFBa0QsRUFBQWxELE9BRUEsR0FBQTVpQixNQUFBQyxRQUFBMmlCLEdBRUEsSUFBQSxJQUFBejJCLEVBQUEsRUFBQUMsRUFBQXcyQixFQUFBdjJCLE9BQUFGLEVBQUFDLEVBQUFELElBQUEsQ0FFQSxNQUFBNDVCLEVBQUFuRCxFQUFBejJCLEdBRUE0MkIsRUFBQXBqQixFQUFBaWpCLE9BQUFtRCxFQUVBLE1BSUFoRCxFQUFBcGpCLEVBQUFpakIsT0FBQUEsRUFJQSxDQUVBLENBaUJBLEdBZkF4M0IsS0FBQTQ2QixnQkFFQXhXLEVBQUF5VyxTQUFBNzZCLEtBQUE2NkIsU0FDQXpXLEVBQUEwVyxXQUFBOTZCLEtBQUE4NkIsV0FBQXJ3QixlQUVBMUssSUFBQUMsS0FBQSs2QixXQUVBcEQsRUFBQXBqQixFQUFBa2pCLFVBQUF6M0IsS0FBQSs2QixVQUVBM1csRUFBQTJXLFNBQUEvNkIsS0FBQSs2QixTQUFBN21CLFlBTUFuVSxJQUFBQyxLQUFBZzdCLFNBRUEsR0FBQXBtQixNQUFBQyxRQUFBN1UsS0FBQWc3QixVQUFBLENBRUEsTUFBQUMsRUFBQSxHQUVBLElBQUEsSUFBQWw2QixFQUFBLEVBQUFDLEVBQUFoQixLQUFBZzdCLFNBQUEvNUIsT0FBQUYsRUFBQUMsRUFBQUQsSUFFQWs2QixFQUFBNzZCLEtBQUF1M0IsRUFBQXBqQixFQUFBZ2pCLFVBQUF2M0IsS0FBQWc3QixTQUFBajZCLEtBSUFxakIsRUFBQTRXLFNBQUFDLENBRUEsTUFFQTdXLEVBQUE0VyxTQUFBckQsRUFBQXBqQixFQUFBZ2pCLFVBQUF2M0IsS0FBQWc3QixVQVFBLEdBQUFoN0IsS0FBQTBsQixTQUFBemtCLE9BQUEsRUFBQSxDQUVBbWpCLEVBQUFzQixTQUFBLEdBRUEsSUFBQSxJQUFBM2tCLEVBQUEsRUFBQUEsRUFBQWYsS0FBQTBsQixTQUFBemtCLE9BQUFGLElBRUFxakIsRUFBQXNCLFNBQUF0bEIsS0FBQUosS0FBQTBsQixTQUFBM2tCLEdBQUF1VCxPQUFBQyxHQUFBNlAsT0FJQSxDQUlBLEdBQUFwa0IsS0FBQXcwQixXQUFBdnpCLE9BQUEsRUFBQSxDQUVBbWpCLEVBQUFvUSxXQUFBLEdBRUEsSUFBQSxJQUFBenpCLEVBQUEsRUFBQUEsRUFBQWYsS0FBQXcwQixXQUFBdnpCLE9BQUFGLElBQUEsQ0FFQSxNQUFBbTZCLEVBQUFsN0IsS0FBQXcwQixXQUFBenpCLEdBRUFxakIsRUFBQW9RLFdBQUFwMEIsS0FBQXUzQixFQUFBcGpCLEVBQUFpZ0IsV0FBQTBHLEdBRUEsQ0FFQSxDQUVBLEdBQUExbUIsRUFBQSxDQUVBLE1BQUE4aUIsRUFBQTZELEVBQUE1bUIsRUFBQStpQixZQUNBQyxFQUFBNEQsRUFBQTVtQixFQUFBZ2pCLFdBQ0F0Z0IsRUFBQWtrQixFQUFBNW1CLEVBQUEwQyxVQUNBeEMsRUFBQTBtQixFQUFBNW1CLEVBQUFFLFFBQ0EraUIsRUFBQTJELEVBQUE1bUIsRUFBQWlqQixRQUNBQyxFQUFBMEQsRUFBQTVtQixFQUFBa2pCLFdBQ0FqRCxFQUFBMkcsRUFBQTVtQixFQUFBaWdCLFlBQ0FrRCxFQUFBeUQsRUFBQTVtQixFQUFBbWpCLE9BRUFKLEVBQUFyMkIsT0FBQSxJQUFBeVQsRUFBQTRpQixXQUFBQSxHQUNBQyxFQUFBdDJCLE9BQUEsSUFBQXlULEVBQUE2aUIsVUFBQUEsR0FDQXRnQixFQUFBaFcsT0FBQSxJQUFBeVQsRUFBQXVDLFNBQUFBLEdBQ0F4QyxFQUFBeFQsT0FBQSxJQUFBeVQsRUFBQUQsT0FBQUEsR0FDQStpQixFQUFBdjJCLE9BQUEsSUFBQXlULEVBQUE4aUIsT0FBQUEsR0FDQUMsRUFBQXgyQixPQUFBLElBQUF5VCxFQUFBK2lCLFVBQUFBLEdBQ0FqRCxFQUFBdnpCLE9BQUEsSUFBQXlULEVBQUE4ZixXQUFBQSxHQUNBa0QsRUFBQXoyQixPQUFBLElBQUF5VCxFQUFBZ2pCLE1BQUFBLEVBRUEsQ0FJQSxPQUZBaGpCLEVBQUEwUCxPQUFBQSxFQUVBMVAsRUFLQSxTQUFBeW1CLEVBQUFDLEdBRUEsTUFBQUMsRUFBQSxHQUNBLElBQUEsTUFBQUMsS0FBQUYsRUFBQSxDQUVBLE1BQUF4bkIsRUFBQXduQixFQUFBRSxVQUNBMW5CLEVBQUFzRCxTQUNBbWtCLEVBQUFqN0IsS0FBQXdULEVBRUEsQ0FFQSxPQUFBeW5CLENBRUEsQ0FFQSxDQUVBLEtBQUE1ekIsQ0FBQTh6QixHQUVBLE9BQUEsSUFBQXY3QixLQUFBNEMsYUFBQThFLEtBQUExSCxLQUFBdTdCLEVBRUEsQ0FFQSxJQUFBN3pCLENBQUFxTyxFQUFBd2xCLEdBQUEsR0FnQ0EsR0E5QkF2N0IsS0FBQW9RLEtBQUEyRixFQUFBM0YsS0FFQXBRLEtBQUFndUIsR0FBQXRtQixLQUFBcU8sRUFBQWlZLElBRUFodUIsS0FBQTR2QixTQUFBbG9CLEtBQUFxTyxFQUFBNlosVUFDQTV2QixLQUFBa1AsU0FBQWxKLE1BQUErUCxFQUFBN0csU0FBQWxKLE1BQ0FoRyxLQUFBc2QsV0FBQTVWLEtBQUFxTyxFQUFBdUgsWUFDQXRkLEtBQUFxUCxNQUFBM0gsS0FBQXFPLEVBQUExRyxPQUVBclAsS0FBQTRQLE9BQUFsSSxLQUFBcU8sRUFBQW5HLFFBQ0E1UCxLQUFBeWhCLFlBQUEvWixLQUFBcU8sRUFBQTBMLGFBRUF6aEIsS0FBQW9XLGlCQUFBTCxFQUFBSyxpQkFFQXBXLEtBQUFnMEIsc0JBQUFqZSxFQUFBaWUsc0JBQ0FoMEIsS0FBQWswQix1QkFBQW5lLEVBQUFtZSx1QkFFQWwwQixLQUFBb3lCLE9BQUFOLEtBQUEvYixFQUFBcWMsT0FBQU4sS0FDQTl4QixLQUFBbTBCLFFBQUFwZSxFQUFBb2UsUUFFQW4wQixLQUFBbzBCLFdBQUFyZSxFQUFBcWUsV0FDQXAwQixLQUFBcTBCLGNBQUF0ZSxFQUFBc2UsY0FFQXIwQixLQUFBczBCLGNBQUF2ZSxFQUFBdWUsY0FDQXQwQixLQUFBdTBCLFlBQUF4ZSxFQUFBd2UsWUFFQXYwQixLQUFBdzBCLFdBQUF6ZSxFQUFBeWUsV0FBQTF6QixRQUVBZCxLQUFBeVcsU0FBQUssS0FBQUMsTUFBQUQsS0FBQUUsVUFBQWpCLEVBQUFVLFlBRUEsSUFBQThrQixFQUVBLElBQUEsSUFBQXg2QixFQUFBLEVBQUFBLEVBQUFnVixFQUFBMlAsU0FBQXprQixPQUFBRixJQUFBLENBRUEsTUFBQXF5QixFQUFBcmQsRUFBQTJQLFNBQUEza0IsR0FDQWYsS0FBQTRILElBQUF3ckIsRUFBQTNyQixRQUVBLENBSUEsT0FBQXpILElBRUEsRUFJQXN6QixHQUFBRyxXQUFBLElBQUF0VCxHQUFBLEVBQUEsRUFBQSxHQUNBbVQsR0FBQVMsNEJBQUEsRUFDQVQsR0FBQVcsa0NBQUEsRUMzL0JBLE1BQUF1SCxHQUFBLElBQUFyYixHQUNBc2IsR0FBQSxJQUFBdGIsR0FDQXViLEdBQUEsSUFBQXZiLEdBQ0F3YixHQUFBLElBQUF4YixHQUVBeWIsR0FBQSxJQUFBemIsR0FDQTBiLEdBQUEsSUFBQTFiLEdBQ0EyYixHQUFBLElBQUEzYixHQUNBNGIsR0FBQSxJQUFBNWIsR0FDQTZiLEdBQUEsSUFBQTdiLEdBQ0E4YixHQUFBLElBQUE5YixHQUVBLE1BQUErYixHQUVBLFdBQUF0NUIsQ0FBQWlELEVBQUEsSUFBQXNhLEdBQUFyYSxFQUFBLElBQUFxYSxHQUFBcGEsRUFBQSxJQUFBb2EsSUFFQW5nQixLQUFBNkYsRUFBQUEsRUFDQTdGLEtBQUE4RixFQUFBQSxFQUNBOUYsS0FBQStGLEVBQUFBLENBRUEsQ0FFQSxnQkFBQW8yQixDQUFBdDJCLEVBQUFDLEVBQUFDLEVBQUFuRixHQUVBQSxFQUFBc0gsV0FBQW5DLEVBQUFELEdBQ0EwMUIsR0FBQXR6QixXQUFBckMsRUFBQUMsR0FDQWxGLEVBQUFzSSxNQUFBc3lCLElBRUEsTUFBQVksRUFBQXg3QixFQUFBdUksV0FDQSxPQUFBaXpCLEVBQUEsRUFFQXg3QixFQUFBd0gsZUFBQSxFQUFBOUcsS0FBQThILEtBQUFnekIsSUFJQXg3QixFQUFBK0YsSUFBQSxFQUFBLEVBQUEsRUFFQSxDQUlBLG1CQUFBMDFCLENBQUExWCxFQUFBOWUsRUFBQUMsRUFBQUMsRUFBQW5GLEdBRUE0NkIsR0FBQXR6QixXQUFBbkMsRUFBQUYsR0FDQTQxQixHQUFBdnpCLFdBQUFwQyxFQUFBRCxHQUNBNjFCLEdBQUF4ekIsV0FBQXljLEVBQUE5ZSxHQUVBLE1BQUF5MkIsRUFBQWQsR0FBQXZ5QixJQUFBdXlCLElBQ0FlLEVBQUFmLEdBQUF2eUIsSUFBQXd5QixJQUNBZSxFQUFBaEIsR0FBQXZ5QixJQUFBeXlCLElBQ0FlLEVBQUFoQixHQUFBeHlCLElBQUF3eUIsSUFDQWlCLEVBQUFqQixHQUFBeHlCLElBQUF5eUIsSUFFQWlCLEVBQUFMLEVBQUFHLEVBQUFGLEVBQUFBLEVBR0EsR0FBQSxJQUFBSSxFQUdBLE9BREEvN0IsRUFBQStGLElBQUEsRUFBQSxFQUFBLEdBQ0EsS0FJQSxNQUFBaTJCLEVBQUEsRUFBQUQsRUFDQXRaLEdBQUFvWixFQUFBRCxFQUFBRCxFQUFBRyxHQUFBRSxFQUNBajFCLEdBQUEyMEIsRUFBQUksRUFBQUgsRUFBQUMsR0FBQUksRUFHQSxPQUFBaDhCLEVBQUErRixJQUFBLEVBQUEwYyxFQUFBMWIsRUFBQUEsRUFBQTBiLEVBRUEsQ0FFQSxvQkFBQXNDLENBQUFoQixFQUFBOWUsRUFBQUMsRUFBQUMsR0FHQSxPQUFBLE9BQUEvRixLQUFBcThCLGFBQUExWCxFQUFBOWUsRUFBQUMsRUFBQUMsRUFBQTQxQixNQU1BQSxHQUFBbjVCLEdBQUEsR0FBQW01QixHQUFBbDVCLEdBQUEsR0FBQWs1QixHQUFBbjVCLEVBQUFtNUIsR0FBQWw1QixHQUFBLEVBRUEsQ0FFQSx1QkFBQW82QixDQUFBbFksRUFBQWdELEVBQUFDLEVBQUFrVixFQUFBMXlCLEVBQUFDLEVBQUEweUIsRUFBQW44QixHQUVBLE9BQUEsT0FBQVosS0FBQXE4QixhQUFBMVgsRUFBQWdELEVBQUFDLEVBQUFrVixFQUFBbkIsS0FFQS82QixFQUFBNEIsRUFBQSxFQUNBNUIsRUFBQTZCLEVBQUEsRUFDQSxNQUFBN0IsSUFBQUEsRUFBQStXLEVBQUEsR0FDQSxNQUFBL1csSUFBQUEsRUFBQWdYLEVBQUEsR0FDQSxPQUlBaFgsRUFBQXVHLFVBQUEsR0FDQXZHLEVBQUFtSCxnQkFBQXFDLEVBQUF1eEIsR0FBQW41QixHQUNBNUIsRUFBQW1ILGdCQUFBc0MsRUFBQXN4QixHQUFBbDVCLEdBQ0E3QixFQUFBbUgsZ0JBQUFnMUIsRUFBQXBCLEdBQUFoa0IsR0FFQS9XLEVBRUEsQ0FFQSxvQkFBQW84QixDQUFBbjNCLEVBQUFDLEVBQUFDLEVBQUFtakIsR0FNQSxPQUpBc1MsR0FBQXR6QixXQUFBbkMsRUFBQUQsR0FDQTIxQixHQUFBdnpCLFdBQUFyQyxFQUFBQyxHQUdBMDFCLEdBQUF0eUIsTUFBQXV5QixJQUFBeHlCLElBQUFpZ0IsR0FBQSxDQUVBLENBRUEsR0FBQXZpQixDQUFBZCxFQUFBQyxFQUFBQyxHQU1BLE9BSkEvRixLQUFBNkYsRUFBQTZCLEtBQUE3QixHQUNBN0YsS0FBQThGLEVBQUE0QixLQUFBNUIsR0FDQTlGLEtBQUErRixFQUFBMkIsS0FBQTNCLEdBRUEvRixJQUVBLENBRUEsdUJBQUFpOUIsQ0FBQWxaLEVBQUFtWixFQUFBQyxFQUFBQyxHQU1BLE9BSkFwOUIsS0FBQTZGLEVBQUE2QixLQUFBcWMsRUFBQW1aLElBQ0FsOUIsS0FBQThGLEVBQUE0QixLQUFBcWMsRUFBQW9aLElBQ0FuOUIsS0FBQStGLEVBQUEyQixLQUFBcWMsRUFBQXFaLElBRUFwOUIsSUFFQSxDQUVBLDBCQUFBcTlCLENBQUExeUIsRUFBQXV5QixFQUFBQyxFQUFBQyxHQU1BLE9BSkFwOUIsS0FBQTZGLEVBQUE2RSxvQkFBQUMsRUFBQXV5QixHQUNBbDlCLEtBQUE4RixFQUFBNEUsb0JBQUFDLEVBQUF3eUIsR0FDQW45QixLQUFBK0YsRUFBQTJFLG9CQUFBQyxFQUFBeXlCLEdBRUFwOUIsSUFFQSxDQUVBLEtBQUF5SCxHQUVBLE9BQUEsSUFBQXpILEtBQUE0QyxhQUFBOEUsS0FBQTFILEtBRUEsQ0FFQSxJQUFBMEgsQ0FBQTRlLEdBTUEsT0FKQXRtQixLQUFBNkYsRUFBQTZCLEtBQUE0ZSxFQUFBemdCLEdBQ0E3RixLQUFBOEYsRUFBQTRCLEtBQUE0ZSxFQUFBeGdCLEdBQ0E5RixLQUFBK0YsRUFBQTJCLEtBQUE0ZSxFQUFBdmdCLEdBRUEvRixJQUVBLENBRUEsT0FBQXM5QixHQUtBLE9BSEE5QixHQUFBdHpCLFdBQUFsSSxLQUFBK0YsRUFBQS9GLEtBQUE4RixHQUNBMjFCLEdBQUF2ekIsV0FBQWxJLEtBQUE2RixFQUFBN0YsS0FBQThGLEdBRUEsR0FBQTAxQixHQUFBdHlCLE1BQUF1eUIsSUFBQXg2QixRQUVBLENBRUEsV0FBQXM4QixDQUFBMzhCLEdBRUEsT0FBQUEsRUFBQWtILFdBQUE5SCxLQUFBNkYsRUFBQTdGLEtBQUE4RixHQUFBOEIsSUFBQTVILEtBQUErRixHQUFBcUMsZUFBQSxFQUFBLEVBRUEsQ0FFQSxTQUFBK3pCLENBQUF2N0IsR0FFQSxPQUFBczdCLEdBQUFDLFVBQUFuOEIsS0FBQTZGLEVBQUE3RixLQUFBOEYsRUFBQTlGLEtBQUErRixFQUFBbkYsRUFFQSxDQUVBLFFBQUE0OEIsQ0FBQTU4QixHQUVBLE9BQUFBLEVBQUE2OEIsc0JBQUF6OUIsS0FBQTZGLEVBQUE3RixLQUFBOEYsRUFBQTlGLEtBQUErRixFQUVBLENBRUEsWUFBQXMyQixDQUFBMVgsRUFBQS9qQixHQUVBLE9BQUFzN0IsR0FBQUcsYUFBQTFYLEVBQUEza0IsS0FBQTZGLEVBQUE3RixLQUFBOEYsRUFBQTlGLEtBQUErRixFQUFBbkYsRUFFQSxDQUVBLGdCQUFBaThCLENBQUFsWSxFQUFBdmEsRUFBQUMsRUFBQTB5QixFQUFBbjhCLEdBRUEsT0FBQXM3QixHQUFBVyxpQkFBQWxZLEVBQUEza0IsS0FBQTZGLEVBQUE3RixLQUFBOEYsRUFBQTlGLEtBQUErRixFQUFBcUUsRUFBQUMsRUFBQTB5QixFQUFBbjhCLEVBRUEsQ0FFQSxhQUFBK2tCLENBQUFoQixHQUVBLE9BQUF1WCxHQUFBdlcsY0FBQWhCLEVBQUEza0IsS0FBQTZGLEVBQUE3RixLQUFBOEYsRUFBQTlGLEtBQUErRixFQUVBLENBRUEsYUFBQWkzQixDQUFBOVQsR0FFQSxPQUFBZ1QsR0FBQWMsY0FBQWg5QixLQUFBNkYsRUFBQTdGLEtBQUE4RixFQUFBOUYsS0FBQStGLEVBQUFtakIsRUFFQSxDQUVBLGFBQUFwRCxDQUFBdkIsR0FFQSxPQUFBQSxFQUFBOEIsbUJBQUFybUIsS0FFQSxDQUVBLG1CQUFBdXBCLENBQUEwSCxFQUFBcndCLEdBRUEsTUFBQWlGLEVBQUE3RixLQUFBNkYsRUFBQUMsRUFBQTlGLEtBQUE4RixFQUFBQyxFQUFBL0YsS0FBQStGLEVBQ0EsSUFBQTRCLEVBQUFpUSxFQVFBZ2tCLEdBQUExekIsV0FBQXBDLEVBQUFELEdBQ0FnMkIsR0FBQTN6QixXQUFBbkMsRUFBQUYsR0FDQWsyQixHQUFBN3pCLFdBQUErb0IsRUFBQXByQixHQUNBLE1BQUFqRSxFQUFBZzZCLEdBQUEzeUIsSUFBQTh5QixJQUNBbDZCLEVBQUFnNkIsR0FBQTV5QixJQUFBOHlCLElBQ0EsR0FBQW42QixHQUFBLEdBQUFDLEdBQUEsRUFHQSxPQUFBakIsRUFBQThHLEtBQUE3QixHQUlBbTJCLEdBQUE5ekIsV0FBQStvQixFQUFBbnJCLEdBQ0EsTUFBQWhFLEVBQUE4NUIsR0FBQTN5QixJQUFBK3lCLElBQ0EwQixFQUFBN0IsR0FBQTV5QixJQUFBK3lCLElBQ0EsR0FBQWw2QixHQUFBLEdBQUE0N0IsR0FBQTU3QixFQUdBLE9BQUFsQixFQUFBOEcsS0FBQTVCLEdBSUEsTUFBQTYzQixFQUFBLzdCLEVBQUE4N0IsRUFBQTU3QixFQUFBRCxFQUNBLEdBQUE4N0IsR0FBQSxHQUFBLzdCLEdBQUEsR0FBQUUsR0FBQSxFQUlBLE9BRkE2RixFQUFBL0YsR0FBQUEsRUFBQUUsR0FFQWxCLEVBQUE4RyxLQUFBN0IsR0FBQWtDLGdCQUFBNnpCLEdBQUFqMEIsR0FJQXMwQixHQUFBL3pCLFdBQUErb0IsRUFBQWxyQixHQUNBLE1BQUE2M0IsRUFBQWhDLEdBQUEzeUIsSUFBQWd6QixJQUNBNEIsRUFBQWhDLEdBQUE1eUIsSUFBQWd6QixJQUNBLEdBQUE0QixHQUFBLEdBQUFELEdBQUFDLEVBR0EsT0FBQWo5QixFQUFBOEcsS0FBQTNCLEdBSUEsTUFBQSszQixFQUFBRixFQUFBLzdCLEVBQUFELEVBQUFpOEIsRUFDQSxHQUFBQyxHQUFBLEdBQUFqOEIsR0FBQSxHQUFBZzhCLEdBQUEsRUFJQSxPQUZBam1CLEVBQUEvVixHQUFBQSxFQUFBZzhCLEdBRUFqOUIsRUFBQThHLEtBQUE3QixHQUFBa0MsZ0JBQUE4ekIsR0FBQWprQixHQUlBLE1BQUFtbUIsRUFBQWo4QixFQUFBKzdCLEVBQUFELEVBQUFGLEVBQ0EsR0FBQUssR0FBQSxHQUFBTCxFQUFBNTdCLEdBQUEsR0FBQTg3QixFQUFBQyxHQUFBLEVBS0EsT0FIQS9CLEdBQUE1ekIsV0FBQW5DLEVBQUFELEdBQ0E4UixHQUFBOGxCLEVBQUE1N0IsSUFBQTQ3QixFQUFBNTdCLEdBQUE4N0IsRUFBQUMsSUFFQWo5QixFQUFBOEcsS0FBQTVCLEdBQUFpQyxnQkFBQSt6QixHQUFBbGtCLEdBS0EsTUFBQStrQixFQUFBLEdBQUFvQixFQUFBRCxFQUFBSCxHQUtBLE9BSEFoMkIsRUFBQW0yQixFQUFBbkIsRUFDQS9rQixFQUFBK2xCLEVBQUFoQixFQUVBLzdCLEVBQUE4RyxLQUFBN0IsR0FBQWtDLGdCQUFBNnpCLEdBQUFqMEIsR0FBQUksZ0JBQUE4ekIsR0FBQWprQixFQUVBLENBRUEsTUFBQXROLENBQUFnYyxHQUVBLE9BQUFBLEVBQUF6Z0IsRUFBQXlFLE9BQUF0SyxLQUFBNkYsSUFBQXlnQixFQUFBeGdCLEVBQUF3RSxPQUFBdEssS0FBQThGLElBQUF3Z0IsRUFBQXZnQixFQUFBdUUsT0FBQXRLLEtBQUErRixFQUVBLEVDOVNBLE1BQUFpNEIsR0FBQSxDQUFBQyxVQUFBLFNBQUFDLGFBQUEsU0FBQUMsS0FBQSxNQUFBQyxXQUFBLFFBQUFDLE1BQUEsU0FDQUMsTUFBQSxTQUFBQyxPQUFBLFNBQUFDLE1BQUEsRUFBQUMsZUFBQSxTQUFBQyxLQUFBLElBQUFDLFdBQUEsUUFDQUMsTUFBQSxTQUFBQyxVQUFBLFNBQUFDLFVBQUEsUUFBQUMsV0FBQSxRQUFBQyxVQUFBLFNBQUFDLE1BQUEsU0FDQUMsZUFBQSxRQUFBQyxTQUFBLFNBQUFDLFFBQUEsU0FBQUMsS0FBQSxNQUFBQyxTQUFBLElBQUFDLFNBQUEsTUFDQUMsY0FBQSxTQUFBQyxTQUFBLFNBQUFDLFVBQUEsTUFBQUMsU0FBQSxTQUFBQyxVQUFBLFNBQUFDLFlBQUEsUUFDQUMsZUFBQSxRQUFBQyxXQUFBLFNBQUFDLFdBQUEsU0FBQUMsUUFBQSxRQUFBQyxXQUFBLFNBQUFDLGFBQUEsUUFDQUMsY0FBQSxRQUFBQyxjQUFBLFFBQUFDLGNBQUEsUUFBQUMsY0FBQSxNQUFBQyxXQUFBLFFBQ0FDLFNBQUEsU0FBQUMsWUFBQSxNQUFBQyxRQUFBLFFBQUFDLFFBQUEsUUFBQUMsV0FBQSxRQUFBQyxVQUFBLFNBQ0FDLFlBQUEsU0FBQUMsWUFBQSxRQUFBQyxRQUFBLFNBQUFDLFVBQUEsU0FBQUMsV0FBQSxTQUFBQyxLQUFBLFNBQ0FDLFVBQUEsU0FBQUMsS0FBQSxRQUFBQyxNQUFBLE1BQUFDLFlBQUEsU0FBQUMsS0FBQSxRQUFBQyxTQUFBLFNBQUFDLFFBQUEsU0FDQUMsVUFBQSxTQUFBQyxPQUFBLFFBQUFDLE1BQUEsU0FBQUMsTUFBQSxTQUFBQyxTQUFBLFNBQUFDLGNBQUEsU0FBQUMsVUFBQSxRQUNBQyxhQUFBLFNBQUFDLFVBQUEsU0FBQUMsV0FBQSxTQUFBQyxVQUFBLFNBQUFDLHFCQUFBLFNBQUFDLFVBQUEsU0FDQUMsV0FBQSxRQUFBQyxVQUFBLFNBQUFDLFVBQUEsU0FBQUMsWUFBQSxTQUFBQyxjQUFBLFFBQUFDLGFBQUEsUUFDQUMsZUFBQSxRQUFBQyxlQUFBLFFBQUFDLGVBQUEsU0FBQUMsWUFBQSxTQUFBQyxLQUFBLE1BQUFDLFVBQUEsUUFDQUMsTUFBQSxTQUFBQyxRQUFBLFNBQUFDLE9BQUEsUUFBQUMsaUJBQUEsUUFBQUMsV0FBQSxJQUFBQyxhQUFBLFNBQ0FDLGFBQUEsUUFBQUMsZUFBQSxRQUFBQyxnQkFBQSxRQUFBQyxrQkFBQSxNQUFBQyxnQkFBQSxRQUNBQyxnQkFBQSxTQUFBQyxhQUFBLFFBQUFDLFVBQUEsU0FBQUMsVUFBQSxTQUFBQyxTQUFBLFNBQUFDLFlBQUEsU0FDQUMsS0FBQSxJQUFBQyxRQUFBLFNBQUFDLE1BQUEsUUFBQUMsVUFBQSxRQUFBQyxPQUFBLFNBQUFDLFVBQUEsU0FBQUMsT0FBQSxTQUNBQyxjQUFBLFNBQUFDLFVBQUEsU0FBQUMsY0FBQSxTQUFBQyxjQUFBLFNBQUFDLFdBQUEsU0FBQUMsVUFBQSxTQUNBQyxLQUFBLFNBQUFDLEtBQUEsU0FBQUMsS0FBQSxTQUFBQyxXQUFBLFNBQUFDLE9BQUEsUUFBQUMsY0FBQSxRQUFBQyxJQUFBLFNBQUFDLFVBQUEsU0FDQUMsVUFBQSxRQUFBQyxZQUFBLFFBQUFDLE9BQUEsU0FBQUMsV0FBQSxTQUFBQyxTQUFBLFFBQUFDLFNBQUEsU0FDQUMsT0FBQSxTQUFBQyxPQUFBLFNBQUFDLFFBQUEsUUFBQUMsVUFB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SUFDLHFCU3ZJQSxrdkNUd0lBQyxnQlV4SUEsMkdWeUlBQyxhV3pJQSxzR1gwSUFDLG1CWTFJQSwrR1oySUFDLE1hM0lBLHVyQmI0SUFDLHFCYzVJQSxpMUZkNklBQyxzQmU3SUEsaTZCZjhJQUMseUJnQjlJQSw0MERoQitJQUMsOEJpQi9JQSw0SGpCZ0pBQyw0QmtCaEpBLHFFbEJpSkFDLHVCbUJqSkEsMkVuQmtKQUMsZW9CbEpBLCtIcEJtSkFDLG9CcUJuSkEscUhyQm9KQUMsa0JzQnBKQSx5THRCcUpBQyxhdUJySkEsb2N2QnNKQUMsT3dCdEpBLDB1RnhCdUpBQyw0QnlCdkpBLHloSHpCd0pBQyxxQjBCeEpBLDZnQzFCeUpBQyw0QjJCekpBLGtKM0IwSkFDLHVCNEIxSkEsa0w1QjJKQUMscUI2QjNKQSxrSjdCNEpBQywwQjhCNUpBLG1FOUI2SkFDLG9CK0I3SkEsc0QvQjhKQUMseUJnQzlKQSwwZ0NoQytKQUMsZ0JpQy9KQSxnc0NqQ2dLQUMsNEJrQ2hLQSw2T2xDaUtBQyxxQm1DaktBLCtVbkNrS0FDLG1Cb0NsS0Esc1RwQ21LQUMsOEJxQ25LQSw2K0NyQ29LQUMsY3NDcEtBLDRvQnRDcUtBQyxXdUNyS0Esd0R2Q3NLQUMsZ0J3Q3RLQSxxRHhDdUtBQyxheUN2S0EsMlJ6Q3dLQUMsa0IwQ3hLQSwyTTFDeUtBQywwQjJDektBLDhjM0MwS0FDLHVCNEMxS0EsaUc1QzJLQUMsd0I2QzNLQSxzSDdDNEtBQyw2QjhDNUtBLDJoQzlDNktBQyxrQitDN0tBLDBnSi9DOEtBQyxxQmdEOUtBLG9FaEQrS0FDLDBCaUQvS0EseTlCakRnTEFDLHNCa0RoTEEsc01sRGlMQUMsMkJtRGpMQSwreUNuRGtMQUMseUJvRGxMQSxvNkhwRG1MQUMsOEJxRG5MQSxnK2RyRG9MQUMsc0JzRHBMQSxzcEx0RHFMQUMscUJ1RHJMQSw2M0J2RHNMQUMsb0J3RHRMQSwrWXhEdUxBQyxxQnlEdkxBLDhJekR3TEFDLDBCMER4TEEsdUkxRHlMQUMsd0IyRHpMQSwrRjNEMExBQyxtQjREMUxBLDRJNUQyTEFDLGE2RDNMQSxxYTdENExBQyxrQjhENUxBLG1EOUQ2TEFDLHNCK0Q3TEEsMFcvRDhMQUMsMkJnRTlMQSwrUWhFK0xBQyxzQmlFL0xBLG1MakVnTUFDLDJCa0VoTUEscUVsRWlNQUMscUJtRWpNQSx1Vm5Fa01BQyxrQm9FbE1BLDBjcEVtTUFDLG1CcUVuTUEsdVFyRW9NQUMsd0JzRXBNQSxtcUJ0RXFNQUMsbUJ1RXJNQSxxUXZFc01BQyxzQndFdE1BLDJ5Q3hFdU1BQyxxQnlFdk1BLGdrQnpFd01BQyxxQjBFeE1BLGlKMUV5TUFDLG1CMkV6TUEsaUozRTBNQUMsYzRFMU1BLG1PNUUyTUFDLHdCNkUzTUEscTJCN0U0TUFDLGdDOEU1TUEsNkU5RTZNQUMsK0IrRTdNQSw4Ty9FOE1BQyx3QmdGOU1BLG1SaEYrTUFDLDBCaUYvTUEsb0tqRmdOQUMsZ0JrRmhOQSxzTGxGaU5BQyxRbUZqTkEsc3VEbkZrTkFDLDZCb0ZsTkEsNEVwRm1OQUMsZXFGbk5BLDhSckZvTkFDLG1Cc0ZwTkEsZ0Z0RnFOQUMsd0J1RnJOQSwyVXZGc05BQyxzQndGdE5BLG1MeEZ1TkFDLDJCeUZ2TkEscUV6RndOQUMsd0IwRnhOQSw0NFMxRnlOQUMsc0IyRnpOQSw0NEMzRjBOQUMsaUI0RjFOQSxpK0M1RjJOQUMseUI2RjNOQSwwK0M3RjROQUMsZ0I4RjVOQSxrTzlGNk5BQyxxQitGN05BLGdsQi9GOE5BQyxnQmdHOU5BLCtYaEcrTkFDLGtCaUcvTkEscWRqR2dPQUMscUJrR2hPQSxxTWxHaU9BQywwQm1Hak9BLG1FbkdrT0FDLHFCb0dsT0EsNkZwR21PQUMsMEJxR25PQSw4bEhyR29PQUMsc0JzR3BPQSxtbUN0R3FPQUMsMkJ1R3JPQSwybk12R3NPQUMsaUJ3R3RPQSxzbkR4R3VPQUMsZXlHdk9BLGlnRnpHd09BQyxVMEd4T0EseXRGMUd5T0FDLGdCMkd6T0EscWEzRzJPQUMsZ0JEM09BLDhKQzRPQUMsZ0JEL05BLHNnQkNnT0FDLG9CNEc3T0EsaU81RzhPQUMsb0I0RzdOQSwwMUI1RzhOQUMsVTZHL09BLGlPN0dnUEFDLFU2Ry9OQSwyVjdHZ09BQyxXOEdqUEEsMDBCOUdrUEFDLFc4R3JNQSxtOEI5R3NNQUMsa0IrR25QQSxvekIvR29QQUMsa0IrR3pNQSxzeUIvRzBNQUMsY2dIclBBLCtMaEhzUEFDLGNnSHZPQSwwVGhId09BQyxnQmlIdlBBLHFwQmpId1BBQyxnQmlIeE5BLCsxQmpIeU5BQyxla0h6UEEsaStCbEgwUEFDLGVrSDlNQSxvcURsSCtNQUMsaUJtSDNQQSwrcUNuSDRQQUMsaUJtSHhNQSw4OURuSHlNQUMsZ0JvSDdQQSxvaENwSDhQQUMsZ0JvSDlNQSwraURwSCtNQUMsZ0JxSC9QQSxzbENySGdRQUMsZ0JxSC9NQSw0dUJySGdOQUMsZXNIalFBLDZxQ3RIa1FBQyxlc0g5TUEsNGtFdEgrTUFDLGtCdUhuUUEsOHZDdkhvUUFDLGtCdUh2TUEsNHBJdkh3TUFDLGN3SHJRQSxpbkN4SHNRQUMsY3dIcE5BLDIwRHhIcU5BQyxZeUh2UUEseTVCekh3UUFDLFl5SHJOQSxtMEJ6SHNOQUMsWTBIelFBLGdzQjFIMFFBQyxZMEh6T0EsNmUxSDBPQUMsWTJIM1FBLHNuQzNINFFBQyxZMkgvTkEsMHlCQ3JDS0MsR0FBQSxDQUVMdEgsT0FBQSxDQUVBdUgsUUFBQSxDQUFBanZELE1BQUEsSUFBQXVsQyxHQUFBLFdBQ0F3QyxRQUFBLENBQUEvbkMsTUFBQSxHQUVBNDJCLElBQUEsQ0FBQTUyQixNQUFBLE1BQ0FrdkQsYUFBQSxDQUFBbHZELE1BQUEsSUFBQWlKLElBRUFtakMsU0FBQSxDQUFBcHNDLE1BQUEsTUFDQW12RCxrQkFBQSxDQUFBbnZELE1BQUEsSUFBQWlKLElBRUFtaEMsVUFBQSxDQUFBcHFDLE1BQUEsSUFJQW92RCxZQUFBLENBRUFoaUIsWUFBQSxDQUFBcHRDLE1BQUEsTUFDQXF2RCxxQkFBQSxDQUFBcnZELE1BQUEsSUFBQWlKLEtBSUFxbUQsT0FBQSxDQUVBL2hCLE9BQUEsQ0FBQXZ0QyxNQUFBLE1BQ0F5dEMsZUFBQSxDQUFBenRDLE1BQUEsSUFBQWlKLElBQ0FzbUQsV0FBQSxDQUFBdnZELE9BQUEsR0FDQTJ0QyxhQUFBLENBQUEzdEMsTUFBQSxHQUNBd3ZELElBQUEsQ0FBQXh2RCxNQUFBLEtBQ0E0dEMsZ0JBQUEsQ0FBQTV0QyxNQUFBLE1BSUF5dkQsTUFBQSxDQUVBbGpCLE1BQUEsQ0FBQXZzQyxNQUFBLE1BQ0F3c0MsZUFBQSxDQUFBeHNDLE1BQUEsR0FDQTB2RCxlQUFBLENBQUExdkQsTUFBQSxJQUFBaUosS0FJQTBtRCxTQUFBLENBRUF0akIsU0FBQSxDQUFBcnNDLE1BQUEsTUFDQXNzQyxrQkFBQSxDQUFBdHNDLE1BQUEsR0FDQTR2RCxrQkFBQSxDQUFBNXZELE1BQUEsSUFBQWlKLEtBSUE0bUQsUUFBQSxDQUVBcGpCLFFBQUEsQ0FBQXpzQyxNQUFBLE1BQ0E4dkQsaUJBQUEsQ0FBQTl2RCxNQUFBLElBQUFpSixJQUNBeWpDLFVBQUEsQ0FBQTFzQyxNQUFBLElBSUErdkQsVUFBQSxDQUVBcGpCLFVBQUEsQ0FBQTNzQyxNQUFBLE1BQ0Fnd0QsbUJBQUEsQ0FBQWh3RCxNQUFBLElBQUFpSixJQUNBNGpDLFlBQUEsQ0FBQTdzQyxNQUFBLElBQUE2RSxHQUFBLEVBQUEsS0FJQW9yRCxnQkFBQSxDQUVBbmpCLGdCQUFBLENBQUE5c0MsTUFBQSxNQUNBa3dELHlCQUFBLENBQUFsd0QsTUFBQSxJQUFBaUosSUFDQThqQyxrQkFBQSxDQUFBL3NDLE1BQUEsR0FDQWd0QyxpQkFBQSxDQUFBaHRDLE1BQUEsSUFJQW13RCxZQUFBLENBRUFoakIsWUFBQSxDQUFBbnRDLE1BQUEsTUFDQW93RCxxQkFBQSxDQUFBcHdELE1BQUEsSUFBQWlKLEtBSUFvbkQsYUFBQSxDQUVBbmpCLGFBQUEsQ0FBQWx0QyxNQUFBLE1BQ0Fzd0Qsc0JBQUEsQ0FBQXR3RCxNQUFBLElBQUFpSixLQUlBc25ELGFBQUEsQ0FFQXRqQixhQUFBLENBQUFqdEMsTUFBQSxNQUNBd3dELHNCQUFBLENBQUF4d0QsTUFBQSxJQUFBaUosS0FJQXduRCxZQUFBLENBRUE1aUIsWUFBQSxDQUFBN3RDLE1BQUEsT0FJQTZ1QyxJQUFBLENBRUE2aEIsV0FBQSxDQUFBMXdELE1BQUEsT0FDQTJ3RCxRQUFBLENBQUEzd0QsTUFBQSxHQUNBNHdELE9BQUEsQ0FBQTV3RCxNQUFBLEtBQ0E2d0QsU0FBQSxDQUFBN3dELE1BQUEsSUFBQXVsQyxHQUFBLFlBSUF1VyxPQUFBLENBRUFnVixrQkFBQSxDQUFBOXdELE1BQUEsSUFFQSt3RCxXQUFBLENBQUEvd0QsTUFBQSxJQUVBZ3hELGtCQUFBLENBQUFoeEQsTUFBQSxHQUFBaXhELFdBQUEsQ0FDQWhxQyxVQUFBLENBQUEsRUFDQS9YLE1BQUEsQ0FBQSxJQUdBZ2lELHdCQUFBLENBQUFseEQsTUFBQSxHQUFBaXhELFdBQUEsQ0FDQUUsZ0JBQUEsRUFDQUMsV0FBQSxDQUFBLEVBQ0FDLGlCQUFBLENBQUEsRUFDQUMsYUFBQSxDQUFBLEVBQ0FDLGNBQUEsQ0FBQSxJQUdBQyxxQkFBQSxDQUFBeHhELE1BQUEsSUFDQXl4RCx3QkFBQSxDQUFBenhELE1BQUEsSUFFQTB4RCxXQUFBLENBQUExeEQsTUFBQSxHQUFBaXhELFdBQUEsQ0FDQS9oRCxNQUFBLENBQUEsRUFDQXllLFNBQUEsQ0FBQSxFQUNBMUcsVUFBQSxDQUFBLEVBQ0FxTSxTQUFBLENBQUEsRUFDQXErQixRQUFBLENBQUEsRUFDQUMsWUFBQSxDQUFBLEVBQ0FDLE1BQUEsQ0FBQSxJQUdBQyxpQkFBQSxDQUFBOXhELE1BQUEsR0FBQWl4RCxXQUFBLENBQ0FFLGdCQUFBLEVBQ0FDLFdBQUEsQ0FBQSxFQUNBQyxpQkFBQSxDQUFBLEVBQ0FDLGFBQUEsQ0FBQSxFQUNBQyxjQUFBLENBQUEsSUFHQVEsYUFBQSxDQUFBL3hELE1BQUEsSUFDQWd5RCxjQUFBLENBQUFoeUQsTUFBQSxJQUNBaXlELGdCQUFBLENBQUFqeUQsTUFBQSxJQUVBa3lELFlBQUEsQ0FBQWx5RCxNQUFBLEdBQUFpeEQsV0FBQSxDQUNBL2hELE1BQUEsQ0FBQSxFQUNBeWUsU0FBQSxDQUFBLEVBQ0Fra0MsTUFBQSxDQUFBLEVBQ0F2K0IsU0FBQSxDQUFBLElBR0E2K0Isa0JBQUEsQ0FBQW55RCxNQUFBLEdBQUFpeEQsV0FBQSxDQUNBRSxnQkFBQSxFQUNBQyxXQUFBLENBQUEsRUFDQUMsaUJBQUEsQ0FBQSxFQUNBQyxhQUFBLENBQUEsRUFDQUMsY0FBQSxDQUFBLEVBQ0FhLGlCQUFBLENBQUEsRUFDQUMsZ0JBQUEsQ0FBQSxJQUdBQyxlQUFBLENBQUF0eUQsTUFBQSxJQUNBdXlELGtCQUFBLENBQUF2eUQsTUFBQSxJQUVBd3lELGlCQUFBLENBQUF4eUQsTUFBQSxHQUFBaXhELFdBQUEsQ0FDQWhxQyxVQUFBLENBQUEsRUFDQXdyQyxTQUFBLENBQUEsRUFDQUMsWUFBQSxDQUFBLElBSUFDLGVBQUEsQ0FBQTN5RCxNQUFBLEdBQUFpeEQsV0FBQSxDQUNBL2hELE1BQUEsQ0FBQSxFQUNBeWUsU0FBQSxDQUFBLEVBQ0Ezb0IsTUFBQSxDQUFBLEVBQ0FDLE9BQUEsQ0FBQSxJQUdBMnRELE1BQUEsQ0FBQTV5RCxNQUFBLE1BQ0E2eUQsTUFBQSxDQUFBN3lELE1BQUEsT0FJQThoQixPQUFBLENBRUFtdEMsUUFBQSxDQUFBanZELE1BQUEsSUFBQXVsQyxHQUFBLFdBQ0F3QyxRQUFBLENBQUEvbkMsTUFBQSxHQUNBZ2lCLEtBQUEsQ0FBQWhpQixNQUFBLEdBQ0FvTixNQUFBLENBQUFwTixNQUFBLEdBQ0E0MkIsSUFBQSxDQUFBNTJCLE1BQUEsTUFDQW9zQyxTQUFBLENBQUFwc0MsTUFBQSxNQUNBbXZELGtCQUFBLENBQUFudkQsTUFBQSxJQUFBaUosSUFDQW1oQyxVQUFBLENBQUFwcUMsTUFBQSxHQUNBOHlELFlBQUEsQ0FBQTl5RCxNQUFBLElBQUFpSixLQUlBbzZDLE9BQUEsQ0FFQTRMLFFBQUEsQ0FBQWp2RCxNQUFBLElBQUF1bEMsR0FBQSxXQUNBd0MsUUFBQSxDQUFBL25DLE1BQUEsR0FDQThJLE9BQUEsQ0FBQTlJLE1BQUEsSUFBQTZFLEdBQUEsR0FBQSxLQUNBb0ksU0FBQSxDQUFBak4sTUFBQSxHQUNBNDJCLElBQUEsQ0FBQTUyQixNQUFBLE1BQ0FrdkQsYUFBQSxDQUFBbHZELE1BQUEsSUFBQWlKLElBQ0FtakMsU0FBQSxDQUFBcHNDLE1BQUEsTUFDQW12RCxrQkFBQSxDQUFBbnZELE1BQUEsSUFBQWlKLElBQ0FtaEMsVUFBQSxDQUFBcHFDLE1BQUEsS0MzTksreUQsR0FBQSxDQUVMQyxNQUFBLENBRUFsWSxTQUFBRCxHQUFBLENBQ0FtVSxHQUFBdEgsT0FDQXNILEdBQUFJLFlBQ0FKLEdBQUFNLE9BQ0FOLEdBQUFTLE1BQ0FULEdBQUFXLFNBQ0FYLEdBQUFuZ0IsTUFHQStNLGFBQUFzSyxHQUFBMEgsZUFDQS9SLGVBQUFxSyxHQUFBMkgsZ0JBSUFvRixRQUFBLENBRUFuWSxTQUFBRCxHQUFBLENBQ0FtVSxHQUFBdEgsT0FDQXNILEdBQUFJLFlBQ0FKLEdBQUFNLE9BQ0FOLEdBQUFTLE1BQ0FULEdBQUFXLFNBQ0FYLEdBQUFtQixZQUNBbkIsR0FBQWEsUUFDQWIsR0FBQWUsVUFDQWYsR0FBQWlCLGdCQUNBakIsR0FBQW5nQixJQUNBbWdCLEdBQUFsVCxPQUNBLENBQ0EvUSxTQUFBLENBQUEvcUMsTUFBQSxJQUFBdWxDLEdBQUEsT0FJQXFXLGFBQUFzSyxHQUFBNEgsaUJBQ0FqUyxlQUFBcUssR0FBQTZILGtCQUlBbUYsTUFBQSxDQUVBcFksU0FBQUQsR0FBQSxDQUNBbVUsR0FBQXRILE9BQ0FzSCxHQUFBSSxZQUNBSixHQUFBTSxPQUNBTixHQUFBUyxNQUNBVCxHQUFBVyxTQUNBWCxHQUFBbUIsWUFDQW5CLEdBQUFhLFFBQ0FiLEdBQUFlLFVBQ0FmLEdBQUFpQixnQkFDQWpCLEdBQUFuZ0IsSUFDQW1nQixHQUFBbFQsT0FDQSxDQUNBL1EsU0FBQSxDQUFBL3FDLE1BQUEsSUFBQXVsQyxHQUFBLElBQ0EwRixTQUFBLENBQUFqckMsTUFBQSxJQUFBdWxDLEdBQUEsVUFDQTZGLFVBQUEsQ0FBQXByQyxNQUFBLE9BSUE0N0MsYUFBQXNLLEdBQUFrSSxlQUNBdlMsZUFBQXFLLEdBQUFtSSxnQkFJQThFLFNBQUEsQ0FFQXJZLFNBQUFELEdBQUEsQ0FDQW1VLEdBQUF0SCxPQUNBc0gsR0FBQU0sT0FDQU4sR0FBQVMsTUFDQVQsR0FBQVcsU0FDQVgsR0FBQW1CLFlBQ0FuQixHQUFBYSxRQUNBYixHQUFBZSxVQUNBZixHQUFBaUIsZ0JBQ0FqQixHQUFBdUIsYUFDQXZCLEdBQUFxQixhQUNBckIsR0FBQW5nQixJQUNBbWdCLEdBQUFsVCxPQUNBLENBQ0EvUSxTQUFBLENBQUEvcUMsTUFBQSxJQUFBdWxDLEdBQUEsSUFDQW1GLFVBQUEsQ0FBQTFxQyxNQUFBLEdBQ0EycUMsVUFBQSxDQUFBM3FDLE1BQUEsR0FDQTB0QyxnQkFBQSxDQUFBMXRDLE1BQUEsTUFJQTQ3QyxhQUFBc0ssR0FBQW9JLGtCQUNBelMsZUFBQXFLLEdBQUFxSSxtQkFJQTZFLEtBQUEsQ0FFQXRZLFNBQUFELEdBQUEsQ0FDQW1VLEdBQUF0SCxPQUNBc0gsR0FBQVMsTUFDQVQsR0FBQVcsU0FDQVgsR0FBQW1CLFlBQ0FuQixHQUFBYSxRQUNBYixHQUFBZSxVQUNBZixHQUFBaUIsZ0JBQ0FqQixHQUFBeUIsWUFDQXpCLEdBQUFuZ0IsSUFDQW1nQixHQUFBbFQsT0FDQSxDQUNBL1EsU0FBQSxDQUFBL3FDLE1BQUEsSUFBQXVsQyxHQUFBLE9BSUFxVyxhQUFBc0ssR0FBQXNJLGNBQ0EzUyxlQUFBcUssR0FBQXVJLGVBSUF0aUIsT0FBQSxDQUVBMk8sU0FBQUQsR0FBQSxDQUNBbVUsR0FBQXRILE9BQ0FzSCxHQUFBYSxRQUNBYixHQUFBZSxVQUNBZixHQUFBaUIsZ0JBQ0FqQixHQUFBbmdCLElBQ0EsQ0FDQTFDLE9BQUEsQ0FBQW5zQyxNQUFBLFNBSUE0N0MsYUFBQXNLLEdBQUE4SCxnQkFDQW5TLGVBQUFxSyxHQUFBK0gsaUJBSUFuc0MsT0FBQSxDQUVBZzVCLFNBQUFELEdBQUEsQ0FDQW1VLEdBQUFsdEMsT0FDQWt0QyxHQUFBbmdCLE1BR0ErTSxhQUFBc0ssR0FBQXdJLFlBQ0E3UyxlQUFBcUssR0FBQXlJLGFBSUEwRSxPQUFBLENBRUF2WSxTQUFBRCxHQUFBLENBQ0FtVSxHQUFBdEgsT0FDQXNILEdBQUFuZ0IsSUFDQSxDQUNBemhDLE1BQUEsQ0FBQXBOLE1BQUEsR0FDQXN1QyxTQUFBLENBQUF0dUMsTUFBQSxHQUNBc3pELFVBQUEsQ0FBQXR6RCxNQUFBLE1BSUE0N0MsYUFBQXNLLEdBQUF3SCxnQkFDQTdSLGVBQUFxSyxHQUFBeUgsaUJBSUFsMkMsTUFBQSxDQUVBcWpDLFNBQUFELEdBQUEsQ0FDQW1VLEdBQUF0SCxPQUNBc0gsR0FBQWlCLGtCQUdBclUsYUFBQXNLLEdBQUFrSCxXQUNBdlIsZUFBQXFLLEdBQUFtSCxZQUlBL3NDLE9BQUEsQ0FFQXc2QixTQUFBRCxHQUFBLENBQ0FtVSxHQUFBdEgsT0FDQXNILEdBQUFhLFFBQ0FiLEdBQUFlLFVBQ0FmLEdBQUFpQixnQkFDQSxDQUNBbG9CLFFBQUEsQ0FBQS9uQyxNQUFBLE1BSUE0N0MsYUFBQXNLLEdBQUFnSSxnQkFDQXJTLGVBQUFxSyxHQUFBaUksaUJBSUE5SyxPQUFBLENBRUF2SSxTQUFBRCxHQUFBLENBQ0FtVSxHQUFBM0wsT0FDQTJMLEdBQUFuZ0IsTUFHQStNLGFBQUFzSyxHQUFBNEksWUFDQWpULGVBQUFxSyxHQUFBNkksYUFJQTMyQixXQUFBLENBRUEwaUIsU0FBQSxDQUNBZ1ksWUFBQSxDQUFBOXlELE1BQUEsSUFBQWlKLElBQ0FzcUQsSUFBQSxDQUFBdnpELE1BQUEsTUFDQXd6RCxvQkFBQSxDQUFBeHpELE1BQUEsSUFHQTQ3QyxhQUFBc0ssR0FBQTRHLGdCQUNBalIsZUFBQXFLLEdBQUE2RyxpQkFJQTBHLGVBQUEsQ0FFQTNZLFNBQUEsQ0FDQXZOLE9BQUEsQ0FBQXZ0QyxNQUFBLE1BQ0F1dkQsV0FBQSxDQUFBdnZELE9BQUEsR0FDQTB6RCxxQkFBQSxDQUFBMXpELE1BQUEsR0FDQXd6RCxvQkFBQSxDQUFBeHpELE1BQUEsR0FDQTJ6RCxtQkFBQSxDQUFBM3pELE1BQUEsSUFBQWlKLEtBR0EyeUMsYUFBQXNLLEdBQUE4RyxvQkFDQW5SLGVBQUFxSyxHQUFBK0cscUJBSUEyRyxLQUFBLENBRUE5WSxTQUFBLENBQ0ErWSxNQUFBLENBQUE3ekQsTUFBQSxNQUNBOHpELE1BQUEsQ0FBQTl6RCxPQUFBLEdBQ0ErbkMsUUFBQSxDQUFBL25DLE1BQUEsSUFHQTQ3QyxhQUFBc0ssR0FBQWdILFVBQ0FyUixlQUFBcUssR0FBQWlILFdBSUE0RyxTQUFBLENBRUFqWixTQUFBLENBQ0FzRixVQUFBLENBQUFwZ0QsTUFBQSxPQUdBNDdDLGFBQUFzSyxHQUFBc0gsY0FDQTNSLGVBQUFxSyxHQUFBdUgsZUFJQXVHLGFBQUEsQ0FFQWxaLFNBQUFELEdBQUEsQ0FDQW1VLEdBQUF0SCxPQUNBc0gsR0FBQWlCLGdCQUNBLENBQ0FnRSxrQkFBQSxDQUFBajBELE1BQUEsSUFBQWtlLElBQ0FnMkMsYUFBQSxDQUFBbDBELE1BQUEsR0FDQW0wRCxZQUFBLENBQUFuMEQsTUFBQSxRQUlBNDdDLGFBQUFzSyxHQUFBb0gsa0JBQ0F6UixlQUFBcUssR0FBQXFILG1CQUlBNkcsT0FBQSxDQUVBdFosU0FBQUQsR0FBQSxDQUNBbVUsR0FBQWxULE9BQ0FrVCxHQUFBbmdCLElBQ0EsQ0FDQTMvQixNQUFBLENBQUFsUCxNQUFBLElBQUF1bEMsR0FBQSxJQUNBd0MsUUFBQSxDQUFBL25DLE1BQUEsTUFJQTQ3QyxhQUFBc0ssR0FBQTBJLFlBQ0EvUyxlQUFBcUssR0FBQTJJLGNBTUFrRSxHQUFBc0IsU0FBQSxDQUVBdlosU0FBQUQsR0FBQSxDQUNBa1ksR0FBQUksU0FBQXJZLFNBQ0EsQ0FDQXpQLFVBQUEsQ0FBQXJyQyxNQUFBLEdBQ0F1ckMsYUFBQSxDQUFBdnJDLE1BQUEsTUFDQXMwRCxzQkFBQSxDQUFBdDBELE1BQUEsSUFBQWlKLElBQ0F3aUMsbUJBQUEsQ0FBQXpyQyxNQUFBLE1BQ0F1MEQsNEJBQUEsQ0FBQXYwRCxNQUFBLElBQUFpSixJQUNBeWlDLHFCQUFBLENBQUExckMsTUFBQSxJQUFBNkUsR0FBQSxFQUFBLElBQ0F5bUMsbUJBQUEsQ0FBQXRyQyxNQUFBLEdBQ0F3ckMsc0JBQUEsQ0FBQXhyQyxNQUFBLE1BQ0F3MEQsK0JBQUEsQ0FBQXgwRCxNQUFBLElBQUFpSixJQUNBMGlDLFdBQUEsQ0FBQTNyQyxNQUFBLEdBQ0E0ckMsWUFBQSxDQUFBNXJDLE1BQUEsR0FDQStyQyxlQUFBLENBQUEvckMsTUFBQSxNQUNBeTBELHdCQUFBLENBQUF6MEQsTUFBQSxJQUFBaUosSUFDQTRpQyxlQUFBLENBQUE3ckMsTUFBQSxLQUNBMDBELDRCQUFBLENBQUExMEQsTUFBQSxLQUNBMjBELDRCQUFBLENBQUEzMEQsTUFBQSxLQUNBZ3NDLHdCQUFBLENBQUFoc0MsTUFBQSxNQUNBNDBELGlDQUFBLENBQUE1MEQsTUFBQSxJQUFBaUosSUFDQTJoQyxNQUFBLENBQUE1cUMsTUFBQSxHQUNBNnFDLFdBQUEsQ0FBQTdxQyxNQUFBLElBQUF1bEMsR0FBQSxJQUNBc3ZCLGNBQUEsQ0FBQTcwRCxNQUFBLE1BQ0E4MEQsdUJBQUEsQ0FBQTkwRCxNQUFBLElBQUFpSixJQUNBNmhDLGVBQUEsQ0FBQTlxQyxNQUFBLEdBQ0ErMEQsa0JBQUEsQ0FBQS8wRCxNQUFBLE1BQ0FnMUQsMkJBQUEsQ0FBQWgxRCxNQUFBLElBQUFpSixJQUNBNmtDLGFBQUEsQ0FBQTl0QyxNQUFBLEdBQ0ErdEMsZ0JBQUEsQ0FBQS90QyxNQUFBLE1BQ0FpMUQseUJBQUEsQ0FBQWoxRCxNQUFBLElBQUFpSixJQUNBaXNELHdCQUFBLENBQUFsMUQsTUFBQSxJQUFBNkUsSUFDQXN3RCx1QkFBQSxDQUFBbjFELE1BQUEsTUFDQWd1QyxVQUFBLENBQUFodUMsTUFBQSxHQUNBaXVDLGFBQUEsQ0FBQWp1QyxNQUFBLE1BQ0FvMUQsc0JBQUEsQ0FBQXAxRCxNQUFBLElBQUFpSixJQUNBaWxDLG9CQUFBLENBQUFsdUMsTUFBQSxHQUNBbXVDLGlCQUFBLENBQUFudUMsTUFBQSxJQUFBdWxDLEdBQUEsSUFDQTRGLGNBQUEsQ0FBQW5yQyxNQUFBLElBQUF1bEMsR0FBQSxFQUFBLEVBQUEsSUFDQStILGlCQUFBLENBQUF0dEMsTUFBQSxNQUNBcTFELDBCQUFBLENBQUFyMUQsTUFBQSxJQUFBaUosSUFDQWlpQyxrQkFBQSxDQUFBbHJDLE1BQUEsR0FDQXF0QyxxQkFBQSxDQUFBcnRDLE1BQUEsTUFDQXMxRCw4QkFBQSxDQUFBdDFELE1BQUEsSUFBQWlKLElBQ0Fzc0QsaUJBQUEsQ0FBQXYxRCxNQUFBLElBQUE2RSxJQUNBcW5DLGNBQUEsQ0FBQWxzQyxNQUFBLE1BQ0F3MUQsdUJBQUEsQ0FBQXgxRCxNQUFBLElBQUFpSixPQUlBMnlDLGFBQUFzSyxHQUFBb0ksa0JBQ0F6UyxlQUFBcUssR0FBQXFJLG1CQ3ZWQSxNQUFBa0gsR0FBQSxDQUFBOW9ELEVBQUEsRUFBQTlJLEVBQUEsRUFBQWlJLEVBQUEsR0FDQTRwRCxHQUFBLElBQUF0bUMsR0FDQXVtQyxHQUFBLElBQUE3ckMsR0FFQSxTQUFBOHJDLEdBQUEzYSxFQUFBNGEsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQS90RCxFQUFBK2hDLEdBRUEsTUFBQWlzQixFQUFBLElBQUExd0IsR0FBQSxHQUNBLElBRUEyd0IsRUFDQUMsRUFIQUMsR0FBQSxJQUFBbnVELEVBQUEsRUFBQSxFQUtBb3VELEVBQUEsS0FDQUMsRUFBQSxFQUNBQyxFQUFBLEtBRUEsU0FBQUMsRUFBQW5YLEdBRUEsSUFBQWpuQixHQUFBLElBQUFpbkIsRUFBQWxuQixRQUFBa25CLEVBQUFqbkIsV0FBQSxLQUVBLEdBQUFBLEdBQUFBLEVBQUF2a0IsVUFBQSxDQUdBdWtCLEdBREFpbkIsRUFBQXFVLHFCQUFBLEVBQ0FvQyxFQUFBRCxHQUFBdFIsSUFBQW5zQixFQUVBLENBRUEsT0FBQUEsQ0FFQSxDQW1NQSxTQUFBcStCLEVBQUF2bkQsRUFBQWpILEdBRUFpSCxFQUFBNjNCLE9BQUEwdUIsR0FBQXphLEdBQUFDLElBRUE4YSxFQUFBMVIsUUFBQW4xQyxNQUFBdW5ELFNBQUFoQixHQUFBOW9ELEVBQUE4b0QsR0FBQTNwRCxFQUFBMnBELEdBQUE1eEQsRUFBQW9FLEVBQUEraEMsRUFFQSxDQUVBLE1BQUEsQ0FFQTBzQixjQUFBLFdBRUEsT0FBQVQsQ0FFQSxFQUNBVSxjQUFBLFNBQUF6bkQsRUFBQWpILEVBQUEsR0FFQWd1RCxFQUFBdnhELElBQUF3SyxHQUNBa25ELEVBQUFudUQsRUFDQXd1RCxFQUFBUixFQUFBRyxFQUVBLEVBQ0FRLGNBQUEsV0FFQSxPQUFBUixDQUVBLEVBQ0FTLGNBQUEsU0FBQTV1RCxHQUVBbXVELEVBQUFudUQsRUFDQXd1RCxFQUFBUixFQUFBRyxFQUVBLEVBQ0F2VyxPQWxPQSxTQUFBUixHQUVBLElBQUF5WCxHQUFBLEVBQ0EsTUFBQTErQixFQUFBbytCLEVBQUFuWCxHQUVBLE9BQUFqbkIsRUFFQXErQixFQUFBUixFQUFBRyxHQUVBaCtCLEdBQUFBLEVBQUFDLFVBRUFvK0IsRUFBQXIrQixFQUFBLEdBQ0EwK0IsR0FBQSxHQUlBLE1BQUFDLEVBQUE5YixFQUFBMEUsR0FBQXFYLDBCQUVBLGFBQUFELEVBRUFoQixFQUFBMVIsUUFBQW4xQyxNQUFBdW5ELFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQXpzQixHQUVBLGdCQUFBK3NCLEdBRUFoQixFQUFBMVIsUUFBQW4xQyxNQUFBdW5ELFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQXpzQixJQUlBaVIsRUFBQWdjLFdBQUFILEtBSUFmLEVBQUExUixRQUFBNXNDLE1BQUF5L0MsU0FBQSxHQUNBbkIsRUFBQTFSLFFBQUE1c0MsTUFBQTAvQyxTQUFBLEdBQ0FwQixFQUFBMVIsUUFBQW4xQyxNQUFBaW9ELFNBQUEsR0FFQWxjLEVBQUFoaUMsTUFBQWdpQyxFQUFBbWMsZUFBQW5jLEVBQUFvYyxlQUFBcGMsRUFBQXFjLGtCQUlBLEVBMkxBQyxnQkF6TEEsU0FBQUMsRUFBQW5ZLEdBRUEsTUFBQWpuQixFQUFBbytCLEVBQUFuWCxHQUVBam5CLElBQUFBLEVBQUEybkIsZUFBQTNuQixFQUFBamxCLFVBQUFoZSxVQUVBMkksSUFBQXE0RCxJQUVBQSxFQUFBLElBQUF0ZSxHQUNBLElBQUFvQixHQUFBLEVBQUEsRUFBQSxHQUNBLElBQUF1QyxHQUFBLENBQ0FydEMsS0FBQSx5QkFDQTJzQyxTQUFBSCxHQUFBb1ksR0FBQVUsZUFBQTNZLFVBQ0FjLGFBQUFtWCxHQUFBVSxlQUFBN1gsYUFDQUMsZUFBQWtYLEdBQUFVLGVBQUE1WCxlQUNBaFUsS0FBQWgyQyxFQUNBODJDLFdBQUEsRUFDQUMsWUFBQSxFQUNBaUcsS0FBQSxLQUlBc25CLEVBQUFwekMsU0FBQXV3QixnQkFBQSxVQUNBNmlCLEVBQUFwekMsU0FBQXV3QixnQkFBQSxNQUVBNmlCLEVBQUF6akMsZUFBQSxTQUFBdW9CLEVBQUFvRSxFQUFBbGdDLEdBRUFwaEIsS0FBQXloQixZQUFBK0ssYUFBQXBMLEVBQUFLLFlBRUEsRUFHQXpOLE9BQUFDLGVBQUFta0QsRUFBQXA5QixTQUFBLFNBQUEsQ0FFQXdyQixJQUFBLFdBRUEsT0FBQXhtRCxLQUFBKzhDLFNBQUF2TixPQUFBdnRDLEtBRUEsSUFJQWcyRCxFQUFBeDZDLE9BQUEyNkMsSUFJQVQsR0FBQWp3RCxLQUFBNDVDLEVBQUFzVSxvQkFHQStCLEdBQUFuMUQsSUFBQSxFQUFBbTFELEdBQUFsMUQsSUFBQSxFQUFBazFELEdBQUFoZ0QsSUFBQSxFQUVBMGlCLEVBQUEybkIsZ0JBQUEsSUFBQTNuQixFQUFBMWpCLHdCQUdBZ2hELEdBQUFsMUQsSUFBQSxFQUNBazFELEdBQUFoZ0QsSUFBQSxHQUlBeWdELEVBQUFwOUIsU0FBQStoQixTQUFBdk4sT0FBQXZ0QyxNQUFBbzRCLEVBQ0ErOUIsRUFBQXA5QixTQUFBK2hCLFNBQUF5VSxXQUFBdnZELE1BQUFvNEIsRUFBQTJuQixnQkFBQSxJQUFBM25CLEVBQUExakIsdUJBQUEsRUFBQSxFQUNBeWhELEVBQUFwOUIsU0FBQStoQixTQUFBNFkscUJBQUExekQsTUFBQXEvQyxFQUFBcVUscUJBQ0F5QyxFQUFBcDlCLFNBQUEraEIsU0FBQTBZLG9CQUFBeHpELE1BQUFxL0MsRUFBQW1VLG9CQUNBMkMsRUFBQXA5QixTQUFBK2hCLFNBQUE2WSxtQkFBQTN6RCxNQUFBb0ssZUFBQXVyRCxHQUFBNXFDLHNCQUFBMnFDLEtBQ0FTLEVBQUFwOUIsU0FBQW1SLFdBQUExNkIsR0FBQWMsWUFBQThuQixFQUFBeG9CLGNBQUExVSxHQUVBbTdELElBQUFqK0IsR0FDQWsrQixJQUFBbCtCLEVBQUFqbUIsU0FDQW9rRCxJQUFBdGIsRUFBQXdjLGNBRUF0QixFQUFBcDlCLFNBQUEzbUIsYUFBQSxFQUVBaWtELEVBQUFqK0IsRUFDQWsrQixFQUFBbCtCLEVBQUFqbUIsUUFDQW9rRCxFQUFBdGIsRUFBQXdjLGFBSUF0QixFQUFBaG1DLE9BQUFKLFlBR0F5bkMsRUFBQUUsUUFBQXZCLEVBQUFBLEVBQUFwekMsU0FBQW96QyxFQUFBcDlCLFNBQUEsRUFBQSxFQUFBLE9BRUFYLEdBQUFBLEVBQUF2a0IsaUJBRUEvVixJQUFBbzRELElBRUFBLEVBQUEsSUFBQXJlLEdBQ0EsSUFBQWdPLEdBQUEsRUFBQSxHQUNBLElBQUFySyxHQUFBLENBQ0FydEMsS0FBQSxxQkFDQTJzQyxTQUFBSCxHQUFBb1ksR0FBQTM2QixXQUFBMGlCLFVBQ0FjLGFBQUFtWCxHQUFBMzZCLFdBQUF3akIsYUFDQUMsZUFBQWtYLEdBQUEzNkIsV0FBQXlqQixlQUNBaFUsS0FBQWoyQyxFQUNBKzJDLFdBQUEsRUFDQUMsWUFBQSxFQUNBaUcsS0FBQSxLQUlBcW5CLEVBQUFuekMsU0FBQXV3QixnQkFBQSxVQUdBdmhDLE9BQUFDLGVBQUFra0QsRUFBQW45QixTQUFBLE1BQUEsQ0FFQXdyQixJQUFBLFdBRUEsT0FBQXhtRCxLQUFBKzhDLFNBQUF5WSxJQUFBdnpELEtBRUEsSUFJQWcyRCxFQUFBeDZDLE9BQUEwNkMsSUFJQUEsRUFBQW45QixTQUFBK2hCLFNBQUF5WSxJQUFBdnpELE1BQUFvNEIsRUFDQTg5QixFQUFBbjlCLFNBQUEraEIsU0FBQTBZLG9CQUFBeHpELE1BQUFxL0MsRUFBQW1VLG9CQUNBMEMsRUFBQW45QixTQUFBbVIsV0FBQTE2QixHQUFBYyxZQUFBOG5CLEVBQUF4b0IsY0FBQTFVLElBRUEsSUFBQWs5QixFQUFBamtCLGtCQUVBaWtCLEVBQUF4akIsZUFJQXNoRCxFQUFBbjlCLFNBQUEraEIsU0FBQWdZLFlBQUE5eUQsTUFBQXlGLEtBQUEyeUIsRUFBQXpxQixRQUVBMG9ELElBQUFqK0IsR0FDQWsrQixJQUFBbCtCLEVBQUFqbUIsU0FDQW9rRCxJQUFBdGIsRUFBQXdjLGNBRUF2QixFQUFBbjlCLFNBQUEzbUIsYUFBQSxFQUVBaWtELEVBQUFqK0IsRUFDQWsrQixFQUFBbCtCLEVBQUFqbUIsUUFDQW9rRCxFQUFBdGIsRUFBQXdjLGFBSUF2QixFQUFBL2xDLE9BQUFKLFlBR0F5bkMsRUFBQUUsUUFBQXhCLEVBQUFBLEVBQUFuekMsU0FBQW16QyxFQUFBbjlCLFNBQUEsRUFBQSxFQUFBLE1BSUEsRUF3Q0EsQ0NoUkEsU0FBQTQrQixHQUFBdlQsRUFBQXRSLEdBRUEsTUFBQThrQixFQUFBeFQsRUFBQXhnQyxhQUFBd2dDLEVBQUF5VCxvQkFFQUMsRUFBQSxDQUFBLEVBRUFDLEVBQUFDLEVBQUEsTUFDQSxJQUFBQyxFQUFBRixFQUNBRyxHQUFBLEVBK0NBLFNBQUFDLEVBQUFDLEdBRUEsT0FBQWhVLEVBQUFpVSxnQkFBQUQsRUFFQSxDQUVBLFNBQUFFLEVBQUFGLEdBRUEsT0FBQWhVLEVBQUFtVSxrQkFBQUgsRUFFQSxDQXFDQSxTQUFBSixFQUFBSSxHQUVBLE1BQUFJLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBRUEsSUFBQSxJQUFBNTVELEVBQUEsRUFBQUEsRUFBQTg0RCxFQUFBOTRELElBRUEwNUQsRUFBQTE1RCxHQUFBLEVBQ0EyNUQsRUFBQTM1RCxHQUFBLEVBQ0E0NUQsRUFBQTU1RCxHQUFBLEVBSUEsTUFBQSxDQUdBaWtCLFNBQUEsS0FDQTQxQyxRQUFBLEtBQ0FucUIsV0FBQSxFQUVBZ3FCLGNBQUFBLEVBQ0FDLGtCQUFBQSxFQUNBQyxrQkFBQUEsRUFDQXYyQyxPQUFBaTJDLEVBQ0F0bEIsV0FBQSxDQUFBLEVBQ0F2MEMsTUFBQSxLQUlBLENBOEZBLFNBQUFxNkQsSUFFQSxNQUFBSixFQUFBUCxFQUFBTyxjQUVBLElBQUEsSUFBQTE1RCxFQUFBLEVBQUF5WixFQUFBaWdELEVBQUF4NUQsT0FBQUYsRUFBQXlaLEVBQUF6WixJQUVBMDVELEVBQUExNUQsR0FBQSxDQUlBLENBRUEsU0FBQSs1RCxFQUFBbndELEdBRUFvd0QsRUFBQXB3RCxFQUFBLEVBRUEsQ0FFQSxTQUFBb3dELEVBQUFwd0QsRUFBQXF3RCxHQUVBLE1BQUFQLEVBQUFQLEVBQUFPLGNBQ0FDLEVBQUFSLEVBQUFRLGtCQUNBQyxFQUFBVCxFQUFBUyxrQkFFQUYsRUFBQTl2RCxHQUFBLEVBRUEsSUFBQSt2RCxFQUFBL3ZELEtBRUEwN0MsRUFBQTRVLHdCQUFBdHdELEdBQ0ErdkQsRUFBQS92RCxHQUFBLEdBSUFnd0QsRUFBQWh3RCxLQUFBcXdELElBRUEzVSxFQUFBNlUsb0JBQUF2d0QsRUFBQXF3RCxHQUNBTCxFQUFBaHdELEdBQUFxd0QsRUFJQSxDQUVBLFNBQUFHLElBRUEsTUFBQVYsRUFBQVAsRUFBQU8sY0FDQUMsRUFBQVIsRUFBQVEsa0JBRUEsSUFBQSxJQUFBMzVELEVBQUEsRUFBQXlaLEVBQUFrZ0QsRUFBQXo1RCxPQUFBRixFQUFBeVosRUFBQXpaLElBRUEyNUQsRUFBQTM1RCxLQUFBMDVELEVBQUExNUQsS0FFQXNsRCxFQUFBK1UseUJBQUFyNkQsR0FDQTI1RCxFQUFBMzVELEdBQUEsRUFNQSxDQUVBLFNBQUFzNkQsRUFBQTc2RCxFQUFBeWpCLEVBQUFwa0IsRUFBQXl5QyxFQUFBaUcsRUFBQS90QyxFQUFBOHdELElBRUEsSUFBQUEsRUFFQWpWLEVBQUFrVixxQkFBQS82RCxFQUFBeWpCLEVBQUFwa0IsRUFBQTA0QyxFQUFBL3RDLEdBSUE2N0MsRUFBQWdWLG9CQUFBNzZELEVBQUF5akIsRUFBQXBrQixFQUFBeXlDLEVBQUFpRyxFQUFBL3RDLEVBSUEsQ0E2UEEsU0FBQWd4RCxJQUVBQyxJQUNBdEIsR0FBQSxFQUVBRCxJQUFBRixJQUVBRSxFQUFBRixFQUNBSSxFQUFBRixFQUFBOTFDLFFBRUEsQ0FJQSxTQUFBcTNDLElBRUF6QixFQUFBaDFDLFNBQUEsS0FDQWcxQyxFQUFBWSxRQUFBLEtBQ0FaLEVBQUF2cEIsV0FBQSxDQUVBLENBRUEsTUFBQSxDQUVBaXJCLE1BcmpCQSxTQUFBdDNDLEVBQUE0VyxFQUFBNC9CLEVBQUE1MUMsRUFBQXhrQixHQUVBLElBQUFtN0QsR0FBQSxFQUVBLE1BQUEzRCxFQXFEQSxTQUFBaHpDLEVBQUE0MUMsRUFBQTUvQixHQUVBLE1BQUF5VixHQUFBLElBQUF6VixFQUFBeVYsVUFFQSxJQUFBbXJCLEVBQUE3QixFQUFBLzBDLEVBQUFxUixTQUVBdDJCLElBQUE2N0QsSUFFQUEsRUFBQSxDQUFBLEVBQ0E3QixFQUFBLzBDLEVBQUFxUixJQUFBdWxDLEdBSUEsSUFBQUMsRUFBQUQsRUFBQWhCLEVBQUF2a0MsU0FFQXQyQixJQUFBODdELElBRUFBLEVBQUEsQ0FBQSxFQUNBRCxFQUFBaEIsRUFBQXZrQyxJQUFBd2xDLEdBSUEsSUFBQTdELEVBQUE2RCxFQUFBcHJCLFFBRUExd0MsSUFBQWk0RCxJQUVBQSxFQUFBaUMsRUExQ0E1VCxFQUFBeVYscUJBMkNBRCxFQUFBcHJCLEdBQUF1bkIsR0FJQSxPQUFBQSxDQUVBLENBdEZBK0QsQ0FBQS8yQyxFQUFBNDFDLEVBQUE1L0IsR0FFQWsvQixJQUFBbEMsSUFFQWtDLEVBQUFsQyxFQUNBb0MsRUFBQUYsRUFBQTkxQyxTQUlBdTNDLEVBK0dBLFNBQUF2M0MsRUFBQVksRUFBQTQxQyxFQUFBcDZELEdBRUEsTUFBQXc3RCxFQUFBOUIsRUFBQW5sQixXQUNBa25CLEVBQUFqM0MsRUFBQSt2QixXQUVBLElBQUFtbkIsRUFBQSxFQUVBLE1BQUFDLEVBQUF2QixFQUFBd0IsZ0JBRUEsSUFBQSxNQUFBaHNELEtBQUErckQsRUFBQSxDQUlBLEdBRkFBLEVBQUEvckQsR0FFQWlzRCxVQUFBLEVBQUEsQ0FFQSxNQUFBQyxFQUFBTixFQUFBNXJELEdBQ0EsSUFBQW1zRCxFQUFBTixFQUFBN3JELEdBU0EsUUFQQXJRLElBQUF3OEQsSUFFQSxtQkFBQW5zRCxHQUFBZ1UsRUFBQTBULGlCQUFBeWtDLEVBQUFuNEMsRUFBQTBULGdCQUNBLGtCQUFBMW5CLEdBQUFnVSxFQUFBMlQsZ0JBQUF3a0MsRUFBQW40QyxFQUFBMlQscUJBSUFoNEIsSUFBQXU4RCxFQUFBLE9BQUEsRUFFQSxHQUFBQSxFQUFBM3hELFlBQUE0eEQsRUFBQSxPQUFBLEVBRUEsR0FBQUEsR0FBQUQsRUFBQTFvRCxPQUFBMm9ELEVBQUEzb0QsS0FBQSxPQUFBLEVBRUFzb0QsR0FFQSxDQUVBLENBRUEsT0FBQWhDLEVBQUFnQyxnQkFBQUEsR0FFQWhDLEVBQUExNUQsUUFBQUEsQ0FJQSxDQTFKQTZULENBQUErUCxFQUFBWSxFQUFBNDFDLEVBQUFwNkQsR0FFQW03RCxHQTBKQSxTQUFBdjNDLEVBQUFZLEVBQUE0MUMsRUFBQXA2RCxHQUVBLE1BQUE0NkIsRUFBQSxDQUFBLEVBQ0EyWixFQUFBL3ZCLEVBQUErdkIsV0FDQSxJQUFBbW5CLEVBQUEsRUFFQSxNQUFBQyxFQUFBdkIsRUFBQXdCLGdCQUVBLElBQUEsTUFBQWhzRCxLQUFBK3JELEVBQUEsQ0FJQSxHQUZBQSxFQUFBL3JELEdBRUFpc0QsVUFBQSxFQUFBLENBRUEsSUFBQTF4RCxFQUFBb3FDLEVBQUEza0MsUUFFQXJRLElBQUE0SyxJQUVBLG1CQUFBeUYsR0FBQWdVLEVBQUEwVCxpQkFBQW50QixFQUFBeVosRUFBQTBULGdCQUNBLGtCQUFBMW5CLEdBQUFnVSxFQUFBMlQsZ0JBQUFwdEIsRUFBQXlaLEVBQUEyVCxnQkFJQSxNQUFBbmtCLEVBQUEsQ0FBQSxFQUNBQSxFQUFBakosVUFBQUEsRUFFQUEsR0FBQUEsRUFBQWlKLE9BRUFBLEVBQUFBLEtBQUFqSixFQUFBaUosTUFJQXduQixFQUFBaHJCLEdBQUF3RCxFQUVBc29ELEdBRUEsQ0FFQSxDQUVBaEMsRUFBQW5sQixXQUFBM1osRUFDQTgrQixFQUFBZ0MsY0FBQUEsRUFFQWhDLEVBQUExNUQsTUFBQUEsQ0FFQSxDQXZNQWc4RCxDQUFBcDRDLEVBQUFZLEVBQUE0MUMsRUFBQXA2RCxHQUVBLE9BQUFBLEdBRUF1MEMsRUFBQXQzQixPQUFBamQsRUFBQTZsRCxFQUFBb1csdUJBSUFkLEdBQUF4QixLQUVBQSxHQUFBLEVBeVFBLFNBQUEvMUMsRUFBQTRXLEVBQUE0L0IsRUFBQTUxQyxHQUVBNjFDLElBRUEsTUFBQW9CLEVBQUFqM0MsRUFBQSt2QixXQUVBb25CLEVBQUF2QixFQUFBd0IsZ0JBRUFNLEVBQUExaEMsRUFBQW9qQix1QkFFQSxJQUFBLE1BQUFodUMsS0FBQStyRCxFQUFBLENBRUEsTUFBQVEsRUFBQVIsRUFBQS9yRCxHQUVBLEdBQUF1c0QsRUFBQU4sVUFBQSxFQUFBLENBRUEsSUFBQUUsRUFBQU4sRUFBQTdyRCxHQVNBLFFBUEFyUSxJQUFBdzhELElBRUEsbUJBQUFuc0QsR0FBQWdVLEVBQUEwVCxpQkFBQXlrQyxFQUFBbjRDLEVBQUEwVCxnQkFDQSxrQkFBQTFuQixHQUFBZ1UsRUFBQTJULGdCQUFBd2tDLEVBQUFuNEMsRUFBQTJULHFCQUlBaDRCLElBQUF3OEQsRUFBQSxDQUVBLE1BQUFqcUIsRUFBQWlxQixFQUFBanFCLFdBQ0FydUIsRUFBQXM0QyxFQUFBbHFCLFNBRUExbkMsRUFBQW9xQyxFQUFBeVIsSUFBQStWLEdBSUEsUUFBQXg4RCxJQUFBNEssRUFBQSxTQUVBLE1BQUF1RixFQUFBdkYsRUFBQXVGLE9BQ0FyUSxFQUFBOEssRUFBQTlLLEtBQ0FnbkQsRUFBQWw4QyxFQUFBazhDLGdCQUlBeVUsRUFBQXo3RCxJQUFBd21ELEVBQUFtQixLQUFBM25ELElBQUF3bUQsRUFBQWtCLGNBQUFnVixFQUFBM3BCLFVBQUF0NkMsR0FFQSxHQUFBaWtFLEVBQUFqa0IsNkJBQUEsQ0FFQSxNQUFBMWtDLEVBQUEyb0QsRUFBQTNvRCxLQUNBMmtDLEVBQUEza0MsRUFBQTJrQyxPQUNBL3RDLEVBQUEreEQsRUFBQS94RCxPQUVBLEdBQUFvSixFQUFBZ3BELDZCQUFBLENBRUEsSUFBQSxJQUFBNzdELEVBQUEsRUFBQUEsRUFBQTQ3RCxFQUFBRSxhQUFBOTdELElBRUFnNkQsRUFBQTRCLEVBQUFOLFNBQUF0N0QsRUFBQTZTLEVBQUFvbkQsbUJBSUEsSUFBQTUyQyxFQUFBZSxzQkFBQXBsQixJQUFBaWxCLEVBQUFzVSxvQkFFQXRVLEVBQUFzVSxrQkFBQTFsQixFQUFBb25ELGlCQUFBcG5ELEVBQUF5RyxNQUlBLE1BRUEsSUFBQSxJQUFBdFosRUFBQSxFQUFBQSxFQUFBNDdELEVBQUFFLGFBQUE5N0QsSUFFQSs1RCxFQUFBNkIsRUFBQU4sU0FBQXQ3RCxHQU1Bc2xELEVBQUFZLFdBQUFaLEVBQUF5VyxhQUFBNXNELEdBRUEsSUFBQSxJQUFBblAsRUFBQSxFQUFBQSxFQUFBNDdELEVBQUFFLGFBQUE5N0QsSUFFQXM2RCxFQUNBc0IsRUFBQU4sU0FBQXQ3RCxFQUNBa2pCLEVBQUEwNEMsRUFBQUUsYUFDQWg5RCxFQUNBeXlDLEVBQ0FpRyxFQUFBc08sR0FDQXI4QyxFQUFBeVosRUFBQTA0QyxFQUFBRSxhQUFBOTdELEdBQUE4bEQsRUFDQXlVLEVBS0EsS0FBQSxDQUVBLEdBQUFpQixFQUFBUSwyQkFBQSxDQUVBLElBQUEsSUFBQWg4RCxFQUFBLEVBQUFBLEVBQUE0N0QsRUFBQUUsYUFBQTk3RCxJQUVBZzZELEVBQUE0QixFQUFBTixTQUFBdDdELEVBQUF3N0QsRUFBQXZCLG1CQUlBLElBQUE1MkMsRUFBQWUsc0JBQUFwbEIsSUFBQWlsQixFQUFBc1Usb0JBRUF0VSxFQUFBc1Usa0JBQUFpakMsRUFBQXZCLGlCQUFBdUIsRUFBQWxpRCxNQUlBLE1BRUEsSUFBQSxJQUFBdFosRUFBQSxFQUFBQSxFQUFBNDdELEVBQUFFLGFBQUE5N0QsSUFFQSs1RCxFQUFBNkIsRUFBQU4sU0FBQXQ3RCxHQU1Bc2xELEVBQUFZLFdBQUFaLEVBQUF5VyxhQUFBNXNELEdBRUEsSUFBQSxJQUFBblAsRUFBQSxFQUFBQSxFQUFBNDdELEVBQUFFLGFBQUE5N0QsSUFFQXM2RCxFQUNBc0IsRUFBQU4sU0FBQXQ3RCxFQUNBa2pCLEVBQUEwNEMsRUFBQUUsYUFDQWg5RCxFQUNBeXlDLEVBQ0FydUIsRUFBQTRpQyxFQUNBNWlDLEVBQUEwNEMsRUFBQUUsYUFBQTk3RCxFQUFBOGxELEVBQ0F5VSxFQUtBLENBRUEsTUFBQSxRQUFBdjdELElBQUEyOEQsRUFBQSxDQUVBLE1BQUF6NkQsRUFBQXk2RCxFQUFBdHNELEdBRUEsUUFBQXJRLElBQUFrQyxFQUVBLE9BQUFBLEVBQUFoQixRQUVBLEtBQUEsRUFDQW9sRCxFQUFBMlcsZ0JBQUFMLEVBQUFOLFNBQUFwNkQsR0FDQSxNQUVBLEtBQUEsRUFDQW9rRCxFQUFBNFcsZ0JBQUFOLEVBQUFOLFNBQUFwNkQsR0FDQSxNQUVBLEtBQUEsRUFDQW9rRCxFQUFBNlcsZ0JBQUFQLEVBQUFOLFNBQUFwNkQsR0FDQSxNQUVBLFFBQ0Fva0QsRUFBQThXLGdCQUFBUixFQUFBTixTQUFBcDZELEdBTUEsQ0FFQSxDQUVBLENBRUFrNUQsR0FFQSxDQWhiQWlDLENBQUFoNUMsRUFBQTRXLEVBQUE0L0IsRUFBQTUxQyxHQUVBLE9BQUF4a0IsR0FFQTZsRCxFQUFBWSxXQUFBWixFQUFBb1cscUJBQUExbkIsRUFBQXlSLElBQUFobUQsR0FBQTBQLFFBTUEsRUFpaEJBc3JELE1BQUFBLEVBQ0FDLGtCQUFBQSxFQUNBbmtELFFBM0dBLFdBRUFra0QsSUFFQSxJQUFBLE1BQUE2QixLQUFBdEQsRUFBQSxDQUVBLE1BQUE2QixFQUFBN0IsRUFBQXNELEdBRUEsSUFBQSxNQUFBQyxLQUFBMUIsRUFBQSxDQUVBLE1BQUFDLEVBQUFELEVBQUEwQixHQUVBLElBQUEsTUFBQTdzQixLQUFBb3JCLEVBRUF0QixFQUFBc0IsRUFBQXByQixHQUFBcnNCLGVBRUF5M0MsRUFBQXByQixVQUlBbXJCLEVBQUEwQixFQUVBLFFBRUF2RCxFQUFBc0QsRUFFQSxDQUVBLEVBZ0ZBRSx3QkE5RUEsU0FBQXY0QyxHQUVBLFFBQUFqbEIsSUFBQWc2RCxFQUFBLzBDLEVBQUFxUixJQUFBLE9BRUEsTUFBQXVsQyxFQUFBN0IsRUFBQS8wQyxFQUFBcVIsSUFFQSxJQUFBLE1BQUFpbkMsS0FBQTFCLEVBQUEsQ0FFQSxNQUFBQyxFQUFBRCxFQUFBMEIsR0FFQSxJQUFBLE1BQUE3c0IsS0FBQW9yQixFQUVBdEIsRUFBQXNCLEVBQUFwckIsR0FBQXJzQixlQUVBeTNDLEVBQUFwckIsVUFJQW1yQixFQUFBMEIsRUFFQSxRQUVBdkQsRUFBQS8wQyxFQUFBcVIsR0FFQSxFQXVEQW1uQyx1QkFyREEsU0FBQTVDLEdBRUEsSUFBQSxNQUFBeUMsS0FBQXRELEVBQUEsQ0FFQSxNQUFBNkIsRUFBQTdCLEVBQUFzRCxHQUVBLFFBQUF0OUQsSUFBQTY3RCxFQUFBaEIsRUFBQXZrQyxJQUFBLFNBRUEsTUFBQXdsQyxFQUFBRCxFQUFBaEIsRUFBQXZrQyxJQUVBLElBQUEsTUFBQW9hLEtBQUFvckIsRUFFQXRCLEVBQUFzQixFQUFBcHJCLEdBQUFyc0IsZUFFQXkzQyxFQUFBcHJCLFVBSUFtckIsRUFBQWhCLEVBQUF2a0MsR0FFQSxDQUVBLEVBaUNBd2tDLGVBQUFBLEVBQ0FDLGdCQUFBQSxFQUNBSyx3QkFBQUEsRUFJQSxDQzlrQkEsU0FBQXNDLEdBQUFwWCxFQUFBcEksRUFBQXlmLEdBRUEsSUFBQUMsRUFnQkEsU0FBQUMsRUFBQTNxQixFQUFBNTRCLEVBQUF3akQsR0FFQSxJQUFBQSxJQUVBeFgsRUFBQXlYLG9CQUFBSCxFQUFBMXFCLEVBQUE1NEIsRUFBQXdqRCxHQUVBSCxFQUFBamdELE9BQUFwRCxFQUFBc2pELEVBQUFFLEdBRUEsQ0F5REE3OUQsS0FBQSs5RCxRQS9FQSxTQUFBOTdELEdBRUEwN0QsRUFBQTE3RCxDQUVBLEVBNEVBakMsS0FBQThoRCxPQTFFQSxTQUFBN08sRUFBQTU0QixHQUVBZ3NDLEVBQUEyWCxXQUFBTCxFQUFBMXFCLEVBQUE1NEIsR0FFQXFqRCxFQUFBamdELE9BQUFwRCxFQUFBc2pELEVBQUEsRUFFQSxFQXFFQTM5RCxLQUFBNDlELGdCQUFBQSxFQUNBNTlELEtBQUFpK0QsZ0JBMURBLFNBQUFDLEVBQUFDLEVBQUFDLEdBRUEsR0FBQSxJQUFBQSxFQUFBLE9BRUFuZ0IsRUFBQXVJLElBQUEsb0JBQ0E2WCxxQkFBQVYsRUFBQU8sRUFBQSxFQUFBQyxFQUFBLEVBQUFDLEdBRUEsSUFBQUUsRUFBQSxFQUNBLElBQUEsSUFBQXY5RCxFQUFBLEVBQUFBLEVBQUFxOUQsRUFBQXI5RCxJQUVBdTlELEdBQUFILEVBQUFwOUQsR0FJQTI4RCxFQUFBamdELE9BQUE2Z0QsRUFBQVgsRUFBQSxFQUVBLEVBMkNBMzlELEtBQUF1K0QseUJBekNBLFNBQUFMLEVBQUFDLEVBQUFDLEVBQUFQLEdBRUEsR0FBQSxJQUFBTyxFQUFBLE9BRUEsTUFBQUksRUFBQXZnQixFQUFBdUksSUFBQSxvQkFFQSxHQUFBLE9BQUFnWSxFQUVBLElBQUEsSUFBQXo5RCxFQUFBLEVBQUFBLEVBQUFtOUQsRUFBQWo5RCxPQUFBRixJQUVBNjhELEVBQUFNLEVBQUFuOUQsR0FBQW85RCxFQUFBcDlELEdBQUE4OEQsRUFBQTk4RCxRQUlBLENBRUF5OUQsRUFBQUMsOEJBQUFkLEVBQUFPLEVBQUEsRUFBQUMsRUFBQSxFQUFBTixFQUFBLEVBQUFPLEdBRUEsSUFBQUUsRUFBQSxFQUNBLElBQUEsSUFBQXY5RCxFQUFBLEVBQUFBLEVBQUFxOUQsRUFBQXI5RCxJQUVBdTlELEdBQUFILEVBQUFwOUQsR0FJQSxJQUFBLElBQUFBLEVBQUEsRUFBQUEsRUFBQTg4RCxFQUFBNThELE9BQUFGLElBRUEyOEQsRUFBQWpnRCxPQUFBNmdELEVBQUFYLEVBQUFFLEVBQUE5OEQsR0FJQSxDQUVBLENBVUEsQ0N2RkEsU0FBQTI5RCxHQUFBclksRUFBQXBJLEVBQUF2akIsRUFBQWlrQyxHQUVBLElBQUFDLEVBaURBLFNBQUFDLEVBQUFsekIsR0FFQSxHQUFBLFVBQUFBLEVBQUEsQ0FFQSxHQUFBMGEsRUFBQXlZLHlCQUFBelksRUFBQTBZLGNBQUExWSxFQUFBMlksWUFBQXJ6QixVQUFBLEdBQ0EwYSxFQUFBeVkseUJBQUF6WSxFQUFBNFksZ0JBQUE1WSxFQUFBMlksWUFBQXJ6QixVQUFBLEVBRUEsTUFBQSxRQUlBQSxFQUFBLFNBRUEsQ0FFQSxNQUFBLFlBQUFBLEdBRUEwYSxFQUFBeVkseUJBQUF6WSxFQUFBMFksY0FBQTFZLEVBQUE2WSxjQUFBdnpCLFVBQUEsR0FDQTBhLEVBQUF5WSx5QkFBQXpZLEVBQUE0WSxnQkFBQTVZLEVBQUE2WSxjQUFBdnpCLFVBQUEsRUFFQSxVQU1BLE1BRUEsQ0FFQSxJQUFBQSxPQUFBNXJDLElBQUEyNkIsRUFBQWlSLFVBQUFqUixFQUFBaVIsVUFBQSxRQUNBLE1BQUF3ekIsRUFBQU4sRUFBQWx6QixHQUVBd3pCLElBQUF4ekIsSUFFQS9rQyxRQUFBQyxLQUFBLHVCQUFBOGtDLEVBQUEsdUJBQUF3ekIsRUFBQSxZQUNBeHpCLEVBQUF3ekIsR0FJQSxNQUFBQyxHQUFBLElBQUExa0MsRUFBQTBrQyx1QkFFQUMsRUFBQWhaLEVBQUF4Z0MsYUFBQXdnQyxFQUFBaVoseUJBQ0FDLEVBQUFsWixFQUFBeGdDLGFBQUF3Z0MsRUFBQW1aLGdDQWFBLE1BQUEsQ0FFQUMsVUFBQSxFQUVBQyxpQkEzR0EsV0FFQSxRQUFBMy9ELElBQUE2K0QsRUFBQSxPQUFBQSxFQUVBLElBQUEsSUFBQTNnQixFQUFBbnNDLElBQUEsa0NBQUEsQ0FFQSxNQUFBMHNELEVBQUF2Z0IsRUFBQXVJLElBQUEsa0NBRUFvWSxFQUFBdlksRUFBQXhnQyxhQUFBMjRDLEVBQUFtQiwrQkFFQSxNQUVBZixFQUFBLEVBSUEsT0FBQUEsQ0FFQSxFQTBGQUMsZ0JBQUFBLEVBRUFlLHNCQTFGQSxTQUFBQyxHQUVBLE9BQUFBLElBQUE3bUUsSUFBQTJsRSxFQUFBNXNELFFBQUE4dEQsS0FBQXhaLEVBQUF4Z0MsYUFBQXdnQyxFQUFBeVosaUNBUUEsRUFpRkFDLG9CQS9FQSxTQUFBQyxHQUVBLE1BQUFDLEVBQUFELElBQUF2bkUsS0FBQXdsRCxFQUFBbnNDLElBQUEsZ0NBQUFtc0MsRUFBQW5zQyxJQUFBLDJCQUVBLFFBQUFrdUQsSUFBQTluRSxJQUFBeW1FLEVBQUE1c0QsUUFBQWl1RCxLQUFBM1osRUFBQXhnQyxhQUFBd2dDLEVBQUE2WixpQ0FDQUYsSUFBQXhuRSxLQUFBeW5FLEVBUUEsRUFvRUF0MEIsVUFBQUEsRUFDQXl6Qix1QkFBQUEsRUFFQUMsWUFBQUEsRUFDQUUsa0JBQUFBLEVBQ0FZLGVBM0JBOVosRUFBQXhnQyxhQUFBd2dDLEVBQUErWixrQkE0QkFDLGVBM0JBaGEsRUFBQXhnQyxhQUFBd2dDLEVBQUFpYSwyQkE2QkFDLGNBM0JBbGEsRUFBQXhnQyxhQUFBd2dDLEVBQUF5VCxvQkE0QkEwRyxrQkEzQkFuYSxFQUFBeGdDLGFBQUF3Z0MsRUFBQW9hLDRCQTRCQUMsWUEzQkFyYSxFQUFBeGdDLGFBQUF3Z0MsRUFBQXNhLHFCQTRCQUMsb0JBM0JBdmEsRUFBQXhnQyxhQUFBd2dDLEVBQUF3YSw4QkE2QkFDLGVBM0JBdkIsRUFBQSxFQTZCQXdCLFdBM0JBMWEsRUFBQXhnQyxhQUFBd2dDLEVBQUEyYSxhQStCQSxDQ3ZJQSxTQUFBQyxHQUFBL04sR0FFQSxNQUFBNVgsRUFBQXQ3QyxLQUVBLElBQUFraEUsRUFBQSxLQUNBQyxFQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUVBLE1BQUFsN0MsRUFBQSxJQUFBeThCLEdBQ0EwZSxFQUFBLElBQUFwMkQsR0FFQXEyRCxFQUFBLENBQUF0L0QsTUFBQSxLQUFBb1MsYUFBQSxHQTJHQSxTQUFBbXRELEVBQUF2ZCxFQUFBN2lDLEVBQUFuRixFQUFBd2xELEdBRUEsTUFBQUMsRUFBQSxPQUFBemQsRUFBQUEsRUFBQWhqRCxPQUFBLEVBQ0EsSUFBQTBnRSxFQUFBLEtBRUEsR0FBQSxJQUFBRCxFQUFBLENBSUEsR0FGQUMsRUFBQUosRUFBQXQvRCxPQUVBLElBQUF3L0QsR0FBQSxPQUFBRSxFQUFBLENBRUEsTUFBQUMsRUFBQTNsRCxFQUFBLEVBQUF5bEQsRUFDQUcsRUFBQXpnRCxFQUFBQyxtQkFFQWlnRCxFQUFBN3lELGdCQUFBb3pELElBRUEsT0FBQUYsR0FBQUEsRUFBQTFnRSxPQUFBMmdFLEtBRUFELEVBQUEsSUFBQTkrRCxhQUFBKytELElBSUEsSUFBQSxJQUFBN2dFLEVBQUEsRUFBQStnRSxFQUFBN2xELEVBQUFsYixJQUFBMmdFLElBQUEzZ0UsRUFBQStnRSxHQUFBLEVBRUEzN0MsRUFBQXplLEtBQUF1OEMsRUFBQWxqRCxJQUFBaVgsYUFBQTZwRCxFQUFBUCxHQUVBbjdDLEVBQUE1RCxPQUFBOVgsUUFBQWszRCxFQUFBRyxHQUNBSCxFQUFBRyxFQUFBLEdBQUEzN0MsRUFBQUMsUUFJQSxDQUVBbTdDLEVBQUF0L0QsTUFBQTAvRCxFQUNBSixFQUFBbHRELGFBQUEsQ0FFQSxDQUtBLE9BSEFpbkMsRUFBQXltQixVQUFBTCxFQUNBcG1CLEVBQUEwbUIsZ0JBQUEsRUFFQUwsQ0FFQSxDQXBKQTNoRSxLQUFBdWhFLFFBQUFBLEVBQ0F2aEUsS0FBQStoRSxVQUFBLEVBQ0EvaEUsS0FBQWdpRSxnQkFBQSxFQUVBaGlFLEtBQUFpaUUsS0FBQSxTQUFBaGUsRUFBQWllLEdBRUEsTUFBQXh3RCxFQUNBLElBQUF1eUMsRUFBQWhqRCxRQUNBaWhFLEdBR0EsSUFBQWYsR0FDQUMsRUFNQSxPQUpBQSxFQUFBYyxFQUVBZixFQUFBbGQsRUFBQWhqRCxPQUVBeVEsQ0FFQSxFQUVBMVIsS0FBQW1pRSxhQUFBLFdBRUFkLEdBQUEsRUFDQUcsRUFBQSxLQUVBLEVBRUF4aEUsS0FBQW9pRSxXQUFBLFdBRUFmLEdBQUEsQ0FFQSxFQUVBcmhFLEtBQUFxaUUsZUFBQSxTQUFBcGUsRUFBQTdpQyxHQUVBOC9DLEVBQUFNLEVBQUF2ZCxFQUFBN2lDLEVBQUEsRUFFQSxFQUVBcGhCLEtBQUFzaUUsU0FBQSxTQUFBdG5DLEVBQUE1WixFQUFBbWhELEdBRUEsTUFBQXRlLEVBQUFqcEIsRUFBQXNRLGVBQ0FDLEVBQUF2USxFQUFBdVEsaUJBQ0FDLEVBQUF4USxFQUFBd1EsWUFFQWczQixFQUFBdFAsRUFBQTFNLElBQUF4ckIsR0FFQSxJQUFBb21DLEdBQUEsT0FBQW5kLEdBQUEsSUFBQUEsRUFBQWhqRCxRQUFBb2dFLElBQUE3MUIsRUFJQTYxQixFQUlBRyxFQUFBLE1Ba0NBLFdBRUFELEVBQUF0L0QsUUFBQWkvRCxJQUVBSyxFQUFBdC9ELE1BQUFpL0QsRUFDQUssRUFBQWx0RCxZQUFBOHNELEVBQUEsR0FJQTdsQixFQUFBeW1CLFVBQUFaLEVBQ0E3bEIsRUFBQTBtQixnQkFBQSxDQUVBLENBMUNBUyxPQUlBLENBRUEsTUFBQUMsRUFBQXJCLEVBQUEsRUFBQUYsRUFDQXdCLEVBQUEsRUFBQUQsRUFFQSxJQUFBZixFQUFBYSxFQUFBSSxlQUFBLEtBRUFyQixFQUFBdC9ELE1BQUEwL0QsRUFFQUEsRUFBQUgsRUFBQXZkLEVBQUE3aUMsRUFBQXVoRCxFQUFBSixHQUVBLElBQUEsSUFBQXhoRSxFQUFBLEVBQUFBLElBQUE0aEUsSUFBQTVoRSxFQUVBNGdFLEVBQUE1Z0UsR0FBQW1nRSxFQUFBbmdFLEdBSUF5aEUsRUFBQUksY0FBQWpCLEVBQ0EzaEUsS0FBQWdpRSxnQkFBQXoyQixFQUFBdnJDLEtBQUEraEUsVUFBQSxFQUNBL2hFLEtBQUEraEUsV0FBQVcsQ0FFQSxDQUdBLENBNkRBLENDcEtBLFNBQUFHLEdBQUEzbEIsR0FFQSxJQUFBNGEsRUFBQSxJQUFBdlIsUUFFQSxTQUFBdWMsRUFBQXhvRCxFQUFBbEYsR0FZQSxPQVZBQSxJQUFBbGUsR0FFQW9qQixFQUFBbEYsUUFBQXBlLEdBRUFvZSxJQUFBamUsS0FFQW1qQixFQUFBbEYsUUFBQW5lLElBSUFxakIsQ0FFQSxDQStDQSxTQUFBeW9ELEVBQUFwaUUsR0FFQSxNQUFBMlosRUFBQTNaLEVBQUFDLE9BRUEwWixFQUFBaGEsb0JBQUEsVUFBQXlpRSxHQUVBLE1BQUFDLEVBQUFsTCxFQUFBdFIsSUFBQWxzQyxRQUVBdmEsSUFBQWlqRSxJQUVBbEwsRUFBQXBSLE9BQUFwc0MsR0FDQTBvRCxFQUFBMXJELFVBSUEsQ0FRQSxNQUFBLENBQ0FrdkMsSUFyRUEsU0FBQWxzQyxHQUVBLEdBQUFBLEdBQUFBLEVBQUF4RSxVQUFBLENBRUEsTUFBQVYsRUFBQWtGLEVBQUFsRixRQUVBLEdBQUFBLElBQUFsZSxJQUFBa2UsSUFBQWplLEdBQUEsQ0FFQSxHQUFBMmdFLEVBQUFobUQsSUFBQXdJLEdBQUEsQ0FHQSxPQUFBd29ELEVBREFoTCxFQUFBdFIsSUFBQWxzQyxHQUFBQSxRQUNBQSxFQUFBbEYsUUFFQSxDQUFBLENBRUEsTUFBQXZDLEVBQUF5SCxFQUFBekgsTUFFQSxHQUFBQSxHQUFBQSxFQUFBM0wsT0FBQSxFQUFBLENBRUEsTUFBQXk1QyxFQUFBLElBQUFzQixHQUFBcHZDLEVBQUEzTCxRQU1BLE9BTEF5NUMsRUFBQXdCLDJCQUFBakYsRUFBQTVpQyxHQUNBdzlDLEVBQUFueEQsSUFBQTJULEVBQUFxbUMsR0FFQXJtQyxFQUFBMWEsaUJBQUEsVUFBQW1qRSxHQUVBRCxFQUFBbmlCLEVBQUFybUMsUUFBQUEsRUFBQWxGLFFBRUEsQ0FJQSxPQUFBLElBSUEsQ0FFQSxDQUVBLENBRUEsT0FBQWtGLENBRUEsRUEyQkFoRCxRQVJBLFdBRUF3Z0QsRUFBQSxJQUFBdlIsT0FFQSxFQU9BLENDOUZBLE1BQUEwYyxXQUFBeGtCLEdBRUEsV0FBQTc3QyxDQUFBNnRCLEdBQUEsRUFBQUMsRUFBQSxFQUFBQyxFQUFBLEVBQUFDLEdBQUEsRUFBQUMsRUFBQSxHQUFBQyxFQUFBLEtBRUFqYixRQUVBN1YsS0FBQWtqRSxzQkFBQSxFQUVBbGpFLEtBQUFILEtBQUEscUJBRUFHLEtBQUFpL0MsS0FBQSxFQUNBai9DLEtBQUFtL0MsS0FBQSxLQUVBbi9DLEtBQUF5d0IsS0FBQUEsRUFDQXp3QixLQUFBMHdCLE1BQUFBLEVBQ0Exd0IsS0FBQTJ3QixJQUFBQSxFQUNBM3dCLEtBQUE0d0IsT0FBQUEsRUFFQTV3QixLQUFBNndCLEtBQUFBLEVBQ0E3d0IsS0FBQTh3QixJQUFBQSxFQUVBOXdCLEtBQUFzL0Msd0JBRUEsQ0FFQSxJQUFBNTNDLENBQUFxTyxFQUFBd2xCLEdBY0EsT0FaQTFsQixNQUFBbk8sS0FBQXFPLEVBQUF3bEIsR0FFQXY3QixLQUFBeXdCLEtBQUExYSxFQUFBMGEsS0FDQXp3QixLQUFBMHdCLE1BQUEzYSxFQUFBMmEsTUFDQTF3QixLQUFBMndCLElBQUE1YSxFQUFBNGEsSUFDQTN3QixLQUFBNHdCLE9BQUE3YSxFQUFBNmEsT0FDQTV3QixLQUFBNndCLEtBQUE5YSxFQUFBOGEsS0FDQTd3QixLQUFBOHdCLElBQUEvYSxFQUFBK2EsSUFFQTl3QixLQUFBaS9DLEtBQUFscEMsRUFBQWtwQyxLQUNBai9DLEtBQUFtL0MsS0FBQSxPQUFBcHBDLEVBQUFvcEMsS0FBQSxLQUFBbnJDLE9BQUE4RixPQUFBLENBQUEsRUFBQS9ELEVBQUFvcEMsTUFFQW4vQyxJQUVBLENBRUEsYUFBQW1nRCxDQUFBQyxFQUFBQyxFQUFBNzlDLEVBQUFDLEVBQUF3RSxFQUFBQyxHQUVBLE9BQUFsSCxLQUFBbS9DLE9BRUFuL0MsS0FBQW0vQyxLQUFBLENBQ0F6dEMsU0FBQSxFQUNBMHVDLFVBQUEsRUFDQUMsV0FBQSxFQUNBQyxRQUFBLEVBQ0FDLFFBQUEsRUFDQXQ1QyxNQUFBLEVBQ0FDLE9BQUEsSUFLQWxILEtBQUFtL0MsS0FBQXp0QyxTQUFBLEVBQ0ExUixLQUFBbS9DLEtBQUFpQixVQUFBQSxFQUNBcGdELEtBQUFtL0MsS0FBQWtCLFdBQUFBLEVBQ0FyZ0QsS0FBQW0vQyxLQUFBbUIsUUFBQTk5QyxFQUNBeEMsS0FBQW0vQyxLQUFBb0IsUUFBQTk5QyxFQUNBekMsS0FBQW0vQyxLQUFBbDRDLE1BQUFBLEVBQ0FqSCxLQUFBbS9DLEtBQUFqNEMsT0FBQUEsRUFFQWxILEtBQUFzL0Msd0JBRUEsQ0FFQSxlQUFBa0IsR0FFQSxPQUFBeGdELEtBQUFtL0MsT0FFQW4vQyxLQUFBbS9DLEtBQUF6dEMsU0FBQSxHQUlBMVIsS0FBQXMvQyx3QkFFQSxDQUVBLHNCQUFBQSxHQUVBLE1BQUF4MUMsR0FBQTlKLEtBQUEwd0IsTUFBQTF3QixLQUFBeXdCLE9BQUEsRUFBQXp3QixLQUFBaS9DLE1BQ0FsMUMsR0FBQS9KLEtBQUEyd0IsSUFBQTN3QixLQUFBNHdCLFNBQUEsRUFBQTV3QixLQUFBaS9DLE1BQ0E5dkMsR0FBQW5QLEtBQUEwd0IsTUFBQTF3QixLQUFBeXdCLE1BQUEsRUFDQXJoQixHQUFBcFAsS0FBQTJ3QixJQUFBM3dCLEtBQUE0d0IsUUFBQSxFQUVBLElBQUFILEVBQUF0aEIsRUFBQXJGLEVBQ0E0bUIsRUFBQXZoQixFQUFBckYsRUFDQTZtQixFQUFBdmhCLEVBQUFyRixFQUNBNm1CLEVBQUF4aEIsRUFBQXJGLEVBRUEsR0FBQSxPQUFBL0osS0FBQW0vQyxNQUFBbi9DLEtBQUFtL0MsS0FBQXp0QyxRQUFBLENBRUEsTUFBQXl4RCxHQUFBbmpFLEtBQUEwd0IsTUFBQTF3QixLQUFBeXdCLE1BQUF6d0IsS0FBQW0vQyxLQUFBaUIsVUFBQXBnRCxLQUFBaS9DLEtBQ0Fta0IsR0FBQXBqRSxLQUFBMndCLElBQUEzd0IsS0FBQTR3QixRQUFBNXdCLEtBQUFtL0MsS0FBQWtCLFdBQUFyZ0QsS0FBQWkvQyxLQUVBeHVCLEdBQUEweUMsRUFBQW5qRSxLQUFBbS9DLEtBQUFtQixRQUNBNXZCLEVBQUFELEVBQUEweUMsRUFBQW5qRSxLQUFBbS9DLEtBQUFsNEMsTUFDQTBwQixHQUFBeXlDLEVBQUFwakUsS0FBQW0vQyxLQUFBb0IsUUFDQTN2QixFQUFBRCxFQUFBeXlDLEVBQUFwakUsS0FBQW0vQyxLQUFBajRDLE1BRUEsQ0FFQWxILEtBQUFzaEIsaUJBQUEwUCxpQkFBQVAsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQTV3QixLQUFBNndCLEtBQUE3d0IsS0FBQTh3QixJQUFBOXdCLEtBQUErd0Isa0JBRUEvd0IsS0FBQXdoQix3QkFBQTlaLEtBQUExSCxLQUFBc2hCLGtCQUFBclQsUUFFQSxDQUVBLE1BQUFxRyxDQUFBQyxHQUVBLE1BQUFYLEVBQUFpQyxNQUFBdkIsT0FBQUMsR0FZQSxPQVZBWCxFQUFBd1EsT0FBQTY2QixLQUFBai9DLEtBQUFpL0MsS0FDQXJyQyxFQUFBd1EsT0FBQXFNLEtBQUF6d0IsS0FBQXl3QixLQUNBN2MsRUFBQXdRLE9BQUFzTSxNQUFBMXdCLEtBQUEwd0IsTUFDQTljLEVBQUF3USxPQUFBdU0sSUFBQTN3QixLQUFBMndCLElBQ0EvYyxFQUFBd1EsT0FBQXdNLE9BQUE1d0IsS0FBQTR3QixPQUNBaGQsRUFBQXdRLE9BQUF5TSxLQUFBN3dCLEtBQUE2d0IsS0FDQWpkLEVBQUF3USxPQUFBME0sSUFBQTl3QixLQUFBOHdCLElBRUEsT0FBQTl3QixLQUFBbS9DLE9BQUF2ckMsRUFBQXdRLE9BQUErNkIsS0FBQW5yQyxPQUFBOEYsT0FBQSxDQUFBLEVBQUE5WixLQUFBbS9DLE9BRUF2ckMsQ0FFQSxFQzFHQSxNQU1BeXZELEdBQUEsQ0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsTUFJQXJDLEdBQUEsR0FFQXNDLEdBQUEsSUFBQUwsR0FDQU0sR0FBQSxJQUFBLzdCLEdBQ0EsSUFBQWc4QixHQUFBLEtBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxJQUFBLEVBR0EsTUFBQUMsSUFBQSxFQUFBdGlFLEtBQUE4SCxLQUFBLElBQUEsRUFDQXk2RCxHQUFBLEVBQUFELEdBSUFFLEdBQUEsQ0FDQSxJQUFBM2pELElBQUF5akQsR0FBQUMsR0FBQSxHQUNBLElBQUExakQsR0FBQXlqRCxHQUFBQyxHQUFBLEdBQ0EsSUFBQTFqRCxJQUFBMGpELEdBQUEsRUFBQUQsSUFDQSxJQUFBempELEdBQUEwakQsR0FBQSxFQUFBRCxJQUNBLElBQUF6akQsR0FBQSxFQUFBeWpELElBQUFDLElBQ0EsSUFBQTFqRCxHQUFBLEVBQUF5akQsR0FBQUMsSUFDQSxJQUFBMWpELElBQUEsRUFBQSxHQUFBLEdBQ0EsSUFBQUEsR0FBQSxFQUFBLEdBQUEsR0FDQSxJQUFBQSxJQUFBLEVBQUEsRUFBQSxHQUNBLElBQUFBLEdBQUEsRUFBQSxFQUFBLElBaUJBLE1BQUE0akQsR0FFQSxXQUFBbmhFLENBQUFzNkMsR0FFQWw5QyxLQUFBZ2tFLFVBQUE5bUIsRUFDQWw5QyxLQUFBaWtFLHNCQUFBLEtBRUFqa0UsS0FBQWtrRSxRQUFBLEVBQ0Fsa0UsS0FBQW1rRSxVQUFBLEVBQ0Fua0UsS0FBQW9rRSxXQUFBLEdBQ0Fwa0UsS0FBQXFrRSxVQUFBLEdBQ0Fya0UsS0FBQXNrRSxRQUFBLEdBRUF0a0UsS0FBQXVrRSxjQUFBLEtBQ0F2a0UsS0FBQXdrRSxpQkFBQSxLQUNBeGtFLEtBQUF5a0Usa0JBQUEsS0FFQXprRSxLQUFBMGtFLGlCQUFBMWtFLEtBQUF1a0UsY0FFQSxDQVNBLFNBQUFJLENBQUFyakIsRUFBQXNqQixFQUFBLEVBQUEvekMsRUFBQSxHQUFBQyxFQUFBLEtBRUEweUMsR0FBQXhqRSxLQUFBZ2tFLFVBQUE1bUIsa0JBQ0FxbUIsR0FBQXpqRSxLQUFBZ2tFLFVBQUF4aUIsb0JBQ0FraUIsR0FBQTFqRSxLQUFBZ2tFLFVBQUF0aUIsdUJBQ0FpaUIsR0FBQTNqRSxLQUFBZ2tFLFVBQUFwaUIsR0FBQWx3QyxRQUVBMVIsS0FBQWdrRSxVQUFBcGlCLEdBQUFsd0MsU0FBQSxFQUVBMVIsS0FBQTZrRSxTQUFBLEtBRUEsTUFBQUMsRUFBQTlrRSxLQUFBK2tFLG1CQWNBLE9BYkFELEVBQUEvcUQsYUFBQSxFQUVBL1osS0FBQWdsRSxlQUFBMWpCLEVBQUF6d0IsRUFBQUMsRUFBQWcwQyxHQUVBRixFQUFBLEdBRUE1a0UsS0FBQWlsRSxNQUFBSCxFQUFBLEVBQUEsRUFBQUYsR0FJQTVrRSxLQUFBa2xFLFlBQUFKLEdBQ0E5a0UsS0FBQW1sRSxTQUFBTCxHQUVBQSxDQUVBLENBUUEsbUJBQUFNLENBQUFDLEVBQUExa0IsRUFBQSxNQUVBLE9BQUEzZ0QsS0FBQXNsRSxhQUFBRCxFQUFBMWtCLEVBRUEsQ0FRQSxXQUFBNGtCLENBQUF2QyxFQUFBcmlCLEVBQUEsTUFFQSxPQUFBM2dELEtBQUFzbEUsYUFBQXRDLEVBQUFyaUIsRUFFQSxDQU1BLG9CQUFBNmtCLEdBRUEsT0FBQXhsRSxLQUFBd2tFLG1CQUVBeGtFLEtBQUF3a0UsaUJBQUFpQixLQUNBemxFLEtBQUEwa0UsaUJBQUExa0UsS0FBQXdrRSxrQkFJQSxDQU1BLDRCQUFBa0IsR0FFQSxPQUFBMWxFLEtBQUF5a0Usb0JBRUF6a0UsS0FBQXlrRSxrQkFBQWtCLEtBQ0EzbEUsS0FBQTBrRSxpQkFBQTFrRSxLQUFBeWtFLG1CQUlBLENBT0EsT0FBQW50RCxHQUVBdFgsS0FBQTRsRSxXQUVBLE9BQUE1bEUsS0FBQXdrRSxrQkFBQXhrRSxLQUFBd2tFLGlCQUFBbHRELFVBQ0EsT0FBQXRYLEtBQUF5a0UsbUJBQUF6a0UsS0FBQXlrRSxrQkFBQW50RCxTQUVBLENBSUEsUUFBQXV0RCxDQUFBZ0IsR0FFQTdsRSxLQUFBa2tFLFFBQUE1aUUsS0FBQW1ELE1BQUFuRCxLQUFBd2tFLEtBQUFELElBQ0E3bEUsS0FBQW1rRSxVQUFBN2lFLEtBQUFnRSxJQUFBLEVBQUF0RixLQUFBa2tFLFFBRUEsQ0FFQSxRQUFBMEIsR0FFQSxPQUFBNWxFLEtBQUF1a0UsZUFBQXZrRSxLQUFBdWtFLGNBQUFqdEQsVUFFQSxPQUFBdFgsS0FBQWlrRSx1QkFBQWprRSxLQUFBaWtFLHNCQUFBM3NELFVBRUEsSUFBQSxJQUFBdlcsRUFBQSxFQUFBQSxFQUFBZixLQUFBb2tFLFdBQUFuakUsT0FBQUYsSUFFQWYsS0FBQW9rRSxXQUFBcmpFLEdBQUF1VyxTQUlBLENBRUEsUUFBQTZ0RCxDQUFBWSxHQUVBL2xFLEtBQUFna0UsVUFBQW5pQixnQkFBQTJoQixHQUFBQyxHQUFBQyxJQUNBMWpFLEtBQUFna0UsVUFBQXBpQixHQUFBbHdDLFFBQUFpeUQsR0FFQW9DLEVBQUFuc0QsYUFBQSxFQUNBb3NELEdBQUFELEVBQUEsRUFBQSxFQUFBQSxFQUFBOStELE1BQUE4K0QsRUFBQTcrRCxPQUVBLENBRUEsWUFBQW8rRCxDQUFBaHJELEVBQUFxbUMsR0FFQXJtQyxFQUFBbEYsVUFBQXBlLElBQUFzakIsRUFBQWxGLFVBQUFuZSxHQUVBK0ksS0FBQTZrRSxTQUFBLElBQUF2cUQsRUFBQXpILE1BQUE1UixPQUFBLEdBQUFxWixFQUFBekgsTUFBQSxHQUFBNUwsT0FBQXFULEVBQUF6SCxNQUFBLEdBQUFBLE1BQUE1TCxPQUlBakgsS0FBQTZrRSxTQUFBdnFELEVBQUF6SCxNQUFBNUwsTUFBQSxHQUlBdThELEdBQUF4akUsS0FBQWdrRSxVQUFBNW1CLGtCQUNBcW1CLEdBQUF6akUsS0FBQWdrRSxVQUFBeGlCLG9CQUNBa2lCLEdBQUExakUsS0FBQWdrRSxVQUFBdGlCLHVCQUNBaWlCLEdBQUEzakUsS0FBQWdrRSxVQUFBcGlCLEdBQUFsd0MsUUFFQTFSLEtBQUFna0UsVUFBQXBpQixHQUFBbHdDLFNBQUEsRUFFQSxNQUFBb3pELEVBQUFua0IsR0FBQTNnRCxLQUFBK2tFLG1CQUtBLE9BSkEva0UsS0FBQWltRSxpQkFBQTNyRCxFQUFBd3FELEdBQ0E5a0UsS0FBQWtsRSxZQUFBSixHQUNBOWtFLEtBQUFtbEUsU0FBQUwsR0FFQUEsQ0FFQSxDQUVBLGdCQUFBQyxHQUVBLE1BQUE5OUQsRUFBQSxFQUFBM0YsS0FBQWEsSUFBQW5DLEtBQUFta0UsVUFBQSxLQUNBajlELEVBQUEsRUFBQWxILEtBQUFta0UsVUFFQStCLEVBQUEsQ0FDQTF3RCxVQUFBM2QsR0FDQTRkLFVBQUE1ZCxHQUNBd2UsaUJBQUEsRUFDQXhXLEtBQUFwSCxHQUNBaWQsT0FBQTFjLEdBQ0E2WSxXQUFBOVUsR0FDQWdkLGFBQUEsR0FHQStxRCxFQUFBcUIsR0FBQWwvRCxFQUFBQyxFQUFBZy9ELEdBRUEsR0FBQSxPQUFBbG1FLEtBQUFpa0UsdUJBQUFqa0UsS0FBQWlrRSxzQkFBQWg5RCxRQUFBQSxHQUFBakgsS0FBQWlrRSxzQkFBQS84RCxTQUFBQSxFQUFBLENBRUEsT0FBQWxILEtBQUFpa0UsdUJBRUFqa0UsS0FBQTRsRSxXQUlBNWxFLEtBQUFpa0Usc0JBQUFrQyxHQUFBbC9ELEVBQUFDLEVBQUFnL0QsR0FFQSxNQUFBaEMsUUFBQUEsR0FBQWxrRSxPQUNBb21FLFNBQUFwbUUsS0FBQXFrRSxVQUFBZ0MsVUFBQXJtRSxLQUFBb2tFLFdBQUFrQyxPQUFBdG1FLEtBQUFza0UsU0FpU0EsU0FBQWlDLEdBRUEsTUFBQUYsRUFBQSxHQUNBRCxFQUFBLEdBQ0FFLEVBQUEsR0FFQSxJQUFBRSxFQUFBRCxFQUVBLE1BQUFFLEVBQUFGLEVBbmpCQSxFQW1qQkEsRUFBQWxELEdBQUFwaUUsT0FFQSxJQUFBLElBQUFGLEVBQUEsRUFBQUEsRUFBQTBsRSxFQUFBMWxFLElBQUEsQ0FFQSxNQUFBMmxFLEVBQUFwbEUsS0FBQWdFLElBQUEsRUFBQWtoRSxHQUNBSixFQUFBaG1FLEtBQUFzbUUsR0FDQSxJQUFBOUIsRUFBQSxFQUFBOEIsRUFFQTNsRSxFQUFBd2xFLEVBM2pCQSxFQTZqQkEzQixFQUFBdkIsR0FBQXRpRSxFQUFBd2xFLEVBN2pCQSxFQTZqQkEsR0FFQSxJQUFBeGxFLElBRUE2akUsRUFBQSxHQUlBMEIsRUFBQWxtRSxLQUFBd2tFLEdBRUEsTUFBQStCLEVBQUEsR0FBQUQsRUFBQSxHQUNBeGtFLEdBQUF5a0UsRUFDQXhrRSxFQUFBLEVBQUF3a0UsRUFDQS9yQixFQUFBLENBQUExNEMsRUFBQUEsRUFBQUMsRUFBQUQsRUFBQUMsRUFBQUEsRUFBQUQsRUFBQUEsRUFBQUMsRUFBQUEsRUFBQUQsRUFBQUMsR0FFQXlrRSxFQUFBLEVBQ0FyckIsRUFBQSxFQUNBc3JCLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBRUFuM0MsRUFBQSxJQUFBL3NCLGFBQUFna0UsRUFBQXRyQixFQUFBcXJCLEdBQ0FwdkQsRUFBQSxJQUFBM1UsYUFBQWlrRSxFQUFBdnJCLEVBQUFxckIsR0FDQTdyQixFQUFBLElBQUFsNEMsYUFBQWtrRSxFQUFBeHJCLEVBQUFxckIsR0FFQSxJQUFBLElBQUE1ckIsRUFBQSxFQUFBQSxFQUFBNHJCLEVBQUE1ckIsSUFBQSxDQUVBLE1BQUF4NEMsRUFBQXc0QyxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQ0F2NEMsRUFBQXU0QyxFQUFBLEVBQUEsR0FBQSxFQUNBZ3NCLEVBQUEsQ0FDQXhrRSxFQUFBQyxFQUFBLEVBQ0FELEVBQUEsRUFBQSxFQUFBQyxFQUFBLEVBQ0FELEVBQUEsRUFBQSxFQUFBQyxFQUFBLEVBQUEsRUFDQUQsRUFBQUMsRUFBQSxFQUNBRCxFQUFBLEVBQUEsRUFBQUMsRUFBQSxFQUFBLEVBQ0FELEVBQUFDLEVBQUEsRUFBQSxHQUVBbXRCLEVBQUFqcEIsSUFBQXFnRSxFQUFBSCxFQUFBdHJCLEVBQUFQLEdBQ0F4akMsRUFBQTdRLElBQUFpMEMsRUFBQWtzQixFQUFBdnJCLEVBQUFQLEdBQ0EsTUFBQWlzQixFQUFBLENBQUFqc0IsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsR0FDQUQsRUFBQXAwQyxJQUFBc2dFLEVBQUFGLEVBQUF4ckIsRUFBQVAsRUFFQSxDQUVBLE1BQUFpSixFQUFBLElBQUFwUCxHQUNBb1AsRUFBQTNPLGFBQUEsV0FBQSxJQUFBbEQsR0FBQXhpQixFQUFBaTNDLElBQ0E1aUIsRUFBQTNPLGFBQUEsS0FBQSxJQUFBbEQsR0FBQTU2QixFQUFBc3ZELElBQ0E3aUIsRUFBQTNPLGFBQUEsWUFBQSxJQUFBbEQsR0FBQTJJLEVBQUFnc0IsSUFDQVYsRUFBQWptRSxLQUFBNmpELEdBRUF1aUIsRUEvbUJBLEdBaW5CQUEsR0FJQSxDQUVBLE1BQUEsQ0FBQUgsWUFBQUQsV0FBQUUsU0FFQSxDQS9XQVksQ0FBQWhELElBRUFsa0UsS0FBQXVrRSxjQWdZQSxTQUFBZ0MsRUFBQXQvRCxFQUFBQyxHQUVBLE1BQUFpZ0UsRUFBQSxJQUFBdGtFLGFBQUFtK0QsSUFDQW9HLEVBQUEsSUFBQWpuRCxHQUFBLEVBQUEsRUFBQSxHQUNBa25ELEVBQUEsSUFBQTVwQixHQUFBLENBRUFydEMsS0FBQSx3QkFFQXV0QyxRQUFBLENBQ0F0N0MsRUFBQTIrRCxHQUNBc0csbUJBQUEsRUFBQXJnRSxFQUNBc2dFLG9CQUFBLEVBQUFyZ0UsRUFDQXNnRSxlQUFBLEdBQUFqQixPQUdBeHBCLFNBQUEsQ0FDQXZOLE9BQUEsQ0FBQXZ0QyxNQUFBLE1BQ0FtWSxRQUFBLENBQUFuWSxNQUFBLEdBQ0FrbEUsUUFBQSxDQUFBbGxFLE1BQUFrbEUsR0FDQU0sWUFBQSxDQUFBeGxFLE9BQUEsR0FDQXlsRSxPQUFBLENBQUF6bEUsTUFBQSxHQUNBMGxFLE9BQUEsQ0FBQTFsRSxNQUFBLEdBQ0FtbEUsU0FBQSxDQUFBbmxFLE1BQUFtbEUsSUFHQXZwQixhQUFBK3BCLEtBRUE5cEIsZUFBQSxtaURBOERBalUsU3ZML3VCWSxFdUxndkJaZSxXQUFBLEVBQ0FDLFlBQUEsSUFJQSxPQUFBdzhCLENBRUEsQ0FqZUFRLENBQUEzRCxFQUFBajlELEVBQUFDLEVBRUEsQ0FFQSxPQUFBNDlELENBRUEsQ0FFQSxnQkFBQUosQ0FBQTFwQyxHQUVBLE1BQUE4c0MsRUFBQSxJQUFBaHVCLEdBQUE5NUMsS0FBQW9rRSxXQUFBLEdBQUFwcEMsR0FDQWg3QixLQUFBZ2tFLFVBQUErRCxRQUFBRCxFQUFBeEUsR0FFQSxDQUVBLGNBQUEwQixDQUFBMWpCLEVBQUF6d0IsRUFBQUMsRUFBQWcwQyxHQUVBLE1BRUFrRCxFQUFBLElBQUFucEIsR0FGQSxHQUNBLEVBQ0FodUIsRUFBQUMsR0FDQW0zQyxFQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0FDLEVBQUEsQ0FBQSxFQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsR0FDQWhyQixFQUFBbDlDLEtBQUFna0UsVUFFQW1FLEVBQUFqckIsRUFBQWdjLFVBQ0FRLEVBQUF4YyxFQUFBd2MsWUFDQXhjLEVBQUF5YixjQUFBNEssSUFFQXJtQixFQUFBd2MsWUFBQXJqRSxFQUNBNm1ELEVBQUFnYyxXQUFBLEVBRUEsTUFBQWtQLEVBQUEsSUFBQWwzQixHQUFBLENBQ0E5Z0MsS0FBQSxtQkFDQTA1QixLQUFBaDJDLEVBQ0ErMkMsWUFBQSxFQUNBRCxXQUFBLElBR0F5OUIsRUFBQSxJQUFBdnVCLEdBQUEsSUFBQW9CLEdBQUFrdEIsR0FFQSxJQUFBRSxHQUFBLEVBQ0EsTUFBQWp1QyxFQUFBaW5CLEVBQUFqbkIsV0FFQUEsRUFFQUEsRUFBQUMsVUFFQTh0QyxFQUFBajNELE1BQUF6SixLQUFBMnlCLEdBQ0FpbkIsRUFBQWpuQixXQUFBLEtBQ0FpdUMsR0FBQSxJQU1BRixFQUFBajNELE1BQUF6SixLQUFBNjdELElBQ0ErRSxHQUFBLEdBSUEsSUFBQSxJQUFBdm5FLEVBQUEsRUFBQUEsRUFBQSxFQUFBQSxJQUFBLENBRUEsTUFBQXduRSxFQUFBeG5FLEVBQUEsRUFFQSxJQUFBd25FLEdBRUFQLEVBQUFoNkMsR0FBQXJuQixJQUFBLEVBQUFzaEUsRUFBQWxuRSxHQUFBLEdBQ0FpbkUsRUFBQTMrQyxPQUFBNitDLEVBQUFubkUsR0FBQSxFQUFBLElBRUEsSUFBQXduRSxHQUVBUCxFQUFBaDZDLEdBQUFybkIsSUFBQSxFQUFBLEVBQUFzaEUsRUFBQWxuRSxJQUNBaW5FLEVBQUEzK0MsT0FBQSxFQUFBNitDLEVBQUFubkUsR0FBQSxLQUlBaW5FLEVBQUFoNkMsR0FBQXJuQixJQUFBLEVBQUFzaEUsRUFBQWxuRSxHQUFBLEdBQ0FpbkUsRUFBQTMrQyxPQUFBLEVBQUEsRUFBQTYrQyxFQUFBbm5FLEtBSUEsTUFBQWtqQixFQUFBamtCLEtBQUFta0UsVUFFQTZCLEdBQUFsQixFQUFBeUQsRUFBQXRrRCxFQUFBbGpCLEVBQUEsRUFBQWtqQixFQUFBLEVBQUFBLEVBQUFBLEdBRUFpNUIsRUFBQTJFLGdCQUFBaWpCLEdBRUF3RCxHQUVBcHJCLEVBQUE0RSxPQUFBdW1CLEVBQUFMLEdBSUE5cUIsRUFBQTRFLE9BQUFSLEVBQUEwbUIsRUFFQSxDQUVBSyxFQUFBcmpELFNBQUExTixVQUNBK3dELEVBQUFydEMsU0FBQTFqQixVQUVBNGxDLEVBQUF3YyxZQUFBQSxFQUNBeGMsRUFBQWdjLFVBQUFpUCxFQUNBN21CLEVBQUFqbkIsV0FBQUEsQ0FFQSxDQUVBLGdCQUFBNHJDLENBQUEzckQsRUFBQXdxRCxHQUVBLE1BQUE1bkIsRUFBQWw5QyxLQUFBZ2tFLFVBRUFoaUIsRUFBQTFuQyxFQUFBbEYsVUFBQXBlLElBQUFzakIsRUFBQWxGLFVBQUFuZSxHQUVBK3FELEdBRUEsT0FBQWhpRCxLQUFBd2tFLG1CQUVBeGtFLEtBQUF3a0UsaUJBQUFpQixNQUlBemxFLEtBQUF3a0UsaUJBQUF6bkIsU0FBQXlVLFdBQUF2dkQsT0FBQSxJQUFBcVksRUFBQTNELHVCQUFBLEVBQUEsR0FJQSxPQUFBM1csS0FBQXlrRSxvQkFFQXprRSxLQUFBeWtFLGtCQUFBa0IsTUFNQSxNQUFBM3FDLEVBQUFnbkIsRUFBQWhpRCxLQUFBd2tFLGlCQUFBeGtFLEtBQUF5a0Usa0JBQ0FuaUIsRUFBQSxJQUFBeEksR0FBQTk1QyxLQUFBb2tFLFdBQUEsR0FBQXBwQyxHQUVBQSxFQUFBK2hCLFNBRUEsT0FBQTk2QyxNQUFBcVksRUFFQSxNQUFBMkosRUFBQWprQixLQUFBbWtFLFVBRUE2QixHQUFBbEIsRUFBQSxFQUFBLEVBQUEsRUFBQTdnRCxFQUFBLEVBQUFBLEdBRUFpNUIsRUFBQTJFLGdCQUFBaWpCLEdBQ0E1bkIsRUFBQTRFLE9BQUFRLEVBQUFnaEIsR0FFQSxDQUVBLFdBQUE0QixDQUFBSixHQUVBLE1BQUE1bkIsRUFBQWw5QyxLQUFBZ2tFLFVBQ0E5SyxFQUFBaGMsRUFBQWdjLFVBQ0FoYyxFQUFBZ2MsV0FBQSxFQUNBLE1BQUE3MkQsRUFBQXJDLEtBQUFva0UsV0FBQW5qRSxPQUVBLElBQUEsSUFBQUYsRUFBQSxFQUFBQSxFQUFBc0IsRUFBQXRCLElBQUEsQ0FFQSxNQUFBNmpFLEVBQUF0akUsS0FBQThILEtBQUFwSixLQUFBc2tFLFFBQUF2akUsR0FBQWYsS0FBQXNrRSxRQUFBdmpFLEdBQUFmLEtBQUFza0UsUUFBQXZqRSxFQUFBLEdBQUFmLEtBQUFza0UsUUFBQXZqRSxFQUFBLElBRUFxbUUsRUFBQXRELElBQUF6aEUsRUFBQXRCLEVBQUEsR0FBQStpRSxHQUFBN2lFLFFBRUFqQixLQUFBaWxFLE1BQUFILEVBQUEvakUsRUFBQSxFQUFBQSxFQUFBNmpFLEVBQUF3QyxFQUVBLENBRUFscUIsRUFBQWdjLFVBQUFBLENBRUEsQ0FTQSxLQUFBK0wsQ0FBQUgsRUFBQTBELEVBQUFDLEVBQUE3RCxFQUFBd0MsR0FFQSxNQUFBc0IsRUFBQTFvRSxLQUFBaWtFLHNCQUVBamtFLEtBQUEyb0UsVUFDQTdELEVBQ0E0RCxFQUNBRixFQUNBQyxFQUNBN0QsRUFDQSxjQUNBd0MsR0FFQXBuRSxLQUFBMm9FLFVBQ0FELEVBQ0E1RCxFQUNBMkQsRUFDQUEsRUFDQTdELEVBQ0EsZUFDQXdDLEVBRUEsQ0FFQSxTQUFBdUIsQ0FBQUMsRUFBQUMsRUFBQUwsRUFBQUMsRUFBQUssRUFBQTUvQyxFQUFBaytDLEdBRUEsTUFBQWxxQixFQUFBbDlDLEtBQUFna0UsVUFDQStFLEVBQUEvb0UsS0FBQXVrRSxjQUVBLGdCQUFBcjdDLEdBQUEsaUJBQUFBLEdBRUF0aUIsUUFBQW92QixNQUNBLDhEQUtBLE1BRUFnekMsRUFBQSxJQUFBbHZCLEdBQUE5NUMsS0FBQW9rRSxXQUFBcUUsR0FBQU0sR0FDQUUsRUFBQUYsRUFBQWhzQixTQUVBbXNCLEVBQUFscEUsS0FBQXFrRSxVQUFBbUUsR0FBQSxFQUNBVyxFQUFBanlCLFNBQUE0eEIsR0FBQXhuRSxLQUFBQyxJQUFBLEVBQUEybkUsR0FBQSxFQUFBNW5FLEtBQUFDLEdBQUEsR0FDQTZuRSxFQUFBTixFQUFBSyxFQUNBL3VELEVBQUE4OEIsU0FBQTR4QixHQUFBLEVBQUF4bkUsS0FBQW1ELE1BUkEsRUFRQTJrRSxHQUFBcEksR0FFQTVtRCxFQUFBNG1ELElBRUFwNkQsUUFBQUMsS0FBQSxpQkFDQWlpRSxrREFDQTF1RCwyQ0FJQSxNQUFBK3NELEVBQUEsR0FDQSxJQUFBa0MsRUFBQSxFQUVBLElBQUEsSUFBQXRvRSxFQUFBLEVBQUFBLEVBQUFpZ0UsS0FBQWpnRSxFQUFBLENBRUEsTUFBQXlCLEVBQUF6QixFQUFBcW9FLEVBQ0FFLEVBQUFob0UsS0FBQTJDLEtBQUF6QixFQUFBQSxFQUFBLEdBQ0Eya0UsRUFBQS9tRSxLQUFBa3BFLEdBRUEsSUFBQXZvRSxFQUVBc29FLEdBQUFDLEVBRUF2b0UsRUFBQXFaLElBRUFpdkQsR0FBQSxFQUFBQyxFQUlBLENBRUEsSUFBQSxJQUFBdm9FLEVBQUEsRUFBQUEsRUFBQW9tRSxFQUFBbG1FLE9BQUFGLElBRUFvbUUsRUFBQXBtRSxHQUFBb21FLEVBQUFwbUUsR0FBQXNvRSxFQUlBSixFQUFBLE9BQUFobkUsTUFBQTJtRSxFQUFBdHVELFFBQ0EydUQsRUFBQSxRQUFBaG5FLE1BQUFtWSxFQUNBNnVELEVBQUEsUUFBQWhuRSxNQUFBa2xFLEVBQ0E4QixFQUFBLFlBQUFobkUsTUFBQSxnQkFBQWluQixFQUVBaytDLElBRUE2QixFQUFBLFNBQUFobkUsTUFBQW1sRSxHQUlBLE1BQUFsRCxRQUFBQSxHQUFBbGtFLEtBQ0FpcEUsRUFBQSxPQUFBaG5FLE1BQUFrbkUsRUFDQUYsRUFBQSxPQUFBaG5FLE1BQUFpaUUsRUFBQXNFLEVBRUEsTUFBQWUsRUFBQXZwRSxLQUFBcWtFLFVBQUFvRSxHQUlBekMsR0FBQTZDLEVBSEEsRUFBQVUsR0FBQWQsRUFBQXZFLEVBOWhCQSxFQThoQkF1RSxFQUFBdkUsRUE5aEJBLEVBOGhCQSxHQUNBLEdBQUFsa0UsS0FBQW1rRSxVQUFBb0YsR0FFQSxFQUFBQSxFQUFBLEVBQUFBLEdBQ0Fyc0IsRUFBQTJFLGdCQUFBZ25CLEdBQ0EzckIsRUFBQTRFLE9BQUFrbkIsRUFBQTFGLEdBRUEsRUFzRkEsU0FBQTZDLEdBQUFsL0QsRUFBQUMsRUFBQWcvRCxHQUVBLE1BQUFwQixFQUFBLElBQUFycUQsR0FBQXhULEVBQUFDLEVBQUFnL0QsR0FJQSxPQUhBcEIsRUFBQXhxRCxRQUFBbEYsUUFBQWhlLEdBQ0EwdEUsRUFBQXhxRCxRQUFBbEssS0FBQSxlQUNBMDBELEVBQUFsckQsYUFBQSxFQUNBa3JELENBRUEsQ0FFQSxTQUFBa0IsR0FBQXBsRSxFQUFBNEIsRUFBQUMsRUFBQXdFLEVBQUFDLEdBRUF0RyxFQUFBaVosU0FBQWxULElBQUFuRSxFQUFBQyxFQUFBd0UsRUFBQUMsR0FDQXRHLEVBQUErWSxRQUFBaFQsSUFBQW5FLEVBQUFDLEVBQUF3RSxFQUFBQyxFQUVBLENBcUdBLFNBQUF5K0QsS0FFQSxPQUFBLElBQUFsb0IsR0FBQSxDQUVBcnRDLEtBQUEsMEJBRUEyc0MsU0FBQSxDQUNBdk4sT0FBQSxDQUFBdnRDLE1BQUEsT0FHQTQ3QyxhQUFBK3BCLEtBRUE5cEIsZUFBQSx5WUFxQkFqVSxTdkwxeEJZLEV1TDJ4QlplLFdBQUEsRUFDQUMsWUFBQSxHQUlBLENBRUEsU0FBQTQ2QixLQUVBLE9BQUEsSUFBQWhvQixHQUFBLENBRUFydEMsS0FBQSxrQkFFQTJzQyxTQUFBLENBQ0F2TixPQUFBLENBQUF2dEMsTUFBQSxNQUNBdXZELFdBQUEsQ0FBQXZ2RCxPQUFBLElBR0E0N0MsYUFBQStwQixLQUVBOXBCLGVBQUEsMFVBa0JBalUsU3ZMajBCWSxFdUxrMEJaZSxXQUFBLEVBQ0FDLFlBQUEsR0FJQSxDQUVBLFNBQUErOEIsS0FFQSxNQUFBLHdvQ0F5REEsQ0NoNUJBLFNBQUE0QixHQUFBdHNCLEdBRUEsSUFBQXVzQixFQUFBLElBQUFsakIsUUFFQW1qQixFQUFBLEtBeUZBLFNBQUEzRyxFQUFBcGlFLEdBRUEsTUFBQTJaLEVBQUEzWixFQUFBQyxPQUVBMFosRUFBQWhhLG9CQUFBLFVBQUF5aUUsR0FFQSxNQUFBNEcsRUFBQUYsRUFBQWpqQixJQUFBbHNDLFFBRUF2YSxJQUFBNHBFLElBRUFGLEVBQUEvaUIsT0FBQXBzQyxHQUNBcXZELEVBQUFyeUQsVUFJQSxDQWVBLE1BQUEsQ0FDQWt2QyxJQXRIQSxTQUFBbHNDLEdBRUEsR0FBQUEsR0FBQUEsRUFBQXhFLFVBQUEsQ0FFQSxNQUFBVixFQUFBa0YsRUFBQWxGLFFBRUF3MEQsRUFBQXgwRCxJQUFBbGUsSUFBQWtlLElBQUFqZSxHQUNBMHlFLEVBQUF6MEQsSUFBQXBlLElBQUFvZSxJQUFBbmUsR0FJQSxHQUFBMnlFLEdBQUFDLEVBQUEsQ0FFQSxJQUFBbHBCLEVBQUE4b0IsRUFBQWpqQixJQUFBbHNDLEdBRUEsTUFBQXd2RCxPQUFBL3BFLElBQUE0Z0QsRUFBQUEsRUFBQXJtQyxRQUFBMUQsYUFBQSxFQUVBLEdBQUEwRCxFQUFBM0QsdUJBQUEyRCxFQUFBMUQsZUFBQWt6RCxFQVNBLE9BUEEsT0FBQUosSUFBQUEsRUFBQSxJQUFBM0YsR0FBQTdtQixJQUVBeUQsRUFBQWlwQixFQUFBRixFQUFBdEUsb0JBQUE5cUQsRUFBQXFtQyxHQUFBK29CLEVBQUFuRSxZQUFBanJELEVBQUFxbUMsR0FDQUEsRUFBQXJtQyxRQUFBMUQsYUFBQTBELEVBQUExRCxhQUVBNnlELEVBQUE5aUUsSUFBQTJULEVBQUFxbUMsR0FFQUEsRUFBQXJtQyxRQUlBLFFBQUF2YSxJQUFBNGdELEVBRUEsT0FBQUEsRUFBQXJtQyxRQUVBLENBRUEsTUFBQXpILEVBQUF5SCxFQUFBekgsTUFFQSxPQUFBKzJELEdBQUEvMkQsR0FBQUEsRUFBQTNMLE9BQUEsR0FBQTJpRSxHQUFBaDNELEdBaUNBLFNBQUFBLEdBRUEsSUFBQXdILEVBQUEsRUFDQSxNQUFBcFosRUFBQSxFQUVBLElBQUEsSUFBQUYsRUFBQSxFQUFBQSxFQUFBRSxFQUFBRixTQUVBaEIsSUFBQThTLEVBQUE5UixJQUFBc1osSUFJQSxPQUFBQSxJQUFBcFosQ0FHQSxDQS9DQThvRSxDQUFBbDNELElBRUEsT0FBQTYyRCxJQUFBQSxFQUFBLElBQUEzRixHQUFBN21CLElBRUF5RCxFQUFBaXBCLEVBQUFGLEVBQUF0RSxvQkFBQTlxRCxHQUFBb3ZELEVBQUFuRSxZQUFBanJELEdBQ0FxbUMsRUFBQXJtQyxRQUFBMUQsYUFBQTBELEVBQUExRCxhQUVBNnlELEVBQUE5aUUsSUFBQTJULEVBQUFxbUMsR0FFQXJtQyxFQUFBMWEsaUJBQUEsVUFBQW1qRSxHQUVBcGlCLEVBQUFybUMsU0FNQSxJQUlBLENBSUEsQ0FFQSxDQUVBLE9BQUFBLENBRUEsRUFrREFoRCxRQWZBLFdBRUFteUQsRUFBQSxJQUFBbGpCLFFBRUEsT0FBQW1qQixJQUVBQSxFQUFBcHlELFVBQ0FveUQsRUFBQSxLQUlBLEVBT0EsQ0NqSUEsU0FBQU0sR0FBQTNqQixHQUVBLE1BQUFwSSxFQUFBLENBQUEsRUFFQSxTQUFBZ3NCLEVBQUE3NUQsR0FFQSxRQUFBclEsSUFBQWsrQyxFQUFBN3RDLEdBRUEsT0FBQTZ0QyxFQUFBN3RDLEdBSUEsSUFBQW91RCxFQUVBLE9BQUFwdUQsR0FFQSxJQUFBLHNCQUNBb3VELEVBQUFuWSxFQUFBNGpCLGFBQUEsd0JBQUE1akIsRUFBQTRqQixhQUFBLDRCQUFBNWpCLEVBQUE0akIsYUFBQSw4QkFDQSxNQUVBLElBQUEsaUNBQ0F6TCxFQUFBblksRUFBQTRqQixhQUFBLG1DQUFBNWpCLEVBQUE0akIsYUFBQSx1Q0FBQTVqQixFQUFBNGpCLGFBQUEseUNBQ0EsTUFFQSxJQUFBLGdDQUNBekwsRUFBQW5ZLEVBQUE0akIsYUFBQSxrQ0FBQTVqQixFQUFBNGpCLGFBQUEsc0NBQUE1akIsRUFBQTRqQixhQUFBLHdDQUNBLE1BRUEsSUFBQSxpQ0FDQXpMLEVBQUFuWSxFQUFBNGpCLGFBQUEsbUNBQUE1akIsRUFBQTRqQixhQUFBLHlDQUNBLE1BRUEsUUFDQXpMLEVBQUFuWSxFQUFBNGpCLGFBQUE3NUQsR0FNQSxPQUZBNnRDLEVBQUE3dEMsR0FBQW91RCxFQUVBQSxDQUVBLENBRUEsTUFBQSxDQUVBMXNELElBQUEsU0FBQTFCLEdBRUEsT0FBQSxPQUFBNjVELEVBQUE3NUQsRUFFQSxFQUVBNnhELEtBQUEsV0FFQWdJLEVBQUEsMEJBQ0FBLEVBQUEsNEJBQ0FBLEVBQUEsNEJBQ0FBLEVBQUEsK0JBQ0FBLEVBQUEsd0NBQ0FBLEVBQUEsK0JBRUEsRUFFQXpqQixJQUFBLFNBQUFwMkMsR0FFQSxNQUFBb3VELEVBQUF5TCxFQUFBNzVELEdBUUEsT0FOQSxPQUFBb3VELEdBRUE3dEQsR0FBQSx3QkFBQVAsRUFBQSw2QkFJQW91RCxDQUVBLEVBSUEsQ0M3RUEsU0FBQTBMLEdBQUE3akIsRUFBQXRSLEVBQUEyb0IsRUFBQTNELEdBRUEsTUFBQXppQyxFQUFBLENBQUEsRUFDQTZ5QyxFQUFBLElBQUE1akIsUUFFQSxTQUFBNmpCLEVBQUF6cEUsR0FFQSxNQUFBcWtCLEVBQUFya0IsRUFBQUMsT0FFQSxPQUFBb2tCLEVBQUF4a0IsT0FFQXUwQyxFQUFBN2UsT0FBQWxSLEVBQUF4a0IsT0FJQSxJQUFBLE1BQUE0UCxLQUFBNFUsRUFBQSt2QixXQUVBQSxFQUFBN2UsT0FBQWxSLEVBQUErdkIsV0FBQTNrQyxJQUlBLElBQUEsTUFBQUEsS0FBQTRVLEVBQUFnd0IsZ0JBQUEsQ0FFQSxNQUFBbjBDLEVBQUFta0IsRUFBQWd3QixnQkFBQTVrQyxHQUVBLElBQUEsSUFBQXJQLEVBQUEsRUFBQUMsRUFBQUgsRUFBQUksT0FBQUYsRUFBQUMsRUFBQUQsSUFFQWcwQyxFQUFBN2UsT0FBQXIxQixFQUFBRSxHQUlBLENBRUFpa0IsRUFBQTFrQixvQkFBQSxVQUFBOHBFLFVBRUE5eUMsRUFBQXRTLEVBQUFxUixJQUVBLE1BQUExckIsRUFBQXcvRCxFQUFBM2pCLElBQUF4aEMsR0FFQXJhLElBRUFvcUMsRUFBQTdlLE9BQUF2ckIsR0FDQXcvRCxFQUFBempCLE9BQUExaEMsSUFJQSswQyxFQUFBd0Qsd0JBQUF2NEMsSUFFQSxJQUFBQSxFQUFBcWxELGtDQUVBcmxELEVBQUFzVSxrQkFNQW9rQyxFQUFBNE0sT0FBQWh6QyxZQUVBLENBOENBLFNBQUFpekMsRUFBQXZsRCxHQUVBLE1BQUFvekIsRUFBQSxHQUVBb3lCLEVBQUF4bEQsRUFBQXhrQixNQUNBaXFFLEVBQUF6bEQsRUFBQSt2QixXQUFBbmxCLFNBQ0EsSUFBQXhiLEVBQUEsRUFFQSxHQUFBLE9BQUFvMkQsRUFBQSxDQUVBLE1BQUEzcEUsRUFBQTJwRSxFQUFBM3BFLE1BQ0F1VCxFQUFBbzJELEVBQUFwMkQsUUFFQSxJQUFBLElBQUFyVCxFQUFBLEVBQUFDLEVBQUFILEVBQUFJLE9BQUFGLEVBQUFDLEVBQUFELEdBQUEsRUFBQSxDQUVBLE1BQUE4RSxFQUFBaEYsRUFBQUUsRUFBQSxHQUNBK0UsRUFBQWpGLEVBQUFFLEVBQUEsR0FDQWdGLEVBQUFsRixFQUFBRSxFQUFBLEdBRUFxM0MsRUFBQWg0QyxLQUFBeUYsRUFBQUMsRUFBQUEsRUFBQUMsRUFBQUEsRUFBQUYsRUFFQSxDQUVBLEtBQUEsU0FBQTlGLElBQUEwcUUsRUFpQkEsT0FqQkEsQ0FFQSxNQUFBNXBFLEVBQUE0cEUsRUFBQTVwRSxNQUNBdVQsRUFBQXEyRCxFQUFBcjJELFFBRUEsSUFBQSxJQUFBclQsRUFBQSxFQUFBQyxFQUFBSCxFQUFBSSxPQUFBLEVBQUEsRUFBQUYsRUFBQUMsRUFBQUQsR0FBQSxFQUFBLENBRUEsTUFBQThFLEVBQUE5RSxFQUFBLEVBQ0ErRSxFQUFBL0UsRUFBQSxFQUNBZ0YsRUFBQWhGLEVBQUEsRUFFQXEzQyxFQUFBaDRDLEtBQUF5RixFQUFBQyxFQUFBQSxFQUFBQyxFQUFBQSxFQUFBRixFQUVBLENBRUEsQ0FJQSxDQUVBLE1BQUE4RSxFQUFBLElBQUFrRixHQUFBdW9DLEdBQUFsRSxHQUFBRixJQUFBb0UsRUFBQSxHQUNBenRDLEVBQUF5SixRQUFBQSxFQU1BLE1BQUFzMkQsRUFBQVAsRUFBQTNqQixJQUFBeGhDLEdBRUEwbEQsR0FBQTMxQixFQUFBN2UsT0FBQXcwQyxHQUlBUCxFQUFBeGpFLElBQUFxZSxFQUFBcmEsRUFFQSxDQWdDQSxNQUFBLENBRUE2N0MsSUF6SUEsU0FBQXBpQyxFQUFBWSxHQUVBLE9BQUEsSUFBQXNTLEVBQUF0UyxFQUFBcVIsTUFFQXJSLEVBQUFwbEIsaUJBQUEsVUFBQXdxRSxHQUVBOXlDLEVBQUF0UyxFQUFBcVIsS0FBQSxFQUVBcW5DLEVBQUE0TSxPQUFBaHpDLGNBTkF0UyxDQVVBLEVBOEhBdkgsT0E1SEEsU0FBQXVILEdBRUEsTUFBQWkzQyxFQUFBajNDLEVBQUErdkIsV0FJQSxJQUFBLE1BQUEza0MsS0FBQTZyRCxFQUVBbG5CLEVBQUF0M0IsT0FBQXcrQyxFQUFBN3JELEdBQUFpMkMsRUFBQXlXLGNBTUEsTUFBQTluQixFQUFBaHdCLEVBQUFnd0IsZ0JBRUEsSUFBQSxNQUFBNWtDLEtBQUE0a0MsRUFBQSxDQUVBLE1BQUFuMEMsRUFBQW0wQyxFQUFBNWtDLEdBRUEsSUFBQSxJQUFBclAsRUFBQSxFQUFBQyxFQUFBSCxFQUFBSSxPQUFBRixFQUFBQyxFQUFBRCxJQUVBZzBDLEVBQUF0M0IsT0FBQTVjLEVBQUFFLEdBQUFzbEQsRUFBQXlXLGFBSUEsQ0FFQSxFQWtHQTZOLHNCQW5DQSxTQUFBM2xELEdBRUEsTUFBQTRsRCxFQUFBVCxFQUFBM2pCLElBQUF4aEMsR0FFQSxHQUFBNGxELEVBQUEsQ0FFQSxNQUFBSixFQUFBeGxELEVBQUF4a0IsTUFFQSxPQUFBZ3FFLEdBSUFJLEVBQUF4MkQsUUFBQW8yRCxFQUFBcDJELFNBRUFtMkQsRUFBQXZsRCxFQU1BLE1BRUF1bEQsRUFBQXZsRCxHQUlBLE9BQUFtbEQsRUFBQTNqQixJQUFBeGhDLEVBRUEsRUFXQSxDQy9NQSxTQUFBNmxELEdBQUF4a0IsRUFBQXBJLEVBQUF5ZixHQUVBLElBQUFDLEVBUUE5OUQsRUFBQWduRCxFQWlCQSxTQUFBK1csRUFBQTNxQixFQUFBNTRCLEVBQUF3akQsR0FFQSxJQUFBQSxJQUVBeFgsRUFBQXlrQixzQkFBQW5OLEVBQUF0akQsRUFBQXhhLEVBQUFvekMsRUFBQTRULEVBQUFnWCxHQUVBSCxFQUFBamdELE9BQUFwRCxFQUFBc2pELEVBQUFFLEdBRUEsQ0EwREE3OUQsS0FBQSs5RCxRQXpGQSxTQUFBOTdELEdBRUEwN0QsRUFBQTE3RCxDQUVBLEVBc0ZBakMsS0FBQXExQyxTQWxGQSxTQUFBcHpDLEdBRUFwQyxFQUFBb0MsRUFBQXBDLEtBQ0FnbkQsRUFBQTVrRCxFQUFBNGtELGVBRUEsRUE4RUE3bUQsS0FBQThoRCxPQTVFQSxTQUFBN08sRUFBQTU0QixHQUVBZ3NDLEVBQUEwa0IsYUFBQXBOLEVBQUF0akQsRUFBQXhhLEVBQUFvekMsRUFBQTRULEdBRUE2VyxFQUFBamdELE9BQUFwRCxFQUFBc2pELEVBQUEsRUFFQSxFQXVFQTM5RCxLQUFBNDlELGdCQUFBQSxFQUNBNTlELEtBQUFpK0QsZ0JBNURBLFNBQUFDLEVBQUFDLEVBQUFDLEdBRUEsR0FBQSxJQUFBQSxFQUFBLE9BRUFuZ0IsRUFBQXVJLElBQUEsb0JBQ0F3a0IsdUJBQUFyTixFQUFBUSxFQUFBLEVBQUF0K0QsRUFBQXErRCxFQUFBLEVBQUFFLEdBRUEsSUFBQUUsRUFBQSxFQUNBLElBQUEsSUFBQXY5RCxFQUFBLEVBQUFBLEVBQUFxOUQsRUFBQXI5RCxJQUVBdTlELEdBQUFILEVBQUFwOUQsR0FJQTI4RCxFQUFBamdELE9BQUE2Z0QsRUFBQVgsRUFBQSxFQUdBLEVBNENBMzlELEtBQUF1K0QseUJBMUNBLFNBQUFMLEVBQUFDLEVBQUFDLEVBQUFQLEdBRUEsR0FBQSxJQUFBTyxFQUFBLE9BRUEsTUFBQUksRUFBQXZnQixFQUFBdUksSUFBQSxvQkFFQSxHQUFBLE9BQUFnWSxFQUVBLElBQUEsSUFBQXo5RCxFQUFBLEVBQUFBLEVBQUFtOUQsRUFBQWo5RCxPQUFBRixJQUVBNjhELEVBQUFNLEVBQUFuOUQsR0FBQThsRCxFQUFBc1gsRUFBQXA5RCxHQUFBODhELEVBQUE5OEQsUUFJQSxDQUVBeTlELEVBQUF5TSxnQ0FBQXROLEVBQUFRLEVBQUEsRUFBQXQrRCxFQUFBcStELEVBQUEsRUFBQUwsRUFBQSxFQUFBTyxHQUVBLElBQUFFLEVBQUEsRUFDQSxJQUFBLElBQUF2OUQsRUFBQSxFQUFBQSxFQUFBcTlELEVBQUFyOUQsSUFFQXU5RCxHQUFBSCxFQUFBcDlELEdBSUEsSUFBQSxJQUFBQSxFQUFBLEVBQUFBLEVBQUE4OEQsRUFBQTU4RCxPQUFBRixJQUVBMjhELEVBQUFqZ0QsT0FBQTZnRCxFQUFBWCxFQUFBRSxFQUFBOThELEdBSUEsQ0FFQSxDQVdBLENDcEdBLFNBQUFtcUUsR0FBQTdrQixHQUVBLE1BS0F2RSxFQUFBLENBQ0FnRSxNQUFBLEVBQ0FxbEIsTUFBQSxFQUNBQyxVQUFBLEVBQ0FybkQsT0FBQSxFQUNBc25ELE1BQUEsR0E4Q0EsTUFBQSxDQUNBZixPQXpEQSxDQUNBaHpDLFdBQUEsRUFDQXJnQixTQUFBLEdBd0RBNnFDLE9BQUFBLEVBQ0F3cEIsU0FBQSxLQUNBQyxXQUFBLEVBQ0EvUCxNQWRBLFdBRUExWixFQUFBcXBCLE1BQUEsRUFDQXJwQixFQUFBc3BCLFVBQUEsRUFDQXRwQixFQUFBLzlCLE9BQUEsRUFDQSs5QixFQUFBdXBCLE1BQUEsQ0FFQSxFQVFBNXRELE9BakRBLFNBQUFwRCxFQUFBc2pELEVBQUE2TixHQUlBLE9BRkExcEIsRUFBQXFwQixRQUVBeE4sR0FFQSxLQUFBdFgsRUFBQW9sQixVQUNBM3BCLEVBQUFzcEIsV0FBQUksR0FBQW54RCxFQUFBLEdBQ0EsTUFFQSxLQUFBZ3NDLEVBQUFxbEIsTUFDQTVwQixFQUFBdXBCLE9BQUFHLEdBQUFueEQsRUFBQSxHQUNBLE1BRUEsS0FBQWdzQyxFQUFBc2xCLFdBQ0E3cEIsRUFBQXVwQixPQUFBRyxHQUFBbnhELEVBQUEsR0FDQSxNQUVBLEtBQUFnc0MsRUFBQXVsQixVQUNBOXBCLEVBQUF1cEIsT0FBQUcsRUFBQW54RCxFQUNBLE1BRUEsS0FBQWdzQyxFQUFBd2xCLE9BQ0EvcEIsRUFBQS85QixRQUFBeW5ELEVBQUFueEQsRUFDQSxNQUVBLFFBQ0F6VCxRQUFBb3ZCLE1BQUEsc0NBQUEybkMsR0FLQSxFQW9CQSxDQzlEQSxTQUFBbU8sR0FBQXpsQixFQUFBMGxCLEVBQUE5MEQsR0FFQSxNQUFBKzBELEVBQUEsSUFBQXpsQixRQUNBMGxCLEVBQUEsSUFBQXYwRCxHQXNKQSxNQUFBLENBRUErRixPQXRKQSxTQUFBMkcsRUFBQVksRUFBQTQxQyxHQUVBLE1BQUFzUixFQUFBOW5ELEVBQUE0MUIsc0JBSUEvRCxFQUFBanhCLEVBQUFnd0IsZ0JBQUFwbEIsVUFBQTVLLEVBQUFnd0IsZ0JBQUF6eUIsUUFBQXlDLEVBQUFnd0IsZ0JBQUE3akMsTUFDQWc3RCxPQUFBcHNFLElBQUFrMkMsRUFBQUEsRUFBQWgxQyxPQUFBLEVBRUEsSUFBQW1yRSxFQUFBSixFQUFBeGxCLElBQUF4aEMsR0FFQSxRQUFBamxCLElBQUFxc0UsR0FBQUEsRUFBQS94RCxRQUFBOHhELEVBQUEsTUFFQXBzRSxJQUFBcXNFLEdBQUFBLEVBQUE5eEQsUUFBQWhELFVBRUEsTUFBQSswRCxPQUFBdHNFLElBQUFpbEIsRUFBQWd3QixnQkFBQXBsQixTQUNBMDhDLE9BQUF2c0UsSUFBQWlsQixFQUFBZ3dCLGdCQUFBenlCLE9BQ0FncUQsT0FBQXhzRSxJQUFBaWxCLEVBQUFnd0IsZ0JBQUE3akMsTUFFQXE3RCxFQUFBeG5ELEVBQUFnd0IsZ0JBQUFwbEIsVUFBQSxHQUNBNjhDLEVBQUF6bkQsRUFBQWd3QixnQkFBQXp5QixRQUFBLEdBQ0FtcUQsRUFBQTFuRCxFQUFBZ3dCLGdCQUFBN2pDLE9BQUEsR0FFQSxJQUFBdzdELEVBQUEsR0FFQSxJQUFBTixJQUFBTSxFQUFBLElBQ0EsSUFBQUwsSUFBQUssRUFBQSxJQUNBLElBQUFKLElBQUFJLEVBQUEsR0FFQSxJQUFBMWxFLEVBQUErZCxFQUFBK3ZCLFdBQUFubEIsU0FBQXZWLE1BQUFzeUQsRUFDQXpsRSxFQUFBLEVBRUFELEVBQUE4a0UsRUFBQTVMLGlCQUVBajVELEVBQUE1RixLQUFBaUUsS0FBQTBCLEVBQUE4a0UsRUFBQTVMLGdCQUNBbDVELEVBQUE4a0UsRUFBQTVMLGdCQUlBLE1BQUFqd0QsRUFBQSxJQUFBck4sYUFBQW9FLEVBQUFDLEVBQUEsRUFBQWlsRSxHQUVBN3hELEVBQUEsSUFBQUssR0FBQXpLLEVBQUFqSixFQUFBQyxFQUFBaWxFLEdBQ0E3eEQsRUFBQXphLEtBQUFySCxHQUNBOGhCLEVBQUFqRyxhQUFBLEVBSUEsTUFBQXU0RCxFQUFBLEVBQUFELEVBRUEsSUFBQSxJQUFBNXJFLEVBQUEsRUFBQUEsRUFBQW9yRSxFQUFBcHJFLElBQUEsQ0FFQSxNQUFBOHJFLEVBQUFMLEVBQUF6ckUsR0FDQStyRSxFQUFBTCxFQUFBMXJFLEdBQ0Fnc0UsRUFBQUwsRUFBQTNyRSxHQUVBeUosRUFBQXZELEVBQUFDLEVBQUEsRUFBQW5HLEVBRUEsSUFBQSxJQUFBMG1CLEVBQUEsRUFBQUEsRUFBQW9sRCxFQUFBeHlELE1BQUFvTixJQUFBLENBRUEsTUFBQTh3QixFQUFBOXdCLEVBQUFtbEQsR0FFQSxJQUFBUCxJQUVBSixFQUFBdmhFLG9CQUFBbWlFLEVBQUFwbEQsR0FFQXZYLEVBQUExRixFQUFBK3RDLEVBQUEsR0FBQTB6QixFQUFBenBFLEVBQ0EwTixFQUFBMUYsRUFBQSt0QyxFQUFBLEdBQUEwekIsRUFBQXhwRSxFQUNBeU4sRUFBQTFGLEVBQUErdEMsRUFBQSxHQUFBMHpCLEVBQUF0MEQsRUFDQXpILEVBQUExRixFQUFBK3RDLEVBQUEsR0FBQSxJQUlBLElBQUErekIsSUFFQUwsRUFBQXZoRSxvQkFBQW9pRSxFQUFBcmxELEdBRUF2WCxFQUFBMUYsRUFBQSt0QyxFQUFBLEdBQUEwekIsRUFBQXpwRSxFQUNBME4sRUFBQTFGLEVBQUErdEMsRUFBQSxHQUFBMHpCLEVBQUF4cEUsRUFDQXlOLEVBQUExRixFQUFBK3RDLEVBQUEsR0FBQTB6QixFQUFBdDBELEVBQ0F6SCxFQUFBMUYsRUFBQSt0QyxFQUFBLEdBQUEsSUFJQSxJQUFBZzBCLElBRUFOLEVBQUF2aEUsb0JBQUFxaUUsRUFBQXRsRCxHQUVBdlgsRUFBQTFGLEVBQUErdEMsRUFBQSxHQUFBMHpCLEVBQUF6cEUsRUFDQTBOLEVBQUExRixFQUFBK3RDLEVBQUEsR0FBQTB6QixFQUFBeHBFLEVBQ0F5TixFQUFBMUYsRUFBQSt0QyxFQUFBLElBQUEwekIsRUFBQXQwRCxFQUNBekgsRUFBQTFGLEVBQUErdEMsRUFBQSxJQUFBLElBQUF3MEIsRUFBQTE2QixTQUFBNDVCLEVBQUFyMEQsRUFBQSxFQUlBLENBRUEsQ0FVQSxTQUFBbzFELElBRUExeUQsRUFBQWhELFVBRUEwMEQsRUFBQXRsQixPQUFBMWhDLEdBRUFBLEVBQUExa0Isb0JBQUEsVUFBQTBzRSxFQUVBLENBaEJBWixFQUFBLENBQ0EveEQsTUFBQTh4RCxFQUNBN3hELFFBQUFBLEVBQ0EySixLQUFBLElBQUFuZCxHQUFBRyxFQUFBQyxJQUdBOGtFLEVBQUFybEUsSUFBQXFlLEVBQUFvbkQsR0FZQXBuRCxFQUFBcGxCLGlCQUFBLFVBQUFvdEUsRUFFQSxDQUdBLElBQUEsSUFBQTVvRCxFQUFBZSxpQkFBQSxPQUFBZixFQUFBNm9ELGFBRUFyUyxFQUFBc1MsY0FBQUMsU0FBQTltQixFQUFBLGVBQUFqaUMsRUFBQTZvRCxhQUFBaDJELE9BRUEsQ0FFQSxJQUFBbTJELEVBQUEsRUFFQSxJQUFBLElBQUFyc0UsRUFBQSxFQUFBQSxFQUFBbXJFLEVBQUFqckUsT0FBQUYsSUFFQXFzRSxHQUFBbEIsRUFBQW5yRSxHQUlBLE1BQUFzc0UsRUFBQXJvRCxFQUFBaXdCLHFCQUFBLEVBQUEsRUFBQW00QixFQUdBeFMsRUFBQXNTLGNBQUFDLFNBQUE5bUIsRUFBQSwyQkFBQWduQixHQUNBelMsRUFBQXNTLGNBQUFDLFNBQUE5bUIsRUFBQSx3QkFBQTZsQixFQUVBLENBRUF0UixFQUFBc1MsY0FBQUMsU0FBQTltQixFQUFBLHNCQUFBK2xCLEVBQUE5eEQsUUFBQXJELEdBQ0EyakQsRUFBQXNTLGNBQUFDLFNBQUE5bUIsRUFBQSwwQkFBQStsQixFQUFBbm9ELEtBRUEsRUFRQSxDQ3BLQSxTQUFBcXBELEdBQUFqbkIsRUFBQS91QixFQUFBeWQsRUFBQTJvQixHQUVBLElBQUE2UCxFQUFBLElBQUFobkIsUUFtRUEsU0FBQWluQixFQUFBN3NFLEdBRUEsTUFBQThzRSxFQUFBOXNFLEVBQUFDLE9BRUE2c0UsRUFBQW50RSxvQkFBQSxVQUFBa3RFLEdBRUF6NEIsRUFBQTdlLE9BQUF1M0MsRUFBQTMxQyxnQkFFQSxPQUFBMjFDLEVBQUExMUMsZUFBQWdkLEVBQUE3ZSxPQUFBdTNDLEVBQUExMUMsY0FFQSxDQUVBLE1BQUEsQ0FFQXRhLE9BL0VBLFNBQUEyRyxHQUVBLE1BQUEwaEMsRUFBQTRYLEVBQUE1YixPQUFBZ0UsTUFFQTlnQyxFQUFBWixFQUFBWSxTQUNBMG9ELEVBQUFwMkMsRUFBQWt2QixJQUFBcGlDLEVBQUFZLEdBb0NBLEdBaENBdW9ELEVBQUEvbUIsSUFBQWtuQixLQUFBNW5CLElBRUF4dUIsRUFBQTdaLE9BQUFpd0QsR0FFQUgsRUFBQTVtRSxJQUFBK21FLEVBQUE1bkIsSUFJQTFoQyxFQUFBZSxtQkFFQSxJQUFBZixFQUFBL2pCLGlCQUFBLFVBQUFtdEUsSUFFQXBwRCxFQUFBeGtCLGlCQUFBLFVBQUE0dEUsR0FJQUQsRUFBQS9tQixJQUFBcGlDLEtBQUEwaEMsSUFFQS9RLEVBQUF0M0IsT0FBQTJHLEVBQUEwVCxlQUFBdXVCLEVBQUF5VyxjQUVBLE9BQUExNEMsRUFBQTJULGVBRUFnZCxFQUFBdDNCLE9BQUEyRyxFQUFBMlQsY0FBQXN1QixFQUFBeVcsY0FJQXlRLEVBQUE1bUUsSUFBQXlkLEVBQUEwaEMsS0FNQTFoQyxFQUFBd1csY0FBQSxDQUVBLE1BQUFHLEVBQUEzVyxFQUFBMlcsU0FFQXd5QyxFQUFBL21CLElBQUF6ckIsS0FBQStxQixJQUVBL3FCLEVBQUF0ZCxTQUVBOHZELEVBQUE1bUUsSUFBQW8wQixFQUFBK3FCLEdBSUEsQ0FFQSxPQUFBNG5CLENBRUEsRUF1QkFwMkQsUUFyQkEsV0FFQWkyRCxFQUFBLElBQUFobkIsT0FFQSxFQXFCQSxDQ3JGQSxNQUFBb25CLFdBQUF6NEQsR0FFQSxXQUFBdFMsQ0FBQXFFLEVBQUFDLEVBQUFySCxFQUFBdVYsRUFBQUUsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUUsRUFBQUQsRUFBQXZjLE1BRUEsR0FBQXVjLElBQUF2YyxJQUFBdWMsSUFBQXRjLEdBRUEsTUFBQSxJQUFBZ0ssTUFBQSx5RkFJQXJELElBQUFGLEdBQUE2VixJQUFBdmMsS0FBQTBHLEVBQUF0SCxTQUNBd0gsSUFBQUYsR0FBQTZWLElBQUF0YyxLQUFBeUcsRUFBQWpILElBRUFpZCxNQUFBLEtBQUFULEVBQUFFLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUE3VixFQUFBOFYsR0FFQTNWLEtBQUE0dEUsZ0JBQUEsRUFFQTV0RSxLQUFBNlMsTUFBQSxDQUFBNUwsTUFBQUEsRUFBQUMsT0FBQUEsR0FFQWxILEtBQUF3VixlQUFBelYsSUFBQXlWLEVBQUFBLEVBQUFoZSxHQUNBd0ksS0FBQXlWLGVBQUExVixJQUFBMFYsRUFBQUEsRUFBQWplLEdBRUF3SSxLQUFBdVcsT0FBQSxFQUNBdlcsS0FBQXFXLGlCQUFBLEVBRUFyVyxLQUFBNnRFLGdCQUFBLElBRUEsQ0FHQSxJQUFBbm1FLENBQUFxTyxHQU1BLE9BSkFGLE1BQUFuTyxLQUFBcU8sR0FFQS9WLEtBQUE2dEUsZ0JBQUE5M0QsRUFBQTgzRCxnQkFFQTd0RSxJQUVBLENBRUEsTUFBQXNVLENBQUFDLEdBRUEsTUFBQVgsRUFBQWlDLE1BQUF2QixPQUFBQyxHQUlBLE9BRkEsT0FBQXZVLEtBQUE2dEUsa0JBQUFqNkQsRUFBQWk2RCxnQkFBQTd0RSxLQUFBNnRFLGlCQUVBajZELENBRUEsRUNEQSxNQUFBazZELEdBQUEsSUFBQTU0RCxHQUVBNjRELEdBQUEsSUFBQUosR0FBQSxFQUFBLEdBRUFLLEdBQUEsSUFBQXJ6RCxHQUNBc3pELEdBQUEsSUFBQTV5RCxHQUNBNnlELEdBQUEsSUFBQW5zQixHQU1Bb3NCLEdBQUEsR0FDQUMsR0FBQSxHQUlBQyxHQUFBLElBQUF4ckUsYUFBQSxJQUNBeXJFLEdBQUEsSUFBQXpyRSxhQUFBLEdBQ0EwckUsR0FBQSxJQUFBMXJFLGFBQUEsR0FJQSxTQUFBMnJFLEdBQUEzdEUsRUFBQTR0RSxFQUFBQyxHQUVBLE1BQUFDLEVBQUE5dEUsRUFBQSxHQUVBLEdBQUE4dEUsR0FBQSxHQUFBQSxFQUFBLEVBQUEsT0FBQTl0RSxFQUlBLE1BQUF3QixFQUFBb3NFLEVBQUFDLEVBQ0EsSUFBQTkvRCxFQUFBdS9ELEdBQUE5ckUsR0FTQSxRQVBBdEMsSUFBQTZPLElBRUFBLEVBQUEsSUFBQS9MLGFBQUFSLEdBQ0E4ckUsR0FBQTlyRSxHQUFBdU0sR0FJQSxJQUFBNi9ELEVBQUEsQ0FFQUUsRUFBQWxrRSxRQUFBbUUsRUFBQSxHQUVBLElBQUEsSUFBQTdOLEVBQUEsRUFBQXlKLEVBQUEsRUFBQXpKLElBQUEwdEUsSUFBQTF0RSxFQUVBeUosR0FBQWtrRSxFQUNBN3RFLEVBQUFFLEdBQUEwSixRQUFBbUUsRUFBQXBFLEVBSUEsQ0FFQSxPQUFBb0UsQ0FFQSxDQUVBLFNBQUFnZ0UsR0FBQS9vRSxFQUFBQyxHQUVBLEdBQUFELEVBQUE1RSxTQUFBNkUsRUFBQTdFLE9BQUEsT0FBQSxFQUVBLElBQUEsSUFBQUYsRUFBQSxFQUFBQyxFQUFBNkUsRUFBQTVFLE9BQUFGLEVBQUFDLEVBQUFELElBRUEsR0FBQThFLEVBQUE5RSxLQUFBK0UsRUFBQS9FLEdBQUEsT0FBQSxFQUlBLE9BQUEsQ0FFQSxDQUVBLFNBQUF1eUMsR0FBQXp0QyxFQUFBQyxHQUVBLElBQUEsSUFBQS9FLEVBQUEsRUFBQUMsRUFBQThFLEVBQUE3RSxPQUFBRixFQUFBQyxFQUFBRCxJQUVBOEUsRUFBQTlFLEdBQUErRSxFQUFBL0UsRUFJQSxDQUlBLFNBQUE4dEUsR0FBQTUzRCxFQUFBNVUsR0FFQSxJQUFBdU0sRUFBQXcvRCxHQUFBL3JFLFFBRUF0QyxJQUFBNk8sSUFFQUEsRUFBQSxJQUFBM0wsV0FBQVosR0FDQStyRSxHQUFBL3JFLEdBQUF1TSxHQUlBLElBQUEsSUFBQTdOLEVBQUEsRUFBQUEsSUFBQXNCLElBQUF0QixFQUVBNk4sRUFBQTdOLEdBQUFrVyxFQUFBNjNELHNCQUlBLE9BQUFsZ0UsQ0FFQSxDQVNBLFNBQUFtZ0UsR0FBQTFvQixFQUFBMStDLEdBRUEsTUFBQXl6QixFQUFBcDdCLEtBQUFvN0IsTUFFQUEsRUFBQSxLQUFBenpCLElBRUEwK0MsRUFBQTJvQixVQUFBaHZFLEtBQUFpdkUsS0FBQXRuRSxHQUVBeXpCLEVBQUEsR0FBQXp6QixFQUVBLENBSUEsU0FBQXVuRSxHQUFBN29CLEVBQUExK0MsR0FFQSxNQUFBeXpCLEVBQUFwN0IsS0FBQW83QixNQUVBLFFBQUFyN0IsSUFBQTRILEVBQUFuRixFQUVBNDRCLEVBQUEsS0FBQXp6QixFQUFBbkYsR0FBQTQ0QixFQUFBLEtBQUF6ekIsRUFBQWxGLElBRUE0akQsRUFBQThvQixVQUFBbnZFLEtBQUFpdkUsS0FBQXRuRSxFQUFBbkYsRUFBQW1GLEVBQUFsRixHQUVBMjRCLEVBQUEsR0FBQXp6QixFQUFBbkYsRUFDQTQ0QixFQUFBLEdBQUF6ekIsRUFBQWxGLE9BSUEsQ0FFQSxHQUFBbXNFLEdBQUF4ekMsRUFBQXp6QixHQUFBLE9BRUEwK0MsRUFBQStvQixXQUFBcHZFLEtBQUFpdkUsS0FBQXRuRSxHQUVBMnJDLEdBQUFsWSxFQUFBenpCLEVBRUEsQ0FFQSxDQUVBLFNBQUEwbkUsR0FBQWhwQixFQUFBMStDLEdBRUEsTUFBQXl6QixFQUFBcDdCLEtBQUFvN0IsTUFFQSxRQUFBcjdCLElBQUE0SCxFQUFBbkYsRUFFQTQ0QixFQUFBLEtBQUF6ekIsRUFBQW5GLEdBQUE0NEIsRUFBQSxLQUFBenpCLEVBQUFsRixHQUFBMjRCLEVBQUEsS0FBQXp6QixFQUFBZ1EsSUFFQTB1QyxFQUFBaXBCLFVBQUF0dkUsS0FBQWl2RSxLQUFBdG5FLEVBQUFuRixFQUFBbUYsRUFBQWxGLEVBQUFrRixFQUFBZ1EsR0FFQXlqQixFQUFBLEdBQUF6ekIsRUFBQW5GLEVBQ0E0NEIsRUFBQSxHQUFBenpCLEVBQUFsRixFQUNBMjRCLEVBQUEsR0FBQXp6QixFQUFBZ1EsUUFJQSxRQUFBNVgsSUFBQTRILEVBQUFpSCxFQUVBd3NCLEVBQUEsS0FBQXp6QixFQUFBaUgsR0FBQXdzQixFQUFBLEtBQUF6ekIsRUFBQW9HLEdBQUFxdEIsRUFBQSxLQUFBenpCLEVBQUE3QixJQUVBdWdELEVBQUFpcEIsVUFBQXR2RSxLQUFBaXZFLEtBQUF0bkUsRUFBQWlILEVBQUFqSCxFQUFBb0csRUFBQXBHLEVBQUE3QixHQUVBczFCLEVBQUEsR0FBQXp6QixFQUFBaUgsRUFDQXdzQixFQUFBLEdBQUF6ekIsRUFBQW9HLEVBQ0FxdEIsRUFBQSxHQUFBenpCLEVBQUE3QixPQUlBLENBRUEsR0FBQThvRSxHQUFBeHpDLEVBQUF6ekIsR0FBQSxPQUVBMCtDLEVBQUFrcEIsV0FBQXZ2RSxLQUFBaXZFLEtBQUF0bkUsR0FFQTJyQyxHQUFBbFksRUFBQXp6QixFQUVBLENBRUEsQ0FFQSxTQUFBNm5FLEdBQUFucEIsRUFBQTErQyxHQUVBLE1BQUF5ekIsRUFBQXA3QixLQUFBbzdCLE1BRUEsUUFBQXI3QixJQUFBNEgsRUFBQW5GLEVBRUE0NEIsRUFBQSxLQUFBenpCLEVBQUFuRixHQUFBNDRCLEVBQUEsS0FBQXp6QixFQUFBbEYsR0FBQTI0QixFQUFBLEtBQUF6ekIsRUFBQWdRLEdBQUF5akIsRUFBQSxLQUFBenpCLEVBQUFpUSxJQUVBeXVDLEVBQUFvcEIsVUFBQXp2RSxLQUFBaXZFLEtBQUF0bkUsRUFBQW5GLEVBQUFtRixFQUFBbEYsRUFBQWtGLEVBQUFnUSxFQUFBaFEsRUFBQWlRLEdBRUF3akIsRUFBQSxHQUFBenpCLEVBQUFuRixFQUNBNDRCLEVBQUEsR0FBQXp6QixFQUFBbEYsRUFDQTI0QixFQUFBLEdBQUF6ekIsRUFBQWdRLEVBQ0F5akIsRUFBQSxHQUFBenpCLEVBQUFpUSxPQUlBLENBRUEsR0FBQWczRCxHQUFBeHpDLEVBQUF6ekIsR0FBQSxPQUVBMCtDLEVBQUFxcEIsV0FBQTF2RSxLQUFBaXZFLEtBQUF0bkUsR0FFQTJyQyxHQUFBbFksRUFBQXp6QixFQUVBLENBRUEsQ0FJQSxTQUFBZ29FLEdBQUF0cEIsRUFBQTErQyxHQUVBLE1BQUF5ekIsRUFBQXA3QixLQUFBbzdCLE1BQ0EzeUIsRUFBQWQsRUFBQWMsU0FFQSxRQUFBMUksSUFBQTBJLEVBQUEsQ0FFQSxHQUFBbW1FLEdBQUF4ekMsRUFBQXp6QixHQUFBLE9BRUEwK0MsRUFBQXVwQixpQkFBQTV2RSxLQUFBaXZFLE1BQUEsRUFBQXRuRSxHQUVBMnJDLEdBQUFsWSxFQUFBenpCLEVBRUEsS0FBQSxDQUVBLEdBQUFpbkUsR0FBQXh6QyxFQUFBM3lCLEdBQUEsT0FFQThsRSxHQUFBNW5FLElBQUE4QixHQUVBNDlDLEVBQUF1cEIsaUJBQUE1dkUsS0FBQWl2RSxNQUFBLEVBQUFWLElBRUFqN0IsR0FBQWxZLEVBQUEzeUIsRUFFQSxDQUVBLENBRUEsU0FBQW9uRSxHQUFBeHBCLEVBQUExK0MsR0FFQSxNQUFBeXpCLEVBQUFwN0IsS0FBQW83QixNQUNBM3lCLEVBQUFkLEVBQUFjLFNBRUEsUUFBQTFJLElBQUEwSSxFQUFBLENBRUEsR0FBQW1tRSxHQUFBeHpDLEVBQUF6ekIsR0FBQSxPQUVBMCtDLEVBQUF5cEIsaUJBQUE5dkUsS0FBQWl2RSxNQUFBLEVBQUF0bkUsR0FFQTJyQyxHQUFBbFksRUFBQXp6QixFQUVBLEtBQUEsQ0FFQSxHQUFBaW5FLEdBQUF4ekMsRUFBQTN5QixHQUFBLE9BRUE2bEUsR0FBQTNuRSxJQUFBOEIsR0FFQTQ5QyxFQUFBeXBCLGlCQUFBOXZFLEtBQUFpdkUsTUFBQSxFQUFBWCxJQUVBaDdCLEdBQUFsWSxFQUFBM3lCLEVBRUEsQ0FFQSxDQUVBLFNBQUFzbkUsR0FBQTFwQixFQUFBMStDLEdBRUEsTUFBQXl6QixFQUFBcDdCLEtBQUFvN0IsTUFDQTN5QixFQUFBZCxFQUFBYyxTQUVBLFFBQUExSSxJQUFBMEksRUFBQSxDQUVBLEdBQUFtbUUsR0FBQXh6QyxFQUFBenpCLEdBQUEsT0FFQTArQyxFQUFBMnBCLGlCQUFBaHdFLEtBQUFpdkUsTUFBQSxFQUFBdG5FLEdBRUEyckMsR0FBQWxZLEVBQUF6ekIsRUFFQSxLQUFBLENBRUEsR0FBQWluRSxHQUFBeHpDLEVBQUEzeUIsR0FBQSxPQUVBNGxFLEdBQUExbkUsSUFBQThCLEdBRUE0OUMsRUFBQTJwQixpQkFBQWh3RSxLQUFBaXZFLE1BQUEsRUFBQVosSUFFQS82QixHQUFBbFksRUFBQTN5QixFQUVBLENBRUEsQ0FJQSxTQUFBd25FLEdBQUE1cEIsRUFBQTErQyxHQUVBLE1BQUF5ekIsRUFBQXA3QixLQUFBbzdCLE1BRUFBLEVBQUEsS0FBQXp6QixJQUVBMCtDLEVBQUE2cEIsVUFBQWx3RSxLQUFBaXZFLEtBQUF0bkUsR0FFQXl6QixFQUFBLEdBQUF6ekIsRUFFQSxDQUlBLFNBQUF3b0UsR0FBQTlwQixFQUFBMStDLEdBRUEsTUFBQXl6QixFQUFBcDdCLEtBQUFvN0IsTUFFQSxRQUFBcjdCLElBQUE0SCxFQUFBbkYsRUFFQTQ0QixFQUFBLEtBQUF6ekIsRUFBQW5GLEdBQUE0NEIsRUFBQSxLQUFBenpCLEVBQUFsRixJQUVBNGpELEVBQUErcEIsVUFBQXB3RSxLQUFBaXZFLEtBQUF0bkUsRUFBQW5GLEVBQUFtRixFQUFBbEYsR0FFQTI0QixFQUFBLEdBQUF6ekIsRUFBQW5GLEVBQ0E0NEIsRUFBQSxHQUFBenpCLEVBQUFsRixPQUlBLENBRUEsR0FBQW1zRSxHQUFBeHpDLEVBQUF6ekIsR0FBQSxPQUVBMCtDLEVBQUFncUIsV0FBQXJ3RSxLQUFBaXZFLEtBQUF0bkUsR0FFQTJyQyxHQUFBbFksRUFBQXp6QixFQUVBLENBRUEsQ0FFQSxTQUFBMm9FLEdBQUFqcUIsRUFBQTErQyxHQUVBLE1BQUF5ekIsRUFBQXA3QixLQUFBbzdCLE1BRUEsUUFBQXI3QixJQUFBNEgsRUFBQW5GLEVBRUE0NEIsRUFBQSxLQUFBenpCLEVBQUFuRixHQUFBNDRCLEVBQUEsS0FBQXp6QixFQUFBbEYsR0FBQTI0QixFQUFBLEtBQUF6ekIsRUFBQWdRLElBRUEwdUMsRUFBQWtxQixVQUFBdndFLEtBQUFpdkUsS0FBQXRuRSxFQUFBbkYsRUFBQW1GLEVBQUFsRixFQUFBa0YsRUFBQWdRLEdBRUF5akIsRUFBQSxHQUFBenpCLEVBQUFuRixFQUNBNDRCLEVBQUEsR0FBQXp6QixFQUFBbEYsRUFDQTI0QixFQUFBLEdBQUF6ekIsRUFBQWdRLE9BSUEsQ0FFQSxHQUFBaTNELEdBQUF4ekMsRUFBQXp6QixHQUFBLE9BRUEwK0MsRUFBQW1xQixXQUFBeHdFLEtBQUFpdkUsS0FBQXRuRSxHQUVBMnJDLEdBQUFsWSxFQUFBenpCLEVBRUEsQ0FFQSxDQUVBLFNBQUE4b0UsR0FBQXBxQixFQUFBMStDLEdBRUEsTUFBQXl6QixFQUFBcDdCLEtBQUFvN0IsTUFFQSxRQUFBcjdCLElBQUE0SCxFQUFBbkYsRUFFQTQ0QixFQUFBLEtBQUF6ekIsRUFBQW5GLEdBQUE0NEIsRUFBQSxLQUFBenpCLEVBQUFsRixHQUFBMjRCLEVBQUEsS0FBQXp6QixFQUFBZ1EsR0FBQXlqQixFQUFBLEtBQUF6ekIsRUFBQWlRLElBRUF5dUMsRUFBQXFxQixVQUFBMXdFLEtBQUFpdkUsS0FBQXRuRSxFQUFBbkYsRUFBQW1GLEVBQUFsRixFQUFBa0YsRUFBQWdRLEVBQUFoUSxFQUFBaVEsR0FFQXdqQixFQUFBLEdBQUF6ekIsRUFBQW5GLEVBQ0E0NEIsRUFBQSxHQUFBenpCLEVBQUFsRixFQUNBMjRCLEVBQUEsR0FBQXp6QixFQUFBZ1EsRUFDQXlqQixFQUFBLEdBQUF6ekIsRUFBQWlRLE9BSUEsQ0FFQSxHQUFBZzNELEdBQUF4ekMsRUFBQXp6QixHQUFBLE9BRUEwK0MsRUFBQXNxQixXQUFBM3dFLEtBQUFpdkUsS0FBQXRuRSxHQUVBMnJDLEdBQUFsWSxFQUFBenpCLEVBRUEsQ0FFQSxDQUlBLFNBQUFpcEUsR0FBQXZxQixFQUFBMStDLEdBRUEsTUFBQXl6QixFQUFBcDdCLEtBQUFvN0IsTUFFQUEsRUFBQSxLQUFBenpCLElBRUEwK0MsRUFBQXdxQixXQUFBN3dFLEtBQUFpdkUsS0FBQXRuRSxHQUVBeXpCLEVBQUEsR0FBQXp6QixFQUVBLENBSUEsU0FBQW1wRSxHQUFBenFCLEVBQUExK0MsR0FFQSxNQUFBeXpCLEVBQUFwN0IsS0FBQW83QixNQUVBLFFBQUFyN0IsSUFBQTRILEVBQUFuRixFQUVBNDRCLEVBQUEsS0FBQXp6QixFQUFBbkYsR0FBQTQ0QixFQUFBLEtBQUF6ekIsRUFBQWxGLElBRUE0akQsRUFBQTBxQixXQUFBL3dFLEtBQUFpdkUsS0FBQXRuRSxFQUFBbkYsRUFBQW1GLEVBQUFsRixHQUVBMjRCLEVBQUEsR0FBQXp6QixFQUFBbkYsRUFDQTQ0QixFQUFBLEdBQUF6ekIsRUFBQWxGLE9BSUEsQ0FFQSxHQUFBbXNFLEdBQUF4ekMsRUFBQXp6QixHQUFBLE9BRUEwK0MsRUFBQTJxQixZQUFBaHhFLEtBQUFpdkUsS0FBQXRuRSxHQUVBMnJDLEdBQUFsWSxFQUFBenpCLEVBRUEsQ0FFQSxDQUVBLFNBQUFzcEUsR0FBQTVxQixFQUFBMStDLEdBRUEsTUFBQXl6QixFQUFBcDdCLEtBQUFvN0IsTUFFQSxRQUFBcjdCLElBQUE0SCxFQUFBbkYsRUFFQTQ0QixFQUFBLEtBQUF6ekIsRUFBQW5GLEdBQUE0NEIsRUFBQSxLQUFBenpCLEVBQUFsRixHQUFBMjRCLEVBQUEsS0FBQXp6QixFQUFBZ1EsSUFFQTB1QyxFQUFBNnFCLFdBQUFseEUsS0FBQWl2RSxLQUFBdG5FLEVBQUFuRixFQUFBbUYsRUFBQWxGLEVBQUFrRixFQUFBZ1EsR0FFQXlqQixFQUFBLEdBQUF6ekIsRUFBQW5GLEVBQ0E0NEIsRUFBQSxHQUFBenpCLEVBQUFsRixFQUNBMjRCLEVBQUEsR0FBQXp6QixFQUFBZ1EsT0FJQSxDQUVBLEdBQUFpM0QsR0FBQXh6QyxFQUFBenpCLEdBQUEsT0FFQTArQyxFQUFBOHFCLFlBQUFueEUsS0FBQWl2RSxLQUFBdG5FLEdBRUEyckMsR0FBQWxZLEVBQUF6ekIsRUFFQSxDQUVBLENBRUEsU0FBQXlwRSxHQUFBL3FCLEVBQUExK0MsR0FFQSxNQUFBeXpCLEVBQUFwN0IsS0FBQW83QixNQUVBLFFBQUFyN0IsSUFBQTRILEVBQUFuRixFQUVBNDRCLEVBQUEsS0FBQXp6QixFQUFBbkYsR0FBQTQ0QixFQUFBLEtBQUF6ekIsRUFBQWxGLEdBQUEyNEIsRUFBQSxLQUFBenpCLEVBQUFnUSxHQUFBeWpCLEVBQUEsS0FBQXp6QixFQUFBaVEsSUFFQXl1QyxFQUFBZ3JCLFdBQUFyeEUsS0FBQWl2RSxLQUFBdG5FLEVBQUFuRixFQUFBbUYsRUFBQWxGLEVBQUFrRixFQUFBZ1EsRUFBQWhRLEVBQUFpUSxHQUVBd2pCLEVBQUEsR0FBQXp6QixFQUFBbkYsRUFDQTQ0QixFQUFBLEdBQUF6ekIsRUFBQWxGLEVBQ0EyNEIsRUFBQSxHQUFBenpCLEVBQUFnUSxFQUNBeWpCLEVBQUEsR0FBQXp6QixFQUFBaVEsT0FJQSxDQUVBLEdBQUFnM0QsR0FBQXh6QyxFQUFBenpCLEdBQUEsT0FFQTArQyxFQUFBaXJCLFlBQUF0eEUsS0FBQWl2RSxLQUFBdG5FLEdBRUEyckMsR0FBQWxZLEVBQUF6ekIsRUFFQSxDQUVBLENBS0EsU0FBQTRwRSxHQUFBbHJCLEVBQUExK0MsRUFBQXNQLEdBRUEsTUFBQW1rQixFQUFBcDdCLEtBQUFvN0IsTUFDQW8yQyxFQUFBdjZELEVBQUE2M0Qsc0JBU0EsSUFBQTJDLEVBUEFyMkMsRUFBQSxLQUFBbzJDLElBRUFuckIsRUFBQTZwQixVQUFBbHdFLEtBQUFpdkUsS0FBQXVDLEdBQ0FwMkMsRUFBQSxHQUFBbzJDLEdBTUF4eEUsS0FBQUgsT0FBQXdtRCxFQUFBcXJCLG1CQUVBM0QsR0FBQUYsZ0JBQUFwdkUsR0FDQWd6RSxFQUFBMUQsSUFJQTBELEVBQUEzRCxHQUlBNzJELEVBQUEwNkQsYUFBQWhxRSxHQUFBOHBFLEVBQUFELEVBRUEsQ0FFQSxTQUFBSSxHQUFBdnJCLEVBQUExK0MsRUFBQXNQLEdBRUEsTUFBQW1rQixFQUFBcDdCLEtBQUFvN0IsTUFDQW8yQyxFQUFBdjZELEVBQUE2M0Qsc0JBRUExekMsRUFBQSxLQUFBbzJDLElBRUFuckIsRUFBQTZwQixVQUFBbHdFLEtBQUFpdkUsS0FBQXVDLEdBQ0FwMkMsRUFBQSxHQUFBbzJDLEdBSUF2NkQsRUFBQTQ2RCxhQUFBbHFFLEdBQUFzbUUsR0FBQXVELEVBRUEsQ0FFQSxTQUFBTSxHQUFBenJCLEVBQUExK0MsRUFBQXNQLEdBRUEsTUFBQW1rQixFQUFBcDdCLEtBQUFvN0IsTUFDQW8yQyxFQUFBdjZELEVBQUE2M0Qsc0JBRUExekMsRUFBQSxLQUFBbzJDLElBRUFuckIsRUFBQTZwQixVQUFBbHdFLEtBQUFpdkUsS0FBQXVDLEdBQ0FwMkMsRUFBQSxHQUFBbzJDLEdBSUF2NkQsRUFBQTg2RCxlQUFBcHFFLEdBQUF1bUUsR0FBQXNELEVBRUEsQ0FFQSxTQUFBUSxHQUFBM3JCLEVBQUExK0MsRUFBQXNQLEdBRUEsTUFBQW1rQixFQUFBcDdCLEtBQUFvN0IsTUFDQW8yQyxFQUFBdjZELEVBQUE2M0Qsc0JBRUExekMsRUFBQSxLQUFBbzJDLElBRUFuckIsRUFBQTZwQixVQUFBbHdFLEtBQUFpdkUsS0FBQXVDLEdBQ0FwMkMsRUFBQSxHQUFBbzJDLEdBSUF2NkQsRUFBQWc3RCxrQkFBQXRxRSxHQUFBcW1FLEdBQUF3RCxFQUVBLENBMERBLFNBQUFVLEdBQUE3ckIsRUFBQTErQyxHQUVBMCtDLEVBQUE4ckIsV0FBQW55RSxLQUFBaXZFLEtBQUF0bkUsRUFFQSxDQUlBLFNBQUF5cUUsR0FBQS9yQixFQUFBMStDLEdBRUEsTUFBQWlNLEVBQUE0NkQsR0FBQTdtRSxFQUFBM0gsS0FBQWlrQixLQUFBLEdBRUFvaUMsRUFBQStvQixXQUFBcHZFLEtBQUFpdkUsS0FBQXI3RCxFQUVBLENBRUEsU0FBQXkrRCxHQUFBaHNCLEVBQUExK0MsR0FFQSxNQUFBaU0sRUFBQTQ2RCxHQUFBN21FLEVBQUEzSCxLQUFBaWtCLEtBQUEsR0FFQW9pQyxFQUFBa3BCLFdBQUF2dkUsS0FBQWl2RSxLQUFBcjdELEVBRUEsQ0FFQSxTQUFBMCtELEdBQUFqc0IsRUFBQTErQyxHQUVBLE1BQUFpTSxFQUFBNDZELEdBQUE3bUUsRUFBQTNILEtBQUFpa0IsS0FBQSxHQUVBb2lDLEVBQUFxcEIsV0FBQTF2RSxLQUFBaXZFLEtBQUFyN0QsRUFFQSxDQUlBLFNBQUEyK0QsR0FBQWxzQixFQUFBMStDLEdBRUEsTUFBQWlNLEVBQUE0NkQsR0FBQTdtRSxFQUFBM0gsS0FBQWlrQixLQUFBLEdBRUFvaUMsRUFBQXVwQixpQkFBQTV2RSxLQUFBaXZFLE1BQUEsRUFBQXI3RCxFQUVBLENBRUEsU0FBQTQrRCxHQUFBbnNCLEVBQUExK0MsR0FFQSxNQUFBaU0sRUFBQTQ2RCxHQUFBN21FLEVBQUEzSCxLQUFBaWtCLEtBQUEsR0FFQW9pQyxFQUFBeXBCLGlCQUFBOXZFLEtBQUFpdkUsTUFBQSxFQUFBcjdELEVBRUEsQ0FFQSxTQUFBNitELEdBQUFwc0IsRUFBQTErQyxHQUVBLE1BQUFpTSxFQUFBNDZELEdBQUE3bUUsRUFBQTNILEtBQUFpa0IsS0FBQSxJQUVBb2lDLEVBQUEycEIsaUJBQUFod0UsS0FBQWl2RSxNQUFBLEVBQUFyN0QsRUFFQSxDQUlBLFNBQUE4K0QsR0FBQXJzQixFQUFBMStDLEdBRUEwK0MsRUFBQXNzQixXQUFBM3lFLEtBQUFpdkUsS0FBQXRuRSxFQUVBLENBSUEsU0FBQWlyRSxHQUFBdnNCLEVBQUExK0MsR0FFQTArQyxFQUFBZ3FCLFdBQUFyd0UsS0FBQWl2RSxLQUFBdG5FLEVBRUEsQ0FFQSxTQUFBa3JFLEdBQUF4c0IsRUFBQTErQyxHQUVBMCtDLEVBQUFtcUIsV0FBQXh3RSxLQUFBaXZFLEtBQUF0bkUsRUFFQSxDQUVBLFNBQUFtckUsR0FBQXpzQixFQUFBMStDLEdBRUEwK0MsRUFBQXNxQixXQUFBM3dFLEtBQUFpdkUsS0FBQXRuRSxFQUVBLENBSUEsU0FBQW9yRSxHQUFBMXNCLEVBQUExK0MsR0FFQTArQyxFQUFBMnNCLFlBQUFoekUsS0FBQWl2RSxLQUFBdG5FLEVBRUEsQ0FJQSxTQUFBc3JFLEdBQUE1c0IsRUFBQTErQyxHQUVBMCtDLEVBQUEycUIsWUFBQWh4RSxLQUFBaXZFLEtBQUF0bkUsRUFFQSxDQUVBLFNBQUF1ckUsR0FBQTdzQixFQUFBMStDLEdBRUEwK0MsRUFBQThxQixZQUFBbnhFLEtBQUFpdkUsS0FBQXRuRSxFQUVBLENBRUEsU0FBQXdyRSxHQUFBOXNCLEVBQUExK0MsR0FFQTArQyxFQUFBaXJCLFlBQUF0eEUsS0FBQWl2RSxLQUFBdG5FLEVBRUEsQ0FLQSxTQUFBeXJFLEdBQUEvc0IsRUFBQTErQyxFQUFBc1AsR0FFQSxNQUFBbWtCLEVBQUFwN0IsS0FBQW83QixNQUVBLzRCLEVBQUFzRixFQUFBMUcsT0FFQW95RSxFQUFBeEUsR0FBQTUzRCxFQUFBNVUsR0FFQXVzRSxHQUFBeHpDLEVBQUFpNEMsS0FFQWh0QixFQUFBc3NCLFdBQUEzeUUsS0FBQWl2RSxLQUFBb0UsR0FFQS8vQixHQUFBbFksRUFBQWk0QyxJQUlBLElBQUEsSUFBQXR5RSxFQUFBLEVBQUFBLElBQUFzQixJQUFBdEIsRUFFQWtXLEVBQUEwNkQsYUFBQWhxRSxFQUFBNUcsSUFBQStzRSxHQUFBdUYsRUFBQXR5RSxHQUlBLENBRUEsU0FBQXV5RSxHQUFBanRCLEVBQUExK0MsRUFBQXNQLEdBRUEsTUFBQW1rQixFQUFBcDdCLEtBQUFvN0IsTUFFQS80QixFQUFBc0YsRUFBQTFHLE9BRUFveUUsRUFBQXhFLEdBQUE1M0QsRUFBQTVVLEdBRUF1c0UsR0FBQXh6QyxFQUFBaTRDLEtBRUFodEIsRUFBQXNzQixXQUFBM3lFLEtBQUFpdkUsS0FBQW9FLEdBRUEvL0IsR0FBQWxZLEVBQUFpNEMsSUFJQSxJQUFBLElBQUF0eUUsRUFBQSxFQUFBQSxJQUFBc0IsSUFBQXRCLEVBRUFrVyxFQUFBNDZELGFBQUFscUUsRUFBQTVHLElBQUFrdEUsR0FBQW9GLEVBQUF0eUUsR0FJQSxDQUVBLFNBQUF3eUUsR0FBQWx0QixFQUFBMStDLEVBQUFzUCxHQUVBLE1BQUFta0IsRUFBQXA3QixLQUFBbzdCLE1BRUEvNEIsRUFBQXNGLEVBQUExRyxPQUVBb3lFLEVBQUF4RSxHQUFBNTNELEVBQUE1VSxHQUVBdXNFLEdBQUF4ekMsRUFBQWk0QyxLQUVBaHRCLEVBQUFzc0IsV0FBQTN5RSxLQUFBaXZFLEtBQUFvRSxHQUVBLy9CLEdBQUFsWSxFQUFBaTRDLElBSUEsSUFBQSxJQUFBdHlFLEVBQUEsRUFBQUEsSUFBQXNCLElBQUF0QixFQUVBa1csRUFBQTg2RCxlQUFBcHFFLEVBQUE1RyxJQUFBbXRFLEdBQUFtRixFQUFBdHlFLEdBSUEsQ0FFQSxTQUFBeXlFLEdBQUFudEIsRUFBQTErQyxFQUFBc1AsR0FFQSxNQUFBbWtCLEVBQUFwN0IsS0FBQW83QixNQUVBLzRCLEVBQUFzRixFQUFBMUcsT0FFQW95RSxFQUFBeEUsR0FBQTUzRCxFQUFBNVUsR0FFQXVzRSxHQUFBeHpDLEVBQUFpNEMsS0FFQWh0QixFQUFBc3NCLFdBQUEzeUUsS0FBQWl2RSxLQUFBb0UsR0FFQS8vQixHQUFBbFksRUFBQWk0QyxJQUlBLElBQUEsSUFBQXR5RSxFQUFBLEVBQUFBLElBQUFzQixJQUFBdEIsRUFFQWtXLEVBQUFnN0Qsa0JBQUF0cUUsRUFBQTVHLElBQUFpdEUsR0FBQXFGLEVBQUF0eUUsR0FJQSxDQTBEQSxNQUFBMHlFLEdBRUEsV0FBQTd3RSxDQUFBeXpCLEVBQUFxOUMsRUFBQXpFLEdBRUFqdkUsS0FBQXEyQixHQUFBQSxFQUNBcjJCLEtBQUFpdkUsS0FBQUEsRUFDQWp2RSxLQUFBbzdCLE1BQUEsR0FDQXA3QixLQUFBSCxLQUFBNnpFLEVBQUE3ekUsS0FDQUcsS0FBQW10RSxTQTNVQSxTQUFBdHRFLEdBRUEsT0FBQUEsR0FFQSxLQUFBLEtBQUEsT0FBQWt2RSxHQUNBLEtBQUEsTUFBQSxPQUFBRyxHQUNBLEtBQUEsTUFBQSxPQUFBRyxHQUNBLEtBQUEsTUFBQSxPQUFBRyxHQUVBLEtBQUEsTUFBQSxPQUFBRyxHQUNBLEtBQUEsTUFBQSxPQUFBRSxHQUNBLEtBQUEsTUFBQSxPQUFBRSxHQUVBLEtBQUEsS0FBQSxLQUFBLE1BQUEsT0FBQUUsR0FDQSxLQUFBLE1BQUEsS0FBQSxNQUFBLE9BQUFFLEdBQ0EsS0FBQSxNQUFBLEtBQUEsTUFBQSxPQUFBRyxHQUNBLEtBQUEsTUFBQSxLQUFBLE1BQUEsT0FBQUcsR0FFQSxLQUFBLEtBQUEsT0FBQUcsR0FDQSxLQUFBLE1BQUEsT0FBQUUsR0FDQSxLQUFBLE1BQUEsT0FBQUcsR0FDQSxLQUFBLE1BQUEsT0FBQUcsR0FFQSxLQUFBLE1BQ0EsS0FBQSxNQUNBLEtBQUEsTUFDQSxLQUFBLE1BQ0EsS0FBQSxNQUNBLE9BQUFHLEdBRUEsS0FBQSxNQUNBLEtBQUEsTUFDQSxLQUFBLE1BQ0EsT0FBQUssR0FFQSxLQUFBLE1BQ0EsS0FBQSxNQUNBLEtBQUEsTUFDQSxLQUFBLE1BQ0EsT0FBQUUsR0FFQSxLQUFBLE1BQ0EsS0FBQSxNQUNBLEtBQUEsTUFDQSxLQUFBLE1BQ0EsT0FBQUUsR0FJQSxDQTBSQTJCLENBQUFELEVBQUE3ekUsS0FJQSxFQUlBLE1BQUErekUsR0FFQSxXQUFBaHhFLENBQUF5ekIsRUFBQXE5QyxFQUFBekUsR0FFQWp2RSxLQUFBcTJCLEdBQUFBLEVBQ0FyMkIsS0FBQWl2RSxLQUFBQSxFQUNBanZFLEtBQUFvN0IsTUFBQSxHQUNBcDdCLEtBQUFILEtBQUE2ekUsRUFBQTd6RSxLQUNBRyxLQUFBaWtCLEtBQUF5dkQsRUFBQXp2RCxLQUNBamtCLEtBQUFtdEUsU0E5RUEsU0FBQXR0RSxHQUVBLE9BQUFBLEdBRUEsS0FBQSxLQUFBLE9BQUFxeUUsR0FDQSxLQUFBLE1BQUEsT0FBQUUsR0FDQSxLQUFBLE1BQUEsT0FBQUMsR0FDQSxLQUFBLE1BQUEsT0FBQUMsR0FFQSxLQUFBLE1BQUEsT0FBQUMsR0FDQSxLQUFBLE1BQUEsT0FBQUMsR0FDQSxLQUFBLE1BQUEsT0FBQUMsR0FFQSxLQUFBLEtBQUEsS0FBQSxNQUFBLE9BQUFDLEdBQ0EsS0FBQSxNQUFBLEtBQUEsTUFBQSxPQUFBRSxHQUNBLEtBQUEsTUFBQSxLQUFBLE1BQUEsT0FBQUMsR0FDQSxLQUFBLE1BQUEsS0FBQSxNQUFBLE9BQUFDLEdBRUEsS0FBQSxLQUFBLE9BQUFDLEdBQ0EsS0FBQSxNQUFBLE9BQUFFLEdBQ0EsS0FBQSxNQUFBLE9BQUFDLEdBQ0EsS0FBQSxNQUFBLE9BQUFDLEdBRUEsS0FBQSxNQUNBLEtBQUEsTUFDQSxLQUFBLE1BQ0EsS0FBQSxNQUNBLEtBQUEsTUFDQSxPQUFBQyxHQUVBLEtBQUEsTUFDQSxLQUFBLE1BQ0EsS0FBQSxNQUNBLE9BQUFFLEdBRUEsS0FBQSxNQUNBLEtBQUEsTUFDQSxLQUFBLE1BQ0EsS0FBQSxNQUNBLE9BQUFDLEdBRUEsS0FBQSxNQUNBLEtBQUEsTUFDQSxLQUFBLE1BQ0EsS0FBQSxNQUNBLE9BQUFDLEdBSUEsQ0E2QkFLLENBQUFILEVBQUE3ekUsS0FJQSxFQUlBLE1BQUFpMEUsR0FFQSxXQUFBbHhFLENBQUF5ekIsR0FFQXIyQixLQUFBcTJCLEdBQUFBLEVBRUFyMkIsS0FBQSt6RSxJQUFBLEdBQ0EvekUsS0FBQTY0QixJQUFBLENBQUEsQ0FFQSxDQUVBLFFBQUFzMEMsQ0FBQTltQixFQUFBcGtELEVBQUFnVixHQUVBLE1BQUE4OEQsRUFBQS96RSxLQUFBK3pFLElBRUEsSUFBQSxJQUFBaHpFLEVBQUEsRUFBQXNCLEVBQUEweEUsRUFBQTl5RSxPQUFBRixJQUFBc0IsSUFBQXRCLEVBQUEsQ0FFQSxNQUFBc2lCLEVBQUEwd0QsRUFBQWh6RSxHQUNBc2lCLEVBQUE4cEQsU0FBQTltQixFQUFBcGtELEVBQUFvaEIsRUFBQWdULElBQUFwZixFQUVBLENBRUEsRUFRQSxNQUFBKzhELEdBQUEsc0JBV0EsU0FBQUMsR0FBQUMsRUFBQUMsR0FFQUQsRUFBQUgsSUFBQTN6RSxLQUFBK3pFLEdBQ0FELEVBQUFyN0MsSUFBQXM3QyxFQUFBOTlDLElBQUE4OUMsQ0FFQSxDQUVBLFNBQUFDLEdBQUFWLEVBQUF6RSxFQUFBaUYsR0FFQSxNQUFBRyxFQUFBWCxFQUFBdGpFLEtBQ0Fra0UsRUFBQUQsRUFBQXB6RSxPQUtBLElBRkEreUUsR0FBQU8sVUFBQSxJQUVBLENBRUEsTUFBQUMsRUFBQVIsR0FBQS9yQyxLQUFBb3NDLEdBQ0FJLEVBQUFULEdBQUFPLFVBRUEsSUFBQWwrQyxFQUFBbStDLEVBQUEsR0FDQSxNQUFBRSxFQUFBLE1BQUFGLEVBQUEsR0FDQUcsRUFBQUgsRUFBQSxHQUlBLEdBRkFFLElBQUFyK0MsR0FBQSxRQUVBdDJCLElBQUE0MEUsR0FBQSxNQUFBQSxHQUFBRixFQUFBLElBQUFILEVBQUEsQ0FJQUwsR0FBQUMsT0FBQW4wRSxJQUFBNDBFLEVBQ0EsSUFBQWxCLEdBQUFwOUMsRUFBQXE5QyxFQUFBekUsR0FDQSxJQUFBMkUsR0FBQXY5QyxFQUFBcTlDLEVBQUF6RSxJQUVBLEtBRUEsQ0FBQSxDQUtBLElBQUEyRixFQURBVixFQUFBcjdDLElBQ0F4QyxRQUVBdDJCLElBQUE2MEUsSUFFQUEsRUFBQSxJQUFBZCxHQUFBejlDLEdBQ0E0OUMsR0FBQUMsRUFBQVUsSUFJQVYsRUFBQVUsQ0FFQSxDQUVBLENBRUEsQ0FJQSxNQUFBQyxHQUVBLFdBQUFqeUUsQ0FBQXlqRCxFQUFBdVUsR0FFQTU2RCxLQUFBK3pFLElBQUEsR0FDQS96RSxLQUFBNjRCLElBQUEsQ0FBQSxFQUVBLE1BQUF4MkIsRUFBQWdrRCxFQUFBeXVCLG9CQUFBbGEsRUFBQXZVLEVBQUEwdUIsaUJBRUEsSUFBQSxJQUFBaDBFLEVBQUEsRUFBQUEsRUFBQXNCLElBQUF0QixFQUFBLENBRUEsTUFBQTI4RCxFQUFBclgsRUFBQTJ1QixpQkFBQXBhLEVBQUE3NUQsR0FHQXF6RSxHQUFBMVcsRUFGQXJYLEVBQUE0dUIsbUJBQUFyYSxFQUFBOEMsRUFBQXR0RCxNQUVBcFEsS0FFQSxDQUVBLENBRUEsUUFBQW10RSxDQUFBOW1CLEVBQUFqMkMsRUFBQW5PLEVBQUFnVixHQUVBLE1BQUFvTSxFQUFBcmpCLEtBQUE2NEIsSUFBQXpvQixRQUVBclEsSUFBQXNqQixHQUFBQSxFQUFBOHBELFNBQUE5bUIsRUFBQXBrRCxFQUFBZ1YsRUFFQSxDQUVBLFdBQUFpK0QsQ0FBQTd1QixFQUFBamlDLEVBQUFoVSxHQUVBLE1BQUF6SSxFQUFBeWMsRUFBQWhVLFFBRUFyUSxJQUFBNEgsR0FBQTNILEtBQUFtdEUsU0FBQTltQixFQUFBajJDLEVBQUF6SSxFQUVBLENBRUEsYUFBQXd0RSxDQUFBOXVCLEVBQUEwdEIsRUFBQTE0QyxFQUFBcGtCLEdBRUEsSUFBQSxJQUFBbFcsRUFBQSxFQUFBc0IsRUFBQTB4RSxFQUFBOXlFLE9BQUFGLElBQUFzQixJQUFBdEIsRUFBQSxDQUVBLE1BQUFzaUIsRUFBQTB3RCxFQUFBaHpFLEdBQ0E0RyxFQUFBMHpCLEVBQUFoWSxFQUFBZ1QsS0FFQSxJQUFBMXVCLEVBQUEwTSxhQUdBZ1AsRUFBQThwRCxTQUFBOW1CLEVBQUExK0MsRUFBQTFGLE1BQUFnVixFQUlBLENBRUEsQ0FFQSxtQkFBQW0rRCxDQUFBckIsRUFBQTE0QyxHQUVBLE1BQUF6c0IsRUFBQSxHQUVBLElBQUEsSUFBQTdOLEVBQUEsRUFBQXNCLEVBQUEweEUsRUFBQTl5RSxPQUFBRixJQUFBc0IsSUFBQXRCLEVBQUEsQ0FFQSxNQUFBc2lCLEVBQUEwd0QsRUFBQWh6RSxHQUNBc2lCLEVBQUFnVCxNQUFBZ0YsR0FBQXpzQixFQUFBeE8sS0FBQWlqQixFQUVBLENBRUEsT0FBQXpVLENBRUEsRUN6b0NBLFNBQUF5bUUsR0FBQWh2QixFQUFBeG1ELEVBQUFrb0MsR0FFQSxNQUFBcWEsRUFBQWlFLEVBQUFpdkIsYUFBQXoxRSxHQUtBLE9BSEF3bUQsRUFBQWt2QixhQUFBbnpCLEVBQUFyYSxHQUNBc2UsRUFBQW12QixjQUFBcHpCLEdBRUFBLENBRUEsQ0NGQSxNQUFBcXpCLEdBQUEsTUFFQSxJQUFBQyxHQUFBLEVBNERBLFNBQUFDLEdBQUF0dkIsRUFBQWpFLEVBQUF2aUQsR0FFQSxNQUFBKzFFLEVBQUF2dkIsRUFBQXd2QixtQkFBQXp6QixFQUFBaUUsRUFBQXl2QixnQkFDQUMsRUFBQTF2QixFQUFBMnZCLGlCQUFBNXpCLEdBQUE2ekIsT0FFQSxHQUFBTCxHQUFBLEtBQUFHLEVBQUEsTUFBQSxHQUVBLE1BQUFHLEVBQUEsaUJBQUFqdUMsS0FBQTh0QyxHQUNBLEdBQUFHLEVBQUEsQ0FLQSxNQUFBQyxFQUFBaHVDLFNBQUErdEMsRUFBQSxJQUNBLE9BQUFyMkUsRUFBQXUyRSxjQUFBLE9BQUFMLEVBQUEsT0F4RUEsU0FBQWh1QyxFQUFBb3VDLEdBRUEsTUFBQTlLLEVBQUF0akMsRUFBQXN1QyxNQUFBLE1BQ0FDLEVBQUEsR0FFQXRoRSxFQUFBMVQsS0FBQWEsSUFBQWcwRSxFQUFBLEVBQUEsR0FDQUksRUFBQWoxRSxLQUFBWSxJQUFBaTBFLEVBQUEsRUFBQTlLLEVBQUFwcUUsUUFFQSxJQUFBLElBQUFGLEVBQUFpVSxFQUFBalUsRUFBQXcxRSxFQUFBeDFFLElBQUEsQ0FFQSxNQUFBcWlELEVBQUFyaUQsRUFBQSxFQUNBdTFFLEVBQUFsMkUsS0FBQSxHQUFBZ2pELElBQUEreUIsRUFBQSxJQUFBLE9BQUEveUIsTUFBQWlvQixFQUFBdHFFLEtBRUEsQ0FFQSxPQUFBdTFFLEVBQUFFLEtBQUEsS0FFQSxDQXVEQUMsQ0FBQXB3QixFQUFBcXdCLGdCQUFBdDBCLEdBQUErekIsRUFFQSxDQUVBLE9BQUFKLENBSUEsQ0FFQSxTQUFBWSxHQUFBQyxFQUFBL2tFLEdBRUEsTUFBQXEyQixFQWpFQSxTQUFBcjJCLEdBRUEsTUFBQWdsRSxFQUFBcGxFLEdBQUFhLGFBQUFiLEdBQUFHLG1CQUNBa2xFLEVBQUFybEUsR0FBQWEsYUFBQVQsR0FFQSxJQUFBa2xFLEVBZ0JBLE9BZEFGLElBQUFDLEVBRUFDLEVBQUEsR0FFQUYsSUFBQXg1RSxJQUFBeTVFLElBQUExNUUsR0FFQTI1RSxFQUFBLDhCQUVBRixJQUFBejVFLElBQUEwNUUsSUFBQXo1RSxLQUVBMDVFLEVBQUEsK0JBSUFsbEUsR0FFQSxLQUFBOVUsR0FDQSxLQUFBRSxHQUNBLE1BQUEsQ0FBQTg1RSxFQUFBLHNCQUVBLEtBQUFqNkUsR0FDQSxLQUFBRSxHQUNBLE1BQUEsQ0FBQSs1RSxFQUFBLG9CQUVBLFFBRUEsT0FEQW53RSxRQUFBQyxLQUFBLCtDQUFBZ0wsR0FDQSxDQUFBa2xFLEVBQUEsc0JBSUEsQ0E0QkFDLENBQUFubEUsR0FDQSxNQUFBLFFBQUEra0UsNEJBQUExdUMsRUFBQSxPQUFBQSxFQUFBLGtCQUVBLENBRUEsU0FBQSt1QyxHQUFBTCxFQUFBbGQsR0FFQSxJQUFBd2QsRUFFQSxPQUFBeGQsR0FFQSxLQUFBcGpFLEVBQ0E0Z0YsRUFBQSxTQUNBLE1BRUEsS0FBQTNnRixFQUNBMmdGLEVBQUEsV0FDQSxNQUVBLEtBQUExZ0YsR0FDQTBnRixFQUFBLGtCQUNBLE1BRUEsS0FBQXpnRixHQUNBeWdGLEVBQUEsYUFDQSxNQUVBLEtBQUF2Z0YsR0FDQXVnRixFQUFBLE1BQ0EsTUFFQSxLQUFBdGdGLEdBQ0FzZ0YsRUFBQSxVQUNBLE1BRUEsS0FBQXhnRixHQUNBd2dGLEVBQUEsU0FDQSxNQUVBLFFBQ0F0d0UsUUFBQUMsS0FBQSwrQ0FBQTZ5RCxHQUNBd2QsRUFBQSxTQUlBLE1BQUEsUUFBQU4sRUFBQSwyQkFBQU0sRUFBQSx5QkFFQSxDQTZEQSxTQUFBQyxHQUFBcHZDLEdBRUEsTUFBQSxLQUFBQSxDQUVBLENBRUEsU0FBQXF2QyxHQUFBcnZDLEVBQUFyTixHQUVBLE1BQUEyOEMsRUFBQTM4QyxFQUFBNDhDLG9CQUFBNThDLEVBQUE2OEMsaUJBQUE3OEMsRUFBQTg4Qyw0QkFFQSxPQUFBenZDLEVBQ0EwdkMsUUFBQSxrQkFBQS84QyxFQUFBZzlDLGNBQ0FELFFBQUEsbUJBQUEvOEMsRUFBQWk5QyxlQUNBRixRQUFBLHVCQUFBLzhDLEVBQUE2OEMsa0JBQ0FFLFFBQUEseUJBQUFKLEdBQ0FJLFFBQUEsd0JBQUEvOEMsRUFBQWs5QyxtQkFDQUgsUUFBQSxvQkFBQS84QyxFQUFBbTlDLGdCQUNBSixRQUFBLG1CQUFBLzhDLEVBQUFvOUMsZUFDQUwsUUFBQSx5QkFBQS84QyxFQUFBcTlDLG9CQUNBTixRQUFBLG9DQUFBLzhDLEVBQUE4OEMsNkJBQ0FDLFFBQUEsMEJBQUEvOEMsRUFBQTQ4QyxxQkFDQUcsUUFBQSwyQkFBQS84QyxFQUFBczlDLHFCQUVBLENBRUEsU0FBQUMsR0FBQWx3QyxFQUFBck4sR0FFQSxPQUFBcU4sRUFDQTB2QyxRQUFBLHVCQUFBLzhDLEVBQUF3OUMsbUJBQ0FULFFBQUEseUJBQUEvOEMsRUFBQXc5QyxrQkFBQXg5QyxFQUFBeTlDLG9CQUVBLENBSUEsTUFBQUMsR0FBQSxtQ0FFQSxTQUFBQyxHQUFBdHdDLEdBRUEsT0FBQUEsRUFBQTB2QyxRQUFBVyxHQUFBRSxHQUVBLENBRUEsTUFBQUMsR0FBQSxJQUFBQyxJQUVBLFNBQUFGLEdBQUE5RCxFQUFBaUUsR0FFQSxJQUFBMXdDLEVBQUFvZ0IsR0FBQXN3QixHQUVBLFFBQUExNEUsSUFBQWdvQyxFQUFBLENBRUEsTUFBQTJ3QyxFQUFBSCxHQUFBL3hCLElBQUFpeUIsR0FFQSxRQUFBMTRFLElBQUEyNEUsRUFPQSxNQUFBLElBQUF0MUUsTUFBQSw2QkFBQXExRSxFQUFBLEtBTEExd0MsRUFBQW9nQixHQUFBdXdCLEdBQ0E5eEUsUUFBQUMsS0FBQSxnRkFBQTR4RSxFQUFBQyxFQVFBLENBRUEsT0FBQUwsR0FBQXR3QyxFQUVBLENBSUEsTUFBQTR3QyxHQUFBLCtJQUVBLFNBQUFDLEdBQUE3d0MsR0FFQSxPQUFBQSxFQUFBMHZDLFFBQUFrQixHQUFBRSxHQUVBLENBRUEsU0FBQUEsR0FBQXJFLEVBQUF2aEMsRUFBQXVRLEVBQUFzMUIsR0FFQSxJQUFBL3dDLEVBQUEsR0FFQSxJQUFBLElBQUFobkMsRUFBQW9uQyxTQUFBOEssR0FBQWx5QyxFQUFBb25DLFNBQUFxYixHQUFBemlELElBRUFnbkMsR0FBQSt3QyxFQUNBckIsUUFBQSxlQUFBLEtBQUExMkUsRUFBQSxNQUNBMDJFLFFBQUEsdUJBQUExMkUsR0FJQSxPQUFBZ25DLENBRUEsQ0FJQSxTQUFBZ3hDLEdBQUFyK0MsR0FFQSxJQUFBcytDLEVBQUEsYUFBQXQrQyxFQUFBaVIsaUNBQ0FqUixFQUFBaVIsK0JBQ0FqUixFQUFBaVIscUNBQ0FqUixFQUFBaVIsdUNBQ0FqUixFQUFBaVIscUNBQ0FqUixFQUFBaVIsMENBQ0FqUixFQUFBaVIsMkNBQ0FqUixFQUFBaVIsNkNBQ0FqUixFQUFBaVIsZ0RBQ0FqUixFQUFBaVIsc0NBQ0FqUixFQUFBaVIsc0NBQ0FqUixFQUFBaVIsd0NBQ0FqUixFQUFBaVIsMkNBQ0FqUixFQUFBaVIsc0NBQ0FqUixFQUFBaVIsc0NBQ0FqUixFQUFBaVIsd0NBQ0FqUixFQUFBaVIsaUNBaUJBLE1BZEEsVUFBQWpSLEVBQUFpUixVQUVBcXRDLEdBQUEsMkJBRUEsWUFBQXQrQyxFQUFBaVIsVUFFQXF0QyxHQUFBLDZCQUVBLFNBQUF0K0MsRUFBQWlSLFlBRUFxdEMsR0FBQSwyQkFJQUEsQ0FFQSxDQWtIQSxTQUFBQyxHQUFBLzdCLEVBQUFnOEIsRUFBQXgrQyxFQUFBcS9CLEdBS0EsTUFBQTFULEVBQUFuSixFQUFBaHFDLGFBRUF5cUMsRUFBQWpqQixFQUFBaWpCLFFBRUEsSUFBQUUsRUFBQW5qQixFQUFBbWpCLGFBQ0FDLEVBQUFwakIsRUFBQW9qQixlQUVBLE1BQUFxN0IsRUE1SEEsU0FBQXorQyxHQUVBLElBQUF5K0MsRUFBQSx1QkFnQkEsT0FkQXorQyxFQUFBMCtDLGdCQUFBMWxGLEVBRUF5bEYsRUFBQSxxQkFFQXorQyxFQUFBMCtDLGdCQUFBemxGLEVBRUF3bEYsRUFBQSwwQkFFQXorQyxFQUFBMCtDLGdCQUFBeGxGLElBRUF1bEYsRUFBQSxzQkFJQUEsQ0FFQSxDQXdHQUUsQ0FBQTMrQyxHQUNBNCtDLEVBdkdBLFNBQUE1K0MsR0FFQSxJQUFBNCtDLEVBQUEsbUJBRUEsR0FBQTUrQyxFQUFBOFUsT0FFQSxPQUFBOVUsRUFBQTYrQyxZQUVBLEtBQUF2aUYsR0FDQSxLQUFBQyxHQUNBcWlGLEVBQUEsbUJBQ0EsTUFFQSxLQUFBbGlGLEdBQ0FraUYsRUFBQSxzQkFPQSxPQUFBQSxDQUVBLENBZ0ZBRSxDQUFBOStDLEdBQ0ErK0MsRUEvRUEsU0FBQS8rQyxHQUVBLElBQUErK0MsRUFBQSx5QkFFQS8rQyxFQUFBOFUsUUFFQTlVLEVBQUE2K0MsYUFFQXRpRixLQUVBd2lGLEVBQUEsMEJBT0EsT0FBQUEsQ0FFQSxDQTREQUMsQ0FBQWgvQyxHQUNBaS9DLEVBM0RBLFNBQUFqL0MsR0FFQSxJQUFBaS9DLEVBQUEsdUJBRUEsR0FBQWovQyxFQUFBOFUsT0FFQSxPQUFBOVUsRUFBQStVLFNBRUEsS0FBQXY1QyxFQUNBeWpGLEVBQUEsMkJBQ0EsTUFFQSxLQUFBeGpGLEVBQ0F3akYsRUFBQSxzQkFDQSxNQUVBLEtBQUF2akYsRUFDQXVqRixFQUFBLHNCQU9BLE9BQUFBLENBRUEsQ0FpQ0FDLENBQUFsL0MsR0FDQW0vQyxFQWhDQSxTQUFBbi9DLEdBRUEsTUFBQW8vQyxFQUFBcC9DLEVBQUFxL0MsbUJBRUEsR0FBQSxPQUFBRCxFQUFBLE9BQUEsS0FFQSxNQUFBRSxFQUFBMTRFLEtBQUF3a0UsS0FBQWdVLEdBQUEsRUFFQUcsRUFBQSxFQUFBSCxFQUlBLE1BQUEsQ0FBQUksV0FGQSxHQUFBLEVBQUE1NEUsS0FBQWEsSUFBQWIsS0FBQWdFLElBQUEsRUFBQTAwRSxHQUFBLE1BRUFDLGNBQUFELFNBRUEsQ0FrQkFHLENBQUF6L0MsR0FFQTAvQyxFQXRVQSxTQUFBMS9DLEdBT0EsTUFMQSxDQUNBQSxFQUFBMi9DLDBCQUFBLG1EQUFBLEdBQ0EzL0MsRUFBQTQvQyxtQkFBQSwyQ0FBQSxJQUdBQyxPQUFBcEQsSUFBQVgsS0FBQSxLQUVBLENBNlRBZ0UsQ0FBQTkvQyxHQUVBKy9DLEVBN1RBLFNBQUE5OEIsR0FFQSxNQUFBKzhCLEVBQUEsR0FFQSxJQUFBLE1BQUF0cUUsS0FBQXV0QyxFQUFBLENBRUEsTUFBQTE3QyxFQUFBMDdDLEVBQUF2dEMsSUFFQSxJQUFBbk8sR0FFQXk0RSxFQUFBdDZFLEtBQUEsV0FBQWdRLEVBQUEsSUFBQW5PLEVBRUEsQ0FFQSxPQUFBeTRFLEVBQUFsRSxLQUFBLEtBRUEsQ0E2U0FtRSxDQUFBaDlCLEdBRUFpZCxFQUFBdlUsRUFBQXUwQixnQkFFQSxJQUFBQyxFQUFBQyxFQUNBQyxFQUFBcmdELEVBQUE2akIsWUFBQSxZQUFBN2pCLEVBQUE2akIsWUFBQSxLQUFBLEdBRUE3akIsRUFBQXNnRCxxQkFFQUgsRUFBQSxDQUVBLHVCQUFBbmdELEVBQUF1Z0QsV0FDQSx1QkFBQXZnRCxFQUFBd2dELFdBRUFULEdBRUFGLE9BQUFwRCxJQUFBWCxLQUFBLE1BRUFxRSxFQUFBNTVFLE9BQUEsSUFFQTQ1RSxHQUFBLE1BSUFDLEVBQUEsQ0FFQSx1QkFBQXBnRCxFQUFBdWdELFdBQ0EsdUJBQUF2Z0QsRUFBQXdnRCxXQUVBVCxHQUVBRixPQUFBcEQsSUFBQVgsS0FBQSxNQUVBc0UsRUFBQTc1RSxPQUFBLElBRUE2NUUsR0FBQSxRQU1BRCxFQUFBLENBRUE5QixHQUFBcitDLEdBRUEsdUJBQUFBLEVBQUF1Z0QsV0FDQSx1QkFBQXZnRCxFQUFBd2dELFdBRUFULEVBRUEvL0MsRUFBQTIvQywwQkFBQSw0QkFBQSxHQUNBMy9DLEVBQUF5Z0QsU0FBQSx1QkFBQSxHQUNBemdELEVBQUEwZ0QsY0FBQSw2QkFBQSxHQUNBMWdELEVBQUEyZ0QsV0FBQSx5QkFBQSxHQUNBM2dELEVBQUE0Z0QsZ0JBQUEsK0JBQUEsR0FDQTVnRCxFQUFBNmdELGdCQUFBLCtCQUFBLEdBRUE3Z0QsRUFBQThnRCxRQUFBOWdELEVBQUFvVyxJQUFBLGtCQUFBLEdBQ0FwVyxFQUFBOGdELFFBQUE5Z0QsRUFBQStnRCxRQUFBLG1CQUFBLEdBRUEvZ0QsRUFBQTdCLElBQUEsa0JBQUEsR0FDQTZCLEVBQUE4VSxPQUFBLHFCQUFBLEdBQ0E5VSxFQUFBOFUsT0FBQSxXQUFBaXFDLEVBQUEsR0FDQS8rQyxFQUFBNFQsU0FBQSx1QkFBQSxHQUNBNVQsRUFBQThULE1BQUEsb0JBQUEsR0FDQTlULEVBQUFnVSxRQUFBLHNCQUFBLEdBQ0FoVSxFQUFBa1UsVUFBQSx3QkFBQSxHQUNBbFUsRUFBQWdoRCxxQkFBQSxvQ0FBQSxHQUNBaGhELEVBQUFpaEQsc0JBQUEscUNBQUEsR0FDQWpoRCxFQUFBcVUsZ0JBQUEsOEJBQUEsR0FDQXJVLEVBQUEwVSxZQUFBLDBCQUFBLEdBRUExVSxFQUFBL2tCLFdBQUEseUJBQUEsR0FDQStrQixFQUFBeVQsY0FBQSw0QkFBQSxHQUVBelQsRUFBQThTLGFBQUEsMkJBQUEsR0FDQTlTLEVBQUErUyxzQkFBQSxxQ0FBQSxHQUNBL1MsRUFBQWdULG1CQUFBLGtDQUFBLEdBRUFoVCxFQUFBc1QsZUFBQSw2QkFBQSxHQUNBdFQsRUFBQXVULHdCQUFBLHVDQUFBLEdBRUF2VCxFQUFBMlUsWUFBQSwwQkFBQSxHQUNBM1UsRUFBQTZVLGlCQUFBLGdDQUFBLEdBQ0E3VSxFQUFBNFUscUJBQUEsb0NBQUEsR0FFQTVVLEVBQUF3VSxhQUFBLDJCQUFBLEdBQ0F4VSxFQUFBeVUsYUFBQSwyQkFBQSxHQUNBelUsRUFBQTJULFNBQUEsdUJBQUEsR0FDQTNULEVBQUF3UCxVQUFBLHdCQUFBLEdBRUF4UCxFQUFBcVYsYUFBQSwyQkFBQSxHQUNBclYsRUFBQXNWLGdCQUFBLDhCQUFBLEdBQ0F0VixFQUFBd1YsYUFBQSwyQkFBQSxHQUVBeFYsRUFBQW84QixjQUFBLDZCQUFBLEdBQ0FwOEIsRUFBQXM4QixrQkFBQSxpQ0FBQSxHQUlBdDhCLEVBQUFraEQsTUFBQSxrQkFBQWxoRCxFQUFBa2hELE1BQUEsR0FDQWxoRCxFQUFBbWhELFdBQUEsdUJBQUFuaEQsRUFBQW1oRCxXQUFBLEdBQ0FuaEQsRUFBQW9oRCxXQUFBLHVCQUFBcGhELEVBQUFvaEQsV0FBQSxHQUNBcGhELEVBQUFxaEQsUUFBQSxvQkFBQXJoRCxFQUFBcWhELFFBQUEsR0FDQXJoRCxFQUFBc2hELGNBQUEsMEJBQUF0aEQsRUFBQXNoRCxjQUFBLEdBQ0F0aEQsRUFBQXVoRCxVQUFBLHNCQUFBdmhELEVBQUF1aEQsVUFBQSxHQUNBdmhELEVBQUF3aEQsWUFBQSx3QkFBQXhoRCxFQUFBd2hELFlBQUEsR0FDQXhoRCxFQUFBeWhELGtCQUFBLDhCQUFBemhELEVBQUF5aEQsa0JBQUEsR0FFQXpoRCxFQUFBMGhELGVBQUEsMkJBQUExaEQsRUFBQTBoRCxlQUFBLEdBQ0ExaEQsRUFBQTJoRCxlQUFBLDJCQUFBM2hELEVBQUEyaEQsZUFBQSxHQUVBM2hELEVBQUE0aEQsZ0JBQUEsNEJBQUE1aEQsRUFBQTRoRCxnQkFBQSxHQUVBNWhELEVBQUE2aEQsZUFBQSwyQkFBQTdoRCxFQUFBNmhELGVBQUEsR0FDQTdoRCxFQUFBOGhELHFCQUFBLGtDQUFBOWhELEVBQUE4aEQscUJBQUEsR0FDQTloRCxFQUFBK2hELHdCQUFBLHFDQUFBL2hELEVBQUEraEQsd0JBQUEsR0FFQS9oRCxFQUFBZ2lELGlCQUFBLDZCQUFBaGlELEVBQUFnaUQsaUJBQUEsR0FDQWhpRCxFQUFBaWlELDBCQUFBLHVDQUFBamlELEVBQUFpaUQsMEJBQUEsR0FFQWppRCxFQUFBa2lELGdCQUFBLDZCQUFBbGlELEVBQUFraUQsZ0JBQUEsR0FDQWxpRCxFQUFBbWlELG9CQUFBLGlDQUFBbmlELEVBQUFtaUQsb0JBQUEsR0FFQW5pRCxFQUFBb2lELGNBQUEsMEJBQUFwaUQsRUFBQW9pRCxjQUFBLEdBQ0FwaUQsRUFBQXFpRCxtQkFBQSxnQ0FBQXJpRCxFQUFBcWlELG1CQUFBLEdBQ0FyaUQsRUFBQXNpRCx1QkFBQSxvQ0FBQXRpRCxFQUFBc2lELHVCQUFBLEdBRUF0aUQsRUFBQXVpRCxrQkFBQSw4QkFBQXZpRCxFQUFBdWlELGtCQUFBLEdBQ0F2aUQsRUFBQXdpRCxlQUFBLDJCQUFBeGlELEVBQUF3aUQsZUFBQSxHQUlBeGlELEVBQUF5aUQsaUJBQUEsSUFBQXppRCxFQUFBbVcsWUFBQSxzQkFBQSxHQUNBblcsRUFBQXFQLGFBQUEsb0JBQUEsR0FDQXJQLEVBQUEwaUQsYUFBQSwwQkFBQSxHQUNBMWlELEVBQUEyaUQsV0FBQSxrQkFBQSxHQUNBM2lELEVBQUE0aUQsV0FBQSxrQkFBQSxHQUNBNWlELEVBQUE2aUQsV0FBQSxrQkFBQSxHQUVBN2lELEVBQUE4aUQsVUFBQSx3QkFBQSxHQUVBOWlELEVBQUFtVyxZQUFBLHNCQUFBLEdBRUFuVyxFQUFBK2lELFNBQUEsdUJBQUEsR0FFQS9pRCxFQUFBOHhDLGFBQUEsMkJBQUEsR0FDQTl4QyxFQUFBK3hDLGVBQUEsSUFBQS94QyxFQUFBbVcsWUFBQSwyQkFBQSxHQUNBblcsRUFBQSxZQUFBLDBCQUFBLEdBQ0FBLEVBQUF5eEMsa0JBQUEsRUFBQSx1Q0FBQXp4QyxFQUFBZ2pELG1CQUFBLEdBQ0FoakQsRUFBQXl4QyxrQkFBQSxFQUFBLDhCQUFBenhDLEVBQUF5eEMsa0JBQUEsR0FDQXp4QyxFQUFBaWpELFlBQUEsdUJBQUEsR0FDQWpqRCxFQUFBa2pELFVBQUEscUJBQUEsR0FFQWxqRCxFQUFBbWpELGlCQUFBLHdCQUFBLEdBQ0FuakQsRUFBQW1qRCxpQkFBQSxXQUFBMUUsRUFBQSxHQUVBeitDLEVBQUEyVixnQkFBQSw4QkFBQSxHQUVBM1YsRUFBQW9qRCxlQUFBLEVBQUEsMkJBQUEsR0FFQXBqRCxFQUFBMGtDLHVCQUFBLDBCQUFBLEdBRUEsNEJBQ0EsZ0NBQ0EsaUNBQ0EsMkJBQ0EsNkJBQ0EsK0JBQ0EsK0JBRUEsd0JBRUEsbUNBRUEsU0FFQSw4QkFFQSxrQ0FFQSxTQUVBLDhCQUVBLG9DQUVBLFNBRUEsMkJBQ0EseUJBQ0EscUJBRUEsaUJBRUEsd0JBRUEsU0FFQSxpQkFFQSx3QkFFQSxTQUVBLGlCQUVBLHdCQUVBLFNBRUEscUJBRUEsNEJBRUEsU0FFQSxpQ0FFQSwwQkFFQSw2QkFFQSwwQkFFQSxTQUVBLHNCQUVBLDhCQUNBLCtCQUVBLFNBRUEsTUFFQW1iLE9BQUFwRCxJQUFBWCxLQUFBLE1BRUFzRSxFQUFBLENBRUEvQixHQUFBcitDLEdBRUEsdUJBQUFBLEVBQUF1Z0QsV0FDQSx1QkFBQXZnRCxFQUFBd2dELFdBRUFULEVBRUEvL0MsRUFBQThnRCxRQUFBOWdELEVBQUFvVyxJQUFBLGtCQUFBLEdBQ0FwVyxFQUFBOGdELFFBQUE5Z0QsRUFBQStnRCxRQUFBLG1CQUFBLEdBRUEvZ0QsRUFBQXNSLGdCQUFBLDRCQUFBLEdBQ0F0UixFQUFBN0IsSUFBQSxrQkFBQSxHQUNBNkIsRUFBQTBULE9BQUEscUJBQUEsR0FDQTFULEVBQUE4VSxPQUFBLHFCQUFBLEdBQ0E5VSxFQUFBOFUsT0FBQSxXQUFBOHBDLEVBQUEsR0FDQTUrQyxFQUFBOFUsT0FBQSxXQUFBaXFDLEVBQUEsR0FDQS8rQyxFQUFBOFUsT0FBQSxXQUFBbXFDLEVBQUEsR0FDQUUsRUFBQSw4QkFBQUEsRUFBQUssV0FBQSxHQUNBTCxFQUFBLCtCQUFBQSxFQUFBSSxZQUFBLEdBQ0FKLEVBQUEsMEJBQUFBLEVBQUFHLE9BQUEsS0FBQSxHQUNBdC9DLEVBQUE0VCxTQUFBLHVCQUFBLEdBQ0E1VCxFQUFBOFQsTUFBQSxvQkFBQSxHQUNBOVQsRUFBQWdVLFFBQUEsc0JBQUEsR0FDQWhVLEVBQUFrVSxVQUFBLHdCQUFBLEdBQ0FsVSxFQUFBZ2hELHFCQUFBLG9DQUFBLEdBQ0FoaEQsRUFBQWloRCxzQkFBQSxxQ0FBQSxHQUNBamhELEVBQUEwVSxZQUFBLDBCQUFBLEdBRUExVSxFQUFBL2tCLFdBQUEseUJBQUEsR0FDQStrQixFQUFBeVQsY0FBQSw0QkFBQSxHQUVBelQsRUFBQTRTLFVBQUEsd0JBQUEsR0FDQTVTLEVBQUE4UyxhQUFBLDJCQUFBLEdBQ0E5UyxFQUFBK1Msc0JBQUEscUNBQUEsR0FDQS9TLEVBQUFnVCxtQkFBQSxrQ0FBQSxHQUVBaFQsRUFBQWtULFdBQUEseUJBQUEsR0FFQWxULEVBQUFtVCxZQUFBLDBCQUFBLEdBQ0FuVCxFQUFBc1QsZUFBQSw2QkFBQSxHQUNBdFQsRUFBQXVULHdCQUFBLHVDQUFBLEdBRUF2VCxFQUFBMlUsWUFBQSwwQkFBQSxHQUNBM1UsRUFBQTZVLGlCQUFBLGdDQUFBLEdBQ0E3VSxFQUFBNFUscUJBQUEsb0NBQUEsR0FFQTVVLEVBQUF3VSxhQUFBLDJCQUFBLEdBQ0F4VSxFQUFBeVUsYUFBQSwyQkFBQSxHQUVBelUsRUFBQTJULFNBQUEsdUJBQUEsR0FDQTNULEVBQUEyUixVQUFBLHdCQUFBLEdBQ0EzUixFQUFBd1AsVUFBQSx3QkFBQSxHQUVBeFAsRUFBQW1TLE1BQUEsb0JBQUEsR0FDQW5TLEVBQUFvOEIsY0FBQSw2QkFBQSxHQUNBcDhCLEVBQUFzOEIsa0JBQUEsaUNBQUEsR0FFQXQ4QixFQUFBcVYsYUFBQSwyQkFBQSxHQUNBclYsRUFBQXNWLGdCQUFBLDhCQUFBLEdBQ0F0VixFQUFBd1YsYUFBQSwyQkFBQSxHQUVBeFYsRUFBQXlpRCxpQkFBQSxJQUFBemlELEVBQUFtVyxZQUFBLHNCQUFBLEdBQ0FuVyxFQUFBcVAsY0FBQXJQLEVBQUE0Z0QsaUJBQUE1Z0QsRUFBQTBnRCxjQUFBLG9CQUFBLEdBQ0ExZ0QsRUFBQTBpRCxhQUFBLDBCQUFBLEdBQ0ExaUQsRUFBQTJpRCxXQUFBLGtCQUFBLEdBQ0EzaUQsRUFBQTRpRCxXQUFBLGtCQUFBLEdBQ0E1aUQsRUFBQTZpRCxXQUFBLGtCQUFBLEdBRUE3aUQsRUFBQThpRCxVQUFBLHdCQUFBLEdBRUE5aUQsRUFBQW9WLFlBQUEsMEJBQUEsR0FFQXBWLEVBQUFtVyxZQUFBLHNCQUFBLEdBRUFuVyxFQUFBaWpELFlBQUEsdUJBQUEsR0FDQWpqRCxFQUFBa2pELFVBQUEscUJBQUEsR0FFQWxqRCxFQUFBbWpELGlCQUFBLHdCQUFBLEdBQ0FuakQsRUFBQW1qRCxpQkFBQSxXQUFBMUUsRUFBQSxHQUVBeitDLEVBQUF1UixtQkFBQSw4QkFBQSxHQUVBdlIsRUFBQW9qRCxlQUFBLEVBQUEsMkJBQUEsR0FFQXBqRCxFQUFBcWpELG1CQUFBLCtCQUFBLEdBRUFyakQsRUFBQTBrQyx1QkFBQSwwQkFBQSxHQUVBLDJCQUNBLCtCQUNBLCtCQUVBMWtDLEVBQUFnL0IsY0FBQXJqRSxFQUFBLHVCQUFBLEdBQ0Fxa0MsRUFBQWcvQixjQUFBcmpFLEVBQUE4eEQsR0FBQSwwQkFBQSxHQUNBenRCLEVBQUFnL0IsY0FBQXJqRSxFQUFBNGdGLEdBQUEsY0FBQXY4QyxFQUFBZy9CLGFBQUEsR0FFQWgvQixFQUFBcVIsVUFBQSxvQkFBQSxHQUNBclIsRUFBQXNqRCxPQUFBLGlCQUFBLEdBRUE3MUIsR0FBQSx5QkFDQXd1QixHQUFBLHNCQUFBajhDLEVBQUEyaUIsa0JBRUEzaUIsRUFBQXVqRCxnQkFBQSx5QkFBQXZqRCxFQUFBd2pELGFBQUEsR0FFQSxNQUVBM0QsT0FBQXBELElBQUFYLEtBQUEsT0FJQTM0QixFQUFBdzZCLEdBQUF4NkIsR0FDQUEsRUFBQXU1QixHQUFBdjVCLEVBQUFuakIsR0FDQW1qQixFQUFBbzZCLEdBQUFwNkIsRUFBQW5qQixHQUVBb2pCLEVBQUF1NkIsR0FBQXY2QixHQUNBQSxFQUFBczVCLEdBQUF0NUIsRUFBQXBqQixHQUNBb2pCLEVBQUFtNkIsR0FBQW42QixFQUFBcGpCLEdBRUFtakIsRUFBQSs2QixHQUFBLzZCLEdBQ0FDLEVBQUE4NkIsR0FBQTk2QixJQUVBLElBQUFwakIsRUFBQXNnRCxzQkFJQUQsRUFBQSxvQkFFQUYsRUFBQSxDQUNBVCxFQUNBLHVCQUNBLHNCQUNBLDZCQUNBNUQsS0FBQSxNQUFBLEtBQUFxRSxFQUVBQyxFQUFBLENBQ0EscUJBQ0FwZ0QsRUFBQTZqQixjQUFBLytDLEdBQUEsR0FBQSxvREFDQWs3QixFQUFBNmpCLGNBQUEvK0MsR0FBQSxHQUFBLG9DQUNBLHVDQUNBLDRCQUNBLDhCQUNBLG9DQUNBLHFDQUNBLDZDQUNBLHVDQUNBLHVDQUNBLCtDQUNBLDBDQUNBZzNFLEtBQUEsTUFBQSxLQUFBc0UsR0FJQSxNQUFBcUQsRUFBQXBELEVBQUFGLEVBQUFoOUIsRUFDQXVnQyxFQUFBckQsRUFBQUQsRUFBQWg5QixFQUtBdWdDLEVBQUFoSixHQUFBaHZCLEVBQUFBLEVBQUEwWSxjQUFBb2YsR0FDQUcsRUFBQWpKLEdBQUFodkIsRUFBQUEsRUFBQTRZLGdCQUFBbWYsR0FvQkEsU0FBQUcsRUFBQUMsR0FHQSxHQUFBdGhDLEVBQUF1aEMsTUFBQUMsa0JBQUEsQ0FFQSxNQUFBQyxFQUFBdDRCLEVBQUF1NEIsa0JBQUFoa0IsR0FBQXFiLE9BQ0E0SSxFQUFBeDRCLEVBQUEydkIsaUJBQUFxSSxHQUFBcEksT0FDQTZJLEVBQUF6NEIsRUFBQTJ2QixpQkFBQXNJLEdBQUFySSxPQUVBLElBQUE4SSxHQUFBLEVBQ0FDLEdBQUEsRUFFQSxJQUFBLElBQUEzNEIsRUFBQXl1QixvQkFBQWxhLEVBQUF2VSxFQUFBNDRCLGFBSUEsR0FGQUYsR0FBQSxFQUVBLG1CQUFBN2hDLEVBQUF1aEMsTUFBQVMsY0FFQWhpQyxFQUFBdWhDLE1BQUFTLGNBQUE3NEIsRUFBQXVVLEVBQUF5akIsRUFBQUMsT0FFQSxDQUlBLE1BQUFhLEVBQUF4SixHQUFBdHZCLEVBQUFnNEIsRUFBQSxVQUNBZSxFQUFBekosR0FBQXR2QixFQUFBaTRCLEVBQUEsWUFFQTEzRSxRQUFBb3ZCLE1BQ0Esb0NBQUFxd0IsRUFBQWc1QixXQUFBLHNCQUNBaDVCLEVBQUF5dUIsb0JBQUFsYSxFQUFBdlUsRUFBQWk1QixpQkFEQSxzQkFFQWQsRUFBQXB1RSxLQUZBLG9CQUdBb3VFLEVBQUEzK0UsS0FIQSx5QkFJQTgrRSxFQUFBLEtBQ0FRLEVBQUEsS0FDQUMsRUFHQSxLQUVBLEtBQUFULEVBRUEvM0UsUUFBQUMsS0FBQSx3Q0FBQTgzRSxHQUVBLEtBQUFFLEdBQUEsS0FBQUMsSUFFQUUsR0FBQSxHQUlBQSxJQUVBUixFQUFBZSxZQUFBLENBRUFSLFNBQUFBLEVBRUFKLFdBQUFBLEVBRUE5Z0MsYUFBQSxDQUVBcjRDLElBQUFxNUUsRUFDQVcsT0FBQTNFLEdBSUEvOEIsZUFBQSxDQUVBdDRDLElBQUFzNUUsRUFDQVUsT0FBQTFFLElBUUEsQ0FRQXowQixFQUFBbzVCLGFBQUFwQixHQUNBaDRCLEVBQUFvNUIsYUFBQW5CLEdBRUFvQixFQUFBLElBQUE3SyxHQUFBeHVCLEVBQUF1VSxHQUNBb0IsRUFyeUJBLFNBQUEzVixFQUFBdVUsR0FFQSxNQUFBN2xCLEVBQUEsQ0FBQSxFQUVBMXlDLEVBQUFna0QsRUFBQXl1QixvQkFBQWxhLEVBQUF2VSxFQUFBczVCLG1CQUVBLElBQUEsSUFBQTUrRSxFQUFBLEVBQUFBLEVBQUFzQixFQUFBdEIsSUFBQSxDQUVBLE1BQUEyOEQsRUFBQXJYLEVBQUF1NUIsZ0JBQUFobEIsRUFBQTc1RCxHQUNBcVAsRUFBQXN0RCxFQUFBdHRELEtBRUEsSUFBQXlzRCxFQUFBLEVBQ0FhLEVBQUE3OUQsT0FBQXdtRCxFQUFBdzVCLGFBQUFoakIsRUFBQSxHQUNBYSxFQUFBNzlELE9BQUF3bUQsRUFBQXk1QixhQUFBampCLEVBQUEsR0FDQWEsRUFBQTc5RCxPQUFBd21ELEVBQUEwNUIsYUFBQWxqQixFQUFBLEdBSUE5bkIsRUFBQTNrQyxHQUFBLENBQ0F2USxLQUFBNjlELEVBQUE3OUQsS0FDQXc4RCxTQUFBaFcsRUFBQTI1QixrQkFBQXBsQixFQUFBeHFELEdBQ0F5c0QsYUFBQUEsRUFHQSxDQUVBLE9BQUE5bkIsQ0FFQSxDQXl3QkFrckMsQ0FBQTU1QixFQUFBdVUsRUFFQSxDQUlBLElBQUE4a0IsRUFpQkExakIsRUFoSUEzVixFQUFBNjVCLGFBQUF0bEIsRUFBQXlqQixHQUNBaDRCLEVBQUE2NUIsYUFBQXRsQixFQUFBMGpCLFFBSUF2K0UsSUFBQTI2QixFQUFBMmpCLG9CQUVBZ0ksRUFBQTg1QixtQkFBQXZsQixFQUFBLEVBQUFsZ0MsRUFBQTJqQixzQkFFQSxJQUFBM2pCLEVBQUE4eEMsY0FHQW5tQixFQUFBODVCLG1CQUFBdmxCLEVBQUEsRUFBQSxZQUlBdlUsRUFBQSs1QixZQUFBeGxCLEdBaUdBNTZELEtBQUFrdEUsWUFBQSxXQVNBLFlBUEFudEUsSUFBQTIvRSxHQUdBbkIsRUFBQXYrRSxNQUlBMC9FLENBRUEsRUFNQTEvRSxLQUFBbzhELGNBQUEsV0FTQSxZQVBBcjhELElBQUFpOEQsR0FHQXVpQixFQUFBditFLE1BSUFnOEQsQ0FFQSxFQUtBLElBQUFxa0IsR0FBQSxJQUFBM2xELEVBQUE0bEQsdUNBb0NBLE9BbENBdGdGLEtBQUF1Z0YsUUFBQSxXQVFBLE9BTkEsSUFBQUYsSUFFQUEsRUFBQWg2QixFQUFBeXVCLG9CQUFBbGEsRUFBQTZhLEtBSUE0SyxDQUVBLEVBSUFyZ0YsS0FBQXdnRixRQUFBLFdBRUF6bUIsRUFBQXlELHVCQUFBeDlELE1BRUFxbUQsRUFBQW82QixjQUFBN2xCLEdBQ0E1NkQsS0FBQTQ2RCxhQUFBNzZELENBRUEsRUFJQUMsS0FBQUgsS0FBQTY2QixFQUFBdWdELFdBQ0FqN0UsS0FBQW9RLEtBQUFzcUIsRUFBQXdnRCxXQUNBbDdFLEtBQUFxMkIsR0FBQXEvQyxLQUNBMTFFLEtBQUFrNUUsU0FBQUEsRUFDQWw1RSxLQUFBMGdGLFVBQUEsRUFDQTFnRixLQUFBNDZELFFBQUFBLEVBQ0E1NkQsS0FBQTY5QyxhQUFBd2dDLEVBQ0FyK0UsS0FBQTg5QyxlQUFBd2dDLEVBRUF0K0UsSUFFQSxDQ2ppQ0EsSUFBQTJnRixHQUFBLEVBRUEsTUFBQUMsR0FFQSxXQUFBaCtFLEdBRUE1QyxLQUFBNmdGLFlBQUEsSUFBQXJJLElBQ0F4NEUsS0FBQThnRixjQUFBLElBQUF0SSxHQUVBLENBRUEsTUFBQS82RCxDQUFBdWQsR0FFQSxNQUFBNmlCLEVBQUE3aUIsRUFBQTZpQixhQUNBQyxFQUFBOWlCLEVBQUE4aUIsZUFFQWlqQyxFQUFBL2dGLEtBQUFnaEYsZ0JBQUFuakMsR0FDQW9qQyxFQUFBamhGLEtBQUFnaEYsZ0JBQUFsakMsR0FFQW9qQyxFQUFBbGhGLEtBQUFtaEYsMkJBQUFubUQsR0FnQkEsT0FkQSxJQUFBa21ELEVBQUFwdkUsSUFBQWl2RSxLQUVBRyxFQUFBdDVFLElBQUFtNUUsR0FDQUEsRUFBQUwsY0FJQSxJQUFBUSxFQUFBcHZFLElBQUFtdkUsS0FFQUMsRUFBQXQ1RSxJQUFBcTVFLEdBQ0FBLEVBQUFQLGFBSUExZ0YsSUFFQSxDQUVBLE1BQUFrMkIsQ0FBQThFLEdBRUEsTUFBQWttRCxFQUFBbGhGLEtBQUE4Z0YsY0FBQXQ2QixJQUFBeHJCLEdBRUEsSUFBQSxNQUFBb21ELEtBQUFGLEVBRUFFLEVBQUFWLFlBRUEsSUFBQVUsRUFBQVYsV0FBQTFnRixLQUFBNmdGLFlBQUFuNkIsT0FBQTA2QixFQUFBQyxNQU1BLE9BRkFyaEYsS0FBQThnRixjQUFBcDZCLE9BQUExckIsR0FFQWg3QixJQUVBLENBRUEsaUJBQUFzaEYsQ0FBQXRtRCxHQUVBLE9BQUFoN0IsS0FBQWdoRixnQkFBQWhtRCxFQUFBNmlCLGNBQUF4bkIsRUFFQSxDQUVBLG1CQUFBa3JELENBQUF2bUQsR0FFQSxPQUFBaDdCLEtBQUFnaEYsZ0JBQUFobUQsRUFBQThpQixnQkFBQXpuQixFQUVBLENBRUEsT0FBQS9lLEdBRUF0WCxLQUFBNmdGLFlBQUEzbEUsUUFDQWxiLEtBQUE4Z0YsY0FBQTVsRSxPQUVBLENBRUEsMEJBQUFpbUUsQ0FBQW5tRCxHQUVBLE1BQUFJLEVBQUFwN0IsS0FBQThnRixjQUNBLElBQUFuNkUsRUFBQXkwQixFQUFBb3JCLElBQUF4ckIsR0FTQSxZQVBBajdCLElBQUE0RyxJQUVBQSxFQUFBLElBQUE2SyxJQUNBNHBCLEVBQUF6MEIsSUFBQXEwQixFQUFBcjBCLElBSUFBLENBRUEsQ0FFQSxlQUFBcTZFLENBQUFLLEdBRUEsTUFBQWptRCxFQUFBcDdCLEtBQUE2Z0YsWUFDQSxJQUFBVyxFQUFBcG1ELEVBQUFvckIsSUFBQTY2QixHQVNBLFlBUEF0aEYsSUFBQXloRixJQUVBQSxFQUFBLElBQUFDLEdBQUFKLEdBQ0FqbUQsRUFBQXowQixJQUFBMDZFLEVBQUFHLElBSUFBLENBRUEsRUFJQSxNQUFBQyxHQUVBLFdBQUE3K0UsQ0FBQXkrRSxHQUVBcmhGLEtBQUFxMkIsR0FBQXNxRCxLQUVBM2dGLEtBQUFxaEYsS0FBQUEsRUFDQXJoRixLQUFBMGdGLFVBQUEsQ0FFQSxFQy9HQSxTQUFBZ0IsR0FBQXhrQyxFQUFBNGEsRUFBQUMsRUFBQTlaLEVBQUE4dEIsRUFBQWhTLEVBQUEvYixHQUVBLE1BQUEyakMsRUFBQSxJQUFBOXZELEdBQ0ErdkQsRUFBQSxJQUFBaEIsR0FDQWlCLEVBQUEsSUFBQXJ3RSxJQUNBODVELEVBQUEsR0FFQWxNLEVBQUEyTSxFQUFBM00sdUJBQ0EwaUIsRUFBQS9WLEVBQUFqTCxlQUVBLElBQUFuMUIsRUFBQW9nQyxFQUFBcGdDLFVBRUEsTUFBQW8yQyxFQUFBLENBQ0FDLGtCQUFBLFFBQ0FDLHFCQUFBLGVBQ0FDLG1CQUFBLFNBQ0FoeEMsa0JBQUEsUUFDQWl4QyxvQkFBQSxVQUNBQyxrQkFBQSxRQUNBQyxpQkFBQSxPQUNBQyxxQkFBQSxXQUNBQyxxQkFBQSxXQUNBQyxtQkFBQSxTQUNBQyxrQkFBQSxRQUNBQyxtQkFBQSxTQUNBQyxlQUFBLFNBQ0FDLGVBQUEsU0FDQUMsZUFBQSxVQUdBLFNBQUFDLEVBQUE3Z0YsR0FJQSxPQUZBNC9FLEVBQUFqNkUsSUFBQTNGLEdBRUEsSUFBQUEsRUFBQSxLQUVBLEtBQUFBLEdBRUEsQ0FvbEJBLE1BQUEsQ0FDQThnRixjQW5sQkEsU0FBQS9uRCxFQUFBK2lCLEVBQUFpbEMsRUFBQTFoQyxFQUFBbDlCLEdBRUEsTUFBQTBzQixFQUFBd1EsRUFBQXhRLElBQ0E5ckIsRUFBQVosRUFBQVksU0FDQXVWLEVBQUFTLEVBQUFpb0QsdUJBQUEzaEMsRUFBQS9tQixZQUFBLEtBRUFpVixHQUFBeFUsRUFBQWlvRCx1QkFBQWxyQixFQUFBRCxHQUFBdFIsSUFBQXhyQixFQUFBd1UsUUFBQWpWLEdBQ0F3L0MsRUFBQXZxQyxHQUFBQSxFQUFBcDZCLFVBQUFoZSxHQUFBbzRDLEVBQUEzOEIsTUFBQTNMLE9BQUEsS0FFQWc4RSxFQUFBbkIsRUFBQS9tRCxFQUFBbjdCLE1BS0EsT0FBQW03QixFQUFBMlEsWUFFQUEsRUFBQW9nQyxFQUFBbE4sZ0JBQUE3akMsRUFBQTJRLFdBRUFBLElBQUEzUSxFQUFBMlEsV0FFQS9rQyxRQUFBQyxLQUFBLG9DQUFBbTBCLEVBQUEyUSxVQUFBLHVCQUFBQSxFQUFBLGFBUUEsTUFBQXNLLEVBQUFqeEIsRUFBQWd3QixnQkFBQXBsQixVQUFBNUssRUFBQWd3QixnQkFBQXp5QixRQUFBeUMsRUFBQWd3QixnQkFBQTdqQyxNQUNBZzdELE9BQUFwc0UsSUFBQWsyQyxFQUFBQSxFQUFBaDFDLE9BQUEsRUFFQSxJQVFBNDhDLEVBQUFDLEVBQ0FxbEMsRUFBQUMsRUFUQTFGLEVBQUEsRUFXQSxRQVRBMzlFLElBQUFpbEIsRUFBQWd3QixnQkFBQXBsQixXQUFBOHRELEVBQUEsUUFDQTM5RSxJQUFBaWxCLEVBQUFnd0IsZ0JBQUF6eUIsU0FBQW03RCxFQUFBLFFBQ0EzOUUsSUFBQWlsQixFQUFBZ3dCLGdCQUFBN2pDLFFBQUF1c0UsRUFBQSxHQU9Bd0YsRUFBQSxDQUVBLE1BQUE5Z0MsRUFBQTRTLEdBQUFrdUIsR0FFQXJsQyxFQUFBdUUsRUFBQXZFLGFBQ0FDLEVBQUFzRSxFQUFBdEUsY0FFQSxNQUVBRCxFQUFBN2lCLEVBQUE2aUIsYUFDQUMsRUFBQTlpQixFQUFBOGlCLGVBRUE4akMsRUFBQW5rRSxPQUFBdWQsR0FFQW1vRCxFQUFBdkIsRUFBQU4sa0JBQUF0bUQsR0FDQW9vRCxFQUFBeEIsRUFBQUwsb0JBQUF2bUQsR0FJQSxNQUFBbWlCLEVBQUFELEVBQUFFLGtCQUVBaW1DLEdBQUEsSUFBQWovRCxFQUFBZSxnQkFDQW0rRCxHQUFBLElBQUFsL0QsRUFBQTRULGNBRUF1ckQsSUFBQXZvRCxFQUFBbkMsSUFDQTJxRCxJQUFBeG9ELEVBQUFvVCxPQUNBcTFDLElBQUFqMEMsRUFDQWswQyxJQUFBMW9ELEVBQUF3VCxNQUNBbTFDLElBQUEzb0QsRUFBQXNULFNBQ0FzMUMsSUFBQTVvRCxFQUFBMFQsUUFDQW0xQyxJQUFBN29ELEVBQUE0VCxVQUNBazFDLElBQUE5b0QsRUFBQStULGdCQUNBZzFDLElBQUEvb0QsRUFBQW9VLFlBRUE0MEMsSUFBQWhwRCxFQUFBbVUsYUFDQTgwQyxJQUFBanBELEVBQUFrVSxhQUVBZzFDLEVBQUFscEQsRUFBQXJsQixXQUFBLEVBQ0F3dUUsRUFBQW5wRCxFQUFBc1MsVUFBQSxFQUNBODJDLEVBQUFwcEQsRUFBQTRTLFdBQUEsRUFDQXkyQyxFQUFBcnBELEVBQUE2UyxZQUFBLEVBQ0F5MkMsRUFBQXRwRCxFQUFBNlIsTUFBQSxFQUNBMDNDLEVBQUF2cEQsRUFBQStVLGFBQUEsRUFFQXkwQyxFQUFBTixLQUFBbHBELEVBQUFtVCxjQUVBczJDLEdBQUFOLEtBQUFucEQsRUFBQXdTLGFBQ0FrM0MsR0FBQVAsS0FBQW5wRCxFQUFBMFMsbUJBQ0FpM0MsR0FBQVIsS0FBQW5wRCxFQUFBeVMsc0JBRUFtM0MsR0FBQVAsS0FBQXJwRCxFQUFBZ1QsZUFDQTYyQyxHQUFBUixLQUFBcnBELEVBQUFpVCx3QkFFQTYyQyxHQUFBUixLQUFBdHBELEVBQUE4N0IsY0FDQWl1QixHQUFBVCxLQUFBdHBELEVBQUFnOEIsa0JBRUFndUIsS0FBQWhxRCxFQUFBcVUsWUFDQTQxQyxLQUFBanFELEVBQUF1VSxpQkFDQTIxQyxLQUFBbHFELEVBQUFzVSxxQkFFQTYxQyxHQUFBWixLQUFBdnBELEVBQUFnVixnQkFDQW8xQyxHQUFBYixLQUFBdnBELEVBQUFrVixhQUVBbTFDLEtBQUFycUQsRUFBQThVLFlBRUF3MUMsS0FBQXRxRCxFQUFBcVQsU0FFQWszQyxHQUFBdnFELEVBQUFxUixVQUFBLEVBRUFtNUMsS0FBQXhxRCxFQUFBa1AsVUFFQXU3QyxLQUFBenFELEVBQUFpakIsV0FFQSxJQUFBeWIsR0FBQXJqRSxFQUVBMmtDLEVBQUFtUixhQUVBLE9BQUFnUixJQUFBLElBQUFBLEVBQUFHLG1CQUVBb2MsR0FBQXhjLEVBQUF3YyxjQU1BLE1BQUFoL0IsR0FBQSxDQUVBd29ELFNBQUFBLEVBQ0FqSSxXQUFBamdELEVBQUFuN0IsS0FDQXE3RSxXQUFBbGdELEVBQUE1cUIsS0FFQXl0QyxhQUFBQSxFQUNBQyxlQUFBQSxFQUNBSCxRQUFBM2lCLEVBQUEyaUIsUUFFQXdsQyxxQkFBQUEsRUFDQUMsdUJBQUFBLEVBRUFwSSxxQkFBQSxJQUFBaGdELEVBQUFnZ0Qsb0JBQ0F6OEIsWUFBQXZqQixFQUFBdWpCLFlBRUE1UyxVQUFBQSxFQUVBd3ZDLFNBQUFtSSxFQUNBbEksY0FBQWtJLEdBQUEsT0FBQWwvRCxFQUFBNlYsZUFDQW9oRCxXQUFBZ0ksRUFDQS9ILGdCQUFBK0gsR0FBQSxPQUFBai9ELEVBQUEyVCxjQUNBd2pELGdCQUFBOEgsR0FBQSxPQUFBai9ELEVBQUE2b0QsYUFFQXlZLHVCQUFBNUQsRUFDQXprQyxpQkFBQSxPQUFBRixFQUFBRCxFQUFBRyxrQkFBQSxJQUFBRixFQUFBRyxpQkFBQUgsRUFBQTdpQyxRQUFBekksV0FBQTlVLEdBQ0FpdkMsa0JBQUFoUixFQUFBZ1IsZ0JBRUFuVCxJQUFBMHFELEVBQ0FuMUMsT0FBQW8xQyxFQUNBaDBDLE9BQUFpMEMsRUFDQWxLLFdBQUFrSyxHQUFBajBDLEVBQUFwNkIsUUFDQTJrRSxtQkFBQUEsRUFDQXZyQyxNQUFBazFDLEVBQ0FwMUMsU0FBQXExQyxFQUNBajFDLFFBQUFrMUMsRUFDQWgxQyxVQUFBaTFDLEVBQ0E5MEMsZ0JBQUEreUMsR0FBQWdDLEVBQ0ExMEMsWUFBQTIwQyxFQUVBckkscUJBQUFtSSxHcE0xRFksSW9NMERaN29ELEVBQUE2VCxjQUNBOHNDLHNCQUFBa0ksR3BNNURZLElvTTREWjdvRCxFQUFBNlQsY0FFQU0sYUFBQTYwQyxFQUNBOTBDLGFBQUErMEMsRUFFQXR1RSxXQUFBdXVFLEVBQ0EvMUMsY0FBQXEyQyxFQUVBbDNDLFVBQUE2MkMsRUFDQTMyQyxhQUFBaTNDLEdBQ0EvMkMsbUJBQUFnM0MsR0FDQWozQyxzQkFBQWszQyxHQUVBLzJDLFdBQUF3MkMsRUFFQXYyQyxZQUFBdzJDLEVBQ0FyMkMsZUFBQTQyQyxHQUNBMzJDLHdCQUFBNDJDLEdBRUFoNEMsTUFBQXkzQyxFQUNBeHRCLGNBQUFndUIsR0FDQTl0QixrQkFBQSt0QixHQUVBMTFDLFlBQUEyMUMsR0FDQXoxQyxpQkFBQTAxQyxHQUNBMzFDLHFCQUFBNDFDLEdBRUFuMUMsYUFBQXcwQyxFQUNBdjBDLGdCQUFBbTFDLEdBQ0FqMUMsYUFBQWsxQyxHQUVBdDFDLFlBQUF1MUMsR0FFQXJILFFBQUEsSUFBQWhqRCxFQUFBaVAsYXBNek9ZLElvTXlPWmpQLEVBQUE2TyxXQUFBLElBQUE3TyxFQUFBZ1IsZ0JBRUFxQyxTQUFBaTNDLEdBQ0FqNUMsVUFBQWs1QyxHQUNBcjdDLFVBQUFzN0MsR0FFQS8xQyxRQUFBelUsRUFBQXlVLFFBSUFtc0MsTUFBQTJILEdBQUFULEVBQUE5bkQsRUFBQW5DLElBQUE1aUIsU0FDQThsRSxRQUFBMkgsR0FBQVosRUFBQTluRCxFQUFBd1QsTUFBQXY0QixTQUNBNmxFLFdBQUE2SCxHQUFBYixFQUFBOW5ELEVBQUFzVCxTQUFBcjRCLFNBQ0FnbUUsVUFBQTJILEdBQUFkLEVBQUE5bkQsRUFBQTBULFFBQUF6NEIsU0FDQWltRSxZQUFBMkgsR0FBQWYsRUFBQTluRCxFQUFBNFQsVUFBQTM0QixTQUNBa21FLGtCQUFBMkgsR0FBQWhCLEVBQUE5bkQsRUFBQStULGdCQUFBOTRCLFNBQ0ErbEUsY0FBQStILEdBQUFqQixFQUFBOW5ELEVBQUFvVSxZQUFBbjVCLFNBRUFtbUUsZUFBQTRILEdBQUFsQixFQUFBOW5ELEVBQUFtVSxhQUFBbDVCLFNBQ0FvbUUsZUFBQTRILEdBQUFuQixFQUFBOW5ELEVBQUFrVSxhQUFBajVCLFNBRUFxbUUsZ0JBQUFrSSxHQUFBMUIsRUFBQTluRCxFQUFBbVQsY0FBQWw0QixTQUVBc21FLGVBQUFrSSxJQUFBM0IsRUFBQTluRCxFQUFBd1MsYUFBQXYzQixTQUNBdW1FLHFCQUFBa0ksSUFBQTVCLEVBQUE5bkQsRUFBQTBTLG1CQUFBejNCLFNBQ0F3bUUsd0JBQUFrSSxJQUFBN0IsRUFBQTluRCxFQUFBeVMsc0JBQUF4M0IsU0FFQXltRSxpQkFBQWtJLElBQUE5QixFQUFBOW5ELEVBQUFnVCxlQUFBLzNCLFNBQ0EwbUUsMEJBQUFrSSxJQUFBL0IsRUFBQTluRCxFQUFBaVQsd0JBQUFoNEIsU0FFQTJtRSxnQkFBQWtJLElBQUFoQyxFQUFBOW5ELEVBQUE4N0IsY0FBQTdnRCxTQUNBNG1FLG9CQUFBa0ksSUFBQWpDLEVBQUE5bkQsRUFBQWc4QixrQkFBQS9nRCxTQUVBNm1FLGNBQUFrSSxJQUFBbEMsRUFBQTluRCxFQUFBcVUsWUFBQXA1QixTQUNBOG1FLG1CQUFBa0ksSUFBQW5DLEVBQUE5bkQsRUFBQXVVLGlCQUFBdDVCLFNBQ0ErbUUsdUJBQUFrSSxJQUFBcEMsRUFBQTluRCxFQUFBc1UscUJBQUFyNUIsU0FFQWduRSxrQkFBQWtJLElBQUFyQyxFQUFBOW5ELEVBQUFnVixnQkFBQS81QixTQUNBaW5FLGVBQUFrSSxJQUFBdEMsRUFBQTluRCxFQUFBa1YsYUFBQWo2QixTQUVBNGxFLFdBQUF5SixJQUFBeEMsRUFBQTluRCxFQUFBcVQsU0FBQXA0QixTQUlBa25FLGlCQUFBbjRELEVBQUErdkIsV0FBQWMsVUFBQWd1QyxHQUFBSyxHQUNBbjZDLGFBQUEvTyxFQUFBK08sYUFDQXF6QyxjQUFBLElBQUFwaUQsRUFBQStPLGdCQUFBL2tCLEVBQUErdkIsV0FBQTVqQyxPQUFBLElBQUE2VCxFQUFBK3ZCLFdBQUE1akMsTUFBQWtoQyxTQUVBbXJDLFdBQUEsSUFBQXA1RCxFQUFBcVcsWUFBQXpWLEVBQUErdkIsV0FBQXY5QixLQUFBK3JFLEdBQUErQixJQUVBeDBDLE1BQUFBLEVBQ0EwcUMsUUFBQSxJQUFBeGdELEVBQUE4VixJQUNBMnFDLFVBQUEzcUMsR0FBQUEsRUFBQTYwQyxVQUVBOTBDLGFBQUEsSUFBQTdWLEVBQUE2VixZQUVBUixpQkFBQSxJQUFBclYsRUFBQXFWLGdCQUNBK3VCLHVCQUFBQSxFQUVBcWUsVUFBQSxJQUFBcjVELEVBQUF3VyxjQUVBNHhDLGtCQUFBenNFLElBQUFpbEIsRUFBQWd3QixnQkFBQXBsQixTQUNBNjhDLGtCQUFBMXNFLElBQUFpbEIsRUFBQWd3QixnQkFBQXp5QixPQUNBbXFELGlCQUFBM3NFLElBQUFpbEIsRUFBQWd3QixnQkFBQTdqQyxNQUNBZzdELGtCQUFBQSxFQUNBdVIsbUJBQUFBLEVBRUFoRyxhQUFBMzVCLEVBQUE2bkMsWUFBQTNrRixPQUNBNDJFLGVBQUE5NUIsRUFBQXA1QixNQUFBMWpCLE9BQ0EwMkUsY0FBQTU1QixFQUFBOG5DLEtBQUE1a0YsT0FDQXMyRSxpQkFBQXg1QixFQUFBaVcsYUFBQS95RCxPQUNBMjJFLGtCQUFBNzVCLEVBQUErbkMsU0FBQTdrRixPQUNBNjJFLGNBQUEvNUIsRUFBQWdvQyxLQUFBOWtGLE9BRUE4MkUsbUJBQUFoNkIsRUFBQTBWLHFCQUFBeHlELE9BQ0ErMkUscUJBQUFqNkIsRUFBQXdXLGVBQUF0ekQsT0FDQXEyRSxvQkFBQXY1QixFQUFBa1csY0FBQWh6RCxPQUNBdTJFLDRCQUFBejVCLEVBQUF5NUIsNEJBRUFzRyxlQUFBLy9CLEVBQUErL0IsZUFFQTVGLGtCQUFBbDZCLEVBQUErakIsVUFDQW9XLG9CQUFBbjZCLEVBQUFna0IsZ0JBRUFqMkIsVUFBQS9RLEVBQUErUSxVQUVBOHhDLGlCQUFBM2dDLEVBQUE4b0MsVUFBQXQwRSxTQUFBc3hFLEVBQUEvaEYsT0FBQSxFQUNBbTRFLGNBQUFsOEIsRUFBQThvQyxVQUFBbm1GLEtBRUE2NUQsWUFBQUEsR0FFQXFrQixtQkFBQXdGLElBQUEsSUFBQXZvRCxFQUFBbkMsSUFBQW90RCxnQkFBQXgwRSxHQUFBYyxZQUFBeW9CLEVBQUFuQyxJQUFBaG5CLGNBQUExVSxHQUVBOHVDLG1CQUFBalIsRUFBQWlSLG1CQUVBMHhDLFlwTTFVWSxJb00wVVozaUQsRUFBQThPLEtBQ0E4ekMsVUFBQTVpRCxFQUFBOE8sT0FBQWgyQyxFQUVBbXFGLGdCQUFBampELEVBQUFrakQsY0FBQSxFQUNBQSxhQUFBbGpELEVBQUFrakQsY0FBQSxFQUVBNy9CLG9CQUFBcmpCLEVBQUFxakIsb0JBRUFnOEIsMEJBQUFvTCxLQUFBLElBQUF6cUQsRUFBQWlqQixXQUFBQyxrQkFBQUQsRUFBQW5zQyxJQUFBLDRCQUNBd29FLG9CQUFBbUwsS0FBQSxJQUFBenFELEVBQUFpakIsV0FBQUUsV0FBQW1sQyxJQUFBcmxDLEVBQUFuc0MsSUFBQSxvQkFFQXd1RSx1Q0FBQXJpQyxFQUFBbnNDLElBQUEsK0JBRUF5NkIsc0JBQUF2UixFQUFBdVIseUJBWUEsT0FOQTdSLEdBQUEyaUQsV0FBQXdFLEVBQUEvdkUsSUFBQSxHQUNBNG9CLEdBQUE0aUQsV0FBQXVFLEVBQUEvdkUsSUFBQSxHQUNBNG9CLEdBQUE2aUQsV0FBQXNFLEVBQUEvdkUsSUFBQSxHQUVBK3ZFLEVBQUEzbUUsUUFFQXdmLEVBRUEsRUFpUkF3ckQsbUJBL1FBLFNBQUF4ckQsR0FFQSxNQUFBNzVCLEVBQUEsR0FhQSxHQVhBNjVCLEVBQUF3b0QsU0FFQXJpRixFQUFBVCxLQUFBczZCLEVBQUF3b0QsV0FJQXJpRixFQUFBVCxLQUFBczZCLEVBQUF5b0Qsc0JBQ0F0aUYsRUFBQVQsS0FBQXM2QixFQUFBMG9ELDhCQUlBcmpGLElBQUEyNkIsRUFBQWlqQixRQUVBLElBQUEsTUFBQXZ0QyxLQUFBc3FCLEVBQUFpakIsUUFFQTk4QyxFQUFBVCxLQUFBZ1EsR0FDQXZQLEVBQUFULEtBQUFzNkIsRUFBQWlqQixRQUFBdnRDLElBZ0JBLE9BVkEsSUFBQXNxQixFQUFBc2dELHVCQWNBLFNBQUFuNkUsRUFBQTY1QixHQUVBNzVCLEVBQUFULEtBQUFzNkIsRUFBQWlSLFdBQ0E5cUMsRUFBQVQsS0FBQXM2QixFQUFBMmlCLGtCQUNBeDhDLEVBQUFULEtBQUFzNkIsRUFBQTYrQyxZQUNBMTRFLEVBQUFULEtBQUFzNkIsRUFBQXEvQyxvQkFDQWw1RSxFQUFBVCxLQUFBczZCLEVBQUFraEQsT0FDQS82RSxFQUFBVCxLQUFBczZCLEVBQUFtaEQsWUFDQWg3RSxFQUFBVCxLQUFBczZCLEVBQUFvaEQsWUFDQWo3RSxFQUFBVCxLQUFBczZCLEVBQUFxaEQsU0FDQWw3RSxFQUFBVCxLQUFBczZCLEVBQUF1aEQsV0FDQXA3RSxFQUFBVCxLQUFBczZCLEVBQUF3aEQsYUFDQXI3RSxFQUFBVCxLQUFBczZCLEVBQUF5aEQsbUJBQ0F0N0UsRUFBQVQsS0FBQXM2QixFQUFBc2hELGVBQ0FuN0UsRUFBQVQsS0FBQXM2QixFQUFBMGhELGdCQUNBdjdFLEVBQUFULEtBQUFzNkIsRUFBQTJoRCxnQkFDQXg3RSxFQUFBVCxLQUFBczZCLEVBQUE0aEQsaUJBQ0F6N0UsRUFBQVQsS0FBQXM2QixFQUFBNmhELGdCQUNBMTdFLEVBQUFULEtBQUFzNkIsRUFBQThoRCxzQkFDQTM3RSxFQUFBVCxLQUFBczZCLEVBQUEraEQseUJBQ0E1N0UsRUFBQVQsS0FBQXM2QixFQUFBZ2lELGtCQUNBNzdFLEVBQUFULEtBQUFzNkIsRUFBQWlpRCwyQkFDQTk3RSxFQUFBVCxLQUFBczZCLEVBQUFraUQsaUJBQ0EvN0UsRUFBQVQsS0FBQXM2QixFQUFBbWlELHFCQUNBaDhFLEVBQUFULEtBQUFzNkIsRUFBQW9pRCxlQUNBajhFLEVBQUFULEtBQUFzNkIsRUFBQXFpRCxvQkFDQWw4RSxFQUFBVCxLQUFBczZCLEVBQUFzaUQsd0JBQ0FuOEUsRUFBQVQsS0FBQXM2QixFQUFBdWlELG1CQUNBcDhFLEVBQUFULEtBQUFzNkIsRUFBQXdpRCxnQkFDQXI4RSxFQUFBVCxLQUFBczZCLEVBQUErVSxTQUNBNXVDLEVBQUFULEtBQUFzNkIsRUFBQStnRCxTQUNBNTZFLEVBQUFULEtBQUFzNkIsRUFBQTJWLGlCQUNBeHZDLEVBQUFULEtBQUFzNkIsRUFBQXl4QyxtQkFDQXRyRSxFQUFBVCxLQUFBczZCLEVBQUF5ckQscUJBQ0F0bEYsRUFBQVQsS0FBQXM2QixFQUFBZzlDLGNBQ0E3MkUsRUFBQVQsS0FBQXM2QixFQUFBbTlDLGdCQUNBaDNFLEVBQUFULEtBQUFzNkIsRUFBQWk5QyxlQUNBOTJFLEVBQUFULEtBQUFzNkIsRUFBQTY4QyxrQkFDQTEyRSxFQUFBVCxLQUFBczZCLEVBQUFvOUMsZUFDQWozRSxFQUFBVCxLQUFBczZCLEVBQUFrOUMsbUJBQ0EvMkUsRUFBQVQsS0FBQXM2QixFQUFBcTlDLG9CQUNBbDNFLEVBQUFULEtBQUFzNkIsRUFBQXM5QyxzQkFDQW4zRSxFQUFBVCxLQUFBczZCLEVBQUE0OEMscUJBQ0F6MkUsRUFBQVQsS0FBQXM2QixFQUFBODhDLDZCQUNBMzJFLEVBQUFULEtBQUFzNkIsRUFBQW9qRCxnQkFDQWo5RSxFQUFBVCxLQUFBczZCLEVBQUEwK0MsZUFDQXY0RSxFQUFBVCxLQUFBczZCLEVBQUFnL0IsYUFDQTc0RCxFQUFBVCxLQUFBczZCLEVBQUF3OUMsbUJBQ0FyM0UsRUFBQVQsS0FBQXM2QixFQUFBeTlDLHFCQUNBdDNFLEVBQUFULEtBQUFzNkIsRUFBQXdqRCxhQUVBLENBL0RBa0ksQ0FBQXZsRixFQUFBNjVCLEdBaUVBLFNBQUE3NUIsRUFBQTY1QixHQUVBaW5ELEVBQUF4dkQsYUFFQXVJLEVBQUFnckQsd0JBQ0EvRCxFQUFBNXZELE9BQUEsR0FDQTJJLEVBQUEyZ0QsWUFDQXNHLEVBQUE1dkQsT0FBQSxHQUNBMkksRUFBQTRnRCxpQkFDQXFHLEVBQUE1dkQsT0FBQSxHQUNBMkksRUFBQTZnRCxpQkFDQW9HLEVBQUE1dkQsT0FBQSxHQUNBMkksRUFBQTBULFFBQ0F1ekMsRUFBQTV2RCxPQUFBLEdBQ0EySSxFQUFBOFUsUUFDQW15QyxFQUFBNXZELE9BQUEsR0FDQTJJLEVBQUFnaEQsc0JBQ0FpRyxFQUFBNXZELE9BQUEsR0FDQTJJLEVBQUFpaEQsdUJBQ0FnRyxFQUFBNXZELE9BQUEsR0FDQTJJLEVBQUE0UyxXQUNBcTBDLEVBQUE1dkQsT0FBQSxHQUNBMkksRUFBQW1ULGFBQ0E4ekMsRUFBQTV2RCxPQUFBLEdBQ0EySSxFQUFBMlIsV0FDQXMxQyxFQUFBNXZELE9BQUEsSUFDQTJJLEVBQUFxUCxjQUNBNDNDLEVBQUE1dkQsT0FBQSxJQUNBMkksRUFBQTBpRCxjQUNBdUUsRUFBQTV2RCxPQUFBLElBQ0EySSxFQUFBMmlELFlBQ0FzRSxFQUFBNXZELE9BQUEsSUFDQTJJLEVBQUE0aUQsWUFDQXFFLEVBQUE1dkQsT0FBQSxJQUNBMkksRUFBQTZpRCxZQUNBb0UsRUFBQTV2RCxPQUFBLElBQ0EySSxFQUFBeWlELGdCQUNBd0UsRUFBQTV2RCxPQUFBLElBQ0EySSxFQUFBL2tCLFlBQ0Fnc0UsRUFBQTV2RCxPQUFBLElBQ0EySSxFQUFBd1AsV0FDQXkzQyxFQUFBNXZELE9BQUEsSUFDQTJJLEVBQUF5Z0QsVUFDQXdHLEVBQUE1dkQsT0FBQSxJQUNBMkksRUFBQWtULFlBQ0ErekMsRUFBQTV2RCxPQUFBLElBQ0EySSxFQUFBMGdELGVBQ0F1RyxFQUFBNXZELE9BQUEsSUFFQWx4QixFQUFBVCxLQUFBdWhGLEVBQUE3dkQsTUFDQTZ2RCxFQUFBeHZELGFBRUF1SSxFQUFBb1csS0FDQTZ3QyxFQUFBNXZELE9BQUEsR0FDQTJJLEVBQUE4Z0QsUUFDQW1HLEVBQUE1dkQsT0FBQSxHQUNBMkksRUFBQW1XLGFBQ0E4d0MsRUFBQTV2RCxPQUFBLEdBQ0EySSxFQUFBMGtDLHdCQUNBdWlCLEVBQUE1dkQsT0FBQSxHQUNBMkksRUFBQStpRCxVQUNBa0UsRUFBQTV2RCxPQUFBLEdBQ0EySSxFQUFBOHhDLGNBQ0FtVixFQUFBNXZELE9BQUEsR0FDQTJJLEVBQUEreEMsY0FDQWtWLEVBQUE1dkQsT0FBQSxHQUNBMkksRUFBQWd5QyxhQUNBaVYsRUFBQTV2RCxPQUFBLEdBQ0EySSxFQUFBdVIsb0JBQ0EwMUMsRUFBQTV2RCxPQUFBLEdBQ0EySSxFQUFBbWpELGtCQUNBOEQsRUFBQTV2RCxPQUFBLEdBQ0EySSxFQUFBaWpELGFBQ0FnRSxFQUFBNXZELE9BQUEsSUFDQTJJLEVBQUFrakQsV0FDQStELEVBQUE1dkQsT0FBQSxJQUNBMkksRUFBQXVqRCxpQkFDQTBELEVBQUE1dkQsT0FBQSxJQUNBMkksRUFBQXFSLFdBQ0E0MUMsRUFBQTV2RCxPQUFBLElBQ0EySSxFQUFBcVYsY0FDQTR4QyxFQUFBNXZELE9BQUEsSUFDQTJJLEVBQUFtUyxPQUNBODBDLEVBQUE1dkQsT0FBQSxJQUNBMkksRUFBQXNqRCxRQUNBMkQsRUFBQTV2RCxPQUFBLElBQ0EySSxFQUFBOGlELFdBQ0FtRSxFQUFBNXZELE9BQUEsSUFDQTJJLEVBQUFxakQsb0JBQ0E0RCxFQUFBNXZELE9BQUEsSUFDQTJJLEVBQUFzUixpQkFDQTIxQyxFQUFBNXZELE9BQUEsSUFFQWx4QixFQUFBVCxLQUFBdWhGLEVBQUE3dkQsS0FFQSxDQS9KQXUwRCxDQUFBeGxGLEVBQUE2NUIsR0FDQTc1QixFQUFBVCxLQUFBODhDLEVBQUFHLG1CQUlBeDhDLEVBQUFULEtBQUFzNkIsRUFBQTZSLHVCQUVBMXJDLEVBQUEyMUUsTUFFQSxFQTBPQXRKLFlBbEZBLFNBQUFseUMsR0FFQSxNQUFBa29ELEVBQUFuQixFQUFBL21ELEVBQUFuN0IsTUFDQSxJQUFBazlDLEVBRUEsR0FBQW1tQyxFQUFBLENBRUEsTUFBQTlnQyxFQUFBNFMsR0FBQWt1QixHQUNBbm1DLEVBQUFRLEdBQUE5MUMsTUFBQTI2QyxFQUFBckYsU0FFQSxNQUVBQSxFQUFBL2hCLEVBQUEraEIsU0FJQSxPQUFBQSxDQUVBLEVBaUVBdXBDLGVBL0RBLFNBQUE1ckQsRUFBQXcrQyxHQUVBLElBQUF0ZSxFQUdBLElBQUEsSUFBQTNwQyxFQUFBLEVBQUFzMUQsRUFBQWpiLEVBQUFycUUsT0FBQWd3QixFQUFBczFELEVBQUF0MUQsSUFBQSxDQUVBLE1BQUF1MUQsRUFBQWxiLEVBQUFyNkMsR0FFQSxHQUFBdTFELEVBQUF0TixXQUFBQSxFQUFBLENBRUF0ZSxFQUFBNHJCLElBQ0E1ckIsRUFBQThsQixVQUVBLEtBRUEsQ0FFQSxDQVNBLFlBUEEzZ0YsSUFBQTY2RCxJQUVBQSxFQUFBLElBQUFxZSxHQUFBLzdCLEVBQUFnOEIsRUFBQXgrQyxFQUFBcS9CLEdBQ0F1UixFQUFBbHJFLEtBQUF3NkQsSUFJQUEsQ0FFQSxFQW1DQTZyQixlQWpDQSxTQUFBN3JCLEdBRUEsR0FBQSxLQUFBQSxFQUFBOGxCLFVBQUEsQ0FHQSxNQUFBMy9FLEVBQUF1cUUsRUFBQW5yRSxRQUFBeTZELEdBQ0EwUSxFQUFBdnFFLEdBQUF1cUUsRUFBQUEsRUFBQXJxRSxPQUFBLEdBQ0FxcUUsRUFBQW9iLE1BR0E5ckIsRUFBQTRsQixTQUVBLENBRUEsRUFvQkFtRyxtQkFsQkEsU0FBQTNyRCxHQUVBNG1ELEVBQUExckQsT0FBQThFLEVBRUEsRUFnQkFzd0MsU0FBQUEsRUFDQWgwRCxRQWZBLFdBRUFzcUUsRUFBQXRxRSxTQUVBLEVBY0EsQ0M5b0JBLFNBQUFzdkUsS0FFQSxJQUFBMXpCLEVBQUEsSUFBQTNNLFFBbUNBLE1BQUEsQ0FDQUMsSUFsQ0EsU0FBQXBpQyxHQUVBLElBQUF5VSxFQUFBcTZCLEVBQUExTSxJQUFBcGlDLEdBU0EsWUFQQXJrQixJQUFBODRCLElBRUFBLEVBQUEsQ0FBQSxFQUNBcTZCLEVBQUF2c0QsSUFBQXlkLEVBQUF5VSxJQUlBQSxDQUVBLEVBc0JBM0MsT0FwQkEsU0FBQTlSLEdBRUE4dUMsRUFBQXhNLE9BQUF0aUMsRUFFQSxFQWlCQTNHLE9BZkEsU0FBQTJHLEVBQUFrWCxFQUFBcjVCLEdBRUFpeEQsRUFBQTFNLElBQUFwaUMsR0FBQWtYLEdBQUFyNUIsQ0FFQSxFQVlBcVYsUUFWQSxXQUVBNDdDLEVBQUEsSUFBQTNNLE9BRUEsRUFTQSxDQzVDQSxTQUFBc2dDLEdBQUFoaEYsRUFBQUMsR0FFQSxPQUFBRCxFQUFBaWhGLGFBQUFoaEYsRUFBQWdoRixXQUVBamhGLEVBQUFpaEYsV0FBQWhoRixFQUFBZ2hGLFdBRUFqaEYsRUFBQTB1QixjQUFBenVCLEVBQUF5dUIsWUFFQTF1QixFQUFBMHVCLFlBQUF6dUIsRUFBQXl1QixZQUVBMXVCLEVBQUFtMUIsU0FBQTNFLEtBQUF2d0IsRUFBQWsxQixTQUFBM0UsR0FFQXh3QixFQUFBbTFCLFNBQUEzRSxHQUFBdndCLEVBQUFrMUIsU0FBQTNFLEdBRUF4d0IsRUFBQThSLElBQUE3UixFQUFBNlIsRUFFQTlSLEVBQUE4UixFQUFBN1IsRUFBQTZSLEVBSUE5UixFQUFBd3dCLEdBQUF2d0IsRUFBQXV3QixFQUlBLENBRUEsU0FBQTB3RCxHQUFBbGhGLEVBQUFDLEdBRUEsT0FBQUQsRUFBQWloRixhQUFBaGhGLEVBQUFnaEYsV0FFQWpoRixFQUFBaWhGLFdBQUFoaEYsRUFBQWdoRixXQUVBamhGLEVBQUEwdUIsY0FBQXp1QixFQUFBeXVCLFlBRUExdUIsRUFBQTB1QixZQUFBenVCLEVBQUF5dUIsWUFFQTF1QixFQUFBOFIsSUFBQTdSLEVBQUE2UixFQUVBN1IsRUFBQTZSLEVBQUE5UixFQUFBOFIsRUFJQTlSLEVBQUF3d0IsR0FBQXZ3QixFQUFBdXdCLEVBSUEsQ0FHQSxTQUFBMndELEtBRUEsTUFBQUMsRUFBQSxHQUNBLElBQUFDLEVBQUEsRUFFQSxNQUFBbEosRUFBQSxHQUNBbUosRUFBQSxHQUNBbDlDLEVBQUEsR0FZQSxTQUFBbTlDLEVBQUFoakUsRUFBQVksRUFBQWdXLEVBQUE4ckQsRUFBQW52RSxFQUFBdy9CLEdBRUEsSUFBQWt3QyxFQUFBSixFQUFBQyxHQWdDQSxZQTlCQW5uRixJQUFBc25GLEdBRUFBLEVBQUEsQ0FDQWh4RCxHQUFBalMsRUFBQWlTLEdBQ0FqUyxPQUFBQSxFQUNBWSxTQUFBQSxFQUNBZ1csU0FBQUEsRUFDQThyRCxXQUFBQSxFQUNBdnlELFlBQUFuUSxFQUFBbVEsWUFDQTVjLEVBQUFBLEVBQ0F3L0IsTUFBQUEsR0FHQTh2QyxFQUFBQyxHQUFBRyxJQUlBQSxFQUFBaHhELEdBQUFqUyxFQUFBaVMsR0FDQWd4RCxFQUFBampFLE9BQUFBLEVBQ0FpakUsRUFBQXJpRSxTQUFBQSxFQUNBcWlFLEVBQUFyc0QsU0FBQUEsRUFDQXFzRCxFQUFBUCxXQUFBQSxFQUNBTyxFQUFBOXlELFlBQUFuUSxFQUFBbVEsWUFDQTh5RCxFQUFBMXZFLEVBQUFBLEVBQ0EwdkUsRUFBQWx3QyxNQUFBQSxHQUlBK3ZDLElBRUFHLENBRUEsQ0FzRUEsTUFBQSxDQUVBckosT0FBQUEsRUFDQW1KLGFBQUFBLEVBQ0FsOUMsWUFBQUEsRUFFQWc0QixLQTFIQSxXQUVBaWxCLEVBQUEsRUFFQWxKLEVBQUEvOEUsT0FBQSxFQUNBa21GLEVBQUFsbUYsT0FBQSxFQUNBZ3BDLEVBQUFocEMsT0FBQSxDQUVBLEVBbUhBYixLQTNFQSxTQUFBZ2tCLEVBQUFZLEVBQUFnVyxFQUFBOHJELEVBQUFudkUsRUFBQXcvQixHQUVBLE1BQUFrd0MsRUFBQUQsRUFBQWhqRSxFQUFBWSxFQUFBZ1csRUFBQThyRCxFQUFBbnZFLEVBQUF3L0IsR0FFQW5jLEVBQUErVSxhQUFBLEVBRUFvM0MsRUFBQS9tRixLQUFBaW5GLElBRUEsSUFBQXJzRCxFQUFBaVAsWUFFQUEsRUFBQTdwQyxLQUFBaW5GLEdBSUFySixFQUFBNTlFLEtBQUFpbkYsRUFJQSxFQTBEQTF0QixRQXhEQSxTQUFBdjFDLEVBQUFZLEVBQUFnVyxFQUFBOHJELEVBQUFudkUsRUFBQXcvQixHQUVBLE1BQUFrd0MsRUFBQUQsRUFBQWhqRSxFQUFBWSxFQUFBZ1csRUFBQThyRCxFQUFBbnZFLEVBQUF3L0IsR0FFQW5jLEVBQUErVSxhQUFBLEVBRUFvM0MsRUFBQXh0QixRQUFBMHRCLElBRUEsSUFBQXJzRCxFQUFBaVAsWUFFQUEsRUFBQTB2QixRQUFBMHRCLEdBSUFySixFQUFBcmtCLFFBQUEwdEIsRUFJQSxFQXVDQUMsT0E3QkEsV0FJQSxJQUFBLElBQUF2bUYsRUFBQW1tRixFQUFBMXNFLEVBQUF5c0UsRUFBQWhtRixPQUFBRixFQUFBeVosRUFBQXpaLElBQUEsQ0FFQSxNQUFBc21GLEVBQUFKLEVBQUFsbUYsR0FFQSxHQUFBLE9BQUFzbUYsRUFBQWh4RCxHQUFBLE1BRUFneEQsRUFBQWh4RCxHQUFBLEtBQ0FneEQsRUFBQWpqRSxPQUFBLEtBQ0FpakUsRUFBQXJpRSxTQUFBLEtBQ0FxaUUsRUFBQXJzRCxTQUFBLEtBQ0Fxc0QsRUFBQWx3QyxNQUFBLElBRUEsQ0FFQSxFQWFBb3dDLEtBdkNBLFNBQUFDLEVBQUFDLEdBRUF6SixFQUFBLzhFLE9BQUEsR0FBQSs4RSxFQUFBdUosS0FBQUMsR0FBQVgsSUFDQU0sRUFBQWxtRixPQUFBLEdBQUFrbUYsRUFBQUksS0FBQUUsR0FBQVYsSUFDQTk4QyxFQUFBaHBDLE9BQUEsR0FBQWdwQyxFQUFBczlDLEtBQUFFLEdBQUFWLEdBRUEsRUFvQ0EsQ0FFQSxTQUFBVyxLQUVBLElBQUFDLEVBQUEsSUFBQXBoQyxRQXFDQSxNQUFBLENBQ0FDLElBcENBLFNBQUFsRixFQUFBc21DLEdBRUEsTUFBQUMsRUFBQUYsRUFBQW5oQyxJQUFBbEYsR0FDQSxJQUFBd21DLEVBc0JBLFlBcEJBL25GLElBQUE4bkYsR0FFQUMsRUFBQSxJQUFBZCxHQUNBVyxFQUFBaGhGLElBQUEyNkMsRUFBQSxDQUFBd21DLEtBSUFGLEdBQUFDLEVBQUE1bUYsUUFFQTZtRixFQUFBLElBQUFkLEdBQ0FhLEVBQUF6bkYsS0FBQTBuRixJQUlBQSxFQUFBRCxFQUFBRCxHQU1BRSxDQUVBLEVBVUF4d0UsUUFSQSxXQUVBcXdFLEVBQUEsSUFBQXBoQyxPQUVBLEVBT0EsQ0NwT0EsU0FBQXdoQyxLQUVBLE1BQUFocUMsRUFBQSxDQUFBLEVBRUEsTUFBQSxDQUVBeUksSUFBQSxTQUFBd2hDLEdBRUEsUUFBQWpvRixJQUFBZytDLEVBQUFpcUMsRUFBQTN4RCxJQUVBLE9BQUEwbkIsRUFBQWlxQyxFQUFBM3hELElBSUEsSUFBQTBtQixFQUVBLE9BQUFpckMsRUFBQW5vRixNQUVBLElBQUEsbUJBQ0FrOUMsRUFBQSxDQUNBN3pCLFVBQUEsSUFBQS9JLEdBQ0FoUCxNQUFBLElBQUFxMkIsSUFFQSxNQUVBLElBQUEsWUFDQXVWLEVBQUEsQ0FDQW50QixTQUFBLElBQUF6UCxHQUNBK0ksVUFBQSxJQUFBL0ksR0FDQWhQLE1BQUEsSUFBQXEyQixHQUNBalMsU0FBQSxFQUNBcStCLFFBQUEsRUFDQUMsWUFBQSxFQUNBQyxNQUFBLEdBRUEsTUFFQSxJQUFBLGFBQ0EvVyxFQUFBLENBQ0FudEIsU0FBQSxJQUFBelAsR0FDQWhQLE1BQUEsSUFBQXEyQixHQUNBalMsU0FBQSxFQUNBdStCLE1BQUEsR0FFQSxNQUVBLElBQUEsa0JBQ0EvVyxFQUFBLENBQ0E3ekIsVUFBQSxJQUFBL0ksR0FDQXUwQyxTQUFBLElBQUFsdEIsR0FDQW10QixZQUFBLElBQUFudEIsSUFFQSxNQUVBLElBQUEsZ0JBQ0F1VixFQUFBLENBQ0E1ckMsTUFBQSxJQUFBcTJCLEdBQ0E1WCxTQUFBLElBQUF6UCxHQUNBOG5FLFVBQUEsSUFBQTluRSxHQUNBK25FLFdBQUEsSUFBQS9uRSxJQVFBLE9BRkE0OUIsRUFBQWlxQyxFQUFBM3hELElBQUEwbUIsRUFFQUEsQ0FFQSxFQUlBLENBb0VBLElBQUFvckMsR0FBQSxFQUVBLFNBQUFDLEdBQUFDLEVBQUFDLEdBRUEsT0FBQUEsRUFBQWwwRCxXQUFBLEVBQUEsSUFBQWkwRCxFQUFBajBELFdBQUEsRUFBQSxJQUFBazBELEVBQUF6dkQsSUFBQSxFQUFBLElBQUF3dkQsRUFBQXh2RCxJQUFBLEVBQUEsRUFFQSxDQUVBLFNBQUEwdkQsR0FBQXRxQyxHQUVBLE1BQUE3aUIsRUFBQSxJQUFBMnNELEdBRUFTLEVBOUVBLFdBRUEsTUFBQXpxQyxFQUFBLENBQUEsRUFFQSxNQUFBLENBRUF5SSxJQUFBLFNBQUF3aEMsR0FFQSxRQUFBam9GLElBQUFnK0MsRUFBQWlxQyxFQUFBM3hELElBRUEsT0FBQTBuQixFQUFBaXFDLEVBQUEzeEQsSUFJQSxJQUFBMG1CLEVBRUEsT0FBQWlyQyxFQUFBbm9GLE1BRUEsSUFBQSxtQkFVQSxJQUFBLFlBQ0FrOUMsRUFBQSxDQUNBcVcsZ0JBQUEsRUFDQUMsV0FBQSxFQUNBQyxpQkFBQSxFQUNBQyxhQUFBLEVBQ0FDLGNBQUEsSUFBQTFzRCxJQUVBLE1BRUEsSUFBQSxhQUNBaTJDLEVBQUEsQ0FDQXFXLGdCQUFBLEVBQ0FDLFdBQUEsRUFDQUMsaUJBQUEsRUFDQUMsYUFBQSxFQUNBQyxjQUFBLElBQUExc0QsR0FDQXV0RCxpQkFBQSxFQUNBQyxnQkFBQSxLQVVBLE9BRkF2VyxFQUFBaXFDLEVBQUEzeEQsSUFBQTBtQixFQUVBQSxDQUVBLEVBSUEsQ0FnQkEwckMsR0FFQXp3QixFQUFBLENBRUE1akQsUUFBQSxFQUVBczBFLEtBQUEsQ0FDQUMsbUJBQUEsRUFDQUMsYUFBQSxFQUNBQyxZQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLFlBQUEsRUFFQUMsdUJBQUEsRUFDQUMsaUJBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsYUFBQSxFQUVBckwsZ0JBQUEsR0FHQXNMLFFBQUEsQ0FBQSxFQUFBLEVBQUEsR0FDQUMsTUFBQSxHQUNBekQsWUFBQSxHQUNBMEQsa0JBQUEsR0FDQTcxQixxQkFBQSxHQUNBQyx3QkFBQSxHQUNBbXlCLEtBQUEsR0FDQTd4QixhQUFBLEdBQ0F1MUIsV0FBQSxHQUNBdDFCLGNBQUEsR0FDQUMsZ0JBQUEsR0FDQTR4QixTQUFBLEdBQ0EwRCxhQUFBLEtBQ0FDLGFBQUEsS0FDQTlrRSxNQUFBLEdBQ0Era0UsWUFBQSxHQUNBbjFCLGVBQUEsR0FDQUMsa0JBQUEsR0FDQXV4QixLQUFBLEdBQ0F2Tyw0QkFBQSxFQUNBc0csZUFBQSxHQUlBLElBQUEsSUFBQS84RSxFQUFBLEVBQUFBLEVBQUEsRUFBQUEsSUFBQWkzRCxFQUFBcXhCLE1BQUFqcEYsS0FBQSxJQUFBK2YsSUFFQSxNQUFBd3BFLEVBQUEsSUFBQXhwRSxHQUNBelIsRUFBQSxJQUFBcWQsR0FDQTY5RCxFQUFBLElBQUE3OUQsR0E2VkEsTUFBQSxDQUNBMnZDLE1BNVZBLFNBQUEzZCxHQUVBLElBQUFudkMsRUFBQSxFQUFBYixFQUFBLEVBQUFqSSxFQUFBLEVBRUEsSUFBQSxJQUFBL0UsRUFBQSxFQUFBQSxFQUFBLEVBQUFBLElBQUFpM0QsRUFBQXF4QixNQUFBdG9GLEdBQUE0RixJQUFBLEVBQUEsRUFBQSxHQUVBLElBQUFnaUYsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBRUFDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQVUsRUFBQSxFQUVBL0wsRUFBQSxFQUdBLy9CLEVBQUF3cEMsS0FBQWEsSUFFQSxJQUFBLElBQUFybkYsRUFBQSxFQUFBQyxFQUFBKzhDLEVBQUE5OEMsT0FBQUYsRUFBQUMsRUFBQUQsSUFBQSxDQUVBLE1BQUFpbkYsRUFBQWpxQyxFQUFBaDlDLEdBRUFvUSxFQUFBNjJFLEVBQUE3MkUsTUFDQTI0RSxFQUFBOUIsRUFBQThCLFVBQ0F2MEQsRUFBQXl5RCxFQUFBenlELFNBRUF5d0QsRUFBQWdDLEVBQUEzeEIsUUFBQTJ4QixFQUFBM3hCLE9BQUF4OUIsSUFBQW12RCxFQUFBM3hCLE9BQUF4OUIsSUFBQXZlLFFBQUEsS0FFQSxHQUFBMHRFLEVBQUErQixlQUVBbjdFLEdBQUF1QyxFQUFBdkMsRUFBQWs3RSxFQUNBLzdFLEdBQUFvRCxFQUFBcEQsRUFBQSs3RSxFQUNBaGtGLEdBQUFxTCxFQUFBckwsRUFBQWdrRixPQUVBLEdBQUE5QixFQUFBZ0MsYUFBQSxDQUVBLElBQUEsSUFBQXZpRSxFQUFBLEVBQUFBLEVBQUEsRUFBQUEsSUFFQXV3QyxFQUFBcXhCLE1BQUE1aEUsR0FBQTFmLGdCQUFBaWdGLEVBQUFpQyxHQUFBQyxhQUFBemlFLEdBQUFxaUUsR0FJQWhNLEdBRUEsTUFBQSxHQUFBa0ssRUFBQW1DLG1CQUFBLENBRUEsTUFBQXB0QyxFQUFBM2hCLEVBQUFvckIsSUFBQXdoQyxHQUlBLEdBRkFqckMsRUFBQTVyQyxNQUFBekosS0FBQXNnRixFQUFBNzJFLE9BQUEvSSxlQUFBNC9FLEVBQUE4QixXQUVBOUIsRUFBQTV6RCxXQUFBLENBRUEsTUFBQWlpQyxFQUFBMnhCLEVBQUEzeEIsT0FFQSt6QixFQUFBNUIsRUFBQWhpQyxJQUFBd2hDLEdBRUFvQyxFQUFBaDNCLGdCQUFBaUQsRUFBQXl6QixVQUNBTSxFQUFBLzJCLFdBQUFnRCxFQUFBZzBCLEtBQ0FELEVBQUE5MkIsaUJBQUErQyxFQUFBaTBCLFdBQ0FGLEVBQUE3MkIsYUFBQThDLEVBQUExekMsT0FDQXluRSxFQUFBNTJCLGNBQUE2QyxFQUFBazBCLFFBRUF2eUIsRUFBQXN4QixrQkFBQVgsR0FBQXlCLEVBQ0FweUIsRUFBQXZFLHFCQUFBazFCLEdBQUEzQyxFQUNBaHVCLEVBQUF0RSx3QkFBQWkxQixHQUFBWCxFQUFBM3hCLE9BQUF6bUQsT0FFQW81RSxHQUVBLENBRUFoeEIsRUFBQTR0QixZQUFBK0MsR0FBQTVyQyxFQUVBNHJDLEdBRUEsTUFBQSxHQUFBWCxFQUFBd0MsWUFBQSxDQUVBLE1BQUF6dEMsRUFBQTNoQixFQUFBb3JCLElBQUF3aEMsR0FFQWpyQyxFQUFBbnRCLFNBQUF4VyxzQkFBQTR1RSxFQUFBdm1FLGFBRUFzN0IsRUFBQTVyQyxNQUFBekosS0FBQXlKLEdBQUEvSSxlQUFBMGhGLEdBQ0Evc0MsRUFBQXhuQixTQUFBQSxFQUVBd25CLEVBQUE2VyxRQUFBdHlELEtBQUEyRSxJQUFBK2hGLEVBQUExK0UsT0FDQXl6QyxFQUFBOFcsWUFBQXZ5RCxLQUFBMkUsSUFBQStoRixFQUFBMStFLE9BQUEsRUFBQTArRSxFQUFBeUMsV0FDQTF0QyxFQUFBK1csTUFBQWswQixFQUFBbDBCLE1BRUFrRSxFQUFBNnRCLEtBQUFnRCxHQUFBOXJDLEVBRUEsTUFBQXNaLEVBQUEyeEIsRUFBQTN4QixPQWlCQSxHQWZBMnhCLEVBQUFudkQsTUFFQW0vQixFQUFBaEUsYUFBQW0xQixHQUFBbkIsRUFBQW52RCxJQUNBc3dELElBSUE5eUIsRUFBQXEwQixlQUFBMUMsR0FFQUEsRUFBQTV6RCxZQUFBeTFELEtBSUE3eEIsRUFBQTlELGdCQUFBMjBCLEdBQUF4eUIsRUFBQXptRCxPQUVBbzRFLEVBQUE1ekQsV0FBQSxDQUVBLE1BQUFnMkQsRUFBQTVCLEVBQUFoaUMsSUFBQXdoQyxHQUVBb0MsRUFBQWgzQixnQkFBQWlELEVBQUF5ekIsVUFDQU0sRUFBQS8yQixXQUFBZ0QsRUFBQWcwQixLQUNBRCxFQUFBOTJCLGlCQUFBK0MsRUFBQWkwQixXQUNBRixFQUFBNzJCLGFBQUE4QyxFQUFBMXpDLE9BQ0F5bkUsRUFBQTUyQixjQUFBNkMsRUFBQWswQixRQUVBdnlCLEVBQUF1eEIsV0FBQVYsR0FBQXVCLEVBQ0FweUIsRUFBQS9ELGNBQUE0MEIsR0FBQTdDLEVBRUFrRCxHQUVBLENBRUFMLEdBRUEsTUFBQSxHQUFBYixFQUFBMkMsZ0JBQUEsQ0FFQSxNQUFBNXRDLEVBQUEzaEIsRUFBQW9yQixJQUFBd2hDLEdBRUFqckMsRUFBQTVyQyxNQUFBekosS0FBQXlKLEdBQUEvSSxlQUFBMGhGLEdBRUEvc0MsRUFBQWtyQyxVQUFBdGhGLElBQUEsR0FBQXFoRixFQUFBL2dGLE1BQUEsRUFBQSxHQUNBODFDLEVBQUFtckMsV0FBQXZoRixJQUFBLEVBQUEsR0FBQXFoRixFQUFBOWdGLE9BQUEsR0FFQTh3RCxFQUFBOHRCLFNBQUFnRCxHQUFBL3JDLEVBRUErckMsR0FFQSxNQUFBLEdBQUFkLEVBQUE0QyxhQUFBLENBRUEsTUFBQTd0QyxFQUFBM2hCLEVBQUFvckIsSUFBQXdoQyxHQU1BLEdBSkFqckMsRUFBQTVyQyxNQUFBekosS0FBQXNnRixFQUFBNzJFLE9BQUEvSSxlQUFBNC9FLEVBQUE4QixXQUNBL3NDLEVBQUF4bkIsU0FBQXl5RCxFQUFBenlELFNBQ0F3bkIsRUFBQStXLE1BQUFrMEIsRUFBQWwwQixNQUVBazBCLEVBQUE1ekQsV0FBQSxDQUVBLE1BQUFpaUMsRUFBQTJ4QixFQUFBM3hCLE9BRUErekIsRUFBQTVCLEVBQUFoaUMsSUFBQXdoQyxHQUVBb0MsRUFBQWgzQixnQkFBQWlELEVBQUF5ekIsVUFDQU0sRUFBQS8yQixXQUFBZ0QsRUFBQWcwQixLQUNBRCxFQUFBOTJCLGlCQUFBK0MsRUFBQWkwQixXQUNBRixFQUFBNzJCLGFBQUE4QyxFQUFBMXpDLE9BQ0F5bkUsRUFBQTUyQixjQUFBNkMsRUFBQWswQixRQUNBSCxFQUFBLzFCLGlCQUFBZ0MsRUFBQWoxQyxPQUFBeVAsS0FDQXU1RCxFQUFBOTFCLGdCQUFBK0IsRUFBQWoxQyxPQUFBMFAsSUFFQWtuQyxFQUFBMHhCLFlBQUFkLEdBQUF3QixFQUNBcHlCLEVBQUF6RCxlQUFBcTBCLEdBQUE1QyxFQUNBaHVCLEVBQUF4RCxrQkFBQW8wQixHQUFBWixFQUFBM3hCLE9BQUF6bUQsT0FFQXE1RSxHQUVBLENBRUFqeEIsRUFBQXJ6QyxNQUFBaWtFLEdBQUE3ckMsRUFFQTZyQyxHQUVBLE1BQUEsR0FBQVosRUFBQTZDLGtCQUFBLENBRUEsTUFBQTl0QyxFQUFBM2hCLEVBQUFvckIsSUFBQXdoQyxHQUVBanJDLEVBQUEyWCxTQUFBaHRELEtBQUFzZ0YsRUFBQTcyRSxPQUFBL0ksZUFBQTBoRixHQUNBL3NDLEVBQUE0WCxZQUFBanRELEtBQUFzZ0YsRUFBQXJ6QixhQUFBdnNELGVBQUEwaEYsR0FFQTl4QixFQUFBK3RCLEtBQUFnRCxHQUFBaHNDLEVBRUFnc0MsR0FFQSxDQUVBLENBRUFELEVBQUEsS0FFQSxJQUFBN3FDLEVBQUFuc0MsSUFBQSw2QkFFQWttRCxFQUFBd3hCLGFBQUF2NEIsR0FBQTY1QixZQUNBOXlCLEVBQUF5eEIsYUFBQXg0QixHQUFBODVCLGNBSUEveUIsRUFBQXd4QixhQUFBdjRCLEdBQUErNUIsV0FDQWh6QixFQUFBeXhCLGFBQUF4NEIsR0FBQWc2QixhQU1BanpCLEVBQUFveEIsUUFBQSxHQUFBeDZFLEVBQ0FvcEQsRUFBQW94QixRQUFBLEdBQUFyN0UsRUFDQWlxRCxFQUFBb3hCLFFBQUEsR0FBQXRqRixFQUVBLE1BQUE0aUYsRUFBQTF3QixFQUFBMHdCLEtBRUFBLEVBQUFDLG9CQUFBQSxHQUNBRCxFQUFBRSxjQUFBQSxHQUNBRixFQUFBRyxhQUFBQSxHQUNBSCxFQUFBSSxpQkFBQUEsR0FDQUosRUFBQUssYUFBQUEsR0FDQUwsRUFBQU0sd0JBQUFBLEdBQ0FOLEVBQUFPLGtCQUFBQSxHQUNBUCxFQUFBUSxpQkFBQUEsR0FDQVIsRUFBQVMsY0FBQUEsR0FDQVQsRUFBQTVLLGlCQUFBQSxJQUVBOWxCLEVBQUE0dEIsWUFBQTNrRixPQUFBMG5GLEVBQ0Ezd0IsRUFBQTZ0QixLQUFBNWtGLE9BQUE0bkYsRUFDQTd3QixFQUFBOHRCLFNBQUE3a0YsT0FBQTZuRixFQUNBOXdCLEVBQUFyekMsTUFBQTFqQixPQUFBMm5GLEVBQ0E1d0IsRUFBQSt0QixLQUFBOWtGLE9BQUE4bkYsRUFFQS93QixFQUFBc3hCLGtCQUFBcm9GLE9BQUErbkYsRUFDQWh4QixFQUFBdkUscUJBQUF4eUQsT0FBQStuRixFQUNBaHhCLEVBQUEweEIsWUFBQXpvRixPQUFBZ29GLEVBQ0FqeEIsRUFBQXpELGVBQUF0ekQsT0FBQWdvRixFQUNBanhCLEVBQUF1eEIsV0FBQXRvRixPQUFBaW9GLEVBQ0FseEIsRUFBQS9ELGNBQUFoekQsT0FBQWlvRixFQUNBbHhCLEVBQUF0RSx3QkFBQXp5RCxPQUFBK25GLEVBQ0FoeEIsRUFBQXhELGtCQUFBdnpELE9BQUFnb0YsRUFDQWp4QixFQUFBOUQsZ0JBQUFqekQsT0FBQWlvRixFQUFBQyxFQUFBVSxFQUNBN3hCLEVBQUFoRSxhQUFBL3lELE9BQUFrb0YsRUFDQW54QixFQUFBd2YsNEJBQUFxUyxFQUNBN3hCLEVBQUE4bEIsZUFBQUEsRUFFQTRLLEVBQUFDLGtCQUFBQSxFQUNBRCxFQUFBRSxZQUFBQSxFQUNBRixFQUFBRyxXQUFBQSxFQUNBSCxFQUFBSSxlQUFBQSxFQUNBSixFQUFBSyxXQUFBQSxFQUVBTCxFQUFBTSxzQkFBQUEsRUFDQU4sRUFBQU8sZ0JBQUFBLEVBQ0FQLEVBQUFRLGVBQUFBLEVBQ0FSLEVBQUFTLFlBQUFBLEVBRUFULEVBQUE1SyxlQUFBQSxFQUVBOWxCLEVBQUE1akQsUUFBQSt6RSxLQUlBLEVBd0ZBK0MsVUF0RkEsU0FBQW50QyxFQUFBMzhCLEdBRUEsSUFBQXVuRSxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFFQSxNQUFBbG5CLEVBQUF6Z0QsRUFBQUMsbUJBRUEsSUFBQSxJQUFBdGdCLEVBQUEsRUFBQUMsRUFBQSs4QyxFQUFBOThDLE9BQUFGLEVBQUFDLEVBQUFELElBQUEsQ0FFQSxNQUFBaW5GLEVBQUFqcUMsRUFBQWg5QyxHQUVBLEdBQUFpbkYsRUFBQW1DLG1CQUFBLENBRUEsTUFBQXB0QyxFQUFBaWIsRUFBQTR0QixZQUFBK0MsR0FFQTVyQyxFQUFBN3pCLFVBQUE5UCxzQkFBQTR1RSxFQUFBdm1FLGFBQ0Frb0UsRUFBQXZ3RSxzQkFBQTR1RSxFQUFBcG5GLE9BQUE2Z0IsYUFDQXM3QixFQUFBN3pCLFVBQUFsaEIsSUFBQTJoRixHQUNBNXNDLEVBQUE3ekIsVUFBQXhILG1CQUFBbWdELEdBRUE4bUIsR0FFQSxNQUFBLEdBQUFYLEVBQUF3QyxZQUFBLENBRUEsTUFBQXp0QyxFQUFBaWIsRUFBQTZ0QixLQUFBZ0QsR0FFQTlyQyxFQUFBbnRCLFNBQUF4VyxzQkFBQTR1RSxFQUFBdm1FLGFBQ0FzN0IsRUFBQW50QixTQUFBNVgsYUFBQTZwRCxHQUVBOWtCLEVBQUE3ekIsVUFBQTlQLHNCQUFBNHVFLEVBQUF2bUUsYUFDQWtvRSxFQUFBdndFLHNCQUFBNHVFLEVBQUFwbkYsT0FBQTZnQixhQUNBczdCLEVBQUE3ekIsVUFBQWxoQixJQUFBMmhGLEdBQ0E1c0MsRUFBQTd6QixVQUFBeEgsbUJBQUFtZ0QsR0FFQWduQixHQUVBLE1BQUEsR0FBQWIsRUFBQTJDLGdCQUFBLENBRUEsTUFBQTV0QyxFQUFBaWIsRUFBQTh0QixTQUFBZ0QsR0FFQS9yQyxFQUFBbnRCLFNBQUF4VyxzQkFBQTR1RSxFQUFBdm1FLGFBQ0FzN0IsRUFBQW50QixTQUFBNVgsYUFBQTZwRCxHQUdBK25CLEVBQUE5OUUsV0FDQTRDLEVBQUFoSCxLQUFBc2dGLEVBQUF2bUUsYUFDQS9TLEVBQUFuQyxZQUFBczFELEdBQ0ErbkIsRUFBQWo5RCxnQkFBQWplLEdBRUFxdUMsRUFBQWtyQyxVQUFBdGhGLElBQUEsR0FBQXFoRixFQUFBL2dGLE1BQUEsRUFBQSxHQUNBODFDLEVBQUFtckMsV0FBQXZoRixJQUFBLEVBQUEsR0FBQXFoRixFQUFBOWdGLE9BQUEsR0FFQTYxQyxFQUFBa3JDLFVBQUFqd0UsYUFBQTR4RSxHQUNBN3NDLEVBQUFtckMsV0FBQWx3RSxhQUFBNHhFLEdBRUFkLEdBRUEsTUFBQSxHQUFBZCxFQUFBNEMsYUFBQSxDQUVBLE1BQUE3dEMsRUFBQWliLEVBQUFyekMsTUFBQWlrRSxHQUVBN3JDLEVBQUFudEIsU0FBQXhXLHNCQUFBNHVFLEVBQUF2bUUsYUFDQXM3QixFQUFBbnRCLFNBQUE1WCxhQUFBNnBELEdBRUErbUIsR0FFQSxNQUFBLEdBQUFaLEVBQUE2QyxrQkFBQSxDQUVBLE1BQUE5dEMsRUFBQWliLEVBQUErdEIsS0FBQWdELEdBRUFoc0MsRUFBQTd6QixVQUFBOVAsc0JBQUE0dUUsRUFBQXZtRSxhQUNBczdCLEVBQUE3ekIsVUFBQXhILG1CQUFBbWdELEdBRUFrbkIsR0FFQSxDQUVBLENBRUEsRUFLQS93QixNQUFBQSxFQUdBLENDampCQSxTQUFBbXpCLEdBQUFsdEMsR0FFQSxNQUFBRixFQUFBLElBQUF3cUMsR0FBQXRxQyxHQUVBbXRDLEVBQUEsR0FDQUMsRUFBQSxHQW1DQSxNQUFBcnpCLEVBQUEsQ0FDQW96QixZQUFBQSxFQUNBQyxhQUFBQSxFQUVBanFFLE9BQUEsS0FFQTI4QixPQUFBQSxFQUVBdXRDLHlCQUFBLENBQUEsR0FHQSxNQUFBLENBQ0FycEIsS0E3Q0EsU0FBQTdnRCxHQUVBNDJDLEVBQUE1MkMsT0FBQUEsRUFFQWdxRSxFQUFBbnFGLE9BQUEsRUFDQW9xRixFQUFBcHFGLE9BQUEsQ0FFQSxFQXVDQSsyRCxNQUFBQSxFQUNBdXpCLFlBMUJBLFdBRUF4dEMsRUFBQTJkLE1BQUEwdkIsRUFFQSxFQXVCQUksZ0JBckJBLFNBQUFwcUUsR0FFQTI4QixFQUFBbXRDLFVBQUFFLEVBQUFocUUsRUFFQSxFQW1CQXFxRSxVQXpDQSxTQUFBekQsR0FFQW9ELEVBQUFockYsS0FBQTRuRixFQUVBLEVBc0NBMEQsV0FwQ0EsU0FBQUMsR0FFQU4sRUFBQWpyRixLQUFBdXJGLEVBRUEsRUFtQ0EsQ0FFQSxTQUFBQyxHQUFBM3RDLEdBRUEsSUFBQTR0QyxFQUFBLElBQUF0bEMsUUFxQ0EsTUFBQSxDQUNBQyxJQXBDQSxTQUFBbEYsRUFBQXNtQyxFQUFBLEdBRUEsTUFBQWtFLEVBQUFELEVBQUFybEMsSUFBQWxGLEdBQ0EsSUFBQXlxQyxFQXNCQSxZQXBCQWhzRixJQUFBK3JGLEdBRUFDLEVBQUEsSUFBQVosR0FBQWx0QyxHQUNBNHRDLEVBQUFsbEYsSUFBQTI2QyxFQUFBLENBQUF5cUMsS0FJQW5FLEdBQUFrRSxFQUFBN3FGLFFBRUE4cUYsRUFBQSxJQUFBWixHQUFBbHRDLEdBQ0E2dEMsRUFBQTFyRixLQUFBMnJGLElBSUFBLEVBQUFELEVBQUFsRSxHQU1BbUUsQ0FFQSxFQVVBejBFLFFBUkEsV0FFQXUwRSxFQUFBLElBQUF0bEMsT0FFQSxFQU9BLENDMUdBLE1BQUF5N0IsV0FBQXI0QyxHQUVBLFdBQUEvbUMsQ0FBQTgzQixHQUVBN2tCLFFBRUE3VixLQUFBZ3NGLHFCQUFBLEVBRUFoc0YsS0FBQUgsS0FBQSxvQkFFQUcsS0FBQWsrRSxhek02SVksS3lNM0labCtFLEtBQUE2NEIsSUFBQSxLQUVBNzRCLEtBQUFxdUMsU0FBQSxLQUVBcnVDLEtBQUErdUMsZ0JBQUEsS0FDQS91QyxLQUFBZ3ZDLGtCQUFBLEVBQ0FodkMsS0FBQWl2QyxpQkFBQSxFQUVBanZDLEtBQUF5d0MsV0FBQSxFQUNBendDLEtBQUEwd0MsbUJBQUEsRUFFQTF3QyxLQUFBd3NDLFVBQUE5UixFQUVBLENBRUEsSUFBQWh6QixDQUFBcU8sR0FpQkEsT0FmQUYsTUFBQW5PLEtBQUFxTyxHQUVBL1YsS0FBQWsrRSxhQUFBbm9FLEVBQUFtb0UsYUFFQWwrRSxLQUFBNjRCLElBQUE5aUIsRUFBQThpQixJQUVBNzRCLEtBQUFxdUMsU0FBQXQ0QixFQUFBczRCLFNBRUFydUMsS0FBQSt1QyxnQkFBQWg1QixFQUFBZzVCLGdCQUNBL3VDLEtBQUFndkMsa0JBQUFqNUIsRUFBQWk1QixrQkFDQWh2QyxLQUFBaXZDLGlCQUFBbDVCLEVBQUFrNUIsaUJBRUFqdkMsS0FBQXl3QyxVQUFBMTZCLEVBQUEwNkIsVUFDQXp3QyxLQUFBMHdDLG1CQUFBMzZCLEVBQUEyNkIsbUJBRUExd0MsSUFFQSxFQy9DQSxNQUFBaWlGLFdBQUF0NEMsR0FFQSxXQUFBL21DLENBQUE4M0IsR0FFQTdrQixRQUVBN1YsS0FBQWlzRix3QkFBQSxFQUVBanNGLEtBQUFILEtBQUEsdUJBRUFHLEtBQUE2NEIsSUFBQSxLQUVBNzRCLEtBQUFxdUMsU0FBQSxLQUVBcnVDLEtBQUErdUMsZ0JBQUEsS0FDQS91QyxLQUFBZ3ZDLGtCQUFBLEVBQ0FodkMsS0FBQWl2QyxpQkFBQSxFQUVBanZDLEtBQUF3c0MsVUFBQTlSLEVBRUEsQ0FFQSxJQUFBaHpCLENBQUFxTyxHQVlBLE9BVkFGLE1BQUFuTyxLQUFBcU8sR0FFQS9WLEtBQUE2NEIsSUFBQTlpQixFQUFBOGlCLElBRUE3NEIsS0FBQXF1QyxTQUFBdDRCLEVBQUFzNEIsU0FFQXJ1QyxLQUFBK3VDLGdCQUFBaDVCLEVBQUFnNUIsZ0JBQ0EvdUMsS0FBQWd2QyxrQkFBQWo1QixFQUFBaTVCLGtCQUNBaHZDLEtBQUFpdkMsaUJBQUFsNUIsRUFBQWs1QixpQkFFQWp2QyxJQUVBLEVDeEJBLFNBQUFrc0YsR0FBQWh2QyxFQUFBK2EsRUFBQThULEdBRUEsSUFBQW9nQixFQUFBLElBQUFyb0MsR0FFQSxNQUFBc29DLEVBQUEsSUFBQXRsRixHQUNBdWxGLEVBQUEsSUFBQXZsRixHQUVBd2xGLEVBQUEsSUFBQTUwRSxHQUVBNjBFLEVBQUEsSUFBQXZLLEdBQUEsQ0FBQTlELGEzTW9JWSxPMk1uSVpzTyxFQUFBLElBQUF2SyxHQUVBd0ssRUFBQSxDQUFBLEVBRUFDLEVBQUEzZ0IsRUFBQTVMLGVBRUExMEIsRUFBQSxDQUFBNTNDLENBQUFBLEdBQUFDLEVBQUFBLENBQUFBLEdBQUFELEVBQUEsRTNNaEJZLEcyTWtCWjg0RixFQUFBLElBQUFsdkMsR0FBQSxDQUNBRSxRQUFBLENBQ0FpdkMsWUFBQSxHQUVBN3ZDLFNBQUEsQ0FDQTh2QyxZQUFBLENBQUE1cUYsTUFBQSxNQUNBNnFGLFdBQUEsQ0FBQTdxRixNQUFBLElBQUE2RSxJQUNBNmIsT0FBQSxDQUFBMWdCLE1BQUEsSUFHQTQ3QyxhQzFDQSwyREQyQ0FDLGVDbkNBLG9tQ0R1Q0FpdkMsRUFBQUosRUFBQWxsRixRQUNBc2xGLEVBQUFwdkMsUUFBQXF2QyxnQkFBQSxFQUVBLE1BQUFDLEVBQUEsSUFBQXA0QyxHQUNBbzRDLEVBQUEzM0MsYUFDQSxXQUNBLElBQUFsRCxHQUNBLElBQUF2dkMsYUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxLQUNBLElBSUEsTUFBQXFxRixFQUFBLElBQUFwekMsR0FBQW16QyxFQUFBTixHQUVBcnhDLEVBQUF0N0MsS0FFQUEsS0FBQTBSLFNBQUEsRUFFQTFSLEtBQUFtdEYsWUFBQSxFQUNBbnRGLEtBQUFxVSxhQUFBLEVBRUFyVSxLQUFBSCxLQUFBbk0sRUFDQSxJQUFBMDVGLEVBQUFwdEYsS0FBQUgsS0FxSUEsU0FBQXd0RixFQUFBaDNCLEVBQUFqMUMsR0FFQSxNQUFBNEQsRUFBQWl6QyxFQUFBeDZDLE9BQUF5dkUsR0FFQVAsRUFBQWh2QyxRQUFBaXZDLGNBQUF2MkIsRUFBQWkzQixjQUVBWCxFQUFBaHZDLFFBQUFpdkMsWUFBQXYyQixFQUFBaTNCLFlBQ0FQLEVBQUFwdkMsUUFBQWl2QyxZQUFBdjJCLEVBQUFpM0IsWUFFQVgsRUFBQXQ0RSxhQUFBLEVBQ0EwNEUsRUFBQTE0RSxhQUFBLEdBSUEsT0FBQWdpRCxFQUFBazNCLFVBRUFsM0IsRUFBQWszQixRQUFBLElBQUE5eUUsR0FBQTJ4RSxFQUFBNXBGLEVBQUE0cEYsRUFBQTNwRixJQU1Ba3FGLEVBQUE1dkMsU0FBQTh2QyxZQUFBNXFGLE1BQUFvMEQsRUFBQXg5QixJQUFBdmUsUUFDQXF5RSxFQUFBNXZDLFNBQUErdkMsV0FBQTdxRixNQUFBbzBELEVBQUFrMEIsUUFDQW9DLEVBQUE1dkMsU0FBQXA2QixPQUFBMWdCLE1BQUFvMEQsRUFBQTF6QyxPQUNBdTZCLEVBQUEyRSxnQkFBQXdVLEVBQUFrM0IsU0FDQXJ3QyxFQUFBaGlDLFFBQ0FnaUMsRUFBQXN3QyxtQkFBQXBzRSxFQUFBLEtBQUE0RCxFQUFBMm5FLEVBQUFPLEVBQUEsTUFJQUgsRUFBQWh3QyxTQUFBOHZDLFlBQUE1cUYsTUFBQW8wRCxFQUFBazNCLFFBQUFqekUsUUFDQXl5RSxFQUFBaHdDLFNBQUErdkMsV0FBQTdxRixNQUFBbzBELEVBQUFrMEIsUUFDQXdDLEVBQUFod0MsU0FBQXA2QixPQUFBMWdCLE1BQUFvMEQsRUFBQTF6QyxPQUNBdTZCLEVBQUEyRSxnQkFBQXdVLEVBQUF4OUIsS0FDQXFrQixFQUFBaGlDLFFBQ0FnaUMsRUFBQXN3QyxtQkFBQXBzRSxFQUFBLEtBQUE0RCxFQUFBK25FLEVBQUFHLEVBQUEsS0FFQSxDQUVBLFNBQUFPLEVBQUFycEUsRUFBQTRXLEVBQUFndEQsRUFBQW5vRixHQUVBLElBQUE0MkIsRUFBQSxLQUVBLE1BQUFpM0QsR0FBQSxJQUFBMUYsRUFBQTRDLGFBQUF4bUUsRUFBQXVwRSx1QkFBQXZwRSxFQUFBd3BFLG9CQUVBLFFBQUE3dEYsSUFBQTJ0RixFQUVBajNELEVBQUFpM0QsT0FNQSxHQUZBajNELEdBQUEsSUFBQXV4RCxFQUFBNEMsYUFBQTRCLEVBQUFELEVBRUFydkMsRUFBQWtrQix1QkFBQSxJQUFBcG1DLEVBQUF3USxhQUFBNTJCLE1BQUFDLFFBQUFtbUIsRUFBQXNRLGlCQUFBLElBQUF0USxFQUFBc1EsZUFBQXJxQyxRQUNBKzVCLEVBQUErVCxpQkFBQSxJQUFBL1QsRUFBQWdVLG1CQUNBaFUsRUFBQXFULFVBQUFyVCxFQUFBcVIsVUFBQSxHQUNBclIsRUFBQW5DLEtBQUFtQyxFQUFBcVIsVUFBQSxFQUFBLENBS0EsTUFBQXdoRCxFQUFBcDNELEVBQUF2aUIsS0FBQTQ1RSxFQUFBOXlELEVBQUE5bUIsS0FFQSxJQUFBNjVFLEVBQUF0QixFQUFBb0IsUUFFQTl0RixJQUFBZ3VGLElBRUFBLEVBQUEsQ0FBQSxFQUNBdEIsRUFBQW9CLEdBQUFFLEdBSUEsSUFBQUMsRUFBQUQsRUFBQUQsUUFFQS90RixJQUFBaXVGLElBRUFBLEVBQUF2M0QsRUFBQWh2QixRQUNBc21GLEVBQUFELEdBQUFFLEVBQ0FoekQsRUFBQXA3QixpQkFBQSxVQUFBcXVGLElBSUF4M0QsRUFBQXUzRCxDQUVBLENBZ0NBLEdBNUJBdjNELEVBQUF0QyxRQUFBNkcsRUFBQTdHLFFBQ0FzQyxFQUFBZ2EsVUFBQXpWLEVBQUF5VixVQUlBaGEsRUFBQXFULEtBRkFqcUMsSUFBQWpNLEVBRUEsT0FBQW9uQyxFQUFBeVEsV0FBQXpRLEVBQUF5USxXQUFBelEsRUFBQThPLEtBSUEsT0FBQTlPLEVBQUF5USxXQUFBelEsRUFBQXlRLFdBQUFBLEVBQUF6USxFQUFBOE8sTUFJQXJULEVBQUE0WCxTQUFBclQsRUFBQXFULFNBQ0E1WCxFQUFBNFYsVUFBQXJSLEVBQUFxUixVQUNBNVYsRUFBQW9DLElBQUFtQyxFQUFBbkMsSUFFQXBDLEVBQUErVSxZQUFBeFEsRUFBQXdRLFlBQ0EvVSxFQUFBNlUsZUFBQXRRLEVBQUFzUSxlQUNBN1UsRUFBQThVLGlCQUFBdlEsRUFBQXVRLGlCQUVBOVUsRUFBQXNZLGdCQUFBL1QsRUFBQStULGdCQUNBdFksRUFBQXVZLGtCQUFBaFUsRUFBQWdVLGtCQUNBdlksRUFBQXdZLGlCQUFBalUsRUFBQWlVLGlCQUVBeFksRUFBQWlhLG1CQUFBMVYsRUFBQTBWLG1CQUNBamEsRUFBQTZaLFVBQUF0VixFQUFBc1YsV0FFQSxJQUFBMDNDLEVBQUE0QyxlQUFBLElBQUFuMEQsRUFBQXcxRCx1QkFBQSxDQUVBL3VDLEVBQUFnVyxXQUFBMU0sSUFBQS92QixHQUNBdXhELE1BQUFBLENBRUEsQ0FFQSxPQUFBdnhELENBRUEsQ0FFQSxTQUFBeTNELEVBQUE5cEUsRUFBQWhELEVBQUErc0UsRUFBQW5HLEVBQUFub0YsR0FFQSxJQUFBLElBQUF1a0IsRUFBQStQLFFBQUEsT0FJQSxHQUZBL1AsRUFBQWdPLE9BQUF0ZixLQUFBc08sRUFBQWdSLFVBRUFoTyxFQUFBZ0IsUUFBQWhCLEVBQUFvVyxRQUFBcFcsRUFBQXFXLFlBRUFyVyxFQUFBZ1EsWUFBQWhRLEVBQUFpUSxlQUFBeDBCLElBQUFqTSxNQUFBd3dCLEVBQUFrUSxlQUFBNjNELEVBQUEvbUMsaUJBQUFoaEMsSUFBQSxDQUVBQSxFQUFBeVAsZ0JBQUF2bkIsaUJBQUE2aEYsRUFBQTlzRSxtQkFBQStDLEVBQUEzQyxhQUVBLE1BQUF1RCxFQUFBaXpDLEVBQUF4NkMsT0FBQTJHLEdBQ0E0VyxFQUFBNVcsRUFBQTRXLFNBRUEsR0FBQXBtQixNQUFBQyxRQUFBbW1CLEdBQUEsQ0FFQSxNQUFBa2EsRUFBQWx3QixFQUFBa3dCLE9BRUEsSUFBQSxJQUFBazVDLEVBQUEsRUFBQUMsRUFBQW41QyxFQUFBajBDLE9BQUFtdEYsRUFBQUMsRUFBQUQsSUFBQSxDQUVBLE1BQUFqM0MsRUFBQWpDLEVBQUFrNUMsR0FDQXZ6QyxFQUFBN2YsRUFBQW1jLEVBQUF6QixlQUVBLEdBQUFtRixHQUFBQSxFQUFBMW1CLFFBQUEsQ0FFQSxNQUFBbTZELEVBQUFiLEVBQUFycEUsRUFBQXkyQixFQUFBbXRDLEVBQUFub0YsR0FFQXVrQixFQUFBcVEsZUFBQXlvQixFQUFBOTRCLEVBQUFoRCxFQUFBK3NFLEVBQUFucEUsRUFBQXNwRSxFQUFBbjNDLEdBRUErRixFQUFBc3dDLG1CQUFBVyxFQUFBLEtBQUFucEUsRUFBQXNwRSxFQUFBbHFFLEVBQUEreUIsR0FFQS95QixFQUFBc1EsY0FBQXdvQixFQUFBOTRCLEVBQUFoRCxFQUFBK3NFLEVBQUFucEUsRUFBQXNwRSxFQUFBbjNDLEVBRUEsQ0FFQSxDQUVBLE1BQUEsR0FBQW5jLEVBQUE3RyxRQUFBLENBRUEsTUFBQW02RCxFQUFBYixFQUFBcnBFLEVBQUE0VyxFQUFBZ3RELEVBQUFub0YsR0FFQXVrQixFQUFBcVEsZUFBQXlvQixFQUFBOTRCLEVBQUFoRCxFQUFBK3NFLEVBQUFucEUsRUFBQXNwRSxFQUFBLE1BRUFweEMsRUFBQXN3QyxtQkFBQVcsRUFBQSxLQUFBbnBFLEVBQUFzcEUsRUFBQWxxRSxFQUFBLE1BRUFBLEVBQUFzUSxjQUFBd29CLEVBQUE5NEIsRUFBQWhELEVBQUErc0UsRUFBQW5wRSxFQUFBc3BFLEVBQUEsS0FFQSxDQUVBLENBSUEsTUFBQTVvRSxFQUFBdEIsRUFBQXNCLFNBRUEsSUFBQSxJQUFBM2tCLEVBQUEsRUFBQUMsRUFBQTBrQixFQUFBemtCLE9BQUFGLEVBQUFDLEVBQUFELElBRUFtdEYsRUFBQXhvRSxFQUFBM2tCLEdBQUFxZ0IsRUFBQStzRSxFQUFBbkcsRUFBQW5vRixFQUlBLENBRUEsU0FBQW91RixFQUFBdHRGLEdBRUFBLEVBQUFDLE9BRUFOLG9CQUFBLFVBQUEydEYsR0FJQSxJQUFBLE1BQUE1M0QsS0FBQW8yRCxFQUFBLENBRUEsTUFBQXJ4RCxFQUFBcXhELEVBQUFwMkQsR0FFQW5pQixFQUFBdlQsRUFBQUMsT0FBQXNULEtBRUEsR0FBQUEsS0FBQWtuQixFQUFBLENBRUFBLEVBQUFsbkIsR0FDQW9ELGlCQUNBOGpCLEVBQUFsbkIsRUFFQSxDQUVBLENBRUEsQ0EzVkFsVSxLQUFBOGhELE9BQUEsU0FBQS9ELEVBQUF1RCxFQUFBbGdDLEdBRUEsSUFBQSxJQUFBazZCLEVBQUE1cEMsUUFBQSxPQUNBLElBQUEsSUFBQTRwQyxFQUFBNnhDLGFBQUEsSUFBQTd4QyxFQUFBam5DLFlBQUEsT0FFQSxHQUFBLElBQUEwcEMsRUFBQTk4QyxPQUFBLE9BRUEsTUFBQWs4QyxFQUFBRCxFQUFBRSxrQkFDQW14QyxFQUFBcnhDLEVBQUFzRSxvQkFDQVosRUFBQTFELEVBQUF3RSx1QkFFQThzQyxFQUFBdHhDLEVBQUE4YSxNQUdBdzJCLEVBQUFDLFkzTXRFWSxHMk11RVpELEVBQUFsb0MsUUFBQW4xQyxNQUFBdW5ELFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQTgxQixFQUFBbG9DLFFBQUE1c0MsTUFBQXkvQyxTQUFBLEdBQ0FxMUIsRUFBQUUsZ0JBQUEsR0FJQSxNQUFBQyxFQUFBdkIsSUFBQXg1RixHQUFBb00sS0FBQUgsT0FBQWpNLEVBQ0FnN0YsRUFBQXhCLElBQUF4NUYsR0FBQW9NLEtBQUFILE9BQUFqTSxFQUlBLElBQUEsSUFBQW1OLEVBQUEsRUFBQXlaLEVBQUF1akMsRUFBQTk4QyxPQUFBRixFQUFBeVosRUFBQXpaLElBQUEsQ0FFQSxNQUFBaW5GLEVBQUFqcUMsRUFBQWg5QyxHQUNBczFELEVBQUEyeEIsRUFBQTN4QixPQUVBLFFBQUF0MkQsSUFBQXMyRCxFQUFBLENBRUF6dkQsUUFBQUMsS0FBQSx3QkFBQW1oRixFQUFBLGtCQUNBLFFBRUEsQ0FFQSxJQUFBLElBQUEzeEIsRUFBQTgyQixhQUFBLElBQUE5MkIsRUFBQWhpRCxZQUFBLFNBRUErM0UsRUFBQTFrRixLQUFBMnVELEVBQUFrMEIsU0FFQSxNQUFBc0UsRUFBQXg0QixFQUFBeTRCLGtCQTBCQSxHQXhCQTFDLEVBQUFqa0YsU0FBQTBtRixHQUVBeEMsRUFBQTNrRixLQUFBMnVELEVBQUFrMEIsVUFFQTZCLEVBQUE1cEYsRUFBQWtxRixHQUFBTixFQUFBM3BGLEVBQUFpcUYsS0FFQU4sRUFBQTVwRixFQUFBa3FGLElBRUFMLEVBQUE3cEYsRUFBQWxCLEtBQUFtRCxNQUFBaW9GLEVBQUFtQyxFQUFBcnNGLEdBQ0E0cEYsRUFBQTVwRixFQUFBNnBGLEVBQUE3cEYsRUFBQXFzRixFQUFBcnNGLEVBQ0E2ekQsRUFBQWswQixRQUFBL25GLEVBQUE2cEYsRUFBQTdwRixHQUlBNHBGLEVBQUEzcEYsRUFBQWlxRixJQUVBTCxFQUFBNXBGLEVBQUFuQixLQUFBbUQsTUFBQWlvRixFQUFBbUMsRUFBQXBzRixHQUNBMnBGLEVBQUEzcEYsRUFBQTRwRixFQUFBNXBGLEVBQUFvc0YsRUFBQXBzRixFQUNBNHpELEVBQUFrMEIsUUFBQTluRixFQUFBNHBGLEVBQUE1cEYsSUFNQSxPQUFBNHpELEVBQUF4OUIsTUFBQSxJQUFBODFELElBQUEsSUFBQUMsRUFBQSxDQUVBLE1BQUFHLEVBQUEvdUYsS0FBQUgsT0FBQWpNLEVBQUEsQ0FBQTZoQixVQUFBamUsR0FBQWdlLFVBQUFoZSxJQUFBLENBQUEsRUFFQSxPQUFBNitELEVBQUF4OUIsS0FFQXc5QixFQUFBeDlCLElBQUF2aEIsVUFJQSsrQyxFQUFBeDlCLElBQUEsSUFBQXBlLEdBQUEyeEUsRUFBQTVwRixFQUFBNHBGLEVBQUEzcEYsRUFBQXNzRixHQUNBMTRCLEVBQUF4OUIsSUFBQXZlLFFBQUFsSyxLQUFBNDNFLEVBQUE1M0UsS0FBQSxhQUVBaW1ELEVBQUFqMUMsT0FBQWsrQix3QkFFQSxDQUVBcEMsRUFBQTJFLGdCQUFBd1UsRUFBQXg5QixLQUNBcWtCLEVBQUFoaUMsUUFFQSxNQUFBOHpFLEVBQUEzNEIsRUFBQTQ0QixtQkFFQSxJQUFBLElBQUFDLEVBQUEsRUFBQUEsRUFBQUYsRUFBQUUsSUFBQSxDQUVBLE1BQUFyMUUsRUFBQXc4QyxFQUFBODRCLFlBQUFELEdBRUE1QyxFQUFBM2xGLElBQ0EwbEYsRUFBQTdwRixFQUFBcVgsRUFBQXJYLEVBQ0E2cEYsRUFBQTVwRixFQUFBb1gsRUFBQXBYLEVBQ0E0cEYsRUFBQTdwRixFQUFBcVgsRUFBQWxDLEVBQ0EwMEUsRUFBQTVwRixFQUFBb1gsRUFBQWpDLEdBR0E0MkUsRUFBQTMwRSxTQUFBeXlFLEdBRUFqMkIsRUFBQXEwQixlQUFBMUMsRUFBQWtILEdBRUEvQyxFQUFBOTFCLEVBQUErNEIsYUFFQWxCLEVBQUE1c0MsRUFBQWxnQyxFQUFBaTFDLEVBQUFqMUMsT0FBQTRtRSxFQUFBaG9GLEtBQUFILEtBRUEsRUFJQSxJQUFBdzJELEVBQUFnNUIsb0JBQUFydkYsS0FBQUgsT0FBQWpNLEdBRUF5NUYsRUFBQWgzQixFQUFBajFDLEdBSUFpMUMsRUFBQWhpRCxhQUFBLENBRUEsQ0FFQSs0RSxFQUFBcHRGLEtBQUFILEtBRUF5N0MsRUFBQWpuQyxhQUFBLEVBRUE2b0MsRUFBQTJFLGdCQUFBMUUsRUFBQW94QyxFQUFBM3RDLEVBRUEsQ0E0TkEsQ0VoYUEsU0FBQTB1QyxHQUFBanBDLEdBMlNBLE1BQUFrcEMsRUFBQSxJQXpTQSxXQUVBLElBQUFDLEdBQUEsRUFFQSxNQUFBcitFLEVBQUEsSUFBQXVHLEdBQ0EsSUFBQSszRSxFQUFBLEtBQ0EsTUFBQUMsRUFBQSxJQUFBaDRFLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQSxNQUFBLENBRUEwaEQsUUFBQSxTQUFBdTJCLEdBRUFGLElBQUFFLEdBQUFILElBRUFucEMsRUFBQXNwQyxVQUFBQSxFQUFBQSxFQUFBQSxFQUFBQSxHQUNBRixFQUFBRSxFQUlBLEVBRUFDLFVBQUEsU0FBQUMsR0FFQUwsRUFBQUssQ0FFQSxFQUVBbjNCLFNBQUEsU0FBQTlwRCxFQUFBYixFQUFBakksRUFBQUQsRUFBQW9tQyxJQUVBLElBQUFBLElBRUFyOUIsR0FBQS9JLEVBQUFrSSxHQUFBbEksRUFBQUMsR0FBQUQsR0FJQXNMLEVBQUF4SyxJQUFBaUksRUFBQWIsRUFBQWpJLEVBQUFELElBRUEsSUFBQTZwRixFQUFBcGxGLE9BQUE2RyxLQUVBazFDLEVBQUE2UixXQUFBdHBELEVBQUFiLEVBQUFqSSxFQUFBRCxHQUNBNnBGLEVBQUFob0YsS0FBQXlKLEdBSUEsRUFFQXFxRCxNQUFBLFdBRUFnMEIsR0FBQSxFQUVBQyxFQUFBLEtBQ0FDLEVBQUEvb0YsS0FBQSxFQUFBLEVBQUEsRUFBQSxFQUVBLEVBSUEsRUFpUEFvVCxFQUFBLElBL09BLFdBRUEsSUFBQXkxRSxHQUFBLEVBRUFNLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLEtBRUEsTUFBQSxDQUVBNzJCLFFBQUEsU0FBQXZ1QixHQUVBQSxFQUVBN1ksRUFBQXMwQixFQUFBNHBDLFlBSUEvOUQsRUFBQW0wQixFQUFBNHBDLFdBSUEsRUFFQTcyQixRQUFBLFNBQUE4MkIsR0FFQUosSUFBQUksR0FBQVYsSUFFQW5wQyxFQUFBNnBDLFVBQUFBLEdBQ0FKLEVBQUFJLEVBSUEsRUFFQUMsUUFBQSxTQUFBeGxELEdBRUEsR0FBQW9sRCxJQUFBcGxELEVBQUEsQ0FFQSxPQUFBQSxHQUVBLEs3TWpFWSxFNk1tRVowYixFQUFBMWIsVUFBQTBiLEVBQUErcEMsT0FDQSxNQUVBLEs3TXJFWSxFNk11RVovcEMsRUFBQTFiLFVBQUEwYixFQUFBZ3FDLFFBQ0EsTUFFQSxLN016RVksRTZNMkVaaHFDLEVBQUExYixVQUFBMGIsRUFBQWlxQyxNQUNBLE1BRUEsSzdNN0VZLEU2TXNHWixRQUVBanFDLEVBQUExYixVQUFBMGIsRUFBQWtxQyxjQXRCQSxLN01qRlksRTZNbUZabHFDLEVBQUExYixVQUFBMGIsRUFBQW1xQyxPQUNBLE1BRUEsSzdNckZZLEU2TXVGWm5xQyxFQUFBMWIsVUFBQTBiLEVBQUFvcUMsUUFDQSxNQUVBLEs3TXpGWSxFNk0yRlpwcUMsRUFBQTFiLFVBQUEwYixFQUFBcXFDLFNBQ0EsTUFFQSxLN003RlksRTZNK0ZacnFDLEVBQUExYixVQUFBMGIsRUFBQXNxQyxVQVNBWixFQUFBcGxELENBRUEsQ0FFQSxFQUVBaWxELFVBQUEsU0FBQUMsR0FFQUwsRUFBQUssQ0FFQSxFQUVBbjNCLFNBQUEsU0FBQWgvQyxHQUVBczJFLElBQUF0MkUsSUFFQTJzQyxFQUFBdXFDLFdBQUFsM0UsR0FDQXMyRSxFQUFBdDJFLEVBSUEsRUFFQThoRCxNQUFBLFdBRUFnMEIsR0FBQSxFQUVBTSxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxJQUVBLEVBSUEsRUFzSEFoMkUsRUFBQSxJQXBIQSxXQUVBLElBQUF3MUUsR0FBQSxFQUVBcUIsRUFBQSxLQUNBQyxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLEtBRUEsTUFBQSxDQUVBajRCLFFBQUEsU0FBQWs0QixHQUVBN0IsSUFFQTZCLEVBRUF0L0QsRUFBQXMwQixFQUFBaXJDLGNBSUFwL0QsRUFBQW0wQixFQUFBaXJDLGNBTUEsRUFFQWw0QixRQUFBLFNBQUFtNEIsR0FFQVYsSUFBQVUsR0FBQS9CLElBRUFucEMsRUFBQWtyQyxZQUFBQSxHQUNBVixFQUFBVSxFQUlBLEVBRUFwQixRQUFBLFNBQUFwbEQsRUFBQUMsRUFBQXVtRCxHQUVBVCxJQUFBL2xELEdBQ0FnbUQsSUFBQS9sRCxHQUNBZ21ELElBQUFPLElBRUFsckMsRUFBQXRiLFlBQUFBLEVBQUFDLEVBQUF1bUQsR0FFQVQsRUFBQS9sRCxFQUNBZ21ELEVBQUEvbEQsRUFDQWdtRCxFQUFBTyxFQUlBLEVBRUFDLE1BQUEsU0FBQXRtRCxFQUFBQyxFQUFBQyxHQUVBNmxELElBQUEvbEQsR0FDQWdtRCxJQUFBL2xELEdBQ0FnbUQsSUFBQS9sRCxJQUVBaWIsRUFBQW9yQyxVQUFBdm1ELEVBQUFDLEVBQUFDLEdBRUE2bEQsRUFBQS9sRCxFQUNBZ21ELEVBQUEvbEQsRUFDQWdtRCxFQUFBL2xELEVBSUEsRUFFQXdrRCxVQUFBLFNBQUFDLEdBRUFMLEVBQUFLLENBRUEsRUFFQW4zQixTQUFBLFNBQUFsVyxHQUVBNHVDLElBQUE1dUMsSUFFQTZELEVBQUFxckMsYUFBQWx2QyxHQUNBNHVDLEVBQUE1dUMsRUFJQSxFQUVBZ1osTUFBQSxXQUVBZzBCLEdBQUEsRUFFQXFCLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxJQUVBLEVBSUEsRUFRQU8sRUFBQSxJQUFBcHJDLFFBQ0FxckMsRUFBQSxJQUFBcnJDLFFBRUEsSUFBQXNyQyxFQUFBLENBQUEsRUFFQUMsRUFBQSxDQUFBLEVBQ0FDLEVBQUEsSUFBQXhyQyxRQUNBeXJDLEVBQUEsR0FFQUMsRUFBQSxLQUVBQyxHQUFBLEVBQ0FDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxJQUFBbHJELEdBQUEsRUFBQSxFQUFBLEdBQ0FtckQsRUFBQSxFQUNBQyxHQUFBLEVBRUFDLEVBQUEsS0FDQUMsRUFBQSxLQUVBQyxFQUFBLEtBRUFDLEVBQUEsS0FDQUMsRUFBQSxLQUVBLE1BQUE1ekIsRUFBQWhaLEVBQUF4Z0MsYUFBQXdnQyxFQUFBNnNDLGtDQUVBLElBQUFDLEdBQUEsRUFDQS8rRSxFQUFBLEVBQ0EsTUFBQWcvRSxFQUFBL3NDLEVBQUF4Z0MsYUFBQXdnQyxFQUFBZ3RDLFVBRUEsSUFBQUQsRUFBQWp6RixRQUFBLFVBRUFpVSxFQUFBNHpCLFdBQUEsY0FBQUMsS0FBQW1yRCxHQUFBLElBQ0FELEVBQUEvK0UsR0FBQSxJQUVBLElBQUFnL0UsRUFBQWp6RixRQUFBLGVBRUFpVSxFQUFBNHpCLFdBQUEsa0JBQUFDLEtBQUFtckQsR0FBQSxJQUNBRCxFQUFBLytFLEdBQUEsR0FJQSxJQUFBay9FLEVBQUEsS0FDQUMsRUFBQSxDQUFBLEVBRUEsTUFBQUMsRUFBQW50QyxFQUFBeGdDLGFBQUF3Z0MsRUFBQW90QyxhQUNBQyxFQUFBcnRDLEVBQUF4Z0MsYUFBQXdnQyxFQUFBc3RDLFVBRUFDLEdBQUEsSUFBQWw4RSxJQUFBbk4sVUFBQWlwRixHQUNBSyxHQUFBLElBQUFuOEUsSUFBQW5OLFVBQUFtcEYsR0FFQSxTQUFBSSxFQUFBajBGLEVBQUFlLEVBQUF5WixFQUFBMDVFLEdBRUEsTUFBQW5nRixFQUFBLElBQUE1USxXQUFBLEdBQ0FzWCxFQUFBK3JDLEVBQUF5dEMsZ0JBRUF6dEMsRUFBQTJ0QyxZQUFBbjBGLEVBQUF5YSxHQUNBK3JDLEVBQUE0dEMsY0FBQXAwRixFQUFBd21ELEVBQUE2dEMsbUJBQUE3dEMsRUFBQTh0QyxTQUNBOXRDLEVBQUE0dEMsY0FBQXAwRixFQUFBd21ELEVBQUErdEMsbUJBQUEvdEMsRUFBQTh0QyxTQUVBLElBQUEsSUFBQXB6RixFQUFBLEVBQUFBLEVBQUFzWixFQUFBdFosSUFFQWxCLElBQUF3bUQsRUFBQWd1QyxZQUFBeDBGLElBQUF3bUQsRUFBQWl1QyxpQkFFQWp1QyxFQUFBa3VDLFdBQUEzekYsRUFBQSxFQUFBeWxELEVBQUFtdUMsS0FBQSxFQUFBLEVBQUFULEVBQUEsRUFBQTF0QyxFQUFBbXVDLEtBQUFudUMsRUFBQXFCLGNBQUE5ekMsR0FJQXl5QyxFQUFBb3VDLFdBQUE3ekYsRUFBQUcsRUFBQSxFQUFBc2xELEVBQUFtdUMsS0FBQSxFQUFBLEVBQUEsRUFBQW51QyxFQUFBbXVDLEtBQUFudUMsRUFBQXFCLGNBQUE5ekMsR0FNQSxPQUFBMEcsQ0FFQSxDQUVBLE1BQUFvNkUsRUFBQSxDQUFBLEVBdUJBLFNBQUEzaUUsRUFBQXNFLElBRUEsSUFBQXc3RCxFQUFBeDdELEtBRUFnd0IsRUFBQXQwQixPQUFBc0UsR0FDQXc3RCxFQUFBeDdELElBQUEsRUFJQSxDQUVBLFNBQUFuRSxFQUFBbUUsSUFFQSxJQUFBdzdELEVBQUF4N0QsS0FFQWd3QixFQUFBbjBCLFFBQUFtRSxHQUNBdzdELEVBQUF4N0QsSUFBQSxFQUlBLENBMUNBcStELEVBQUFydUMsRUFBQXN1QyxZQUFBYixFQUFBenRDLEVBQUFzdUMsV0FBQXR1QyxFQUFBc3VDLFdBQUEsR0FDQUQsRUFBQXJ1QyxFQUFBdXVDLGtCQUFBZCxFQUFBenRDLEVBQUF1dUMsaUJBQUF2dUMsRUFBQXd1Qyw0QkFBQSxHQUNBSCxFQUFBcnVDLEVBQUFpdUMsa0JBQUFSLEVBQUF6dEMsRUFBQWl1QyxpQkFBQWp1QyxFQUFBaXVDLGlCQUFBLEVBQUEsR0FDQUksRUFBQXJ1QyxFQUFBZ3VDLFlBQUFQLEVBQUF6dEMsRUFBQWd1QyxXQUFBaHVDLEVBQUFndUMsV0FBQSxFQUFBLEdBSUE5RSxFQUFBNzJCLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQTMrQyxFQUFBMitDLFNBQUEsR0FDQTErQyxFQUFBMCtDLFNBQUEsR0FFQTNtQyxFQUFBczBCLEVBQUE0cEMsWUFDQWwyRSxFQUFBbzJFLFE3TXpXWSxHNk0yV1oyRSxHQUFBLEdBQ0FDLEU3TW5aWSxHNk1vWlpoakUsRUFBQXMwQixFQUFBMnVDLFdBRUF2RyxFN001WVksRzZNeWdCWixNQUFBd0csRUFBQSxDQUNBM2dHLENBQUFBLEdBQUEreEQsRUFBQTZ1QyxTQUNBLElBQUE3dUMsRUFBQTh1QyxjQUNBLElBQUE5dUMsRUFBQSt1Qyx1QkFHQUgsRTdNdGdCWSxLNk1zZ0JaNXVDLEVBQUFndkMsSUFDQUosRTdNdGdCWSxLNk1zZ0JaNXVDLEVBQUFpdkMsSUFFQSxNQUFBQyxFQUFBLENBQ0EsSUFBQWx2QyxFQUFBbXZDLEtBQ0EsSUFBQW52QyxFQUFBb3ZDLElBQ0EsSUFBQXB2QyxFQUFBcXZDLFVBQ0EzZ0csQ0FBQUEsR0FBQXN4RCxFQUFBc3ZDLFVBQ0EsSUFBQXR2QyxFQUFBdXZDLG1CQUNBLElBQUF2dkMsRUFBQXd2QyxVQUNBLElBQUF4dkMsRUFBQXl2QyxVQUNBLElBQUF6dkMsRUFBQTB2QyxvQkFDQS9nRyxDQUFBQSxHQUFBcXhELEVBQUEydkMsb0JBQ0EsSUFBQTN2QyxFQUFBNHZDLG9CQUNBLElBQUE1dkMsRUFBQTZ2QyxvQkFDQSxJQUFBN3ZDLEVBQUE4dkMsZUFDQSxJQUFBOXZDLEVBQUErdkMseUJBQ0EsSUFBQS92QyxFQUFBZ3dDLGVBQ0EsSUFBQWh3QyxFQUFBaXdDLDBCQUdBLFNBQUE3SCxFQUFBNWtELEVBQUFRLEVBQUFGLEVBQUFDLEVBQUFJLEVBQUFGLEVBQUFDLEVBQUFFLEVBQUFDLEVBQUF1QixHQUVBLEc3TXRpQlksSTZNc2lCWnBDLEdBb0JBLElBUEEsSUFBQXFvRCxJQUVBbmdFLEVBQUFzMEIsRUFBQWt3QyxPQUNBckUsR0FBQSxHN01qakJZLEk2TXFqQlpyb0QsRUFxRkFXLEVBQUFBLEdBQUFILEVBQ0FDLEVBQUFBLEdBQUFILEVBQ0FJLEVBQUFBLEdBQUFILEVBRUFDLElBQUErbkQsR0FBQTVuRCxJQUFBK25ELElBRUFsc0MsRUFBQW13QyxzQkFBQXZCLEVBQUE1cUQsR0FBQTRxRCxFQUFBenFELElBRUE0bkQsRUFBQS9uRCxFQUNBa29ELEVBQUEvbkQsR0FJQUwsSUFBQWtvRCxHQUFBam9ELElBQUFrb0QsR0FBQWhvRCxJQUFBa29ELEdBQUFqb0QsSUFBQWtvRCxJQUVBcHNDLEVBQUFvd0Msa0JBQUFsQixFQUFBcHJELEdBQUFvckQsRUFBQW5yRCxHQUFBbXJELEVBQUFqckQsR0FBQWlyRCxFQUFBaHJELElBRUE4bkQsRUFBQWxvRCxFQUNBbW9ELEVBQUFsb0QsRUFDQW9vRCxFQUFBbG9ELEVBQ0Ftb0QsRUFBQWxvRCxJQUlBLElBQUFFLEVBQUFuZ0MsT0FBQW9vRixJQUFBaG9ELElBQUFpb0QsSUFFQXRzQyxFQUFBNWIsV0FBQUEsRUFBQTc3QixFQUFBNjdCLEVBQUExOEIsRUFBQTA4QixFQUFBM2tDLEVBQUE0a0MsR0FFQWdvRCxFQUFBaHJGLEtBQUEraUMsR0FDQWtvRCxFQUFBam9ELEdBSUF5bkQsRUFBQXRvRCxFQUNBK29ELEdBQUEsT0FySEEsR0FBQS9vRCxJQUFBc29ELEdBQUFsbUQsSUFBQTJtRCxFQUFBLENBV0EsR0FUQVIsSUFBQTk5RixHQUFBaStGLElBQUFqK0YsSUFFQSt4RCxFQUFBaGMsY0FBQWdjLEVBQUE2dUMsVUFFQTlDLEVBQUE5OUYsRUFDQWkrRixFQUFBaitGLEdBSUEyM0MsRUFFQSxPQUFBcEMsR0FFQSxLN00xa0JZLEU2TTJrQlp3YyxFQUFBb3dDLGtCQUFBcHdDLEVBQUFvdkMsSUFBQXB2QyxFQUFBMnZDLG9CQUFBM3ZDLEVBQUFvdkMsSUFBQXB2QyxFQUFBMnZDLHFCQUNBLE1BRUEsSzdNN2tCWSxFNk04a0JaM3ZDLEVBQUFxd0MsVUFBQXJ3QyxFQUFBb3ZDLElBQUFwdkMsRUFBQW92QyxLQUNBLE1BRUEsSzdNaGxCWSxFNk1pbEJacHZDLEVBQUFvd0Msa0JBQUFwd0MsRUFBQW12QyxLQUFBbnZDLEVBQUEwdkMsb0JBQUExdkMsRUFBQW12QyxLQUFBbnZDLEVBQUFvdkMsS0FDQSxNQUVBLEs3TW5sQlksRTZNb2xCWnB2QyxFQUFBb3dDLGtCQUFBcHdDLEVBQUFtdkMsS0FBQW52QyxFQUFBcXZDLFVBQUFydkMsRUFBQW12QyxLQUFBbnZDLEVBQUFzdkMsV0FDQSxNQUVBLFFBQ0EvdUYsUUFBQW92QixNQUFBLHVDQUFBNlQsUUFPQSxPQUFBQSxHQUVBLEs3TXBtQlksRTZNcW1CWndjLEVBQUFvd0Msa0JBQUFwd0MsRUFBQXN2QyxVQUFBdHZDLEVBQUEydkMsb0JBQUEzdkMsRUFBQW92QyxJQUFBcHZDLEVBQUEydkMscUJBQ0EsTUFFQSxLN012bUJZLEU2TXdtQlozdkMsRUFBQXF3QyxVQUFBcndDLEVBQUFzdkMsVUFBQXR2QyxFQUFBb3ZDLEtBQ0EsTUFFQSxLN00xbUJZLEU2TTJtQlpwdkMsRUFBQW93QyxrQkFBQXB3QyxFQUFBbXZDLEtBQUFudkMsRUFBQTB2QyxvQkFBQTF2QyxFQUFBbXZDLEtBQUFudkMsRUFBQW92QyxLQUNBLE1BRUEsSzdNN21CWSxFNk04bUJacHZDLEVBQUFxd0MsVUFBQXJ3QyxFQUFBbXZDLEtBQUFudkMsRUFBQXF2QyxXQUNBLE1BRUEsUUFDQTl1RixRQUFBb3ZCLE1BQUEsdUNBQUE2VCxHQU9Bd29ELEVBQUEsS0FDQUMsRUFBQSxLQUNBRSxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQS9yRixJQUFBLEVBQUEsRUFBQSxHQUNBZ3NGLEVBQUEsRUFFQVIsRUFBQXRvRCxFQUNBK29ELEVBQUEzbUQsQ0FFQSxPQS9GQSxJQUFBaW1ELElBRUFoZ0UsRUFBQW0wQixFQUFBa3dDLE9BQ0FyRSxHQUFBLEVBd0lBLENBMENBLFNBQUE0QyxFQUFBbFgsR0FFQWlWLElBQUFqVixJQUVBQSxFQUVBdjNCLEVBQUFzd0MsVUFBQXR3QyxFQUFBdXdDLElBSUF2d0MsRUFBQXN3QyxVQUFBdHdDLEVBQUF3d0MsS0FJQWhFLEVBQUFqVixFQUlBLENBRUEsU0FBQW1YLEVBQUErQixHN001dkJZLEk2TTh2QlpBLEdBRUEva0UsRUFBQXMwQixFQUFBMnVDLFdBRUE4QixJQUFBaEUsSTdNandCWSxJNk1td0JaZ0UsRUFFQXp3QyxFQUFBeXdDLFNBQUF6d0MsRUFBQTB3QyxNN01wd0JZLEk2TXN3QlpELEVBRUF6d0MsRUFBQXl3QyxTQUFBendDLEVBQUEyd0MsT0FJQTN3QyxFQUFBeXdDLFNBQUF6d0MsRUFBQTR3QyxrQkFRQS9rRSxFQUFBbTBCLEVBQUEydUMsV0FJQWxDLEVBQUFnRSxDQUVBLENBY0EsU0FBQUksRUFBQXRyRCxFQUFBdXJELEVBQUE5akIsR0FFQXpuQyxHQUVBN1osRUFBQXMwQixFQUFBK3dDLHFCQUVBcEUsSUFBQW1FLEdBQUFsRSxJQUFBNWYsSUFFQWh0QixFQUFBemEsY0FBQXVyRCxFQUFBOWpCLEdBRUEyZixFQUFBbUUsRUFDQWxFLEVBQUE1ZixJQU1BbmhELEVBQUFtMEIsRUFBQSt3QyxvQkFJQSxDQWdZQSxNQUFBLENBRUE5d0MsUUFBQSxDQUNBbjFDLE1BQUFvK0UsRUFDQTcxRSxNQUFBSyxFQUNBeW9DLFFBQUF4b0MsR0FHQStYLE9BQUFBLEVBQ0FHLFFBQUFBLEVBRUFtbEUsZ0JBenhCQSxTQUFBejJGLEVBQUEwMkYsR0FFQSxPQUFBeEYsRUFBQWx4RixLQUFBMDJGLElBRUFqeEMsRUFBQWd4QyxnQkFBQXoyRixFQUFBMDJGLEdBRUF4RixFQUFBbHhGLEdBQUEwMkYsRUFJQTEyRixJQUFBeWxELEVBQUFreEMsbUJBRUF6RixFQUFBenJDLEVBQUFteEMsYUFBQUYsR0FJQTEyRixJQUFBeWxELEVBQUFteEMsY0FFQTFGLEVBQUF6ckMsRUFBQWt4QyxrQkFBQUQsSUFJQSxFQU1BLEVBOHZCQUcsWUE1dkJBLFNBQUE5MkMsRUFBQTIyQyxHQUVBLElBQUFHLEVBQUF6RixFQUVBMzlFLEdBQUEsRUFFQSxHQUFBc3NDLEVBQUEsQ0FFQTgyQyxFQUFBMUYsRUFBQXZyQyxJQUFBOHdDLFFBRUF2M0YsSUFBQTAzRixJQUVBQSxFQUFBLEdBQ0ExRixFQUFBcHJGLElBQUEyd0YsRUFBQUcsSUFJQSxNQUFBeGdGLEVBQUEwcEMsRUFBQTFwQyxTQUVBLEdBQUF3Z0YsRUFBQXgyRixTQUFBZ1csRUFBQWhXLFFBQUF3MkYsRUFBQSxLQUFBcHhDLEVBQUFxeEMsa0JBQUEsQ0FFQSxJQUFBLElBQUEzMkYsRUFBQSxFQUFBeVosRUFBQXZELEVBQUFoVyxPQUFBRixFQUFBeVosRUFBQXpaLElBRUEwMkYsRUFBQTEyRixHQUFBc2xELEVBQUFxeEMsa0JBQUEzMkYsRUFJQTAyRixFQUFBeDJGLE9BQUFnVyxFQUFBaFcsT0FFQW9ULEdBQUEsQ0FFQSxDQUVBLE1BRUFvakYsRUFBQSxLQUFBcHhDLEVBQUEwd0MsT0FFQVUsRUFBQSxHQUFBcHhDLEVBQUEwd0MsS0FFQTFpRixHQUFBLEdBTUFBLEdBRUFneUMsRUFBQW94QyxZQUFBQSxFQUlBLEVBMnNCQUUsV0F6c0JBLFNBQUEvOEIsR0FFQSxPQUFBcTNCLElBQUFyM0IsSUFFQXZVLEVBQUFzeEMsV0FBQS84QixHQUVBcTNCLEVBQUFyM0IsR0FFQSxFQU1BLEVBNnJCQTZ6QixZQUFBQSxFQUNBbUosWUFoaEJBLFNBQUE1OEQsRUFBQTY4RCxHN010ckJZLEk2TXdyQlo3OEQsRUFBQThPLEtBQ0E1WCxFQUFBbTBCLEVBQUEydUMsV0FDQWpqRSxFQUFBczBCLEVBQUEydUMsV0FFQSxJQUFBcFgsRUFBQTVpRCxFQUFBOE8sT0FBQWgyQyxFQUNBK2pHLElBQUFqYSxHQUFBQSxHQUVBa1gsRUFBQWxYLEc3TTdyQlksSTZNK3JCWjVpRCxFQUFBNk8sV0FBQSxJQUFBN08sRUFBQWlQLFlBQ0F3a0QsRTdNanNCWSxHNk1rc0JaQSxFQUFBenpELEVBQUE2TyxTQUFBN08sRUFBQXFQLGNBQUFyUCxFQUFBbVAsU0FBQW5QLEVBQUFvUCxTQUFBcFAsRUFBQXdQLG1CQUFBeFAsRUFBQXNQLGNBQUF0UCxFQUFBdVAsY0FBQXZQLEVBQUF5UCxXQUFBelAsRUFBQTBQLFdBQUExUCxFQUFBaVIsb0JBRUFseUIsRUFBQW8yRSxRQUFBbjFELEVBQUEyUCxXQUNBNXdCLEVBQUFvL0MsUUFBQW4rQixFQUFBNFAsV0FDQTd3QixFQUFBcS9DLFFBQUFwK0IsRUFBQTZQLFlBQ0Ewa0QsRUFBQW4yQixRQUFBcCtCLEVBQUEwUSxZQUVBLE1BQUFMLEVBQUFyUSxFQUFBcVEsYUFDQXJ4QixFQUFBbS9DLFFBQUE5dEIsR0FDQUEsSUFFQXJ4QixFQUFBby9DLFFBQUFwK0IsRUFBQThQLGtCQUNBOXdCLEVBQUFtMkUsUUFBQW4xRCxFQUFBK1AsWUFBQS9QLEVBQUFnUSxXQUFBaFEsRUFBQWlRLGlCQUNBanhCLEVBQUF3M0UsTUFBQXgyRCxFQUFBa1EsWUFBQWxRLEVBQUFtUSxhQUFBblEsRUFBQW9RLGVBSUE4ckQsRUFBQWw4RCxFQUFBNFEsY0FBQTVRLEVBQUE2USxvQkFBQTdRLEVBQUE4USxxQkFFQSxJQUFBOVEsRUFBQWdSLGdCQUNBamEsRUFBQXMwQixFQUFBeXhDLDBCQUNBNWxFLEVBQUFtMEIsRUFBQXl4Qyx5QkFFQSxFQThlQWhELGFBQUFBLEVBQ0FDLFlBQUFBLEVBRUFnRCxhQXZiQSxTQUFBOXdGLEdBRUFBLElBQUE4ckYsSUFFQUksR0FBQTlzQyxFQUFBMnhDLFVBQUEvd0YsR0FFQThyRixFQUFBOXJGLEVBSUEsRUE4YUFpd0YsaUJBQUFBLEVBRUF4SSxlQXZaQSxTQUFBOTBFLEdBRUFBLEVBRUFtWSxFQUFBczBCLEVBQUE0eEMsY0FJQS9sRSxFQUFBbTBCLEVBQUE0eEMsYUFJQSxFQTZZQUMsY0F6WUEsU0FBQUMsUUFFQXA0RixJQUFBbzRGLElBQUFBLEVBQUE5eEMsRUFBQSt4QyxTQUFBLzRCLEVBQUEsR0FFQWkwQixJQUFBNkUsSUFFQTl4QyxFQUFBNnhDLGNBQUFDLEdBQ0E3RSxFQUFBNkUsRUFJQSxFQStYQW5FLFlBN1hBLFNBQUFxRSxFQUFBQyxFQUFBSCxRQUVBcDRGLElBQUFvNEYsSUFJQUEsRUFGQSxPQUFBN0UsRUFFQWp0QyxFQUFBK3hDLFNBQUEvNEIsRUFBQSxFQUlBaTBCLEdBTUEsSUFBQWlGLEVBQUFoRixFQUFBNEUsUUFFQXA0RixJQUFBdzRGLElBRUFBLEVBQUEsQ0FBQTE0RixVQUFBRSxFQUFBdWEsYUFBQXZhLEdBQ0F3ekYsRUFBQTRFLEdBQUFJLEdBSUFBLEVBQUExNEYsT0FBQXc0RixHQUFBRSxFQUFBaitFLFVBQUFnK0UsSUFFQWhGLElBQUE2RSxJQUVBOXhDLEVBQUE2eEMsY0FBQUMsR0FDQTdFLEVBQUE2RSxHQUlBOXhDLEVBQUEydEMsWUFBQXFFLEVBQUFDLEdBQUE1RCxFQUFBMkQsSUFFQUUsRUFBQTE0RixLQUFBdzRGLEVBQ0FFLEVBQUFqK0UsUUFBQWcrRSxFQUlBLEVBcVZBRSxjQW5WQSxXQUVBLE1BQUFELEVBQUFoRixFQUFBRCxRQUVBdnpGLElBQUF3NEYsUUFBQXg0RixJQUFBdzRGLEVBQUExNEYsT0FFQXdtRCxFQUFBMnRDLFlBQUF1RSxFQUFBMTRGLEtBQUEsTUFFQTA0RixFQUFBMTRGLFVBQUFFLEVBQ0F3NEYsRUFBQWorRSxhQUFBdmEsRUFJQSxFQXVVQTA0RixxQkFyVUEsV0FFQSxJQUVBcHlDLEVBQUFveUMscUJBQUFDLE1BQUFyeUMsRUFBQXR3QixVQUVBLENBQUEsTUFBQUMsR0FFQXB2QixRQUFBb3ZCLE1BQUEsb0JBQUFBLEVBRUEsQ0FFQSxFQTBUQTJpRSxxQkF4VEEsV0FFQSxJQUVBdHlDLEVBQUFzeUMscUJBQUFELE1BQUFyeUMsRUFBQXR3QixVQUVBLENBQUEsTUFBQUMsR0FFQXB2QixRQUFBb3ZCLE1BQUEsb0JBQUFBLEVBRUEsQ0FFQSxFQTZTQXkrRCxXQXZOQSxXQUVBLElBRUFwdUMsRUFBQW91QyxXQUFBaUUsTUFBQXJ5QyxFQUFBdHdCLFVBRUEsQ0FBQSxNQUFBQyxHQUVBcHZCLFFBQUFvdkIsTUFBQSxvQkFBQUEsRUFFQSxDQUVBLEVBNE1BdStELFdBMU1BLFdBRUEsSUFFQWx1QyxFQUFBa3VDLFdBQUFtRSxNQUFBcnlDLEVBQUF0d0IsVUFFQSxDQUFBLE1BQUFDLEdBRUFwdkIsUUFBQW92QixNQUFBLG9CQUFBQSxFQUVBLENBRUEsRUFnTUE0aUUsaUJBdEtBLFNBQUFDLEVBQUFqK0IsR0FFQSxJQUFBeGxELEVBQUF3OEUsRUFBQXByQyxJQUFBb1UsUUFFQTc2RCxJQUFBcVYsSUFFQUEsRUFBQSxJQUFBbXhDLFFBRUFxckMsRUFBQWpyRixJQUFBaTBELEVBQUF4bEQsSUFJQSxJQUFBMGpGLEVBQUExakYsRUFBQW94QyxJQUFBcXlDLFFBRUE5NEYsSUFBQSs0RixJQUVBQSxFQUFBenlDLEVBQUEweUMscUJBQUFuK0IsRUFBQWkrQixFQUFBem9GLE1BRUFnRixFQUFBek8sSUFBQWt5RixFQUFBQyxHQUlBLEVBaUpBRSxvQkEvSUEsU0FBQUgsRUFBQWorQixHQUVBLE1BQ0FrK0IsRUFEQWxILEVBQUFwckMsSUFBQW9VLEdBQ0FwVSxJQUFBcXlDLEdBRUFsSCxFQUFBbnJDLElBQUFvVSxLQUFBaytCLElBR0F6eUMsRUFBQTJ5QyxvQkFBQXArQixFQUFBaytCLEVBQUFELEVBQUFJLHFCQUVBdEgsRUFBQWhyRixJQUFBaTBELEVBQUFrK0IsR0FJQSxFQW1JQUksYUF6UEEsV0FFQSxJQUVBN3lDLEVBQUE2eUMsYUFBQVIsTUFBQXJ5QyxFQUFBdHdCLFVBRUEsQ0FBQSxNQUFBQyxHQUVBcHZCLFFBQUFvdkIsTUFBQSxvQkFBQUEsRUFFQSxDQUVBLEVBOE9BbWpFLGFBNU9BLFdBRUEsSUFFQTl5QyxFQUFBOHlDLGFBQUFULE1BQUFyeUMsRUFBQXR3QixVQUVBLENBQUEsTUFBQUMsR0FFQXB2QixRQUFBb3ZCLE1BQUEsb0JBQUFBLEVBRUEsQ0FFQSxFQWlPQW9qRSxjQW5UQSxXQUVBLElBRUEveUMsRUFBQSt5QyxjQUFBVixNQUFBcnlDLEVBQUF0d0IsVUFFQSxDQUFBLE1BQUFDLEdBRUFwdkIsUUFBQW92QixNQUFBLG9CQUFBQSxFQUVBLENBRUEsRUF3U0FxakUsY0F0U0EsV0FFQSxJQUVBaHpDLEVBQUFnekMsY0FBQVgsTUFBQXJ5QyxFQUFBdHdCLFVBRUEsQ0FBQSxNQUFBQyxHQUVBcHZCLFFBQUFvdkIsTUFBQSxvQkFBQUEsRUFFQSxDQUVBLEVBMlJBc2pFLHdCQXpSQSxXQUVBLElBRUFqekMsRUFBQWl6Qyx3QkFBQVosTUFBQXJ5QyxFQUFBdHdCLFVBRUEsQ0FBQSxNQUFBQyxHQUVBcHZCLFFBQUFvdkIsTUFBQSxvQkFBQUEsRUFFQSxDQUVBLEVBOFFBdWpFLHdCQTVRQSxXQUVBLElBRUFsekMsRUFBQWt6Qyx3QkFBQWIsTUFBQXJ5QyxFQUFBdHdCLFVBRUEsQ0FBQSxNQUFBQyxHQUVBcHZCLFFBQUFvdkIsTUFBQSxvQkFBQUEsRUFFQSxDQUVBLEVBa1FBcmMsUUF0TUEsU0FBQUEsSUFFQSxJQUFBaTZFLEVBQUF0cEYsT0FBQXFQLEtBRUEwc0MsRUFBQTFzQyxRQUFBQSxFQUFBblgsRUFBQW1YLEVBQUFsWCxFQUFBa1gsRUFBQWhDLEVBQUFnQyxFQUFBL0IsR0FDQWc4RSxFQUFBbHNGLEtBQUFpUyxHQUlBLEVBOExBRSxTQTVMQSxTQUFBQSxJQUVBLElBQUFnNkUsRUFBQXZwRixPQUFBdVAsS0FFQXdzQyxFQUFBeHNDLFNBQUFBLEVBQUFyWCxFQUFBcVgsRUFBQXBYLEVBQUFvWCxFQUFBbEMsRUFBQWtDLEVBQUFqQyxHQUNBaThFLEVBQUFuc0YsS0FBQW1TLEdBSUEsRUFxTEEyaEQsTUF6SUEsV0FJQW5WLEVBQUFuMEIsUUFBQW0wQixFQUFBa3dDLE9BQ0Fsd0MsRUFBQW4wQixRQUFBbTBCLEVBQUEydUMsV0FDQTN1QyxFQUFBbjBCLFFBQUFtMEIsRUFBQTRwQyxZQUNBNXBDLEVBQUFuMEIsUUFBQW0wQixFQUFBK3dDLHFCQUNBL3dDLEVBQUFuMEIsUUFBQW0wQixFQUFBNHhDLGNBQ0E1eEMsRUFBQW4wQixRQUFBbTBCLEVBQUFpckMsY0FDQWpyQyxFQUFBbjBCLFFBQUFtMEIsRUFBQXl4QywwQkFFQXp4QyxFQUFBaGMsY0FBQWdjLEVBQUE2dUMsVUFDQTd1QyxFQUFBcXdDLFVBQUFyd0MsRUFBQW92QyxJQUFBcHZDLEVBQUFtdkMsTUFDQW52QyxFQUFBb3dDLGtCQUFBcHdDLEVBQUFvdkMsSUFBQXB2QyxFQUFBbXZDLEtBQUFudkMsRUFBQW92QyxJQUFBcHZDLEVBQUFtdkMsTUFDQW52QyxFQUFBNWIsV0FBQSxFQUFBLEVBQUEsRUFBQSxHQUVBNGIsRUFBQXNwQyxXQUFBLEdBQUEsR0FBQSxHQUFBLEdBQ0F0cEMsRUFBQTZSLFdBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQTdSLEVBQUE2cEMsV0FBQSxHQUNBN3BDLEVBQUExYixVQUFBMGIsRUFBQWlxQyxNQUNBanFDLEVBQUF1cUMsV0FBQSxHQUVBdnFDLEVBQUFrckMsWUFBQSxZQUNBbHJDLEVBQUF0YixZQUFBc2IsRUFBQWdxQyxPQUFBLEVBQUEsWUFDQWhxQyxFQUFBb3JDLFVBQUFwckMsRUFBQW16QyxLQUFBbnpDLEVBQUFtekMsS0FBQW56QyxFQUFBbXpDLE1BQ0FuekMsRUFBQXFyQyxhQUFBLEdBRUFyckMsRUFBQXl3QyxTQUFBendDLEVBQUEwd0MsTUFDQTF3QyxFQUFBc3dDLFVBQUF0d0MsRUFBQXd3QyxLQUVBeHdDLEVBQUF6YSxjQUFBLEVBQUEsR0FFQXlhLEVBQUE2eEMsY0FBQTd4QyxFQUFBK3hDLFVBRUEveEMsRUFBQWd4QyxnQkFBQWh4QyxFQUFBbXhDLFlBQUEsTUFDQW54QyxFQUFBZ3hDLGdCQUFBaHhDLEVBQUFreEMsaUJBQUEsTUFDQWx4QyxFQUFBZ3hDLGdCQUFBaHhDLEVBQUFvekMsaUJBQUEsTUFFQXB6QyxFQUFBc3hDLFdBQUEsTUFFQXR4QyxFQUFBMnhDLFVBQUEsR0FFQTN4QyxFQUFBMXNDLFFBQUEsRUFBQSxFQUFBMHNDLEVBQUE5MUMsT0FBQXRKLE1BQUFvL0MsRUFBQTkxQyxPQUFBckosUUFDQW0vQyxFQUFBeHNDLFNBQUEsRUFBQSxFQUFBd3NDLEVBQUE5MUMsT0FBQXRKLE1BQUFvL0MsRUFBQTkxQyxPQUFBckosUUFJQTJxRixFQUFBLENBQUEsRUFFQXlCLEVBQUEsS0FDQUMsRUFBQSxDQUFBLEVBRUF6QixFQUFBLENBQUEsRUFDQUMsRUFBQSxJQUFBeHJDLFFBQ0F5ckMsRUFBQSxHQUVBQyxFQUFBLEtBRUFDLEdBQUEsRUFDQUMsRUFBQSxLQUNBQyxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLElBQUFsckQsR0FBQSxFQUFBLEVBQUEsR0FDQW1yRCxFQUFBLEVBQ0FDLEdBQUEsRUFFQUMsRUFBQSxLQUNBQyxFQUFBLEtBRUFDLEVBQUEsS0FFQUMsRUFBQSxLQUNBQyxFQUFBLEtBRUFXLEVBQUFqdEYsSUFBQSxFQUFBLEVBQUEwL0MsRUFBQTkxQyxPQUFBdEosTUFBQW8vQyxFQUFBOTFDLE9BQUFySixRQUNBMnNGLEVBQUFsdEYsSUFBQSxFQUFBLEVBQUEwL0MsRUFBQTkxQyxPQUFBdEosTUFBQW8vQyxFQUFBOTFDLE9BQUFySixRQUVBcW9GLEVBQUEvekIsUUFDQXpoRCxFQUFBeWhELFFBQ0F4aEQsRUFBQXdoRCxPQUVBLEVBc0RBLENDL3FDQSxTQUFBaytCLEdBQUF6eUYsRUFBQUMsRUFBQXdPLEVBQUE3VixHQUVBLE1BQUE4NUYsRUFxR0EsU0FBQTk1RixHQUVBLE9BQUFBLEdBRUEsS0FBQTNILEdBQ0EsS0FBQUMsR0FDQSxNQUFBLENBQUE0dUQsV0FBQSxFQUFBN2UsV0FBQSxHQUNBLEtBQUE3dkMsR0FDQSxLQUFBRCxHQUNBLEtBQUFLLEdBQ0EsTUFBQSxDQUFBc3VELFdBQUEsRUFBQTdlLFdBQUEsR0FDQSxLQUFBeHZDLEdBQ0EsS0FBQUMsR0FDQSxNQUFBLENBQUFvdUQsV0FBQSxFQUFBN2UsV0FBQSxHQUNBLEtBQUEzdkMsR0FDQSxLQUFBRCxHQUNBLEtBQUFFLEdBQ0EsTUFBQSxDQUFBdXVELFdBQUEsRUFBQTdlLFdBQUEsR0FDQSxLQUFBcnZDLEdBQ0EsTUFBQSxDQUFBa3VELFdBQUEsRUFBQTdlLFdBQUEsR0FJQSxNQUFBLElBQUE5a0MsTUFBQSx3QkFBQXZELEtBRUEsQ0E5SEErNUYsQ0FBQS81RixHQUVBLE9BQUE2VixHQUdBLEtBQUE1YyxHQUVBLEtBQUFHLEdBQ0EsT0FBQWdPLEVBQUFDLEVBQ0EsS0FBQWhPLEdBQ0EsT0FBQStOLEVBQUFDLEVBQUEsRUFDQSxLQUFBN04sR0FFQSxLQUFBQyxHQUNBLE9BQUEyTixFQUFBQyxFQUFBeXlGLEVBQUF6eEQsV0FBQXl4RCxFQUFBNXlDLFdBQ0EsS0FBQXh0RCxHQUVBLEtBQUFDLEdBQ0EsT0FBQXlOLEVBQUFDLEVBQUEsRUFBQXl5RixFQUFBenhELFdBQUF5eEQsRUFBQTV5QyxXQUNBLEtBQUFodUQsR0FDQSxPQUFBa08sRUFBQUMsRUFBQSxFQUFBeXlGLEVBQUF6eEQsV0FBQXl4RCxFQUFBNXlDLFdBQ0EsS0FBQS90RCxHQUVBLEtBQUFVLEdBQ0EsT0FBQXVOLEVBQUFDLEVBQUEsRUFBQXl5RixFQUFBenhELFdBQUF5eEQsRUFBQTV5QyxXQUdBLEtBQUFwdEQsR0FDQSxLQUFBQyxHQUNBLE9BQUEwSCxLQUFBbUQsT0FBQXdDLEVBQUEsR0FBQSxHQUFBM0YsS0FBQW1ELE9BQUF5QyxFQUFBLEdBQUEsR0FBQSxFQUNBLEtBQUFyTixHQUNBLEtBQUFDLEdBQ0EsT0FBQXdILEtBQUFtRCxPQUFBd0MsRUFBQSxHQUFBLEdBQUEzRixLQUFBbUQsT0FBQXlDLEVBQUEsR0FBQSxHQUFBLEdBR0EsS0FBQWxOLEdBQ0EsS0FBQUUsR0FDQSxPQUFBb0gsS0FBQWEsSUFBQThFLEVBQUEsSUFBQTNGLEtBQUFhLElBQUErRSxFQUFBLEdBQUEsRUFDQSxLQUFBbk4sR0FDQSxLQUFBRSxHQUNBLE9BQUFxSCxLQUFBYSxJQUFBOEUsRUFBQSxHQUFBM0YsS0FBQWEsSUFBQStFLEVBQUEsR0FBQSxFQUdBLEtBQUEvTSxHQUNBLEtBQUFDLEdBQ0EsT0FBQWtILEtBQUFtRCxPQUFBd0MsRUFBQSxHQUFBLEdBQUEzRixLQUFBbUQsT0FBQXlDLEVBQUEsR0FBQSxHQUFBLEVBQ0EsS0FBQTdNLEdBSUEsS0FBQUMsR0FDQSxPQUFBZ0gsS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsR0FBQTNGLEtBQUFtRCxPQUFBeUMsRUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBM00sR0FDQSxPQUFBK0csS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsR0FBQTNGLEtBQUFtRCxPQUFBeUMsRUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBMU0sR0FDQSxPQUFBOEcsS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsR0FBQTNGLEtBQUFtRCxPQUFBeUMsRUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBek0sR0FDQSxPQUFBNkcsS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsR0FBQTNGLEtBQUFtRCxPQUFBeUMsRUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBeE0sR0FDQSxPQUFBNEcsS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsR0FBQTNGLEtBQUFtRCxPQUFBeUMsRUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBdk0sR0FDQSxPQUFBMkcsS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsR0FBQTNGLEtBQUFtRCxPQUFBeUMsRUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBdE0sR0FDQSxPQUFBMEcsS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsR0FBQTNGLEtBQUFtRCxPQUFBeUMsRUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBck0sR0FDQSxPQUFBeUcsS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsR0FBQTNGLEtBQUFtRCxPQUFBeUMsRUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBcE0sR0FDQSxPQUFBd0csS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsSUFBQTNGLEtBQUFtRCxPQUFBeUMsRUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBbk0sR0FDQSxPQUFBdUcsS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsSUFBQTNGLEtBQUFtRCxPQUFBeUMsRUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBbE0sR0FDQSxPQUFBc0csS0FBQW1ELE9BQUF3QyxFQUFBLEdBQUEsSUFBQTNGLEtBQUFtRCxPQUFBeUMs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QSxHQUNBLEVBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUNBLEdBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUNBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUdBLEdBQUFqSCxHQUFBbE0sRUFBQSxHQUFBa00sRUFBQWxNLEVBQ0EsRUFBQWtNLEdBQUFsTSxFQUFBLEVBQUFrTSxFQUFBbE0sR0FHQWtNLEdBQUFsTSxFQUFBLEdBQUFrTSxFQUFBbE0sRUFBQSxFQUNBa00sR0FBQWxNLEVBQUEsRUFBQWtNLEVBQUFsTSxFQUFBLEdBR0FBLEVBQUEsR0FBQWtNLEVBQUFsTSxFQUFBLEdBQUFrTSxHQUNBbE0sRUFBQSxFQUFBa00sRUFBQWxNLEVBQUEsRUFBQWtNLEdBR0EsQ0FDQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsR0FDQSxFQUFBLEdBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsRUFDQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsR0FDQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsR0FDQSxFQUFBLEdBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsRUFDQSxFQUFBLEdBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFDQSxHQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsRUFDQSxHQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FDQSxFQUFBLEdBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FHQStULEVBQUE4aEcsR0FFQXprSCxLQUFBSCxLQUFBLHVC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
